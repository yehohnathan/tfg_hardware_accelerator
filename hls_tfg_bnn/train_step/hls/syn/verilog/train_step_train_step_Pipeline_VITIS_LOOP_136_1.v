// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module train_step_train_step_Pipeline_VITIS_LOOP_136_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        W1_out_address0,
        W1_out_ce0,
        W1_out_we0,
        W1_out_d0,
        W1_out_address1,
        W1_out_ce1,
        W1_out_we1,
        W1_out_d1,
        W1_0_0_load,
        W1_0_1_load,
        W1_0_2_load,
        W1_0_3_load,
        W1_1_0_load,
        W1_1_1_load,
        W1_1_2_load,
        W1_1_3_load,
        W1_2_0_load,
        W1_2_1_load,
        W1_2_2_load,
        W1_2_3_load,
        W1_3_0_load,
        W1_3_1_load,
        W1_3_2_load,
        W1_3_3_load,
        W1_4_0_load,
        W1_4_1_load,
        W1_4_2_load,
        W1_4_3_load,
        W1_5_0_load,
        W1_5_1_load,
        W1_5_2_load,
        W1_5_3_load,
        W1_6_0_load,
        W1_6_1_load,
        W1_6_2_load,
        W1_6_3_load,
        W1_7_0_load,
        W1_7_1_load,
        W1_7_2_load,
        W1_7_3_load
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] W1_out_address0;
output   W1_out_ce0;
output   W1_out_we0;
output  [7:0] W1_out_d0;
output  [4:0] W1_out_address1;
output   W1_out_ce1;
output   W1_out_we1;
output  [7:0] W1_out_d1;
input  [1:0] W1_0_0_load;
input  [1:0] W1_0_1_load;
input  [1:0] W1_0_2_load;
input  [1:0] W1_0_3_load;
input  [1:0] W1_1_0_load;
input  [1:0] W1_1_1_load;
input  [1:0] W1_1_2_load;
input  [1:0] W1_1_3_load;
input  [1:0] W1_2_0_load;
input  [1:0] W1_2_1_load;
input  [1:0] W1_2_2_load;
input  [1:0] W1_2_3_load;
input  [1:0] W1_3_0_load;
input  [1:0] W1_3_1_load;
input  [1:0] W1_3_2_load;
input  [1:0] W1_3_3_load;
input  [1:0] W1_4_0_load;
input  [1:0] W1_4_1_load;
input  [1:0] W1_4_2_load;
input  [1:0] W1_4_3_load;
input  [1:0] W1_5_0_load;
input  [1:0] W1_5_1_load;
input  [1:0] W1_5_2_load;
input  [1:0] W1_5_3_load;
input  [1:0] W1_6_0_load;
input  [1:0] W1_6_1_load;
input  [1:0] W1_6_2_load;
input  [1:0] W1_6_3_load;
input  [1:0] W1_7_0_load;
input  [1:0] W1_7_1_load;
input  [1:0] W1_7_2_load;
input  [1:0] W1_7_3_load;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln136_fu_399_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state4;
wire   [1:0] trunc_ln136_fu_411_p1;
reg   [1:0] trunc_ln136_reg_754;
wire   [1:0] tmp_2_fu_499_p11;
reg   [1:0] tmp_2_reg_764;
wire   [1:0] tmp_3_fu_523_p11;
reg   [1:0] tmp_3_reg_769;
wire   [1:0] tmp_4_fu_547_p11;
reg   [1:0] tmp_4_reg_774;
wire   [1:0] tmp_5_fu_571_p11;
reg   [1:0] tmp_5_reg_779;
wire   [1:0] tmp_6_fu_595_p11;
reg   [1:0] tmp_6_reg_784;
wire   [1:0] tmp_7_fu_619_p11;
reg   [1:0] tmp_7_reg_789;
wire   [63:0] zext_ln138_fu_423_p1;
wire   [63:0] zext_ln138_1_fu_436_p1;
wire   [63:0] zext_ln138_2_fu_655_p1;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln138_3_fu_667_p1;
wire   [63:0] zext_ln138_4_fu_687_p1;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln138_5_fu_699_p1;
wire   [63:0] zext_ln138_6_fu_719_p1;
wire   [63:0] zext_ln138_7_fu_731_p1;
reg   [2:0] j_fu_122;
wire   [2:0] add_ln136_fu_405_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_j_2;
reg    W1_out_we1_local;
reg   [7:0] W1_out_d1_local;
wire  signed [7:0] tmp_cast_fu_465_p1;
reg    W1_out_ce1_local;
reg   [4:0] W1_out_address1_local;
reg    W1_out_we0_local;
reg   [7:0] W1_out_d0_local;
wire  signed [7:0] tmp_1_cast_fu_494_p1;
reg    W1_out_ce0_local;
reg   [4:0] W1_out_address0_local;
wire  signed [7:0] tmp_2_cast_fu_672_p1;
wire  signed [7:0] tmp_3_cast_fu_676_p1;
wire  signed [7:0] tmp_4_cast_fu_704_p1;
wire  signed [7:0] tmp_5_cast_fu_708_p1;
wire  signed [7:0] tmp_6_cast_fu_736_p1;
wire  signed [7:0] sext_ln138_fu_740_p1;
wire   [4:0] tmp_8_fu_415_p3;
wire   [4:0] tmp_9_fu_428_p3;
wire   [1:0] tmp_fu_441_p9;
wire   [1:0] tmp_fu_441_p11;
wire   [1:0] tmp_1_fu_470_p9;
wire   [1:0] tmp_1_fu_470_p11;
wire   [1:0] tmp_2_fu_499_p9;
wire   [1:0] tmp_3_fu_523_p9;
wire   [1:0] tmp_4_fu_547_p9;
wire   [1:0] tmp_5_fu_571_p9;
wire   [1:0] tmp_6_fu_595_p9;
wire   [1:0] tmp_7_fu_619_p9;
wire   [4:0] tmp_s_fu_648_p3;
wire   [4:0] tmp_10_fu_660_p3;
wire   [4:0] tmp_11_fu_680_p3;
wire   [4:0] tmp_12_fu_692_p3;
wire   [4:0] tmp_13_fu_712_p3;
wire   [4:0] tmp_14_fu_724_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [1:0] tmp_fu_441_p1;
wire   [1:0] tmp_fu_441_p3;
wire  signed [1:0] tmp_fu_441_p5;
wire  signed [1:0] tmp_fu_441_p7;
wire   [1:0] tmp_1_fu_470_p1;
wire   [1:0] tmp_1_fu_470_p3;
wire  signed [1:0] tmp_1_fu_470_p5;
wire  signed [1:0] tmp_1_fu_470_p7;
wire   [1:0] tmp_2_fu_499_p1;
wire   [1:0] tmp_2_fu_499_p3;
wire  signed [1:0] tmp_2_fu_499_p5;
wire  signed [1:0] tmp_2_fu_499_p7;
wire   [1:0] tmp_3_fu_523_p1;
wire   [1:0] tmp_3_fu_523_p3;
wire  signed [1:0] tmp_3_fu_523_p5;
wire  signed [1:0] tmp_3_fu_523_p7;
wire   [1:0] tmp_4_fu_547_p1;
wire   [1:0] tmp_4_fu_547_p3;
wire  signed [1:0] tmp_4_fu_547_p5;
wire  signed [1:0] tmp_4_fu_547_p7;
wire   [1:0] tmp_5_fu_571_p1;
wire   [1:0] tmp_5_fu_571_p3;
wire  signed [1:0] tmp_5_fu_571_p5;
wire  signed [1:0] tmp_5_fu_571_p7;
wire   [1:0] tmp_6_fu_595_p1;
wire   [1:0] tmp_6_fu_595_p3;
wire  signed [1:0] tmp_6_fu_595_p5;
wire  signed [1:0] tmp_6_fu_595_p7;
wire   [1:0] tmp_7_fu_619_p1;
wire   [1:0] tmp_7_fu_619_p3;
wire  signed [1:0] tmp_7_fu_619_p5;
wire  signed [1:0] tmp_7_fu_619_p7;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 j_fu_122 = 3'd0;
#0 ap_done_reg = 1'b0;
end

(* dissolve_hierarchy = "yes" *) train_step_sparsemux_9_2_2_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 2 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 2 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 2 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 2 ),
    .def_WIDTH( 2 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 2 ))
sparsemux_9_2_2_1_1_U156(
    .din0(W1_0_0_load),
    .din1(W1_0_1_load),
    .din2(W1_0_2_load),
    .din3(W1_0_3_load),
    .def(tmp_fu_441_p9),
    .sel(trunc_ln136_fu_411_p1),
    .dout(tmp_fu_441_p11)
);

(* dissolve_hierarchy = "yes" *) train_step_sparsemux_9_2_2_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 2 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 2 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 2 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 2 ),
    .def_WIDTH( 2 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 2 ))
sparsemux_9_2_2_1_1_U157(
    .din0(W1_1_0_load),
    .din1(W1_1_1_load),
    .din2(W1_1_2_load),
    .din3(W1_1_3_load),
    .def(tmp_1_fu_470_p9),
    .sel(trunc_ln136_fu_411_p1),
    .dout(tmp_1_fu_470_p11)
);

(* dissolve_hierarchy = "yes" *) train_step_sparsemux_9_2_2_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 2 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 2 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 2 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 2 ),
    .def_WIDTH( 2 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 2 ))
sparsemux_9_2_2_1_1_U158(
    .din0(W1_2_0_load),
    .din1(W1_2_1_load),
    .din2(W1_2_2_load),
    .din3(W1_2_3_load),
    .def(tmp_2_fu_499_p9),
    .sel(trunc_ln136_fu_411_p1),
    .dout(tmp_2_fu_499_p11)
);

(* dissolve_hierarchy = "yes" *) train_step_sparsemux_9_2_2_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 2 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 2 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 2 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 2 ),
    .def_WIDTH( 2 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 2 ))
sparsemux_9_2_2_1_1_U159(
    .din0(W1_3_0_load),
    .din1(W1_3_1_load),
    .din2(W1_3_2_load),
    .din3(W1_3_3_load),
    .def(tmp_3_fu_523_p9),
    .sel(trunc_ln136_fu_411_p1),
    .dout(tmp_3_fu_523_p11)
);

(* dissolve_hierarchy = "yes" *) train_step_sparsemux_9_2_2_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 2 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 2 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 2 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 2 ),
    .def_WIDTH( 2 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 2 ))
sparsemux_9_2_2_1_1_U160(
    .din0(W1_4_0_load),
    .din1(W1_4_1_load),
    .din2(W1_4_2_load),
    .din3(W1_4_3_load),
    .def(tmp_4_fu_547_p9),
    .sel(trunc_ln136_fu_411_p1),
    .dout(tmp_4_fu_547_p11)
);

(* dissolve_hierarchy = "yes" *) train_step_sparsemux_9_2_2_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 2 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 2 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 2 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 2 ),
    .def_WIDTH( 2 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 2 ))
sparsemux_9_2_2_1_1_U161(
    .din0(W1_5_0_load),
    .din1(W1_5_1_load),
    .din2(W1_5_2_load),
    .din3(W1_5_3_load),
    .def(tmp_5_fu_571_p9),
    .sel(trunc_ln136_fu_411_p1),
    .dout(tmp_5_fu_571_p11)
);

(* dissolve_hierarchy = "yes" *) train_step_sparsemux_9_2_2_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 2 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 2 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 2 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 2 ),
    .def_WIDTH( 2 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 2 ))
sparsemux_9_2_2_1_1_U162(
    .din0(W1_6_0_load),
    .din1(W1_6_1_load),
    .din2(W1_6_2_load),
    .din3(W1_6_3_load),
    .def(tmp_6_fu_595_p9),
    .sel(trunc_ln136_fu_411_p1),
    .dout(tmp_6_fu_595_p11)
);

(* dissolve_hierarchy = "yes" *) train_step_sparsemux_9_2_2_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 2 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 2 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 2 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 2 ),
    .def_WIDTH( 2 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 2 ))
sparsemux_9_2_2_1_1_U163(
    .din0(W1_7_0_load),
    .din1(W1_7_1_load),
    .din2(W1_7_2_load),
    .din3(W1_7_3_load),
    .def(tmp_7_fu_619_p9),
    .sel(trunc_ln136_fu_411_p1),
    .dout(tmp_7_fu_619_p11)
);

train_step_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln136_fu_399_p2 == 1'd0)) begin
            j_fu_122 <= add_ln136_fu_405_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_122 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_2_reg_764 <= tmp_2_fu_499_p11;
        tmp_3_reg_769 <= tmp_3_fu_523_p11;
        tmp_4_reg_774 <= tmp_4_fu_547_p11;
        tmp_5_reg_779 <= tmp_5_fu_571_p11;
        tmp_6_reg_784 <= tmp_6_fu_595_p11;
        tmp_7_reg_789 <= tmp_7_fu_619_p11;
        trunc_ln136_reg_754 <= trunc_ln136_fu_411_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        W1_out_address0_local = zext_ln138_7_fu_731_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        W1_out_address0_local = zext_ln138_5_fu_699_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        W1_out_address0_local = zext_ln138_3_fu_667_p1;
    end else if (((icmp_ln136_fu_399_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        W1_out_address0_local = zext_ln138_1_fu_436_p1;
    end else begin
        W1_out_address0_local = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        W1_out_address1_local = zext_ln138_6_fu_719_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        W1_out_address1_local = zext_ln138_4_fu_687_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        W1_out_address1_local = zext_ln138_2_fu_655_p1;
    end else if (((icmp_ln136_fu_399_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        W1_out_address1_local = zext_ln138_fu_423_p1;
    end else begin
        W1_out_address1_local = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((icmp_ln136_fu_399_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1)))) begin
        W1_out_ce0_local = 1'b1;
    end else begin
        W1_out_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((icmp_ln136_fu_399_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1)))) begin
        W1_out_ce1_local = 1'b1;
    end else begin
        W1_out_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        W1_out_d0_local = sext_ln138_fu_740_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        W1_out_d0_local = tmp_5_cast_fu_708_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        W1_out_d0_local = tmp_3_cast_fu_676_p1;
    end else if (((icmp_ln136_fu_399_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        W1_out_d0_local = tmp_1_cast_fu_494_p1;
    end else begin
        W1_out_d0_local = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        W1_out_d1_local = tmp_6_cast_fu_736_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        W1_out_d1_local = tmp_4_cast_fu_704_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        W1_out_d1_local = tmp_2_cast_fu_672_p1;
    end else if (((icmp_ln136_fu_399_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        W1_out_d1_local = tmp_cast_fu_465_p1;
    end else begin
        W1_out_d1_local = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((icmp_ln136_fu_399_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1)))) begin
        W1_out_we0_local = 1'b1;
    end else begin
        W1_out_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((icmp_ln136_fu_399_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1)))) begin
        W1_out_we1_local = 1'b1;
    end else begin
        W1_out_we1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln136_fu_399_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_2 = 3'd0;
    end else begin
        ap_sig_allocacmp_j_2 = j_fu_122;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln136_fu_399_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign W1_out_address0 = W1_out_address0_local;

assign W1_out_address1 = W1_out_address1_local;

assign W1_out_ce0 = W1_out_ce0_local;

assign W1_out_ce1 = W1_out_ce1_local;

assign W1_out_d0 = W1_out_d0_local;

assign W1_out_d1 = W1_out_d1_local;

assign W1_out_we0 = W1_out_we0_local;

assign W1_out_we1 = W1_out_we1_local;

assign add_ln136_fu_405_p2 = (ap_sig_allocacmp_j_2 + 3'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln136_fu_399_p2 = ((ap_sig_allocacmp_j_2 == 3'd4) ? 1'b1 : 1'b0);

assign sext_ln138_fu_740_p1 = $signed(tmp_7_reg_789);

assign tmp_10_fu_660_p3 = {{trunc_ln136_reg_754}, {3'd3}};

assign tmp_11_fu_680_p3 = {{trunc_ln136_reg_754}, {3'd4}};

assign tmp_12_fu_692_p3 = {{trunc_ln136_reg_754}, {3'd5}};

assign tmp_13_fu_712_p3 = {{trunc_ln136_reg_754}, {3'd6}};

assign tmp_14_fu_724_p3 = {{trunc_ln136_reg_754}, {3'd7}};

assign tmp_1_cast_fu_494_p1 = $signed(tmp_1_fu_470_p11);

assign tmp_1_fu_470_p9 = 'bx;

assign tmp_2_cast_fu_672_p1 = $signed(tmp_2_reg_764);

assign tmp_2_fu_499_p9 = 'bx;

assign tmp_3_cast_fu_676_p1 = $signed(tmp_3_reg_769);

assign tmp_3_fu_523_p9 = 'bx;

assign tmp_4_cast_fu_704_p1 = $signed(tmp_4_reg_774);

assign tmp_4_fu_547_p9 = 'bx;

assign tmp_5_cast_fu_708_p1 = $signed(tmp_5_reg_779);

assign tmp_5_fu_571_p9 = 'bx;

assign tmp_6_cast_fu_736_p1 = $signed(tmp_6_reg_784);

assign tmp_6_fu_595_p9 = 'bx;

assign tmp_7_fu_619_p9 = 'bx;

assign tmp_8_fu_415_p3 = {{trunc_ln136_fu_411_p1}, {3'd0}};

assign tmp_9_fu_428_p3 = {{trunc_ln136_fu_411_p1}, {3'd1}};

assign tmp_cast_fu_465_p1 = $signed(tmp_fu_441_p11);

assign tmp_fu_441_p9 = 'bx;

assign tmp_s_fu_648_p3 = {{trunc_ln136_reg_754}, {3'd2}};

assign trunc_ln136_fu_411_p1 = ap_sig_allocacmp_j_2[1:0];

assign zext_ln138_1_fu_436_p1 = tmp_9_fu_428_p3;

assign zext_ln138_2_fu_655_p1 = tmp_s_fu_648_p3;

assign zext_ln138_3_fu_667_p1 = tmp_10_fu_660_p3;

assign zext_ln138_4_fu_687_p1 = tmp_11_fu_680_p3;

assign zext_ln138_5_fu_699_p1 = tmp_12_fu_692_p3;

assign zext_ln138_6_fu_719_p1 = tmp_13_fu_712_p3;

assign zext_ln138_7_fu_731_p1 = tmp_14_fu_724_p3;

assign zext_ln138_fu_423_p1 = tmp_8_fu_415_p3;

endmodule //train_step_train_step_Pipeline_VITIS_LOOP_136_1
