-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity train_step_train_step_Pipeline_VITIS_LOOP_45_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_WEIGHTS_0_AWVALID : OUT STD_LOGIC;
    m_axi_WEIGHTS_0_AWREADY : IN STD_LOGIC;
    m_axi_WEIGHTS_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_WEIGHTS_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_WEIGHTS_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_WEIGHTS_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_WEIGHTS_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_WEIGHTS_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_WEIGHTS_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_WEIGHTS_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_WEIGHTS_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_WEIGHTS_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_WEIGHTS_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_WEIGHTS_0_WVALID : OUT STD_LOGIC;
    m_axi_WEIGHTS_0_WREADY : IN STD_LOGIC;
    m_axi_WEIGHTS_0_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_WEIGHTS_0_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_WEIGHTS_0_WLAST : OUT STD_LOGIC;
    m_axi_WEIGHTS_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_WEIGHTS_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_WEIGHTS_0_ARVALID : OUT STD_LOGIC;
    m_axi_WEIGHTS_0_ARREADY : IN STD_LOGIC;
    m_axi_WEIGHTS_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_WEIGHTS_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_WEIGHTS_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_WEIGHTS_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_WEIGHTS_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_WEIGHTS_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_WEIGHTS_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_WEIGHTS_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_WEIGHTS_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_WEIGHTS_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_WEIGHTS_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_WEIGHTS_0_RVALID : IN STD_LOGIC;
    m_axi_WEIGHTS_0_RREADY : OUT STD_LOGIC;
    m_axi_WEIGHTS_0_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_WEIGHTS_0_RLAST : IN STD_LOGIC;
    m_axi_WEIGHTS_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_WEIGHTS_0_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
    m_axi_WEIGHTS_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_WEIGHTS_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_WEIGHTS_0_BVALID : IN STD_LOGIC;
    m_axi_WEIGHTS_0_BREADY : OUT STD_LOGIC;
    m_axi_WEIGHTS_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_WEIGHTS_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_WEIGHTS_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    W2 : IN STD_LOGIC_VECTOR (63 downto 0);
    hidden_load_cast : IN STD_LOGIC_VECTOR (1 downto 0);
    hidden_pos_load_cast : IN STD_LOGIC_VECTOR (1 downto 0);
    hidden_pos_load_1_cast : IN STD_LOGIC_VECTOR (1 downto 0);
    hidden_pos_load_2_cast : IN STD_LOGIC_VECTOR (1 downto 0);
    hidden_pos_load_3_cast : IN STD_LOGIC_VECTOR (1 downto 0);
    hidden_pos_load_4_cast : IN STD_LOGIC_VECTOR (1 downto 0);
    hidden_pos_load_5_cast : IN STD_LOGIC_VECTOR (1 downto 0);
    hidden_pos_load_6_cast : IN STD_LOGIC_VECTOR (1 downto 0);
    hidden_pos_load_7_cast : IN STD_LOGIC_VECTOR (1 downto 0);
    hidden_pos_load_8_cast : IN STD_LOGIC_VECTOR (1 downto 0);
    hidden_pos_load_9_cast : IN STD_LOGIC_VECTOR (1 downto 0);
    hidden_pos_load_10_cast : IN STD_LOGIC_VECTOR (1 downto 0);
    hidden_pos_load_11_cast : IN STD_LOGIC_VECTOR (1 downto 0);
    hidden_pos_load_12_cast : IN STD_LOGIC_VECTOR (1 downto 0);
    hidden_pos_load_13_cast : IN STD_LOGIC_VECTOR (1 downto 0);
    hidden_pos_load_14_cast : IN STD_LOGIC_VECTOR (1 downto 0);
    hidden_pos_load_15_cast : IN STD_LOGIC_VECTOR (1 downto 0);
    hidden_pos_load_16_cast : IN STD_LOGIC_VECTOR (1 downto 0);
    hidden_pos_load_17_cast : IN STD_LOGIC_VECTOR (1 downto 0);
    hidden_pos_load_18_cast : IN STD_LOGIC_VECTOR (1 downto 0);
    hidden_pos_load_19_cast : IN STD_LOGIC_VECTOR (1 downto 0);
    hidden_pos_load_20_cast : IN STD_LOGIC_VECTOR (1 downto 0);
    hidden_pos_load_21_cast : IN STD_LOGIC_VECTOR (1 downto 0);
    hidden_pos_load_22_cast : IN STD_LOGIC_VECTOR (1 downto 0);
    hidden_pos_load_23_cast : IN STD_LOGIC_VECTOR (1 downto 0);
    hidden_pos_load_24_cast : IN STD_LOGIC_VECTOR (1 downto 0);
    hidden_pos_load_25_cast : IN STD_LOGIC_VECTOR (1 downto 0);
    hidden_pos_load_26_cast : IN STD_LOGIC_VECTOR (1 downto 0);
    hidden_pos_load_27_cast : IN STD_LOGIC_VECTOR (1 downto 0);
    hidden_pos_load_28_cast : IN STD_LOGIC_VECTOR (1 downto 0);
    hidden_pos_load_29_cast : IN STD_LOGIC_VECTOR (1 downto 0);
    sext_ln45_1 : IN STD_LOGIC_VECTOR (1 downto 0);
    out_pos_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_pos_ce0 : OUT STD_LOGIC;
    out_pos_we0 : OUT STD_LOGIC;
    out_pos_d0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of train_step_train_step_Pipeline_VITIS_LOOP_45_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000000000000";
    constant ap_ST_fsm_pp0_stage13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010000000000000";
    constant ap_ST_fsm_pp0_stage14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100000000000000";
    constant ap_ST_fsm_pp0_stage15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001000000000000000";
    constant ap_ST_fsm_pp0_stage16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010000000000000000";
    constant ap_ST_fsm_pp0_stage17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000100000000000000000";
    constant ap_ST_fsm_pp0_stage18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001000000000000000000";
    constant ap_ST_fsm_pp0_stage19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000010000000000000000000";
    constant ap_ST_fsm_pp0_stage20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000100000000000000000000";
    constant ap_ST_fsm_pp0_stage21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000001000000000000000000000";
    constant ap_ST_fsm_pp0_stage22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000010000000000000000000000";
    constant ap_ST_fsm_pp0_stage23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_ST_fsm_pp0_stage24 : STD_LOGIC_VECTOR (31 downto 0) := "00000001000000000000000000000000";
    constant ap_ST_fsm_pp0_stage25 : STD_LOGIC_VECTOR (31 downto 0) := "00000010000000000000000000000000";
    constant ap_ST_fsm_pp0_stage26 : STD_LOGIC_VECTOR (31 downto 0) := "00000100000000000000000000000000";
    constant ap_ST_fsm_pp0_stage27 : STD_LOGIC_VECTOR (31 downto 0) := "00001000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage28 : STD_LOGIC_VECTOR (31 downto 0) := "00010000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage29 : STD_LOGIC_VECTOR (31 downto 0) := "00100000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage30 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage31 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal icmp_ln45_reg_1173 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage6 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage31 : signal is "none";
    signal ap_block_state32_pp0_stage31_iter0 : BOOLEAN;
    signal ap_block_pp0_stage31_subdone : BOOLEAN;
    signal WEIGHTS_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_pp0_stage10 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_pp0_stage11 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage12 : signal is "none";
    signal ap_block_pp0_stage12 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage13 : signal is "none";
    signal ap_block_pp0_stage13 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage14 : signal is "none";
    signal ap_block_pp0_stage14 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage15 : signal is "none";
    signal ap_block_pp0_stage15 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage16 : signal is "none";
    signal ap_block_pp0_stage16 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage17 : signal is "none";
    signal ap_block_pp0_stage17 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage18 : signal is "none";
    signal ap_block_pp0_stage18 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage19 : signal is "none";
    signal ap_block_pp0_stage19 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage20 : signal is "none";
    signal ap_block_pp0_stage20 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage21 : signal is "none";
    signal ap_block_pp0_stage21 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage22 : signal is "none";
    signal ap_block_pp0_stage22 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage23 : signal is "none";
    signal ap_block_pp0_stage23 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage24 : signal is "none";
    signal ap_block_pp0_stage24 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage25 : signal is "none";
    signal ap_block_pp0_stage25 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage26 : signal is "none";
    signal ap_block_pp0_stage26 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage27 : signal is "none";
    signal ap_block_pp0_stage27 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage28 : signal is "none";
    signal ap_block_pp0_stage28 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage29 : signal is "none";
    signal ap_block_pp0_stage29 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage30 : signal is "none";
    signal ap_block_pp0_stage30 : BOOLEAN;
    signal ap_block_pp0_stage31 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal reg_344 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal ap_block_state9_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal ap_block_state10_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal ap_block_state11_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal ap_block_state12_pp0_stage11_iter0 : BOOLEAN;
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal ap_block_state13_pp0_stage12_iter0 : BOOLEAN;
    signal ap_block_pp0_stage12_11001 : BOOLEAN;
    signal ap_block_state14_pp0_stage13_iter0 : BOOLEAN;
    signal ap_block_pp0_stage13_11001 : BOOLEAN;
    signal ap_block_state15_pp0_stage14_iter0 : BOOLEAN;
    signal ap_block_pp0_stage14_11001 : BOOLEAN;
    signal ap_block_state16_pp0_stage15_iter0 : BOOLEAN;
    signal ap_block_pp0_stage15_11001 : BOOLEAN;
    signal ap_block_state17_pp0_stage16_iter0 : BOOLEAN;
    signal ap_block_pp0_stage16_11001 : BOOLEAN;
    signal ap_block_state18_pp0_stage17_iter0 : BOOLEAN;
    signal ap_block_pp0_stage17_11001 : BOOLEAN;
    signal ap_block_state19_pp0_stage18_iter0 : BOOLEAN;
    signal ap_block_pp0_stage18_11001 : BOOLEAN;
    signal ap_block_state20_pp0_stage19_iter0 : BOOLEAN;
    signal ap_block_pp0_stage19_11001 : BOOLEAN;
    signal ap_block_state21_pp0_stage20_iter0 : BOOLEAN;
    signal ap_block_pp0_stage20_11001 : BOOLEAN;
    signal ap_block_state22_pp0_stage21_iter0 : BOOLEAN;
    signal ap_block_pp0_stage21_11001 : BOOLEAN;
    signal ap_block_state23_pp0_stage22_iter0 : BOOLEAN;
    signal ap_block_pp0_stage22_11001 : BOOLEAN;
    signal ap_block_state24_pp0_stage23_iter0 : BOOLEAN;
    signal ap_block_pp0_stage23_11001 : BOOLEAN;
    signal ap_block_state25_pp0_stage24_iter0 : BOOLEAN;
    signal ap_block_pp0_stage24_11001 : BOOLEAN;
    signal ap_block_state26_pp0_stage25_iter0 : BOOLEAN;
    signal ap_block_pp0_stage25_11001 : BOOLEAN;
    signal ap_block_state27_pp0_stage26_iter0 : BOOLEAN;
    signal ap_block_pp0_stage26_11001 : BOOLEAN;
    signal ap_block_state28_pp0_stage27_iter0 : BOOLEAN;
    signal ap_block_pp0_stage27_11001 : BOOLEAN;
    signal ap_block_state29_pp0_stage28_iter0 : BOOLEAN;
    signal ap_block_pp0_stage28_11001 : BOOLEAN;
    signal ap_block_state30_pp0_stage29_iter0 : BOOLEAN;
    signal ap_block_pp0_stage29_11001 : BOOLEAN;
    signal ap_block_state31_pp0_stage30_iter0 : BOOLEAN;
    signal ap_block_pp0_stage30_11001 : BOOLEAN;
    signal ap_block_pp0_stage31_11001 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln45_1_cast_fu_348_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln45_1_cast_reg_1008 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_29_cast_cast_fu_352_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_29_cast_cast_reg_1013 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_28_cast_cast_fu_356_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_28_cast_cast_reg_1018 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_27_cast_cast_fu_360_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_27_cast_cast_reg_1023 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_26_cast_cast_fu_364_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_26_cast_cast_reg_1028 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_25_cast_cast_fu_368_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_25_cast_cast_reg_1033 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_24_cast_cast_fu_372_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_24_cast_cast_reg_1038 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_23_cast_cast_fu_376_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_23_cast_cast_reg_1043 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_22_cast_cast_fu_380_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_22_cast_cast_reg_1048 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_21_cast_cast_fu_384_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_21_cast_cast_reg_1053 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_20_cast_cast_fu_388_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_20_cast_cast_reg_1058 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_19_cast_cast_fu_392_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_19_cast_cast_reg_1063 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_18_cast_cast_fu_396_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_18_cast_cast_reg_1068 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_17_cast_cast_fu_400_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_17_cast_cast_reg_1073 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_16_cast_cast_fu_404_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_16_cast_cast_reg_1078 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_15_cast_cast_fu_408_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_15_cast_cast_reg_1083 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_14_cast_cast_fu_412_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_14_cast_cast_reg_1088 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_13_cast_cast_fu_416_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_13_cast_cast_reg_1093 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_12_cast_cast_fu_420_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_12_cast_cast_reg_1098 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_11_cast_cast_fu_424_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_11_cast_cast_reg_1103 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_10_cast_cast_fu_428_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_10_cast_cast_reg_1108 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_9_cast_cast_fu_432_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_9_cast_cast_reg_1113 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_8_cast_cast_fu_436_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_8_cast_cast_reg_1118 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_7_cast_cast_fu_440_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_7_cast_cast_reg_1123 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_6_cast_cast_fu_444_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_6_cast_cast_reg_1128 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_5_cast_cast_fu_448_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_5_cast_cast_reg_1133 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_4_cast_cast_fu_452_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_4_cast_cast_reg_1138 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_3_cast_cast_fu_456_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_3_cast_cast_reg_1143 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_2_cast_cast_fu_460_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_2_cast_cast_reg_1148 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_1_cast_cast_fu_464_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_1_cast_cast_reg_1153 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_cast_cast_fu_468_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_pos_load_cast_cast_reg_1158 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_load_cast_cast_fu_472_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal hidden_load_cast_cast_reg_1163 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_2_reg_1168 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_2_reg_1168_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln45_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln48_fu_515_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln48_reg_1187 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln48_1_fu_524_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln48_1_reg_1192 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_897_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln48_1_reg_1202 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln48_3_fu_537_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln48_3_reg_1207 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln48_5_fu_550_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln48_5_reg_1217 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln48_3_fu_561_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln48_3_reg_1222 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln48_7_fu_575_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln48_7_reg_1232 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_910_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln48_4_reg_1237 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln48_9_fu_588_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln48_9_reg_1247 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln48_7_fu_612_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln48_7_reg_1252 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln48_11_fu_626_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln48_11_reg_1262 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_923_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln48_8_reg_1267 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln48_13_fu_639_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln48_13_reg_1277 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln48_10_fu_650_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln48_10_reg_1282 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln48_15_fu_664_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln48_15_reg_1292 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_936_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln48_11_reg_1297 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln48_17_fu_677_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln48_17_reg_1307 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln48_14_fu_701_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln48_14_reg_1312 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln48_19_fu_715_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln48_19_reg_1322 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_949_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln48_16_reg_1327 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln48_21_fu_728_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln48_21_reg_1337 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln48_18_fu_739_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln48_18_reg_1342 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln48_23_fu_753_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln48_23_reg_1352 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_962_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln48_19_reg_1357 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln48_25_fu_766_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln48_25_reg_1367 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln48_21_fu_777_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln48_21_reg_1372 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln48_27_fu_791_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln48_27_reg_1382 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_975_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln48_23_reg_1387 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln48_29_fu_804_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln48_29_reg_1397 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln48_25_fu_815_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln48_25_reg_1402 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_988_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln48_26_reg_1412 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln48_29_fu_844_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln48_29_reg_1417 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln48_30_fu_862_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln48_30_reg_1422 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln45_fu_867_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_fu_124 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln45_fu_490_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_k_2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_pos_we0_local : STD_LOGIC;
    signal select_ln7_fu_888_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal out_pos_ce0_local : STD_LOGIC;
    signal mul_ln48_fu_515_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln48_1_fu_524_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln48_3_fu_537_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln48_5_fu_550_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_903_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln48_33_fu_558_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln48_32_fu_555_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln48_7_fu_575_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln48_9_fu_588_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_916_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln48_36_fu_599_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln48_35_fu_596_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln48_6_fu_602_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln48_37_fu_608_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln48_34_fu_593_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln48_11_fu_626_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln48_13_fu_639_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_929_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln48_39_fu_647_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln48_38_fu_644_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln48_15_fu_664_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln48_17_fu_677_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_942_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln48_42_fu_688_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln48_41_fu_685_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln48_13_fu_691_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln48_43_fu_697_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln48_40_fu_682_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln48_19_fu_715_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln48_21_fu_728_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_955_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln48_45_fu_736_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln48_44_fu_733_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln48_23_fu_753_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln48_25_fu_766_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_968_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln48_48_fu_774_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln48_47_fu_771_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln48_27_fu_791_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln48_29_fu_804_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_981_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln48_51_fu_812_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln48_50_fu_809_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln48_31_fu_821_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_994_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln48_54_fu_831_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln48_53_fu_828_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln48_28_fu_834_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln48_55_fu_840_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln48_52_fu_825_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln48_49_fu_853_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln48_46_fu_850_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln48_22_fu_856_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln48_15_fu_871_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln48_fu_875_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_880_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_897_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_903_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_910_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_916_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_923_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_929_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_936_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_942_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_949_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_955_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_962_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_968_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_975_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_981_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_988_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_994_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_897_ce : STD_LOGIC;
    signal grp_fu_903_ce : STD_LOGIC;
    signal grp_fu_910_ce : STD_LOGIC;
    signal grp_fu_916_ce : STD_LOGIC;
    signal grp_fu_923_ce : STD_LOGIC;
    signal grp_fu_929_ce : STD_LOGIC;
    signal grp_fu_936_ce : STD_LOGIC;
    signal grp_fu_942_ce : STD_LOGIC;
    signal grp_fu_949_ce : STD_LOGIC;
    signal grp_fu_955_ce : STD_LOGIC;
    signal grp_fu_962_ce : STD_LOGIC;
    signal grp_fu_968_ce : STD_LOGIC;
    signal grp_fu_975_ce : STD_LOGIC;
    signal grp_fu_981_ce : STD_LOGIC;
    signal grp_fu_988_ce : STD_LOGIC;
    signal grp_fu_994_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_pp0_stage12_subdone : BOOLEAN;
    signal ap_block_pp0_stage13_subdone : BOOLEAN;
    signal ap_block_pp0_stage14_subdone : BOOLEAN;
    signal ap_block_pp0_stage15_subdone : BOOLEAN;
    signal ap_block_pp0_stage16_subdone : BOOLEAN;
    signal ap_block_pp0_stage17_subdone : BOOLEAN;
    signal ap_block_pp0_stage18_subdone : BOOLEAN;
    signal ap_block_pp0_stage19_subdone : BOOLEAN;
    signal ap_block_pp0_stage20_subdone : BOOLEAN;
    signal ap_block_pp0_stage21_subdone : BOOLEAN;
    signal ap_block_pp0_stage22_subdone : BOOLEAN;
    signal ap_block_pp0_stage23_subdone : BOOLEAN;
    signal ap_block_pp0_stage24_subdone : BOOLEAN;
    signal ap_block_pp0_stage25_subdone : BOOLEAN;
    signal ap_block_pp0_stage26_subdone : BOOLEAN;
    signal ap_block_pp0_stage27_subdone : BOOLEAN;
    signal ap_block_pp0_stage28_subdone : BOOLEAN;
    signal ap_block_pp0_stage29_subdone : BOOLEAN;
    signal ap_block_pp0_stage30_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component train_step_mul_8s_2s_10_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component train_step_mac_muladd_8s_2s_10s_10_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (1 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component train_step_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_8s_2s_10_1_1_U138 : component train_step_mul_8s_2s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        dout_WIDTH => 10)
    port map (
        din0 => reg_344,
        din1 => mul_ln48_fu_515_p1,
        dout => mul_ln48_fu_515_p2);

    mul_8s_2s_10_1_1_U139 : component train_step_mul_8s_2s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        dout_WIDTH => 10)
    port map (
        din0 => reg_344,
        din1 => mul_ln48_1_fu_524_p1,
        dout => mul_ln48_1_fu_524_p2);

    mul_8s_2s_10_1_1_U140 : component train_step_mul_8s_2s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        dout_WIDTH => 10)
    port map (
        din0 => reg_344,
        din1 => mul_ln48_3_fu_537_p1,
        dout => mul_ln48_3_fu_537_p2);

    mul_8s_2s_10_1_1_U141 : component train_step_mul_8s_2s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        dout_WIDTH => 10)
    port map (
        din0 => reg_344,
        din1 => mul_ln48_5_fu_550_p1,
        dout => mul_ln48_5_fu_550_p2);

    mul_8s_2s_10_1_1_U142 : component train_step_mul_8s_2s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        dout_WIDTH => 10)
    port map (
        din0 => reg_344,
        din1 => mul_ln48_7_fu_575_p1,
        dout => mul_ln48_7_fu_575_p2);

    mul_8s_2s_10_1_1_U143 : component train_step_mul_8s_2s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        dout_WIDTH => 10)
    port map (
        din0 => reg_344,
        din1 => mul_ln48_9_fu_588_p1,
        dout => mul_ln48_9_fu_588_p2);

    mul_8s_2s_10_1_1_U144 : component train_step_mul_8s_2s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        dout_WIDTH => 10)
    port map (
        din0 => reg_344,
        din1 => mul_ln48_11_fu_626_p1,
        dout => mul_ln48_11_fu_626_p2);

    mul_8s_2s_10_1_1_U145 : component train_step_mul_8s_2s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        dout_WIDTH => 10)
    port map (
        din0 => reg_344,
        din1 => mul_ln48_13_fu_639_p1,
        dout => mul_ln48_13_fu_639_p2);

    mul_8s_2s_10_1_1_U146 : component train_step_mul_8s_2s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        dout_WIDTH => 10)
    port map (
        din0 => reg_344,
        din1 => mul_ln48_15_fu_664_p1,
        dout => mul_ln48_15_fu_664_p2);

    mul_8s_2s_10_1_1_U147 : component train_step_mul_8s_2s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        dout_WIDTH => 10)
    port map (
        din0 => reg_344,
        din1 => mul_ln48_17_fu_677_p1,
        dout => mul_ln48_17_fu_677_p2);

    mul_8s_2s_10_1_1_U148 : component train_step_mul_8s_2s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        dout_WIDTH => 10)
    port map (
        din0 => reg_344,
        din1 => mul_ln48_19_fu_715_p1,
        dout => mul_ln48_19_fu_715_p2);

    mul_8s_2s_10_1_1_U149 : component train_step_mul_8s_2s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        dout_WIDTH => 10)
    port map (
        din0 => reg_344,
        din1 => mul_ln48_21_fu_728_p1,
        dout => mul_ln48_21_fu_728_p2);

    mul_8s_2s_10_1_1_U150 : component train_step_mul_8s_2s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        dout_WIDTH => 10)
    port map (
        din0 => reg_344,
        din1 => mul_ln48_23_fu_753_p1,
        dout => mul_ln48_23_fu_753_p2);

    mul_8s_2s_10_1_1_U151 : component train_step_mul_8s_2s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        dout_WIDTH => 10)
    port map (
        din0 => reg_344,
        din1 => mul_ln48_25_fu_766_p1,
        dout => mul_ln48_25_fu_766_p2);

    mul_8s_2s_10_1_1_U152 : component train_step_mul_8s_2s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        dout_WIDTH => 10)
    port map (
        din0 => reg_344,
        din1 => mul_ln48_27_fu_791_p1,
        dout => mul_ln48_27_fu_791_p2);

    mul_8s_2s_10_1_1_U153 : component train_step_mul_8s_2s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        dout_WIDTH => 10)
    port map (
        din0 => reg_344,
        din1 => mul_ln48_29_fu_804_p1,
        dout => mul_ln48_29_fu_804_p2);

    mac_muladd_8s_2s_10s_10_4_1_U154 : component train_step_mac_muladd_8s_2s_10s_10_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        din2_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_344,
        din1 => grp_fu_897_p1,
        din2 => mul_ln48_reg_1187,
        ce => grp_fu_897_ce,
        dout => grp_fu_897_p3);

    mac_muladd_8s_2s_10s_10_4_1_U155 : component train_step_mac_muladd_8s_2s_10s_10_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        din2_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_344,
        din1 => grp_fu_903_p1,
        din2 => mul_ln48_1_reg_1192,
        ce => grp_fu_903_ce,
        dout => grp_fu_903_p3);

    mac_muladd_8s_2s_10s_10_4_1_U156 : component train_step_mac_muladd_8s_2s_10s_10_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        din2_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_344,
        din1 => grp_fu_910_p1,
        din2 => mul_ln48_3_reg_1207,
        ce => grp_fu_910_ce,
        dout => grp_fu_910_p3);

    mac_muladd_8s_2s_10s_10_4_1_U157 : component train_step_mac_muladd_8s_2s_10s_10_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        din2_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_344,
        din1 => grp_fu_916_p1,
        din2 => mul_ln48_5_reg_1217,
        ce => grp_fu_916_ce,
        dout => grp_fu_916_p3);

    mac_muladd_8s_2s_10s_10_4_1_U158 : component train_step_mac_muladd_8s_2s_10s_10_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        din2_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_344,
        din1 => grp_fu_923_p1,
        din2 => mul_ln48_7_reg_1232,
        ce => grp_fu_923_ce,
        dout => grp_fu_923_p3);

    mac_muladd_8s_2s_10s_10_4_1_U159 : component train_step_mac_muladd_8s_2s_10s_10_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        din2_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_344,
        din1 => grp_fu_929_p1,
        din2 => mul_ln48_9_reg_1247,
        ce => grp_fu_929_ce,
        dout => grp_fu_929_p3);

    mac_muladd_8s_2s_10s_10_4_1_U160 : component train_step_mac_muladd_8s_2s_10s_10_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        din2_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_344,
        din1 => grp_fu_936_p1,
        din2 => mul_ln48_11_reg_1262,
        ce => grp_fu_936_ce,
        dout => grp_fu_936_p3);

    mac_muladd_8s_2s_10s_10_4_1_U161 : component train_step_mac_muladd_8s_2s_10s_10_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        din2_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_344,
        din1 => grp_fu_942_p1,
        din2 => mul_ln48_13_reg_1277,
        ce => grp_fu_942_ce,
        dout => grp_fu_942_p3);

    mac_muladd_8s_2s_10s_10_4_1_U162 : component train_step_mac_muladd_8s_2s_10s_10_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        din2_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_344,
        din1 => grp_fu_949_p1,
        din2 => mul_ln48_15_reg_1292,
        ce => grp_fu_949_ce,
        dout => grp_fu_949_p3);

    mac_muladd_8s_2s_10s_10_4_1_U163 : component train_step_mac_muladd_8s_2s_10s_10_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        din2_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_344,
        din1 => grp_fu_955_p1,
        din2 => mul_ln48_17_reg_1307,
        ce => grp_fu_955_ce,
        dout => grp_fu_955_p3);

    mac_muladd_8s_2s_10s_10_4_1_U164 : component train_step_mac_muladd_8s_2s_10s_10_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        din2_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_344,
        din1 => grp_fu_962_p1,
        din2 => mul_ln48_19_reg_1322,
        ce => grp_fu_962_ce,
        dout => grp_fu_962_p3);

    mac_muladd_8s_2s_10s_10_4_1_U165 : component train_step_mac_muladd_8s_2s_10s_10_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        din2_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_344,
        din1 => grp_fu_968_p1,
        din2 => mul_ln48_21_reg_1337,
        ce => grp_fu_968_ce,
        dout => grp_fu_968_p3);

    mac_muladd_8s_2s_10s_10_4_1_U166 : component train_step_mac_muladd_8s_2s_10s_10_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        din2_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_344,
        din1 => grp_fu_975_p1,
        din2 => mul_ln48_23_reg_1352,
        ce => grp_fu_975_ce,
        dout => grp_fu_975_p3);

    mac_muladd_8s_2s_10s_10_4_1_U167 : component train_step_mac_muladd_8s_2s_10s_10_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        din2_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_344,
        din1 => grp_fu_981_p1,
        din2 => mul_ln48_25_reg_1367,
        ce => grp_fu_981_ce,
        dout => grp_fu_981_p3);

    mac_muladd_8s_2s_10s_10_4_1_U168 : component train_step_mac_muladd_8s_2s_10s_10_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        din2_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_344,
        din1 => grp_fu_988_p1,
        din2 => mul_ln48_27_reg_1382,
        ce => grp_fu_988_ce,
        dout => grp_fu_988_p3);

    mac_muladd_8s_2s_10s_10_4_1_U169 : component train_step_mac_muladd_8s_2s_10s_10_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        din2_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sext_ln48_31_fu_821_p0,
        din1 => grp_fu_994_p1,
        din2 => mul_ln48_29_reg_1397,
        ce => grp_fu_994_ce,
        dout => grp_fu_994_p3);

    flow_control_loop_pipe_sequential_init_U : component train_step_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage6,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage6)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage31) and (ap_const_boolean_0 = ap_block_pp0_stage31_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    k_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((icmp_ln45_fu_484_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    k_fu_124 <= add_ln45_fu_490_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    k_fu_124 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_const_boolean_0 = ap_block_pp0_stage16_11001))) then
                add_ln48_10_reg_1282 <= add_ln48_10_fu_650_p2;
                mul_ln48_13_reg_1277 <= mul_ln48_13_fu_639_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage18) and (ap_const_boolean_0 = ap_block_pp0_stage18_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1))) then
                add_ln48_11_reg_1297 <= grp_fu_936_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage20) and (ap_const_boolean_0 = ap_block_pp0_stage20_11001))) then
                add_ln48_14_reg_1312 <= add_ln48_14_fu_701_p2;
                mul_ln48_17_reg_1307 <= mul_ln48_17_fu_677_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage22) and (ap_const_boolean_0 = ap_block_pp0_stage22_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1))) then
                add_ln48_16_reg_1327 <= grp_fu_949_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage24) and (ap_const_boolean_0 = ap_block_pp0_stage24_11001))) then
                add_ln48_18_reg_1342 <= add_ln48_18_fu_739_p2;
                mul_ln48_21_reg_1337 <= mul_ln48_21_fu_728_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage26) and (ap_const_boolean_0 = ap_block_pp0_stage26_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1))) then
                add_ln48_19_reg_1357 <= grp_fu_962_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1))) then
                add_ln48_1_reg_1202 <= grp_fu_897_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage28) and (ap_const_boolean_0 = ap_block_pp0_stage28_11001))) then
                add_ln48_21_reg_1372 <= add_ln48_21_fu_777_p2;
                mul_ln48_25_reg_1367 <= mul_ln48_25_fu_766_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage30) and (ap_const_boolean_0 = ap_block_pp0_stage30_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1))) then
                add_ln48_23_reg_1387 <= grp_fu_975_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln48_25_reg_1402 <= add_ln48_25_fu_815_p2;
                hidden_load_cast_cast_reg_1163 <= hidden_load_cast_cast_fu_472_p1;
                hidden_pos_load_10_cast_cast_reg_1108 <= hidden_pos_load_10_cast_cast_fu_428_p1;
                hidden_pos_load_11_cast_cast_reg_1103 <= hidden_pos_load_11_cast_cast_fu_424_p1;
                hidden_pos_load_12_cast_cast_reg_1098 <= hidden_pos_load_12_cast_cast_fu_420_p1;
                hidden_pos_load_13_cast_cast_reg_1093 <= hidden_pos_load_13_cast_cast_fu_416_p1;
                hidden_pos_load_14_cast_cast_reg_1088 <= hidden_pos_load_14_cast_cast_fu_412_p1;
                hidden_pos_load_15_cast_cast_reg_1083 <= hidden_pos_load_15_cast_cast_fu_408_p1;
                hidden_pos_load_16_cast_cast_reg_1078 <= hidden_pos_load_16_cast_cast_fu_404_p1;
                hidden_pos_load_17_cast_cast_reg_1073 <= hidden_pos_load_17_cast_cast_fu_400_p1;
                hidden_pos_load_18_cast_cast_reg_1068 <= hidden_pos_load_18_cast_cast_fu_396_p1;
                hidden_pos_load_19_cast_cast_reg_1063 <= hidden_pos_load_19_cast_cast_fu_392_p1;
                hidden_pos_load_1_cast_cast_reg_1153 <= hidden_pos_load_1_cast_cast_fu_464_p1;
                hidden_pos_load_20_cast_cast_reg_1058 <= hidden_pos_load_20_cast_cast_fu_388_p1;
                hidden_pos_load_21_cast_cast_reg_1053 <= hidden_pos_load_21_cast_cast_fu_384_p1;
                hidden_pos_load_22_cast_cast_reg_1048 <= hidden_pos_load_22_cast_cast_fu_380_p1;
                hidden_pos_load_23_cast_cast_reg_1043 <= hidden_pos_load_23_cast_cast_fu_376_p1;
                hidden_pos_load_24_cast_cast_reg_1038 <= hidden_pos_load_24_cast_cast_fu_372_p1;
                hidden_pos_load_25_cast_cast_reg_1033 <= hidden_pos_load_25_cast_cast_fu_368_p1;
                hidden_pos_load_26_cast_cast_reg_1028 <= hidden_pos_load_26_cast_cast_fu_364_p1;
                hidden_pos_load_27_cast_cast_reg_1023 <= hidden_pos_load_27_cast_cast_fu_360_p1;
                hidden_pos_load_28_cast_cast_reg_1018 <= hidden_pos_load_28_cast_cast_fu_356_p1;
                hidden_pos_load_29_cast_cast_reg_1013 <= hidden_pos_load_29_cast_cast_fu_352_p1;
                hidden_pos_load_2_cast_cast_reg_1148 <= hidden_pos_load_2_cast_cast_fu_460_p1;
                hidden_pos_load_3_cast_cast_reg_1143 <= hidden_pos_load_3_cast_cast_fu_456_p1;
                hidden_pos_load_4_cast_cast_reg_1138 <= hidden_pos_load_4_cast_cast_fu_452_p1;
                hidden_pos_load_5_cast_cast_reg_1133 <= hidden_pos_load_5_cast_cast_fu_448_p1;
                hidden_pos_load_6_cast_cast_reg_1128 <= hidden_pos_load_6_cast_cast_fu_444_p1;
                hidden_pos_load_7_cast_cast_reg_1123 <= hidden_pos_load_7_cast_cast_fu_440_p1;
                hidden_pos_load_8_cast_cast_reg_1118 <= hidden_pos_load_8_cast_cast_fu_436_p1;
                hidden_pos_load_9_cast_cast_reg_1113 <= hidden_pos_load_9_cast_cast_fu_432_p1;
                hidden_pos_load_cast_cast_reg_1158 <= hidden_pos_load_cast_cast_fu_468_p1;
                icmp_ln45_reg_1173 <= icmp_ln45_fu_484_p2;
                k_2_reg_1168 <= ap_sig_allocacmp_k_2;
                k_2_reg_1168_pp0_iter1_reg <= k_2_reg_1168;
                mul_ln48_29_reg_1397 <= mul_ln48_29_fu_804_p2;
                sext_ln45_1_cast_reg_1008 <= sext_ln45_1_cast_fu_348_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                add_ln48_26_reg_1412 <= grp_fu_988_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                add_ln48_29_reg_1417 <= add_ln48_29_fu_844_p2;
                mul_ln48_1_reg_1192 <= mul_ln48_1_fu_524_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001))) then
                add_ln48_30_reg_1422 <= add_ln48_30_fu_862_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001))) then
                add_ln48_3_reg_1222 <= add_ln48_3_fu_561_p2;
                mul_ln48_5_reg_1217 <= mul_ln48_5_fu_550_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1))) then
                add_ln48_4_reg_1237 <= grp_fu_910_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001))) then
                add_ln48_7_reg_1252 <= add_ln48_7_fu_612_p2;
                mul_ln48_9_reg_1247 <= mul_ln48_9_fu_588_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1))) then
                add_ln48_8_reg_1267 <= grp_fu_923_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001))) then
                mul_ln48_11_reg_1262 <= mul_ln48_11_fu_626_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage18) and (ap_const_boolean_0 = ap_block_pp0_stage18_11001))) then
                mul_ln48_15_reg_1292 <= mul_ln48_15_fu_664_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage22) and (ap_const_boolean_0 = ap_block_pp0_stage22_11001))) then
                mul_ln48_19_reg_1322 <= mul_ln48_19_fu_715_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage26) and (ap_const_boolean_0 = ap_block_pp0_stage26_11001))) then
                mul_ln48_23_reg_1352 <= mul_ln48_23_fu_753_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage30) and (ap_const_boolean_0 = ap_block_pp0_stage30_11001))) then
                mul_ln48_27_reg_1382 <= mul_ln48_27_fu_791_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001))) then
                mul_ln48_3_reg_1207 <= mul_ln48_3_fu_537_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001))) then
                mul_ln48_7_reg_1232 <= mul_ln48_7_fu_575_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                mul_ln48_reg_1187 <= mul_ln48_fu_515_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage30) and (ap_const_boolean_0 = ap_block_pp0_stage30_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage29) and (ap_const_boolean_0 = ap_block_pp0_stage29_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage28) and (ap_const_boolean_0 = ap_block_pp0_stage28_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage27) and (ap_const_boolean_0 = ap_block_pp0_stage27_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage26) and (ap_const_boolean_0 = ap_block_pp0_stage26_11001) and 
    (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage25) and (ap_const_boolean_0 = ap_block_pp0_stage25_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage24) and (ap_const_boolean_0 = ap_block_pp0_stage24_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage22) and (ap_const_boolean_0 = ap_block_pp0_stage22_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage21) and (ap_const_boolean_0 = ap_block_pp0_stage21_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage20) and (ap_const_boolean_0 = ap_block_pp0_stage20_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage19) 
    and (ap_const_boolean_0 = ap_block_pp0_stage19_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage18) and (ap_const_boolean_0 = ap_block_pp0_stage18_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (ap_const_boolean_0 = ap_block_pp0_stage17_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_const_boolean_0 = ap_block_pp0_stage16_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1)) 
    or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and 
    (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage31) and (ap_const_boolean_0 = ap_block_pp0_stage31_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1)))) then
                reg_344 <= m_axi_WEIGHTS_0_RDATA;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage6_subdone, ap_condition_exit_pp0_iter0_stage6, ap_block_pp0_stage31_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage12_subdone, ap_block_pp0_stage13_subdone, ap_block_pp0_stage14_subdone, ap_block_pp0_stage15_subdone, ap_block_pp0_stage16_subdone, ap_block_pp0_stage17_subdone, ap_block_pp0_stage18_subdone, ap_block_pp0_stage19_subdone, ap_block_pp0_stage20_subdone, ap_block_pp0_stage21_subdone, ap_block_pp0_stage22_subdone, ap_block_pp0_stage23_subdone, ap_block_pp0_stage24_subdone, ap_block_pp0_stage25_subdone, ap_block_pp0_stage26_subdone, ap_block_pp0_stage27_subdone, ap_block_pp0_stage28_subdone, ap_block_pp0_stage29_subdone, ap_block_pp0_stage30_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage6)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_pp0_stage12 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage12_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                end if;
            when ap_ST_fsm_pp0_stage13 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage13_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                end if;
            when ap_ST_fsm_pp0_stage14 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage14_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                end if;
            when ap_ST_fsm_pp0_stage15 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage15_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                end if;
            when ap_ST_fsm_pp0_stage16 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage16_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                end if;
            when ap_ST_fsm_pp0_stage17 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage17_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                end if;
            when ap_ST_fsm_pp0_stage18 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage18_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage18;
                end if;
            when ap_ST_fsm_pp0_stage19 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage19_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage19;
                end if;
            when ap_ST_fsm_pp0_stage20 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage20_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage20;
                end if;
            when ap_ST_fsm_pp0_stage21 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage21_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage21;
                end if;
            when ap_ST_fsm_pp0_stage22 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage22_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage22;
                end if;
            when ap_ST_fsm_pp0_stage23 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage23_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage23;
                end if;
            when ap_ST_fsm_pp0_stage24 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage24_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage24;
                end if;
            when ap_ST_fsm_pp0_stage25 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage25_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage26;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage25;
                end if;
            when ap_ST_fsm_pp0_stage26 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage26_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage27;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage26;
                end if;
            when ap_ST_fsm_pp0_stage27 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage27_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage28;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage27;
                end if;
            when ap_ST_fsm_pp0_stage28 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage28_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage29;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage28;
                end if;
            when ap_ST_fsm_pp0_stage29 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage29_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage30;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage29;
                end if;
            when ap_ST_fsm_pp0_stage30 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage30_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage31;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage30;
                end if;
            when ap_ST_fsm_pp0_stage31 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage31_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage31;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    WEIGHTS_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage6, m_axi_WEIGHTS_0_RVALID, icmp_ln45_reg_1173, ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage31, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12, ap_CS_fsm_pp0_stage13, ap_block_pp0_stage13, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14, ap_CS_fsm_pp0_stage15, ap_block_pp0_stage15, ap_CS_fsm_pp0_stage16, ap_block_pp0_stage16, ap_CS_fsm_pp0_stage17, ap_block_pp0_stage17, ap_CS_fsm_pp0_stage18, ap_block_pp0_stage18, ap_CS_fsm_pp0_stage19, ap_block_pp0_stage19, ap_CS_fsm_pp0_stage20, ap_block_pp0_stage20, ap_CS_fsm_pp0_stage21, ap_block_pp0_stage21, ap_CS_fsm_pp0_stage22, ap_block_pp0_stage22, ap_CS_fsm_pp0_stage23, ap_block_pp0_stage23, ap_CS_fsm_pp0_stage24, ap_block_pp0_stage24, ap_CS_fsm_pp0_stage25, ap_block_pp0_stage25, ap_CS_fsm_pp0_stage26, ap_block_pp0_stage26, ap_CS_fsm_pp0_stage27, ap_block_pp0_stage27, ap_CS_fsm_pp0_stage28, ap_block_pp0_stage28, ap_CS_fsm_pp0_stage29, ap_block_pp0_stage29, ap_CS_fsm_pp0_stage30, ap_block_pp0_stage30, ap_block_pp0_stage31, ap_block_pp0_stage0)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage30) and (ap_const_boolean_0 = ap_block_pp0_stage30) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage29) and (ap_const_boolean_0 = ap_block_pp0_stage29) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage28) and (ap_const_boolean_0 = ap_block_pp0_stage28) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage27) and (ap_const_boolean_0 = ap_block_pp0_stage27) and (ap_enable_reg_pp0_iter0_reg 
    = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage26) and (ap_const_boolean_0 = ap_block_pp0_stage26) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage25) and (ap_const_boolean_0 = ap_block_pp0_stage25) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage24) and (ap_const_boolean_0 = ap_block_pp0_stage24) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_boolean_0 = ap_block_pp0_stage23) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage22) and (ap_const_boolean_0 = ap_block_pp0_stage22) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 
    = ap_CS_fsm_pp0_stage21) and (ap_const_boolean_0 = ap_block_pp0_stage21) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage20) and (ap_const_boolean_0 = ap_block_pp0_stage20) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage19) and (ap_const_boolean_0 = ap_block_pp0_stage19) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage18) and (ap_const_boolean_0 = ap_block_pp0_stage18) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (ap_const_boolean_0 = ap_block_pp0_stage17) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_const_boolean_0 = ap_block_pp0_stage16) 
    and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_const_boolean_0 = ap_block_pp0_stage15) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_const_boolean_0 = ap_block_pp0_stage13) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 
    = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 
    = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage31) and (ap_const_boolean_0 = ap_block_pp0_stage31) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)))) then 
            WEIGHTS_blk_n_R <= m_axi_WEIGHTS_0_RVALID;
        else 
            WEIGHTS_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    add_ln45_fu_490_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_k_2) + unsigned(ap_const_lv4_1));
    add_ln48_10_fu_650_p2 <= std_logic_vector(signed(sext_ln48_39_fu_647_p1) + signed(sext_ln48_38_fu_644_p1));
    add_ln48_13_fu_691_p2 <= std_logic_vector(signed(sext_ln48_42_fu_688_p1) + signed(sext_ln48_41_fu_685_p1));
    add_ln48_14_fu_701_p2 <= std_logic_vector(signed(sext_ln48_43_fu_697_p1) + signed(sext_ln48_40_fu_682_p1));
    add_ln48_15_fu_871_p2 <= std_logic_vector(unsigned(add_ln48_14_reg_1312) + unsigned(add_ln48_7_reg_1252));
    add_ln48_18_fu_739_p2 <= std_logic_vector(signed(sext_ln48_45_fu_736_p1) + signed(sext_ln48_44_fu_733_p1));
    add_ln48_21_fu_777_p2 <= std_logic_vector(signed(sext_ln48_48_fu_774_p1) + signed(sext_ln48_47_fu_771_p1));
    add_ln48_22_fu_856_p2 <= std_logic_vector(signed(sext_ln48_49_fu_853_p1) + signed(sext_ln48_46_fu_850_p1));
    add_ln48_25_fu_815_p2 <= std_logic_vector(signed(sext_ln48_51_fu_812_p1) + signed(sext_ln48_50_fu_809_p1));
    add_ln48_28_fu_834_p2 <= std_logic_vector(signed(sext_ln48_54_fu_831_p1) + signed(sext_ln48_53_fu_828_p1));
    add_ln48_29_fu_844_p2 <= std_logic_vector(signed(sext_ln48_55_fu_840_p1) + signed(sext_ln48_52_fu_825_p1));
    add_ln48_30_fu_862_p2 <= std_logic_vector(unsigned(add_ln48_29_reg_1417) + unsigned(add_ln48_22_fu_856_p2));
    add_ln48_3_fu_561_p2 <= std_logic_vector(signed(sext_ln48_33_fu_558_p1) + signed(sext_ln48_32_fu_555_p1));
    add_ln48_6_fu_602_p2 <= std_logic_vector(signed(sext_ln48_36_fu_599_p1) + signed(sext_ln48_35_fu_596_p1));
    add_ln48_7_fu_612_p2 <= std_logic_vector(signed(sext_ln48_37_fu_608_p1) + signed(sext_ln48_34_fu_593_p1));
    add_ln48_fu_875_p2 <= std_logic_vector(unsigned(add_ln48_30_reg_1422) + unsigned(add_ln48_15_fu_871_p2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage12 <= ap_CS_fsm(12);
    ap_CS_fsm_pp0_stage13 <= ap_CS_fsm(13);
    ap_CS_fsm_pp0_stage14 <= ap_CS_fsm(14);
    ap_CS_fsm_pp0_stage15 <= ap_CS_fsm(15);
    ap_CS_fsm_pp0_stage16 <= ap_CS_fsm(16);
    ap_CS_fsm_pp0_stage17 <= ap_CS_fsm(17);
    ap_CS_fsm_pp0_stage18 <= ap_CS_fsm(18);
    ap_CS_fsm_pp0_stage19 <= ap_CS_fsm(19);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage20 <= ap_CS_fsm(20);
    ap_CS_fsm_pp0_stage21 <= ap_CS_fsm(21);
    ap_CS_fsm_pp0_stage22 <= ap_CS_fsm(22);
    ap_CS_fsm_pp0_stage23 <= ap_CS_fsm(23);
    ap_CS_fsm_pp0_stage24 <= ap_CS_fsm(24);
    ap_CS_fsm_pp0_stage25 <= ap_CS_fsm(25);
    ap_CS_fsm_pp0_stage26 <= ap_CS_fsm(26);
    ap_CS_fsm_pp0_stage27 <= ap_CS_fsm(27);
    ap_CS_fsm_pp0_stage28 <= ap_CS_fsm(28);
    ap_CS_fsm_pp0_stage29 <= ap_CS_fsm(29);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage30 <= ap_CS_fsm(30);
    ap_CS_fsm_pp0_stage31 <= ap_CS_fsm(31);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(9);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state33_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state33_pp0_stage0_iter1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state33_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state33_pp0_stage0_iter1));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage10_11001_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state11_pp0_stage10_iter0)
    begin
                ap_block_pp0_stage10_11001 <= ((ap_const_boolean_1 = ap_block_state11_pp0_stage10_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;


    ap_block_pp0_stage10_subdone_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state11_pp0_stage10_iter0)
    begin
                ap_block_pp0_stage10_subdone <= ((ap_const_boolean_1 = ap_block_state11_pp0_stage10_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;

        ap_block_pp0_stage11 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage11_11001_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state12_pp0_stage11_iter0)
    begin
                ap_block_pp0_stage11_11001 <= ((ap_const_boolean_1 = ap_block_state12_pp0_stage11_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;


    ap_block_pp0_stage11_subdone_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state12_pp0_stage11_iter0)
    begin
                ap_block_pp0_stage11_subdone <= ((ap_const_boolean_1 = ap_block_state12_pp0_stage11_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;

        ap_block_pp0_stage12 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage12_11001_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state13_pp0_stage12_iter0)
    begin
                ap_block_pp0_stage12_11001 <= ((ap_const_boolean_1 = ap_block_state13_pp0_stage12_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;


    ap_block_pp0_stage12_subdone_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state13_pp0_stage12_iter0)
    begin
                ap_block_pp0_stage12_subdone <= ((ap_const_boolean_1 = ap_block_state13_pp0_stage12_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;

        ap_block_pp0_stage13 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage13_11001_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state14_pp0_stage13_iter0)
    begin
                ap_block_pp0_stage13_11001 <= ((ap_const_boolean_1 = ap_block_state14_pp0_stage13_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;


    ap_block_pp0_stage13_subdone_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state14_pp0_stage13_iter0)
    begin
                ap_block_pp0_stage13_subdone <= ((ap_const_boolean_1 = ap_block_state14_pp0_stage13_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;

        ap_block_pp0_stage14 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage14_11001_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state15_pp0_stage14_iter0)
    begin
                ap_block_pp0_stage14_11001 <= ((ap_const_boolean_1 = ap_block_state15_pp0_stage14_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;


    ap_block_pp0_stage14_subdone_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state15_pp0_stage14_iter0)
    begin
                ap_block_pp0_stage14_subdone <= ((ap_const_boolean_1 = ap_block_state15_pp0_stage14_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;

        ap_block_pp0_stage15 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage15_11001_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state16_pp0_stage15_iter0)
    begin
                ap_block_pp0_stage15_11001 <= ((ap_const_boolean_1 = ap_block_state16_pp0_stage15_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;


    ap_block_pp0_stage15_subdone_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state16_pp0_stage15_iter0)
    begin
                ap_block_pp0_stage15_subdone <= ((ap_const_boolean_1 = ap_block_state16_pp0_stage15_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;

        ap_block_pp0_stage16 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage16_11001_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state17_pp0_stage16_iter0)
    begin
                ap_block_pp0_stage16_11001 <= ((ap_const_boolean_1 = ap_block_state17_pp0_stage16_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;


    ap_block_pp0_stage16_subdone_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state17_pp0_stage16_iter0)
    begin
                ap_block_pp0_stage16_subdone <= ((ap_const_boolean_1 = ap_block_state17_pp0_stage16_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;

        ap_block_pp0_stage17 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage17_11001_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state18_pp0_stage17_iter0)
    begin
                ap_block_pp0_stage17_11001 <= ((ap_const_boolean_1 = ap_block_state18_pp0_stage17_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;


    ap_block_pp0_stage17_subdone_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state18_pp0_stage17_iter0)
    begin
                ap_block_pp0_stage17_subdone <= ((ap_const_boolean_1 = ap_block_state18_pp0_stage17_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;

        ap_block_pp0_stage18 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage18_11001_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state19_pp0_stage18_iter0)
    begin
                ap_block_pp0_stage18_11001 <= ((ap_const_boolean_1 = ap_block_state19_pp0_stage18_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;


    ap_block_pp0_stage18_subdone_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state19_pp0_stage18_iter0)
    begin
                ap_block_pp0_stage18_subdone <= ((ap_const_boolean_1 = ap_block_state19_pp0_stage18_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;

        ap_block_pp0_stage19 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage19_11001_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state20_pp0_stage19_iter0)
    begin
                ap_block_pp0_stage19_11001 <= ((ap_const_boolean_1 = ap_block_state20_pp0_stage19_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;


    ap_block_pp0_stage19_subdone_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state20_pp0_stage19_iter0)
    begin
                ap_block_pp0_stage19_subdone <= ((ap_const_boolean_1 = ap_block_state20_pp0_stage19_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state2_pp0_stage1_iter0)
    begin
                ap_block_pp0_stage1_11001 <= ((ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state2_pp0_stage1_iter0)
    begin
                ap_block_pp0_stage1_subdone <= ((ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage20 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage20_11001_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state21_pp0_stage20_iter0)
    begin
                ap_block_pp0_stage20_11001 <= ((ap_const_boolean_1 = ap_block_state21_pp0_stage20_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;


    ap_block_pp0_stage20_subdone_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state21_pp0_stage20_iter0)
    begin
                ap_block_pp0_stage20_subdone <= ((ap_const_boolean_1 = ap_block_state21_pp0_stage20_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;

        ap_block_pp0_stage21 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage21_11001_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state22_pp0_stage21_iter0)
    begin
                ap_block_pp0_stage21_11001 <= ((ap_const_boolean_1 = ap_block_state22_pp0_stage21_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;


    ap_block_pp0_stage21_subdone_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state22_pp0_stage21_iter0)
    begin
                ap_block_pp0_stage21_subdone <= ((ap_const_boolean_1 = ap_block_state22_pp0_stage21_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;

        ap_block_pp0_stage22 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage22_11001_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state23_pp0_stage22_iter0)
    begin
                ap_block_pp0_stage22_11001 <= ((ap_const_boolean_1 = ap_block_state23_pp0_stage22_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;


    ap_block_pp0_stage22_subdone_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state23_pp0_stage22_iter0)
    begin
                ap_block_pp0_stage22_subdone <= ((ap_const_boolean_1 = ap_block_state23_pp0_stage22_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;

        ap_block_pp0_stage23 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage23_11001_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state24_pp0_stage23_iter0)
    begin
                ap_block_pp0_stage23_11001 <= ((ap_const_boolean_1 = ap_block_state24_pp0_stage23_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;


    ap_block_pp0_stage23_subdone_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state24_pp0_stage23_iter0)
    begin
                ap_block_pp0_stage23_subdone <= ((ap_const_boolean_1 = ap_block_state24_pp0_stage23_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;

        ap_block_pp0_stage24 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage24_11001_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state25_pp0_stage24_iter0)
    begin
                ap_block_pp0_stage24_11001 <= ((ap_const_boolean_1 = ap_block_state25_pp0_stage24_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;


    ap_block_pp0_stage24_subdone_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state25_pp0_stage24_iter0)
    begin
                ap_block_pp0_stage24_subdone <= ((ap_const_boolean_1 = ap_block_state25_pp0_stage24_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;

        ap_block_pp0_stage25 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage25_11001_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state26_pp0_stage25_iter0)
    begin
                ap_block_pp0_stage25_11001 <= ((ap_const_boolean_1 = ap_block_state26_pp0_stage25_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;


    ap_block_pp0_stage25_subdone_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state26_pp0_stage25_iter0)
    begin
                ap_block_pp0_stage25_subdone <= ((ap_const_boolean_1 = ap_block_state26_pp0_stage25_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;

        ap_block_pp0_stage26 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage26_11001_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state27_pp0_stage26_iter0)
    begin
                ap_block_pp0_stage26_11001 <= ((ap_const_boolean_1 = ap_block_state27_pp0_stage26_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;


    ap_block_pp0_stage26_subdone_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state27_pp0_stage26_iter0)
    begin
                ap_block_pp0_stage26_subdone <= ((ap_const_boolean_1 = ap_block_state27_pp0_stage26_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;

        ap_block_pp0_stage27 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage27_11001_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state28_pp0_stage27_iter0)
    begin
                ap_block_pp0_stage27_11001 <= ((ap_const_boolean_1 = ap_block_state28_pp0_stage27_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;


    ap_block_pp0_stage27_subdone_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state28_pp0_stage27_iter0)
    begin
                ap_block_pp0_stage27_subdone <= ((ap_const_boolean_1 = ap_block_state28_pp0_stage27_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;

        ap_block_pp0_stage28 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage28_11001_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state29_pp0_stage28_iter0)
    begin
                ap_block_pp0_stage28_11001 <= ((ap_const_boolean_1 = ap_block_state29_pp0_stage28_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;


    ap_block_pp0_stage28_subdone_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state29_pp0_stage28_iter0)
    begin
                ap_block_pp0_stage28_subdone <= ((ap_const_boolean_1 = ap_block_state29_pp0_stage28_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;

        ap_block_pp0_stage29 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage29_11001_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state30_pp0_stage29_iter0)
    begin
                ap_block_pp0_stage29_11001 <= ((ap_const_boolean_1 = ap_block_state30_pp0_stage29_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;


    ap_block_pp0_stage29_subdone_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state30_pp0_stage29_iter0)
    begin
                ap_block_pp0_stage29_subdone <= ((ap_const_boolean_1 = ap_block_state30_pp0_stage29_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;


    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state3_pp0_stage2_iter0)
    begin
                ap_block_pp0_stage2_11001 <= ((ap_const_boolean_1 = ap_block_state3_pp0_stage2_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state3_pp0_stage2_iter0)
    begin
                ap_block_pp0_stage2_subdone <= ((ap_const_boolean_1 = ap_block_state3_pp0_stage2_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage30 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage30_11001_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state31_pp0_stage30_iter0)
    begin
                ap_block_pp0_stage30_11001 <= ((ap_const_boolean_1 = ap_block_state31_pp0_stage30_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;


    ap_block_pp0_stage30_subdone_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state31_pp0_stage30_iter0)
    begin
                ap_block_pp0_stage30_subdone <= ((ap_const_boolean_1 = ap_block_state31_pp0_stage30_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;

        ap_block_pp0_stage31 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage31_11001_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state32_pp0_stage31_iter0)
    begin
                ap_block_pp0_stage31_11001 <= ((ap_const_boolean_1 = ap_block_state32_pp0_stage31_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;


    ap_block_pp0_stage31_subdone_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state32_pp0_stage31_iter0)
    begin
                ap_block_pp0_stage31_subdone <= ((ap_const_boolean_1 = ap_block_state32_pp0_stage31_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;


    ap_block_pp0_stage3_11001_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state4_pp0_stage3_iter0)
    begin
                ap_block_pp0_stage3_11001 <= ((ap_const_boolean_1 = ap_block_state4_pp0_stage3_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state4_pp0_stage3_iter0)
    begin
                ap_block_pp0_stage3_subdone <= ((ap_const_boolean_1 = ap_block_state4_pp0_stage3_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;

        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage4_11001_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state5_pp0_stage4_iter0)
    begin
                ap_block_pp0_stage4_11001 <= ((ap_const_boolean_1 = ap_block_state5_pp0_stage4_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;


    ap_block_pp0_stage4_subdone_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state5_pp0_stage4_iter0)
    begin
                ap_block_pp0_stage4_subdone <= ((ap_const_boolean_1 = ap_block_state5_pp0_stage4_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;

        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage5_11001_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state6_pp0_stage5_iter0)
    begin
                ap_block_pp0_stage5_11001 <= ((ap_const_boolean_1 = ap_block_state6_pp0_stage5_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;


    ap_block_pp0_stage5_subdone_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state6_pp0_stage5_iter0)
    begin
                ap_block_pp0_stage5_subdone <= ((ap_const_boolean_1 = ap_block_state6_pp0_stage5_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;

        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage6_11001_assign_proc : process(ap_block_state7_pp0_stage6_iter0, ap_enable_reg_pp0_iter0_reg)
    begin
                ap_block_pp0_stage6_11001 <= ((ap_const_boolean_1 = ap_block_state7_pp0_stage6_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;


    ap_block_pp0_stage6_subdone_assign_proc : process(ap_block_state7_pp0_stage6_iter0, ap_enable_reg_pp0_iter0_reg)
    begin
                ap_block_pp0_stage6_subdone <= ((ap_const_boolean_1 = ap_block_state7_pp0_stage6_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;

        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage7_11001_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state8_pp0_stage7_iter0)
    begin
                ap_block_pp0_stage7_11001 <= ((ap_const_boolean_1 = ap_block_state8_pp0_stage7_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;


    ap_block_pp0_stage7_subdone_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state8_pp0_stage7_iter0)
    begin
                ap_block_pp0_stage7_subdone <= ((ap_const_boolean_1 = ap_block_state8_pp0_stage7_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;

        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage8_11001_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state9_pp0_stage8_iter0)
    begin
                ap_block_pp0_stage8_11001 <= ((ap_const_boolean_1 = ap_block_state9_pp0_stage8_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;


    ap_block_pp0_stage8_subdone_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state9_pp0_stage8_iter0)
    begin
                ap_block_pp0_stage8_subdone <= ((ap_const_boolean_1 = ap_block_state9_pp0_stage8_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;

        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage9_11001_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state10_pp0_stage9_iter0)
    begin
                ap_block_pp0_stage9_11001 <= ((ap_const_boolean_1 = ap_block_state10_pp0_stage9_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;


    ap_block_pp0_stage9_subdone_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_block_state10_pp0_stage9_iter0)
    begin
                ap_block_pp0_stage9_subdone <= ((ap_const_boolean_1 = ap_block_state10_pp0_stage9_iter0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1));
    end process;


    ap_block_state10_pp0_stage9_iter0_assign_proc : process(m_axi_WEIGHTS_0_RVALID, icmp_ln45_reg_1173)
    begin
                ap_block_state10_pp0_stage9_iter0 <= ((icmp_ln45_reg_1173 = ap_const_lv1_0) and (m_axi_WEIGHTS_0_RVALID = ap_const_logic_0));
    end process;


    ap_block_state11_pp0_stage10_iter0_assign_proc : process(m_axi_WEIGHTS_0_RVALID, icmp_ln45_reg_1173)
    begin
                ap_block_state11_pp0_stage10_iter0 <= ((icmp_ln45_reg_1173 = ap_const_lv1_0) and (m_axi_WEIGHTS_0_RVALID = ap_const_logic_0));
    end process;


    ap_block_state12_pp0_stage11_iter0_assign_proc : process(m_axi_WEIGHTS_0_RVALID, icmp_ln45_reg_1173)
    begin
                ap_block_state12_pp0_stage11_iter0 <= ((icmp_ln45_reg_1173 = ap_const_lv1_0) and (m_axi_WEIGHTS_0_RVALID = ap_const_logic_0));
    end process;


    ap_block_state13_pp0_stage12_iter0_assign_proc : process(m_axi_WEIGHTS_0_RVALID, icmp_ln45_reg_1173)
    begin
                ap_block_state13_pp0_stage12_iter0 <= ((icmp_ln45_reg_1173 = ap_const_lv1_0) and (m_axi_WEIGHTS_0_RVALID = ap_const_logic_0));
    end process;


    ap_block_state14_pp0_stage13_iter0_assign_proc : process(m_axi_WEIGHTS_0_RVALID, icmp_ln45_reg_1173)
    begin
                ap_block_state14_pp0_stage13_iter0 <= ((icmp_ln45_reg_1173 = ap_const_lv1_0) and (m_axi_WEIGHTS_0_RVALID = ap_const_logic_0));
    end process;


    ap_block_state15_pp0_stage14_iter0_assign_proc : process(m_axi_WEIGHTS_0_RVALID, icmp_ln45_reg_1173)
    begin
                ap_block_state15_pp0_stage14_iter0 <= ((icmp_ln45_reg_1173 = ap_const_lv1_0) and (m_axi_WEIGHTS_0_RVALID = ap_const_logic_0));
    end process;


    ap_block_state16_pp0_stage15_iter0_assign_proc : process(m_axi_WEIGHTS_0_RVALID, icmp_ln45_reg_1173)
    begin
                ap_block_state16_pp0_stage15_iter0 <= ((icmp_ln45_reg_1173 = ap_const_lv1_0) and (m_axi_WEIGHTS_0_RVALID = ap_const_logic_0));
    end process;


    ap_block_state17_pp0_stage16_iter0_assign_proc : process(m_axi_WEIGHTS_0_RVALID, icmp_ln45_reg_1173)
    begin
                ap_block_state17_pp0_stage16_iter0 <= ((icmp_ln45_reg_1173 = ap_const_lv1_0) and (m_axi_WEIGHTS_0_RVALID = ap_const_logic_0));
    end process;


    ap_block_state18_pp0_stage17_iter0_assign_proc : process(m_axi_WEIGHTS_0_RVALID, icmp_ln45_reg_1173)
    begin
                ap_block_state18_pp0_stage17_iter0 <= ((icmp_ln45_reg_1173 = ap_const_lv1_0) and (m_axi_WEIGHTS_0_RVALID = ap_const_logic_0));
    end process;


    ap_block_state19_pp0_stage18_iter0_assign_proc : process(m_axi_WEIGHTS_0_RVALID, icmp_ln45_reg_1173)
    begin
                ap_block_state19_pp0_stage18_iter0 <= ((icmp_ln45_reg_1173 = ap_const_lv1_0) and (m_axi_WEIGHTS_0_RVALID = ap_const_logic_0));
    end process;


    ap_block_state20_pp0_stage19_iter0_assign_proc : process(m_axi_WEIGHTS_0_RVALID, icmp_ln45_reg_1173)
    begin
                ap_block_state20_pp0_stage19_iter0 <= ((icmp_ln45_reg_1173 = ap_const_lv1_0) and (m_axi_WEIGHTS_0_RVALID = ap_const_logic_0));
    end process;


    ap_block_state21_pp0_stage20_iter0_assign_proc : process(m_axi_WEIGHTS_0_RVALID, icmp_ln45_reg_1173)
    begin
                ap_block_state21_pp0_stage20_iter0 <= ((icmp_ln45_reg_1173 = ap_const_lv1_0) and (m_axi_WEIGHTS_0_RVALID = ap_const_logic_0));
    end process;


    ap_block_state22_pp0_stage21_iter0_assign_proc : process(m_axi_WEIGHTS_0_RVALID, icmp_ln45_reg_1173)
    begin
                ap_block_state22_pp0_stage21_iter0 <= ((icmp_ln45_reg_1173 = ap_const_lv1_0) and (m_axi_WEIGHTS_0_RVALID = ap_const_logic_0));
    end process;


    ap_block_state23_pp0_stage22_iter0_assign_proc : process(m_axi_WEIGHTS_0_RVALID, icmp_ln45_reg_1173)
    begin
                ap_block_state23_pp0_stage22_iter0 <= ((icmp_ln45_reg_1173 = ap_const_lv1_0) and (m_axi_WEIGHTS_0_RVALID = ap_const_logic_0));
    end process;


    ap_block_state24_pp0_stage23_iter0_assign_proc : process(m_axi_WEIGHTS_0_RVALID, icmp_ln45_reg_1173)
    begin
                ap_block_state24_pp0_stage23_iter0 <= ((icmp_ln45_reg_1173 = ap_const_lv1_0) and (m_axi_WEIGHTS_0_RVALID = ap_const_logic_0));
    end process;


    ap_block_state25_pp0_stage24_iter0_assign_proc : process(m_axi_WEIGHTS_0_RVALID, icmp_ln45_reg_1173)
    begin
                ap_block_state25_pp0_stage24_iter0 <= ((icmp_ln45_reg_1173 = ap_const_lv1_0) and (m_axi_WEIGHTS_0_RVALID = ap_const_logic_0));
    end process;


    ap_block_state26_pp0_stage25_iter0_assign_proc : process(m_axi_WEIGHTS_0_RVALID, icmp_ln45_reg_1173)
    begin
                ap_block_state26_pp0_stage25_iter0 <= ((icmp_ln45_reg_1173 = ap_const_lv1_0) and (m_axi_WEIGHTS_0_RVALID = ap_const_logic_0));
    end process;


    ap_block_state27_pp0_stage26_iter0_assign_proc : process(m_axi_WEIGHTS_0_RVALID, icmp_ln45_reg_1173)
    begin
                ap_block_state27_pp0_stage26_iter0 <= ((icmp_ln45_reg_1173 = ap_const_lv1_0) and (m_axi_WEIGHTS_0_RVALID = ap_const_logic_0));
    end process;


    ap_block_state28_pp0_stage27_iter0_assign_proc : process(m_axi_WEIGHTS_0_RVALID, icmp_ln45_reg_1173)
    begin
                ap_block_state28_pp0_stage27_iter0 <= ((icmp_ln45_reg_1173 = ap_const_lv1_0) and (m_axi_WEIGHTS_0_RVALID = ap_const_logic_0));
    end process;


    ap_block_state29_pp0_stage28_iter0_assign_proc : process(m_axi_WEIGHTS_0_RVALID, icmp_ln45_reg_1173)
    begin
                ap_block_state29_pp0_stage28_iter0 <= ((icmp_ln45_reg_1173 = ap_const_lv1_0) and (m_axi_WEIGHTS_0_RVALID = ap_const_logic_0));
    end process;


    ap_block_state2_pp0_stage1_iter0_assign_proc : process(m_axi_WEIGHTS_0_RVALID, icmp_ln45_reg_1173)
    begin
                ap_block_state2_pp0_stage1_iter0 <= ((icmp_ln45_reg_1173 = ap_const_lv1_0) and (m_axi_WEIGHTS_0_RVALID = ap_const_logic_0));
    end process;


    ap_block_state30_pp0_stage29_iter0_assign_proc : process(m_axi_WEIGHTS_0_RVALID, icmp_ln45_reg_1173)
    begin
                ap_block_state30_pp0_stage29_iter0 <= ((icmp_ln45_reg_1173 = ap_const_lv1_0) and (m_axi_WEIGHTS_0_RVALID = ap_const_logic_0));
    end process;


    ap_block_state31_pp0_stage30_iter0_assign_proc : process(m_axi_WEIGHTS_0_RVALID, icmp_ln45_reg_1173)
    begin
                ap_block_state31_pp0_stage30_iter0 <= ((icmp_ln45_reg_1173 = ap_const_lv1_0) and (m_axi_WEIGHTS_0_RVALID = ap_const_logic_0));
    end process;


    ap_block_state32_pp0_stage31_iter0_assign_proc : process(m_axi_WEIGHTS_0_RVALID, icmp_ln45_reg_1173)
    begin
                ap_block_state32_pp0_stage31_iter0 <= ((icmp_ln45_reg_1173 = ap_const_lv1_0) and (m_axi_WEIGHTS_0_RVALID = ap_const_logic_0));
    end process;


    ap_block_state33_pp0_stage0_iter1_assign_proc : process(m_axi_WEIGHTS_0_RVALID)
    begin
                ap_block_state33_pp0_stage0_iter1 <= (m_axi_WEIGHTS_0_RVALID = ap_const_logic_0);
    end process;


    ap_block_state3_pp0_stage2_iter0_assign_proc : process(m_axi_WEIGHTS_0_RVALID, icmp_ln45_reg_1173)
    begin
                ap_block_state3_pp0_stage2_iter0 <= ((icmp_ln45_reg_1173 = ap_const_lv1_0) and (m_axi_WEIGHTS_0_RVALID = ap_const_logic_0));
    end process;


    ap_block_state4_pp0_stage3_iter0_assign_proc : process(m_axi_WEIGHTS_0_RVALID, icmp_ln45_reg_1173)
    begin
                ap_block_state4_pp0_stage3_iter0 <= ((icmp_ln45_reg_1173 = ap_const_lv1_0) and (m_axi_WEIGHTS_0_RVALID = ap_const_logic_0));
    end process;


    ap_block_state5_pp0_stage4_iter0_assign_proc : process(m_axi_WEIGHTS_0_RVALID, icmp_ln45_reg_1173)
    begin
                ap_block_state5_pp0_stage4_iter0 <= ((icmp_ln45_reg_1173 = ap_const_lv1_0) and (m_axi_WEIGHTS_0_RVALID = ap_const_logic_0));
    end process;


    ap_block_state6_pp0_stage5_iter0_assign_proc : process(m_axi_WEIGHTS_0_RVALID, icmp_ln45_reg_1173)
    begin
                ap_block_state6_pp0_stage5_iter0 <= ((icmp_ln45_reg_1173 = ap_const_lv1_0) and (m_axi_WEIGHTS_0_RVALID = ap_const_logic_0));
    end process;


    ap_block_state7_pp0_stage6_iter0_assign_proc : process(m_axi_WEIGHTS_0_RVALID, icmp_ln45_reg_1173)
    begin
                ap_block_state7_pp0_stage6_iter0 <= ((icmp_ln45_reg_1173 = ap_const_lv1_0) and (m_axi_WEIGHTS_0_RVALID = ap_const_logic_0));
    end process;


    ap_block_state8_pp0_stage7_iter0_assign_proc : process(m_axi_WEIGHTS_0_RVALID, icmp_ln45_reg_1173)
    begin
                ap_block_state8_pp0_stage7_iter0 <= ((icmp_ln45_reg_1173 = ap_const_lv1_0) and (m_axi_WEIGHTS_0_RVALID = ap_const_logic_0));
    end process;


    ap_block_state9_pp0_stage8_iter0_assign_proc : process(m_axi_WEIGHTS_0_RVALID, icmp_ln45_reg_1173)
    begin
                ap_block_state9_pp0_stage8_iter0 <= ((icmp_ln45_reg_1173 = ap_const_lv1_0) and (m_axi_WEIGHTS_0_RVALID = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage6_assign_proc : process(ap_CS_fsm_pp0_stage6, icmp_ln45_reg_1173, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage6_subdone)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_subdone) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter0_stage6 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage6 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage6;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage31, ap_block_pp0_stage31_subdone)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage31) and (ap_const_boolean_0 = ap_block_pp0_stage31_subdone) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_k_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, k_fu_124, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_k_2 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_k_2 <= k_fu_124;
        end if; 
    end process;


    grp_fu_897_ce_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            grp_fu_897_ce <= ap_const_logic_1;
        else 
            grp_fu_897_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_897_p1 <= hidden_load_cast_cast_reg_1163(2 - 1 downto 0);

    grp_fu_903_ce_assign_proc : process(ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage5_11001, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001, ap_block_pp0_stage8_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)))) then 
            grp_fu_903_ce <= ap_const_logic_1;
        else 
            grp_fu_903_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_903_p1 <= hidden_pos_load_2_cast_cast_reg_1148(2 - 1 downto 0);

    grp_fu_910_ce_assign_proc : process(ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage7_11001, ap_block_pp0_stage8_11001, ap_block_pp0_stage9_11001, ap_block_pp0_stage10_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001)))) then 
            grp_fu_910_ce <= ap_const_logic_1;
        else 
            grp_fu_910_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_910_p1 <= hidden_pos_load_4_cast_cast_reg_1138(2 - 1 downto 0);

    grp_fu_916_ce_assign_proc : process(ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage9_11001, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001, ap_block_pp0_stage12_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001)))) then 
            grp_fu_916_ce <= ap_const_logic_1;
        else 
            grp_fu_916_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_916_p1 <= hidden_pos_load_6_cast_cast_reg_1128(2 - 1 downto 0);

    grp_fu_923_ce_assign_proc : process(ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage11_11001, ap_block_pp0_stage12_11001, ap_block_pp0_stage13_11001, ap_block_pp0_stage14_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_const_boolean_0 = ap_block_pp0_stage13_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001)))) then 
            grp_fu_923_ce <= ap_const_logic_1;
        else 
            grp_fu_923_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_923_p1 <= hidden_pos_load_8_cast_cast_reg_1118(2 - 1 downto 0);

    grp_fu_929_ce_assign_proc : process(ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage16, ap_block_pp0_stage13_11001, ap_block_pp0_stage14_11001, ap_block_pp0_stage15_11001, ap_block_pp0_stage16_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_const_boolean_0 = ap_block_pp0_stage16_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_const_boolean_0 = ap_block_pp0_stage13_11001)))) then 
            grp_fu_929_ce <= ap_const_logic_1;
        else 
            grp_fu_929_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_929_p1 <= hidden_pos_load_10_cast_cast_reg_1108(2 - 1 downto 0);

    grp_fu_936_ce_assign_proc : process(ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage16, ap_CS_fsm_pp0_stage17, ap_CS_fsm_pp0_stage18, ap_block_pp0_stage15_11001, ap_block_pp0_stage16_11001, ap_block_pp0_stage17_11001, ap_block_pp0_stage18_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage18) and (ap_const_boolean_0 = ap_block_pp0_stage18_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (ap_const_boolean_0 = ap_block_pp0_stage17_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_const_boolean_0 = ap_block_pp0_stage16_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001)))) then 
            grp_fu_936_ce <= ap_const_logic_1;
        else 
            grp_fu_936_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_936_p1 <= hidden_pos_load_12_cast_cast_reg_1098(2 - 1 downto 0);

    grp_fu_942_ce_assign_proc : process(ap_CS_fsm_pp0_stage17, ap_CS_fsm_pp0_stage18, ap_CS_fsm_pp0_stage19, ap_CS_fsm_pp0_stage20, ap_block_pp0_stage17_11001, ap_block_pp0_stage18_11001, ap_block_pp0_stage19_11001, ap_block_pp0_stage20_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage20) and (ap_const_boolean_0 = ap_block_pp0_stage20_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage19) and (ap_const_boolean_0 = ap_block_pp0_stage19_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage18) and (ap_const_boolean_0 = ap_block_pp0_stage18_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (ap_const_boolean_0 = ap_block_pp0_stage17_11001)))) then 
            grp_fu_942_ce <= ap_const_logic_1;
        else 
            grp_fu_942_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_942_p1 <= hidden_pos_load_14_cast_cast_reg_1088(2 - 1 downto 0);

    grp_fu_949_ce_assign_proc : process(ap_CS_fsm_pp0_stage19, ap_CS_fsm_pp0_stage20, ap_CS_fsm_pp0_stage21, ap_CS_fsm_pp0_stage22, ap_block_pp0_stage19_11001, ap_block_pp0_stage20_11001, ap_block_pp0_stage21_11001, ap_block_pp0_stage22_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage22) and (ap_const_boolean_0 = ap_block_pp0_stage22_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage21) and (ap_const_boolean_0 = ap_block_pp0_stage21_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage20) and (ap_const_boolean_0 = ap_block_pp0_stage20_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage19) and (ap_const_boolean_0 = ap_block_pp0_stage19_11001)))) then 
            grp_fu_949_ce <= ap_const_logic_1;
        else 
            grp_fu_949_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_949_p1 <= hidden_pos_load_16_cast_cast_reg_1078(2 - 1 downto 0);

    grp_fu_955_ce_assign_proc : process(ap_CS_fsm_pp0_stage21, ap_CS_fsm_pp0_stage22, ap_CS_fsm_pp0_stage23, ap_CS_fsm_pp0_stage24, ap_block_pp0_stage21_11001, ap_block_pp0_stage22_11001, ap_block_pp0_stage23_11001, ap_block_pp0_stage24_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage24) and (ap_const_boolean_0 = ap_block_pp0_stage24_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_boolean_0 = ap_block_pp0_stage23_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage22) and (ap_const_boolean_0 = ap_block_pp0_stage22_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage21) and (ap_const_boolean_0 = ap_block_pp0_stage21_11001)))) then 
            grp_fu_955_ce <= ap_const_logic_1;
        else 
            grp_fu_955_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_955_p1 <= hidden_pos_load_18_cast_cast_reg_1068(2 - 1 downto 0);

    grp_fu_962_ce_assign_proc : process(ap_CS_fsm_pp0_stage23, ap_CS_fsm_pp0_stage24, ap_CS_fsm_pp0_stage25, ap_CS_fsm_pp0_stage26, ap_block_pp0_stage23_11001, ap_block_pp0_stage24_11001, ap_block_pp0_stage25_11001, ap_block_pp0_stage26_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage26) and (ap_const_boolean_0 = ap_block_pp0_stage26_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage25) and (ap_const_boolean_0 = ap_block_pp0_stage25_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage24) and (ap_const_boolean_0 = ap_block_pp0_stage24_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_boolean_0 = ap_block_pp0_stage23_11001)))) then 
            grp_fu_962_ce <= ap_const_logic_1;
        else 
            grp_fu_962_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_962_p1 <= hidden_pos_load_20_cast_cast_reg_1058(2 - 1 downto 0);

    grp_fu_968_ce_assign_proc : process(ap_CS_fsm_pp0_stage25, ap_CS_fsm_pp0_stage26, ap_CS_fsm_pp0_stage27, ap_CS_fsm_pp0_stage28, ap_block_pp0_stage25_11001, ap_block_pp0_stage26_11001, ap_block_pp0_stage27_11001, ap_block_pp0_stage28_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage28) and (ap_const_boolean_0 = ap_block_pp0_stage28_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage27) and (ap_const_boolean_0 = ap_block_pp0_stage27_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage26) and (ap_const_boolean_0 = ap_block_pp0_stage26_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage25) and (ap_const_boolean_0 = ap_block_pp0_stage25_11001)))) then 
            grp_fu_968_ce <= ap_const_logic_1;
        else 
            grp_fu_968_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_968_p1 <= hidden_pos_load_22_cast_cast_reg_1048(2 - 1 downto 0);

    grp_fu_975_ce_assign_proc : process(ap_CS_fsm_pp0_stage27, ap_CS_fsm_pp0_stage28, ap_CS_fsm_pp0_stage29, ap_CS_fsm_pp0_stage30, ap_block_pp0_stage27_11001, ap_block_pp0_stage28_11001, ap_block_pp0_stage29_11001, ap_block_pp0_stage30_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage30) and (ap_const_boolean_0 = ap_block_pp0_stage30_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage29) and (ap_const_boolean_0 = ap_block_pp0_stage29_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage28) and (ap_const_boolean_0 = ap_block_pp0_stage28_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage27) and (ap_const_boolean_0 = ap_block_pp0_stage27_11001)))) then 
            grp_fu_975_ce <= ap_const_logic_1;
        else 
            grp_fu_975_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_975_p1 <= hidden_pos_load_24_cast_cast_reg_1038(2 - 1 downto 0);

    grp_fu_981_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage31, ap_CS_fsm_pp0_stage29, ap_CS_fsm_pp0_stage30, ap_block_pp0_stage29_11001, ap_block_pp0_stage30_11001, ap_block_pp0_stage31_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage30) and (ap_const_boolean_0 = ap_block_pp0_stage30_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage29) and (ap_const_boolean_0 = ap_block_pp0_stage29_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage31) and (ap_const_boolean_0 = ap_block_pp0_stage31_11001)))) then 
            grp_fu_981_ce <= ap_const_logic_1;
        else 
            grp_fu_981_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_981_p1 <= hidden_pos_load_26_cast_cast_reg_1028(2 - 1 downto 0);

    grp_fu_988_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage31, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage31_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage31) and (ap_const_boolean_0 = ap_block_pp0_stage31_11001)))) then 
            grp_fu_988_ce <= ap_const_logic_1;
        else 
            grp_fu_988_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_988_p1 <= hidden_pos_load_28_cast_cast_reg_1018(2 - 1 downto 0);

    grp_fu_994_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            grp_fu_994_ce <= ap_const_logic_1;
        else 
            grp_fu_994_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_994_p1 <= sext_ln45_1_cast_reg_1008(2 - 1 downto 0);
        hidden_load_cast_cast_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hidden_load_cast),10));

        hidden_pos_load_10_cast_cast_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hidden_pos_load_10_cast),10));

        hidden_pos_load_11_cast_cast_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hidden_pos_load_11_cast),10));

        hidden_pos_load_12_cast_cast_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hidden_pos_load_12_cast),10));

        hidden_pos_load_13_cast_cast_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hidden_pos_load_13_cast),10));

        hidden_pos_load_14_cast_cast_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hidden_pos_load_14_cast),10));

        hidden_pos_load_15_cast_cast_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hidden_pos_load_15_cast),10));

        hidden_pos_load_16_cast_cast_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hidden_pos_load_16_cast),10));

        hidden_pos_load_17_cast_cast_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hidden_pos_load_17_cast),10));

        hidden_pos_load_18_cast_cast_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hidden_pos_load_18_cast),10));

        hidden_pos_load_19_cast_cast_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hidden_pos_load_19_cast),10));

        hidden_pos_load_1_cast_cast_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hidden_pos_load_1_cast),10));

        hidden_pos_load_20_cast_cast_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hidden_pos_load_20_cast),10));

        hidden_pos_load_21_cast_cast_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hidden_pos_load_21_cast),10));

        hidden_pos_load_22_cast_cast_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hidden_pos_load_22_cast),10));

        hidden_pos_load_23_cast_cast_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hidden_pos_load_23_cast),10));

        hidden_pos_load_24_cast_cast_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hidden_pos_load_24_cast),10));

        hidden_pos_load_25_cast_cast_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hidden_pos_load_25_cast),10));

        hidden_pos_load_26_cast_cast_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hidden_pos_load_26_cast),10));

        hidden_pos_load_27_cast_cast_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hidden_pos_load_27_cast),10));

        hidden_pos_load_28_cast_cast_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hidden_pos_load_28_cast),10));

        hidden_pos_load_29_cast_cast_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hidden_pos_load_29_cast),10));

        hidden_pos_load_2_cast_cast_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hidden_pos_load_2_cast),10));

        hidden_pos_load_3_cast_cast_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hidden_pos_load_3_cast),10));

        hidden_pos_load_4_cast_cast_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hidden_pos_load_4_cast),10));

        hidden_pos_load_5_cast_cast_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hidden_pos_load_5_cast),10));

        hidden_pos_load_6_cast_cast_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hidden_pos_load_6_cast),10));

        hidden_pos_load_7_cast_cast_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hidden_pos_load_7_cast),10));

        hidden_pos_load_8_cast_cast_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hidden_pos_load_8_cast),10));

        hidden_pos_load_9_cast_cast_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hidden_pos_load_9_cast),10));

        hidden_pos_load_cast_cast_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(hidden_pos_load_cast),10));

    icmp_ln45_fu_484_p2 <= "1" when (ap_sig_allocacmp_k_2 = ap_const_lv4_A) else "0";
    m_axi_WEIGHTS_0_ARADDR <= ap_const_lv64_0;
    m_axi_WEIGHTS_0_ARBURST <= ap_const_lv2_0;
    m_axi_WEIGHTS_0_ARCACHE <= ap_const_lv4_0;
    m_axi_WEIGHTS_0_ARID <= ap_const_lv1_0;
    m_axi_WEIGHTS_0_ARLEN <= ap_const_lv32_0;
    m_axi_WEIGHTS_0_ARLOCK <= ap_const_lv2_0;
    m_axi_WEIGHTS_0_ARPROT <= ap_const_lv3_0;
    m_axi_WEIGHTS_0_ARQOS <= ap_const_lv4_0;
    m_axi_WEIGHTS_0_ARREGION <= ap_const_lv4_0;
    m_axi_WEIGHTS_0_ARSIZE <= ap_const_lv3_0;
    m_axi_WEIGHTS_0_ARUSER <= ap_const_lv1_0;
    m_axi_WEIGHTS_0_ARVALID <= ap_const_logic_0;
    m_axi_WEIGHTS_0_AWADDR <= ap_const_lv64_0;
    m_axi_WEIGHTS_0_AWBURST <= ap_const_lv2_0;
    m_axi_WEIGHTS_0_AWCACHE <= ap_const_lv4_0;
    m_axi_WEIGHTS_0_AWID <= ap_const_lv1_0;
    m_axi_WEIGHTS_0_AWLEN <= ap_const_lv32_0;
    m_axi_WEIGHTS_0_AWLOCK <= ap_const_lv2_0;
    m_axi_WEIGHTS_0_AWPROT <= ap_const_lv3_0;
    m_axi_WEIGHTS_0_AWQOS <= ap_const_lv4_0;
    m_axi_WEIGHTS_0_AWREGION <= ap_const_lv4_0;
    m_axi_WEIGHTS_0_AWSIZE <= ap_const_lv3_0;
    m_axi_WEIGHTS_0_AWUSER <= ap_const_lv1_0;
    m_axi_WEIGHTS_0_AWVALID <= ap_const_logic_0;
    m_axi_WEIGHTS_0_BREADY <= ap_const_logic_0;

    m_axi_WEIGHTS_0_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage6, icmp_ln45_reg_1173, ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage31, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage16, ap_CS_fsm_pp0_stage17, ap_CS_fsm_pp0_stage18, ap_CS_fsm_pp0_stage19, ap_CS_fsm_pp0_stage20, ap_CS_fsm_pp0_stage21, ap_CS_fsm_pp0_stage22, ap_CS_fsm_pp0_stage23, ap_CS_fsm_pp0_stage24, ap_CS_fsm_pp0_stage25, ap_CS_fsm_pp0_stage26, ap_CS_fsm_pp0_stage27, ap_CS_fsm_pp0_stage28, ap_CS_fsm_pp0_stage29, ap_CS_fsm_pp0_stage30, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001, ap_block_pp0_stage8_11001, ap_block_pp0_stage9_11001, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001, ap_block_pp0_stage12_11001, ap_block_pp0_stage13_11001, ap_block_pp0_stage14_11001, ap_block_pp0_stage15_11001, ap_block_pp0_stage16_11001, ap_block_pp0_stage17_11001, ap_block_pp0_stage18_11001, ap_block_pp0_stage19_11001, ap_block_pp0_stage20_11001, ap_block_pp0_stage21_11001, ap_block_pp0_stage22_11001, ap_block_pp0_stage23_11001, ap_block_pp0_stage24_11001, ap_block_pp0_stage25_11001, ap_block_pp0_stage26_11001, ap_block_pp0_stage27_11001, ap_block_pp0_stage28_11001, ap_block_pp0_stage29_11001, ap_block_pp0_stage30_11001, ap_block_pp0_stage31_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage30) and (ap_const_boolean_0 = ap_block_pp0_stage30_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage29) and (ap_const_boolean_0 = ap_block_pp0_stage29_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage28) and (ap_const_boolean_0 = ap_block_pp0_stage28_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage27) and (ap_const_boolean_0 = ap_block_pp0_stage27_11001) 
    and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage26) and (ap_const_boolean_0 = ap_block_pp0_stage26_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage25) and (ap_const_boolean_0 = ap_block_pp0_stage25_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage24) and (ap_const_boolean_0 = ap_block_pp0_stage24_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage22) and (ap_const_boolean_0 = ap_block_pp0_stage22_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) 
    and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage21) and (ap_const_boolean_0 = ap_block_pp0_stage21_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage20) and (ap_const_boolean_0 = ap_block_pp0_stage20_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage19) and (ap_const_boolean_0 = ap_block_pp0_stage19_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage18) and (ap_const_boolean_0 = ap_block_pp0_stage18_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (ap_const_boolean_0 = ap_block_pp0_stage17_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) 
    or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_const_boolean_0 = ap_block_pp0_stage16_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) 
    and (ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) 
    and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (icmp_ln45_reg_1173 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage31) and (ap_const_boolean_0 = ap_block_pp0_stage31_11001) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) 
    and (icmp_ln45_reg_1173 = ap_const_lv1_0)))) then 
            m_axi_WEIGHTS_0_RREADY <= ap_const_logic_1;
        else 
            m_axi_WEIGHTS_0_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_WEIGHTS_0_WDATA <= ap_const_lv8_0;
    m_axi_WEIGHTS_0_WID <= ap_const_lv1_0;
    m_axi_WEIGHTS_0_WLAST <= ap_const_logic_0;
    m_axi_WEIGHTS_0_WSTRB <= ap_const_lv1_0;
    m_axi_WEIGHTS_0_WUSER <= ap_const_lv1_0;
    m_axi_WEIGHTS_0_WVALID <= ap_const_logic_0;
    mul_ln48_11_fu_626_p1 <= hidden_pos_load_11_cast_cast_reg_1103(2 - 1 downto 0);
    mul_ln48_13_fu_639_p1 <= hidden_pos_load_13_cast_cast_reg_1093(2 - 1 downto 0);
    mul_ln48_15_fu_664_p1 <= hidden_pos_load_15_cast_cast_reg_1083(2 - 1 downto 0);
    mul_ln48_17_fu_677_p1 <= hidden_pos_load_17_cast_cast_reg_1073(2 - 1 downto 0);
    mul_ln48_19_fu_715_p1 <= hidden_pos_load_19_cast_cast_reg_1063(2 - 1 downto 0);
    mul_ln48_1_fu_524_p1 <= hidden_pos_load_1_cast_cast_reg_1153(2 - 1 downto 0);
    mul_ln48_21_fu_728_p1 <= hidden_pos_load_21_cast_cast_reg_1053(2 - 1 downto 0);
    mul_ln48_23_fu_753_p1 <= hidden_pos_load_23_cast_cast_reg_1043(2 - 1 downto 0);
    mul_ln48_25_fu_766_p1 <= hidden_pos_load_25_cast_cast_reg_1033(2 - 1 downto 0);
    mul_ln48_27_fu_791_p1 <= hidden_pos_load_27_cast_cast_reg_1023(2 - 1 downto 0);
    mul_ln48_29_fu_804_p1 <= hidden_pos_load_29_cast_cast_reg_1013(2 - 1 downto 0);
    mul_ln48_3_fu_537_p1 <= hidden_pos_load_3_cast_cast_reg_1143(2 - 1 downto 0);
    mul_ln48_5_fu_550_p1 <= hidden_pos_load_5_cast_cast_reg_1133(2 - 1 downto 0);
    mul_ln48_7_fu_575_p1 <= hidden_pos_load_7_cast_cast_reg_1123(2 - 1 downto 0);
    mul_ln48_9_fu_588_p1 <= hidden_pos_load_9_cast_cast_reg_1113(2 - 1 downto 0);
    mul_ln48_fu_515_p1 <= hidden_pos_load_cast_cast_reg_1158(2 - 1 downto 0);
    out_pos_address0 <= zext_ln45_fu_867_p1(4 - 1 downto 0);
    out_pos_ce0 <= out_pos_ce0_local;

    out_pos_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001))) then 
            out_pos_ce0_local <= ap_const_logic_1;
        else 
            out_pos_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_pos_d0 <= select_ln7_fu_888_p3;
    out_pos_we0 <= out_pos_we0_local;

    out_pos_we0_local_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001))) then 
            out_pos_we0_local <= ap_const_logic_1;
        else 
            out_pos_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    select_ln7_fu_888_p3 <= 
        ap_const_lv2_3 when (tmp_fu_880_p3(0) = '1') else 
        ap_const_lv2_1;
        sext_ln45_1_cast_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln45_1),10));

    sext_ln48_31_fu_821_p0 <= reg_344;
        sext_ln48_32_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln48_1_reg_1202),11));

        sext_ln48_33_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_903_p3),11));

        sext_ln48_34_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln48_3_reg_1222),12));

        sext_ln48_35_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln48_4_reg_1237),11));

        sext_ln48_36_fu_599_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_916_p3),11));

        sext_ln48_37_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln48_6_fu_602_p2),12));

        sext_ln48_38_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln48_8_reg_1267),11));

        sext_ln48_39_fu_647_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_929_p3),11));

        sext_ln48_40_fu_682_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln48_10_reg_1282),12));

        sext_ln48_41_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln48_11_reg_1297),11));

        sext_ln48_42_fu_688_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_942_p3),11));

        sext_ln48_43_fu_697_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln48_13_fu_691_p2),12));

        sext_ln48_44_fu_733_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln48_16_reg_1327),11));

        sext_ln48_45_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_955_p3),11));

        sext_ln48_46_fu_850_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln48_18_reg_1342),12));

        sext_ln48_47_fu_771_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln48_19_reg_1357),11));

        sext_ln48_48_fu_774_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_968_p3),11));

        sext_ln48_49_fu_853_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln48_21_reg_1372),12));

        sext_ln48_50_fu_809_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln48_23_reg_1387),11));

        sext_ln48_51_fu_812_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_981_p3),11));

        sext_ln48_52_fu_825_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln48_25_reg_1402),12));

        sext_ln48_53_fu_828_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln48_26_reg_1412),11));

        sext_ln48_54_fu_831_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_994_p3),11));

        sext_ln48_55_fu_840_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln48_28_fu_834_p2),12));

    tmp_fu_880_p3 <= add_ln48_fu_875_p2(11 downto 11);
    zext_ln45_fu_867_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_2_reg_1168_pp0_iter1_reg),64));
end behav;
