# 1 "D:/Proyectos/tfg_hardware_accelerator/src/forward_fw.cpp"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 420 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "D:/Proyectos/tfg_hardware_accelerator/src/forward_fw.cpp" 2
# 1 "D:/Proyectos/tfg_hardware_accelerator/src/forward_fw.hpp" 1

# 1 "C:/Xilinx/Vitis/2024.2/include/ap_fixed.h" 1








# 1 "C:/Xilinx/Vitis/2024.2/include/etc/ap_common.h" 1
# 41 "C:/Xilinx/Vitis/2024.2/include/etc/ap_common.h"
# 1 "C:/Xilinx/Vitis/2024.2/include/etc/ap_decl.h" 1
# 54 "C:/Xilinx/Vitis/2024.2/include/etc/ap_decl.h"
enum ap_q_mode {
  AP_RND,
  AP_RND_ZERO,
  AP_RND_MIN_INF,
  AP_RND_INF,
  AP_RND_CONV,
  AP_TRN,
  AP_TRN_ZERO,
};
# 76 "C:/Xilinx/Vitis/2024.2/include/etc/ap_decl.h"
enum ap_o_mode {
  AP_SAT,
  AP_SAT_ZERO,
  AP_SAT_SYM,
  AP_WRAP,
  AP_WRAP_SM,
};
# 133 "C:/Xilinx/Vitis/2024.2/include/etc/ap_decl.h"
template <int _AP_W, bool _AP_S>
struct ap_int_base;

template <int _AP_W>
struct ap_int;

template <int _AP_W>
struct ap_uint;

template <int _AP_W, bool _AP_S>
struct ap_range_ref;

template <int _AP_W, bool _AP_S>
struct ap_bit_ref;

template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2>
struct ap_concat_ref;

template <int _AP_W, int _AP_I, bool _AP_S = true, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_fixed_base;

template <int _AP_W, int _AP_I, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_fixed;

template <int _AP_W, int _AP_I, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_ufixed;

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_range_ref;

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_bit_ref;


enum BaseMode { AP_BIN = 2, AP_OCT = 8, AP_DEC = 10, AP_HEX = 16 };
# 187 "C:/Xilinx/Vitis/2024.2/include/etc/ap_decl.h"
typedef signed long long ap_slong;
typedef unsigned long long ap_ulong;


enum {
  _AP_SIZE_char = 8,
  _AP_SIZE_short = sizeof(short) * 8,
  _AP_SIZE_int = sizeof(int) * 8,
  _AP_SIZE_long = sizeof(long) * 8,
  _AP_SIZE_ap_slong = sizeof(ap_slong) * 8
};
# 42 "C:/Xilinx/Vitis/2024.2/include/etc/ap_common.h" 2








# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/assert.h" 1 3
# 15 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/assert.h" 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/crtdefs.h" 1 3
# 10 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/crtdefs.h" 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/corecrt.h" 1 3
# 10 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/corecrt.h" 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 10 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/_mingw.h" 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/_mingw_mac.h" 1 3
# 11 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/_mingw.h" 2 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/_mingw_secapi.h" 1 3
# 44 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/_mingw_secapi.h" 3
extern "C++" {
template <bool __test, typename __dsttype>
  struct __if_array;
template <typename __dsttype>
  struct __if_array <true, __dsttype> {
    typedef __dsttype __type;
};
}
# 12 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/_mingw.h" 2 3
# 289 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/_mingw.h" 3
# 1 "C:/Xilinx/Vitis/2024.2/vcxx/lib/clang/14.0.6/include/vadefs.h" 1 3
# 12 "C:/Xilinx/Vitis/2024.2/vcxx/lib/clang/14.0.6/include/vadefs.h" 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/vadefs.h" 1 3








# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/_mingw.h" 1 3
# 623 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/_mingw.h" 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/sdks/_mingw_ddk.h" 1 3
# 624 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/_mingw.h" 2 3
# 10 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/vadefs.h" 2 3




#pragma pack(push,_CRT_PACKING)



extern "C" {





  typedef __builtin_va_list __gnuc_va_list;






  typedef __gnuc_va_list va_list;
# 99 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/vadefs.h" 3
}



#pragma pack(pop)
# 13 "C:/Xilinx/Vitis/2024.2/vcxx/lib/clang/14.0.6/include/vadefs.h" 2 3
# 290 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/_mingw.h" 2 3
# 575 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/_mingw.h" 3
extern "C" {
# 586 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/_mingw.h" 3
void __attribute__((__cdecl__)) __debugbreak(void);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) void __attribute__((__cdecl__)) __debugbreak(void)
{

  __asm__ __volatile__("int {$}3":);







}




const char *__mingw_get_crt_info (void);


}
# 11 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/corecrt.h" 2 3




#pragma pack(push,_CRT_PACKING)
# 35 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/corecrt.h" 3
__extension__ typedef unsigned long long size_t;
# 45 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/corecrt.h" 3
__extension__ typedef long long ssize_t;






typedef size_t rsize_t;
# 62 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/corecrt.h" 3
__extension__ typedef long long intptr_t;
# 75 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/corecrt.h" 3
__extension__ typedef unsigned long long uintptr_t;
# 88 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/corecrt.h" 3
__extension__ typedef long long ptrdiff_t;
# 106 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/corecrt.h" 3
typedef unsigned short wint_t;
typedef unsigned short wctype_t;





typedef int errno_t;




typedef long __time32_t;




__extension__ typedef long long __time64_t;
# 138 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/corecrt.h" 3
typedef __time64_t time_t;
# 430 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/corecrt.h" 3
struct threadlocaleinfostruct;
struct threadmbcinfostruct;
typedef struct threadlocaleinfostruct *pthreadlocinfo;
typedef struct threadmbcinfostruct *pthreadmbcinfo;
struct __lc_time_data;

typedef struct localeinfo_struct {
  pthreadlocinfo locinfo;
  pthreadmbcinfo mbcinfo;
} _locale_tstruct,*_locale_t;



typedef struct tagLC_ID {
  unsigned short wLanguage;
  unsigned short wCountry;
  unsigned short wCodePage;
} LC_ID,*LPLC_ID;




typedef struct threadlocaleinfostruct {





  int refcount;
  unsigned int lc_codepage;
  unsigned int lc_collate_cp;
  unsigned long lc_handle[6];
  LC_ID lc_id[6];
  struct {
    char *locale;
    wchar_t *wlocale;
    int *refcount;
    int *wrefcount;
  } lc_category[6];
  int lc_clike;
  int mb_cur_max;
  int *lconv_intl_refcount;
  int *lconv_num_refcount;
  int *lconv_mon_refcount;
  struct lconv *lconv;
  int *ctype1_refcount;
  unsigned short *ctype1;
  const unsigned short *pctype;
  const unsigned char *pclmap;
  const unsigned char *pcumap;
  struct __lc_time_data *lc_time_curr;

} threadlocinfo;
# 501 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/corecrt.h" 3
#pragma pack(pop)
# 11 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/crtdefs.h" 2 3
# 16 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/assert.h" 2 3

# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/stdlib.h" 1 3
# 36 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/stdlib.h" 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cstdlib" 1 3
# 40 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cstdlib" 3

# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/x86_64-w64-mingw32/bits/c++config.h" 1 3
# 256 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/x86_64-w64-mingw32/bits/c++config.h" 3
namespace std
{
  typedef long long unsigned int size_t;
  typedef long long int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 278 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/x86_64-w64-mingw32/bits/c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 528 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/x86_64-w64-mingw32/bits/c++config.h" 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/x86_64-w64-mingw32/bits/os_defines.h" 1 3
# 529 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/x86_64-w64-mingw32/bits/c++config.h" 2 3


# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/x86_64-w64-mingw32/bits/cpu_defines.h" 1 3
# 532 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/x86_64-w64-mingw32/bits/c++config.h" 2 3
# 42 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cstdlib" 2 3
# 75 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cstdlib" 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdlib.h" 1 3
# 10 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdlib.h" 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/corecrt_wstdlib.h" 1 3
# 12 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/corecrt_wstdlib.h" 3
extern "C" {


  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _itow_s (int _Val,wchar_t *_DstBuf,size_t _SizeInWords,int _Radix);
  extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) _itow_s(int _Val, wchar_t (&_DstBuf)[__size], int _Radix) { return _itow_s(_Val, _DstBuf, __size, _Radix); } }

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _ltow_s (long _Val,wchar_t *_DstBuf,size_t _SizeInWords,int _Radix);
  extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) _ltow_s(long _Val, wchar_t (&_DstBuf)[__size], int _Radix) { return _ltow_s(_Val, _DstBuf, __size, _Radix); } }

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _ultow_s (unsigned long _Val,wchar_t *_DstBuf,size_t _SizeInWords,int _Radix);
  extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) _ultow_s(unsigned long _Val, wchar_t (&_DstBuf)[__size], int _Radix) { return _ultow_s(_Val, _DstBuf, __size, _Radix); } }

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wgetenv_s(size_t *_ReturnSize,wchar_t *_DstBuf,size_t _DstSizeInWords,const wchar_t *_VarName);
  extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) _wgetenv_s(size_t* _ReturnSize, wchar_t (&_DstBuf)[__size], const wchar_t* _VarName) { return _wgetenv_s(_ReturnSize, _DstBuf, __size, _VarName); } }

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wdupenv_s(wchar_t **_Buffer,size_t *_BufferSizeInWords,const wchar_t *_VarName);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _i64tow_s(long long _Val,wchar_t *_DstBuf,size_t _SizeInWords,int _Radix);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _ui64tow_s(unsigned long long _Val,wchar_t *_DstBuf,size_t _SizeInWords,int _Radix);

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wmakepath_s(wchar_t *_PathResult,size_t _SizeInWords,const wchar_t *_Drive,const wchar_t *_Dir,const wchar_t *_Filename,const wchar_t *_Ext);
  extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) _wmakepath_s(wchar_t (&_PathResult)[__size], const wchar_t* _Drive, const wchar_t* _Dir, const wchar_t* _Filename, const wchar_t* _Ext) { return _wmakepath_s(_PathResult,__size,_Drive,_Dir,_Filename,_Ext); } }

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wputenv_s(const wchar_t *_Name,const wchar_t *_Value);

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wsearchenv_s(const wchar_t *_Filename,const wchar_t *_EnvVar,wchar_t *_ResultPath,size_t _SizeInWords);
  extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) _wsearchenv_s(const wchar_t* _Filename, const wchar_t* _EnvVar, wchar_t (&_ResultPath)[__size]) { return _wsearchenv_s(_Filename, _EnvVar, _ResultPath, __size); } }

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wsplitpath_s(const wchar_t *_FullPath,wchar_t *_Drive,size_t _DriveSizeInWords,wchar_t *_Dir,size_t _DirSizeInWords,wchar_t *_Filename,size_t _FilenameSizeInWords,wchar_t *_Ext,size_t _ExtSizeInWords);
  extern "C++" { template <size_t __drive_size, size_t __dir_size, size_t __name_size, size_t __ext_size> inline errno_t __attribute__((__cdecl__)) _wsplitpath_s(const wchar_t *_Dest, wchar_t (&__drive)[__drive_size], wchar_t (&__dir)[__dir_size], wchar_t (&__name)[__name_size], wchar_t (&__ext)[__ext_size]) { return _wsplitpath_s(_Dest, __drive, __drive_size, __dir, __dir_size, __name, __name_size, __ext, __ext_size); } }


}
# 11 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdlib.h" 2 3
# 1 "C:/Xilinx/Vitis/2024.2/vcxx/lib/clang/14.0.6/include/limits.h" 1 3
# 21 "C:/Xilinx/Vitis/2024.2/vcxx/lib/clang/14.0.6/include/limits.h" 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/limits.h" 1 3
# 22 "C:/Xilinx/Vitis/2024.2/vcxx/lib/clang/14.0.6/include/limits.h" 2 3
# 12 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdlib.h" 2 3
# 26 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdlib.h" 3
#pragma pack(push,_CRT_PACKING)


extern "C" {
# 50 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdlib.h" 3
  typedef int (__attribute__((__cdecl__)) *_onexit_t)(void);
# 60 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdlib.h" 3
  typedef struct _div_t {
    int quot;
    int rem;
  } div_t;

  typedef struct _ldiv_t {
    long quot;
    long rem;
  } ldiv_t;





#pragma pack(4)
  typedef struct {
    unsigned char ld[10];
  } _LDOUBLE;
#pragma pack()



  typedef struct {
    double x;
  } _CRT_DOUBLE;

  typedef struct {
    float f;
  } _CRT_FLOAT;




  typedef struct {
    long double x;
  } _LONGDOUBLE;



#pragma pack(4)
  typedef struct {
    unsigned char ld12[12];
  } _LDBL12;
#pragma pack()
# 116 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdlib.h" 3
  extern int * __imp___mb_cur_max;




__attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) ___mb_cur_max_func(void);
# 143 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdlib.h" 3
  typedef void (__attribute__((__cdecl__)) *_purecall_handler)(void);

  __attribute__ ((__dllimport__)) _purecall_handler __attribute__((__cdecl__)) _set_purecall_handler(_purecall_handler _Handler);
  __attribute__ ((__dllimport__)) _purecall_handler __attribute__((__cdecl__)) _get_purecall_handler(void);

  typedef void (__attribute__((__cdecl__)) *_invalid_parameter_handler)(const wchar_t *,const wchar_t *,const wchar_t *,unsigned int,uintptr_t);
  __attribute__ ((__dllimport__)) _invalid_parameter_handler __attribute__((__cdecl__)) _set_invalid_parameter_handler(_invalid_parameter_handler _Handler);
  __attribute__ ((__dllimport__)) _invalid_parameter_handler __attribute__((__cdecl__)) _get_invalid_parameter_handler(void);



  __attribute__ ((__dllimport__)) extern int *__attribute__((__cdecl__)) _errno(void);

  errno_t __attribute__((__cdecl__)) _set_errno(int _Value);
  errno_t __attribute__((__cdecl__)) _get_errno(int *_Value);

  __attribute__ ((__dllimport__)) unsigned long *__attribute__((__cdecl__)) __doserrno(void);

  errno_t __attribute__((__cdecl__)) _set_doserrno(unsigned long _Value);
  errno_t __attribute__((__cdecl__)) _get_doserrno(unsigned long *_Value);
# 173 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdlib.h" 3
  extern __attribute__((dllimport)) char *_sys_errlist[1];
  extern __attribute__((dllimport)) int _sys_nerr;





  __attribute__ ((__dllimport__)) char ***__attribute__((__cdecl__)) __p___argv(void);
  __attribute__ ((__dllimport__)) int *__attribute__((__cdecl__)) __p__fmode(void);
# 191 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdlib.h" 3
  errno_t __attribute__((__cdecl__)) _get_pgmptr(char **_Value);
  errno_t __attribute__((__cdecl__)) _get_wpgmptr(wchar_t **_Value);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _set_fmode(int _Mode);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _get_fmode(int *_PMode);
# 282 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdlib.h" 3
  extern int * __imp___argc;



  extern char *** __imp___argv;



  extern wchar_t *** __imp___wargv;
# 322 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdlib.h" 3
  extern char *** __imp__environ;




  extern wchar_t *** __imp__wenviron;






  extern char ** __imp__pgmptr;




  extern wchar_t ** __imp__wpgmptr;




  extern unsigned int * __imp__osplatform;




  extern unsigned int * __imp__osver;




  extern unsigned int * __imp__winver;




  extern unsigned int * __imp__winmajor;




  extern unsigned int * __imp__winminor;





  errno_t __attribute__((__cdecl__)) _get_osplatform(unsigned int *_Value);
  errno_t __attribute__((__cdecl__)) _get_osver(unsigned int *_Value);
  errno_t __attribute__((__cdecl__)) _get_winver(unsigned int *_Value);
  errno_t __attribute__((__cdecl__)) _get_winmajor(unsigned int *_Value);
  errno_t __attribute__((__cdecl__)) _get_winminor(unsigned int *_Value);




  extern "C++" {
    template <typename _CountofType,size_t _SizeOfArray> char (*__countof_helper( _CountofType (&_Array)[_SizeOfArray]))[_SizeOfArray];

  }





  void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) exit(int _Code) __attribute__ ((__noreturn__));
  void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _exit(int _Code) __attribute__ ((__noreturn__));






  void __attribute__((__cdecl__)) _Exit(int) __attribute__ ((__noreturn__));
# 405 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdlib.h" 3
  void __attribute__((__cdecl__)) __attribute__ ((__noreturn__)) abort(void);




  __attribute__ ((__dllimport__)) unsigned int __attribute__((__cdecl__)) _set_abort_behavior(unsigned int _Flags,unsigned int _Mask);



  int __attribute__((__cdecl__)) abs(int _X);
  long __attribute__((__cdecl__)) labs(long _X);


  __extension__ long long __attribute__((__cdecl__)) _abs64(long long);

  extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) long long __attribute__((__cdecl__)) _abs64(long long x) {
    return __builtin_llabs(x);
  }


  int __attribute__((__cdecl__)) atexit(void (__attribute__((__cdecl__)) *)(void));





  double __attribute__((__cdecl__)) atof(const char *_String);
  double __attribute__((__cdecl__)) _atof_l(const char *_String,_locale_t _Locale);

  int __attribute__((__cdecl__)) atoi(const char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoi_l(const char *_Str,_locale_t _Locale);
  long __attribute__((__cdecl__)) atol(const char *_Str);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _atol_l(const char *_Str,_locale_t _Locale);


  void *__attribute__((__cdecl__)) bsearch(const void *_Key,const void *_Base,size_t _NumOfElements,size_t _SizeOfElements,int (__attribute__((__cdecl__)) *_PtFuncCompare)(const void *,const void *));
  void __attribute__((__cdecl__)) qsort(void *_Base,size_t _NumOfElements,size_t _SizeOfElements,int (__attribute__((__cdecl__)) *_PtFuncCompare)(const void *,const void *));

  unsigned short __attribute__((__cdecl__)) _byteswap_ushort(unsigned short _Short);
  unsigned long __attribute__((__cdecl__)) _byteswap_ulong (unsigned long _Long);
  __extension__ unsigned long long __attribute__((__cdecl__)) _byteswap_uint64(unsigned long long _Int64);
  div_t __attribute__((__cdecl__)) div(int _Numerator,int _Denominator);
  char *__attribute__((__cdecl__)) getenv(const char *_VarName) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _itoa(int _Value,char *_Dest,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _i64toa(long long _Val,char *_DstBuf,int _Radix) ;
  __extension__ __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _ui64toa(unsigned long long _Val,char *_DstBuf,int _Radix) ;
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _atoi64(const char *_String);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _atoi64_l(const char *_String,_locale_t _Locale);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _strtoi64(const char *_String,char **_EndPtr,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _strtoi64_l(const char *_String,char **_EndPtr,int _Radix,_locale_t _Locale);
  __extension__ __attribute__ ((__dllimport__)) unsigned long long __attribute__((__cdecl__)) _strtoui64(const char *_String,char **_EndPtr,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) unsigned long long __attribute__((__cdecl__)) _strtoui64_l(const char *_String,char **_EndPtr,int _Radix,_locale_t _Locale);
  ldiv_t __attribute__((__cdecl__)) ldiv(long _Numerator,long _Denominator);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _ltoa(long _Value,char *_Dest,int _Radix) ;
  int __attribute__((__cdecl__)) mblen(const char *_Ch,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _mblen_l(const char *_Ch,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstrlen(const char *_Str);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstrlen_l(const char *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstrnlen(const char *_Str,size_t _MaxCount);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstrnlen_l(const char *_Str,size_t _MaxCount,_locale_t _Locale);
  int __attribute__((__cdecl__)) mbtowc(wchar_t * __restrict__ _DstCh,const char * __restrict__ _SrcCh,size_t _SrcSizeInBytes);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _mbtowc_l(wchar_t * __restrict__ _DstCh,const char * __restrict__ _SrcCh,size_t _SrcSizeInBytes,_locale_t _Locale);
  size_t __attribute__((__cdecl__)) mbstowcs(wchar_t * __restrict__ _Dest,const char * __restrict__ _Source,size_t _MaxCount);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstowcs_l(wchar_t * __restrict__ _Dest,const char * __restrict__ _Source,size_t _MaxCount,_locale_t _Locale);
  int __attribute__((__cdecl__)) mkstemp(char *template_name);
  int __attribute__((__cdecl__)) rand(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _set_error_mode(int _Mode);
  void __attribute__((__cdecl__)) srand(unsigned int _Seed);
# 483 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdlib.h" 3
inline __attribute__((__cdecl__))
double __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strtod(const char * __restrict__ _Str,char ** __restrict__ _EndPtr)
{
  double __attribute__((__cdecl__)) __mingw_strtod (const char * __restrict__, char ** __restrict__);
  return __mingw_strtod( _Str, _EndPtr);
}

inline __attribute__((__cdecl__))
float __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strtof(const char * __restrict__ _Str,char ** __restrict__ _EndPtr)
{
  float __attribute__((__cdecl__)) __mingw_strtof (const char * __restrict__, char ** __restrict__);
  return __mingw_strtof( _Str, _EndPtr);
}






  long double __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strtold(const char * __restrict__ , char ** __restrict__ );


  extern double __attribute__((__cdecl__)) __attribute__ ((__nothrow__))
  __strtod (const char * __restrict__ , char ** __restrict__);







  float __attribute__((__cdecl__)) __mingw_strtof (const char * __restrict__, char ** __restrict__);
  double __attribute__((__cdecl__)) __mingw_strtod (const char * __restrict__, char ** __restrict__);
  long double __attribute__((__cdecl__)) __mingw_strtold(const char * __restrict__, char ** __restrict__);

  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _strtod_l(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,_locale_t _Locale);
  long __attribute__((__cdecl__)) strtol(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _strtol_l(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);
  unsigned long __attribute__((__cdecl__)) strtoul(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) unsigned long __attribute__((__cdecl__)) _strtoul_l(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);


  int __attribute__((__cdecl__)) system(const char *_Command);

  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _ultoa(unsigned long _Value,char *_Dest,int _Radix) ;
  int __attribute__((__cdecl__)) wctomb(char *_MbCh,wchar_t _WCh) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wctomb_l(char *_MbCh,wchar_t _WCh,_locale_t _Locale) ;
  size_t __attribute__((__cdecl__)) wcstombs(char * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _MaxCount) ;
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _wcstombs_l(char * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _MaxCount,_locale_t _Locale) ;



  void *__attribute__((__cdecl__)) calloc(size_t _NumOfElements,size_t _SizeOfElements);
  void __attribute__((__cdecl__)) free(void *_Memory);
  void *__attribute__((__cdecl__)) malloc(size_t _Size);
  void *__attribute__((__cdecl__)) realloc(void *_Memory,size_t _NewSize);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _recalloc(void *_Memory,size_t _Count,size_t _Size);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _aligned_free(void *_Memory);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_malloc(size_t _Size,size_t _Alignment);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_offset_malloc(size_t _Size,size_t _Alignment,size_t _Offset);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_realloc(void *_Memory,size_t _Size,size_t _Alignment);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_recalloc(void *_Memory,size_t _Count,size_t _Size,size_t _Alignment);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_offset_realloc(void *_Memory,size_t _Size,size_t _Alignment,size_t _Offset);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_offset_recalloc(void *_Memory,size_t _Count,size_t _Size,size_t _Alignment,size_t _Offset);





  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _itow(int _Value,wchar_t *_Dest,int _Radix) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _ltow(long _Value,wchar_t *_Dest,int _Radix) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _ultow(unsigned long _Value,wchar_t *_Dest,int _Radix) ;

  double __attribute__((__cdecl__)) __mingw_wcstod(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr);
  float __attribute__((__cdecl__)) __mingw_wcstof(const wchar_t * __restrict__ nptr, wchar_t ** __restrict__ endptr);
  long double __attribute__((__cdecl__)) __mingw_wcstold(const wchar_t * __restrict__, wchar_t ** __restrict__);


  inline __attribute__((__cdecl__))
  double __attribute__((__cdecl__)) wcstod(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr){
    return __mingw_wcstod(_Str,_EndPtr);
  }
  inline __attribute__((__cdecl__))
  float __attribute__((__cdecl__)) wcstof(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr){
    return __mingw_wcstof(_Str,_EndPtr);
  }






  long double __attribute__((__cdecl__)) wcstold(const wchar_t * __restrict__, wchar_t ** __restrict__);

  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _wcstod_l(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,_locale_t _Locale);
  long __attribute__((__cdecl__)) wcstol(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _wcstol_l(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);
  unsigned long __attribute__((__cdecl__)) wcstoul(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) unsigned long __attribute__((__cdecl__)) _wcstoul_l(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wgetenv(const wchar_t *_VarName) ;


  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wsystem(const wchar_t *_Command);

  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _wtof(const wchar_t *_Str);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _wtof_l(const wchar_t *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wtoi(const wchar_t *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wtoi_l(const wchar_t *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _wtol(const wchar_t *_Str);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _wtol_l(const wchar_t *_Str,_locale_t _Locale);

  __extension__ __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _i64tow(long long _Val,wchar_t *_DstBuf,int _Radix) ;
  __extension__ __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _ui64tow(unsigned long long _Val,wchar_t *_DstBuf,int _Radix) ;
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _wtoi64(const wchar_t *_Str);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _wtoi64_l(const wchar_t *_Str,_locale_t _Locale);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _wcstoi64(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _wcstoi64_l(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix,_locale_t _Locale);
  __extension__ __attribute__ ((__dllimport__)) unsigned long long __attribute__((__cdecl__)) _wcstoui64(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) unsigned long long __attribute__((__cdecl__)) _wcstoui64_l(const wchar_t *_Str ,wchar_t **_EndPtr,int _Radix,_locale_t _Locale);


  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _putenv(const char *_EnvString);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wputenv(const wchar_t *_EnvString);



  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _fullpath(char *_FullPath,const char *_Path,size_t _SizeInBytes);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _ecvt(double _Val,int _NumOfDigits,int *_PtDec,int *_PtSign) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _fcvt(double _Val,int _NumOfDec,int *_PtDec,int *_PtSign) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _gcvt(double _Val,int _NumOfDigits,char *_DstBuf) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atodbl(_CRT_DOUBLE *_Result,char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoldbl(_LDOUBLE *_Result,char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoflt(_CRT_FLOAT *_Result,char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atodbl_l(_CRT_DOUBLE *_Result,char *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoldbl_l(_LDOUBLE *_Result,char *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoflt_l(_CRT_FLOAT *_Result,char *_Str,_locale_t _Locale);
# 634 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdlib.h" 3
unsigned long __attribute__((__cdecl__)) _lrotl(unsigned long,int);
unsigned long __attribute__((__cdecl__)) _lrotr(unsigned long,int);





  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _makepath(char *_Path,const char *_Drive,const char *_Dir,const char *_Filename,const char *_Ext);
  _onexit_t __attribute__((__cdecl__)) _onexit(_onexit_t _Func);



  void __attribute__((__cdecl__)) perror(const char *_ErrMsg);





  __extension__ unsigned long long __attribute__((__cdecl__)) _rotl64(unsigned long long _Val,int _Shift);
  __extension__ unsigned long long __attribute__((__cdecl__)) _rotr64(unsigned long long Value,int Shift);






  unsigned int __attribute__((__cdecl__)) _rotr(unsigned int _Val,int _Shift);
  unsigned int __attribute__((__cdecl__)) _rotl(unsigned int _Val,int _Shift);


  __extension__ unsigned long long __attribute__((__cdecl__)) _rotr64(unsigned long long _Val,int _Shift);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _searchenv(const char *_Filename,const char *_EnvVar,char *_ResultPath) ;
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _splitpath(const char *_FullPath,char *_Drive,char *_Dir,char *_Filename,char *_Ext) ;
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _swab(char *_Buf1,char *_Buf2,int _SizeInBytes);



  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wfullpath(wchar_t *_FullPath,const wchar_t *_Path,size_t _SizeInWords);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _wmakepath(wchar_t *_ResultPath,const wchar_t *_Drive,const wchar_t *_Dir,const wchar_t *_Filename,const wchar_t *_Ext);


  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _wperror(const wchar_t *_ErrMsg);

  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _wsearchenv(const wchar_t *_Filename,const wchar_t *_EnvVar,wchar_t *_ResultPath) ;
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _wsplitpath(const wchar_t *_FullPath,wchar_t *_Drive,wchar_t *_Dir,wchar_t *_Filename,wchar_t *_Ext) ;


  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _beep(unsigned _Frequency,unsigned _Duration) __attribute__ ((__deprecated__));

  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _seterrormode(int _Mode) __attribute__ ((__deprecated__));
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _sleep(unsigned long _Duration) __attribute__ ((__deprecated__));
# 705 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdlib.h" 3
  char *__attribute__((__cdecl__)) ecvt(double _Val,int _NumOfDigits,int *_PtDec,int *_PtSign) ;
  char *__attribute__((__cdecl__)) fcvt(double _Val,int _NumOfDec,int *_PtDec,int *_PtSign) ;
  char *__attribute__((__cdecl__)) gcvt(double _Val,int _NumOfDigits,char *_DstBuf) ;
  char *__attribute__((__cdecl__)) itoa(int _Val,char *_DstBuf,int _Radix) ;
  char *__attribute__((__cdecl__)) ltoa(long _Val,char *_DstBuf,int _Radix) ;
  int __attribute__((__cdecl__)) putenv(const char *_EnvString) ;



  void __attribute__((__cdecl__)) swab(char *_Buf1,char *_Buf2,int _SizeInBytes) ;


  char *__attribute__((__cdecl__)) ultoa(unsigned long _Val,char *_Dstbuf,int _Radix) ;
  _onexit_t __attribute__((__cdecl__)) onexit(_onexit_t _Func);





  typedef struct { __extension__ long long quot, rem; } lldiv_t;

  __extension__ lldiv_t __attribute__((__cdecl__)) lldiv(long long, long long);

  __extension__ long long __attribute__((__cdecl__)) llabs(long long);




  __extension__ long long __attribute__((__cdecl__)) strtoll(const char * __restrict__, char ** __restrict, int);
  __extension__ unsigned long long __attribute__((__cdecl__)) strtoull(const char * __restrict__, char ** __restrict__, int);


  __extension__ long long __attribute__((__cdecl__)) atoll (const char *);


  __extension__ long long __attribute__((__cdecl__)) wtoll (const wchar_t *);
  __extension__ char *__attribute__((__cdecl__)) lltoa (long long, char *, int);
  __extension__ char *__attribute__((__cdecl__)) ulltoa (unsigned long long , char *, int);
  __extension__ wchar_t *__attribute__((__cdecl__)) lltow (long long, wchar_t *, int);
  __extension__ wchar_t *__attribute__((__cdecl__)) ulltow (unsigned long long, wchar_t *, int);
# 760 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdlib.h" 3
}


#pragma pack(pop)

# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/sec_api/stdlib_s.h" 1 3








# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/stdlib.h" 1 3
# 30 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/stdlib.h" 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdlib.h" 1 3
# 31 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/stdlib.h" 2 3
# 10 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/sec_api/stdlib_s.h" 2 3


extern "C" {


  __attribute__ ((__dllimport__)) void * __attribute__((__cdecl__)) bsearch_s(const void *_Key,const void *_Base,rsize_t _NumOfElements,rsize_t _SizeOfElements,int (__attribute__((__cdecl__)) * _PtFuncCompare)(void *, const void *, const void *), void *_Context);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _dupenv_s(char **_PBuffer,size_t *_PBufferSizeInBytes,const char *_VarName);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) getenv_s(size_t *_ReturnSize,char *_DstBuf,rsize_t _DstSize,const char *_VarName);
  extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) getenv_s(size_t * _ReturnSize, char (&_Dest)[__size], const char * _VarName) { return getenv_s(_ReturnSize, _Dest, __size, _VarName); } }
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _itoa_s(int _Value,char *_DstBuf,size_t _Size,int _Radix);
  extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) _itoa_s(int _Value, char (&_Dest)[__size], int _Radix) { return _itoa_s(_Value, _Dest, __size, _Radix); } }
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _i64toa_s(long long _Val,char *_DstBuf,size_t _Size,int _Radix);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _ui64toa_s(unsigned long long _Val,char *_DstBuf,size_t _Size,int _Radix);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _ltoa_s(long _Val,char *_DstBuf,size_t _Size,int _Radix);
  extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) _ltoa_s(long _Value, char (&_Dest)[__size], int _Radix) { return _ltoa_s(_Value, _Dest, __size, _Radix); } }
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) mbstowcs_s(size_t *_PtNumOfCharConverted,wchar_t *_DstBuf,size_t _SizeInWords,const char *_SrcBuf,size_t _MaxCount);
  extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) mbstowcs_s(size_t * _PtNumOfCharConverted, wchar_t (&_Dest)[__size], const char * _Source, size_t _MaxCount) { return mbstowcs_s(_PtNumOfCharConverted, _Dest, __size, _Source, _MaxCount); } }
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _mbstowcs_s_l(size_t *_PtNumOfCharConverted,wchar_t *_DstBuf,size_t _SizeInWords,const char *_SrcBuf,size_t _MaxCount,_locale_t _Locale);
  extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) _mbstowcs_s_l(size_t * _PtNumOfCharConverted, wchar_t (&_Dest)[__size], const char * _Source, size_t _MaxCount, _locale_t _Locale) { return _mbstowcs_s_l(_PtNumOfCharConverted, _Dest, __size, _Source, _MaxCount, _Locale); } }
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _ultoa_s(unsigned long _Val,char *_DstBuf,size_t _Size,int _Radix);
  extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) _ultoa_s(unsigned long _Value, char (&_Dest)[__size], int _Radix) { return _ultoa_s(_Value, _Dest, __size, _Radix); } }
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) wctomb_s(int *_SizeConverted,char *_MbCh,rsize_t _SizeInBytes,wchar_t _WCh);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wctomb_s_l(int *_SizeConverted,char *_MbCh,size_t _SizeInBytes,wchar_t _WCh,_locale_t _Locale);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) wcstombs_s(size_t *_PtNumOfCharConverted,char *_Dst,size_t _DstSizeInBytes,const wchar_t *_Src,size_t _MaxCountInBytes);
  extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) wcstombs_s(size_t* _PtNumOfCharConverted, char (&_Dst)[__size], const wchar_t* _Src, size_t _MaxCountInBytes) { return wcstombs_s(_PtNumOfCharConverted, _Dst, __size, _Src, _MaxCountInBytes); } }
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcstombs_s_l(size_t *_PtNumOfCharConverted,char *_Dst,size_t _DstSizeInBytes,const wchar_t *_Src,size_t _MaxCountInBytes,_locale_t _Locale);
  extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) _wcstombs_s_l(size_t* _PtNumOfCharConverted, char (&_Dst)[__size], const wchar_t* _Src, size_t _MaxCountInBytes, _locale_t _Locale) { return _wcstombs_s_l(_PtNumOfCharConverted, _Dst, __size, _Src, _MaxCountInBytes, _Locale); } }


  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _ecvt_s(char *_DstBuf,size_t _Size,double _Val,int _NumOfDights,int *_PtDec,int *_PtSign);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _fcvt_s(char *_DstBuf,size_t _Size,double _Val,int _NumOfDec,int *_PtDec,int *_PtSign);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _gcvt_s(char *_DstBuf,size_t _Size,double _Val,int _NumOfDigits);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _makepath_s(char *_PathResult,size_t _Size,const char *_Drive,const char *_Dir,const char *_Filename,const char *_Ext);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _putenv_s(const char *_Name,const char *_Value);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _searchenv_s(const char *_Filename,const char *_EnvVar,char *_ResultPath,size_t _SizeInBytes);

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _splitpath_s(const char *_FullPath,char *_Drive,size_t _DriveSize,char *_Dir,size_t _DirSize,char *_Filename,size_t _FilenameSize,char *_Ext,size_t _ExtSize);
  extern "C++" { template <size_t __drive_size, size_t __dir_size, size_t __name_size, size_t __ext_size> inline errno_t __attribute__((__cdecl__)) _splitpath_s(const char *_Dest, char (&__drive)[__drive_size], char (&__dir)[__dir_size], char (&__name)[__name_size], char (&__ext)[__ext_size]) { return _splitpath_s(_Dest, __drive, __drive_size, __dir, __dir_size, __name, __name_size, __ext, __ext_size); } }



  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) qsort_s(void *_Base,size_t _NumOfElements,size_t _SizeOfElements,int (__attribute__((__cdecl__)) *_PtFuncCompare)(void *,const void *,const void *),void *_Context);





}
# 766 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdlib.h" 2 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/malloc.h" 1 3
# 11 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/malloc.h" 3
#pragma pack(push,_CRT_PACKING)


extern "C" {
# 46 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/malloc.h" 3
  typedef struct _heapinfo {
    int *_pentry;
    size_t _size;
    int _useflag;
  } _HEAPINFO;


  extern unsigned int _amblksiz;
# 74 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/malloc.h" 3
void * __mingw_aligned_malloc (size_t _Size, size_t _Alignment);
void __mingw_aligned_free (void *_Memory);
void * __mingw_aligned_offset_realloc (void *_Memory, size_t _Size, size_t _Alignment, size_t _Offset);
void * __mingw_aligned_realloc (void *_Memory, size_t _Size, size_t _Offset);


# 1 "C:/Xilinx/Vitis/2024.2/vcxx/lib/clang/14.0.6/include/mm_malloc.h" 1 3
# 13 "C:/Xilinx/Vitis/2024.2/vcxx/lib/clang/14.0.6/include/mm_malloc.h" 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/stdlib.h" 1 3
# 30 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/stdlib.h" 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdlib.h" 1 3
# 31 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/stdlib.h" 2 3
# 14 "C:/Xilinx/Vitis/2024.2/vcxx/lib/clang/14.0.6/include/mm_malloc.h" 2 3


# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/malloc.h" 1 3
# 17 "C:/Xilinx/Vitis/2024.2/vcxx/lib/clang/14.0.6/include/mm_malloc.h" 2 3
# 30 "C:/Xilinx/Vitis/2024.2/vcxx/lib/clang/14.0.6/include/mm_malloc.h" 3
static __inline__ void *__attribute__((__always_inline__,
                                       __malloc__))
_mm_malloc(size_t __size, size_t __align)
{
  if (__align == 1) {
    return malloc(__size);
  }

  if (!(__align & (__align - 1)) && __align < sizeof(void *))
    __align = sizeof(void *);

  void *__mallocedMemory;

  __mallocedMemory = __mingw_aligned_malloc(__size, __align);







  return __mallocedMemory;
}

static __inline__ void __attribute__((__always_inline__))
_mm_free(void *__p)
{

  __mingw_aligned_free(__p);





}
# 81 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/malloc.h" 2 3




  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _resetstkoflw (void);

  __attribute__ ((__dllimport__)) unsigned long __attribute__((__cdecl__)) _set_malloc_crt_max_wait(unsigned long _NewValue);

  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _expand(void *_Memory,size_t _NewSize);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _msize(void *_Memory);






  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _get_sbh_threshold(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _set_sbh_threshold(size_t _NewValue);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _set_amblksiz(size_t _Value);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _get_amblksiz(size_t *_Value);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapadd(void *_Memory,size_t _Size);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapchk(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapmin(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapset(unsigned int _Fill);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapwalk(_HEAPINFO *_EntryInfo);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _heapused(size_t *_Used,size_t *_Commit);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _get_heap_handle(void);
# 120 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/malloc.h" 3
  static __inline void *_MarkAllocaS(void *_Ptr,unsigned int _Marker) {
    if(_Ptr) {
      *((unsigned int*)_Ptr) = _Marker;
      _Ptr = (char*)_Ptr + 16;
    }
    return _Ptr;
  }
# 139 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/malloc.h" 3
  static __inline void __attribute__((__cdecl__)) _freea(void *_Memory) {
    unsigned int _Marker;
    if(_Memory) {
      _Memory = (char*)_Memory - 16;
      _Marker = *(unsigned int *)_Memory;
      if(_Marker==0xDDDD) {
 free(_Memory);
      }





    }
  }
# 182 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/malloc.h" 3
}


#pragma pack(pop)
# 767 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdlib.h" 2 3
# 76 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cstdlib" 2 3

# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/std_abs.h" 1 3
# 34 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/std_abs.h" 3
# 46 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/std_abs.h" 3
extern "C++"
{
namespace std
{


  using ::abs;


  inline long
  abs(long __i) { return __builtin_labs(__i); }



  inline long long
  abs(long long __x) { return __builtin_llabs (__x); }
# 70 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/std_abs.h" 3
  inline constexpr double
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline constexpr float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }



  inline constexpr __int128
  abs(__int128 __x) { return __x >= 0 ? __x : -__x; }
# 101 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/std_abs.h" 3
  inline constexpr
  __float128
  abs(__float128 __x)
  { return __x < 0 ? -__x : __x; }



}
}
# 78 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cstdlib" 2 3
# 121 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cstdlib" 3
extern "C++"
{
namespace std
{


  using ::div_t;
  using ::ldiv_t;

  using ::abort;



  using ::atexit;





  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;

  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;

  using ::qsort;





  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;

  using ::wcstombs;
  using ::wctomb;



  inline ldiv_t
  div(long __i, long __j) { return ldiv(__i, __j); }




}
# 195 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cstdlib" 3
namespace __gnu_cxx
{



  using ::lldiv_t;





  using ::_Exit;



  using ::llabs;

  inline lldiv_t
  div(long long __n, long long __d)
  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }

  using ::lldiv;
# 227 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cstdlib" 3
  using ::atoll;
  using ::strtoll;
  using ::strtoull;

  using ::strtof;
  using ::strtold;


}

namespace std
{

  using ::__gnu_cxx::lldiv_t;

  using ::__gnu_cxx::_Exit;

  using ::__gnu_cxx::llabs;
  using ::__gnu_cxx::div;
  using ::__gnu_cxx::lldiv;

  using ::__gnu_cxx::atoll;
  using ::__gnu_cxx::strtof;
  using ::__gnu_cxx::strtoll;
  using ::__gnu_cxx::strtoull;
  using ::__gnu_cxx::strtold;
}



}
# 37 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/stdlib.h" 2 3

using std::abort;
using std::atexit;
using std::exit;
# 51 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/stdlib.h" 3
using std::div_t;
using std::ldiv_t;

using std::abs;
using std::atof;
using std::atoi;
using std::atol;
using std::bsearch;
using std::calloc;
using std::div;
using std::free;
using std::getenv;
using std::labs;
using std::ldiv;
using std::malloc;

using std::mblen;
using std::mbstowcs;
using std::mbtowc;

using std::qsort;
using std::rand;
using std::realloc;
using std::srand;
using std::strtod;
using std::strtol;
using std::strtoul;
using std::system;

using std::wcstombs;
using std::wctomb;
# 18 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/assert.h" 2 3



extern "C" {


__attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _wassert(const wchar_t *_Message,const wchar_t *_File,unsigned _Line);
__attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _assert (const char *_Message, const char *_File, unsigned _Line);


}
# 51 "C:/Xilinx/Vitis/2024.2/include/etc/ap_common.h" 2
# 64 "C:/Xilinx/Vitis/2024.2/include/etc/ap_common.h"
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdio.h" 1 3








# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/corecrt_stdio_config.h" 1 3
# 10 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdio.h" 2 3

#pragma pack(push,_CRT_PACKING)
# 23 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdio.h" 3
extern "C" {
# 33 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdio.h" 3
  struct _iobuf {



    char *_ptr;
    int _cnt;
    char *_base;
    int _flag;
    int _file;
    int _charbuf;
    int _bufsiz;
    char *_tmpfname;

  };
  typedef struct _iobuf FILE;
# 91 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdio.h" 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/_mingw_off_t.h" 1 3




  typedef long _off_t;

  typedef long off32_t;





  __extension__ typedef long long _off64_t;

  __extension__ typedef long long off64_t;
# 26 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/_mingw_off_t.h" 3
typedef off32_t off_t;
# 92 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdio.h" 2 3

__attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) __acrt_iob_func(unsigned index);


  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) __iob_func(void);
# 115 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdio.h" 3
  __extension__ typedef long long fpos_t;
# 156 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdio.h" 3
extern
  __attribute__((__format__ (gnu_scanf, 2, 3))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_sscanf(const char * __restrict__ _Src,const char * __restrict__ _Format,...);
extern
  __attribute__((__format__ (gnu_scanf, 2, 0))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vsscanf (const char * __restrict__ _Str,const char * __restrict__ Format,va_list argp);
extern
  __attribute__((__format__ (gnu_scanf, 1, 2))) __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_scanf(const char * __restrict__ _Format,...);
extern
  __attribute__((__format__ (gnu_scanf, 1, 0))) __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_vscanf(const char * __restrict__ Format, va_list argp);
extern
  __attribute__((__format__ (gnu_scanf, 2, 3))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_fscanf(FILE * __restrict__ _File,const char * __restrict__ _Format,...);
extern
  __attribute__((__format__ (gnu_scanf, 2, 0))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vfscanf (FILE * __restrict__ fp, const char * __restrict__ Format,va_list argp);

extern
  __attribute__((__format__ (gnu_printf, 3, 0))) __attribute__ ((__nonnull__ (3)))
  int __attribute__((__cdecl__)) __mingw_vsnprintf(char * __restrict__ _DstBuf,size_t _MaxCount,const char * __restrict__ _Format,
                               va_list _ArgList);
extern
  __attribute__((__format__ (gnu_printf, 3, 4))) __attribute__ ((__nonnull__ (3)))
  int __attribute__((__cdecl__)) __mingw_snprintf(char * __restrict__ s, size_t n, const char * __restrict__ format, ...);
extern
  __attribute__((__format__ (gnu_printf, 1, 2))) __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_printf(const char * __restrict__ , ... ) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 1, 0))) __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_vprintf (const char * __restrict__ , va_list) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 2, 3))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_fprintf (FILE * __restrict__ , const char * __restrict__ , ...) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 2, 0))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vfprintf (FILE * __restrict__ , const char * __restrict__ , va_list) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 2, 3))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_sprintf (char * __restrict__ , const char * __restrict__ , ...) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 2, 0))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vsprintf (char * __restrict__ , const char * __restrict__ , va_list) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 2, 3))) __attribute__((nonnull (1,2)))
  int __attribute__((__cdecl__)) __mingw_asprintf(char ** __restrict__ , const char * __restrict__ , ...) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 2, 0))) __attribute__((nonnull (1,2)))
  int __attribute__((__cdecl__)) __mingw_vasprintf(char ** __restrict__ , const char * __restrict__ , va_list) __attribute__ ((__nothrow__));

extern
  __attribute__((__format__ (ms_scanf, 2, 3))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __ms_sscanf(const char * __restrict__ _Src,const char * __restrict__ _Format,...);
extern
  __attribute__((__format__ (ms_scanf, 1, 2))) __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __ms_scanf(const char * __restrict__ _Format,...);
extern
  __attribute__((__format__ (ms_scanf, 2, 3))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __ms_fscanf(FILE * __restrict__ _File,const char * __restrict__ _Format,...);

extern
  __attribute__((__format__ (ms_printf, 1, 2))) __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __ms_printf(const char * __restrict__ , ... ) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (ms_printf, 1, 0))) __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __ms_vprintf (const char * __restrict__ , va_list) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (ms_printf, 2, 3))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __ms_fprintf (FILE * __restrict__ , const char * __restrict__ , ...) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (ms_printf, 2, 0))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __ms_vfprintf (FILE * __restrict__ , const char * __restrict__ , va_list) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (ms_printf, 2, 3))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __ms_sprintf (char * __restrict__ , const char * __restrict__ , ...) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (ms_printf, 2, 0))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __ms_vsprintf (char * __restrict__ , const char * __restrict__ , va_list) __attribute__ ((__nothrow__));
# 285 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdio.h" 3
extern "C++" {


inline __attribute__((__cdecl__))
__attribute__((__format__ (gnu_scanf, 2, 3))) __attribute__ ((__nonnull__ (2)))
int sscanf(const char *__source, const char *__format, ...)
{
  int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vsscanf( __source, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

inline __attribute__((__cdecl__))
__attribute__((__format__ (gnu_scanf, 1, 2))) __attribute__ ((__nonnull__ (1)))
int scanf(const char *__format, ...)
{
  int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vfscanf( (__acrt_iob_func(0)), __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

inline __attribute__((__cdecl__))
__attribute__((__format__ (gnu_scanf, 2, 3))) __attribute__ ((__nonnull__ (2)))
int fscanf(FILE *__stream, const char *__format, ...)
{
  int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vfscanf( __stream, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wshadow"


inline __attribute__((__cdecl__))
__attribute__((__format__ (gnu_scanf, 2, 0))) __attribute__ ((__nonnull__ (2)))
int vsscanf (const char *__source, const char *__format, __builtin_va_list __local_argv)
{
  return __mingw_vsscanf( __source, __format, __local_argv );
}

inline __attribute__((__cdecl__))
__attribute__((__format__ (gnu_scanf, 1, 0))) __attribute__ ((__nonnull__ (1)))
int vscanf(const char *__format, __builtin_va_list __local_argv)
{
  return __mingw_vfscanf( (__acrt_iob_func(0)), __format, __local_argv );
}

inline __attribute__((__cdecl__))
__attribute__((__format__ (gnu_scanf, 2, 0))) __attribute__ ((__nonnull__ (2)))
int vfscanf (FILE *__stream, const char *__format, __builtin_va_list __local_argv)
{
  return __mingw_vfscanf( __stream, __format, __local_argv );
}


#pragma GCC diagnostic pop





inline __attribute__((__cdecl__))
__attribute__((__format__ (gnu_printf, 2, 3))) __attribute__ ((__nonnull__ (2)))
int fprintf (FILE *__stream, const char *__format, ...)
{
  int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vfprintf( __stream, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

inline __attribute__((__cdecl__))
__attribute__((__format__ (gnu_printf, 1, 2))) __attribute__ ((__nonnull__ (1)))
int printf (const char *__format, ...)
{
  int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vfprintf( (__acrt_iob_func(1)), __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}
# 394 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdio.h" 3
inline __attribute__((__cdecl__))
__attribute__((__format__ (gnu_printf, 2, 3))) __attribute__ ((__nonnull__ (2)))
int sprintf (char *__stream, const char *__format, ...)
{
  int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vsprintf( __stream, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}



inline __attribute__((__cdecl__))
__attribute__((__format__ (gnu_printf, 2, 0))) __attribute__ ((__nonnull__ (2)))
int vfprintf (FILE *__stream, const char *__format, __builtin_va_list __local_argv)
{
  return __mingw_vfprintf( __stream, __format, __local_argv );
}

inline __attribute__((__cdecl__))
__attribute__((__format__ (gnu_printf, 1, 0))) __attribute__ ((__nonnull__ (1)))
int vprintf (const char *__format, __builtin_va_list __local_argv)
{
  return __mingw_vfprintf( (__acrt_iob_func(1)), __format, __local_argv );
}

inline __attribute__((__cdecl__))
__attribute__((__format__ (gnu_printf, 2, 0))) __attribute__ ((__nonnull__ (2)))
int vsprintf (char *__stream, const char *__format, __builtin_va_list __local_argv)
{
# 433 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdio.h" 3
  return __mingw_vsprintf( __stream, __format, __local_argv );
}
# 449 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdio.h" 3
inline __attribute__((__cdecl__))
__attribute__((__format__ (gnu_printf, 3, 4))) __attribute__ ((__nonnull__ (3)))
int snprintf (char *__stream, size_t __n, const char *__format, ...)
{
  int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vsnprintf( __stream, __n, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}



inline __attribute__((__cdecl__))
__attribute__((__format__ (gnu_printf, 3, 0))) __attribute__ ((__nonnull__ (3)))
int vsnprintf (char *__stream, size_t __n, const char *__format, __builtin_va_list __local_argv)
{



  return __mingw_vsnprintf( __stream, __n, __format, __local_argv );
}
# 479 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdio.h" 3
}
# 603 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdio.h" 3
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _filbuf(FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _flsbuf(int _Ch,FILE *_File);



  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _fsopen(const char *_Filename,const char *_Mode,int _ShFlag);

  void __attribute__((__cdecl__)) clearerr(FILE *_File);
  int __attribute__((__cdecl__)) fclose(FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fcloseall(void);



  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _fdopen(int _FileHandle,const char *_Mode);

  int __attribute__((__cdecl__)) feof(FILE *_File);
  int __attribute__((__cdecl__)) ferror(FILE *_File);
  int __attribute__((__cdecl__)) fflush(FILE *_File);
  int __attribute__((__cdecl__)) fgetc(FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fgetchar(void);
  int __attribute__((__cdecl__)) fgetpos(FILE * __restrict__ _File ,fpos_t * __restrict__ _Pos);
  int __attribute__((__cdecl__)) fgetpos64(FILE * __restrict__ _File ,fpos_t * __restrict__ _Pos);
  char *__attribute__((__cdecl__)) fgets(char * __restrict__ _Buf,int _MaxCount,FILE * __restrict__ _File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fileno(FILE *_File);



  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _tempnam(const char *_DirName,const char *_FilePrefix);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _flushall(void);
  FILE *__attribute__((__cdecl__)) fopen(const char * __restrict__ _Filename,const char * __restrict__ _Mode) ;
  FILE *fopen64(const char * __restrict__ filename,const char * __restrict__ mode);
  int __attribute__((__cdecl__)) fputc(int _Ch,FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fputchar(int _Ch);
  int __attribute__((__cdecl__)) fputs(const char * __restrict__ _Str,FILE * __restrict__ _File);
  size_t __attribute__((__cdecl__)) fread(void * __restrict__ _DstBuf,size_t _ElementSize,size_t _Count,FILE * __restrict__ _File);
  FILE *__attribute__((__cdecl__)) freopen(const char * __restrict__ _Filename,const char * __restrict__ _Mode,FILE * __restrict__ _File) ;
  int __attribute__((__cdecl__)) fsetpos(FILE *_File,const fpos_t *_Pos);
  int __attribute__((__cdecl__)) fsetpos64(FILE *_File,const fpos_t *_Pos);
  int __attribute__((__cdecl__)) fseek(FILE *_File,long _Offset,int _Origin);
  long __attribute__((__cdecl__)) ftell(FILE *_File);



  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fseeki64(FILE *_File,long long _Offset,int _Origin);
  __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _ftelli64(FILE *_File);
# 662 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdio.h" 3
  int fseeko64(FILE* stream, _off64_t offset, int whence);
  int fseeko(FILE* stream, _off_t offset, int whence);

  _off_t ftello(FILE * stream);
  _off64_t ftello64(FILE * stream);
# 683 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdio.h" 3
  size_t __attribute__((__cdecl__)) fwrite(const void * __restrict__ _Str,size_t _Size,size_t _Count,FILE * __restrict__ _File);
  int __attribute__((__cdecl__)) getc(FILE *_File);
  int __attribute__((__cdecl__)) getchar(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _getmaxstdio(void);
  char *__attribute__((__cdecl__)) gets(char *_Buffer) ;
  int __attribute__((__cdecl__)) _getw(FILE *_File);





  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _pclose(FILE *_File);
  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _popen(const char *_Command,const char *_Mode);





  int __attribute__((__cdecl__)) putc(int _Ch,FILE *_File);
  int __attribute__((__cdecl__)) putchar(int _Ch);
  int __attribute__((__cdecl__)) puts(const char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _putw(int _Word,FILE *_File);


  int __attribute__((__cdecl__)) remove(const char *_Filename);
  int __attribute__((__cdecl__)) rename(const char *_OldFilename,const char *_NewFilename);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _unlink(const char *_Filename);

  int __attribute__((__cdecl__)) unlink(const char *_Filename) ;


  void __attribute__((__cdecl__)) rewind(FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _rmtmp(void);
  void __attribute__((__cdecl__)) setbuf(FILE * __restrict__ _File,char * __restrict__ _Buffer) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _setmaxstdio(int _Max);
  __attribute__ ((__dllimport__)) unsigned int __attribute__((__cdecl__)) _set_output_format(unsigned int _Format);
  __attribute__ ((__dllimport__)) unsigned int __attribute__((__cdecl__)) _get_output_format(void);
  int __attribute__((__cdecl__)) setvbuf(FILE * __restrict__ _File,char * __restrict__ _Buf,int _Mode,size_t _Size);
# 746 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdio.h" 3
  __attribute__ ((__pure__))
  __attribute__((__format__ (ms_printf, 1, 2))) __attribute__ ((__nonnull__ (1)))
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scprintf(const char * __restrict__ _Format,...);
  __attribute__((__format__ (ms_scanf, 3, 4))) __attribute__ ((__nonnull__ (3)))
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snscanf(const char * __restrict__ _Src,size_t _MaxCount,const char * __restrict__ _Format,...) ;

  __attribute__ ((__pure__))
  __attribute__((__format__ (ms_printf, 1, 0))) __attribute__ ((__nonnull__ (1)))
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vscprintf(const char * __restrict__ _Format,va_list _ArgList);
  FILE *__attribute__((__cdecl__)) tmpfile(void) ;
  char *__attribute__((__cdecl__)) tmpnam(char *_Buffer);
  int __attribute__((__cdecl__)) ungetc(int _Ch,FILE *_File);
# 774 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdio.h" 3
  __attribute__((__format__ (ms_printf, 3, 4))) __attribute__ ((__nonnull__ (3)))
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snprintf(char * __restrict__ _Dest,size_t _Count,const char * __restrict__ _Format,...) ;
  __attribute__((__format__ (ms_printf, 3, 0))) __attribute__ ((__nonnull__ (3)))
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnprintf(char * __restrict__ _Dest,size_t _Count,const char * __restrict__ _Format,va_list _Args) ;
# 940 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdio.h" 3
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _set_printf_count_output(int _Value);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _get_printf_count_output(void);




                                                     __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_swscanf(const wchar_t * __restrict__ _Src,const wchar_t * __restrict__ _Format,...);
                                                     __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vswscanf (const wchar_t * __restrict__ _Str,const wchar_t * __restrict__ Format,va_list argp);
                                                     __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_wscanf(const wchar_t * __restrict__ _Format,...);
                                                     __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_vwscanf(const wchar_t * __restrict__ Format, va_list argp);
                                                     __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_fwscanf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,...);
                                                     __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vfwscanf (FILE * __restrict__ fp, const wchar_t * __restrict__ Format,va_list argp);

                                                      __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_fwprintf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,...);
                                                      __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_wprintf(const wchar_t * __restrict__ _Format,...);
                                                     __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vfwprintf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,va_list _ArgList);
                                                     __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_vwprintf(const wchar_t * __restrict__ _Format,va_list _ArgList);
                                                      __attribute__ ((__nonnull__ (3)))
  int __attribute__((__cdecl__)) __mingw_snwprintf (wchar_t * __restrict__ s, size_t n, const wchar_t * __restrict__ format, ...);
                                                      __attribute__ ((__nonnull__ (3)))
  int __attribute__((__cdecl__)) __mingw_vsnwprintf (wchar_t * __restrict__ , size_t, const wchar_t * __restrict__ , va_list);
                                                      __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_swprintf(wchar_t * __restrict__ , const wchar_t * __restrict__ , ...);
                                                      __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vswprintf(wchar_t * __restrict__ , const wchar_t * __restrict__ ,va_list);

                                                    __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __ms_swscanf(const wchar_t * __restrict__ _Src,const wchar_t * __restrict__ _Format,...);
                                                    __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __ms_wscanf(const wchar_t * __restrict__ _Format,...);
                                                    __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __ms_fwscanf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,...);

                                                     __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __ms_fwprintf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,...);
                                                     __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __ms_wprintf(const wchar_t * __restrict__ _Format,...);
                                                    __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __ms_vfwprintf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,va_list _ArgList);
                                                    __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __ms_vwprintf(const wchar_t * __restrict__ _Format,va_list _ArgList);
                                                     __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __ms_swprintf(wchar_t * __restrict__ , const wchar_t * __restrict__ , ...);
                                                     __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __ms_vswprintf(wchar_t * __restrict__ , const wchar_t * __restrict__ ,va_list);
# 1008 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdio.h" 3
inline __attribute__((__cdecl__))
                                                     __attribute__ ((__nonnull__ (2)))
int swscanf(const wchar_t *__source, const wchar_t *__format, ...)
{
  int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vswscanf( __source, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

inline __attribute__((__cdecl__))
                                                     __attribute__ ((__nonnull__ (1)))
int wscanf(const wchar_t *__format, ...)
{
  int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vfwscanf( (__acrt_iob_func(0)), __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

inline __attribute__((__cdecl__))
                                                     __attribute__ ((__nonnull__ (2)))
int fwscanf(FILE *__stream, const wchar_t *__format, ...)
{
  int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vfwscanf( __stream, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}


inline __attribute__((__cdecl__))
                                                     __attribute__ ((__nonnull__ (2)))
int vswscanf (const wchar_t * __restrict__ __source, const wchar_t * __restrict__ __format, __builtin_va_list __local_argv)
{
  return __mingw_vswscanf( __source, __format, __local_argv );
}

inline __attribute__((__cdecl__))
                                                     __attribute__ ((__nonnull__ (1)))
int vwscanf(const wchar_t *__format, __builtin_va_list __local_argv)
{
  return __mingw_vfwscanf( (__acrt_iob_func(0)), __format, __local_argv );
}

inline __attribute__((__cdecl__))
                                                     __attribute__ ((__nonnull__ (2)))
int vfwscanf (FILE *__stream, const wchar_t *__format, __builtin_va_list __local_argv)
{
  return __mingw_vfwscanf( __stream, __format, __local_argv );
}




inline __attribute__((__cdecl__))
                                                      __attribute__ ((__nonnull__ (2)))
int fwprintf (FILE *__stream, const wchar_t *__format, ...)
{
  int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vfwprintf( __stream, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

inline __attribute__((__cdecl__))
                                                      __attribute__ ((__nonnull__ (1)))
int wprintf (const wchar_t *__format, ...)
{
  int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vfwprintf( (__acrt_iob_func(1)), __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

inline __attribute__((__cdecl__))
                                                      __attribute__ ((__nonnull__ (2)))
int vfwprintf (FILE *__stream, const wchar_t *__format, __builtin_va_list __local_argv)
{
  return __mingw_vfwprintf( __stream, __format, __local_argv );
}

inline __attribute__((__cdecl__))
                                                      __attribute__ ((__nonnull__ (1)))
int vwprintf (const wchar_t *__format, __builtin_va_list __local_argv)
{
  return __mingw_vfwprintf( (__acrt_iob_func(1)), __format, __local_argv );
}
# 1116 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdio.h" 3
inline __attribute__((__cdecl__))
                                                      __attribute__ ((__nonnull__ (3)))
int snwprintf (wchar_t *__stream, size_t __n, const wchar_t *__format, ...)
{
  int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vsnwprintf( __stream, __n, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}



inline __attribute__((__cdecl__))
                                                      __attribute__ ((__nonnull__ (3)))
int vsnwprintf (wchar_t *__stream, size_t __n, const wchar_t *__format, __builtin_va_list __local_argv)
{



  return __mingw_vsnwprintf( __stream, __n, __format, __local_argv );
}
# 1269 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdio.h" 3
  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _wfsopen(const wchar_t *_Filename,const wchar_t *_Mode,int _ShFlag);


  wint_t __attribute__((__cdecl__)) fgetwc(FILE *_File);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _fgetwchar(void);
  wint_t __attribute__((__cdecl__)) fputwc(wchar_t _Ch,FILE *_File);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _fputwchar(wchar_t _Ch);
  wint_t __attribute__((__cdecl__)) getwc(FILE *_File);
  wint_t __attribute__((__cdecl__)) getwchar(void);
  wint_t __attribute__((__cdecl__)) putwc(wchar_t _Ch,FILE *_File);
  wint_t __attribute__((__cdecl__)) putwchar(wchar_t _Ch);
  wint_t __attribute__((__cdecl__)) ungetwc(wint_t _Ch,FILE *_File);
  wchar_t *__attribute__((__cdecl__)) fgetws(wchar_t * __restrict__ _Dst,int _SizeInWords,FILE * __restrict__ _File);
  int __attribute__((__cdecl__)) fputws(const wchar_t * __restrict__ _Str,FILE * __restrict__ _File);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _getws(wchar_t *_String) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _putws(const wchar_t *_Str);
# 1351 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdio.h" 3
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scwprintf(const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swprintf_c(wchar_t * __restrict__ _DstBuf,size_t _SizeInWords,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vswprintf_c(wchar_t * __restrict__ _DstBuf,size_t _SizeInWords,const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snwprintf(wchar_t * __restrict__ _Dest,size_t _Count,const wchar_t * __restrict__ _Format,...) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnwprintf(wchar_t * __restrict__ _Dest,size_t _Count,const wchar_t * __restrict__ _Format,va_list _Args) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vscwprintf(const wchar_t * __restrict__ _Format,va_list _ArgList);
# 1381 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdio.h" 3
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swprintf(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vswprintf(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Format,va_list _Args);



# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/swprintf.inl" 1 3
# 10 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/swprintf.inl" 3
# 1 "C:/Xilinx/Vitis/2024.2/vcxx/lib/clang/14.0.6/include/vadefs.h" 1 3
# 11 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/swprintf.inl" 2 3
# 25 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/swprintf.inl" 3
static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
                                                      __attribute__ ((__nonnull__ (3)))
int vswprintf (wchar_t *__stream, size_t __count, const wchar_t *__format, __builtin_va_list __local_argv)
{
  return vsnwprintf( __stream, __count, __format, __local_argv );
}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
                                                      __attribute__ ((__nonnull__ (3)))
int swprintf (wchar_t *__stream, size_t __count, const wchar_t *__format, ...)
{
  int __retval;
  __builtin_va_list __local_argv;

  __builtin_va_start( __local_argv, __format );
  __retval = vswprintf( __stream, __count, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}



extern "C++" {

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
                                                      __attribute__ ((__nonnull__ (2)))
int vswprintf (wchar_t *__stream, const wchar_t *__format, __builtin_va_list __local_argv)
{

  return __mingw_vswprintf( __stream, __format, __local_argv );



}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
                                                      __attribute__ ((__nonnull__ (2)))
int swprintf (wchar_t *__stream, const wchar_t *__format, ...)
{
  int __retval;
  __builtin_va_list __local_argv;

  __builtin_va_start( __local_argv, __format );
  __retval = vswprintf( __stream, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

}
# 1387 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdio.h" 2 3
# 1396 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdio.h" 3
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wtempnam(const wchar_t *_Directory,const wchar_t *_FilePrefix);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snwscanf(const wchar_t * __restrict__ _Src,size_t _MaxCount,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _wfdopen(int _FileHandle ,const wchar_t *_Mode);
  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _wfopen(const wchar_t * __restrict__ _Filename,const wchar_t *__restrict__ _Mode) ;
  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _wfreopen(const wchar_t * __restrict__ _Filename,const wchar_t * __restrict__ _Mode,FILE * __restrict__ _OldFile) ;





  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _wpopen(const wchar_t *_Command,const wchar_t *_Mode);




  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wremove(const wchar_t *_Filename);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wtmpnam(wchar_t *_Buffer);
# 1456 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdio.h" 3
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _lock_file(FILE *_File);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _unlock_file(FILE *_File);
# 1474 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdio.h" 3
  char *__attribute__((__cdecl__)) tempnam(const char *_Directory,const char *_FilePrefix) ;
  int __attribute__((__cdecl__)) fcloseall(void) ;
  FILE *__attribute__((__cdecl__)) fdopen(int _FileHandle,const char *_Format) ;
  int __attribute__((__cdecl__)) fgetchar(void) ;
  int __attribute__((__cdecl__)) fileno(FILE *_File) ;
  int __attribute__((__cdecl__)) flushall(void) ;
  int __attribute__((__cdecl__)) fputchar(int _Ch) ;
  int __attribute__((__cdecl__)) getw(FILE *_File) ;
  int __attribute__((__cdecl__)) putw(int _Ch,FILE *_File) ;
  int __attribute__((__cdecl__)) rmtmp(void) ;
# 1500 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdio.h" 3
int __attribute__((__cdecl__)) __mingw_str_wide_utf8 (const wchar_t * const wptr, char **mbptr, size_t * buflen);
# 1514 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdio.h" 3
int __attribute__((__cdecl__)) __mingw_str_utf8_wide (const char *const mbptr, wchar_t ** wptr, size_t * buflen);
# 1523 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdio.h" 3
void __attribute__((__cdecl__)) __mingw_str_free(void *ptr);






  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnl(int _Mode,const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnle(int _Mode,const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnlp(int _Mode,const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnlpe(int _Mode,const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnv(int _Mode,const wchar_t *_Filename,const wchar_t *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnve(int _Mode,const wchar_t *_Filename,const wchar_t *const *_ArgList,const wchar_t *const *_Env);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnvp(int _Mode,const wchar_t *_Filename,const wchar_t *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnvpe(int _Mode,const wchar_t *_Filename,const wchar_t *const *_ArgList,const wchar_t *const *_Env);
# 1554 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdio.h" 3
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _spawnv(int _Mode,const char *_Filename,const char *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _spawnve(int _Mode,const char *_Filename,const char *const *_ArgList,const char *const *_Env);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _spawnvp(int _Mode,const char *_Filename,const char *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _spawnvpe(int _Mode,const char *_Filename,const char *const *_ArgList,const char *const *_Env);




}







#pragma pack(pop)

# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/sec_api/stdio_s.h" 1 3








# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdio.h" 1 3
# 10 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/sec_api/stdio_s.h" 2 3
# 21 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/sec_api/stdio_s.h" 3
extern "C" {







  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) clearerr_s(FILE *_File);

  size_t __attribute__((__cdecl__)) fread_s(void *_DstBuf,size_t _DstSize,size_t _ElementSize,size_t _Count,FILE *_File);
# 494 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/sec_api/stdio_s.h" 3
  int __attribute__((__cdecl__)) fprintf_s(FILE *_File,const char *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fscanf_s_l(FILE *_File,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) fscanf_s(FILE *_File, const char *_Format, ...);
  int __attribute__((__cdecl__)) printf_s(const char *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scanf_l(const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scanf_s_l(const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) scanf_s(const char *_Format, ...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snprintf_c(char *_DstBuf,size_t _MaxCount,const char *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnprintf_c(char *_DstBuf,size_t _MaxCount,const char *_Format,va_list _ArgList);

  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fscanf_l(FILE *_File,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _sscanf_l(const char *_Src,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _sscanf_s_l(const char *_Src,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) sscanf_s(const char *_Src,const char *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snscanf_s(const char *_Src,size_t _MaxCount,const char *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snscanf_l(const char *_Src,size_t _MaxCount,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snscanf_s_l(const char *_Src,size_t _MaxCount,const char *_Format,_locale_t _Locale,...);
  int __attribute__((__cdecl__)) vfprintf_s(FILE *_File,const char *_Format,va_list _ArgList);
  int __attribute__((__cdecl__)) vprintf_s(const char *_Format,va_list _ArgList);

  int __attribute__((__cdecl__)) vsnprintf_s(char *_DstBuf,size_t _DstSize,size_t _MaxCount,const char *_Format,va_list _ArgList);

  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnprintf_s(char *_DstBuf,size_t _DstSize,size_t _MaxCount,const char *_Format,va_list _ArgList);

  __attribute__((dllimport)) int __attribute__((__cdecl__)) vsprintf_s(char *_DstBuf,size_t _Size,const char *_Format,va_list _ArgList);

  __attribute__((dllimport)) int __attribute__((__cdecl__)) sprintf_s(char *_DstBuf,size_t _DstSize,const char *_Format,...);

  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snprintf_s(char *_DstBuf,size_t _DstSize,size_t _MaxCount,const char *_Format,...);

  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fprintf_p(FILE *_File,const char *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _printf_p(const char *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _sprintf_p(char *_Dst,size_t _MaxCount,const char *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vfprintf_p(FILE *_File,const char *_Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vprintf_p(const char *_Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsprintf_p(char *_Dst,size_t _MaxCount,const char *_Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scprintf_p(const char *_Format,...);
  __attribute__((dllimport)) int __attribute__((__cdecl__)) _vscprintf_p(const char *_Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _printf_l(const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _printf_p_l(const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vprintf_l(const char *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vprintf_p_l(const char *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fprintf_l(FILE *_File,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fprintf_p_l(FILE *_File,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vfprintf_l(FILE *_File,const char *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vfprintf_p_l(FILE *_File,const char *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _sprintf_l(char *_DstBuf,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _sprintf_p_l(char *_DstBuf,size_t _MaxCount,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsprintf_l(char *_DstBuf,const char *_Format,_locale_t,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsprintf_p_l(char *_DstBuf,size_t _MaxCount,const char *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scprintf_l(const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scprintf_p_l(const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vscprintf_l(const char *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vscprintf_p_l(const char *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _printf_s_l(const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vprintf_s_l(const char *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fprintf_s_l(FILE *_File,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vfprintf_s_l(FILE *_File,const char *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _sprintf_s_l(char *_DstBuf,size_t _DstSize,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsprintf_s_l(char *_DstBuf,size_t _DstSize,const char *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snprintf_s_l(char *_DstBuf,size_t _DstSize,size_t _MaxCount,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnprintf_s_l(char *_DstBuf,size_t _DstSize,size_t _MaxCount,const char *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snprintf_l(char *_DstBuf,size_t _MaxCount,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snprintf_c_l(char *_DstBuf,size_t _MaxCount,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnprintf_l(char *_DstBuf,size_t _MaxCount,const char *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnprintf_c_l(char *_DstBuf,size_t _MaxCount,const char *,_locale_t _Locale,va_list _ArgList);


  extern "C++" { template <size_t __size> inline int __attribute__((__cdecl__)) vsnprintf_s(char (&_DstBuf)[__size], size_t _MaxCount, const char* _Format, va_list _ArgList) { return vsnprintf_s(_DstBuf,__size,_MaxCount,_Format,_ArgList); } }
  extern "C++" { template <size_t __size> inline int __attribute__((__cdecl__)) _vsnprintf_s(char (&_DstBuf)[__size], size_t _MaxCount, const char* _Format, va_list _ArgList) { return _vsnprintf_s(_DstBuf,__size,_MaxCount,_Format,_ArgList); } }
  extern "C++" { template <size_t __size> inline int __attribute__((__cdecl__)) vsprintf_s(char (&_DstBuf)[__size], const char* _Format, va_list _ArgList) { return vsprintf_s(_DstBuf,__size,_Format,_ArgList); } }
  extern "C++" { template <size_t __size> inline int __attribute__((__cdecl__)) sprintf_s(char (&_DstBuf)[__size], const char* _Format, ...) { va_list __vaargs; __builtin_va_start(__vaargs,_Format); int __retval = vsprintf_s(_DstBuf,__size,_Format,__vaargs); __builtin_va_end(__vaargs); return __retval; } }
  extern "C++" { template <size_t __size> inline int __attribute__((__cdecl__)) _snprintf_s(char (&_DstBuf)[__size], size_t _MaxCount, const char* _Format, ...) { va_list __vaargs; __builtin_va_start(__vaargs,_Format); int __retval = _vsnprintf_s(_DstBuf,__size,_MaxCount,_Format,__vaargs); __builtin_va_end(__vaargs); return __retval; } }

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) fopen_s(FILE **_File,const char *_Filename,const char *_Mode);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) freopen_s(FILE** _File, const char *_Filename, const char *_Mode, FILE *_Stream);

  __attribute__ ((__dllimport__)) char* __attribute__((__cdecl__)) gets_s(char*,rsize_t);
  extern "C++" { template <size_t __size> inline char* __attribute__((__cdecl__)) get_s(char (&_DstBuf)[__size]) { return get_s(_DstBuf,__size); } }

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) tmpnam_s(char*,rsize_t);
  extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) tmpnam_s(char (&_DstBuf)[__size]) { return tmpnam_s(_DstBuf,__size); } }




  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _getws_s(wchar_t *_Str,size_t _SizeInWords);
  extern "C++" { template <size_t __size> inline wchar_t* __attribute__((__cdecl__)) _getws_s(wchar_t (&_DstBuf)[__size]) { return _getws_s(_DstBuf,__size); } }
# 786 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/sec_api/stdio_s.h" 3
  int __attribute__((__cdecl__)) fwprintf_s(FILE *_File,const wchar_t *_Format,...);
  int __attribute__((__cdecl__)) wprintf_s(const wchar_t *_Format,...);
  int __attribute__((__cdecl__)) vfwprintf_s(FILE *_File,const wchar_t *_Format,va_list _ArgList);
  int __attribute__((__cdecl__)) vwprintf_s(const wchar_t *_Format,va_list _ArgList);

  int __attribute__((__cdecl__)) vswprintf_s(wchar_t *_Dst,size_t _SizeInWords,const wchar_t *_Format,va_list _ArgList);

  int __attribute__((__cdecl__)) swprintf_s(wchar_t *_Dst,size_t _SizeInWords,const wchar_t *_Format,...);

  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnwprintf_s(wchar_t *_DstBuf,size_t _DstSizeInWords,size_t _MaxCount,const wchar_t *_Format,va_list _ArgList);

  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snwprintf_s(wchar_t *_DstBuf,size_t _DstSizeInWords,size_t _MaxCount,const wchar_t *_Format,...);


  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wprintf_s_l(const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vwprintf_s_l(const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fwprintf_s_l(FILE *_File,const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vfwprintf_s_l(FILE *_File,const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swprintf_s_l(wchar_t *_DstBuf,size_t _DstSize,const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vswprintf_s_l(wchar_t *_DstBuf,size_t _DstSize,const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snwprintf_s_l(wchar_t *_DstBuf,size_t _DstSize,size_t _MaxCount,const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnwprintf_s_l(wchar_t *_DstBuf,size_t _DstSize,size_t _MaxCount,const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fwscanf_s_l(FILE *_File,const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) fwscanf_s(FILE *_File, const wchar_t *_Format, ...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swscanf_s_l(const wchar_t *_Src,const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) swscanf_s(const wchar_t *_Src,const wchar_t *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snwscanf_s(const wchar_t *_Src,size_t _MaxCount,const wchar_t *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snwscanf_s_l(const wchar_t *_Src,size_t _MaxCount,const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wscanf_s_l(const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) wscanf_s(const wchar_t *_Format, ...);


  extern "C++" { template <size_t __size> inline int __attribute__((__cdecl__)) vswprintf_s(wchar_t (&_Dst)[__size], const wchar_t* _Format, va_list _ArgList) { return vswprintf_s(_Dst,__size,_Format,_ArgList); } }
  extern "C++" { template <size_t __size> inline int __attribute__((__cdecl__)) swprintf_s(wchar_t (&_Dst)[__size], const wchar_t* _Format, ...) { va_list __vaargs; __builtin_va_start(__vaargs,_Format); int __retval = vswprintf_s(_Dst,__size,_Format,__vaargs); __builtin_va_end(__vaargs); return __retval; } }
  extern "C++" { template <size_t __size> inline int __attribute__((__cdecl__)) _vsnwprintf_s(wchar_t (&_DstBuf)[__size], size_t _MaxCount, const wchar_t* _Format, va_list _ArgList) { return _vsnwprintf_s(_DstBuf,__size,_MaxCount,_Format,_ArgList); } }
  extern "C++" { template <size_t __size> inline int __attribute__((__cdecl__)) _snwprintf_s(wchar_t (&_DstBuf)[__size], size_t _MaxCount, const wchar_t* _Format, ...) { va_list __vaargs; __builtin_va_start(__vaargs,_Format); int __retval = _vsnwprintf_s(_DstBuf,__size,_MaxCount,_Format,__vaargs); __builtin_va_end(__vaargs); return __retval; } }

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wfopen_s(FILE **_File,const wchar_t *_Filename,const wchar_t *_Mode);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wfreopen_s(FILE **_File,const wchar_t *_Filename,const wchar_t *_Mode,FILE *_OldFile);

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wtmpnam_s(wchar_t *_DstBuf,size_t _SizeInWords);
  extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) _wtmpnam_s(wchar_t (&_DstBuf)[__size]) { return _wtmpnam_s(_DstBuf,__size); } }


  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fwprintf_p(FILE *_File,const wchar_t *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wprintf_p(const wchar_t *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vfwprintf_p(FILE *_File,const wchar_t *_Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vwprintf_p(const wchar_t *_Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swprintf_p(wchar_t *_DstBuf,size_t _MaxCount,const wchar_t *_Format,...);
  __attribute__((dllimport)) int __attribute__((__cdecl__)) _vswprintf_p(wchar_t *_DstBuf,size_t _MaxCount,const wchar_t *_Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scwprintf_p(const wchar_t *_Format,...);
  __attribute__((dllimport)) int __attribute__((__cdecl__)) _vscwprintf_p(const wchar_t *_Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wprintf_l(const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wprintf_p_l(const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vwprintf_l(const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vwprintf_p_l(const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fwprintf_l(FILE *_File,const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fwprintf_p_l(FILE *_File,const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vfwprintf_l(FILE *_File,const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vfwprintf_p_l(FILE *_File,const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swprintf_c_l(wchar_t *_DstBuf,size_t _MaxCount,const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swprintf_p_l(wchar_t *_DstBuf,size_t _MaxCount,const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vswprintf_c_l(wchar_t *_DstBuf,size_t _MaxCount,const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vswprintf_p_l(wchar_t *_DstBuf,size_t _MaxCount,const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scwprintf_l(const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scwprintf_p_l(const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vscwprintf_p_l(const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snwprintf_l(wchar_t *_DstBuf,size_t _MaxCount,const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnwprintf_l(wchar_t *_DstBuf,size_t _MaxCount,const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __swprintf_l(wchar_t *_Dest,const wchar_t *_Format,_locale_t _Plocinfo,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __vswprintf_l(wchar_t *_Dest,const wchar_t *_Format,_locale_t _Plocinfo,va_list _Args);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vscwprintf_l(const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fwscanf_l(FILE *_File,const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swscanf_l(const wchar_t *_Src,const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snwscanf_l(const wchar_t *_Src,size_t _MaxCount,const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wscanf_l(const wchar_t *_Format,_locale_t _Locale,...);
# 872 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/sec_api/stdio_s.h" 3
}
# 1573 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdio.h" 2 3
# 65 "C:/Xilinx/Vitis/2024.2/include/etc/ap_common.h" 2

# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/stdlib.h" 1 3
# 67 "C:/Xilinx/Vitis/2024.2/include/etc/ap_common.h" 2
# 152 "C:/Xilinx/Vitis/2024.2/include/etc/ap_common.h"
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/iostream" 1 3
# 37 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/iostream" 3


# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ostream" 1 3
# 37 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ostream" 3

# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ios" 1 3
# 37 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ios" 3

# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/iosfwd" 1 3
# 37 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/iosfwd" 3


# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stringfwd.h" 1 3
# 38 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stringfwd.h" 3


# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/memoryfwd.h" 1 3
# 47 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/memoryfwd.h" 3



namespace std
{
# 63 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/memoryfwd.h" 3
  template<typename>
    class allocator;

  template<>
    class allocator<void>;



  template<typename, typename>
    struct uses_allocator;





}
# 41 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stringfwd.h" 2 3

namespace std
{
# 52 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stringfwd.h" 3
  template<class _CharT>
    struct char_traits;

  template<> struct char_traits<char>;


  template<> struct char_traits<wchar_t>;







  template<> struct char_traits<char16_t>;
  template<> struct char_traits<char32_t>;


namespace __cxx11 {

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
           typename _Alloc = allocator<_CharT> >
    class basic_string;

}


  typedef basic_string<char> string;



  typedef basic_string<wchar_t> wstring;
# 93 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stringfwd.h" 3
  typedef basic_string<char16_t> u16string;


  typedef basic_string<char32_t> u32string;





}
# 40 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/iosfwd" 2 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/postypes.h" 1 3
# 39 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/postypes.h" 3

# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cwchar" 1 3
# 40 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cwchar" 3




# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/wchar.h" 1 3
# 26 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/wchar.h" 3
#pragma pack(push,_CRT_PACKING)


extern "C" {
# 56 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/wchar.h" 3
__attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) __acrt_iob_func(unsigned index);
# 82 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/wchar.h" 3
  typedef unsigned long _fsize_t;




  struct _wfinddata32_t {
    unsigned attrib;
    __time32_t time_create;
    __time32_t time_access;
    __time32_t time_write;
    _fsize_t size;
    wchar_t name[260];
  };

  struct _wfinddata32i64_t {
    unsigned attrib;
    __time32_t time_create;
    __time32_t time_access;
    __time32_t time_write;
    __extension__ long long size;
    wchar_t name[260];
  };

  struct _wfinddata64i32_t {
    unsigned attrib;
    __time64_t time_create;
    __time64_t time_access;
    __time64_t time_write;
    _fsize_t size;
    wchar_t name[260];
  };

  struct _wfinddata64_t {
    unsigned attrib;
    __time64_t time_create;
    __time64_t time_access;
    __time64_t time_write;
    __extension__ long long size;
    wchar_t name[260];
  };
# 187 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/wchar.h" 3
  extern unsigned short ** __imp__pctype;
# 202 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/wchar.h" 3
  extern unsigned short ** __imp__wctype;
# 217 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/wchar.h" 3
  extern unsigned short ** __imp__pwctype;
# 241 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/wchar.h" 3
  int __attribute__((__cdecl__)) iswalpha(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswalpha_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswupper(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswupper_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswlower(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswlower_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswdigit(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswdigit_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswxdigit(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswxdigit_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswspace(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswspace_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswpunct(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswpunct_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswalnum(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswalnum_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswprint(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswprint_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswgraph(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswgraph_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswcntrl(wint_t _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iswcntrl_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswascii(wint_t _C);

  int __attribute__((__cdecl__)) isleadbyte(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isleadbyte_l(int _C,_locale_t _Locale);

  wint_t __attribute__((__cdecl__)) towupper(wint_t _C);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _towupper_l(wint_t _C,_locale_t _Locale);
  wint_t __attribute__((__cdecl__)) towlower(wint_t _C);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _towlower_l(wint_t _C,_locale_t _Locale);
  int __attribute__((__cdecl__)) iswctype(wint_t _C,wctype_t _Type);
# 281 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/wchar.h" 3
  int __attribute__((__cdecl__)) is_wctype(wint_t _C,wctype_t _Type);



  int __attribute__((__cdecl__)) iswblank(wint_t _C);







  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wgetcwd(wchar_t *_DstBuf,int _SizeInWords);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wgetdcwd(int _Drive,wchar_t *_DstBuf,int _SizeInWords);



  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wchdir(const wchar_t *_Path);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wmkdir(const wchar_t *_Path);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wrmdir(const wchar_t *_Path);





  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _waccess(const wchar_t *_Filename,int _AccessMode);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wchmod(const wchar_t *_Filename,int _Mode);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcreat(const wchar_t *_Filename,int _PermissionMode) ;
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wfindfirst32(const wchar_t *_Filename,struct _wfinddata32_t *_FindData);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wfindnext32(intptr_t _FindHandle,struct _wfinddata32_t *_FindData);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wunlink(const wchar_t *_Filename);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wrename(const wchar_t *_OldFilename,const wchar_t *_NewFilename);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wmktemp(wchar_t *_TemplateName) ;
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wfindfirst32i64(const wchar_t *_Filename,struct _wfinddata32i64_t *_FindData);
  intptr_t __attribute__((__cdecl__)) _wfindfirst64i32(const wchar_t *_Filename,struct _wfinddata64i32_t *_FindData);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wfindfirst64(const wchar_t *_Filename,struct _wfinddata64_t *_FindData);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wfindnext32i64(intptr_t _FindHandle,struct _wfinddata32i64_t *_FindData);
  int __attribute__((__cdecl__)) _wfindnext64i32(intptr_t _FindHandle,struct _wfinddata64i32_t *_FindData);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wfindnext64(intptr_t _FindHandle,struct _wfinddata64_t *_FindData);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wsopen_s(int *_FileHandle,const wchar_t *_Filename,int _OpenFlag,int _ShareFlag,int _PermissionFlag);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wopen(const wchar_t *_Filename,int _OpenFlag,...) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wsopen(const wchar_t *_Filename,int _OpenFlag,int _ShareFlag,...) ;




  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wsetlocale(int _Category,const wchar_t *_Locale);





  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wexecl(const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wexecle(const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wexeclp(const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wexeclpe(const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wexecv(const wchar_t *_Filename,const wchar_t *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wexecve(const wchar_t *_Filename,const wchar_t *const *_ArgList,const wchar_t *const *_Env);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wexecvp(const wchar_t *_Filename,const wchar_t *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wexecvpe(const wchar_t *_Filename,const wchar_t *const *_ArgList,const wchar_t *const *_Env);
# 398 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/wchar.h" 3
  typedef unsigned short _ino_t;

  typedef unsigned short ino_t;





  typedef unsigned int _dev_t;

  typedef unsigned int dev_t;




# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/_mingw_stat64.h" 1 3
# 25 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/_mingw_stat64.h" 3
  struct _stat32 {
    _dev_t st_dev;
   _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    _off_t st_size;
    __time32_t st_atime;
    __time32_t st_mtime;
    __time32_t st_ctime;
  };


  struct stat {
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    _off_t st_size;
    time_t st_atime;
    time_t st_mtime;
    time_t st_ctime;
  };


  struct _stat32i64 {
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    __extension__ long long st_size;
    __time32_t st_atime;
    __time32_t st_mtime;
    __time32_t st_ctime;
  };

  struct _stat64i32 {
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    _off_t st_size;
    __time64_t st_atime;
    __time64_t st_mtime;
    __time64_t st_ctime;
  };

  struct _stat64 {
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    __extension__ long long st_size;
    __time64_t st_atime;
    __time64_t st_mtime;
    __time64_t st_ctime;
  };
# 414 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/wchar.h" 2 3




  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wstat32(const wchar_t *_Name,struct _stat32 *_Stat);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wstat32i64(const wchar_t *_Name,struct _stat32i64 *_Stat);
  int __attribute__((__cdecl__)) _wstat64i32(const wchar_t *_Name,struct _stat64i32 *_Stat);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wstat64(const wchar_t *_Name,struct _stat64 *_Stat);
# 432 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/wchar.h" 3
  __attribute__ ((__dllimport__)) wchar_t *_cgetws(wchar_t *_Buffer) ;
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _getwch(void);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _getwche(void);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _putwch(wchar_t _WCh);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _ungetwch(wint_t _WCh);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _cputws(const wchar_t *_String);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _cwprintf(const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _cwscanf(const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _cwscanf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vcwprintf(const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _cwprintf_p(const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vcwprintf_p(const wchar_t * __restrict__ _Format,va_list _ArgList);

  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _cwprintf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vcwprintf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _cwprintf_p_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vcwprintf_p_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
# 1322 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/wchar.h" 3
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcsdup(const wchar_t *_Str);
  wchar_t *__attribute__((__cdecl__)) wcscat(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source) ;
                wchar_t *__attribute__((__cdecl__)) wcschr(const wchar_t *_Str,wchar_t _Ch);
  int __attribute__((__cdecl__)) wcscmp(const wchar_t *_Str1,const wchar_t *_Str2);
  wchar_t *__attribute__((__cdecl__)) wcscpy(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source) ;
  size_t __attribute__((__cdecl__)) wcscspn(const wchar_t *_Str,const wchar_t *_Control);
  size_t __attribute__((__cdecl__)) wcslen(const wchar_t *_Str);
  size_t __attribute__((__cdecl__)) wcsnlen(const wchar_t *_Src,size_t _MaxCount);
  wchar_t *__attribute__((__cdecl__)) wcsncat(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _Count) ;
  int __attribute__((__cdecl__)) wcsncmp(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  wchar_t *__attribute__((__cdecl__)) wcsncpy(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _Count) ;
  wchar_t *__attribute__((__cdecl__)) _wcsncpy_l(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _Count,_locale_t _Locale) ;
                wchar_t *__attribute__((__cdecl__)) wcspbrk(const wchar_t *_Str,const wchar_t *_Control);
                wchar_t *__attribute__((__cdecl__)) wcsrchr(const wchar_t *_Str,wchar_t _Ch);
  size_t __attribute__((__cdecl__)) wcsspn(const wchar_t *_Str,const wchar_t *_Control);
                wchar_t *__attribute__((__cdecl__)) wcsstr(const wchar_t *_Str,const wchar_t *_SubStr);



  wchar_t *__attribute__((__cdecl__)) wcstok(wchar_t * __restrict__ _Str,const wchar_t * __restrict__ _Delim) ;

  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcserror(int _ErrNum) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) __wcserror(const wchar_t *_Str) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsicmp(const wchar_t *_Str1,const wchar_t *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsicmp_l(const wchar_t *_Str1,const wchar_t *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsnicmp(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsnicmp_l(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcsnset(wchar_t *_Str,wchar_t _Val,size_t _MaxCount) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcsrev(wchar_t *_Str);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcsset(wchar_t *_Str,wchar_t _Val) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcslwr(wchar_t *_String) ;
  __attribute__ ((__dllimport__)) wchar_t *_wcslwr_l(wchar_t *_String,_locale_t _Locale) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcsupr(wchar_t *_String) ;
  __attribute__ ((__dllimport__)) wchar_t *_wcsupr_l(wchar_t *_String,_locale_t _Locale) ;
  size_t __attribute__((__cdecl__)) wcsxfrm(wchar_t * __restrict__ _Dst,const wchar_t * __restrict__ _Src,size_t _MaxCount);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _wcsxfrm_l(wchar_t * __restrict__ _Dst,const wchar_t * __restrict__ _Src,size_t _MaxCount,_locale_t _Locale);
  int __attribute__((__cdecl__)) wcscoll(const wchar_t *_Str1,const wchar_t *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcscoll_l(const wchar_t *_Str1,const wchar_t *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsicoll(const wchar_t *_Str1,const wchar_t *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsicoll_l(const wchar_t *_Str1,const wchar_t *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsncoll(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsncoll_l(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsnicoll(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wcsnicoll_l(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount,_locale_t _Locale);


  wchar_t *__attribute__((__cdecl__)) wcsdup(const wchar_t *_Str) ;

  int __attribute__((__cdecl__)) wcsicmp(const wchar_t *_Str1,const wchar_t *_Str2) ;
  int __attribute__((__cdecl__)) wcsnicmp(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount) ;
  wchar_t *__attribute__((__cdecl__)) wcsnset(wchar_t *_Str,wchar_t _Val,size_t _MaxCount) ;
  wchar_t *__attribute__((__cdecl__)) wcsrev(wchar_t *_Str) ;
  wchar_t *__attribute__((__cdecl__)) wcsset(wchar_t *_Str,wchar_t _Val) ;
  wchar_t *__attribute__((__cdecl__)) wcslwr(wchar_t *_Str) ;
  wchar_t *__attribute__((__cdecl__)) wcsupr(wchar_t *_Str) ;
  int __attribute__((__cdecl__)) wcsicoll(const wchar_t *_Str1,const wchar_t *_Str2) ;





  struct tm {
    int tm_sec;
    int tm_min;
    int tm_hour;
    int tm_mday;
    int tm_mon;
    int tm_year;
    int tm_wday;
    int tm_yday;
    int tm_isdst;
  };





  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wasctime(const struct tm *_Tm);
  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) _wasctime_s (wchar_t *_Buf,size_t _SizeInWords,const struct tm *_Tm);
  wchar_t *__attribute__((__cdecl__)) _wctime32(const __time32_t *_Time) ;
  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) _wctime32_s (wchar_t *_Buf,size_t _SizeInWords,const __time32_t *_Time);
  size_t __attribute__((__cdecl__)) wcsftime(wchar_t * __restrict__ _Buf,size_t _SizeInWords,const wchar_t * __restrict__ _Format,const struct tm * __restrict__ _Tm);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _wcsftime_l(wchar_t * __restrict__ _Buf,size_t _SizeInWords,const wchar_t * __restrict__ _Format,const struct tm * __restrict__ _Tm,_locale_t _Locale);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wstrdate(wchar_t *_Buffer) ;
  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) _wstrdate_s (wchar_t *_Buf,size_t _SizeInWords);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wstrtime(wchar_t *_Buffer) ;
  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) _wstrtime_s (wchar_t *_Buf,size_t _SizeInWords);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wctime64(const __time64_t *_Time) ;
  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) _wctime64_s (wchar_t *_Buf,size_t _SizeInWords,const __time64_t *_Time);



  wchar_t *__attribute__((__cdecl__)) _wctime(const time_t *_Time) ;
# 1426 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/wchar.h" 3
  errno_t __attribute__((__cdecl__)) _wctime_s(wchar_t *, size_t, const time_t *);
# 1445 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/wchar.h" 3
  typedef int mbstate_t;

  typedef wchar_t _Wint_t;

  wint_t __attribute__((__cdecl__)) btowc(int);
  size_t __attribute__((__cdecl__)) mbrlen(const char * __restrict__ _Ch,size_t _SizeInBytes,mbstate_t * __restrict__ _State);
  size_t __attribute__((__cdecl__)) mbrtowc(wchar_t * __restrict__ _DstCh,const char * __restrict__ _SrcCh,size_t _SizeInBytes,mbstate_t * __restrict__ _State);
  size_t __attribute__((__cdecl__)) mbsrtowcs(wchar_t * __restrict__ _Dest,const char ** __restrict__ _PSrc,size_t _Count,mbstate_t * __restrict__ _State) ;
  size_t __attribute__((__cdecl__)) wcrtomb(char * __restrict__ _Dest,wchar_t _Source,mbstate_t * __restrict__ _State) ;
  size_t __attribute__((__cdecl__)) wcsrtombs(char * __restrict__ _Dest,const wchar_t ** __restrict__ _PSource,size_t _Count,mbstate_t * __restrict__ _State) ;
  int __attribute__((__cdecl__)) wctob(wint_t _WCh);


  wchar_t *__attribute__((__cdecl__)) wmemset(wchar_t *s, wchar_t c, size_t n);
                wchar_t *__attribute__((__cdecl__)) wmemchr(const wchar_t *s, wchar_t c, size_t n);
  int __attribute__((__cdecl__)) wmemcmp(const wchar_t *s1, const wchar_t *s2,size_t n);
  wchar_t *__attribute__((__cdecl__)) wmemcpy(wchar_t * __restrict__ s1,const wchar_t * __restrict__ s2,size_t n) ;
  wchar_t * __attribute__((__cdecl__)) wmempcpy (wchar_t *_Dst, const wchar_t *_Src, size_t _Size);
  wchar_t *__attribute__((__cdecl__)) wmemmove(wchar_t *s1, const wchar_t *s2, size_t n) ;
  int __attribute__((__cdecl__)) fwide(FILE *stream,int mode);




  int __attribute__((__cdecl__)) mbsinit(const mbstate_t *ps);

  __extension__ long long __attribute__((__cdecl__)) wcstoll(const wchar_t * __restrict__ nptr,wchar_t ** __restrict__ endptr, int base);
  __extension__ unsigned long long __attribute__((__cdecl__)) wcstoull(const wchar_t * __restrict__ nptr,wchar_t ** __restrict__ endptr, int base);


  void *__attribute__((__cdecl__)) memmove(void *_Dst,const void *_Src,size_t _MaxCount);
  void *__attribute__((__cdecl__)) memcpy(void * __restrict__ _Dst,const void * __restrict__ _Src,size_t _MaxCount) ;
# 1556 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/wchar.h" 3
}


#pragma pack(pop)

# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/sec_api/wchar_s.h" 1 3








# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/wchar.h" 1 3
# 10 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/sec_api/wchar_s.h" 2 3
# 21 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/sec_api/wchar_s.h" 3
extern "C" {




  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) _waccess_s (const wchar_t *_Filename,int _AccessMode);
  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) _wmktemp_s (wchar_t *_TemplateName,size_t _SizeInWords);




  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) _cgetws_s (wchar_t *_Buffer,size_t _SizeInWords,size_t *_SizeRead);
  __attribute__((dllimport)) int __attribute__((__cdecl__)) _cwprintf_s (const wchar_t *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _cwscanf_s(const wchar_t *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _cwscanf_s_l(const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__((dllimport)) int __attribute__((__cdecl__)) _vcwprintf_s (const wchar_t *_Format,va_list _ArgList);
  __attribute__((dllimport)) int __attribute__((__cdecl__)) _cwprintf_s_l (const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__((dllimport)) int __attribute__((__cdecl__)) _vcwprintf_s_l (const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
# 295 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/sec_api/wchar_s.h" 3
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) wcstok_s(wchar_t *_Str,const wchar_t *_Delim,wchar_t **_Context);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcserror_s(wchar_t *_Buf,size_t _SizeInWords,int _ErrNum);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) __wcserror_s(wchar_t *_Buffer,size_t _SizeInWords,const wchar_t *_ErrMsg);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcsnset_s(wchar_t *_Dst,size_t _DstSizeInWords,wchar_t _Val,size_t _MaxCount);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcsset_s(wchar_t *_Str,size_t _SizeInWords,wchar_t _Val);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcslwr_s(wchar_t *_Str,size_t _SizeInWords);
  extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) _wcslwr_s(wchar_t (&_Str)[__size]) { return _wcslwr_s(_Str,__size); } }
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcslwr_s_l(wchar_t *_Str,size_t _SizeInWords,_locale_t _Locale);
  extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) _wcslwr_s_l(wchar_t (&_Str)[__size], _locale_t _Locale) { return _wcslwr_s_l(_Str,__size,_Locale); } }
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcsupr_s(wchar_t *_Str,size_t _Size);
  extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) _wcsupr_s(wchar_t (&_Str)[__size]) { return _wcsupr_s(_Str,__size); } }
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcsupr_s_l(wchar_t *_Str,size_t _Size,_locale_t _Locale);
  extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) _wcsupr_s_l(wchar_t (&_Str)[__size], _locale_t _Locale) { return _wcsupr_s_l(_Str,__size,_Locale); } }

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) wcscat_s(wchar_t *_Dst, rsize_t _DstSize, const wchar_t *_Src);
  extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) wcscat_s(wchar_t (&_Dest)[__size], const wchar_t * _Source) { return wcscat_s(_Dest,__size,_Source); } }
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) wcscpy_s(wchar_t *_Dst, rsize_t _DstSize, const wchar_t *_Src);
  extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) wcscpy_s(wchar_t (&_Dest)[__size], const wchar_t * _Source) { return wcscpy_s(_Dest,__size,_Source); } }

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) wcsncat_s(wchar_t *_Dst,size_t _DstSizeInChars,const wchar_t *_Src,size_t _MaxCount);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcsncat_s_l(wchar_t *_Dst,size_t _DstSizeInChars,const wchar_t *_Src,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) wcsncpy_s(wchar_t *_Dst,size_t _DstSizeInChars,const wchar_t *_Src,size_t _MaxCount);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcsncpy_s_l(wchar_t *_Dst,size_t _DstSizeInChars,const wchar_t *_Src,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wcstok_s_l(wchar_t *_Str,const wchar_t *_Delim,wchar_t **_Context,_locale_t _Locale);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcsset_s_l(wchar_t *_Str,size_t _SizeInChars,unsigned int _Val,_locale_t _Locale);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcsnset_s_l(wchar_t *_Str,size_t _SizeInChars,unsigned int _Val, size_t _Count,_locale_t _Locale);

  inline __attribute__((__always_inline__)) size_t __attribute__((__cdecl__)) wcsnlen_s(const wchar_t * _src, size_t _count) {
    return _src ? wcsnlen(_src, _count) : 0;
  }




  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) _wasctime_s (wchar_t *_Buf,size_t _SizeInWords,const struct tm *_Tm);
  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) _wctime32_s (wchar_t *_Buf,size_t _SizeInWords,const __time32_t *_Time);
  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) _wstrdate_s (wchar_t *_Buf,size_t _SizeInWords);
  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) _wstrtime_s (wchar_t *_Buf,size_t _SizeInWords);
  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) _wctime64_s (wchar_t *_Buf,size_t _SizeInWords,const __time64_t *_Time);
# 344 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/sec_api/wchar_s.h" 3
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) mbsrtowcs_s(size_t *_Retval,wchar_t *_Dst,size_t _SizeInWords,const char **_PSrc,size_t _N,mbstate_t *_State);
  extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) mbsrtowcs_s(size_t* _Retval, wchar_t (&_Dst)[__size], const char** _PSrc, size_t _N, mbstate_t _State) { return mbsrtowcs_s(_Retval, _Dst, __size, _PSrc, _N, _State); } }

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) wcrtomb_s(size_t *_Retval,char *_Dst,size_t _SizeInBytes,wchar_t _Ch,mbstate_t *_State);
  extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) wcrtomb_s(size_t* _Retval, char (&_Dst)[__size], wchar_t _Ch, mbstate_t _State) { return wcrtomb_s(_Retval, _Dst, __size, _Ch, _State); } }

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) wcsrtombs_s(size_t *_Retval,char *_Dst,size_t _SizeInBytes,const wchar_t **_Src,size_t _Size,mbstate_t *_State);
  extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) wcsrtombs_s(size_t _Retval, char (&_Dst)[__size], const wchar_t** _Src, size_t _Size, mbstate_t _State) { return wcsrtombs_s(_Retval, _Dst, __size, _Src, _Size, _State); } }

  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) wmemcpy_s (wchar_t *_dest,size_t _numberOfElements,const wchar_t *_src,size_t _count);
  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) wmemmove_s(wchar_t *_dest,size_t _numberOfElements,const wchar_t *_src,size_t _count);



}
# 1562 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/wchar.h" 2 3
# 45 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cwchar" 2 3
# 62 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cwchar" 3
namespace std
{
  using ::mbstate_t;
}
# 135 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cwchar" 3
extern "C++"
{
namespace std
{


  using ::wint_t;

  using ::btowc;
  using ::fgetwc;
  using ::fgetws;
  using ::fputwc;
  using ::fputws;
  using ::fwide;
  using ::fwprintf;
  using ::fwscanf;
  using ::getwc;
  using ::getwchar;
  using ::mbrlen;
  using ::mbrtowc;
  using ::mbsinit;
  using ::mbsrtowcs;
  using ::putwc;
  using ::putwchar;

  using ::swprintf;

  using ::swscanf;
  using ::ungetwc;
  using ::vfwprintf;

  using ::vfwscanf;


  using ::vswprintf;


  using ::vswscanf;

  using ::vwprintf;

  using ::vwscanf;

  using ::wcrtomb;
  using ::wcscat;
  using ::wcscmp;
  using ::wcscoll;
  using ::wcscpy;
  using ::wcscspn;
  using ::wcsftime;
  using ::wcslen;
  using ::wcsncat;
  using ::wcsncmp;
  using ::wcsncpy;
  using ::wcsrtombs;
  using ::wcsspn;
  using ::wcstod;

  using ::wcstof;

  using ::wcstok;
  using ::wcstol;
  using ::wcstoul;
  using ::wcsxfrm;
  using ::wctob;
  using ::wmemcmp;
  using ::wmemcpy;
  using ::wmemmove;
  using ::wmemset;
  using ::wprintf;
  using ::wscanf;
  using ::wcschr;
  using ::wcspbrk;
  using ::wcsrchr;
  using ::wcsstr;
  using ::wmemchr;


  inline wchar_t*
  wcschr(wchar_t* __p, wchar_t __c)
  { return wcschr(const_cast<const wchar_t*>(__p), __c); }

  inline wchar_t*
  wcspbrk(wchar_t* __s1, const wchar_t* __s2)
  { return wcspbrk(const_cast<const wchar_t*>(__s1), __s2); }

  inline wchar_t*
  wcsrchr(wchar_t* __p, wchar_t __c)
  { return wcsrchr(const_cast<const wchar_t*>(__p), __c); }

  inline wchar_t*
  wcsstr(wchar_t* __s1, const wchar_t* __s2)
  { return wcsstr(const_cast<const wchar_t*>(__s1), __s2); }

  inline wchar_t*
  wmemchr(wchar_t* __p, wchar_t __c, size_t __n)
  { return wmemchr(const_cast<const wchar_t*>(__p), __c, __n); }



}
}







namespace __gnu_cxx
{





  using ::wcstold;
# 260 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cwchar" 3
  using ::wcstoll;
  using ::wcstoull;

}

namespace std
{
  using ::__gnu_cxx::wcstold;
  using ::__gnu_cxx::wcstoll;
  using ::__gnu_cxx::wcstoull;
}
# 280 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cwchar" 3
namespace std
{

  using std::wcstof;


  using std::vfwscanf;


  using std::vswscanf;


  using std::vwscanf;



  using std::wcstold;
  using std::wcstoll;
  using std::wcstoull;

}
# 41 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/postypes.h" 2 3
# 68 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/postypes.h" 3
namespace std
{
# 90 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/postypes.h" 3
  typedef long long streamoff;







  typedef ptrdiff_t streamsize;
# 111 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/postypes.h" 3
  template<typename _StateT>
    class fpos
    {
    private:
      streamoff _M_off;
      _StateT _M_state;

    public:




      fpos()
      : _M_off(0), _M_state() { }
# 133 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/postypes.h" 3
      fpos(streamoff __off)
      : _M_off(__off), _M_state() { }


      fpos(const fpos&) = default;
      fpos& operator=(const fpos&) = default;
      ~fpos() = default;



      operator streamoff() const { return _M_off; }


      void
      state(_StateT __st)
      { _M_state = __st; }


      _StateT
      state() const
      { return _M_state; }





      fpos&
      operator+=(streamoff __off)
      {
 _M_off += __off;
 return *this;
      }





      fpos&
      operator-=(streamoff __off)
      {
 _M_off -= __off;
 return *this;
      }







      fpos
      operator+(streamoff __off) const
      {
 fpos __pos(*this);
 __pos += __off;
 return __pos;
      }







      fpos
      operator-(streamoff __off) const
      {
 fpos __pos(*this);
 __pos -= __off;
 return __pos;
      }






      streamoff
      operator-(const fpos& __other) const
      { return _M_off - __other._M_off; }
    };






  template<typename _StateT>
    inline bool
    operator==(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) == streamoff(__rhs); }

  template<typename _StateT>
    inline bool
    operator!=(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) != streamoff(__rhs); }





  typedef fpos<mbstate_t> streampos;

  typedef fpos<mbstate_t> wstreampos;
# 245 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/postypes.h" 3
  typedef fpos<mbstate_t> u16streampos;

  typedef fpos<mbstate_t> u32streampos;



}
# 41 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/iosfwd" 2 3

namespace std
{
# 74 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/iosfwd" 3
  class ios_base;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ios;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_streambuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_istream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_iostream;


namespace __cxx11 {

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
     typename _Alloc = allocator<_CharT> >
    class basic_stringbuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_istringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_ostringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_stringstream;

}

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_filebuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ifstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ofstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_fstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class ostreambuf_iterator;



  typedef basic_ios<char> ios;


  typedef basic_streambuf<char> streambuf;


  typedef basic_istream<char> istream;


  typedef basic_ostream<char> ostream;


  typedef basic_iostream<char> iostream;


  typedef basic_stringbuf<char> stringbuf;


  typedef basic_istringstream<char> istringstream;


  typedef basic_ostringstream<char> ostringstream;


  typedef basic_stringstream<char> stringstream;


  typedef basic_filebuf<char> filebuf;


  typedef basic_ifstream<char> ifstream;


  typedef basic_ofstream<char> ofstream;


  typedef basic_fstream<char> fstream;



  typedef basic_ios<wchar_t> wios;


  typedef basic_streambuf<wchar_t> wstreambuf;


  typedef basic_istream<wchar_t> wistream;


  typedef basic_ostream<wchar_t> wostream;


  typedef basic_iostream<wchar_t> wiostream;


  typedef basic_stringbuf<wchar_t> wstringbuf;


  typedef basic_istringstream<wchar_t> wistringstream;


  typedef basic_ostringstream<wchar_t> wostringstream;


  typedef basic_stringstream<wchar_t> wstringstream;


  typedef basic_filebuf<wchar_t> wfilebuf;


  typedef basic_ifstream<wchar_t> wifstream;


  typedef basic_ofstream<wchar_t> wofstream;


  typedef basic_fstream<wchar_t> wfstream;




}
# 39 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ios" 2 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/exception" 1 3
# 34 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/exception" 3

#pragma GCC visibility push(default)


# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/exception.h" 1 3
# 35 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/exception.h" 3

#pragma GCC visibility push(default)



extern "C++" {

namespace std
{
# 60 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/exception.h" 3
  class exception
  {
  public:
    exception() noexcept { }
    virtual ~exception() noexcept;

    exception(const exception&) = default;
    exception& operator=(const exception&) = default;
    exception(exception&&) = default;
    exception& operator=(exception&&) = default;




    virtual const char*
    what() const noexcept;
  };



}

}

#pragma GCC visibility pop
# 39 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/exception" 2 3

extern "C++" {

namespace std
{


  class bad_exception : public exception
  {
  public:
    bad_exception() noexcept { }



    virtual ~bad_exception() noexcept;


    virtual const char*
    what() const noexcept;
  };


  typedef void (*terminate_handler) ();


  typedef void (*unexpected_handler) ();


  terminate_handler set_terminate(terminate_handler) noexcept;



  terminate_handler get_terminate() noexcept;




  void terminate() noexcept __attribute__ ((__noreturn__));


  unexpected_handler set_unexpected(unexpected_handler) noexcept;



  unexpected_handler get_unexpected() noexcept;




  void unexpected() __attribute__ ((__noreturn__));
# 102 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/exception" 3
  bool uncaught_exception() noexcept __attribute__ ((__pure__));




  int uncaught_exceptions() noexcept __attribute__ ((__pure__));



}

namespace __gnu_cxx
{
# 133 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/exception" 3
  void __verbose_terminate_handler();


}

}

#pragma GCC visibility pop


# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/exception_ptr.h" 1 3
# 34 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/exception_ptr.h" 3
#pragma GCC visibility push(default)


# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/exception_defines.h" 1 3
# 38 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/exception_ptr.h" 2 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/cxxabi_init_exception.h" 1 3
# 35 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/cxxabi_init_exception.h" 3

#pragma GCC visibility push(default)

# 1 "C:/Xilinx/Vitis/2024.2/vcxx/lib/clang/14.0.6/include/stddef.h" 1 3
# 35 "C:/Xilinx/Vitis/2024.2/vcxx/lib/clang/14.0.6/include/stddef.h" 3
typedef long long int ptrdiff_t;
# 46 "C:/Xilinx/Vitis/2024.2/vcxx/lib/clang/14.0.6/include/stddef.h" 3
typedef long long unsigned int size_t;
# 102 "C:/Xilinx/Vitis/2024.2/vcxx/lib/clang/14.0.6/include/stddef.h" 3
# 1 "C:/Xilinx/Vitis/2024.2/vcxx/lib/clang/14.0.6/include/__stddef_max_align_t.h" 1 3
# 19 "C:/Xilinx/Vitis/2024.2/vcxx/lib/clang/14.0.6/include/__stddef_max_align_t.h" 3
typedef struct {
  long long __clang_max_align_nonce1
      __attribute__((__aligned__(__alignof__(long long))));
  long double __clang_max_align_nonce2
      __attribute__((__aligned__(__alignof__(long double))));
} max_align_t;
# 103 "C:/Xilinx/Vitis/2024.2/vcxx/lib/clang/14.0.6/include/stddef.h" 2 3
# 39 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/cxxabi_init_exception.h" 2 3
# 50 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/cxxabi_init_exception.h" 3
namespace std
{
  class type_info;
}

namespace __cxxabiv1
{
  struct __cxa_refcounted_exception;

  extern "C"
    {

      void*
      __cxa_allocate_exception(size_t) noexcept;

      void
      __cxa_free_exception(void*) noexcept;


      __cxa_refcounted_exception*
      __cxa_init_primary_exception(void *object, std::type_info *tinfo,
                void ( *dest) (void *)) noexcept;

    }
}



#pragma GCC visibility pop
# 39 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/exception_ptr.h" 2 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/typeinfo" 1 3
# 33 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/typeinfo" 3



# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/hash_bytes.h" 1 3
# 34 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/hash_bytes.h" 3



namespace std
{







  size_t
  _Hash_bytes(const void* __ptr, size_t __len, size_t __seed);





  size_t
  _Fnv_hash_bytes(const void* __ptr, size_t __len, size_t __seed);


}
# 37 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/typeinfo" 2 3


#pragma GCC visibility push(default)

extern "C++" {

namespace __cxxabiv1
{
  class __class_type_info;
}
# 80 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/typeinfo" 3
namespace std
{






  class type_info
  {
  public:




    virtual ~type_info();



    const char* name() const noexcept
    { return __name[0] == '*' ? __name + 1 : __name; }





    bool before(const type_info& __arg) const noexcept;
    bool operator==(const type_info& __arg) const noexcept;
# 136 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/typeinfo" 3
    bool operator!=(const type_info& __arg) const noexcept
    { return !operator==(__arg); }


    size_t hash_code() const noexcept
    {

      return _Hash_bytes(name(), __builtin_strlen(name()),
    static_cast<size_t>(0xc70f6907UL));



    }



    virtual bool __is_pointer_p() const;


    virtual bool __is_function_p() const;







    virtual bool __do_catch(const type_info *__thr_type, void **__thr_obj,
       unsigned __outer) const;


    virtual bool __do_upcast(const __cxxabiv1::__class_type_info *__target,
        void **__obj_ptr) const;

  protected:
    const char *__name;

    explicit type_info(const char *__n): __name(__n) { }

  private:

    type_info& operator=(const type_info&);
    type_info(const type_info&);
  };







  class bad_cast : public exception
  {
  public:
    bad_cast() noexcept { }



    virtual ~bad_cast() noexcept;


    virtual const char* what() const noexcept;
  };





  class bad_typeid : public exception
  {
  public:
    bad_typeid () noexcept { }



    virtual ~bad_typeid() noexcept;


    virtual const char* what() const noexcept;
  };
}

}

#pragma GCC visibility pop
# 40 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/exception_ptr.h" 2 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/new" 1 3
# 38 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/new" 3


# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/exception" 1 3
# 41 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/new" 2 3

#pragma GCC visibility push(default)

extern "C++" {

namespace std
{






  class bad_alloc : public exception
  {
  public:
    bad_alloc() throw() { }


    bad_alloc(const bad_alloc&) = default;
    bad_alloc& operator=(const bad_alloc&) = default;




    virtual ~bad_alloc() throw();


    virtual const char* what() const throw();
  };


  class bad_array_new_length : public bad_alloc
  {
  public:
    bad_array_new_length() throw() { }



    virtual ~bad_array_new_length() throw();


    virtual const char* what() const throw();
  };






  struct nothrow_t
  {

    explicit nothrow_t() = default;

  };

  extern const nothrow_t nothrow;



  typedef void (*new_handler)();



  new_handler set_new_handler(new_handler) throw();



  new_handler get_new_handler() noexcept;

}
# 125 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/new" 3
                   void* operator new(std::size_t)
  __attribute__((__externally_visible__));
                   void* operator new[](std::size_t)
  __attribute__((__externally_visible__));
void operator delete(void*) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*) noexcept
  __attribute__((__externally_visible__));






                   void* operator new(std::size_t, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__, __malloc__));
                   void* operator new[](std::size_t, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__, __malloc__));
void operator delete(void*, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
# 173 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/new" 3
                   inline void* operator new(std::size_t, void* __p) noexcept
{ return __p; }
                   inline void* operator new[](std::size_t, void* __p) noexcept
{ return __p; }


inline void operator delete (void*, void*) noexcept { }
inline void operator delete[](void*, void*) noexcept { }

}
# 226 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/new" 3
#pragma GCC visibility pop
# 41 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/exception_ptr.h" 2 3


# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/move.h" 1 3
# 34 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/move.h" 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/concept_check.h" 1 3
# 34 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/concept_check.h" 3
# 35 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/move.h" 2 3

namespace std
{







  template<typename _Tp>
    inline constexpr _Tp*
    __addressof(_Tp& __r) noexcept
    { return __builtin_addressof(__r); }




}

# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/type_traits" 1 3
# 33 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/type_traits" 3







namespace std
{
# 56 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/type_traits" 3
  template<typename _Tp, _Tp __v>
    struct integral_constant
    {
      static constexpr _Tp value = __v;
      typedef _Tp value_type;
      typedef integral_constant<_Tp, __v> type;
      constexpr operator value_type() const noexcept { return value; }




      constexpr value_type operator()() const noexcept { return value; }

    };

  template<typename _Tp, _Tp __v>
    constexpr _Tp integral_constant<_Tp, __v>::value;


  typedef integral_constant<bool, true> true_type;


  typedef integral_constant<bool, false> false_type;

  template<bool __v>
    using __bool_constant = integral_constant<bool, __v>;
# 91 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/type_traits" 3
  template<bool, typename, typename>
    struct conditional;

  template<typename...>
    struct __or_;

  template<>
    struct __or_<>
    : public false_type
    { };

  template<typename _B1>
    struct __or_<_B1>
    : public _B1
    { };

  template<typename _B1, typename _B2>
    struct __or_<_B1, _B2>
    : public conditional<_B1::value, _B1, _B2>::type
    { };

  template<typename _B1, typename _B2, typename _B3, typename... _Bn>
    struct __or_<_B1, _B2, _B3, _Bn...>
    : public conditional<_B1::value, _B1, __or_<_B2, _B3, _Bn...>>::type
    { };

  template<typename...>
    struct __and_;

  template<>
    struct __and_<>
    : public true_type
    { };

  template<typename _B1>
    struct __and_<_B1>
    : public _B1
    { };

  template<typename _B1, typename _B2>
    struct __and_<_B1, _B2>
    : public conditional<_B1::value, _B2, _B1>::type
    { };

  template<typename _B1, typename _B2, typename _B3, typename... _Bn>
    struct __and_<_B1, _B2, _B3, _Bn...>
    : public conditional<_B1::value, __and_<_B2, _B3, _Bn...>, _B1>::type
    { };

  template<typename _Pp>
    struct __not_
    : public __bool_constant<!bool(_Pp::value)>
    { };
# 185 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/type_traits" 3
  template<typename _Tp>
    struct __success_type
    { typedef _Tp type; };

  struct __failure_type
  { };



  template<typename>
    struct remove_cv;

  template<typename>
    struct __is_void_helper
    : public false_type { };

  template<>
    struct __is_void_helper<void>
    : public true_type { };


  template<typename _Tp>
    struct is_void
    : public __is_void_helper<typename remove_cv<_Tp>::type>::type
    { };

  template<typename>
    struct __is_integral_helper
    : public false_type { };

  template<>
    struct __is_integral_helper<bool>
    : public true_type { };

  template<>
    struct __is_integral_helper<char>
    : public true_type { };

  template<>
    struct __is_integral_helper<signed char>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned char>
    : public true_type { };


  template<>
    struct __is_integral_helper<wchar_t>
    : public true_type { };
# 243 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/type_traits" 3
  template<>
    struct __is_integral_helper<char16_t>
    : public true_type { };

  template<>
    struct __is_integral_helper<char32_t>
    : public true_type { };

  template<>
    struct __is_integral_helper<short>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned short>
    : public true_type { };

  template<>
    struct __is_integral_helper<int>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned int>
    : public true_type { };

  template<>
    struct __is_integral_helper<long>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned long>
    : public true_type { };

  template<>
    struct __is_integral_helper<long long>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned long long>
    : public true_type { };




  template<>
    struct __is_integral_helper<__int128>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned __int128>
    : public true_type { };
# 323 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/type_traits" 3
  template<typename _Tp>
    struct is_integral
    : public __is_integral_helper<typename remove_cv<_Tp>::type>::type
    { };

  template<typename>
    struct __is_floating_point_helper
    : public false_type { };

  template<>
    struct __is_floating_point_helper<float>
    : public true_type { };

  template<>
    struct __is_floating_point_helper<double>
    : public true_type { };

  template<>
    struct __is_floating_point_helper<long double>
    : public true_type { };


  template<>
    struct __is_floating_point_helper<__float128>
    : public true_type { };



  template<typename _Tp>
    struct is_floating_point
    : public __is_floating_point_helper<typename remove_cv<_Tp>::type>::type
    { };


  template<typename>
    struct is_array
    : public false_type { };

  template<typename _Tp, std::size_t _Size>
    struct is_array<_Tp[_Size]>
    : public true_type { };

  template<typename _Tp>
    struct is_array<_Tp[]>
    : public true_type { };

  template<typename>
    struct __is_pointer_helper
    : public false_type { };

  template<typename _Tp>
    struct __is_pointer_helper<_Tp*>
    : public true_type { };


  template<typename _Tp>
    struct is_pointer
    : public __is_pointer_helper<typename remove_cv<_Tp>::type>::type
    { };


  template<typename>
    struct is_lvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_lvalue_reference<_Tp&>
    : public true_type { };


  template<typename>
    struct is_rvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_rvalue_reference<_Tp&&>
    : public true_type { };

  template<typename>
    struct is_function;

  template<typename>
    struct __is_member_object_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_object_pointer_helper<_Tp _Cp::*>
    : public __not_<is_function<_Tp>>::type { };


  template<typename _Tp>
    struct is_member_object_pointer
    : public __is_member_object_pointer_helper<
    typename remove_cv<_Tp>::type>::type
    { };

  template<typename>
    struct __is_member_function_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_function_pointer_helper<_Tp _Cp::*>
    : public is_function<_Tp>::type { };


  template<typename _Tp>
    struct is_member_function_pointer
    : public __is_member_function_pointer_helper<
    typename remove_cv<_Tp>::type>::type
    { };


  template<typename _Tp>
    struct is_enum
    : public integral_constant<bool, __is_enum(_Tp)>
    { };


  template<typename _Tp>
    struct is_union
    : public integral_constant<bool, __is_union(_Tp)>
    { };


  template<typename _Tp>
    struct is_class
    : public integral_constant<bool, __is_class(_Tp)>
    { };


  template<typename>
    struct is_function
    : public false_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) volatile >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) volatile & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) volatile && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) volatile >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) volatile & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) volatile && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const volatile >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const volatile & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const volatile && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const volatile >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const volatile & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const volatile && >
    : public true_type { };



  template<typename>
    struct __is_null_pointer_helper
    : public false_type { };

  template<>
    struct __is_null_pointer_helper<std::nullptr_t>
    : public true_type { };


  template<typename _Tp>
    struct is_null_pointer
    : public __is_null_pointer_helper<typename remove_cv<_Tp>::type>::type
    { };


  template<typename _Tp>
    struct __is_nullptr_t
    : public is_null_pointer<_Tp>
    { };




  template<typename _Tp>
    struct is_reference
    : public __or_<is_lvalue_reference<_Tp>,
                   is_rvalue_reference<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_arithmetic
    : public __or_<is_integral<_Tp>, is_floating_point<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_fundamental
    : public __or_<is_arithmetic<_Tp>, is_void<_Tp>,
     is_null_pointer<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_object
    : public __not_<__or_<is_function<_Tp>, is_reference<_Tp>,
                          is_void<_Tp>>>::type
    { };

  template<typename>
    struct is_member_pointer;


  template<typename _Tp>
    struct is_scalar
    : public __or_<is_arithmetic<_Tp>, is_enum<_Tp>, is_pointer<_Tp>,
                   is_member_pointer<_Tp>, is_null_pointer<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_compound
    : public __not_<is_fundamental<_Tp>>::type { };

  template<typename _Tp>
    struct __is_member_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_pointer_helper<_Tp _Cp::*>
    : public true_type { };


  template<typename _Tp>
    struct is_member_pointer
    : public __is_member_pointer_helper<typename remove_cv<_Tp>::type>::type
    { };



  template<typename _Tp>
    struct __is_referenceable
    : public __or_<is_object<_Tp>, is_reference<_Tp>>::type
    { };

  template<typename _Res, typename... _Args >
    struct __is_referenceable<_Res(_Args...) >
    : public true_type
    { };

  template<typename _Res, typename... _Args >
    struct __is_referenceable<_Res(_Args......) >
    : public true_type
    { };




  template<typename>
    struct is_const
    : public false_type { };

  template<typename _Tp>
    struct is_const<_Tp const>
    : public true_type { };


  template<typename>
    struct is_volatile
    : public false_type { };

  template<typename _Tp>
    struct is_volatile<_Tp volatile>
    : public true_type { };


  template<typename _Tp>
    struct is_trivial
    : public integral_constant<bool, __is_trivial(_Tp)>
    { };


  template<typename _Tp>
    struct is_trivially_copyable
    : public integral_constant<bool, __is_trivially_copyable(_Tp)>
    { };


  template<typename _Tp>
    struct is_standard_layout
    : public integral_constant<bool, __is_standard_layout(_Tp)>
    { };



  template<typename _Tp>
    struct is_pod
    : public integral_constant<bool, __is_pod(_Tp)>
    { };


  template<typename _Tp>
    struct is_literal_type
    : public integral_constant<bool, __is_literal_type(_Tp)>
    { };


  template<typename _Tp>
    struct is_empty
    : public integral_constant<bool, __is_empty(_Tp)>
    { };


  template<typename _Tp>
    struct is_polymorphic
    : public integral_constant<bool, __is_polymorphic(_Tp)>
    { };




  template<typename _Tp>
    struct is_final
    : public integral_constant<bool, __is_final(_Tp)>
    { };



  template<typename _Tp>
    struct is_abstract
    : public integral_constant<bool, __is_abstract(_Tp)>
    { };

  template<typename _Tp,
    bool = is_arithmetic<_Tp>::value>
    struct __is_signed_helper
    : public false_type { };

  template<typename _Tp>
    struct __is_signed_helper<_Tp, true>
    : public integral_constant<bool, _Tp(-1) < _Tp(0)>
    { };


  template<typename _Tp>
    struct is_signed
    : public __is_signed_helper<_Tp>::type
    { };


  template<typename _Tp>
    struct is_unsigned
    : public __and_<is_arithmetic<_Tp>, __not_<is_signed<_Tp>>>
    { };
# 758 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/type_traits" 3
  template<typename _Tp, typename _Up = _Tp&&>
    _Up
    __declval(int);

  template<typename _Tp>
    _Tp
    __declval(long);

  template<typename _Tp>
    auto declval() noexcept -> decltype(__declval<_Tp>(0));

  template<typename, unsigned = 0>
    struct extent;

  template<typename>
    struct remove_all_extents;

  template<typename _Tp>
    struct __is_array_known_bounds
    : public integral_constant<bool, (extent<_Tp>::value > 0)>
    { };

  template<typename _Tp>
    struct __is_array_unknown_bounds
    : public __and_<is_array<_Tp>, __not_<extent<_Tp>>>
    { };






  struct __do_is_destructible_impl
  {
    template<typename _Tp, typename = decltype(declval<_Tp&>().~_Tp())>
      static true_type __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_destructible_impl
    : public __do_is_destructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp,
           bool = __or_<is_void<_Tp>,
                        __is_array_unknown_bounds<_Tp>,
                        is_function<_Tp>>::value,
           bool = __or_<is_reference<_Tp>, is_scalar<_Tp>>::value>
    struct __is_destructible_safe;

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, false, false>
    : public __is_destructible_impl<typename
               remove_all_extents<_Tp>::type>::type
    { };

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, true, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, false, true>
    : public true_type { };


  template<typename _Tp>
    struct is_destructible
    : public __is_destructible_safe<_Tp>::type
    { };





  struct __do_is_nt_destructible_impl
  {
    template<typename _Tp>
      static __bool_constant<noexcept(declval<_Tp&>().~_Tp())>
      __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_nt_destructible_impl
    : public __do_is_nt_destructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp,
           bool = __or_<is_void<_Tp>,
                        __is_array_unknown_bounds<_Tp>,
                        is_function<_Tp>>::value,
           bool = __or_<is_reference<_Tp>, is_scalar<_Tp>>::value>
    struct __is_nt_destructible_safe;

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, false, false>
    : public __is_nt_destructible_impl<typename
               remove_all_extents<_Tp>::type>::type
    { };

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, true, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, false, true>
    : public true_type { };


  template<typename _Tp>
    struct is_nothrow_destructible
    : public __is_nt_destructible_safe<_Tp>::type
    { };


  template<typename _Tp, typename... _Args>
    struct is_constructible
      : public __bool_constant<__is_constructible(_Tp, _Args...)>
    { };


  template<typename _Tp>
    struct is_default_constructible
    : public is_constructible<_Tp>::type
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_copy_constructible_impl;

  template<typename _Tp>
    struct __is_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_copy_constructible_impl<_Tp, true>
    : public is_constructible<_Tp, const _Tp&>
    { };


  template<typename _Tp>
    struct is_copy_constructible
    : public __is_copy_constructible_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_move_constructible_impl;

  template<typename _Tp>
    struct __is_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_move_constructible_impl<_Tp, true>
    : public is_constructible<_Tp, _Tp&&>
    { };


  template<typename _Tp>
    struct is_move_constructible
    : public __is_move_constructible_impl<_Tp>
    { };

  template<bool, typename _Tp, typename... _Args>
    struct __is_nt_constructible_impl
    : public false_type
    { };

  template<typename _Tp, typename... _Args>
    struct __is_nt_constructible_impl<true, _Tp, _Args...>
    : public __bool_constant<noexcept(_Tp(std::declval<_Args>()...))>
    { };

  template<typename _Tp, typename _Arg>
    struct __is_nt_constructible_impl<true, _Tp, _Arg>
    : public __bool_constant<noexcept(static_cast<_Tp>(std::declval<_Arg>()))>
    { };

  template<typename _Tp>
    struct __is_nt_constructible_impl<true, _Tp>
    : public __bool_constant<noexcept(_Tp())>
    { };

  template<typename _Tp, size_t _Num>
    struct __is_nt_constructible_impl<true, _Tp[_Num]>
    : public __bool_constant<noexcept(typename remove_all_extents<_Tp>::type())>
    { };

  template<typename _Tp, typename... _Args>
    using __is_nothrow_constructible_impl
      = __is_nt_constructible_impl<__is_constructible(_Tp, _Args...),
       _Tp, _Args...>;


  template<typename _Tp, typename... _Args>
    struct is_nothrow_constructible
    : public __is_nothrow_constructible_impl<_Tp, _Args...>::type
    { };


  template<typename _Tp>
    struct is_nothrow_default_constructible
    : public __is_nothrow_constructible_impl<_Tp>::type
    { };


  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nothrow_copy_constructible_impl;

  template<typename _Tp>
    struct __is_nothrow_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nothrow_copy_constructible_impl<_Tp, true>
    : public is_nothrow_constructible<_Tp, const _Tp&>
    { };


  template<typename _Tp>
    struct is_nothrow_copy_constructible
    : public __is_nothrow_copy_constructible_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nothrow_move_constructible_impl;

  template<typename _Tp>
    struct __is_nothrow_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nothrow_move_constructible_impl<_Tp, true>
    : public is_nothrow_constructible<_Tp, _Tp&&>
    { };


  template<typename _Tp>
    struct is_nothrow_move_constructible
    : public __is_nothrow_move_constructible_impl<_Tp>
    { };


  template<typename _Tp, typename _Up>
    struct is_assignable
      : public __bool_constant<__is_assignable(_Tp, _Up)>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_copy_assignable_impl;

  template<typename _Tp>
    struct __is_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_copy_assignable_impl<_Tp, true>
    : public is_assignable<_Tp&, const _Tp&>
    { };


  template<typename _Tp>
    struct is_copy_assignable
    : public __is_copy_assignable_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_move_assignable_impl;

  template<typename _Tp>
    struct __is_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_move_assignable_impl<_Tp, true>
    : public is_assignable<_Tp&, _Tp&&>
    { };


  template<typename _Tp>
    struct is_move_assignable
    : public __is_move_assignable_impl<_Tp>
    { };

  template<typename _Tp, typename _Up>
    struct __is_nt_assignable_impl
    : public integral_constant<bool, noexcept(declval<_Tp>() = declval<_Up>())>
    { };


  template<typename _Tp, typename _Up>
    struct is_nothrow_assignable
    : public __and_<is_assignable<_Tp, _Up>,
      __is_nt_assignable_impl<_Tp, _Up>>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nt_copy_assignable_impl;

  template<typename _Tp>
    struct __is_nt_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_copy_assignable_impl<_Tp, true>
    : public is_nothrow_assignable<_Tp&, const _Tp&>
    { };


  template<typename _Tp>
    struct is_nothrow_copy_assignable
    : public __is_nt_copy_assignable_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nt_move_assignable_impl;

  template<typename _Tp>
    struct __is_nt_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_move_assignable_impl<_Tp, true>
    : public is_nothrow_assignable<_Tp&, _Tp&&>
    { };


  template<typename _Tp>
    struct is_nothrow_move_assignable
    : public __is_nt_move_assignable_impl<_Tp>
    { };


  template<typename _Tp, typename... _Args>
    struct is_trivially_constructible
    : public __bool_constant<__is_trivially_constructible(_Tp, _Args...)>
    { };


  template<typename _Tp>
    struct is_trivially_default_constructible
    : public is_trivially_constructible<_Tp>::type
    { };

  struct __do_is_implicitly_default_constructible_impl
  {
    template <typename _Tp>
    static void __helper(const _Tp&);

    template <typename _Tp>
    static true_type __test(const _Tp&,
                            decltype(__helper<const _Tp&>({}))* = 0);

    static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_implicitly_default_constructible_impl
    : public __do_is_implicitly_default_constructible_impl
    {
      typedef decltype(__test(declval<_Tp>())) type;
    };

  template<typename _Tp>
    struct __is_implicitly_default_constructible_safe
    : public __is_implicitly_default_constructible_impl<_Tp>::type
    { };

  template <typename _Tp>
    struct __is_implicitly_default_constructible
    : public __and_<is_default_constructible<_Tp>,
      __is_implicitly_default_constructible_safe<_Tp>>
    { };



  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_trivially_copy_constructible_impl;

  template<typename _Tp>
    struct __is_trivially_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_trivially_copy_constructible_impl<_Tp, true>
    : public __and_<is_copy_constructible<_Tp>,
      integral_constant<bool,
   __is_trivially_constructible(_Tp, const _Tp&)>>
    { };

  template<typename _Tp>
    struct is_trivially_copy_constructible
    : public __is_trivially_copy_constructible_impl<_Tp>
    { };



  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_trivially_move_constructible_impl;

  template<typename _Tp>
    struct __is_trivially_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_trivially_move_constructible_impl<_Tp, true>
    : public __and_<is_move_constructible<_Tp>,
      integral_constant<bool,
   __is_trivially_constructible(_Tp, _Tp&&)>>
    { };

  template<typename _Tp>
    struct is_trivially_move_constructible
    : public __is_trivially_move_constructible_impl<_Tp>
    { };


  template<typename _Tp, typename _Up>
    struct is_trivially_assignable
    : public __bool_constant<__is_trivially_assignable(_Tp, _Up)>
    { };



  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_trivially_copy_assignable_impl;

  template<typename _Tp>
    struct __is_trivially_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_trivially_copy_assignable_impl<_Tp, true>
    : public __bool_constant<__is_trivially_assignable(_Tp&, const _Tp&)>
    { };

  template<typename _Tp>
    struct is_trivially_copy_assignable
    : public __is_trivially_copy_assignable_impl<_Tp>
    { };



  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_trivially_move_assignable_impl;

  template<typename _Tp>
    struct __is_trivially_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_trivially_move_assignable_impl<_Tp, true>
    : public __bool_constant<__is_trivially_assignable(_Tp&, _Tp&&)>
    { };

  template<typename _Tp>
    struct is_trivially_move_assignable
    : public __is_trivially_move_assignable_impl<_Tp>
    { };


  template<typename _Tp>
    struct is_trivially_destructible
    : public __and_<is_destructible<_Tp>,
      __bool_constant<__has_trivial_destructor(_Tp)>>
    { };



  template<typename _Tp>
    struct has_virtual_destructor
    : public integral_constant<bool, __has_virtual_destructor(_Tp)>
    { };





  template<typename _Tp>
    struct alignment_of
    : public integral_constant<std::size_t, alignof(_Tp)> { };


  template<typename>
    struct rank
    : public integral_constant<std::size_t, 0> { };

  template<typename _Tp, std::size_t _Size>
    struct rank<_Tp[_Size]>
    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };

  template<typename _Tp>
    struct rank<_Tp[]>
    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };


  template<typename, unsigned _Uint>
    struct extent
    : public integral_constant<std::size_t, 0> { };

  template<typename _Tp, unsigned _Uint, std::size_t _Size>
    struct extent<_Tp[_Size], _Uint>
    : public integral_constant<std::size_t,
          _Uint == 0 ? _Size : extent<_Tp,
          _Uint - 1>::value>
    { };

  template<typename _Tp, unsigned _Uint>
    struct extent<_Tp[], _Uint>
    : public integral_constant<std::size_t,
          _Uint == 0 ? 0 : extent<_Tp,
             _Uint - 1>::value>
    { };





  template<typename, typename>
    struct is_same
    : public false_type { };

  template<typename _Tp>
    struct is_same<_Tp, _Tp>
    : public true_type { };


  template<typename _Base, typename _Derived>
    struct is_base_of
    : public integral_constant<bool, __is_base_of(_Base, _Derived)>
    { };

  template<typename _From, typename _To,
           bool = __or_<is_void<_From>, is_function<_To>,
                        is_array<_To>>::value>
    struct __is_convertible_helper
    {
      typedef typename is_void<_To>::type type;
    };

  template<typename _From, typename _To>
    class __is_convertible_helper<_From, _To, false>
    {
      template<typename _To1>
 static void __test_aux(_To1) noexcept;

      template<typename _From1, typename _To1,
        typename = decltype(__test_aux<_To1>(std::declval<_From1>()))>
 static true_type
 __test(int);

      template<typename, typename>
 static false_type
 __test(...);

    public:
      typedef decltype(__test<_From, _To>(0)) type;
    };



  template<typename _From, typename _To>
    struct is_convertible
    : public __is_convertible_helper<_From, _To>::type
    { };
# 1374 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/type_traits" 3
  template<typename _Tp>
    struct remove_const
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_const<_Tp const>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_volatile
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_volatile<_Tp volatile>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_cv
    {
      typedef typename
      remove_const<typename remove_volatile<_Tp>::type>::type type;
    };


  template<typename _Tp>
    struct add_const
    { typedef _Tp const type; };


  template<typename _Tp>
    struct add_volatile
    { typedef _Tp volatile type; };


  template<typename _Tp>
    struct add_cv
    {
      typedef typename
      add_const<typename add_volatile<_Tp>::type>::type type;
    };






  template<typename _Tp>
    using remove_const_t = typename remove_const<_Tp>::type;


  template<typename _Tp>
    using remove_volatile_t = typename remove_volatile<_Tp>::type;


  template<typename _Tp>
    using remove_cv_t = typename remove_cv<_Tp>::type;


  template<typename _Tp>
    using add_const_t = typename add_const<_Tp>::type;


  template<typename _Tp>
    using add_volatile_t = typename add_volatile<_Tp>::type;


  template<typename _Tp>
    using add_cv_t = typename add_cv<_Tp>::type;





  template<typename _Tp>
    struct remove_reference
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_reference<_Tp&>
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_reference<_Tp&&>
    { typedef _Tp type; };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __add_lvalue_reference_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_lvalue_reference_helper<_Tp, true>
    { typedef _Tp& type; };


  template<typename _Tp>
    struct add_lvalue_reference
    : public __add_lvalue_reference_helper<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __add_rvalue_reference_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_rvalue_reference_helper<_Tp, true>
    { typedef _Tp&& type; };


  template<typename _Tp>
    struct add_rvalue_reference
    : public __add_rvalue_reference_helper<_Tp>
    { };



  template<typename _Tp>
    using remove_reference_t = typename remove_reference<_Tp>::type;


  template<typename _Tp>
    using add_lvalue_reference_t = typename add_lvalue_reference<_Tp>::type;


  template<typename _Tp>
    using add_rvalue_reference_t = typename add_rvalue_reference<_Tp>::type;





  template<typename _Unqualified, bool _IsConst, bool _IsVol>
    struct __cv_selector;

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, false>
    { typedef _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, true>
    { typedef volatile _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, false>
    { typedef const _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, true>
    { typedef const volatile _Unqualified __type; };

  template<typename _Qualified, typename _Unqualified,
    bool _IsConst = is_const<_Qualified>::value,
    bool _IsVol = is_volatile<_Qualified>::value>
    class __match_cv_qualifiers
    {
      typedef __cv_selector<_Unqualified, _IsConst, _IsVol> __match;

    public:
      typedef typename __match::__type __type;
    };


  template<typename _Tp>
    struct __make_unsigned
    { typedef _Tp __type; };

  template<>
    struct __make_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __make_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __make_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __make_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __make_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __make_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __make_unsigned<__int128>
    { typedef unsigned __int128 __type; };
# 1587 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/type_traits" 3
  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = is_enum<_Tp>::value>
    class __make_unsigned_selector;

  template<typename _Tp>
    class __make_unsigned_selector<_Tp, true, false>
    {
      using __unsigned_type
 = typename __make_unsigned<typename remove_cv<_Tp>::type>::__type;

    public:
      using __type
 = typename __match_cv_qualifiers<_Tp, __unsigned_type>::__type;
    };

  class __make_unsigned_selector_base
  {
  protected:
    template<typename...> struct _List { };

    template<typename _Tp, typename... _Up>
      struct _List<_Tp, _Up...> : _List<_Up...>
      { static constexpr size_t __size = sizeof(_Tp); };

    template<size_t _Sz, typename _Tp, bool = (_Sz <= _Tp::__size)>
      struct __select;

    template<size_t _Sz, typename _Uint, typename... _UInts>
      struct __select<_Sz, _List<_Uint, _UInts...>, true>
      { using __type = _Uint; };

    template<size_t _Sz, typename _Uint, typename... _UInts>
      struct __select<_Sz, _List<_Uint, _UInts...>, false>
      : __select<_Sz, _List<_UInts...>>
      { };
  };


  template<typename _Tp>
    class __make_unsigned_selector<_Tp, false, true>
    : __make_unsigned_selector_base
    {

      using _UInts = _List<unsigned char, unsigned short, unsigned int,
      unsigned long, unsigned long long>;

      using __unsigned_type = typename __select<sizeof(_Tp), _UInts>::__type;

    public:
      using __type
 = typename __match_cv_qualifiers<_Tp, __unsigned_type>::__type;
    };






  template<>
    struct __make_unsigned<wchar_t>
    {
      using __type
 = typename __make_unsigned_selector<wchar_t, false, true>::__type;
    };
# 1663 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/type_traits" 3
  template<>
    struct __make_unsigned<char16_t>
    {
      using __type
 = typename __make_unsigned_selector<char16_t, false, true>::__type;
    };

  template<>
    struct __make_unsigned<char32_t>
    {
      using __type
 = typename __make_unsigned_selector<char32_t, false, true>::__type;
    };





  template<typename _Tp>
    struct make_unsigned
    { typedef typename __make_unsigned_selector<_Tp>::__type type; };


  template<>
    struct make_unsigned<bool>;



  template<typename _Tp>
    struct __make_signed
    { typedef _Tp __type; };

  template<>
    struct __make_signed<char>
    { typedef signed char __type; };

  template<>
    struct __make_signed<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __make_signed<unsigned short>
    { typedef signed short __type; };

  template<>
    struct __make_signed<unsigned int>
    { typedef signed int __type; };

  template<>
    struct __make_signed<unsigned long>
    { typedef signed long __type; };

  template<>
    struct __make_signed<unsigned long long>
    { typedef signed long long __type; };


  template<>
    struct __make_signed<unsigned __int128>
    { typedef __int128 __type; };
# 1741 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/type_traits" 3
  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = is_enum<_Tp>::value>
    class __make_signed_selector;

  template<typename _Tp>
    class __make_signed_selector<_Tp, true, false>
    {
      using __signed_type
 = typename __make_signed<typename remove_cv<_Tp>::type>::__type;

    public:
      using __type
 = typename __match_cv_qualifiers<_Tp, __signed_type>::__type;
    };


  template<typename _Tp>
    class __make_signed_selector<_Tp, false, true>
    {
      typedef typename __make_unsigned_selector<_Tp>::__type __unsigned_type;

    public:
      typedef typename __make_signed_selector<__unsigned_type>::__type __type;
    };






  template<>
    struct __make_signed<wchar_t>
    {
      using __type
 = typename __make_signed_selector<wchar_t, false, true>::__type;
    };
# 1789 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/type_traits" 3
  template<>
    struct __make_signed<char16_t>
    {
      using __type
 = typename __make_signed_selector<char16_t, false, true>::__type;
    };

  template<>
    struct __make_signed<char32_t>
    {
      using __type
 = typename __make_signed_selector<char32_t, false, true>::__type;
    };





  template<typename _Tp>
    struct make_signed
    { typedef typename __make_signed_selector<_Tp>::__type type; };


  template<>
    struct make_signed<bool>;



  template<typename _Tp>
    using make_signed_t = typename make_signed<_Tp>::type;


  template<typename _Tp>
    using make_unsigned_t = typename make_unsigned<_Tp>::type;





  template<typename _Tp>
    struct remove_extent
    { typedef _Tp type; };

  template<typename _Tp, std::size_t _Size>
    struct remove_extent<_Tp[_Size]>
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_extent<_Tp[]>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_all_extents
    { typedef _Tp type; };

  template<typename _Tp, std::size_t _Size>
    struct remove_all_extents<_Tp[_Size]>
    { typedef typename remove_all_extents<_Tp>::type type; };

  template<typename _Tp>
    struct remove_all_extents<_Tp[]>
    { typedef typename remove_all_extents<_Tp>::type type; };



  template<typename _Tp>
    using remove_extent_t = typename remove_extent<_Tp>::type;


  template<typename _Tp>
    using remove_all_extents_t = typename remove_all_extents<_Tp>::type;




  template<typename _Tp, typename>
    struct __remove_pointer_helper
    { typedef _Tp type; };

  template<typename _Tp, typename _Up>
    struct __remove_pointer_helper<_Tp, _Up*>
    { typedef _Up type; };


  template<typename _Tp>
    struct remove_pointer
    : public __remove_pointer_helper<_Tp, typename remove_cv<_Tp>::type>
    { };


  template<typename _Tp, bool = __or_<__is_referenceable<_Tp>,
          is_void<_Tp>>::value>
    struct __add_pointer_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_pointer_helper<_Tp, true>
    { typedef typename remove_reference<_Tp>::type* type; };

  template<typename _Tp>
    struct add_pointer
    : public __add_pointer_helper<_Tp>
    { };



  template<typename _Tp>
    using remove_pointer_t = typename remove_pointer<_Tp>::type;


  template<typename _Tp>
    using add_pointer_t = typename add_pointer<_Tp>::type;


  template<std::size_t _Len>
    struct __aligned_storage_msa
    {
      union __type
      {
 unsigned char __data[_Len];
 struct __attribute__((__aligned__)) { } __align;
      };
    };
# 1924 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/type_traits" 3
  template<std::size_t _Len, std::size_t _Align =
    __alignof__(typename __aligned_storage_msa<_Len>::__type)>
    struct aligned_storage
    {
      union type
      {
 unsigned char __data[_Len];
 struct __attribute__((__aligned__((_Align)))) { } __align;
      };
    };

  template <typename... _Types>
    struct __strictest_alignment
    {
      static const size_t _S_alignment = 0;
      static const size_t _S_size = 0;
    };

  template <typename _Tp, typename... _Types>
    struct __strictest_alignment<_Tp, _Types...>
    {
      static const size_t _S_alignment =
        alignof(_Tp) > __strictest_alignment<_Types...>::_S_alignment
 ? alignof(_Tp) : __strictest_alignment<_Types...>::_S_alignment;
      static const size_t _S_size =
        sizeof(_Tp) > __strictest_alignment<_Types...>::_S_size
 ? sizeof(_Tp) : __strictest_alignment<_Types...>::_S_size;
    };
# 1963 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/type_traits" 3
  template <size_t _Len, typename... _Types>
    struct aligned_union
    {
    private:
      static_assert(sizeof...(_Types) != 0, "At least one type is required");

      using __strictest = __strictest_alignment<_Types...>;
      static const size_t _S_len = _Len > __strictest::_S_size
 ? _Len : __strictest::_S_size;
    public:

      static const size_t alignment_value = __strictest::_S_alignment;

      typedef typename aligned_storage<_S_len, alignment_value>::type type;
    };

  template <size_t _Len, typename... _Types>
    const size_t aligned_union<_Len, _Types...>::alignment_value;



  template<typename _Up,
    bool _IsArray = is_array<_Up>::value,
    bool _IsFunction = is_function<_Up>::value>
    struct __decay_selector;


  template<typename _Up>
    struct __decay_selector<_Up, false, false>
    { typedef typename remove_cv<_Up>::type __type; };

  template<typename _Up>
    struct __decay_selector<_Up, true, false>
    { typedef typename remove_extent<_Up>::type* __type; };

  template<typename _Up>
    struct __decay_selector<_Up, false, true>
    { typedef typename add_pointer<_Up>::type __type; };


  template<typename _Tp>
    class decay
    {
      typedef typename remove_reference<_Tp>::type __remove_type;

    public:
      typedef typename __decay_selector<__remove_type>::__type type;
    };

  template<typename _Tp>
    class reference_wrapper;


  template<typename _Tp>
    struct __strip_reference_wrapper
    {
      typedef _Tp __type;
    };

  template<typename _Tp>
    struct __strip_reference_wrapper<reference_wrapper<_Tp> >
    {
      typedef _Tp& __type;
    };

  template<typename _Tp>
    struct __decay_and_strip
    {
      typedef typename __strip_reference_wrapper<
 typename decay<_Tp>::type>::__type __type;
    };




  template<bool, typename _Tp = void>
    struct enable_if
    { };


  template<typename _Tp>
    struct enable_if<true, _Tp>
    { typedef _Tp type; };

  template<typename... _Cond>
    using _Require = typename enable_if<__and_<_Cond...>::value>::type;



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct conditional
    { typedef _Iftrue type; };


  template<typename _Iftrue, typename _Iffalse>
    struct conditional<false, _Iftrue, _Iffalse>
    { typedef _Iffalse type; };


  template<typename... _Tp>
    struct common_type;



  struct __do_common_type_impl
  {
    template<typename _Tp, typename _Up>
      static __success_type<typename decay<decltype
       (true ? std::declval<_Tp>()
        : std::declval<_Up>())>::type> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _Tp, typename _Up>
    struct __common_type_impl
    : private __do_common_type_impl
    {
      typedef decltype(_S_test<_Tp, _Up>(0)) type;
    };

  struct __do_member_type_wrapper
  {
    template<typename _Tp>
      static __success_type<typename _Tp::type> _S_test(int);

    template<typename>
      static __failure_type _S_test(...);
  };

  template<typename _Tp>
    struct __member_type_wrapper
    : private __do_member_type_wrapper
    {
      typedef decltype(_S_test<_Tp>(0)) type;
    };

  template<typename _CTp, typename... _Args>
    struct __expanded_common_type_wrapper
    {
      typedef common_type<typename _CTp::type, _Args...> type;
    };

  template<typename... _Args>
    struct __expanded_common_type_wrapper<__failure_type, _Args...>
    { typedef __failure_type type; };

  template<>
    struct common_type<>
    { };

  template<typename _Tp>
    struct common_type<_Tp>
    : common_type<_Tp, _Tp>
    { };

  template<typename _Tp, typename _Up>
    struct common_type<_Tp, _Up>
    : public __common_type_impl<_Tp, _Up>::type
    { };

  template<typename _Tp, typename _Up, typename... _Vp>
    struct common_type<_Tp, _Up, _Vp...>
    : public __expanded_common_type_wrapper<typename __member_type_wrapper<
               common_type<_Tp, _Up>>::type, _Vp...>::type
    { };

  template<typename _Tp, bool = is_enum<_Tp>::value>
    struct __underlying_type_impl
    {
      using type = __underlying_type(_Tp);
    };

  template<typename _Tp>
    struct __underlying_type_impl<_Tp, false>
    { };


  template<typename _Tp>
    struct underlying_type
    : public __underlying_type_impl<_Tp>
    { };

  template<typename _Tp>
    struct __declval_protector
    {
      static const bool __stop = false;
    };

  template<typename _Tp>
    auto declval() noexcept -> decltype(__declval<_Tp>(0))
    {
      static_assert(__declval_protector<_Tp>::__stop,
      "declval() must not be used!");
      return __declval<_Tp>(0);
    }


  template<typename _Tp>
    using __remove_cvref_t
     = typename remove_cv<typename remove_reference<_Tp>::type>::type;


  template<typename _Signature>
    class result_of;





  struct __invoke_memfun_ref { };
  struct __invoke_memfun_deref { };
  struct __invoke_memobj_ref { };
  struct __invoke_memobj_deref { };
  struct __invoke_other { };


  template<typename _Tp, typename _Tag>
    struct __result_of_success : __success_type<_Tp>
    { using __invoke_type = _Tag; };


  struct __result_of_memfun_ref_impl
  {
    template<typename _Fp, typename _Tp1, typename... _Args>
      static __result_of_success<decltype(
      (std::declval<_Tp1>().*std::declval<_Fp>())(std::declval<_Args>()...)
      ), __invoke_memfun_ref> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun_ref
    : private __result_of_memfun_ref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg, _Args...>(0)) type;
    };


  struct __result_of_memfun_deref_impl
  {
    template<typename _Fp, typename _Tp1, typename... _Args>
      static __result_of_success<decltype(
      ((*std::declval<_Tp1>()).*std::declval<_Fp>())(std::declval<_Args>()...)
      ), __invoke_memfun_deref> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun_deref
    : private __result_of_memfun_deref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg, _Args...>(0)) type;
    };


  struct __result_of_memobj_ref_impl
  {
    template<typename _Fp, typename _Tp1>
      static __result_of_success<decltype(
      std::declval<_Tp1>().*std::declval<_Fp>()
      ), __invoke_memobj_ref> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj_ref
    : private __result_of_memobj_ref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg>(0)) type;
    };


  struct __result_of_memobj_deref_impl
  {
    template<typename _Fp, typename _Tp1>
      static __result_of_success<decltype(
      (*std::declval<_Tp1>()).*std::declval<_Fp>()
      ), __invoke_memobj_deref> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj_deref
    : private __result_of_memobj_deref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg>(0)) type;
    };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj;

  template<typename _Res, typename _Class, typename _Arg>
    struct __result_of_memobj<_Res _Class::*, _Arg>
    {
      typedef __remove_cvref_t<_Arg> _Argval;
      typedef _Res _Class::* _MemPtr;
      typedef typename conditional<__or_<is_same<_Argval, _Class>,
        is_base_of<_Class, _Argval>>::value,
        __result_of_memobj_ref<_MemPtr, _Arg>,
        __result_of_memobj_deref<_MemPtr, _Arg>
      >::type::type type;
    };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun;

  template<typename _Res, typename _Class, typename _Arg, typename... _Args>
    struct __result_of_memfun<_Res _Class::*, _Arg, _Args...>
    {
      typedef typename remove_reference<_Arg>::type _Argval;
      typedef _Res _Class::* _MemPtr;
      typedef typename conditional<is_base_of<_Class, _Argval>::value,
        __result_of_memfun_ref<_MemPtr, _Arg, _Args...>,
        __result_of_memfun_deref<_MemPtr, _Arg, _Args...>
      >::type::type type;
    };






  template<typename _Tp, typename _Up = __remove_cvref_t<_Tp>>
    struct __inv_unwrap
    {
      using type = _Tp;
    };

  template<typename _Tp, typename _Up>
    struct __inv_unwrap<_Tp, reference_wrapper<_Up>>
    {
      using type = _Up&;
    };

  template<bool, bool, typename _Functor, typename... _ArgTypes>
    struct __result_of_impl
    {
      typedef __failure_type type;
    };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_impl<true, false, _MemPtr, _Arg>
    : public __result_of_memobj<typename decay<_MemPtr>::type,
    typename __inv_unwrap<_Arg>::type>
    { };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_impl<false, true, _MemPtr, _Arg, _Args...>
    : public __result_of_memfun<typename decay<_MemPtr>::type,
    typename __inv_unwrap<_Arg>::type, _Args...>
    { };


  struct __result_of_other_impl
  {
    template<typename _Fn, typename... _Args>
      static __result_of_success<decltype(
      std::declval<_Fn>()(std::declval<_Args>()...)
      ), __invoke_other> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _Functor, typename... _ArgTypes>
    struct __result_of_impl<false, false, _Functor, _ArgTypes...>
    : private __result_of_other_impl
    {
      typedef decltype(_S_test<_Functor, _ArgTypes...>(0)) type;
    };


  template<typename _Functor, typename... _ArgTypes>
    struct __invoke_result
    : public __result_of_impl<
        is_member_object_pointer<
          typename remove_reference<_Functor>::type
        >::value,
        is_member_function_pointer<
          typename remove_reference<_Functor>::type
        >::value,
 _Functor, _ArgTypes...
      >::type
    { };

  template<typename _Functor, typename... _ArgTypes>
    struct result_of<_Functor(_ArgTypes...)>
    : public __invoke_result<_Functor, _ArgTypes...>
    { };



  template<size_t _Len, size_t _Align =
     __alignof__(typename __aligned_storage_msa<_Len>::__type)>
    using aligned_storage_t = typename aligned_storage<_Len, _Align>::type;

  template <size_t _Len, typename... _Types>
    using aligned_union_t = typename aligned_union<_Len, _Types...>::type;


  template<typename _Tp>
    using decay_t = typename decay<_Tp>::type;


  template<bool _Cond, typename _Tp = void>
    using enable_if_t = typename enable_if<_Cond, _Tp>::type;


  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    using conditional_t = typename conditional<_Cond, _Iftrue, _Iffalse>::type;


  template<typename... _Tp>
    using common_type_t = typename common_type<_Tp...>::type;


  template<typename _Tp>
    using underlying_type_t = typename underlying_type<_Tp>::type;


  template<typename _Tp>
    using result_of_t = typename result_of<_Tp>::type;



  template<bool _Cond, typename _Tp = void>
    using __enable_if_t = typename enable_if<_Cond, _Tp>::type;


  template<typename...> using __void_t = void;




  template<typename...> using void_t = void;



  template<typename _Default, typename _AlwaysVoid,
    template<typename...> class _Op, typename... _Args>
    struct __detector
    {
      using value_t = false_type;
      using type = _Default;
    };


  template<typename _Default, template<typename...> class _Op,
     typename... _Args>
    struct __detector<_Default, __void_t<_Op<_Args...>>, _Op, _Args...>
    {
      using value_t = true_type;
      using type = _Op<_Args...>;
    };


  template<typename _Default, template<typename...> class _Op,
    typename... _Args>
    using __detected_or = __detector<_Default, void, _Op, _Args...>;


  template<typename _Default, template<typename...> class _Op,
    typename... _Args>
    using __detected_or_t
      = typename __detected_or<_Default, _Op, _Args...>::type;
# 2455 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/type_traits" 3
  template <typename _Tp>
    struct __is_swappable;

  template <typename _Tp>
    struct __is_nothrow_swappable;

  template<typename... _Elements>
    class tuple;

  template<typename>
    struct __is_tuple_like_impl : false_type
    { };

  template<typename... _Tps>
    struct __is_tuple_like_impl<tuple<_Tps...>> : true_type
    { };


  template<typename _Tp>
    struct __is_tuple_like
    : public __is_tuple_like_impl<__remove_cvref_t<_Tp>>::type
    { };

  template<typename _Tp>
    inline
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
         is_move_constructible<_Tp>,
         is_move_assignable<_Tp>>::value>::type
    swap(_Tp&, _Tp&)
    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
             is_nothrow_move_assignable<_Tp>>::value);

  template<typename _Tp, size_t _Nm>
    inline
    typename enable_if<__is_swappable<_Tp>::value>::type
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
    noexcept(__is_nothrow_swappable<_Tp>::value);

  namespace __swappable_details {
    using std::swap;

    struct __do_is_swappable_impl
    {
      template<typename _Tp, typename
               = decltype(swap(std::declval<_Tp&>(), std::declval<_Tp&>()))>
        static true_type __test(int);

      template<typename>
        static false_type __test(...);
    };

    struct __do_is_nothrow_swappable_impl
    {
      template<typename _Tp>
        static __bool_constant<
          noexcept(swap(std::declval<_Tp&>(), std::declval<_Tp&>()))
        > __test(int);

      template<typename>
        static false_type __test(...);
    };

  }

  template<typename _Tp>
    struct __is_swappable_impl
    : public __swappable_details::__do_is_swappable_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp>
    struct __is_nothrow_swappable_impl
    : public __swappable_details::__do_is_nothrow_swappable_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp>
    struct __is_swappable
    : public __is_swappable_impl<_Tp>::type
    { };

  template<typename _Tp>
    struct __is_nothrow_swappable
    : public __is_nothrow_swappable_impl<_Tp>::type
    { };






  template<typename _Tp>
    struct is_swappable
    : public __is_swappable_impl<_Tp>::type
    { };


  template<typename _Tp>
    struct is_nothrow_swappable
    : public __is_nothrow_swappable_impl<_Tp>::type
    { };



  template<typename _Tp>
                      constexpr bool is_swappable_v =
      is_swappable<_Tp>::value;


  template<typename _Tp>
                      constexpr bool is_nothrow_swappable_v =
      is_nothrow_swappable<_Tp>::value;


  namespace __swappable_with_details {
    using std::swap;

    struct __do_is_swappable_with_impl
    {
      template<typename _Tp, typename _Up, typename
               = decltype(swap(std::declval<_Tp>(), std::declval<_Up>())),
               typename
               = decltype(swap(std::declval<_Up>(), std::declval<_Tp>()))>
        static true_type __test(int);

      template<typename, typename>
        static false_type __test(...);
    };

    struct __do_is_nothrow_swappable_with_impl
    {
      template<typename _Tp, typename _Up>
        static __bool_constant<
          noexcept(swap(std::declval<_Tp>(), std::declval<_Up>()))
          &&
          noexcept(swap(std::declval<_Up>(), std::declval<_Tp>()))
        > __test(int);

      template<typename, typename>
        static false_type __test(...);
    };

  }

  template<typename _Tp, typename _Up>
    struct __is_swappable_with_impl
    : public __swappable_with_details::__do_is_swappable_with_impl
    {
      typedef decltype(__test<_Tp, _Up>(0)) type;
    };


  template<typename _Tp>
    struct __is_swappable_with_impl<_Tp&, _Tp&>
    : public __swappable_details::__do_is_swappable_impl
    {
      typedef decltype(__test<_Tp&>(0)) type;
    };

  template<typename _Tp, typename _Up>
    struct __is_nothrow_swappable_with_impl
    : public __swappable_with_details::__do_is_nothrow_swappable_with_impl
    {
      typedef decltype(__test<_Tp, _Up>(0)) type;
    };


  template<typename _Tp>
    struct __is_nothrow_swappable_with_impl<_Tp&, _Tp&>
    : public __swappable_details::__do_is_nothrow_swappable_impl
    {
      typedef decltype(__test<_Tp&>(0)) type;
    };


  template<typename _Tp, typename _Up>
    struct is_swappable_with
    : public __is_swappable_with_impl<_Tp, _Up>::type
    { };


  template<typename _Tp, typename _Up>
    struct is_nothrow_swappable_with
    : public __is_nothrow_swappable_with_impl<_Tp, _Up>::type
    { };



  template<typename _Tp, typename _Up>
                      constexpr bool is_swappable_with_v =
      is_swappable_with<_Tp, _Up>::value;


  template<typename _Tp, typename _Up>
                      constexpr bool is_nothrow_swappable_with_v =
      is_nothrow_swappable_with<_Tp, _Up>::value;







  template<typename _Result, typename _Ret,
    bool = is_void<_Ret>::value, typename = void>
    struct __is_invocable_impl : false_type { };


  template<typename _Result, typename _Ret>
    struct __is_invocable_impl<_Result, _Ret,
                                true,
          __void_t<typename _Result::type>>
    : true_type
    { };

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wctor-dtor-privacy"

  template<typename _Result, typename _Ret>
    struct __is_invocable_impl<_Result, _Ret,
                                false,
          __void_t<typename _Result::type>>
    {
    private:


      static typename _Result::type _S_get();

      template<typename _Tp>
 static void _S_conv(_Tp);


      template<typename _Tp, typename = decltype(_S_conv<_Tp>(_S_get()))>
 static true_type
 _S_test(int);

      template<typename _Tp>
 static false_type
 _S_test(...);

    public:
      using type = decltype(_S_test<_Ret>(1));
    };
#pragma GCC diagnostic pop

  template<typename _Fn, typename... _ArgTypes>
    struct __is_invocable
    : __is_invocable_impl<__invoke_result<_Fn, _ArgTypes...>, void>::type
    { };

  template<typename _Fn, typename _Tp, typename... _Args>
    constexpr bool __call_is_nt(__invoke_memfun_ref)
    {
      using _Up = typename __inv_unwrap<_Tp>::type;
      return noexcept((std::declval<_Up>().*std::declval<_Fn>())(
     std::declval<_Args>()...));
    }

  template<typename _Fn, typename _Tp, typename... _Args>
    constexpr bool __call_is_nt(__invoke_memfun_deref)
    {
      return noexcept(((*std::declval<_Tp>()).*std::declval<_Fn>())(
     std::declval<_Args>()...));
    }

  template<typename _Fn, typename _Tp>
    constexpr bool __call_is_nt(__invoke_memobj_ref)
    {
      using _Up = typename __inv_unwrap<_Tp>::type;
      return noexcept(std::declval<_Up>().*std::declval<_Fn>());
    }

  template<typename _Fn, typename _Tp>
    constexpr bool __call_is_nt(__invoke_memobj_deref)
    {
      return noexcept((*std::declval<_Tp>()).*std::declval<_Fn>());
    }

  template<typename _Fn, typename... _Args>
    constexpr bool __call_is_nt(__invoke_other)
    {
      return noexcept(std::declval<_Fn>()(std::declval<_Args>()...));
    }

  template<typename _Result, typename _Fn, typename... _Args>
    struct __call_is_nothrow
    : __bool_constant<
 std::__call_is_nt<_Fn, _Args...>(typename _Result::__invoke_type{})
      >
    { };

  template<typename _Fn, typename... _Args>
    using __call_is_nothrow_
      = __call_is_nothrow<__invoke_result<_Fn, _Args...>, _Fn, _Args...>;


  template<typename _Fn, typename... _Args>
    struct __is_nothrow_invocable
    : __and_<__is_invocable<_Fn, _Args...>,
             __call_is_nothrow_<_Fn, _Args...>>::type
    { };

  struct __nonesuch {
    __nonesuch() = delete;
    ~__nonesuch() = delete;
    __nonesuch(__nonesuch const&) = delete;
    void operator=(__nonesuch const&) = delete;
  };
# 3097 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/type_traits" 3
}
# 56 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/move.h" 2 3

namespace std
{
# 72 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/move.h" 3
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    { return static_cast<_Tp&&>(__t); }







  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type&& __t) noexcept
    {
      static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
      " substituting _Tp is an lvalue reference type");
      return static_cast<_Tp&&>(__t);
    }






  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }


  template<typename _Tp>
    struct __move_if_noexcept_cond
    : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,
                    is_copy_constructible<_Tp>>::type { };
# 116 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/move.h" 3
  template<typename _Tp>
    constexpr typename
    conditional<__move_if_noexcept_cond<_Tp>::value, const _Tp&, _Tp&&>::type
    move_if_noexcept(_Tp& __x) noexcept
    { return std::move(__x); }
# 136 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/move.h" 3
  template<typename _Tp>
    inline _Tp*
    addressof(_Tp& __r) noexcept
    { return std::__addressof(__r); }



  template<typename _Tp>
    const _Tp* addressof(const _Tp&&) = delete;


  template <typename _Tp, typename _Up = _Tp>
    inline _Tp
    __exchange(_Tp& __obj, _Up&& __new_val)
    {
      _Tp __old_val = std::move(__obj);
      __obj = std::forward<_Up>(__new_val);
      return __old_val;
    }
# 176 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/move.h" 3
  template<typename _Tp>
    inline

    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
         is_move_constructible<_Tp>,
         is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
             is_nothrow_move_assignable<_Tp>>::value)




    {



      _Tp __tmp = std::move(__a);
      __a = std::move(__b);
      __b = std::move(__tmp);
    }




  template<typename _Tp, size_t _Nm>
    inline

    typename enable_if<__is_swappable<_Tp>::value>::type
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
    noexcept(__is_nothrow_swappable<_Tp>::value)




    {
      for (size_t __n = 0; __n < _Nm; ++__n)
 swap(__a[__n], __b[__n]);
    }



}
# 44 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/exception_ptr.h" 2 3


extern "C++" {

namespace std
{
  class type_info;





  namespace __exception_ptr
  {
    class exception_ptr;
  }

  using __exception_ptr::exception_ptr;





  exception_ptr current_exception() noexcept;

  template<typename _Ex>
  exception_ptr make_exception_ptr(_Ex) noexcept;


  void rethrow_exception(exception_ptr) __attribute__ ((__noreturn__));

  namespace __exception_ptr
  {
    using std::rethrow_exception;





    class exception_ptr
    {
      void* _M_exception_object;

      explicit exception_ptr(void* __e) noexcept;

      void _M_addref() noexcept;
      void _M_release() noexcept;

      void *_M_get() const noexcept __attribute__ ((__pure__));

      friend exception_ptr std::current_exception() noexcept;
      friend void std::rethrow_exception(exception_ptr);
      template<typename _Ex>
      friend exception_ptr std::make_exception_ptr(_Ex) noexcept;

    public:
      exception_ptr() noexcept;

      exception_ptr(const exception_ptr&) noexcept;


      exception_ptr(nullptr_t) noexcept
      : _M_exception_object(0)
      { }

      exception_ptr(exception_ptr&& __o) noexcept
      : _M_exception_object(__o._M_exception_object)
      { __o._M_exception_object = 0; }
# 121 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/exception_ptr.h" 3
      exception_ptr&
      operator=(const exception_ptr&) noexcept;


      exception_ptr&
      operator=(exception_ptr&& __o) noexcept
      {
        exception_ptr(static_cast<exception_ptr&&>(__o)).swap(*this);
        return *this;
      }


      ~exception_ptr() noexcept;

      void
      swap(exception_ptr&) noexcept;
# 148 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/exception_ptr.h" 3
      explicit operator bool() const
      { return _M_exception_object; }


      friend bool
      operator==(const exception_ptr&, const exception_ptr&)
 noexcept __attribute__ ((__pure__));

      const class std::type_info*
      __cxa_exception_type() const noexcept
 __attribute__ ((__pure__));
    };

    bool
    operator==(const exception_ptr&, const exception_ptr&)
      noexcept __attribute__ ((__pure__));

    bool
    operator!=(const exception_ptr&, const exception_ptr&)
      noexcept __attribute__ ((__pure__));

    inline void
    swap(exception_ptr& __lhs, exception_ptr& __rhs)
    { __lhs.swap(__rhs); }

    template<typename _Ex>
      inline void
      __dest_thunk(void* __x)
      { static_cast<_Ex*>(__x)->~_Ex(); }

  }


  template<typename _Ex>
    exception_ptr
    make_exception_ptr(_Ex __ex) noexcept
    {


      using _Ex2 = typename remove_reference<_Ex>::type;
      void* __e = __cxxabiv1::__cxa_allocate_exception(sizeof(_Ex));
      (void) __cxxabiv1::__cxa_init_primary_exception(
   __e, const_cast<std::type_info*>(&typeid(_Ex)),
   __exception_ptr::__dest_thunk<_Ex2>);
      try
 {
   ::new (__e) _Ex2(std::forward<_Ex>(__ex));
          return exception_ptr(__e);
 }
      catch(...)
 {
   __cxxabiv1::__cxa_free_exception(__e);
   return current_exception();
 }
# 214 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/exception_ptr.h" 3
    }


}

}

#pragma GCC visibility pop
# 144 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/exception" 2 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/nested_exception.h" 1 3
# 33 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/nested_exception.h" 3
#pragma GCC visibility push(default)








extern "C++" {

namespace std
{






  class nested_exception
  {
    exception_ptr _M_ptr;

  public:
    nested_exception() noexcept : _M_ptr(current_exception()) { }

    nested_exception(const nested_exception&) noexcept = default;

    nested_exception& operator=(const nested_exception&) noexcept = default;

    virtual ~nested_exception() noexcept;

    [[noreturn]]
    void
    rethrow_nested() const
    {
      if (_M_ptr)
 rethrow_exception(_M_ptr);
      std::terminate();
    }

    exception_ptr
    nested_ptr() const noexcept
    { return _M_ptr; }
  };

  template<typename _Except>
    struct _Nested_exception : public _Except, public nested_exception
    {
      explicit _Nested_exception(const _Except& __ex)
      : _Except(__ex)
      { }

      explicit _Nested_exception(_Except&& __ex)
      : _Except(static_cast<_Except&&>(__ex))
      { }
    };




  template<typename _Tp>
    [[noreturn]]
    inline void
    __throw_with_nested_impl(_Tp&& __t, true_type)
    {
      using _Up = typename remove_reference<_Tp>::type;
      throw _Nested_exception<_Up>{std::forward<_Tp>(__t)};
    }

  template<typename _Tp>
    [[noreturn]]
    inline void
    __throw_with_nested_impl(_Tp&& __t, false_type)
    { throw std::forward<_Tp>(__t); }



  template<typename _Tp>
    [[noreturn]]
    inline void
    throw_with_nested(_Tp&& __t)
    {
      using _Up = typename decay<_Tp>::type;
      using _CopyConstructible
 = __and_<is_copy_constructible<_Up>, is_move_constructible<_Up>>;
      static_assert(_CopyConstructible::value,
   "throw_with_nested argument must be CopyConstructible");
      using __nest = __and_<is_class<_Up>, __bool_constant<!__is_final(_Up)>,
       __not_<is_base_of<nested_exception, _Up>>>;
      std::__throw_with_nested_impl(std::forward<_Tp>(__t), __nest{});
    }


  template<typename _Tp>
    using __rethrow_if_nested_cond = typename enable_if<
      __and_<is_polymorphic<_Tp>,
      __or_<__not_<is_base_of<nested_exception, _Tp>>,
     is_convertible<_Tp*, nested_exception*>>>::value
    >::type;


  template<typename _Ex>
    inline __rethrow_if_nested_cond<_Ex>
    __rethrow_if_nested_impl(const _Ex* __ptr)
    {
      if (auto __ne_ptr = dynamic_cast<const nested_exception*>(__ptr))
 __ne_ptr->rethrow_nested();
    }


  inline void
  __rethrow_if_nested_impl(const void*)
  { }


  template<typename _Ex>
    inline void
    rethrow_if_nested(const _Ex& __ex)
    { std::__rethrow_if_nested_impl(std::__addressof(__ex)); }


}

}



#pragma GCC visibility pop
# 145 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/exception" 2 3
# 40 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ios" 2 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/char_traits.h" 1 3
# 38 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/char_traits.h" 3

# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_algobase.h" 1 3
# 60 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_algobase.h" 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/functexcept.h" 1 3
# 42 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/functexcept.h" 3
namespace std
{



  void
  __throw_bad_exception(void) __attribute__((__noreturn__));


  void
  __throw_bad_alloc(void) __attribute__((__noreturn__));


  void
  __throw_bad_cast(void) __attribute__((__noreturn__));

  void
  __throw_bad_typeid(void) __attribute__((__noreturn__));


  void
  __throw_logic_error(const char*) __attribute__((__noreturn__));

  void
  __throw_domain_error(const char*) __attribute__((__noreturn__));

  void
  __throw_invalid_argument(const char*) __attribute__((__noreturn__));

  void
  __throw_length_error(const char*) __attribute__((__noreturn__));

  void
  __throw_out_of_range(const char*) __attribute__((__noreturn__));

  void
  __throw_out_of_range_fmt(const char*, ...) __attribute__((__noreturn__))
    __attribute__((__format__(__gnu_printf__, 1, 2)));

  void
  __throw_runtime_error(const char*) __attribute__((__noreturn__));

  void
  __throw_range_error(const char*) __attribute__((__noreturn__));

  void
  __throw_overflow_error(const char*) __attribute__((__noreturn__));

  void
  __throw_underflow_error(const char*) __attribute__((__noreturn__));


  void
  __throw_ios_failure(const char*) __attribute__((__noreturn__));

  void
  __throw_ios_failure(const char*, int) __attribute__((__noreturn__));


  void
  __throw_system_error(int) __attribute__((__noreturn__));


  void
  __throw_future_error(int) __attribute__((__noreturn__));


  void
  __throw_bad_function_call() __attribute__((__noreturn__));


}
# 61 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_algobase.h" 2 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/cpp_type_traits.h" 1 3
# 36 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/cpp_type_traits.h" 3
# 67 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/cpp_type_traits.h" 3
extern "C++" {

namespace std
{


  struct __true_type { };
  struct __false_type { };

  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };



  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };


  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_void
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_void<void>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };





  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 184 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/cpp_type_traits.h" 3
  template<>
    struct __is_integer<char16_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char32_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 270 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/cpp_type_traits.h" 3
template<> struct __is_integer<__int128> { enum { __value = 1 }; typedef __true_type __type; }; template<> struct __is_integer<unsigned __int128> { enum { __value = 1 }; typedef __true_type __type; };
# 287 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/cpp_type_traits.h" 3
  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_pointer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __is_pointer<_Tp*>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };




  template<typename _Tp>
    struct __is_scalar
    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
    { };




  template<typename _Tp>
    struct __is_char
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_char<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_char<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_byte
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_byte<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 417 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/cpp_type_traits.h" 3
  template<typename _Tp>
    struct __is_move_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };



  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
    { return __it; }


}
}
# 62 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_algobase.h" 2 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ext/type_traits.h" 1 3
# 33 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ext/type_traits.h" 3




extern "C++" {

namespace __gnu_cxx
{



  template<bool, typename>
    struct __enable_if
    { };

  template<typename _Tp>
    struct __enable_if<true, _Tp>
    { typedef _Tp __type; };



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct __conditional_type
    { typedef _Iftrue __type; };

  template<typename _Iftrue, typename _Iffalse>
    struct __conditional_type<false, _Iftrue, _Iffalse>
    { typedef _Iffalse __type; };



  template<typename _Tp>
    struct __add_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __add_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __add_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __add_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __add_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __add_unsigned<bool>;

  template<>
    struct __add_unsigned<wchar_t>;



  template<typename _Tp>
    struct __remove_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __remove_unsigned<char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned short>
    { typedef short __type; };

  template<>
    struct __remove_unsigned<unsigned int>
    { typedef int __type; };

  template<>
    struct __remove_unsigned<unsigned long>
    { typedef long __type; };

  template<>
    struct __remove_unsigned<unsigned long long>
    { typedef long long __type; };


  template<>
    struct __remove_unsigned<bool>;

  template<>
    struct __remove_unsigned<wchar_t>;



  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    inline bool
    __is_null_pointer(_Type)
    { return false; }


  inline bool
  __is_null_pointer(std::nullptr_t)
  { return true; }




  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>
    struct __promote
    { typedef double __type; };




  template<typename _Tp>
    struct __promote<_Tp, false>
    { };

  template<>
    struct __promote<long double>
    { typedef long double __type; };

  template<>
    struct __promote<double>
    { typedef double __type; };

  template<>
    struct __promote<float>
    { typedef float __type; };






  template<typename _Tp, typename _Up,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type>
    struct __promote_2
    {
      typedef __typeof__(_Tp2() + _Up2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type>
    struct __promote_3
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp, typename _Wp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type,
           typename _Wp2 = typename __promote<_Wp>::__type>
    struct __promote_4
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;
    };


}
}
# 63 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_algobase.h" 2 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ext/numeric_traits.h" 1 3
# 33 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ext/numeric_traits.h" 3




namespace __gnu_cxx
{
# 50 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ext/numeric_traits.h" 3
  template<typename _Tp>
    struct __is_integer_nonstrict
    : public std::__is_integer<_Tp>
    {
      using std::__is_integer<_Tp>::__value;


      enum { __width = __value ? sizeof(_Tp) * 8 : 0 };
    };

  template<typename _Value>
    struct __numeric_traits_integer
    {

      static_assert(__is_integer_nonstrict<_Value>::__value,
      "invalid specialization");




      static const bool __is_signed = (_Value)(-1) < 0;
      static const int __digits
 = __is_integer_nonstrict<_Value>::__width - __is_signed;


      static const _Value __max = __is_signed
 ? (((((_Value)1 << (__digits - 1)) - 1) << 1) + 1)
 : ~(_Value)0;
      static const _Value __min = __is_signed ? -__max - 1 : (_Value)0;
    };

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__min;

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__max;

  template<typename _Value>
    const bool __numeric_traits_integer<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_integer<_Value>::__digits;
# 135 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ext/numeric_traits.h" 3
  template<typename _Tp>
    using __int_traits = __numeric_traits_integer<_Tp>;
# 155 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_floating
    {

      static const int __max_digits10 = (2 + (std::__are_same<_Value, float>::__value ? 24 : std::__are_same<_Value, double>::__value ? 53 : 64) * 643L / 2136);


      static const bool __is_signed = true;
      static const int __digits10 = (std::__are_same<_Value, float>::__value ? 6 : std::__are_same<_Value, double>::__value ? 15 : 18);
      static const int __max_exponent10 = (std::__are_same<_Value, float>::__value ? 38 : std::__are_same<_Value, double>::__value ? 308 : 4932);
    };

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_digits10;

  template<typename _Value>
    const bool __numeric_traits_floating<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__digits10;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_exponent10;

  template<typename _Value>
    struct __numeric_traits
    : public __conditional_type<std::__is_integer<_Value>::__value,
    __numeric_traits_integer<_Value>,
    __numeric_traits_floating<_Value> >::__type
    { };


}
# 64 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_algobase.h" 2 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_pair.h" 1 3
# 65 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_pair.h" 3
namespace std
{
# 76 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_pair.h" 3
  struct piecewise_construct_t { explicit piecewise_construct_t() = default; };


                    constexpr piecewise_construct_t piecewise_construct =
    piecewise_construct_t();


  template<typename...>
    class tuple;

  template<std::size_t...>
    struct _Index_tuple;






  template <bool, typename _T1, typename _T2>
    struct _PCC
    {
      template <typename _U1, typename _U2>
      static constexpr bool _ConstructiblePair()
      {
 return __and_<is_constructible<_T1, const _U1&>,
        is_constructible<_T2, const _U2&>>::value;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyConvertiblePair()
      {
 return __and_<is_convertible<const _U1&, _T1>,
        is_convertible<const _U2&, _T2>>::value;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _MoveConstructiblePair()
      {
 return __and_<is_constructible<_T1, _U1&&>,
        is_constructible<_T2, _U2&&>>::value;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyMoveConvertiblePair()
      {
 return __and_<is_convertible<_U1&&, _T1>,
        is_convertible<_U2&&, _T2>>::value;
      }

      template <bool __implicit, typename _U1, typename _U2>
      static constexpr bool _CopyMovePair()
      {
 using __do_converts = __and_<is_convertible<const _U1&, _T1>,
      is_convertible<_U2&&, _T2>>;
 using __converts = typename conditional<__implicit,
           __do_converts,
           __not_<__do_converts>>::type;
 return __and_<is_constructible<_T1, const _U1&>,
        is_constructible<_T2, _U2&&>,
        __converts
        >::value;
      }

      template <bool __implicit, typename _U1, typename _U2>
      static constexpr bool _MoveCopyPair()
      {
 using __do_converts = __and_<is_convertible<_U1&&, _T1>,
      is_convertible<const _U2&, _T2>>;
 using __converts = typename conditional<__implicit,
           __do_converts,
           __not_<__do_converts>>::type;
 return __and_<is_constructible<_T1, _U1&&>,
        is_constructible<_T2, const _U2&&>,
        __converts
        >::value;
      }
  };

  template <typename _T1, typename _T2>
    struct _PCC<false, _T1, _T2>
    {
      template <typename _U1, typename _U2>
      static constexpr bool _ConstructiblePair()
      {
 return false;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyConvertiblePair()
      {
 return false;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _MoveConstructiblePair()
      {
 return false;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyMoveConvertiblePair()
      {
 return false;
      }
  };




  struct __nonesuch_no_braces : std::__nonesuch {
    explicit __nonesuch_no_braces(const __nonesuch&) = delete;
  };


  template<typename _U1, typename _U2> class __pair_base
  {

    template<typename _T1, typename _T2> friend struct pair;
    __pair_base() = default;
    ~__pair_base() = default;
    __pair_base(const __pair_base&) = default;
    __pair_base& operator=(const __pair_base&) = delete;

  };







  template<typename _T1, typename _T2>
    struct pair
    : private __pair_base<_T1, _T2>
    {
      typedef _T1 first_type;
      typedef _T2 second_type;

      _T1 first;
      _T2 second;






      template <typename _U1 = _T1,
                typename _U2 = _T2,
                typename enable_if<__and_<
                                     __is_implicitly_default_constructible<_U1>,
                                     __is_implicitly_default_constructible<_U2>>
                                   ::value, bool>::type = true>

      constexpr pair()
      : first(), second() { }


      template <typename _U1 = _T1,
                typename _U2 = _T2,
                typename enable_if<__and_<
                       is_default_constructible<_U1>,
                       is_default_constructible<_U2>,
                       __not_<
                         __and_<__is_implicitly_default_constructible<_U1>,
                                __is_implicitly_default_constructible<_U2>>>>
                                   ::value, bool>::type = false>
      explicit constexpr pair()
      : first(), second() { }
# 252 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_pair.h" 3
      using _PCCP = _PCC<true, _T1, _T2>;

      template<typename _U1 = _T1, typename _U2=_T2, typename
        enable_if<_PCCP::template
      _ConstructiblePair<_U1, _U2>()
                  && _PCCP::template
      _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
      constexpr pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }

       template<typename _U1 = _T1, typename _U2=_T2, typename
  enable_if<_PCCP::template
       _ConstructiblePair<_U1, _U2>()
                   && !_PCCP::template
       _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
      explicit constexpr pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }
# 280 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_pair.h" 3
      template <typename _U1, typename _U2>
        using _PCCFP = _PCC<!is_same<_T1, _U1>::value
       || !is_same<_T2, _U2>::value,
       _T1, _T2>;

      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _ConstructiblePair<_U1, _U2>()
                  && _PCCFP<_U1, _U2>::template
      _ImplicitlyConvertiblePair<_U1, _U2>(),
     bool>::type=true>
        constexpr pair(const pair<_U1, _U2>& __p)
        : first(__p.first), second(__p.second) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _ConstructiblePair<_U1, _U2>()
    && !_PCCFP<_U1, _U2>::template
      _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
 explicit constexpr pair(const pair<_U1, _U2>& __p)
 : first(__p.first), second(__p.second) { }

      constexpr pair(const pair&) = default;
      constexpr pair(pair&&) = default;


      template<typename _U1, typename
        enable_if<_PCCP::template
      _MoveCopyPair<true, _U1, _T2>(),
                         bool>::type=true>
       constexpr pair(_U1&& __x, const _T2& __y)
       : first(std::forward<_U1>(__x)), second(__y) { }

      template<typename _U1, typename
        enable_if<_PCCP::template
      _MoveCopyPair<false, _U1, _T2>(),
                         bool>::type=false>
       explicit constexpr pair(_U1&& __x, const _T2& __y)
       : first(std::forward<_U1>(__x)), second(__y) { }

      template<typename _U2, typename
        enable_if<_PCCP::template
      _CopyMovePair<true, _T1, _U2>(),
                         bool>::type=true>
       constexpr pair(const _T1& __x, _U2&& __y)
       : first(__x), second(std::forward<_U2>(__y)) { }

      template<typename _U2, typename
        enable_if<_PCCP::template
      _CopyMovePair<false, _T1, _U2>(),
                         bool>::type=false>
       explicit pair(const _T1& __x, _U2&& __y)
       : first(__x), second(std::forward<_U2>(__y)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCP::template
      _MoveConstructiblePair<_U1, _U2>()
     && _PCCP::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
 constexpr pair(_U1&& __x, _U2&& __y)
 : first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCP::template
      _MoveConstructiblePair<_U1, _U2>()
     && !_PCCP::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
 explicit constexpr pair(_U1&& __x, _U2&& __y)
 : first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }


      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _MoveConstructiblePair<_U1, _U2>()
     && _PCCFP<_U1, _U2>::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
 constexpr pair(pair<_U1, _U2>&& __p)
 : first(std::forward<_U1>(__p.first)),
   second(std::forward<_U2>(__p.second)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _MoveConstructiblePair<_U1, _U2>()
     && !_PCCFP<_U1, _U2>::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
 explicit constexpr pair(pair<_U1, _U2>&& __p)
 : first(std::forward<_U1>(__p.first)),
   second(std::forward<_U2>(__p.second)) { }

      template<typename... _Args1, typename... _Args2>
        pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);

      pair&
      operator=(typename conditional<
  __and_<is_copy_assignable<_T1>,
         is_copy_assignable<_T2>>::value,
  const pair&, const __nonesuch_no_braces&>::type __p)
      {
 first = __p.first;
 second = __p.second;
 return *this;
      }

      pair&
      operator=(typename conditional<
  __and_<is_move_assignable<_T1>,
         is_move_assignable<_T2>>::value,
  pair&&, __nonesuch_no_braces&&>::type __p)
      noexcept(__and_<is_nothrow_move_assignable<_T1>,
        is_nothrow_move_assignable<_T2>>::value)
      {
 first = std::forward<first_type>(__p.first);
 second = std::forward<second_type>(__p.second);
 return *this;
      }

      template<typename _U1, typename _U2>
      typename enable_if<__and_<is_assignable<_T1&, const _U1&>,
    is_assignable<_T2&, const _U2&>>::value,
    pair&>::type
 operator=(const pair<_U1, _U2>& __p)
 {
   first = __p.first;
   second = __p.second;
   return *this;
 }

      template<typename _U1, typename _U2>
      typename enable_if<__and_<is_assignable<_T1&, _U1&&>,
    is_assignable<_T2&, _U2&&>>::value,
    pair&>::type
 operator=(pair<_U1, _U2>&& __p)
 {
   first = std::forward<_U1>(__p.first);
   second = std::forward<_U2>(__p.second);
   return *this;
 }

      void
      swap(pair& __p)
      noexcept(__and_<__is_nothrow_swappable<_T1>,
                      __is_nothrow_swappable<_T2>>::value)
      {
 using std::swap;
 swap(first, __p.first);
 swap(second, __p.second);
      }

    private:
      template<typename... _Args1, std::size_t... _Indexes1,
               typename... _Args2, std::size_t... _Indexes2>
        pair(tuple<_Args1...>&, tuple<_Args2...>&,
             _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>);

    };






  template<typename _T1, typename _T2>
    inline constexpr bool
    operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first == __y.first && __x.second == __y.second; }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first < __y.first
      || (!(__y.first < __x.first) && __x.second < __y.second); }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x == __y); }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __y < __x; }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__y < __x); }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x < __y); }





  template<typename _T1, typename _T2>
    inline


    typename enable_if<__and_<__is_swappable<_T1>,
                              __is_swappable<_T2>>::value>::type



    swap(pair<_T1, _T2>& __x, pair<_T1, _T2>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }


  template<typename _T1, typename _T2>
    typename enable_if<!__and_<__is_swappable<_T1>,
          __is_swappable<_T2>>::value>::type
    swap(pair<_T1, _T2>&, pair<_T1, _T2>&) = delete;
# 521 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_pair.h" 3
  template<typename _T1, typename _T2>
    constexpr pair<typename __decay_and_strip<_T1>::__type,
                   typename __decay_and_strip<_T2>::__type>
    make_pair(_T1&& __x, _T2&& __y)
    {
      typedef typename __decay_and_strip<_T1>::__type __ds_type1;
      typedef typename __decay_and_strip<_T2>::__type __ds_type2;
      typedef pair<__ds_type1, __ds_type2> __pair_type;
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
    }
# 541 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_pair.h" 3
}
# 65 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_algobase.h" 2 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_iterator_base_types.h" 1 3
# 63 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_iterator_base_types.h" 3







namespace std
{
# 89 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_iterator_base_types.h" 3
  struct input_iterator_tag { };


  struct output_iterator_tag { };


  struct forward_iterator_tag : public input_iterator_tag { };



  struct bidirectional_iterator_tag : public forward_iterator_tag { };



  struct random_access_iterator_tag : public bidirectional_iterator_tag { };
# 116 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_iterator_base_types.h" 3
  template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,
           typename _Pointer = _Tp*, typename _Reference = _Tp&>
    struct iterator
    {

      typedef _Category iterator_category;

      typedef _Tp value_type;

      typedef _Distance difference_type;

      typedef _Pointer pointer;

      typedef _Reference reference;
    };
# 143 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_iterator_base_types.h" 3
  template<typename _Iterator, typename = __void_t<>>
    struct __iterator_traits { };

  template<typename _Iterator>
    struct __iterator_traits<_Iterator,
        __void_t<typename _Iterator::iterator_category,
          typename _Iterator::value_type,
          typename _Iterator::difference_type,
          typename _Iterator::pointer,
          typename _Iterator::reference>>
    {
      typedef typename _Iterator::iterator_category iterator_category;
      typedef typename _Iterator::value_type value_type;
      typedef typename _Iterator::difference_type difference_type;
      typedef typename _Iterator::pointer pointer;
      typedef typename _Iterator::reference reference;
    };

  template<typename _Iterator>
    struct iterator_traits
    : public __iterator_traits<_Iterator> { };
# 177 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_iterator_base_types.h" 3
  template<typename _Tp>
    struct iterator_traits<_Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef _Tp& reference;
    };


  template<typename _Tp>
    struct iterator_traits<const _Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef const _Tp* pointer;
      typedef const _Tp& reference;
    };





  template<typename _Iter>
    inline constexpr
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    { return typename iterator_traits<_Iter>::iterator_category(); }
# 231 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_iterator_base_types.h" 3
  template<typename _InIter>
    using _RequireInputIter = typename
      enable_if<is_convertible<typename
  iterator_traits<_InIter>::iterator_category,
          input_iterator_tag>::value>::type;



}
# 66 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_algobase.h" 2 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_iterator_base_funcs.h" 1 3
# 63 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_iterator_base_funcs.h" 3


# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/debug/assertions.h" 1 3
# 66 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_iterator_base_funcs.h" 2 3

namespace std
{




  template <typename> struct _List_iterator;
  template <typename> struct _List_const_iterator;


  template<typename _InputIterator>
    inline constexpr
    typename iterator_traits<_InputIterator>::difference_type
    __distance(_InputIterator __first, _InputIterator __last,
               input_iterator_tag)
    {



      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      while (__first != __last)
 {
   ++__first;
   ++__n;
 }
      return __n;
    }

  template<typename _RandomAccessIterator>
    inline constexpr
    typename iterator_traits<_RandomAccessIterator>::difference_type
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
               random_access_iterator_tag)
    {



      return __last - __first;
    }



  template<typename _Tp>
    ptrdiff_t
    __distance(std::_List_iterator<_Tp>,
        std::_List_iterator<_Tp>,
        input_iterator_tag);

  template<typename _Tp>
    ptrdiff_t
    __distance(std::_List_const_iterator<_Tp>,
        std::_List_const_iterator<_Tp>,
        input_iterator_tag);
# 135 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator>
    inline
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
    {

      return std::__distance(__first, __last,
        std::__iterator_category(__first));
    }

  template<typename _InputIterator, typename _Distance>
    inline constexpr void
    __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)
    {


                                ;
      while (__n--)
 ++__i;
    }

  template<typename _BidirectionalIterator, typename _Distance>
    inline constexpr void
    __advance(_BidirectionalIterator& __i, _Distance __n,
       bidirectional_iterator_tag)
    {



      if (__n > 0)
        while (__n--)
   ++__i;
      else
        while (__n++)
   --__i;
    }

  template<typename _RandomAccessIterator, typename _Distance>
    inline constexpr void
    __advance(_RandomAccessIterator& __i, _Distance __n,
              random_access_iterator_tag)
    {



      if (__builtin_constant_p(__n) && __n == 1)
 ++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
 --__i;
      else
 __i += __n;
    }
# 200 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator, typename _Distance>
    inline void
    advance(_InputIterator& __i, _Distance __n)
    {

      typename iterator_traits<_InputIterator>::difference_type __d = __n;
      std::__advance(__i, __d, std::__iterator_category(__i));
    }



  template<typename _InputIterator>
    inline _InputIterator
    next(_InputIterator __x, typename
  iterator_traits<_InputIterator>::difference_type __n = 1)
    {


      std::advance(__x, __n);
      return __x;
    }

  template<typename _BidirectionalIterator>
    inline _BidirectionalIterator
    prev(_BidirectionalIterator __x, typename
  iterator_traits<_BidirectionalIterator>::difference_type __n = 1)
    {



      std::advance(__x, -__n);
      return __x;
    }




}
# 67 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_algobase.h" 2 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_iterator.h" 1 3
# 66 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_iterator.h" 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/ptr_traits.h" 1 3
# 42 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/ptr_traits.h" 3
namespace std
{


  class __undefined;


  template<typename _Tp>
    struct __get_first_arg
    { using type = __undefined; };

  template<template<typename, typename...> class _Template, typename _Tp,
           typename... _Types>
    struct __get_first_arg<_Template<_Tp, _Types...>>
    { using type = _Tp; };

  template<typename _Tp>
    using __get_first_arg_t = typename __get_first_arg<_Tp>::type;


  template<typename _Tp, typename _Up>
    struct __replace_first_arg
    { };

  template<template<typename, typename...> class _Template, typename _Up,
           typename _Tp, typename... _Types>
    struct __replace_first_arg<_Template<_Tp, _Types...>, _Up>
    { using type = _Template<_Up, _Types...>; };

  template<typename _Tp, typename _Up>
    using __replace_first_arg_t = typename __replace_first_arg<_Tp, _Up>::type;

  template<typename _Tp>
    using __make_not_void
      = typename conditional<is_void<_Tp>::value, __undefined, _Tp>::type;





  template<typename _Ptr>
    struct pointer_traits
    {
    private:
      template<typename _Tp>
 using __element_type = typename _Tp::element_type;

      template<typename _Tp>
 using __difference_type = typename _Tp::difference_type;

      template<typename _Tp, typename _Up, typename = void>
 struct __rebind : __replace_first_arg<_Tp, _Up> { };

      template<typename _Tp, typename _Up>
 struct __rebind<_Tp, _Up, __void_t<typename _Tp::template rebind<_Up>>>
 { using type = typename _Tp::template rebind<_Up>; };

    public:

      using pointer = _Ptr;


      using element_type
 = __detected_or_t<__get_first_arg_t<_Ptr>, __element_type, _Ptr>;


      using difference_type
 = __detected_or_t<ptrdiff_t, __difference_type, _Ptr>;


      template<typename _Up>
        using rebind = typename __rebind<_Ptr, _Up>::type;

      static _Ptr
      pointer_to(__make_not_void<element_type>& __e)
      { return _Ptr::pointer_to(__e); }

      static_assert(!is_same<element_type, __undefined>::value,
   "pointer type defines element_type or is like SomePointer<T, Args>");
    };





  template<typename _Tp>
    struct pointer_traits<_Tp*>
    {

      typedef _Tp* pointer;

      typedef _Tp element_type;

      typedef ptrdiff_t difference_type;

      template<typename _Up>
        using rebind = _Up*;






      static pointer
      pointer_to(__make_not_void<element_type>& __r) noexcept
      { return std::addressof(__r); }
    };


  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;

  template<typename _Tp>
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
    {
      static_assert(!std::is_function<_Tp>::value, "not a function pointer");
      return __ptr;
    }


  template<typename _Ptr>
    constexpr typename std::pointer_traits<_Ptr>::element_type*
    __to_address(const _Ptr& __ptr)
    { return std::__to_address(__ptr.operator->()); }
# 211 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/ptr_traits.h" 3
}
# 67 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_iterator.h" 2 3
# 76 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_iterator.h" 3
namespace std
{
# 104 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_iterator.h" 3
  template<typename _Iterator>
    class reverse_iterator
    : public iterator<typename iterator_traits<_Iterator>::iterator_category,
        typename iterator_traits<_Iterator>::value_type,
        typename iterator_traits<_Iterator>::difference_type,
        typename iterator_traits<_Iterator>::pointer,
                      typename iterator_traits<_Iterator>::reference>
    {
    protected:
      _Iterator current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::pointer pointer;
      typedef typename __traits_type::reference reference;
# 131 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_iterator.h" 3
      reverse_iterator() : current() { }




      explicit
      reverse_iterator(iterator_type __x) : current(__x) { }





      reverse_iterator(const reverse_iterator& __x)
      : current(__x.current) { }


      reverse_iterator& operator=(const reverse_iterator&) = default;






      template<typename _Iter>

        reverse_iterator(const reverse_iterator<_Iter>& __x)
 : current(__x.base()) { }




                           iterator_type
      base() const
      { return current; }
# 176 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_iterator.h" 3
                           reference
      operator*() const
      {
 _Iterator __tmp = current;
 return *--__tmp;
      }






                           pointer
      operator->() const
      {


 _Iterator __tmp = current;
 --__tmp;
 return _S_to_pointer(__tmp);
      }






                           reverse_iterator&
      operator++()
      {
 --current;
 return *this;
      }






                           reverse_iterator
      operator++(int)
      {
 reverse_iterator __tmp = *this;
 --current;
 return __tmp;
      }






                           reverse_iterator&
      operator--()
      {
 ++current;
 return *this;
      }






                           reverse_iterator
      operator--(int)
      {
 reverse_iterator __tmp = *this;
 ++current;
 return __tmp;
      }






                           reverse_iterator
      operator+(difference_type __n) const
      { return reverse_iterator(current - __n); }







                           reverse_iterator&
      operator+=(difference_type __n)
      {
 current -= __n;
 return *this;
      }






                           reverse_iterator
      operator-(difference_type __n) const
      { return reverse_iterator(current + __n); }







                           reverse_iterator&
      operator-=(difference_type __n)
      {
 current += __n;
 return *this;
      }






                           reference
      operator[](difference_type __n) const
      { return *(*this + __n); }

    private:
      template<typename _Tp>
 static _Tp*
 _S_to_pointer(_Tp* __p)
        { return __p; }

      template<typename _Tp>
 static pointer
 _S_to_pointer(_Tp __t)
        { return __t.operator->(); }
    };
# 323 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_iterator.h" 3
  template<typename _Iterator>
    inline bool
    operator==(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator<(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() < __x.base(); }

  template<typename _Iterator>
    inline bool
    operator!=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator>(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    inline bool
    operator<=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    inline bool
    operator>=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x < __y); }



  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator==(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y.base() < __x.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator!=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x < __y); }
# 413 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_iterator.h" 3
  template<typename _IteratorL, typename _IteratorR>
    inline auto
    operator-(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    -> decltype(__y.base() - __x.base())
    { return __y.base() - __x.base(); }


  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    operator+(typename reverse_iterator<_Iterator>::difference_type __n,
       const reverse_iterator<_Iterator>& __x)
    { return reverse_iterator<_Iterator>(__x.base() - __n); }



  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    __make_reverse_iterator(_Iterator __i)
    { return reverse_iterator<_Iterator>(__i); }







  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    make_reverse_iterator(_Iterator __i)
    { return reverse_iterator<_Iterator>(__i); }




  template<typename _Iterator>
    auto
    __niter_base(reverse_iterator<_Iterator> __it)
    -> decltype(__make_reverse_iterator(__niter_base(__it.base())))
    { return __make_reverse_iterator(__niter_base(__it.base())); }

  template<typename _Iterator>
    struct __is_move_iterator<reverse_iterator<_Iterator> >
      : __is_move_iterator<_Iterator>
    { };

  template<typename _Iterator>
    auto
    __miter_base(reverse_iterator<_Iterator> __it)
    -> decltype(__make_reverse_iterator(__miter_base(__it.base())))
    { return __make_reverse_iterator(__miter_base(__it.base())); }
# 477 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_iterator.h" 3
  template<typename _Container>
    class back_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit
      back_insert_iterator(_Container& __x)
      : container(std::__addressof(__x)) { }
# 512 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_iterator.h" 3
      back_insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 container->push_back(__value);
 return *this;
      }

      back_insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 container->push_back(std::move(__value));
 return *this;
      }



      back_insert_iterator&
      operator*()
      { return *this; }


      back_insert_iterator&
      operator++()
      { return *this; }


      back_insert_iterator
      operator++(int)
      { return *this; }
    };
# 554 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_iterator.h" 3
  template<typename _Container>
    inline back_insert_iterator<_Container>
    back_inserter(_Container& __x)
    { return back_insert_iterator<_Container>(__x); }
# 569 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_iterator.h" 3
  template<typename _Container>
    class front_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit front_insert_iterator(_Container& __x)
      : container(std::__addressof(__x)) { }
# 603 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_iterator.h" 3
      front_insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 container->push_front(__value);
 return *this;
      }

      front_insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 container->push_front(std::move(__value));
 return *this;
      }



      front_insert_iterator&
      operator*()
      { return *this; }


      front_insert_iterator&
      operator++()
      { return *this; }


      front_insert_iterator
      operator++(int)
      { return *this; }
    };
# 645 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_iterator.h" 3
  template<typename _Container>
    inline front_insert_iterator<_Container>
    front_inserter(_Container& __x)
    { return front_insert_iterator<_Container>(__x); }
# 664 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_iterator.h" 3
  template<typename _Container>
    class insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;
      typename _Container::iterator iter;

    public:

      typedef _Container container_type;





      insert_iterator(_Container& __x, typename _Container::iterator __i)
      : container(std::__addressof(__x)), iter(__i) {}
# 715 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_iterator.h" 3
      insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 iter = container->insert(iter, __value);
 ++iter;
 return *this;
      }

      insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 iter = container->insert(iter, std::move(__value));
 ++iter;
 return *this;
      }



      insert_iterator&
      operator*()
      { return *this; }


      insert_iterator&
      operator++()
      { return *this; }


      insert_iterator&
      operator++(int)
      { return *this; }
    };
# 760 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_iterator.h" 3
  template<typename _Container>
    inline insert_iterator<_Container>
    inserter(_Container& __x, typename _Container::iterator __i)
    { return insert_iterator<_Container>(__x, __i); }




}

namespace __gnu_cxx
{
# 781 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_iterator.h" 3
  using std::iterator_traits;
  using std::iterator;
  template<typename _Iterator, typename _Container>
    class __normal_iterator
    {
    protected:
      _Iterator _M_current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::iterator_category iterator_category;
      typedef typename __traits_type::value_type value_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::reference reference;
      typedef typename __traits_type::pointer pointer;

      constexpr __normal_iterator() noexcept
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) noexcept
      : _M_current(__i) { }


      template<typename _Iter>
        __normal_iterator(const __normal_iterator<_Iter,
     typename __enable_if<
              (std::__are_same<_Iter, typename _Container::pointer>::__value),
        _Container>::__type>& __i) noexcept
        : _M_current(__i.base()) { }


      reference
      operator*() const noexcept
      { return *_M_current; }

      pointer
      operator->() const noexcept
      { return _M_current; }

      __normal_iterator&
      operator++() noexcept
      {
 ++_M_current;
 return *this;
      }

      __normal_iterator
      operator++(int) noexcept
      { return __normal_iterator(_M_current++); }


      __normal_iterator&
      operator--() noexcept
      {
 --_M_current;
 return *this;
      }

      __normal_iterator
      operator--(int) noexcept
      { return __normal_iterator(_M_current--); }


      reference
      operator[](difference_type __n) const noexcept
      { return _M_current[__n]; }

      __normal_iterator&
      operator+=(difference_type __n) noexcept
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(difference_type __n) const noexcept
      { return __normal_iterator(_M_current + __n); }

      __normal_iterator&
      operator-=(difference_type __n) noexcept
      { _M_current -= __n; return *this; }

      __normal_iterator
      operator-(difference_type __n) const noexcept
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const noexcept
      { return _M_current; }
    };
# 881 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_iterator.h" 3
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() == __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() == __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() != __rhs.base(); }


  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() < __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() < __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() > __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() > __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() <= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() <= __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() >= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() >= __rhs.base(); }





  template<typename _IteratorL, typename _IteratorR, typename _Container>


    inline auto
    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs) noexcept
    -> decltype(__lhs.base() - __rhs.base())





    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline __normal_iterator<_Iterator, _Container>
    operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
       __n, const __normal_iterator<_Iterator, _Container>& __i)
    noexcept
    { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }


}

namespace std
{


  template<typename _Iterator, typename _Container>
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
    noexcept(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
# 1027 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_iterator.h" 3
  template<typename _Iterator>
    class move_iterator
    {
    protected:
      _Iterator _M_current;

      typedef iterator_traits<_Iterator> __traits_type;
      typedef typename __traits_type::reference __base_ref;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::iterator_category iterator_category;
      typedef typename __traits_type::value_type value_type;
      typedef typename __traits_type::difference_type difference_type;

      typedef _Iterator pointer;


      typedef typename conditional<is_reference<__base_ref>::value,
    typename remove_reference<__base_ref>::type&&,
    __base_ref>::type reference;


      move_iterator()
      : _M_current() { }

      explicit
      move_iterator(iterator_type __i)
      : _M_current(__i) { }

      template<typename _Iter>

 move_iterator(const move_iterator<_Iter>& __i)
 : _M_current(__i.base()) { }

                           iterator_type
      base() const
      { return _M_current; }

                           reference
      operator*() const
      { return static_cast<reference>(*_M_current); }

                           pointer
      operator->() const
      { return _M_current; }

                           move_iterator&
      operator++()
      {
 ++_M_current;
 return *this;
      }

                           move_iterator
      operator++(int)
      {
 move_iterator __tmp = *this;
 ++_M_current;
 return __tmp;
      }

                           move_iterator&
      operator--()
      {
 --_M_current;
 return *this;
      }

                           move_iterator
      operator--(int)
      {
 move_iterator __tmp = *this;
 --_M_current;
 return __tmp;
      }

                           move_iterator
      operator+(difference_type __n) const
      { return move_iterator(_M_current + __n); }

                           move_iterator&
      operator+=(difference_type __n)
      {
 _M_current += __n;
 return *this;
      }

                           move_iterator
      operator-(difference_type __n) const
      { return move_iterator(_M_current - __n); }

                           move_iterator&
      operator-=(difference_type __n)
      {
 _M_current -= __n;
 return *this;
      }

                           reference
      operator[](difference_type __n) const
      { return std::move(_M_current[__n]); }
    };




  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator==(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator==(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator!=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator!=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    { return __x.base() < __y.base(); }

  template<typename _Iterator>
    inline bool
    operator<(const move_iterator<_Iterator>& __x,
       const move_iterator<_Iterator>& __y)
    { return __x.base() < __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    inline bool
    operator<=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    inline bool
    operator>(const move_iterator<_Iterator>& __x,
       const move_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__x < __y); }

  template<typename _Iterator>
    inline bool
    operator>=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__x < __y); }


  template<typename _IteratorL, typename _IteratorR>
    inline auto
    operator-(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    -> decltype(__x.base() - __y.base())
    { return __x.base() - __y.base(); }

  template<typename _Iterator>
    inline move_iterator<_Iterator>
    operator+(typename move_iterator<_Iterator>::difference_type __n,
       const move_iterator<_Iterator>& __x)
    { return __x + __n; }

  template<typename _Iterator>
    inline move_iterator<_Iterator>
    make_move_iterator(_Iterator __i)
    { return move_iterator<_Iterator>(__i); }

  template<typename _Iterator, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond
      <typename iterator_traits<_Iterator>::value_type>::value,
                _Iterator, move_iterator<_Iterator>>::type>
    inline _ReturnType
    __make_move_if_noexcept_iterator(_Iterator __i)
    { return _ReturnType(__i); }



  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
      const _Tp*, move_iterator<_Tp*>>::type>
    inline _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
    { return _ReturnType(__i); }



  template<typename _Iterator>
    auto
    __niter_base(move_iterator<_Iterator> __it)
    -> decltype(make_move_iterator(__niter_base(__it.base())))
    { return make_move_iterator(__niter_base(__it.base())); }

  template<typename _Iterator>
    struct __is_move_iterator<move_iterator<_Iterator> >
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
# 1293 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_iterator.h" 3
}
# 68 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_algobase.h" 2 3

# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/debug/debug.h" 1 3
# 48 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/debug/debug.h" 3
namespace std
{
  namespace __debug { }
}




namespace __gnu_debug
{
  using namespace std::__debug;
}
# 70 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_algobase.h" 2 3

# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/predefined_ops.h" 1 3
# 33 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/predefined_ops.h" 3
namespace __gnu_cxx
{
namespace __ops
{
  struct _Iter_less_iter
  {
    template<typename _Iterator1, typename _Iterator2>
      constexpr
      bool
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
      { return *__it1 < *__it2; }
  };

  constexpr
  inline _Iter_less_iter
  __iter_less_iter()
  { return _Iter_less_iter(); }

  struct _Iter_less_val
  {

    constexpr _Iter_less_val() = default;




    explicit
    _Iter_less_val(_Iter_less_iter) { }

    template<typename _Iterator, typename _Value>
      bool
      operator()(_Iterator __it, _Value& __val) const
      { return *__it < __val; }
  };

  inline _Iter_less_val
  __iter_less_val()
  { return _Iter_less_val(); }

  inline _Iter_less_val
  __iter_comp_val(_Iter_less_iter)
  { return _Iter_less_val(); }

  struct _Val_less_iter
  {

    constexpr _Val_less_iter() = default;




    explicit
    _Val_less_iter(_Iter_less_iter) { }

    template<typename _Value, typename _Iterator>
      bool
      operator()(_Value& __val, _Iterator __it) const
      { return __val < *__it; }
  };

  inline _Val_less_iter
  __val_less_iter()
  { return _Val_less_iter(); }

  inline _Val_less_iter
  __val_comp_iter(_Iter_less_iter)
  { return _Val_less_iter(); }

  struct _Iter_equal_to_iter
  {
    template<typename _Iterator1, typename _Iterator2>
      bool
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
      { return *__it1 == *__it2; }
  };

  inline _Iter_equal_to_iter
  __iter_equal_to_iter()
  { return _Iter_equal_to_iter(); }

  struct _Iter_equal_to_val
  {
    template<typename _Iterator, typename _Value>
      bool
      operator()(_Iterator __it, _Value& __val) const
      { return *__it == __val; }
  };

  inline _Iter_equal_to_val
  __iter_equal_to_val()
  { return _Iter_equal_to_val(); }

  inline _Iter_equal_to_val
  __iter_comp_val(_Iter_equal_to_iter)
  { return _Iter_equal_to_val(); }

  template<typename _Compare>
    struct _Iter_comp_iter
    {
      _Compare _M_comp;

      explicit constexpr
      _Iter_comp_iter(_Compare __comp)
 : _M_comp(std::move(__comp))
      { }

      template<typename _Iterator1, typename _Iterator2>
        constexpr
        bool
        operator()(_Iterator1 __it1, _Iterator2 __it2)
        { return bool(_M_comp(*__it1, *__it2)); }
    };

  template<typename _Compare>
    constexpr
    inline _Iter_comp_iter<_Compare>
    __iter_comp_iter(_Compare __comp)
    { return _Iter_comp_iter<_Compare>(std::move(__comp)); }

  template<typename _Compare>
    struct _Iter_comp_val
    {
      _Compare _M_comp;

      explicit
      _Iter_comp_val(_Compare __comp)
 : _M_comp(std::move(__comp))
      { }

      explicit
      _Iter_comp_val(const _Iter_comp_iter<_Compare>& __comp)
 : _M_comp(__comp._M_comp)
      { }


      explicit
      _Iter_comp_val(_Iter_comp_iter<_Compare>&& __comp)
 : _M_comp(std::move(__comp._M_comp))
      { }


      template<typename _Iterator, typename _Value>
 bool
 operator()(_Iterator __it, _Value& __val)
 { return bool(_M_comp(*__it, __val)); }
    };

  template<typename _Compare>
   inline _Iter_comp_val<_Compare>
    __iter_comp_val(_Compare __comp)
    { return _Iter_comp_val<_Compare>(std::move(__comp)); }

  template<typename _Compare>
    inline _Iter_comp_val<_Compare>
    __iter_comp_val(_Iter_comp_iter<_Compare> __comp)
    { return _Iter_comp_val<_Compare>(std::move(__comp)); }

  template<typename _Compare>
    struct _Val_comp_iter
    {
      _Compare _M_comp;

      explicit
      _Val_comp_iter(_Compare __comp)
 : _M_comp(std::move(__comp))
      { }

      explicit
      _Val_comp_iter(const _Iter_comp_iter<_Compare>& __comp)
 : _M_comp(__comp._M_comp)
      { }


      explicit
      _Val_comp_iter(_Iter_comp_iter<_Compare>&& __comp)
 : _M_comp(std::move(__comp._M_comp))
      { }


      template<typename _Value, typename _Iterator>
 bool
 operator()(_Value& __val, _Iterator __it)
 { return bool(_M_comp(__val, *__it)); }
    };

  template<typename _Compare>
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Compare __comp)
    { return _Val_comp_iter<_Compare>(std::move(__comp)); }

  template<typename _Compare>
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Iter_comp_iter<_Compare> __comp)
    { return _Val_comp_iter<_Compare>(std::move(__comp)); }

  template<typename _Value>
    struct _Iter_equals_val
    {
      _Value& _M_value;

      explicit
      _Iter_equals_val(_Value& __value)
 : _M_value(__value)
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return *__it == _M_value; }
    };

  template<typename _Value>
    inline _Iter_equals_val<_Value>
    __iter_equals_val(_Value& __val)
    { return _Iter_equals_val<_Value>(__val); }

  template<typename _Iterator1>
    struct _Iter_equals_iter
    {
      _Iterator1 _M_it1;

      explicit
      _Iter_equals_iter(_Iterator1 __it1)
 : _M_it1(__it1)
      { }

      template<typename _Iterator2>
 bool
 operator()(_Iterator2 __it2)
 { return *__it2 == *_M_it1; }
    };

  template<typename _Iterator>
    inline _Iter_equals_iter<_Iterator>
    __iter_comp_iter(_Iter_equal_to_iter, _Iterator __it)
    { return _Iter_equals_iter<_Iterator>(__it); }

  template<typename _Predicate>
    struct _Iter_pred
    {
      _Predicate _M_pred;

      explicit
      _Iter_pred(_Predicate __pred)
 : _M_pred(std::move(__pred))
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return bool(_M_pred(*__it)); }
    };

  template<typename _Predicate>
    inline _Iter_pred<_Predicate>
    __pred_iter(_Predicate __pred)
    { return _Iter_pred<_Predicate>(std::move(__pred)); }

  template<typename _Compare, typename _Value>
    struct _Iter_comp_to_val
    {
      _Compare _M_comp;
      _Value& _M_value;

      _Iter_comp_to_val(_Compare __comp, _Value& __value)
 : _M_comp(std::move(__comp)), _M_value(__value)
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return bool(_M_comp(*__it, _M_value)); }
    };

  template<typename _Compare, typename _Value>
    _Iter_comp_to_val<_Compare, _Value>
    __iter_comp_val(_Compare __comp, _Value &__val)
    {
      return _Iter_comp_to_val<_Compare, _Value>(std::move(__comp), __val);
    }

  template<typename _Compare, typename _Iterator1>
    struct _Iter_comp_to_iter
    {
      _Compare _M_comp;
      _Iterator1 _M_it1;

      _Iter_comp_to_iter(_Compare __comp, _Iterator1 __it1)
 : _M_comp(std::move(__comp)), _M_it1(__it1)
      { }

      template<typename _Iterator2>
 bool
 operator()(_Iterator2 __it2)
 { return bool(_M_comp(*__it2, *_M_it1)); }
    };

  template<typename _Compare, typename _Iterator>
    inline _Iter_comp_to_iter<_Compare, _Iterator>
    __iter_comp_iter(_Iter_comp_iter<_Compare> __comp, _Iterator __it)
    {
      return _Iter_comp_to_iter<_Compare, _Iterator>(
   std::move(__comp._M_comp), __it);
    }

  template<typename _Predicate>
    struct _Iter_negate
    {
      _Predicate _M_pred;

      explicit
      _Iter_negate(_Predicate __pred)
 : _M_pred(std::move(__pred))
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return !bool(_M_pred(*__it)); }
    };

  template<typename _Predicate>
    inline _Iter_negate<_Predicate>
    __negate(_Iter_pred<_Predicate> __pred)
    { return _Iter_negate<_Predicate>(std::move(__pred._M_pred)); }

}
}
# 72 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_algobase.h" 2 3




namespace std
{
# 121 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline void
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
    {
# 151 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_algobase.h" 3
      swap(*__a, *__b);

    }
# 167 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    _ForwardIterator2
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
  _ForwardIterator2 __first2)
    {





                                                       ;

      for (; __first1 != __last1; ++__first1, (void)++__first2)
 std::iter_swap(__first1, __first2);
      return __first2;
    }
# 195 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_algobase.h" 3
  template<typename _Tp>
    constexpr
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
    {



      if (__b < __a)
 return __b;
      return __a;
    }
# 219 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_algobase.h" 3
  template<typename _Tp>
    constexpr
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
    {



      if (__a < __b)
 return __b;
      return __a;
    }
# 243 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    constexpr
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__b, __a))
 return __b;
      return __a;
    }
# 265 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    constexpr
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__a, __b))
 return __b;
      return __a;
    }



  template<typename _Iterator>
    inline _Iterator
    __niter_base(_Iterator __it)
    noexcept(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }




  template<typename _From, typename _To>
    inline _From
    __niter_wrap(_From __from, _To __res)
    { return __from + (__res - std::__niter_base(__from)); }


  template<typename _Iterator>
    inline _Iterator
    __niter_wrap(const _Iterator&, _Iterator __res)
    { return __res; }







  template<bool _IsMove, bool _IsSimple, typename _Category>
    struct __copy_move
    {
      template<typename _II, typename _OI>
 static _OI
 __copy_m(_II __first, _II __last, _OI __result)
 {
   for (; __first != __last; ++__result, (void)++__first)
     *__result = *__first;
   return __result;
 }
    };


  template<typename _Category>
    struct __copy_move<true, false, _Category>
    {
      template<typename _II, typename _OI>
 static _OI
 __copy_m(_II __first, _II __last, _OI __result)
 {
   for (; __first != __last; ++__result, (void)++__first)
     *__result = std::move(*__first);
   return __result;
 }
    };


  template<>
    struct __copy_move<false, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
 static _OI
 __copy_m(_II __first, _II __last, _OI __result)
 {
   typedef typename iterator_traits<_II>::difference_type _Distance;
   for(_Distance __n = __last - __first; __n > 0; --__n)
     {
       *__result = *__first;
       ++__first;
       ++__result;
     }
   return __result;
 }
    };


  template<>
    struct __copy_move<true, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
 static _OI
 __copy_m(_II __first, _II __last, _OI __result)
 {
   typedef typename iterator_traits<_II>::difference_type _Distance;
   for(_Distance __n = __last - __first; __n > 0; --__n)
     {
       *__result = std::move(*__first);
       ++__first;
       ++__result;
     }
   return __result;
 }
    };


  template<bool _IsMove>
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
 static _Tp*
 __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 {

   using __assignable = conditional<_IsMove,
        is_move_assignable<_Tp>,
        is_copy_assignable<_Tp>>;

   static_assert( __assignable::type::value, "type is not assignable" );

   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   return __result + _Num;
 }
    };

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
    {
      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
        && __is_pointer<_II>::__value
        && __is_pointer<_OI>::__value
        && __are_same<_ValueTypeI, _ValueTypeO>::__value);

      return std::__copy_move<_IsMove, __simple,
         _Category>::__copy_m(__first, __last, __result);
    }



  template<typename _CharT>
    struct char_traits;

  template<typename _CharT, typename _Traits>
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator;

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(_CharT*, _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(const _CharT*, const _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
     istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a2(_II __first, _II __last, _OI __result)
    {
      return std::__niter_wrap(__result,
  std::__copy_move_a<_IsMove>(std::__niter_base(__first),
         std::__niter_base(__last),
         std::__niter_base(__result)));
    }
# 463 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_algobase.h" 3
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
    {




                                                                       ;

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
      (std::__miter_base(__first), std::__miter_base(__last), __result);
    }
# 495 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_algobase.h" 3
  template<typename _II, typename _OI>
    inline _OI
    move(_II __first, _II __last, _OI __result)
    {




                                                                       ;

      return std::__copy_move_a2<true>(std::__miter_base(__first),
           std::__miter_base(__last), __result);
    }






  template<bool, bool, typename>
    struct __copy_move_backward
    {
      template<typename _BI1, typename _BI2>
 static _BI2
 __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 {
   while (__first != __last)
     *--__result = *--__last;
   return __result;
 }
    };


  template<typename _Category>
    struct __copy_move_backward<true, false, _Category>
    {
      template<typename _BI1, typename _BI2>
 static _BI2
 __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 {
   while (__first != __last)
     *--__result = std::move(*--__last);
   return __result;
 }
    };


  template<>
    struct __copy_move_backward<false, false, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>
 static _BI2
 __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 {
   typename iterator_traits<_BI1>::difference_type __n;
   for (__n = __last - __first; __n > 0; --__n)
     *--__result = *--__last;
   return __result;
 }
    };


  template<>
    struct __copy_move_backward<true, false, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>
 static _BI2
 __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 {
   typename iterator_traits<_BI1>::difference_type __n;
   for (__n = __last - __first; __n > 0; --__n)
     *--__result = std::move(*--__last);
   return __result;
 }
    };


  template<bool _IsMove>
    struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
 static _Tp*
 __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 {

   using __assignable = conditional<_IsMove,
        is_move_assignable<_Tp>,
        is_copy_assignable<_Tp>>;

   static_assert( __assignable::type::value, "type is not assignable" );

   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   return __result - _Num;
 }
    };

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      typedef typename iterator_traits<_BI1>::value_type _ValueType1;
      typedef typename iterator_traits<_BI2>::value_type _ValueType2;
      typedef typename iterator_traits<_BI1>::iterator_category _Category;
      const bool __simple = (__is_trivially_copyable(_ValueType1)
        && __is_pointer<_BI1>::__value
        && __is_pointer<_BI2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__copy_move_backward<_IsMove, __simple,
           _Category>::__copy_move_b(__first,
         __last,
         __result);
    }

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      return std::__niter_wrap(__result,
  std::__copy_move_backward_a<_IsMove>
    (std::__niter_base(__first), std::__niter_base(__last),
     std::__niter_base(__result)));
    }
# 639 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_algobase.h" 3
  template<typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {






                                                                       ;

      return std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
      (std::__miter_base(__first), std::__miter_base(__last), __result);
    }
# 674 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_algobase.h" 3
  template<typename _BI1, typename _BI2>
    inline _BI2
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {






                                                                       ;

      return std::__copy_move_backward_a2<true>(std::__miter_base(__first),
      std::__miter_base(__last),
      __result);
    }






  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
       const _Tp& __value)
    {
      for (; __first != __last; ++__first)
 *__first = __value;
    }

  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
 *__first = __tmp;
    }


  template<typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type
    __fill_a(_Tp* __first, _Tp* __last, const _Tp& __c)
    {
      const _Tp __tmp = __c;
      if (const size_t __len = __last - __first)
 __builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
    }
# 740 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
    {



                                                     ;

      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
      __value);
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, (void) ++__first)
 *__first = __value;
      return __first;
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, (void) ++__first)
 *__first = __tmp;
      return __first;
    }

  template<typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, _Tp*>::__type
    __fill_n_a(_Tp* __first, _Size __n, const _Tp& __c)
    {
      std::__fill_a(__first, __first + __n, __c);
      return __first + __n;
    }
# 800 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_algobase.h" 3
  template<typename _OI, typename _Size, typename _Tp>
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    {


                                                    ;

      return std::__niter_wrap(__first,
  std::__fill_n_a(std::__niter_base(__first), __n, __value));
    }

  template<bool _BoolType>
    struct __equal
    {
      template<typename _II1, typename _II2>
 static bool
 equal(_II1 __first1, _II1 __last1, _II2 __first2)
 {
   for (; __first1 != __last1; ++__first1, (void) ++__first2)
     if (!(*__first1 == *__first2))
       return false;
   return true;
 }
    };

  template<>
    struct __equal<true>
    {
      template<typename _Tp>
 static bool
 equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
 {
   if (const size_t __len = (__last1 - __first1))
     return !__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len);
   return true;
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple = ((__is_integer<_ValueType1>::__value
         || __is_pointer<_ValueType1>::__value)
        && __is_pointer<_II1>::__value
        && __is_pointer<_II2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__equal<__simple>::equal(__first1, __last1, __first2);
    }

  template<typename, typename>
    struct __lc_rai
    {
      template<typename _II1, typename _II2>
 static _II1
 __newlast1(_II1, _II1 __last1, _II2, _II2)
 { return __last1; }

      template<typename _II>
 static bool
 __cnd2(_II __first, _II __last)
 { return __first != __last; }
    };

  template<>
    struct __lc_rai<random_access_iterator_tag, random_access_iterator_tag>
    {
      template<typename _RAI1, typename _RAI2>
 static _RAI1
 __newlast1(_RAI1 __first1, _RAI1 __last1,
     _RAI2 __first2, _RAI2 __last2)
 {
   const typename iterator_traits<_RAI1>::difference_type
     __diff1 = __last1 - __first1;
   const typename iterator_traits<_RAI2>::difference_type
     __diff2 = __last2 - __first2;
   return __diff2 < __diff1 ? __first1 + __diff2 : __last1;
 }

      template<typename _RAI>
 static bool
 __cnd2(_RAI, _RAI)
 { return true; }
    };

  template<typename _II1, typename _II2, typename _Compare>
    bool
    __lexicographical_compare_impl(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2,
       _Compare __comp)
    {
      typedef typename iterator_traits<_II1>::iterator_category _Category1;
      typedef typename iterator_traits<_II2>::iterator_category _Category2;
      typedef std::__lc_rai<_Category1, _Category2> __rai_type;

      __last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2);
      for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);
    ++__first1, (void)++__first2)
 {
   if (__comp(__first1, __first2))
     return true;
   if (__comp(__first2, __first1))
     return false;
 }
      return __first1 == __last1 && __first2 != __last2;
    }

  template<bool _BoolType>
    struct __lexicographical_compare
    {
      template<typename _II1, typename _II2>
 static bool __lc(_II1, _II1, _II2, _II2);
    };

  template<bool _BoolType>
    template<typename _II1, typename _II2>
      bool
      __lexicographical_compare<_BoolType>::
      __lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
      {
 return std::__lexicographical_compare_impl(__first1, __last1,
         __first2, __last2,
     __gnu_cxx::__ops::__iter_less_iter());
      }

  template<>
    struct __lexicographical_compare<true>
    {
      template<typename _Tp, typename _Up>
 static bool
 __lc(const _Tp* __first1, const _Tp* __last1,
      const _Up* __first2, const _Up* __last2)
 {
   const size_t __len1 = __last1 - __first1;
   const size_t __len2 = __last2 - __first2;
   if (const size_t __len = std::min(__len1, __len2))
     if (int __result = __builtin_memcmp(__first1, __first2, __len))
       return __result < 0;
   return __len1 < __len2;
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __lexicographical_compare_aux(_II1 __first1, _II1 __last1,
      _II2 __first2, _II2 __last2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple =
 (__is_byte<_ValueType1>::__value && __is_byte<_ValueType2>::__value
  && !__gnu_cxx::__numeric_traits<_ValueType1>::__is_signed
  && !__gnu_cxx::__numeric_traits<_ValueType2>::__is_signed
  && __is_pointer<_II1>::__value
  && __is_pointer<_II2>::__value);

      return std::__lexicographical_compare<__simple>::__lc(__first1, __last1,
           __first2, __last2);
    }

  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    _ForwardIterator
    __lower_bound(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp(__middle, __val))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }
# 1002 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {




                                                                  ;

      return std::__lower_bound(__first, __last, __val,
    __gnu_cxx::__ops::__iter_less_val());
    }



  inline constexpr int
  __lg(int __n)
  { return (int)sizeof(int) * 8 - 1 - __builtin_clz(__n); }

  inline constexpr unsigned
  __lg(unsigned __n)
  { return (int)sizeof(int) * 8 - 1 - __builtin_clz(__n); }

  inline constexpr long
  __lg(long __n)
  { return (int)sizeof(long) * 8 - 1 - __builtin_clzl(__n); }

  inline constexpr unsigned long
  __lg(unsigned long __n)
  { return (int)sizeof(long) * 8 - 1 - __builtin_clzl(__n); }

  inline constexpr long long
  __lg(long long __n)
  { return (int)sizeof(long long) * 8 - 1 - __builtin_clzll(__n); }

  inline constexpr unsigned long long
  __lg(unsigned long long __n)
  { return (int)sizeof(long long) * 8 - 1 - __builtin_clzll(__n); }
# 1057 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    equal(_II1 __first1, _II1 __last1, _II2 __first2)
    {






                                                                         ;

      return std::__equal_aux(std::__niter_base(__first1),
         std::__niter_base(__last1),
         std::__niter_base(__first2));
    }
# 1089 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_algobase.h" 3
  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    inline bool
    equal(_IIter1 __first1, _IIter1 __last1,
   _IIter2 __first2, _BinaryPredicate __binary_pred)
    {



                                                       ;

      for (; __first1 != __last1; ++__first1, (void)++__first2)
 if (!bool(__binary_pred(*__first1, *__first2)))
   return false;
      return true;
    }



  template<typename _II1, typename _II2>
    inline bool
    __equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
    {
      using _RATag = random_access_iterator_tag;
      using _Cat1 = typename iterator_traits<_II1>::iterator_category;
      using _Cat2 = typename iterator_traits<_II2>::iterator_category;
      using _RAIters = __and_<is_same<_Cat1, _RATag>, is_same<_Cat2, _RATag>>;
      if (_RAIters())
 {
   auto __d1 = std::distance(__first1, __last1);
   auto __d2 = std::distance(__first2, __last2);
   if (__d1 != __d2)
     return false;
   return std::equal(__first1, __last1, __first2);
 }

      for (; __first1 != __last1 && __first2 != __last2;
   ++__first1, (void)++__first2)
 if (!(*__first1 == *__first2))
   return false;
      return __first1 == __last1 && __first2 == __last2;
    }


  template<typename _II1, typename _II2, typename _BinaryPredicate>
    inline bool
    __equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2,
      _BinaryPredicate __binary_pred)
    {
      using _RATag = random_access_iterator_tag;
      using _Cat1 = typename iterator_traits<_II1>::iterator_category;
      using _Cat2 = typename iterator_traits<_II2>::iterator_category;
      using _RAIters = __and_<is_same<_Cat1, _RATag>, is_same<_Cat2, _RATag>>;
      if (_RAIters())
 {
   auto __d1 = std::distance(__first1, __last1);
   auto __d2 = std::distance(__first2, __last2);
   if (__d1 != __d2)
     return false;
   return std::equal(__first1, __last1, __first2,
           __binary_pred);
 }

      for (; __first1 != __last1 && __first2 != __last2;
   ++__first1, (void)++__first2)
 if (!bool(__binary_pred(*__first1, *__first2)))
   return false;
      return __first1 == __last1 && __first2 == __last2;
    }
# 1176 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    equal(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
    {






                                                       ;
                                                       ;

      return std::__equal4(__first1, __last1, __first2, __last2);
    }
# 1208 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_algobase.h" 3
  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    inline bool
    equal(_IIter1 __first1, _IIter1 __last1,
   _IIter2 __first2, _IIter2 __last2, _BinaryPredicate __binary_pred)
    {



                                                       ;
                                                       ;

      return std::__equal4(__first1, __last1, __first2, __last2,
          __binary_pred);
    }
# 1239 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2)
    {
# 1253 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_algobase.h" 3
                                                       ;
                                                       ;

      return std::__lexicographical_compare_aux(std::__niter_base(__first1),
      std::__niter_base(__last1),
      std::__niter_base(__first2),
      std::__niter_base(__last2));
    }
# 1275 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2, typename _Compare>
    inline bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2, _Compare __comp)
    {



                                                       ;
                                                       ;

      return std::__lexicographical_compare_impl
 (__first1, __last1, __first2, __last2,
  __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    pair<_InputIterator1, _InputIterator2>
    __mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {
      while (__first1 != __last1 && __binary_pred(__first1, __first2))
 {
   ++__first1;
   ++__first2;
 }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }
# 1318 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2)
    {






                                                       ;

      return std::__mismatch(__first1, __last1, __first2,
        __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 1351 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {



                                                       ;

      return std::__mismatch(__first1, __last1, __first2,
 __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }



  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    pair<_InputIterator1, _InputIterator2>
    __mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _BinaryPredicate __binary_pred)
    {
      while (__first1 != __last1 && __first2 != __last2
      && __binary_pred(__first1, __first2))
 {
   ++__first1;
   ++__first2;
 }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }
# 1398 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2)
    {






                                                       ;
                                                       ;

      return std::__mismatch(__first1, __last1, __first2, __last2,
        __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 1433 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2,
      _BinaryPredicate __binary_pred)
    {



                                                       ;
                                                       ;

      return std::__mismatch(__first1, __last1, __first2, __last2,
        __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }




}
# 40 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/char_traits.h" 2 3

# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cwchar" 1 3
# 40 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cwchar" 3
# 42 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/char_traits.h" 2 3





namespace __gnu_cxx
{
# 61 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/char_traits.h" 3
  template<typename _CharT>
    struct _Char_types
    {
      typedef unsigned long int_type;
      typedef std::streampos pos_type;
      typedef std::streamoff off_type;
      typedef std::mbstate_t state_type;
    };
# 86 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/char_traits.h" 3
  template<typename _CharT>
    struct char_traits
    {
      typedef _CharT char_type;
      typedef typename _Char_types<_CharT>::int_type int_type;
      typedef typename _Char_types<_CharT>::pos_type pos_type;
      typedef typename _Char_types<_CharT>::off_type off_type;
      typedef typename _Char_types<_CharT>::state_type state_type;

      static constexpr void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static constexpr int
      compare(const char_type* __s1, const char_type* __s2, std::size_t __n);

      static constexpr std::size_t
      length(const char_type* __s);

      static constexpr const char_type*
      find(const char_type* __s, std::size_t __n, const char_type& __a);

      static char_type*
      move(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      copy(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      assign(char_type* __s, std::size_t __n, char_type __a);

      static constexpr char_type
      to_char_type(const int_type& __c)
      { return static_cast<char_type>(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c)
      { return static_cast<int_type>(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static constexpr int_type
      eof()
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c)
      { return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type()); }
    };

  template<typename _CharT>
    constexpr int
    char_traits<_CharT>::
    compare(const char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
 if (lt(__s1[__i], __s2[__i]))
   return -1;
 else if (lt(__s2[__i], __s1[__i]))
   return 1;
      return 0;
    }

  template<typename _CharT>
    constexpr std::size_t
    char_traits<_CharT>::
    length(const char_type* __p)
    {
      std::size_t __i = 0;
      while (!eq(__p[__i], char_type()))
        ++__i;
      return __i;
    }

  template<typename _CharT>
    constexpr const typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    find(const char_type* __s, std::size_t __n, const char_type& __a)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
        if (eq(__s[__i], __a))
          return __s + __i;
      return 0;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    move(char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      if (__n == 0)
 return __s1;
      return static_cast<_CharT*>(__builtin_memmove(__s1, __s2,
          __n * sizeof(char_type)));
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    copy(char_type* __s1, const char_type* __s2, std::size_t __n)
    {

      std::copy(__s2, __s2 + __n, __s1);
      return __s1;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    assign(char_type* __s, std::size_t __n, char_type __a)
    {

      std::fill_n(__s, __n, __a);
      return __s;
    }


}

namespace std
{
# 283 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/char_traits.h" 3
  template<class _CharT>
    struct char_traits : public __gnu_cxx::char_traits<_CharT>
    { };



  template<>
    struct char_traits<char>
    {
      typedef char char_type;
      typedef int int_type;
      typedef streampos pos_type;
      typedef streamoff off_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      {

 return (static_cast<unsigned char>(__c1)
  < static_cast<unsigned char>(__c2));
      }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return 0;
# 332 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/char_traits.h" 3
 return __builtin_memcmp(__s1, __s2, __n);
      }

      static size_t
      length(const char_type* __s)
      {




 return __builtin_strlen(__s);
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 if (__n == 0)
   return 0;






 return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 if (__n == 0)
   return __s;
 return static_cast<char_type*>(__builtin_memset(__s, __a, __n));
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return static_cast<char_type>(__c); }



      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return static_cast<int_type>(static_cast<unsigned char>(__c)); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return (__c == eof()) ? 0 : __c; }
  };




  template<>
    struct char_traits<wchar_t>
    {
      typedef wchar_t char_type;
      typedef wint_t int_type;
      typedef streamoff off_type;
      typedef wstreampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return 0;






 return wmemcmp(__s1, __s2, __n);
      }

      static size_t
      length(const char_type* __s)
      {




 return wcslen(__s);
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 if (__n == 0)
   return 0;






 return wmemchr(__s, __a, __n);
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return wmemmove(__s1, __s2, __n);
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return wmemcpy(__s1, __s2, __n);
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 if (__n == 0)
   return __s;
 return wmemset(__s, __a, __n);
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>((wint_t)(0xFFFF)); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return eq_int_type(__c, eof()) ? 0 : __c; }
  };
# 624 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/char_traits.h" 3
}



# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cstdint" 1 3
# 33 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cstdint" 3








# 1 "C:/Xilinx/Vitis/2024.2/vcxx/lib/clang/14.0.6/include/stdint.h" 1 3
# 52 "C:/Xilinx/Vitis/2024.2/vcxx/lib/clang/14.0.6/include/stdint.h" 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdint.h" 1 3
# 32 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdint.h" 3
# 1 "C:/Xilinx/Vitis/2024.2/vcxx/lib/clang/14.0.6/include/stddef.h" 1 3
# 33 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/stdint.h" 2 3


typedef signed char int8_t;
typedef unsigned char uint8_t;
typedef short int16_t;
typedef unsigned short uint16_t;
typedef int int32_t;
typedef unsigned uint32_t;
__extension__ typedef long long int64_t;
__extension__ typedef unsigned long long uint64_t;


typedef signed char int_least8_t;
typedef unsigned char uint_least8_t;
typedef short int_least16_t;
typedef unsigned short uint_least16_t;
typedef int int_least32_t;
typedef unsigned uint_least32_t;
__extension__ typedef long long int_least64_t;
__extension__ typedef unsigned long long uint_least64_t;





typedef signed char int_fast8_t;
typedef unsigned char uint_fast8_t;
typedef short int_fast16_t;
typedef unsigned short uint_fast16_t;
typedef int int_fast32_t;
typedef unsigned int uint_fast32_t;
__extension__ typedef long long int_fast64_t;
__extension__ typedef unsigned long long uint_fast64_t;


__extension__ typedef long long intmax_t;
__extension__ typedef unsigned long long uintmax_t;
# 53 "C:/Xilinx/Vitis/2024.2/vcxx/lib/clang/14.0.6/include/stdint.h" 2 3
# 42 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cstdint" 2 3


namespace std
{

  using ::int8_t;
  using ::int16_t;
  using ::int32_t;
  using ::int64_t;

  using ::int_fast8_t;
  using ::int_fast16_t;
  using ::int_fast32_t;
  using ::int_fast64_t;

  using ::int_least8_t;
  using ::int_least16_t;
  using ::int_least32_t;
  using ::int_least64_t;

  using ::intmax_t;
  using ::intptr_t;

  using ::uint8_t;
  using ::uint16_t;
  using ::uint32_t;
  using ::uint64_t;

  using ::uint_fast8_t;
  using ::uint_fast16_t;
  using ::uint_fast32_t;
  using ::uint_fast64_t;

  using ::uint_least8_t;
  using ::uint_least16_t;
  using ::uint_least32_t;
  using ::uint_least64_t;

  using ::uintmax_t;
  using ::uintptr_t;





}
# 629 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/char_traits.h" 2 3

namespace std
{


  template<>
    struct char_traits<char16_t>
    {
      typedef char16_t char_type;

      typedef uint_least16_t int_type;





      typedef streamoff off_type;
      typedef u16streampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (lt(__s1[__i], __s2[__i]))
     return -1;
   else if (lt(__s2[__i], __s1[__i]))
     return 1;
 return 0;
      }

      static size_t
      length(const char_type* __s)
      {
 size_t __i = 0;
 while (!eq(__s[__i], char_type()))
   ++__i;
 return __i;
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (eq(__s[__i], __a))
     return __s + __i;
 return 0;
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return (static_cast<char_type*>
  (__builtin_memmove(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return (static_cast<char_type*>
  (__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   assign(__s[__i], __a);
 return __s;
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return __c == eof() ? int_type(0xfffd) : int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return eq_int_type(__c, eof()) ? 0 : __c; }
    };

  template<>
    struct char_traits<char32_t>
    {
      typedef char32_t char_type;

      typedef uint_least32_t int_type;





      typedef streamoff off_type;
      typedef u32streampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (lt(__s1[__i], __s2[__i]))
     return -1;
   else if (lt(__s2[__i], __s1[__i]))
     return 1;
 return 0;
      }

      static size_t
      length(const char_type* __s)
      {
 size_t __i = 0;
 while (!eq(__s[__i], char_type()))
   ++__i;
 return __i;
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (eq(__s[__i], __a))
     return __s + __i;
 return 0;
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return (static_cast<char_type*>
  (__builtin_memmove(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return (static_cast<char_type*>
  (__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   assign(__s[__i], __a);
 return __s;
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return eq_int_type(__c, eof()) ? 0 : __c; }
    };


}
# 41 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ios" 2 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/localefwd.h" 1 3
# 38 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/localefwd.h" 3


# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/x86_64-w64-mingw32/bits/c++locale.h" 1 3
# 40 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/x86_64-w64-mingw32/bits/c++locale.h" 3

# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/clocale" 1 3
# 40 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/clocale" 3


# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/locale.h" 1 3
# 15 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/locale.h" 3
#pragma pack(push,_CRT_PACKING)


extern "C" {
# 45 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/locale.h" 3
  struct lconv {
    char *decimal_point;
    char *thousands_sep;
    char *grouping;
    char *int_curr_symbol;
    char *currency_symbol;
    char *mon_decimal_point;
    char *mon_thousands_sep;
    char *mon_grouping;
    char *positive_sign;
    char *negative_sign;
    char int_frac_digits;
    char frac_digits;
    char p_cs_precedes;
    char p_sep_by_space;
    char n_cs_precedes;
    char n_sep_by_space;
    char p_sign_posn;
    char n_sign_posn;

    wchar_t* _W_decimal_point;
    wchar_t* _W_thousands_sep;
    wchar_t* _W_int_curr_symbol;
    wchar_t* _W_currency_symbol;
    wchar_t* _W_mon_decimal_point;
    wchar_t* _W_mon_thousands_sep;
    wchar_t* _W_positive_sign;
    wchar_t* _W_negative_sign;

  };
# 89 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/locale.h" 3
  int __attribute__((__cdecl__)) _configthreadlocale(int _Flag);
  char *__attribute__((__cdecl__)) setlocale(int _Category,const char *_Locale);
  __attribute__ ((__dllimport__)) struct lconv *__attribute__((__cdecl__)) localeconv(void);
  __attribute__ ((__dllimport__)) _locale_t __attribute__((__cdecl__)) _get_current_locale(void);
  __attribute__ ((__dllimport__)) _locale_t __attribute__((__cdecl__)) _create_locale(int _Category,const char *_Locale);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _free_locale(_locale_t _Locale);
  _locale_t __attribute__((__cdecl__)) __get_current_locale(void);
  _locale_t __attribute__((__cdecl__)) __create_locale(int _Category,const char *_Locale);
  void __attribute__((__cdecl__)) __free_locale(_locale_t _Locale);

  __attribute__ ((__dllimport__)) unsigned int __attribute__((__cdecl__)) ___lc_codepage_func(void);
# 113 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/locale.h" 3
}


#pragma pack(pop)
# 43 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/clocale" 2 3








namespace std
{
  using ::lconv;
  using ::setlocale;
  using ::localeconv;
}
# 42 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/x86_64-w64-mingw32/bits/c++locale.h" 2 3



namespace std
{


  typedef int* __c_locale;





  inline int
  __convert_from_v(const __c_locale&, char* __out,
     const int __size __attribute__((__unused__)),
     const char* __fmt, ...)
  {
    char* __old = std::setlocale(4, 0);
    char* __sav = 0;
    if (__builtin_strcmp(__old, "C"))
      {
 const size_t __len = __builtin_strlen(__old) + 1;
 __sav = new char[__len];
 __builtin_memcpy(__sav, __old, __len);
 std::setlocale(4, "C");
      }

    __builtin_va_list __args;
    __builtin_va_start(__args, __fmt);


    const int __ret = __mingw_vsnprintf(__out, __size, __fmt, __args);




    __builtin_va_end(__args);

    if (__sav)
      {
 std::setlocale(4, __sav);
 delete [] __sav;
      }
    return __ret;
  }


}
# 41 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/localefwd.h" 2 3

# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cctype" 1 3
# 40 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cctype" 3


# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/ctype.h" 1 3
# 12 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/ctype.h" 3
extern "C" {
# 80 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/ctype.h" 3
  extern const unsigned char __newclmap[];
  extern const unsigned char __newcumap[];
  extern pthreadlocinfo __ptlocinfo;
  extern pthreadmbcinfo __ptmbcinfo;
  extern int __globallocalestatus;
  extern int __locale_changed;
  extern struct threadlocaleinfostruct __initiallocinfo;
  extern _locale_tstruct __initiallocalestructinfo;
  pthreadlocinfo __attribute__((__cdecl__)) __updatetlocinfo(void);
  pthreadmbcinfo __attribute__((__cdecl__)) __updatetmbcinfo(void);
# 108 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/ctype.h" 3
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isctype(int _C,int _Type);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isctype_l(int _C,int _Type,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isalpha(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isalpha_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isupper(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isupper_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) islower(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _islower_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isdigit(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isdigit_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isxdigit(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isxdigit_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isspace(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isspace_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) ispunct(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _ispunct_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isalnum(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isalnum_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isprint(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isprint_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) isgraph(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isgraph_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) iscntrl(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _iscntrl_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) toupper(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) tolower(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _tolower(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _tolower_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _toupper(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _toupper_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __isascii(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __toascii(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __iscsymf(int _C);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __iscsym(int _C);


int __attribute__((__cdecl__)) isblank(int _C);
# 297 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/ctype.h" 3
}
# 43 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cctype" 2 3
# 62 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cctype" 3
namespace std
{
  using ::isalnum;
  using ::isalpha;
  using ::iscntrl;
  using ::isdigit;
  using ::isgraph;
  using ::islower;
  using ::isprint;
  using ::ispunct;
  using ::isspace;
  using ::isupper;
  using ::isxdigit;
  using ::tolower;
  using ::toupper;
}







namespace std
{
  using ::isblank;
}
# 43 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/localefwd.h" 2 3

namespace std
{
# 55 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/localefwd.h" 3
  class locale;

  template<typename _Facet>
    bool
    has_facet(const locale&) throw();

  template<typename _Facet>
    const _Facet&
    use_facet(const locale&);


  template<typename _CharT>
    bool
    isspace(_CharT, const locale&);

  template<typename _CharT>
    bool
    isprint(_CharT, const locale&);

  template<typename _CharT>
    bool
    iscntrl(_CharT, const locale&);

  template<typename _CharT>
    bool
    isupper(_CharT, const locale&);

  template<typename _CharT>
    bool
    islower(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalpha(_CharT, const locale&);

  template<typename _CharT>
    bool
    isdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    ispunct(_CharT, const locale&);

  template<typename _CharT>
    bool
    isxdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalnum(_CharT, const locale&);

  template<typename _CharT>
    bool
    isgraph(_CharT, const locale&);


  template<typename _CharT>
    bool
    isblank(_CharT, const locale&);


  template<typename _CharT>
    _CharT
    toupper(_CharT, const locale&);

  template<typename _CharT>
    _CharT
    tolower(_CharT, const locale&);


  class ctype_base;
  template<typename _CharT>
    class ctype;
  template<> class ctype<char>;

  template<> class ctype<wchar_t>;

  template<typename _CharT>
    class ctype_byname;


  class codecvt_base;
  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt;
  template<> class codecvt<char, char, mbstate_t>;

  template<> class codecvt<wchar_t, char, mbstate_t>;


  template<> class codecvt<char16_t, char, mbstate_t>;
  template<> class codecvt<char32_t, char, mbstate_t>;





  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt_byname;



  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class num_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class num_put;

namespace __cxx11 {
  template<typename _CharT> class numpunct;
  template<typename _CharT> class numpunct_byname;
}

namespace __cxx11 {

  template<typename _CharT>
    class collate;
  template<typename _CharT>
    class collate_byname;
}


  class time_base;
namespace __cxx11 {
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get;
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get_byname;
}
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put_byname;


  class money_base;
namespace __cxx11 {
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class money_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class money_put;
}
namespace __cxx11 {
  template<typename _CharT, bool _Intl = false>
    class moneypunct;
  template<typename _CharT, bool _Intl = false>
    class moneypunct_byname;
}


  class messages_base;
namespace __cxx11 {
  template<typename _CharT>
    class messages;
  template<typename _CharT>
    class messages_byname;
}


}
# 42 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ios" 2 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/ios_base.h" 1 3
# 38 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/ios_base.h" 3

# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ext/atomicity.h" 1 3
# 33 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ext/atomicity.h" 3


# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/x86_64-w64-mingw32/bits/gthr.h" 1 3
# 30 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/x86_64-w64-mingw32/bits/gthr.h" 3
#pragma GCC visibility push(default)
# 148 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/x86_64-w64-mingw32/bits/gthr.h" 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/x86_64-w64-mingw32/bits/gthr-default.h" 1 3
# 35 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/x86_64-w64-mingw32/bits/gthr-default.h" 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/pthread.h" 1 3
# 62 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/pthread.h" 3
# 1 "C:/Xilinx/Vitis/2024.2/vcxx/lib/clang/14.0.6/include/stddef.h" 1 3
# 63 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/pthread.h" 2 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/errno.h" 1 3
# 12 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/errno.h" 3
extern "C" {
# 239 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/errno.h" 3
}
# 64 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/pthread.h" 2 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/sys/types.h" 1 3
# 62 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/sys/types.h" 3
__extension__
typedef long long _pid_t;




typedef _pid_t pid_t;





typedef unsigned short _mode_t;


typedef _mode_t mode_t;






typedef unsigned int useconds_t;




struct timespec {
  time_t tv_sec;
  long tv_nsec;
};

struct itimerspec {
  struct timespec it_interval;
  struct timespec it_value;
};





__extension__
typedef unsigned long long _sigset_t;
# 65 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/pthread.h" 2 3

# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/process.h" 1 3
# 10 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/process.h" 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/corecrt_startup.h" 1 3
# 11 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/corecrt_startup.h" 3
extern "C" {


__attribute__ ((__dllimport__)) char **__attribute__((__cdecl__)) __p__acmdln(void);


__attribute__ ((__dllimport__)) wchar_t **__attribute__((__cdecl__)) __p__wcmdln(void);


typedef void (__attribute__((__cdecl__)) *_PVFV)(void);
typedef int (__attribute__((__cdecl__)) *_PIFV)(void);
typedef void (__attribute__((__cdecl__)) *_PVFI)(int);

typedef struct _onexit_table_t {
    _PVFV* _first;
    _PVFV* _last;
    _PVFV* _end;
} _onexit_table_t;

typedef int (__attribute__((__cdecl__)) *_onexit_t)(void);

__attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _initialize_onexit_table(_onexit_table_t*);
__attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _register_onexit_function(_onexit_table_t*,_onexit_t);
__attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _execute_onexit_table(_onexit_table_t*);
__attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _crt_atexit(_PVFV func);
__attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _crt_at_quick_exit(_PVFV func);


}
# 11 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/process.h" 2 3






extern "C" {
# 32 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/process.h" 3
  typedef void (__attribute__((__cdecl__)) *_beginthread_proc_type)(void *);
  typedef unsigned ( *_beginthreadex_proc_type)(void *);

  __attribute__ ((__dllimport__)) uintptr_t __attribute__((__cdecl__)) _beginthread(_beginthread_proc_type _StartAddress,unsigned _StackSize,void *_ArgList);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _endthread(void) __attribute__ ((__noreturn__));
  __attribute__ ((__dllimport__)) uintptr_t __attribute__((__cdecl__)) _beginthreadex(void *_Security,unsigned _StackSize,_beginthreadex_proc_type _StartAddress,void *_ArgList,unsigned _InitFlag,unsigned *_ThrdAddr);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _endthreadex(unsigned _Retval) __attribute__ ((__noreturn__));
# 64 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/process.h" 3
  typedef void ( *_tls_callback_type)(void*,unsigned long,void*);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _register_thread_local_exe_atexit_callback(_tls_callback_type callback);

  void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _cexit(void);
  void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _c_exit(void);

  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _getpid(void);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _cwait(int *_TermStat,intptr_t _ProcHandle,int _Action);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _execl(const char *_Filename,const char *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _execle(const char *_Filename,const char *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _execlp(const char *_Filename,const char *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _execlpe(const char *_Filename,const char *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _execv(const char *_Filename,const char *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _execve(const char *_Filename,const char *const *_ArgList,const char *const *_Env);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _execvp(const char *_Filename,const char *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _execvpe(const char *_Filename,const char *const *_ArgList,const char *const *_Env);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _spawnl(int _Mode,const char *_Filename,const char *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _spawnle(int _Mode,const char *_Filename,const char *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _spawnlp(int _Mode,const char *_Filename,const char *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _spawnlpe(int _Mode,const char *_Filename,const char *_ArgList,...);
# 129 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/process.h" 3
  intptr_t __attribute__((__cdecl__)) _loaddll(char *_Filename);
  int __attribute__((__cdecl__)) _unloaddll(intptr_t _Handle);
  int (__attribute__((__cdecl__)) *__attribute__((__cdecl__)) _getdllprocaddr(intptr_t _Handle,char *_ProcedureName,intptr_t _Ordinal))(void);
# 161 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/process.h" 3
  int __attribute__((__cdecl__)) getpid(void) ;



  intptr_t __attribute__((__cdecl__)) cwait(int *_TermStat,intptr_t _ProcHandle,int _Action) ;

  int __attribute__((__cdecl__)) execl(const char *_Filename,const char *_ArgList,...) ;
  int __attribute__((__cdecl__)) execle(const char *_Filename,const char *_ArgList,...) ;
  int __attribute__((__cdecl__)) execlp(const char *_Filename,const char *_ArgList,...) ;
  int __attribute__((__cdecl__)) execlpe(const char *_Filename,const char *_ArgList,...) ;






  intptr_t __attribute__((__cdecl__)) spawnl(int,const char *_Filename,const char *_ArgList,...) ;
  intptr_t __attribute__((__cdecl__)) spawnle(int,const char *_Filename,const char *_ArgList,...) ;
  intptr_t __attribute__((__cdecl__)) spawnlp(int,const char *_Filename,const char *_ArgList,...) ;
  intptr_t __attribute__((__cdecl__)) spawnlpe(int,const char *_Filename,const char *_ArgList,...) ;





  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) execv(const char *_Filename,char *const _ArgList[]) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) execve(const char *_Filename,char *const _ArgList[],char *const _Env[]) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) execvp(const char *_Filename,char *const _ArgList[]) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) execvpe(const char *_Filename,char *const _ArgList[],char *const _Env[]) ;






  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) spawnv(int,const char *_Filename,char *const _ArgList[]) ;
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) spawnve(int,const char *_Filename,char *const _ArgList[],char *const _Env[]) ;
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) spawnvp(int,const char *_Filename,char *const _ArgList[]) ;
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) spawnvpe(int,const char *_Filename,char *const _ArgList[],char *const _Env[]) ;




}
# 67 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/pthread.h" 2 3

# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/signal.h" 1 3
# 10 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/signal.h" 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/pthread_signal.h" 1 3
# 11 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/signal.h" 2 3


extern "C" {




  typedef int sig_atomic_t;
# 48 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/signal.h" 3
  typedef void (*__p_sig_fn_t)(int);
# 57 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/signal.h" 3
  extern void **__attribute__((__cdecl__)) __pxcptinfoptrs(void);


  __p_sig_fn_t __attribute__((__cdecl__)) signal(int _SigNum,__p_sig_fn_t _Func);
  int __attribute__((__cdecl__)) raise(int _SigNum);


}
# 69 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/pthread.h" 2 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/time.h" 1 3
# 25 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/time.h" 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/sys/timeb.h" 1 3
# 15 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/sys/timeb.h" 3
#pragma pack(push,_CRT_PACKING)


extern "C" {
# 53 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/sys/timeb.h" 3
  struct __timeb32 {
    __time32_t time;
    unsigned short millitm;
    short timezone;
    short dstflag;
  };


  struct timeb {
    time_t time;
    unsigned short millitm;
    short timezone;
    short dstflag;
  };


  struct __timeb64 {
    __time64_t time;
    unsigned short millitm;
    short timezone;
    short dstflag;
  };



  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _ftime64(struct __timeb64 *_Time);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _ftime32(struct __timeb32 *_Time);
# 89 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/sys/timeb.h" 3
struct _timespec32 {
  __time32_t tv_sec;
  long tv_nsec;
};

struct _timespec64 {
  __time64_t tv_sec;
  long tv_nsec;
};
# 113 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/sys/timeb.h" 3
  void __attribute__((__cdecl__)) ftime (struct timeb *);
# 130 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/sys/timeb.h" 3
}


#pragma pack(pop)

# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/sec_api/sys/timeb_s.h" 1 3
# 10 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/sec_api/sys/timeb_s.h" 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/sys/timeb.h" 1 3
# 11 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/sec_api/sys/timeb_s.h" 2 3


extern "C" {


  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _ftime32_s(struct __timeb32 *_Time);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _ftime64_s(struct __timeb64 *_Time);
# 26 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/sec_api/sys/timeb_s.h" 3
}
# 136 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/sys/timeb.h" 2 3
# 26 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/time.h" 2 3

#pragma pack(push,_CRT_PACKING)


extern "C" {
# 63 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/time.h" 3
  typedef long clock_t;
# 129 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/time.h" 3
  extern __attribute__ ((__dllimport__)) int _daylight;
  extern __attribute__ ((__dllimport__)) long _dstbias;
  extern __attribute__ ((__dllimport__)) long _timezone;
  extern __attribute__ ((__dllimport__)) char * _tzname[2];


  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _get_daylight(int *_Daylight);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _get_dstbias(long *_Daylight_savings_bias);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _get_timezone(long *_Timezone);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _get_tzname(size_t *_ReturnValue,char *_Buffer,size_t _SizeInBytes,int _Index);
  char *__attribute__((__cdecl__)) asctime(const struct tm *_Tm) ;
  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) asctime_s (char *_Buf,size_t _SizeInWords,const struct tm *_Tm);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _ctime32(const __time32_t *_Time) ;
  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) _ctime32_s (char *_Buf,size_t _SizeInBytes,const __time32_t *_Time);
  clock_t __attribute__((__cdecl__)) clock(void);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _difftime32(__time32_t _Time1,__time32_t _Time2);
  __attribute__ ((__dllimport__)) struct tm *__attribute__((__cdecl__)) _gmtime32(const __time32_t *_Time) ;
  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) _gmtime32_s (struct tm *_Tm,const __time32_t *_Time);
  __attribute__ ((__dllimport__)) struct tm *__attribute__((__cdecl__)) _localtime32(const __time32_t *_Time) ;
  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) _localtime32_s (struct tm *_Tm,const __time32_t *_Time);
  size_t __attribute__((__cdecl__)) strftime(char * __restrict__ _Buf,size_t _SizeInBytes,const char * __restrict__ _Format,const struct tm * __restrict__ _Tm);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _strftime_l(char * __restrict__ _Buf,size_t _Max_size,const char * __restrict__ _Format,const struct tm * __restrict__ _Tm,_locale_t _Locale);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strdate(char *_Buffer) ;
  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) _strdate_s (char *_Buf,size_t _SizeInBytes);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strtime(char *_Buffer) ;
  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) _strtime_s (char *_Buf ,size_t _SizeInBytes);
  __attribute__ ((__dllimport__)) __time32_t __attribute__((__cdecl__)) _time32(__time32_t *_Time);



  __attribute__ ((__dllimport__)) __time32_t __attribute__((__cdecl__)) _mktime32(struct tm *_Tm);
  __attribute__ ((__dllimport__)) __time32_t __attribute__((__cdecl__)) _mkgmtime32(struct tm *_Tm);


  void __attribute__((__cdecl__)) tzset(void) ;



  __attribute__ ((__dllimport__))

  void __attribute__((__cdecl__)) _tzset(void);


  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _difftime64(__time64_t _Time1,__time64_t _Time2);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _ctime64(const __time64_t *_Time) ;
  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) _ctime64_s (char *_Buf,size_t _SizeInBytes,const __time64_t *_Time);
  __attribute__ ((__dllimport__)) struct tm *__attribute__((__cdecl__)) _gmtime64(const __time64_t *_Time) ;
  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) _gmtime64_s (struct tm *_Tm,const __time64_t *_Time);
  __attribute__ ((__dllimport__)) struct tm *__attribute__((__cdecl__)) _localtime64(const __time64_t *_Time) ;
  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) _localtime64_s (struct tm *_Tm,const __time64_t *_Time);
  __attribute__ ((__dllimport__)) __time64_t __attribute__((__cdecl__)) _mktime64(struct tm *_Tm);
  __attribute__ ((__dllimport__)) __time64_t __attribute__((__cdecl__)) _mkgmtime64(struct tm *_Tm);
  __attribute__ ((__dllimport__)) __time64_t __attribute__((__cdecl__)) _time64(__time64_t *_Time);



  unsigned __attribute__((__cdecl__)) _getsystime(struct tm *_Tm);
  unsigned __attribute__((__cdecl__)) _setsystime(struct tm *_Tm,unsigned _MilliSec);
# 246 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/time.h" 3
static __inline time_t __attribute__((__cdecl__)) time(time_t *_Time) { return _time64(_Time); }



static __inline double __attribute__((__cdecl__)) difftime(time_t _Time1,time_t _Time2) { return _difftime64(_Time1,_Time2); }
static __inline struct tm *__attribute__((__cdecl__)) localtime(const time_t *_Time) { return _localtime64(_Time); }
static __inline errno_t __attribute__((__cdecl__)) localtime_s(struct tm *_Tm,const time_t *_Time) { return _localtime64_s(_Tm,_Time); }
static __inline struct tm *__attribute__((__cdecl__)) gmtime(const time_t *_Time) { return _gmtime64(_Time); }
static __inline errno_t __attribute__((__cdecl__)) gmtime_s(struct tm *_Tm, const time_t *_Time) { return _gmtime64_s(_Tm, _Time); }
static __inline char *__attribute__((__cdecl__)) ctime(const time_t *_Time) { return _ctime64(_Time); }
static __inline errno_t __attribute__((__cdecl__)) ctime_s(char *_Buf,size_t _SizeInBytes,const time_t *_Time) { return _ctime64_s(_Buf,_SizeInBytes,_Time); }
static __inline time_t __attribute__((__cdecl__)) mktime(struct tm *_Tm) { return _mktime64(_Tm); }
static __inline time_t __attribute__((__cdecl__)) _mkgmtime(struct tm *_Tm) { return _mkgmtime64(_Tm); }
# 275 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/time.h" 3
  __attribute__ ((__dllimport__)) extern int daylight ;
  __attribute__ ((__dllimport__)) extern long timezone ;
  __attribute__ ((__dllimport__)) extern char *tzname[2] ;
  void __attribute__((__cdecl__)) tzset(void) ;


# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/_timeval.h" 1 3
# 10 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/_timeval.h" 3
struct timeval
{
 long tv_sec;
 long tv_usec;
};
# 282 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/time.h" 2 3



struct timezone {
  int tz_minuteswest;
  int tz_dsttime;
};

  extern int __attribute__((__cdecl__)) mingw_gettimeofday (struct timeval *p, struct timezone *z);


#pragma pack(pop)
# 315 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/time.h" 3
}
# 324 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/time.h" 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/pthread_time.h" 1 3
# 49 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/pthread_time.h" 3
typedef int clockid_t;
# 78 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/pthread_time.h" 3
extern "C" {
# 88 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/pthread_time.h" 3
int __attribute__((__cdecl__)) nanosleep(const struct timespec *request, struct timespec *remain);

int __attribute__((__cdecl__)) clock_nanosleep(clockid_t clock_id, int flags, const struct timespec *request, struct timespec *remain);
int __attribute__((__cdecl__)) clock_getres(clockid_t clock_id, struct timespec *res);
int __attribute__((__cdecl__)) clock_gettime(clockid_t clock_id, struct timespec *tp);
int __attribute__((__cdecl__)) clock_settime(clockid_t clock_id, const struct timespec *tp);




}
# 325 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/time.h" 2 3
# 70 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/pthread.h" 2 3



# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/pthread_compat.h" 1 3
# 74 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/pthread.h" 2 3


extern "C" {
# 161 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/pthread.h" 3
void * pthread_timechange_handler_np(void * dummy);
int pthread_delay_np (const struct timespec *interval);
int pthread_num_processors_np(void);
int pthread_set_num_processors_np(int n);
# 181 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/pthread.h" 3
typedef long pthread_once_t;
typedef unsigned pthread_mutexattr_t;
typedef unsigned pthread_key_t;
typedef void *pthread_barrierattr_t;
typedef int pthread_condattr_t;
typedef int pthread_rwlockattr_t;
# 197 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/pthread.h" 3
typedef uintptr_t pthread_t;

typedef struct _pthread_cleanup _pthread_cleanup;
struct _pthread_cleanup
{
    void (*func)(void *);
    void *arg;
    _pthread_cleanup *next;
};
# 226 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/pthread.h" 3
struct sched_param {
  int sched_priority;
};

int sched_yield(void);
int sched_get_priority_min(int pol);
int sched_get_priority_max(int pol);
int sched_getscheduler(pid_t pid);
int sched_setscheduler(pid_t pid, int pol, const struct sched_param *param);



typedef struct pthread_attr_t pthread_attr_t;
struct pthread_attr_t
{
    unsigned p_state;
    void *stack;
    size_t s_size;
    struct sched_param param;
};

int pthread_attr_setschedparam(pthread_attr_t *attr, const struct sched_param *param);
int pthread_attr_getschedparam(const pthread_attr_t *attr, struct sched_param *param);
int pthread_getschedparam(pthread_t thread, int *pol, struct sched_param *param);
int pthread_setschedparam(pthread_t thread, int pol, const struct sched_param *param);
int pthread_attr_setschedpolicy (pthread_attr_t *attr, int pol);
int pthread_attr_getschedpolicy (const pthread_attr_t *attr, int *pol);


typedef intptr_t pthread_spinlock_t;
typedef intptr_t pthread_mutex_t;
typedef intptr_t pthread_cond_t;
typedef intptr_t pthread_rwlock_t;
typedef void *pthread_barrier_t;
# 278 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/pthread.h" 3
extern void (**_pthread_key_dest)(void *);
int pthread_key_create(pthread_key_t *key, void (* dest)(void *));
int pthread_key_delete(pthread_key_t key);
void * pthread_getspecific(pthread_key_t key);
int pthread_setspecific(pthread_key_t key, const void *value);

pthread_t pthread_self(void);
int pthread_once(pthread_once_t *o, void (*func)(void));
void pthread_testcancel(void);
int pthread_equal(pthread_t t1, pthread_t t2);
void pthread_tls_init(void);
void _pthread_cleanup_dest(pthread_t t);
int pthread_get_concurrency(int *val);
int pthread_set_concurrency(int val);
void pthread_exit(void *res);
void _pthread_invoke_cancel(void);
int pthread_cancel(pthread_t t);
int pthread_kill(pthread_t t, int sig);
unsigned _pthread_get_state(const pthread_attr_t *attr, unsigned flag);
int _pthread_set_state(pthread_attr_t *attr, unsigned flag, unsigned val);
int pthread_setcancelstate(int state, int *oldstate);
int pthread_setcanceltype(int type, int *oldtype);
int pthread_create_wrapper(void *args);
int pthread_create(pthread_t *th, const pthread_attr_t *attr, void *(* func)(void *), void *arg);
int pthread_join(pthread_t t, void **res);
int pthread_detach(pthread_t t);
int pthread_setname_np(pthread_t thread, const char *name);
int pthread_getname_np(pthread_t thread, char *name, size_t len);


int pthread_rwlock_init(pthread_rwlock_t *rwlock_, const pthread_rwlockattr_t *attr);
int pthread_rwlock_wrlock(pthread_rwlock_t *l);
int pthread_rwlock_timedwrlock(pthread_rwlock_t *rwlock, const struct timespec *ts);
int pthread_rwlock_rdlock(pthread_rwlock_t *l);
int pthread_rwlock_timedrdlock(pthread_rwlock_t *l, const struct timespec *ts);
int pthread_rwlock_unlock(pthread_rwlock_t *l);
int pthread_rwlock_tryrdlock(pthread_rwlock_t *l);
int pthread_rwlock_trywrlock(pthread_rwlock_t *l);
int pthread_rwlock_destroy (pthread_rwlock_t *l);

int pthread_cond_init(pthread_cond_t *cv, const pthread_condattr_t *a);
int pthread_cond_destroy(pthread_cond_t *cv);
int pthread_cond_signal (pthread_cond_t *cv);
int pthread_cond_broadcast (pthread_cond_t *cv);
int pthread_cond_wait (pthread_cond_t *cv, pthread_mutex_t *external_mutex);
int pthread_cond_timedwait(pthread_cond_t *cv, pthread_mutex_t *external_mutex, const struct timespec *t);
int pthread_cond_timedwait_relative_np(pthread_cond_t *cv, pthread_mutex_t *external_mutex, const struct timespec *t);

int pthread_mutex_lock(pthread_mutex_t *m);
int pthread_mutex_timedlock(pthread_mutex_t *m, const struct timespec *ts);
int pthread_mutex_unlock(pthread_mutex_t *m);
int pthread_mutex_trylock(pthread_mutex_t *m);
int pthread_mutex_init(pthread_mutex_t *m, const pthread_mutexattr_t *a);
int pthread_mutex_destroy(pthread_mutex_t *m);

int pthread_barrier_destroy(pthread_barrier_t *b);
int pthread_barrier_init(pthread_barrier_t *b, const void *attr, unsigned int count);
int pthread_barrier_wait(pthread_barrier_t *b);

int pthread_spin_init(pthread_spinlock_t *l, int pshared);
int pthread_spin_destroy(pthread_spinlock_t *l);

int pthread_spin_lock(pthread_spinlock_t *l);
int pthread_spin_trylock(pthread_spinlock_t *l);
int pthread_spin_unlock(pthread_spinlock_t *l);

int pthread_attr_init(pthread_attr_t *attr);
int pthread_attr_destroy(pthread_attr_t *attr);
int pthread_attr_setdetachstate(pthread_attr_t *a, int flag);
int pthread_attr_getdetachstate(const pthread_attr_t *a, int *flag);
int pthread_attr_setinheritsched(pthread_attr_t *a, int flag);
int pthread_attr_getinheritsched(const pthread_attr_t *a, int *flag);
int pthread_attr_setscope(pthread_attr_t *a, int flag);
int pthread_attr_getscope(const pthread_attr_t *a, int *flag);
int pthread_attr_getstack(const pthread_attr_t *attr, void **stack, size_t *size);
int pthread_attr_setstack(pthread_attr_t *attr, void *stack, size_t size);
int pthread_attr_getstackaddr(const pthread_attr_t *attr, void **stack);
int pthread_attr_setstackaddr(pthread_attr_t *attr, void *stack);
int pthread_attr_getstacksize(const pthread_attr_t *attr, size_t *size);
int pthread_attr_setstacksize(pthread_attr_t *attr, size_t size);

int pthread_mutexattr_init(pthread_mutexattr_t *a);
int pthread_mutexattr_destroy(pthread_mutexattr_t *a);
int pthread_mutexattr_gettype(const pthread_mutexattr_t *a, int *type);
int pthread_mutexattr_settype(pthread_mutexattr_t *a, int type);
int pthread_mutexattr_getpshared(const pthread_mutexattr_t *a, int *type);
int pthread_mutexattr_setpshared(pthread_mutexattr_t * a, int type);
int pthread_mutexattr_getprotocol(const pthread_mutexattr_t *a, int *type);
int pthread_mutexattr_setprotocol(pthread_mutexattr_t *a, int type);
int pthread_mutexattr_getprioceiling(const pthread_mutexattr_t *a, int * prio);
int pthread_mutexattr_setprioceiling(pthread_mutexattr_t *a, int prio);
int pthread_getconcurrency(void);
int pthread_setconcurrency(int new_level);

int pthread_condattr_destroy(pthread_condattr_t *a);
int pthread_condattr_init(pthread_condattr_t *a);
int pthread_condattr_getpshared(const pthread_condattr_t *a, int *s);
int pthread_condattr_setpshared(pthread_condattr_t *a, int s);






int pthread_condattr_getclock (const pthread_condattr_t *attr,
       clockid_t *clock_id);
int pthread_condattr_setclock(pthread_condattr_t *attr,
       clockid_t clock_id);
int __pthread_clock_nanosleep(clockid_t clock_id, int flags, const struct timespec *rqtp, struct timespec *rmtp);

int pthread_barrierattr_init(void **attr);
int pthread_barrierattr_destroy(void **attr);
int pthread_barrierattr_setpshared(void **attr, int s);
int pthread_barrierattr_getpshared(void **attr, int *s);


struct _pthread_cleanup ** pthread_getclean (void);
void * pthread_gethandle (pthread_t t);
void * pthread_getevent (void);

unsigned long long _pthread_rel_time_in_ms(const struct timespec *ts);
unsigned long long _pthread_time_in_ms(void);
unsigned long long _pthread_time_in_ms_from_timespec(const struct timespec *ts);
int _pthread_tryjoin (pthread_t t, void **res);
int pthread_rwlockattr_destroy(pthread_rwlockattr_t *a);
int pthread_rwlockattr_getpshared(pthread_rwlockattr_t *a, int *s);
int pthread_rwlockattr_init(pthread_rwlockattr_t *a);
int pthread_rwlockattr_setpshared(pthread_rwlockattr_t *a, int s);
# 417 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/pthread.h" 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/pthread_unistd.h" 1 3
# 418 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/pthread.h" 2 3
# 678 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/pthread.h" 3
}
# 36 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/x86_64-w64-mingw32/bits/gthr-default.h" 2 3
# 47 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/x86_64-w64-mingw32/bits/gthr-default.h" 3
typedef pthread_t __gthread_t;
typedef pthread_key_t __gthread_key_t;
typedef pthread_once_t __gthread_once_t;
typedef pthread_mutex_t __gthread_mutex_t;
typedef pthread_mutex_t __gthread_recursive_mutex_t;
typedef pthread_cond_t __gthread_cond_t;
typedef struct timespec __gthread_time_t;
# 299 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/x86_64-w64-mingw32/bits/gthr-default.h" 3
static inline int
__gthread_active_p (void)
{
  return 1;
}
# 659 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/x86_64-w64-mingw32/bits/gthr-default.h" 3
static inline int
__gthread_create (__gthread_t *__threadid, void *(*__func) (void*),
    void *__args)
{
  return pthread_create (__threadid, 0, __func, __args);
}

static inline int
__gthread_join (__gthread_t __threadid, void **__value_ptr)
{
  return pthread_join (__threadid, __value_ptr);
}

static inline int
__gthread_detach (__gthread_t __threadid)
{
  return pthread_detach (__threadid);
}

static inline int
__gthread_equal (__gthread_t __t1, __gthread_t __t2)
{
  return pthread_equal (__t1, __t2);
}

static inline __gthread_t
__gthread_self (void)
{
  return pthread_self ();
}

static inline int
__gthread_yield (void)
{
  return sched_yield ();
}

static inline int
__gthread_once (__gthread_once_t *__once, void (*__func) (void))
{
  if (__gthread_active_p ())
    return pthread_once (__once, __func);
  else
    return -1;
}

static inline int
__gthread_key_create (__gthread_key_t *__key, void (*__dtor) (void *))
{
  return pthread_key_create (__key, __dtor);
}

static inline int
__gthread_key_delete (__gthread_key_t __key)
{
  return pthread_key_delete (__key);
}

static inline void *
__gthread_getspecific (__gthread_key_t __key)
{
  return pthread_getspecific (__key);
}

static inline int
__gthread_setspecific (__gthread_key_t __key, const void *__ptr)
{
  return pthread_setspecific (__key, __ptr);
}

static inline void
__gthread_mutex_init_function (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    pthread_mutex_init (__mutex, 0);
}

static inline int
__gthread_mutex_destroy (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return pthread_mutex_destroy (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_lock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return pthread_mutex_lock (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_trylock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return pthread_mutex_trylock (__mutex);
  else
    return 0;
}


static inline int
__gthread_mutex_timedlock (__gthread_mutex_t *__mutex,
      const __gthread_time_t *__abs_timeout)
{
  if (__gthread_active_p ())
    return pthread_mutex_timedlock (__mutex, __abs_timeout);
  else
    return 0;
}


static inline int
__gthread_mutex_unlock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return pthread_mutex_unlock (__mutex);
  else
    return 0;
}



static inline int
__gthread_recursive_mutex_init_function (__gthread_recursive_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    {
      pthread_mutexattr_t __attr;
      int __r;

      __r = pthread_mutexattr_init (&__attr);
      if (!__r)
 __r = pthread_mutexattr_settype (&__attr,
         2);
      if (!__r)
 __r = pthread_mutex_init (__mutex, &__attr);
      if (!__r)
 __r = pthread_mutexattr_destroy (&__attr);
      return __r;
    }
  return 0;
}


static inline int
__gthread_recursive_mutex_lock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_lock (__mutex);
}

static inline int
__gthread_recursive_mutex_trylock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_trylock (__mutex);
}


static inline int
__gthread_recursive_mutex_timedlock (__gthread_recursive_mutex_t *__mutex,
         const __gthread_time_t *__abs_timeout)
{
  return __gthread_mutex_timedlock (__mutex, __abs_timeout);
}


static inline int
__gthread_recursive_mutex_unlock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_unlock (__mutex);
}

static inline int
__gthread_recursive_mutex_destroy (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_destroy (__mutex);
}
# 850 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/x86_64-w64-mingw32/bits/gthr-default.h" 3
static inline int
__gthread_cond_broadcast (__gthread_cond_t *__cond)
{
  return pthread_cond_broadcast (__cond);
}

static inline int
__gthread_cond_signal (__gthread_cond_t *__cond)
{
  return pthread_cond_signal (__cond);
}

static inline int
__gthread_cond_wait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex)
{
  return pthread_cond_wait (__cond, __mutex);
}

static inline int
__gthread_cond_timedwait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex,
     const __gthread_time_t *__abs_timeout)
{
  return pthread_cond_timedwait (__cond, __mutex, __abs_timeout);
}

static inline int
__gthread_cond_wait_recursive (__gthread_cond_t *__cond,
          __gthread_recursive_mutex_t *__mutex)
{
  return __gthread_cond_wait (__cond, __mutex);
}

static inline int
__gthread_cond_destroy (__gthread_cond_t* __cond)
{
  return pthread_cond_destroy (__cond);
}
# 149 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/x86_64-w64-mingw32/bits/gthr.h" 2 3


#pragma GCC visibility pop
# 36 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ext/atomicity.h" 2 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/x86_64-w64-mingw32/bits/atomic_word.h" 1 3
# 32 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/x86_64-w64-mingw32/bits/atomic_word.h" 3
typedef int _Atomic_word;
# 37 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ext/atomicity.h" 2 3

namespace __gnu_cxx
{







  static inline _Atomic_word
  __exchange_and_add(volatile _Atomic_word* __mem, int __val)
  { return __atomic_fetch_add(__mem, __val, 4); }

  static inline void
  __atomic_add(volatile _Atomic_word* __mem, int __val)
  { __atomic_fetch_add(__mem, __val, 4); }
# 64 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ext/atomicity.h" 3
  static inline _Atomic_word
  __exchange_and_add_single(_Atomic_word* __mem, int __val)
  {
    _Atomic_word __result = *__mem;
    *__mem += __val;
    return __result;
  }

  static inline void
  __atomic_add_single(_Atomic_word* __mem, int __val)
  { *__mem += __val; }

  static inline _Atomic_word
  __attribute__ ((__unused__))
  __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      return __exchange_and_add(__mem, __val);
    else
      return __exchange_and_add_single(__mem, __val);



  }

  static inline void
  __attribute__ ((__unused__))
  __atomic_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      __atomic_add(__mem, __val);
    else
      __atomic_add_single(__mem, __val);



  }


}
# 40 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/ios_base.h" 2 3

# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_classes.h" 1 3
# 38 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_classes.h" 3


# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/string" 1 3
# 37 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/string" 3




# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/allocator.h" 1 3
# 46 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/allocator.h" 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/x86_64-w64-mingw32/bits/c++allocator.h" 1 3
# 33 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/x86_64-w64-mingw32/bits/c++allocator.h" 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ext/new_allocator.h" 1 3
# 40 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ext/new_allocator.h" 3
namespace __gnu_cxx
{


  using std::size_t;
  using std::ptrdiff_t;
# 57 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ext/new_allocator.h" 3
  template<typename _Tp>
    class new_allocator
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
 struct rebind
 { typedef new_allocator<_Tp1> other; };




      typedef std::true_type propagate_on_container_move_assignment;



      new_allocator() noexcept { }


      new_allocator(const new_allocator&) noexcept { }

      template<typename _Tp1>

 new_allocator(const new_allocator<_Tp1>&) noexcept { }

      ~new_allocator() noexcept { }

      pointer
      address(reference __x) const noexcept
      { return std::__addressof(__x); }

      const_pointer
      address(const_reference __x) const noexcept
      { return std::__addressof(__x); }



                         pointer
      allocate(size_type __n, const void* = static_cast<const void*>(0))
      {
 if (__n > this->max_size())
   std::__throw_bad_alloc();
# 114 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ext/new_allocator.h" 3
 return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }


      void
      deallocate(pointer __p, size_type)
      {







 ::operator delete(__p);
      }

      size_type
      max_size() const noexcept
      {

 return size_t(9223372036854775807LL) / sizeof(_Tp);



      }


      template<typename _Up, typename... _Args>
 void
 construct(_Up* __p, _Args&&... __args)
 noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
 void
 destroy(_Up* __p)
 noexcept(std::is_nothrow_destructible<_Up>::value)
 { __p->~_Up(); }
# 164 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ext/new_allocator.h" 3
      template<typename _Up>
 friend bool
 operator==(const new_allocator&, const new_allocator<_Up>&)
 noexcept
 { return true; }

      template<typename _Up>
 friend bool
 operator!=(const new_allocator&, const new_allocator<_Up>&)
 noexcept
 { return false; }
    };


}
# 34 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/x86_64-w64-mingw32/bits/c++allocator.h" 2 3


namespace std
{
# 47 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/x86_64-w64-mingw32/bits/c++allocator.h" 3
  template<typename _Tp>
    using __allocator_base = __gnu_cxx::new_allocator<_Tp>;
}
# 47 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/allocator.h" 2 3
# 57 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/allocator.h" 3
namespace std
{
# 67 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/allocator.h" 3
  template<>
    class allocator<void>
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef void* pointer;
      typedef const void* const_pointer;
      typedef void value_type;

      template<typename _Tp1>
 struct rebind
 { typedef allocator<_Tp1> other; };




      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;

      template<typename _Up, typename... _Args>
 void
 construct(_Up* __p, _Args&&... __args)
 noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
 void
 destroy(_Up* __p)
 noexcept(std::is_nothrow_destructible<_Up>::value)
 { __p->~_Up(); }

    };
# 110 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/allocator.h" 3
  template<typename _Tp>
    class allocator : public __allocator_base<_Tp>
    {
   public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
 struct rebind
 { typedef allocator<_Tp1> other; };




      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;





      allocator() noexcept { }


      allocator(const allocator& __a) noexcept
      : __allocator_base<_Tp>(__a) { }



      allocator& operator=(const allocator&) = default;


      template<typename _Tp1>

 allocator(const allocator<_Tp1>&) noexcept { }

      ~allocator() noexcept { }

      friend bool
      operator==(const allocator&, const allocator&) noexcept
      { return true; }

      friend bool
      operator!=(const allocator&, const allocator&) noexcept
      { return false; }


    };

  template<typename _T1, typename _T2>
    inline bool
    operator==(const allocator<_T1>&, const allocator<_T2>&)
    noexcept
    { return true; }

  template<typename _T1, typename _T2>
    inline bool
    operator!=(const allocator<_T1>&, const allocator<_T2>&)
    noexcept
    { return false; }



  template<typename _Tp>
    class allocator<const _Tp>
    {
    public:
      typedef _Tp value_type;
      template<typename _Up> allocator(const allocator<_Up>&) { }
    };

  template<typename _Tp>
    class allocator<volatile _Tp>
    {
    public:
      typedef _Tp value_type;
      template<typename _Up> allocator(const allocator<_Up>&) { }
    };

  template<typename _Tp>
    class allocator<const volatile _Tp>
    {
    public:
      typedef _Tp value_type;
      template<typename _Up> allocator(const allocator<_Up>&) { }
    };






  extern template class allocator<char>;
  extern template class allocator<wchar_t>;






  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_swap
    { static void _S_do_it(_Alloc&, _Alloc&) noexcept { } };

  template<typename _Alloc>
    struct __alloc_swap<_Alloc, false>
    {
      static void
      _S_do_it(_Alloc& __one, _Alloc& __two) noexcept
      {

 if (__one != __two)
   swap(__one, __two);
      }
    };


  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_neq
    {
      static bool
      _S_do_it(const _Alloc&, const _Alloc&)
      { return false; }
    };

  template<typename _Alloc>
    struct __alloc_neq<_Alloc, false>
    {
      static bool
      _S_do_it(const _Alloc& __one, const _Alloc& __two)
      { return __one != __two; }
    };


  template<typename _Tp, bool
    = __or_<is_copy_constructible<typename _Tp::value_type>,
            is_nothrow_move_constructible<typename _Tp::value_type>>::value>
    struct __shrink_to_fit_aux
    { static bool _S_do_it(_Tp&) noexcept { return false; } };

  template<typename _Tp>
    struct __shrink_to_fit_aux<_Tp, true>
    {
      static bool
      _S_do_it(_Tp& __c) noexcept
      {

 try
   {
     _Tp(__make_move_if_noexcept_iterator(__c.begin()),
  __make_move_if_noexcept_iterator(__c.end()),
  __c.get_allocator()).swap(__c);
     return true;
   }
 catch(...)
   { return false; }



      }
    };



}
# 42 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/string" 2 3


# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/ostream_insert.h" 1 3
# 34 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/ostream_insert.h" 3


# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/cxxabi_forced.h" 1 3
# 35 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/cxxabi_forced.h" 3

#pragma GCC visibility push(default)


namespace __cxxabiv1
{







  class __forced_unwind
  {
    virtual ~__forced_unwind() throw();


    virtual void __pure_dummy() = 0;
  };
}


#pragma GCC visibility pop
# 37 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/ostream_insert.h" 2 3

namespace std
{


  template<typename _CharT, typename _Traits>
    inline void
    __ostream_write(basic_ostream<_CharT, _Traits>& __out,
      const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const streamsize __put = __out.rdbuf()->sputn(__s, __n);
      if (__put != __n)
 __out.setstate(__ios_base::badbit);
    }

  template<typename _CharT, typename _Traits>
    inline void
    __ostream_fill(basic_ostream<_CharT, _Traits>& __out, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const _CharT __c = __out.fill();
      for (; __n > 0; --__n)
 {
   const typename _Traits::int_type __put = __out.rdbuf()->sputc(__c);
   if (_Traits::eq_int_type(__put, _Traits::eof()))
     {
       __out.setstate(__ios_base::badbit);
       break;
     }
 }
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    __ostream_insert(basic_ostream<_CharT, _Traits>& __out,
       const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      typename __ostream_type::sentry __cerb(__out);
      if (__cerb)
 {
   try
     {
       const streamsize __w = __out.width();
       if (__w > __n)
  {
    const bool __left = ((__out.flags()
     & __ios_base::adjustfield)
           == __ios_base::left);
    if (!__left)
      __ostream_fill(__out, __w - __n);
    if (__out.good())
      __ostream_write(__out, __s, __n);
    if (__left && __out.good())
      __ostream_fill(__out, __w - __n);
  }
       else
  __ostream_write(__out, __s, __n);
       __out.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __out._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     { __out._M_setstate(__ios_base::badbit); }
 }
      return __out;
    }




  extern template ostream& __ostream_insert(ostream&, const char*, streamsize);


  extern template wostream& __ostream_insert(wostream&, const wchar_t*,
          streamsize);




}
# 45 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/string" 2 3



# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_function.h" 1 3
# 63 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_function.h" 3
namespace std
{
# 104 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    struct unary_function
    {

      typedef _Arg argument_type;


      typedef _Result result_type;
    };




  template<typename _Arg1, typename _Arg2, typename _Result>
    struct binary_function
    {

      typedef _Arg1 first_argument_type;


      typedef _Arg2 second_argument_type;


      typedef _Result result_type;
    };
# 144 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_function.h" 3
  struct __is_transparent;

  template<typename _Tp = void>
    struct plus;

  template<typename _Tp = void>
    struct minus;

  template<typename _Tp = void>
    struct multiplies;

  template<typename _Tp = void>
    struct divides;

  template<typename _Tp = void>
    struct modulus;

  template<typename _Tp = void>
    struct negate;



  template<typename _Tp>
    struct plus : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x + __y; }
    };


  template<typename _Tp>
    struct minus : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x - __y; }
    };


  template<typename _Tp>
    struct multiplies : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x * __y; }
    };


  template<typename _Tp>
    struct divides : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x / __y; }
    };


  template<typename _Tp>
    struct modulus : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x % __y; }
    };


  template<typename _Tp>
    struct negate : public unary_function<_Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x) const
      { return -__x; }
    };





  template<>
    struct plus<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) + std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) + std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) + std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct minus<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) - std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) - std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) - std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct multiplies<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) * std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) * std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) * std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct divides<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) / std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) / std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) / std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct modulus<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) % std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) % std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) % std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct negate<void>
    {
      template <typename _Tp>
 constexpr
 auto
 operator()(_Tp&& __t) const
 noexcept(noexcept(-std::forward<_Tp>(__t)))
 -> decltype(-std::forward<_Tp>(__t))
 { return -std::forward<_Tp>(__t); }

      typedef __is_transparent is_transparent;
    };
# 330 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_function.h" 3
  template<typename _Tp = void>
    struct equal_to;

  template<typename _Tp = void>
    struct not_equal_to;

  template<typename _Tp = void>
    struct greater;

  template<typename _Tp = void>
    struct less;

  template<typename _Tp = void>
    struct greater_equal;

  template<typename _Tp = void>
    struct less_equal;



  template<typename _Tp>
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x == __y; }
    };


  template<typename _Tp>
    struct not_equal_to : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x != __y; }
    };


  template<typename _Tp>
    struct greater : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x > __y; }
    };


  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
    };


  template<typename _Tp>
    struct greater_equal : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x >= __y; }
    };


  template<typename _Tp>
    struct less_equal : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x <= __y; }
    };


  template<typename _Tp>
    struct greater<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      constexpr bool
      operator()(_Tp* __x, _Tp* __y) const noexcept
      {


 if (__builtin_is_constant_evaluated())



   return __x > __y;

 return (long long unsigned int)__x > (long long unsigned int)__y;
      }
    };


  template<typename _Tp>
    struct less<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      constexpr bool
      operator()(_Tp* __x, _Tp* __y) const noexcept
      {


 if (__builtin_is_constant_evaluated())



   return __x < __y;

 return (long long unsigned int)__x < (long long unsigned int)__y;
      }
    };


  template<typename _Tp>
    struct greater_equal<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      constexpr bool
      operator()(_Tp* __x, _Tp* __y) const noexcept
      {


 if (__builtin_is_constant_evaluated())



   return __x >= __y;

 return (long long unsigned int)__x >= (long long unsigned int)__y;
      }
    };


  template<typename _Tp>
    struct less_equal<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      constexpr bool
      operator()(_Tp* __x, _Tp* __y) const noexcept
      {


 if (__builtin_is_constant_evaluated())



   return __x <= __y;

 return (long long unsigned int)__x <= (long long unsigned int)__y;
      }
    };



  template<>
    struct equal_to<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) == std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) == std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) == std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct not_equal_to<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) != std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) != std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) != std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct greater<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) > std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) > std::forward<_Up>(__u))
 {
   return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u),
   __ptr_cmp<_Tp, _Up>{});
 }

      template<typename _Tp, typename _Up>
 constexpr bool
 operator()(_Tp* __t, _Up* __u) const noexcept
 { return greater<common_type_t<_Tp*, _Up*>>{}(__t, __u); }

      typedef __is_transparent is_transparent;

    private:
      template <typename _Tp, typename _Up>
 static constexpr decltype(auto)
 _S_cmp(_Tp&& __t, _Up&& __u, false_type)
 { return std::forward<_Tp>(__t) > std::forward<_Up>(__u); }

      template <typename _Tp, typename _Up>
 static constexpr bool
 _S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept
 {
   return greater<const volatile void*>{}(
       static_cast<const volatile void*>(std::forward<_Tp>(__t)),
       static_cast<const volatile void*>(std::forward<_Up>(__u)));
 }


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded2 : true_type { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded2<_Tp, _Up, __void_t<
   decltype(std::declval<_Tp>().operator>(std::declval<_Up>()))>>
 : false_type { };


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded<_Tp, _Up, __void_t<
   decltype(operator>(std::declval<_Tp>(), std::declval<_Up>()))>>
 : false_type { };

      template<typename _Tp, typename _Up>
 using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,
       is_convertible<_Tp, const volatile void*>,
       is_convertible<_Up, const volatile void*>>;
    };


  template<>
    struct less<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) < std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) < std::forward<_Up>(__u))
 {
   return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u),
   __ptr_cmp<_Tp, _Up>{});
 }

      template<typename _Tp, typename _Up>
 constexpr bool
 operator()(_Tp* __t, _Up* __u) const noexcept
 { return less<common_type_t<_Tp*, _Up*>>{}(__t, __u); }

      typedef __is_transparent is_transparent;

    private:
      template <typename _Tp, typename _Up>
 static constexpr decltype(auto)
 _S_cmp(_Tp&& __t, _Up&& __u, false_type)
 { return std::forward<_Tp>(__t) < std::forward<_Up>(__u); }

      template <typename _Tp, typename _Up>
 static constexpr bool
 _S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept
 {
   return less<const volatile void*>{}(
       static_cast<const volatile void*>(std::forward<_Tp>(__t)),
       static_cast<const volatile void*>(std::forward<_Up>(__u)));
 }


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded2 : true_type { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded2<_Tp, _Up, __void_t<
   decltype(std::declval<_Tp>().operator<(std::declval<_Up>()))>>
 : false_type { };


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded<_Tp, _Up, __void_t<
   decltype(operator<(std::declval<_Tp>(), std::declval<_Up>()))>>
 : false_type { };

      template<typename _Tp, typename _Up>
 using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,
       is_convertible<_Tp, const volatile void*>,
       is_convertible<_Up, const volatile void*>>;
    };


  template<>
    struct greater_equal<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) >= std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) >= std::forward<_Up>(__u))
 {
   return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u),
   __ptr_cmp<_Tp, _Up>{});
 }

      template<typename _Tp, typename _Up>
 constexpr bool
 operator()(_Tp* __t, _Up* __u) const noexcept
 { return greater_equal<common_type_t<_Tp*, _Up*>>{}(__t, __u); }

      typedef __is_transparent is_transparent;

    private:
      template <typename _Tp, typename _Up>
 static constexpr decltype(auto)
 _S_cmp(_Tp&& __t, _Up&& __u, false_type)
 { return std::forward<_Tp>(__t) >= std::forward<_Up>(__u); }

      template <typename _Tp, typename _Up>
 static constexpr bool
 _S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept
 {
   return greater_equal<const volatile void*>{}(
       static_cast<const volatile void*>(std::forward<_Tp>(__t)),
       static_cast<const volatile void*>(std::forward<_Up>(__u)));
 }


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded2 : true_type { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded2<_Tp, _Up, __void_t<
   decltype(std::declval<_Tp>().operator>=(std::declval<_Up>()))>>
 : false_type { };


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded<_Tp, _Up, __void_t<
   decltype(operator>=(std::declval<_Tp>(), std::declval<_Up>()))>>
 : false_type { };

      template<typename _Tp, typename _Up>
 using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,
       is_convertible<_Tp, const volatile void*>,
       is_convertible<_Up, const volatile void*>>;
    };


  template<>
    struct less_equal<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) <= std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) <= std::forward<_Up>(__u))
 {
   return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u),
   __ptr_cmp<_Tp, _Up>{});
 }

      template<typename _Tp, typename _Up>
 constexpr bool
 operator()(_Tp* __t, _Up* __u) const noexcept
 { return less_equal<common_type_t<_Tp*, _Up*>>{}(__t, __u); }

      typedef __is_transparent is_transparent;

    private:
      template <typename _Tp, typename _Up>
 static constexpr decltype(auto)
 _S_cmp(_Tp&& __t, _Up&& __u, false_type)
 { return std::forward<_Tp>(__t) <= std::forward<_Up>(__u); }

      template <typename _Tp, typename _Up>
 static constexpr bool
 _S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept
 {
   return less_equal<const volatile void*>{}(
       static_cast<const volatile void*>(std::forward<_Tp>(__t)),
       static_cast<const volatile void*>(std::forward<_Up>(__u)));
 }


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded2 : true_type { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded2<_Tp, _Up, __void_t<
   decltype(std::declval<_Tp>().operator<=(std::declval<_Up>()))>>
 : false_type { };


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded<_Tp, _Up, __void_t<
   decltype(operator<=(std::declval<_Tp>(), std::declval<_Up>()))>>
 : false_type { };

      template<typename _Tp, typename _Up>
 using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,
       is_convertible<_Tp, const volatile void*>,
       is_convertible<_Up, const volatile void*>>;
    };
# 774 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_function.h" 3
  template<typename _Tp = void>
    struct logical_and;

  template<typename _Tp = void>
    struct logical_or;

  template<typename _Tp = void>
    struct logical_not;



  template<typename _Tp>
    struct logical_and : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x && __y; }
    };


  template<typename _Tp>
    struct logical_or : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x || __y; }
    };


  template<typename _Tp>
    struct logical_not : public unary_function<_Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x) const
      { return !__x; }
    };



  template<>
    struct logical_and<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) && std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) && std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) && std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct logical_or<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) || std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) || std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) || std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct logical_not<void>
    {
      template <typename _Tp>
 constexpr
 auto
 operator()(_Tp&& __t) const
 noexcept(noexcept(!std::forward<_Tp>(__t)))
 -> decltype(!std::forward<_Tp>(__t))
 { return !std::forward<_Tp>(__t); }

      typedef __is_transparent is_transparent;
    };




  template<typename _Tp = void>
    struct bit_and;

  template<typename _Tp = void>
    struct bit_or;

  template<typename _Tp = void>
    struct bit_xor;

  template<typename _Tp = void>
    struct bit_not;




  template<typename _Tp>
    struct bit_and : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x & __y; }
    };

  template<typename _Tp>
    struct bit_or : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x | __y; }
    };

  template<typename _Tp>
    struct bit_xor : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x ^ __y; }
    };

  template<typename _Tp>
    struct bit_not : public unary_function<_Tp, _Tp>
    {
    constexpr
      _Tp
      operator()(const _Tp& __x) const
      { return ~__x; }
    };


  template <>
    struct bit_and<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) & std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) & std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) & std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };

  template <>
    struct bit_or<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) | std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) | std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) | std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };

  template <>
    struct bit_xor<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) ^ std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) ^ std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) ^ std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };

  template <>
    struct bit_not<void>
    {
      template <typename _Tp>
 constexpr
 auto
 operator()(_Tp&& __t) const
 noexcept(noexcept(~std::forward<_Tp>(__t)))
 -> decltype(~std::forward<_Tp>(__t))
 { return ~std::forward<_Tp>(__t); }

      typedef __is_transparent is_transparent;
    };
# 1002 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_function.h" 3
  template<typename _Predicate>
    class unary_negate
    : public unary_function<typename _Predicate::argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      constexpr
      explicit
      unary_negate(const _Predicate& __x) : _M_pred(__x) { }

      constexpr
      bool
      operator()(const typename _Predicate::argument_type& __x) const
      { return !_M_pred(__x); }
    };


  template<typename _Predicate>
    constexpr
    inline unary_negate<_Predicate>
    not1(const _Predicate& __pred)
    { return unary_negate<_Predicate>(__pred); }


  template<typename _Predicate>
    class binary_negate
    : public binary_function<typename _Predicate::first_argument_type,
        typename _Predicate::second_argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      constexpr
      explicit
      binary_negate(const _Predicate& __x) : _M_pred(__x) { }

      constexpr
      bool
      operator()(const typename _Predicate::first_argument_type& __x,
   const typename _Predicate::second_argument_type& __y) const
      { return !_M_pred(__x, __y); }
    };


  template<typename _Predicate>
    constexpr
    inline binary_negate<_Predicate>
    not2(const _Predicate& __pred)
    { return binary_negate<_Predicate>(__pred); }
# 1079 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    class pointer_to_unary_function : public unary_function<_Arg, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg);

    public:
      pointer_to_unary_function() { }

      explicit
      pointer_to_unary_function(_Result (*__x)(_Arg))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg __x) const
      { return _M_ptr(__x); }
    };


  template<typename _Arg, typename _Result>
    inline pointer_to_unary_function<_Arg, _Result>
    ptr_fun(_Result (*__x)(_Arg))
    { return pointer_to_unary_function<_Arg, _Result>(__x); }


  template<typename _Arg1, typename _Arg2, typename _Result>
    class pointer_to_binary_function
    : public binary_function<_Arg1, _Arg2, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg1, _Arg2);

    public:
      pointer_to_binary_function() { }

      explicit
      pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg1 __x, _Arg2 __y) const
      { return _M_ptr(__x, __y); }
    };


  template<typename _Arg1, typename _Arg2, typename _Result>
    inline pointer_to_binary_function<_Arg1, _Arg2, _Result>
    ptr_fun(_Result (*__x)(_Arg1, _Arg2))
    { return pointer_to_binary_function<_Arg1, _Arg2, _Result>(__x); }


  template<typename _Tp>
    struct _Identity
    : public unary_function<_Tp, _Tp>
    {
      _Tp&
      operator()(_Tp& __x) const
      { return __x; }

      const _Tp&
      operator()(const _Tp& __x) const
      { return __x; }
    };


  template<typename _Tp> struct _Identity<const _Tp> : _Identity<_Tp> { };

  template<typename _Pair>
    struct _Select1st
    : public unary_function<_Pair, typename _Pair::first_type>
    {
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }


      template<typename _Pair2>
        typename _Pair2::first_type&
        operator()(_Pair2& __x) const
        { return __x.first; }

      template<typename _Pair2>
        const typename _Pair2::first_type&
        operator()(const _Pair2& __x) const
        { return __x.first; }

    };

  template<typename _Pair>
    struct _Select2nd
    : public unary_function<_Pair, typename _Pair::second_type>
    {
      typename _Pair::second_type&
      operator()(_Pair& __x) const
      { return __x.second; }

      const typename _Pair::second_type&
      operator()(const _Pair& __x) const
      { return __x.second; }
    };
# 1202 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_function.h" 3
  template<typename _Ret, typename _Tp>
    class mem_fun_t : public unary_function<_Tp*, _Ret>
    {
    public:
      explicit
      mem_fun_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
    };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_t : public unary_function<const _Tp*, _Ret>
    {
    public:
      explicit
      const_mem_fun_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp>
    class mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      mem_fun_ref_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
  };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_t : public binary_function<const _Tp*, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp>
    inline mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)())
    { return mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)())
    { return mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }




}


# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/backward/binders.h" 1 3
# 60 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/backward/binders.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

namespace std
{
# 107 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/backward/binders.h" 3
  template<typename _Operation>
    class binder1st
    : public unary_function<typename _Operation::second_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::first_argument_type value;

    public:
      binder1st(const _Operation& __x,
  const typename _Operation::first_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }



      typename _Operation::result_type
      operator()(typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }
    } __attribute__ ((__deprecated__));


  template<typename _Operation, typename _Tp>
    inline binder1st<_Operation>
    bind1st(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::first_argument_type _Arg1_type;
      return binder1st<_Operation>(__fn, _Arg1_type(__x));
    }


  template<typename _Operation>
    class binder2nd
    : public unary_function<typename _Operation::first_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::second_argument_type value;

    public:
      binder2nd(const _Operation& __x,
  const typename _Operation::second_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }



      typename _Operation::result_type
      operator()(typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }
    } __attribute__ ((__deprecated__));


  template<typename _Operation, typename _Tp>
    inline binder2nd<_Operation>
    bind2nd(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::second_argument_type _Arg2_type;
      return binder2nd<_Operation>(__fn, _Arg2_type(__x));
    }



}

#pragma GCC diagnostic pop
# 1393 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_function.h" 2 3
# 49 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/string" 2 3





# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/range_access.h" 1 3
# 34 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/range_access.h" 3


# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/initializer_list" 1 3
# 34 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/initializer_list" 3





#pragma GCC visibility push(default)



namespace std
{

  template<class _E>
    class initializer_list
    {
    public:
      typedef _E value_type;
      typedef const _E& reference;
      typedef const _E& const_reference;
      typedef size_t size_type;
      typedef const _E* iterator;
      typedef const _E* const_iterator;

    private:
      iterator _M_array;
      size_type _M_len;


      constexpr initializer_list(const_iterator __a, size_type __l)
      : _M_array(__a), _M_len(__l) { }

    public:
      constexpr initializer_list() noexcept
      : _M_array(0), _M_len(0) { }


      constexpr size_type
      size() const noexcept { return _M_len; }


      constexpr const_iterator
      begin() const noexcept { return _M_array; }


      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
    };






  template<class _Tp>
    constexpr const _Tp*
    begin(initializer_list<_Tp> __ils) noexcept
    { return __ils.begin(); }






  template<class _Tp>
    constexpr const _Tp*
    end(initializer_list<_Tp> __ils) noexcept
    { return __ils.end(); }
}

#pragma GCC visibility pop
# 37 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/range_access.h" 2 3
namespace std
{







  template<typename _Container>
    inline auto
    begin(_Container& __cont) -> decltype(__cont.begin())
    { return __cont.begin(); }






  template<typename _Container>
    inline auto
    begin(const _Container& __cont) -> decltype(__cont.begin())
    { return __cont.begin(); }






  template<typename _Container>
    inline auto
    end(_Container& __cont) -> decltype(__cont.end())
    { return __cont.end(); }






  template<typename _Container>
    inline auto
    end(const _Container& __cont) -> decltype(__cont.end())
    { return __cont.end(); }





  template<typename _Tp, size_t _Nm>
    inline constexpr _Tp*
    begin(_Tp (&__arr)[_Nm]) noexcept
    { return __arr; }






  template<typename _Tp, size_t _Nm>
    inline constexpr _Tp*
    end(_Tp (&__arr)[_Nm]) noexcept
    { return __arr + _Nm; }



  template<typename _Tp> class valarray;

  template<typename _Tp> _Tp* begin(valarray<_Tp>&);
  template<typename _Tp> const _Tp* begin(const valarray<_Tp>&);
  template<typename _Tp> _Tp* end(valarray<_Tp>&);
  template<typename _Tp> const _Tp* end(const valarray<_Tp>&);






  template<typename _Container>
    inline constexpr auto
    cbegin(const _Container& __cont) noexcept(noexcept(std::begin(__cont)))
      -> decltype(std::begin(__cont))
    { return std::begin(__cont); }






  template<typename _Container>
    inline constexpr auto
    cend(const _Container& __cont) noexcept(noexcept(std::end(__cont)))
      -> decltype(std::end(__cont))
    { return std::end(__cont); }






  template<typename _Container>
    inline auto
    rbegin(_Container& __cont) -> decltype(__cont.rbegin())
    { return __cont.rbegin(); }






  template<typename _Container>
    inline auto
    rbegin(const _Container& __cont) -> decltype(__cont.rbegin())
    { return __cont.rbegin(); }






  template<typename _Container>
    inline auto
    rend(_Container& __cont) -> decltype(__cont.rend())
    { return __cont.rend(); }






  template<typename _Container>
    inline auto
    rend(const _Container& __cont) -> decltype(__cont.rend())
    { return __cont.rend(); }






  template<typename _Tp, size_t _Nm>
    inline reverse_iterator<_Tp*>
    rbegin(_Tp (&__arr)[_Nm]) noexcept
    { return reverse_iterator<_Tp*>(__arr + _Nm); }






  template<typename _Tp, size_t _Nm>
    inline reverse_iterator<_Tp*>
    rend(_Tp (&__arr)[_Nm]) noexcept
    { return reverse_iterator<_Tp*>(__arr); }






  template<typename _Tp>
    inline reverse_iterator<const _Tp*>
    rbegin(initializer_list<_Tp> __il) noexcept
    { return reverse_iterator<const _Tp*>(__il.end()); }






  template<typename _Tp>
    inline reverse_iterator<const _Tp*>
    rend(initializer_list<_Tp> __il) noexcept
    { return reverse_iterator<const _Tp*>(__il.begin()); }






  template<typename _Container>
    inline auto
    crbegin(const _Container& __cont) -> decltype(std::rbegin(__cont))
    { return std::rbegin(__cont); }






  template<typename _Container>
    inline auto
    crend(const _Container& __cont) -> decltype(std::rend(__cont))
    { return std::rend(__cont); }
# 324 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/range_access.h" 3
}
# 55 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/string" 2 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 1 3
# 38 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3


# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ext/alloc_traits.h" 1 3
# 33 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ext/alloc_traits.h" 3



# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/alloc_traits.h" 1 3
# 41 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/alloc_traits.h" 3
namespace std
{


  struct __allocator_traits_base
  {
    template<typename _Tp, typename _Up, typename = void>
      struct __rebind : __replace_first_arg<_Tp, _Up> { };

    template<typename _Tp, typename _Up>
      struct __rebind<_Tp, _Up,
        __void_t<typename _Tp::template rebind<_Up>::other>>
      { using type = typename _Tp::template rebind<_Up>::other; };

  protected:
    template<typename _Tp>
      using __pointer = typename _Tp::pointer;
    template<typename _Tp>
      using __c_pointer = typename _Tp::const_pointer;
    template<typename _Tp>
      using __v_pointer = typename _Tp::void_pointer;
    template<typename _Tp>
      using __cv_pointer = typename _Tp::const_void_pointer;
    template<typename _Tp>
      using __pocca = typename _Tp::propagate_on_container_copy_assignment;
    template<typename _Tp>
      using __pocma = typename _Tp::propagate_on_container_move_assignment;
    template<typename _Tp>
      using __pocs = typename _Tp::propagate_on_container_swap;
    template<typename _Tp>
      using __equal = typename _Tp::is_always_equal;
  };

  template<typename _Alloc, typename _Up>
    using __alloc_rebind
      = typename __allocator_traits_base::template __rebind<_Alloc, _Up>::type;





  template<typename _Alloc>
    struct allocator_traits : __allocator_traits_base
    {

      typedef _Alloc allocator_type;

      typedef typename _Alloc::value_type value_type;






      using pointer = __detected_or_t<value_type*, __pointer, _Alloc>;

    private:

      template<template<typename> class _Func, typename _Tp, typename = void>
 struct _Ptr
 {
   using type = typename pointer_traits<pointer>::template rebind<_Tp>;
 };

      template<template<typename> class _Func, typename _Tp>
 struct _Ptr<_Func, _Tp, __void_t<_Func<_Alloc>>>
 {
   using type = _Func<_Alloc>;
 };


      template<typename _A2, typename _PtrT, typename = void>
 struct _Diff
 { using type = typename pointer_traits<_PtrT>::difference_type; };

      template<typename _A2, typename _PtrT>
 struct _Diff<_A2, _PtrT, __void_t<typename _A2::difference_type>>
 { using type = typename _A2::difference_type; };


      template<typename _A2, typename _DiffT, typename = void>
 struct _Size : make_unsigned<_DiffT> { };

      template<typename _A2, typename _DiffT>
 struct _Size<_A2, _DiffT, __void_t<typename _A2::size_type>>
 { using type = typename _A2::size_type; };

    public:






      using const_pointer = typename _Ptr<__c_pointer, const value_type>::type;







      using void_pointer = typename _Ptr<__v_pointer, void>::type;







      using const_void_pointer = typename _Ptr<__cv_pointer, const void>::type;







      using difference_type = typename _Diff<_Alloc, pointer>::type;







      using size_type = typename _Size<_Alloc, difference_type>::type;







      using propagate_on_container_copy_assignment
 = __detected_or_t<false_type, __pocca, _Alloc>;







      using propagate_on_container_move_assignment
 = __detected_or_t<false_type, __pocma, _Alloc>;







      using propagate_on_container_swap
 = __detected_or_t<false_type, __pocs, _Alloc>;







      using is_always_equal
 = __detected_or_t<typename is_empty<_Alloc>::type, __equal, _Alloc>;

      template<typename _Tp>
 using rebind_alloc = __alloc_rebind<_Alloc, _Tp>;
      template<typename _Tp>
 using rebind_traits = allocator_traits<rebind_alloc<_Tp>>;

    private:
      template<typename _Alloc2>
 static auto
 _S_allocate(_Alloc2& __a, size_type __n, const_void_pointer __hint, int)
 -> decltype(__a.allocate(__n, __hint))
 { return __a.allocate(__n, __hint); }

      template<typename _Alloc2>
 static pointer
 _S_allocate(_Alloc2& __a, size_type __n, const_void_pointer, ...)
 { return __a.allocate(__n); }

      template<typename _Tp, typename... _Args>
 struct __construct_helper
 {
   template<typename _Alloc2,
     typename = decltype(std::declval<_Alloc2*>()->construct(
    std::declval<_Tp*>(), std::declval<_Args>()...))>
     static true_type __test(int);

   template<typename>
     static false_type __test(...);

   using type = decltype(__test<_Alloc>(0));
 };

      template<typename _Tp, typename... _Args>
 using __has_construct
   = typename __construct_helper<_Tp, _Args...>::type;

      template<typename _Tp, typename... _Args>
 static _Require<__has_construct<_Tp, _Args...>>
 _S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
 { __a.construct(__p, std::forward<_Args>(__args)...); }

      template<typename _Tp, typename... _Args>
 static
 _Require<__and_<__not_<__has_construct<_Tp, _Args...>>,
          is_constructible<_Tp, _Args...>>>
 _S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 noexcept(std::is_nothrow_constructible<_Tp, _Args...>::value)
 { ::new((void*)__p) _Tp(std::forward<_Args>(__args)...); }

      template<typename _Alloc2, typename _Tp>
 static auto
 _S_destroy(_Alloc2& __a, _Tp* __p, int)
 noexcept(noexcept(__a.destroy(__p)))
 -> decltype(__a.destroy(__p))
 { __a.destroy(__p); }

      template<typename _Alloc2, typename _Tp>
 static void
 _S_destroy(_Alloc2&, _Tp* __p, ...)
 noexcept(std::is_nothrow_destructible<_Tp>::value)
 { __p->~_Tp(); }

      template<typename _Alloc2>
 static auto
 _S_max_size(_Alloc2& __a, int)
 -> decltype(__a.max_size())
 { return __a.max_size(); }

      template<typename _Alloc2>
 static size_type
 _S_max_size(_Alloc2&, ...)
 {


   return __gnu_cxx::__numeric_traits<size_type>::__max
     / sizeof(value_type);
 }

      template<typename _Alloc2>
 static auto
 _S_select(_Alloc2& __a, int)
 -> decltype(__a.select_on_container_copy_construction())
 { return __a.select_on_container_copy_construction(); }

      template<typename _Alloc2>
 static _Alloc2
 _S_select(_Alloc2& __a, ...)
 { return __a; }

    public:
# 303 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/alloc_traits.h" 3
                         static pointer
      allocate(_Alloc& __a, size_type __n)
      { return __a.allocate(__n); }
# 318 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/alloc_traits.h" 3
                         static pointer
      allocate(_Alloc& __a, size_type __n, const_void_pointer __hint)
      { return _S_allocate(__a, __n, __hint, 0); }
# 330 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/alloc_traits.h" 3
      static void
      deallocate(_Alloc& __a, pointer __p, size_type __n)
      { __a.deallocate(__p, __n); }
# 345 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/alloc_traits.h" 3
      template<typename _Tp, typename... _Args>
 static auto construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 noexcept(noexcept(_S_construct(__a, __p,
           std::forward<_Args>(__args)...)))
 -> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
 { _S_construct(__a, __p, std::forward<_Args>(__args)...); }
# 360 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/alloc_traits.h" 3
      template<typename _Tp>
 static void destroy(_Alloc& __a, _Tp* __p)
 noexcept(noexcept(_S_destroy(__a, __p, 0)))
 { _S_destroy(__a, __p, 0); }
# 373 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/alloc_traits.h" 3
      static size_type max_size(const _Alloc& __a) noexcept
      { return _S_max_size(__a, 0); }
# 384 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/alloc_traits.h" 3
      static _Alloc
      select_on_container_copy_construction(const _Alloc& __rhs)
      { return _S_select(__rhs, 0); }
    };


  template<typename _Tp>
    struct allocator_traits<allocator<_Tp>>
    {

      using allocator_type = allocator<_Tp>;

      using value_type = _Tp;


      using pointer = _Tp*;


      using const_pointer = const _Tp*;


      using void_pointer = void*;


      using const_void_pointer = const void*;


      using difference_type = std::ptrdiff_t;


      using size_type = std::size_t;


      using propagate_on_container_copy_assignment = false_type;


      using propagate_on_container_move_assignment = true_type;


      using propagate_on_container_swap = false_type;


      using is_always_equal = true_type;

      template<typename _Up>
 using rebind_alloc = allocator<_Up>;

      template<typename _Up>
 using rebind_traits = allocator_traits<allocator<_Up>>;
# 441 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/alloc_traits.h" 3
                         static pointer
      allocate(allocator_type& __a, size_type __n)
      { return __a.allocate(__n); }
# 455 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/alloc_traits.h" 3
                         static pointer
      allocate(allocator_type& __a, size_type __n, const_void_pointer __hint)
      { return __a.allocate(__n, __hint); }
# 467 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/alloc_traits.h" 3
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
      { __a.deallocate(__p, __n); }
# 479 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/alloc_traits.h" 3
      template<typename _Up, typename... _Args>
 static void
 construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 { __a.construct(__p, std::forward<_Args>(__args)...); }
# 492 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/alloc_traits.h" 3
      template<typename _Up>
 static void
 destroy(allocator_type& __a, _Up* __p)
 noexcept(noexcept(__a.destroy(__p)))
 { __a.destroy(__p); }






      static size_type
      max_size(const allocator_type& __a) noexcept
      { return __a.max_size(); }






      static allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
      { return __rhs; }
    };


  template<typename _Alloc>
    inline void
    __do_alloc_on_copy(_Alloc& __one, const _Alloc& __two, true_type)
    { __one = __two; }

  template<typename _Alloc>
    inline void
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_copy_assignment __pocca;
      __do_alloc_on_copy(__one, __two, __pocca());
    }

  template<typename _Alloc>
    inline _Alloc __alloc_on_copy(const _Alloc& __a)
    {
      typedef allocator_traits<_Alloc> __traits;
      return __traits::select_on_container_copy_construction(__a);
    }

  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
    { __one = std::move(__two); }

  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_move(_Alloc& __one, _Alloc& __two)
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_move_assignment __pocma;
      __do_alloc_on_move(__one, __two, __pocma());
    }

  template<typename _Alloc>
    inline void __do_alloc_on_swap(_Alloc& __one, _Alloc& __two, true_type)
    {
      using std::swap;
      swap(__one, __two);
    }

  template<typename _Alloc>
    inline void __do_alloc_on_swap(_Alloc&, _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_swap(_Alloc& __one, _Alloc& __two)
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_swap __pocs;
      __do_alloc_on_swap(__one, __two, __pocs());
    }

  template<typename _Alloc, typename _Tp,
    typename _ValueT = __remove_cvref_t<typename _Alloc::value_type>,
    typename = void>
    struct __is_alloc_insertable_impl
    : false_type
    { };

  template<typename _Alloc, typename _Tp, typename _ValueT>
    struct __is_alloc_insertable_impl<_Alloc, _Tp, _ValueT,
      __void_t<decltype(allocator_traits<_Alloc>::construct(
     std::declval<_Alloc&>(), std::declval<_ValueT*>(),
     std::declval<_Tp>()))>>
    : true_type
    { };




  template<typename _Alloc>
    struct __is_copy_insertable
    : __is_alloc_insertable_impl<_Alloc,
     typename _Alloc::value_type const&>::type
    { };


  template<typename _Tp>
    struct __is_copy_insertable<allocator<_Tp>>
    : is_copy_constructible<_Tp>
    { };




  template<typename _Alloc>
    struct __is_move_insertable
    : __is_alloc_insertable_impl<_Alloc, typename _Alloc::value_type>::type
    { };


  template<typename _Tp>
    struct __is_move_insertable<allocator<_Tp>>
    : is_move_constructible<_Tp>
    { };


  template<typename _Alloc, typename = void>
    struct __is_allocator : false_type { };

  template<typename _Alloc>
    struct __is_allocator<_Alloc,
      __void_t<typename _Alloc::value_type,
        decltype(std::declval<_Alloc&>().allocate(size_t{}))>>
    : true_type { };

  template<typename _Alloc>
    using _RequireAllocator
      = typename enable_if<__is_allocator<_Alloc>::value, _Alloc>::type;

  template<typename _Alloc>
    using _RequireNotAllocator
      = typename enable_if<!__is_allocator<_Alloc>::value, _Alloc>::type;


}
# 37 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ext/alloc_traits.h" 2 3




namespace __gnu_cxx
{






template<typename _Alloc, typename = typename _Alloc::value_type>
  struct __alloc_traits

  : std::allocator_traits<_Alloc>

  {
    typedef _Alloc allocator_type;

    typedef std::allocator_traits<_Alloc> _Base_type;
    typedef typename _Base_type::value_type value_type;
    typedef typename _Base_type::pointer pointer;
    typedef typename _Base_type::const_pointer const_pointer;
    typedef typename _Base_type::size_type size_type;
    typedef typename _Base_type::difference_type difference_type;

    typedef value_type& reference;
    typedef const value_type& const_reference;
    using _Base_type::allocate;
    using _Base_type::deallocate;
    using _Base_type::construct;
    using _Base_type::destroy;
    using _Base_type::max_size;

  private:
    template<typename _Ptr>
      using __is_custom_pointer
 = std::__and_<std::is_same<pointer, _Ptr>,
        std::__not_<std::is_pointer<_Ptr>>>;

  public:

    template<typename _Ptr, typename... _Args>
      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
      construct(_Alloc& __a, _Ptr __p, _Args&&... __args)
      noexcept(noexcept(_Base_type::construct(__a, std::__to_address(__p),
           std::forward<_Args>(__args)...)))
      {
 _Base_type::construct(__a, std::__to_address(__p),
         std::forward<_Args>(__args)...);
      }


    template<typename _Ptr>
      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static _Alloc _S_select_on_copy(const _Alloc& __a)
    { return _Base_type::select_on_container_copy_construction(__a); }

    static void _S_on_swap(_Alloc& __a, _Alloc& __b)
    { std::__alloc_on_swap(__a, __b); }

    static constexpr bool _S_propagate_on_copy_assign()
    { return _Base_type::propagate_on_container_copy_assignment::value; }

    static constexpr bool _S_propagate_on_move_assign()
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
    { return _Base_type::is_always_equal::value; }

    static constexpr bool _S_nothrow_move()
    { return _S_propagate_on_move_assign() || _S_always_equal(); }

    template<typename _Tp>
      struct rebind
      { typedef typename _Base_type::template rebind_alloc<_Tp> other; };
# 161 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ext/alloc_traits.h" 3
  };


}
# 41 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 2 3
# 51 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
namespace std
{
# 61 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
namespace __cxx11 {
# 80 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_string
    {
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<_CharT>::other _Char_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;


    public:
      typedef _Traits traits_type;
      typedef typename _Traits::char_type value_type;
      typedef _Char_alloc_type allocator_type;
      typedef typename _Alloc_traits::size_type size_type;
      typedef typename _Alloc_traits::difference_type difference_type;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;
      typedef typename _Alloc_traits::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef __gnu_cxx::__normal_iterator<pointer, basic_string> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
       const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;


      static const size_type npos = static_cast<size_type>(-1);

    protected:




      typedef const_iterator __const_iterator;


    private:
# 154 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      struct _Alloc_hider : allocator_type
      {




 _Alloc_hider(pointer __dat, const _Alloc& __a)
 : allocator_type(__a), _M_p(__dat) { }

 _Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
 : allocator_type(std::move(__a)), _M_p(__dat) { }


 pointer _M_p;
      };

      _Alloc_hider _M_dataplus;
      size_type _M_string_length;

      enum { _S_local_capacity = 15 / sizeof(_CharT) };

      union
      {
 _CharT _M_local_buf[_S_local_capacity + 1];
 size_type _M_allocated_capacity;
      };

      void
      _M_data(pointer __p)
      { _M_dataplus._M_p = __p; }

      void
      _M_length(size_type __length)
      { _M_string_length = __length; }

      pointer
      _M_data() const
      { return _M_dataplus._M_p; }

      pointer
      _M_local_data()
      {

 return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);



      }

      const_pointer
      _M_local_data() const
      {

 return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);



      }

      void
      _M_capacity(size_type __capacity)
      { _M_allocated_capacity = __capacity; }

      void
      _M_set_length(size_type __n)
      {
 _M_length(__n);
 traits_type::assign(_M_data()[__n], _CharT());
      }

      bool
      _M_is_local() const
      { return _M_data() == _M_local_data(); }


      pointer
      _M_create(size_type&, size_type);

      void
      _M_dispose()
      {
 if (!_M_is_local())
   _M_destroy(_M_allocated_capacity);
      }

      void
      _M_destroy(size_type __size) throw()
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }



      template<typename _InIterator>
        void
        _M_construct_aux(_InIterator __beg, _InIterator __end,
    std::__false_type)
 {
          typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
          _M_construct(__beg, __end, _Tag());
 }



      template<typename _Integer>
        void
        _M_construct_aux(_Integer __beg, _Integer __end, std::__true_type)
 { _M_construct_aux_2(static_cast<size_type>(__beg), __end); }

      void
      _M_construct_aux_2(size_type __req, _CharT __c)
      { _M_construct(__req, __c); }

      template<typename _InIterator>
        void
        _M_construct(_InIterator __beg, _InIterator __end)
 {
   typedef typename std::__is_integer<_InIterator>::__type _Integral;
   _M_construct_aux(__beg, __end, _Integral());
        }


      template<typename _InIterator>
        void
        _M_construct(_InIterator __beg, _InIterator __end,
       std::input_iterator_tag);



      template<typename _FwdIterator>
        void
        _M_construct(_FwdIterator __beg, _FwdIterator __end,
       std::forward_iterator_tag);

      void
      _M_construct(size_type __req, _CharT __c);

      allocator_type&
      _M_get_allocator()
      { return _M_dataplus; }

      const allocator_type&
      _M_get_allocator() const
      { return _M_dataplus; }

    private:
# 313 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      size_type
      _M_check(size_type __pos, const char* __s) const
      {
 if (__pos > this->size())
   __throw_out_of_range_fmt(("%s: __pos (which is %zu) > " "this->size() (which is %zu)"),

       __s, __pos, this->size());
 return __pos;
      }

      void
      _M_check_length(size_type __n1, size_type __n2, const char* __s) const
      {
 if (this->max_size() - (this->size() - __n1) < __n2)
   __throw_length_error((__s));
      }



      size_type
      _M_limit(size_type __pos, size_type __off) const noexcept
      {
 const bool __testoff = __off < this->size() - __pos;
 return __testoff ? __off : this->size() - __pos;
      }


      bool
      _M_disjunct(const _CharT* __s) const noexcept
      {
 return (less<const _CharT*>()(__s, _M_data())
  || less<const _CharT*>()(_M_data() + this->size(), __s));
      }



      static void
      _S_copy(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::copy(__d, __s, __n);
      }

      static void
      _S_move(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::move(__d, __s, __n);
      }

      static void
      _S_assign(_CharT* __d, size_type __n, _CharT __c)
      {
 if (__n == 1)
   traits_type::assign(*__d, __c);
 else
   traits_type::assign(__d, __n, __c);
      }



      template<class _Iterator>
        static void
        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
        {
   for (; __k1 != __k2; ++__k1, (void)++__p)
     traits_type::assign(*__p, *__k1);
 }

      static void
      _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2) noexcept
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
      noexcept
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) noexcept
      { _S_copy(__p, __k1, __k2 - __k1); }

      static void
      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
      noexcept
      { _S_copy(__p, __k1, __k2 - __k1); }

      static int
      _S_compare(size_type __n1, size_type __n2) noexcept
      {
 const difference_type __d = difference_type(__n1 - __n2);

 if (__d > __gnu_cxx::__numeric_traits<int>::__max)
   return __gnu_cxx::__numeric_traits<int>::__max;
 else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
   return __gnu_cxx::__numeric_traits<int>::__min;
 else
   return int(__d);
      }

      void
      _M_assign(const basic_string&);

      void
      _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,
  size_type __len2);

      void
      _M_erase(size_type __pos, size_type __n);

    public:







      basic_string()
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
      : _M_dataplus(_M_local_data())
      { _M_set_length(0); }




      explicit
      basic_string(const _Alloc& __a) noexcept
      : _M_dataplus(_M_local_data(), __a)
      { _M_set_length(0); }





      basic_string(const basic_string& __str)
      : _M_dataplus(_M_local_data(),
      _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
# 465 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      basic_string(const basic_string& __str, size_type __pos,
     const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      {
 const _CharT* __start = __str._M_data()
   + __str._M_check(__pos, "basic_string::basic_string");
 _M_construct(__start, __start + __str._M_limit(__pos, npos));
      }







      basic_string(const basic_string& __str, size_type __pos,
     size_type __n)
      : _M_dataplus(_M_local_data())
      {
 const _CharT* __start = __str._M_data()
   + __str._M_check(__pos, "basic_string::basic_string");
 _M_construct(__start, __start + __str._M_limit(__pos, __n));
      }
# 496 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      basic_string(const basic_string& __str, size_type __pos,
     size_type __n, const _Alloc& __a)
      : _M_dataplus(_M_local_data(), __a)
      {
 const _CharT* __start
   = __str._M_data() + __str._M_check(__pos, "string::string");
 _M_construct(__start, __start + __str._M_limit(__pos, __n));
      }
# 514 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      basic_string(const _CharT* __s, size_type __n,
     const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__s, __s + __n); }
# 529 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      {
 const _CharT* __end = __s ? __s + traits_type::length(__s)

   : reinterpret_cast<const _CharT*>(__alignof__(_CharT));
 _M_construct(__s, __end, random_access_iterator_tag());
      }
# 549 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__n, __c); }
# 561 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      basic_string(basic_string&& __str) noexcept
      : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))
      {
 if (__str._M_is_local())
   {
     traits_type::copy(_M_local_buf, __str._M_local_buf,
         _S_local_capacity + 1);
   }
 else
   {
     _M_data(__str._M_data());
     _M_capacity(__str._M_allocated_capacity);
   }




 _M_length(__str.length());
 __str._M_data(__str._M_local_data());
 __str._M_set_length(0);
      }






      basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__l.begin(), __l.end()); }

      basic_string(const basic_string& __str, const _Alloc& __a)
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__str.begin(), __str.end()); }

      basic_string(basic_string&& __str, const _Alloc& __a)
      noexcept(_Alloc_traits::_S_always_equal())
      : _M_dataplus(_M_local_data(), __a)
      {
 if (__str._M_is_local())
   {
     traits_type::copy(_M_local_buf, __str._M_local_buf,
         _S_local_capacity + 1);
     _M_length(__str.length());
     __str._M_set_length(0);
   }
 else if (_Alloc_traits::_S_always_equal()
     || __str.get_allocator() == __a)
   {
     _M_data(__str._M_data());
     _M_length(__str.length());
     _M_capacity(__str._M_allocated_capacity);
     __str._M_data(__str._M_local_buf);
     __str._M_set_length(0);
   }
 else
   _M_construct(__str.begin(), __str.end());
      }
# 629 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>



        basic_string(_InputIterator __beg, _InputIterator __end,
       const _Alloc& __a = _Alloc())
 : _M_dataplus(_M_local_data(), __a)
 { _M_construct(__beg, __end); }
# 666 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      ~basic_string()
      { _M_dispose(); }





      basic_string&
      operator=(const basic_string& __str)
      {

 if (_Alloc_traits::_S_propagate_on_copy_assign())
   {
     if (!_Alloc_traits::_S_always_equal() && !_M_is_local()
  && _M_get_allocator() != __str._M_get_allocator())
       {


  if (__str.size() <= _S_local_capacity)
    {
      _M_destroy(_M_allocated_capacity);
      _M_data(_M_local_data());
      _M_set_length(0);
    }
  else
    {
      const auto __len = __str.size();
      auto __alloc = __str._M_get_allocator();

      auto __ptr = _Alloc_traits::allocate(__alloc, __len + 1);
      _M_destroy(_M_allocated_capacity);
      _M_data(__ptr);
      _M_capacity(__len);
      _M_set_length(__len);
    }
       }
     std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());
   }

 return this->assign(__str);
      }





      basic_string&
      operator=(const _CharT* __s)
      { return this->assign(__s); }
# 723 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      basic_string&
      operator=(_CharT __c)
      {
 this->assign(1, __c);
 return *this;
      }
# 740 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      basic_string&
      operator=(basic_string&& __str)
      noexcept(_Alloc_traits::_S_nothrow_move())
      {
 if (!_M_is_local() && _Alloc_traits::_S_propagate_on_move_assign()
     && !_Alloc_traits::_S_always_equal()
     && _M_get_allocator() != __str._M_get_allocator())
   {

     _M_destroy(_M_allocated_capacity);
     _M_data(_M_local_data());
     _M_set_length(0);
   }

 std::__alloc_on_move(_M_get_allocator(), __str._M_get_allocator());

 if (__str._M_is_local())
   {

     if (__str.size())
       this->_S_copy(_M_data(), __str._M_data(), __str.size());
     _M_set_length(__str.size());
   }
 else if (_Alloc_traits::_S_propagate_on_move_assign()
     || _Alloc_traits::_S_always_equal()
     || _M_get_allocator() == __str._M_get_allocator())
   {

     pointer __data = nullptr;
     size_type __capacity;
     if (!_M_is_local())
       {
  if (_Alloc_traits::_S_always_equal())
    {

      __data = _M_data();
      __capacity = _M_allocated_capacity;
    }
  else
    _M_destroy(_M_allocated_capacity);
       }

     _M_data(__str._M_data());
     _M_length(__str.length());
     _M_capacity(__str._M_allocated_capacity);
     if (__data)
       {
  __str._M_data(__data);
  __str._M_capacity(__capacity);
       }
     else
       __str._M_data(__str._M_local_buf);
   }
 else
   assign(__str);
 __str.clear();
 return *this;
      }





      basic_string&
      operator=(initializer_list<_CharT> __l)
      {
 this->assign(__l.begin(), __l.size());
 return *this;
      }
# 834 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      iterator
      begin() noexcept
      { return iterator(_M_data()); }





      const_iterator
      begin() const noexcept
      { return const_iterator(_M_data()); }





      iterator
      end() noexcept
      { return iterator(_M_data() + this->size()); }





      const_iterator
      end() const noexcept
      { return const_iterator(_M_data() + this->size()); }






      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(this->end()); }






      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(this->end()); }






      reverse_iterator
      rend() noexcept
      { return reverse_iterator(this->begin()); }






      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(this->begin()); }






      const_iterator
      cbegin() const noexcept
      { return const_iterator(this->_M_data()); }





      const_iterator
      cend() const noexcept
      { return const_iterator(this->_M_data() + this->size()); }






      const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(this->end()); }






      const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(this->begin()); }


    public:



      size_type
      size() const noexcept
      { return _M_string_length; }



      size_type
      length() const noexcept
      { return _M_string_length; }


      size_type
      max_size() const noexcept
      { return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; }
# 963 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      void
      resize(size_type __n, _CharT __c);
# 976 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      void
      resize(size_type __n)
      { this->resize(__n, _CharT()); }



      void
      shrink_to_fit() noexcept
      {

 if (capacity() > size())
   {
     try
       { reserve(0); }
     catch(...)
       { }
   }

      }






      size_type
      capacity() const noexcept
      {
 return _M_is_local() ? size_type(_S_local_capacity)
                      : _M_allocated_capacity;
      }
# 1025 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      void
      reserve(size_type __res_arg = 0);




      void
      clear() noexcept
      { _M_set_length(0); }





                         bool
      empty() const noexcept
      { return this->size() == 0; }
# 1054 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      const_reference
      operator[] (size_type __pos) const noexcept
      {
                                  ;
 return _M_data()[__pos];
      }
# 1071 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      reference
      operator[](size_type __pos)
      {


                                  ;

                                                                   ;
 return _M_data()[__pos];
      }
# 1092 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      const_reference
      at(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range_fmt(("basic_string::at: __n " "(which is %zu) >= this->size() " "(which is %zu)"),


       __n, this->size());
 return _M_data()[__n];
      }
# 1113 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      reference
      at(size_type __n)
      {
 if (__n >= size())
   __throw_out_of_range_fmt(("basic_string::at: __n " "(which is %zu) >= this->size() " "(which is %zu)"),


       __n, this->size());
 return _M_data()[__n];
      }






      reference
      front() noexcept
      {
                           ;
 return operator[](0);
      }





      const_reference
      front() const noexcept
      {
                           ;
 return operator[](0);
      }





      reference
      back() noexcept
      {
                           ;
 return operator[](this->size() - 1);
      }





      const_reference
      back() const noexcept
      {
                           ;
 return operator[](this->size() - 1);
      }
# 1176 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      basic_string&
      operator+=(const basic_string& __str)
      { return this->append(__str); }






      basic_string&
      operator+=(const _CharT* __s)
      { return this->append(__s); }






      basic_string&
      operator+=(_CharT __c)
      {
 this->push_back(__c);
 return *this;
      }







      basic_string&
      operator+=(initializer_list<_CharT> __l)
      { return this->append(__l.begin(), __l.size()); }
# 1229 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      basic_string&
      append(const basic_string& __str)
      { return _M_append(__str._M_data(), __str.size()); }
# 1246 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      basic_string&
      append(const basic_string& __str, size_type __pos, size_type __n = npos)
      { return _M_append(__str._M_data()
    + __str._M_check(__pos, "basic_string::append"),
    __str._M_limit(__pos, __n)); }







      basic_string&
      append(const _CharT* __s, size_type __n)
      {
                                        ;
 _M_check_length(size_type(0), __n, "basic_string::append");
 return _M_append(__s, __n);
      }






      basic_string&
      append(const _CharT* __s)
      {
                               ;
 const size_type __n = traits_type::length(__s);
 _M_check_length(size_type(0), __n, "basic_string::append");
 return _M_append(__s, __n);
      }
# 1288 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      basic_string&
      append(size_type __n, _CharT __c)
      { return _M_replace_aux(this->size(), size_type(0), __n, __c); }







      basic_string&
      append(initializer_list<_CharT> __l)
      { return this->append(__l.begin(), __l.size()); }
# 1312 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>



        basic_string&
        append(_InputIterator __first, _InputIterator __last)
        { return this->replace(end(), end(), __first, __last); }
# 1357 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      void
      push_back(_CharT __c)
      {
 const size_type __size = this->size();
 if (__size + 1 > this->capacity())
   this->_M_mutate(__size, size_type(0), 0, size_type(1));
 traits_type::assign(this->_M_data()[__size], __c);
 this->_M_set_length(__size + 1);
      }






      basic_string&
      assign(const basic_string& __str)
      {
 this->_M_assign(__str);
 return *this;
      }
# 1388 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      basic_string&
      assign(basic_string&& __str)
      noexcept(_Alloc_traits::_S_nothrow_move())
      {


 return *this = std::move(__str);
      }
# 1411 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      basic_string&
      assign(const basic_string& __str, size_type __pos, size_type __n = npos)
      { return _M_replace(size_type(0), this->size(), __str._M_data()
     + __str._M_check(__pos, "basic_string::assign"),
     __str._M_limit(__pos, __n)); }
# 1427 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s, size_type __n)
      {
                                        ;
 return _M_replace(size_type(0), this->size(), __s, __n);
      }
# 1443 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s)
      {
                               ;
 return _M_replace(size_type(0), this->size(), __s,
     traits_type::length(__s));
      }
# 1460 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      basic_string&
      assign(size_type __n, _CharT __c)
      { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
# 1473 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>



        basic_string&
        assign(_InputIterator __first, _InputIterator __last)
        { return this->replace(begin(), end(), __first, __last); }







      basic_string&
      assign(initializer_list<_CharT> __l)
      { return this->assign(__l.begin(), __l.size()); }
# 1542 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      iterator
      insert(const_iterator __p, size_type __n, _CharT __c)
      {
                                                         ;
 const size_type __pos = __p - begin();
 this->replace(__p, __p, __n, __c);
 return iterator(this->_M_data() + __pos);
      }
# 1584 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 iterator
        insert(const_iterator __p, _InputIterator __beg, _InputIterator __end)
        {
                                                           ;
   const size_type __pos = __p - begin();
   this->replace(__p, __p, __beg, __end);
   return iterator(this->_M_data() + __pos);
 }
# 1620 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      iterator
      insert(const_iterator __p, initializer_list<_CharT> __l)
      { return this->insert(__p, __l.begin(), __l.end()); }
# 1647 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str)
      { return this->replace(__pos1, size_type(0),
        __str._M_data(), __str.size()); }
# 1670 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str,
      size_type __pos2, size_type __n = npos)
      { return this->replace(__pos1, size_type(0), __str._M_data()
        + __str._M_check(__pos2, "basic_string::insert"),
        __str._M_limit(__pos2, __n)); }
# 1693 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s, size_type __n)
      { return this->replace(__pos, size_type(0), __s, __n); }
# 1712 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s)
      {
                               ;
 return this->replace(__pos, size_type(0), __s,
        traits_type::length(__s));
      }
# 1736 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, size_type __n, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
         size_type(0), __n, __c); }
# 1754 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      iterator
      insert(__const_iterator __p, _CharT __c)
      {
                                                         ;
 const size_type __pos = __p - begin();
 _M_replace_aux(__pos, size_type(0), size_type(1), __c);
 return iterator(_M_data() + __pos);
      }
# 1815 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      basic_string&
      erase(size_type __pos = 0, size_type __n = npos)
      {
 _M_check(__pos, "basic_string::erase");
 if (__n == npos)
   this->_M_set_length(__pos);
 else if (__n != 0)
   this->_M_erase(__pos, _M_limit(__pos, __n));
 return *this;
      }
# 1834 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      iterator
      erase(__const_iterator __position)
      {

                           ;
 const size_type __pos = __position - begin();
 this->_M_erase(__pos, size_type(1));
 return iterator(_M_data() + __pos);
      }
# 1853 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      iterator
      erase(__const_iterator __first, __const_iterator __last)
      {

                        ;
        const size_type __pos = __first - begin();
 if (__last == end())
   this->_M_set_length(__pos);
 else
   this->_M_erase(__pos, __last - __first);
 return iterator(this->_M_data() + __pos);
      }







      void
      pop_back() noexcept
      {
                           ;
 _M_erase(size() - 1, 1);
      }
# 1897 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n, const basic_string& __str)
      { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
# 1919 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2 = npos)
      { return this->replace(__pos1, __n1, __str._M_data()
        + __str._M_check(__pos2, "basic_string::replace"),
        __str._M_limit(__pos2, __n2)); }
# 1944 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2)
      {
                                         ;
 return _M_replace(_M_check(__pos, "basic_string::replace"),
     _M_limit(__pos, __n1), __s, __n2);
      }
# 1969 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s)
      {
                               ;
 return this->replace(__pos, __n1, __s, traits_type::length(__s));
      }
# 1993 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
         _M_limit(__pos, __n1), __n2, __c); }
# 2011 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const basic_string& __str)
      { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
# 2031 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const _CharT* __s, size_type __n)
      {

                      ;
 return this->replace(__i1 - begin(), __i2 - __i1, __s, __n);
      }
# 2053 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2, const _CharT* __s)
      {
                               ;
 return this->replace(__i1, __i2, __s, traits_type::length(__s));
      }
# 2074 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2, size_type __n,
       _CharT __c)
      {

                      ;
 return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __c);
      }
# 2099 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
        basic_string&
        replace(const_iterator __i1, const_iterator __i2,
  _InputIterator __k1, _InputIterator __k2)
        {

                        ;
                                             ;
   return this->_M_replace_dispatch(__i1, __i2, __k1, __k2,
        std::__false_type());
 }
# 2131 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       _CharT* __k1, _CharT* __k2)
      {

                      ;
                                           ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const _CharT* __k1, const _CharT* __k2)
      {

                      ;
                                           ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       iterator __k1, iterator __k2)
      {

                      ;
                                           ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }

      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const_iterator __k1, const_iterator __k2)
      {

                      ;
                                           ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }
# 2190 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      basic_string& replace(const_iterator __i1, const_iterator __i2,
       initializer_list<_CharT> __l)
      { return this->replace(__i1, __i2, __l.begin(), __l.size()); }
# 2250 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
    private:
      template<class _Integer>
 basic_string&
 _M_replace_dispatch(const_iterator __i1, const_iterator __i2,
       _Integer __n, _Integer __val, __true_type)
        { return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __val); }

      template<class _InputIterator>
 basic_string&
 _M_replace_dispatch(const_iterator __i1, const_iterator __i2,
       _InputIterator __k1, _InputIterator __k2,
       __false_type);

      basic_string&
      _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
       _CharT __c);

      basic_string&
      _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
   const size_type __len2);

      basic_string&
      _M_append(const _CharT* __s, size_type __n);

    public:
# 2288 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      size_type
      copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
# 2298 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      void
      swap(basic_string& __s) noexcept;
# 2308 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      const _CharT*
      c_str() const noexcept
      { return _M_data(); }
# 2320 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      const _CharT*
      data() const noexcept
      { return _M_data(); }
# 2339 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      allocator_type
      get_allocator() const noexcept
      { return _M_get_allocator(); }
# 2355 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos, size_type __n) const
      noexcept;
# 2369 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      size_type
      find(const basic_string& __str, size_type __pos = 0) const
      noexcept
      { return this->find(__str.data(), __pos, __str.size()); }
# 2401 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos = 0) const noexcept
      {
                               ;
 return this->find(__s, __pos, traits_type::length(__s));
      }
# 2418 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      size_type
      find(_CharT __c, size_type __pos = 0) const noexcept;
# 2431 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      size_type
      rfind(const basic_string& __str, size_type __pos = npos) const
      noexcept
      { return this->rfind(__str.data(), __pos, __str.size()); }
# 2465 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos, size_type __n) const
      noexcept;
# 2479 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos = npos) const
      {
                               ;
 return this->rfind(__s, __pos, traits_type::length(__s));
      }
# 2496 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      size_type
      rfind(_CharT __c, size_type __pos = npos) const noexcept;
# 2510 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      size_type
      find_first_of(const basic_string& __str, size_type __pos = 0) const
      noexcept
      { return this->find_first_of(__str.data(), __pos, __str.size()); }
# 2545 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
      noexcept;
# 2559 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos = 0) const
      noexcept
      {
                               ;
 return this->find_first_of(__s, __pos, traits_type::length(__s));
      }
# 2579 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      size_type
      find_first_of(_CharT __c, size_type __pos = 0) const noexcept
      { return this->find(__c, __pos); }
# 2594 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      size_type
      find_last_of(const basic_string& __str, size_type __pos = npos) const
      noexcept
      { return this->find_last_of(__str.data(), __pos, __str.size()); }
# 2629 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
      noexcept;
# 2643 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos = npos) const
      noexcept
      {
                               ;
 return this->find_last_of(__s, __pos, traits_type::length(__s));
      }
# 2663 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      size_type
      find_last_of(_CharT __c, size_type __pos = npos) const noexcept
      { return this->rfind(__c, __pos); }
# 2677 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      size_type
      find_first_not_of(const basic_string& __str, size_type __pos = 0) const
      noexcept
      { return this->find_first_not_of(__str.data(), __pos, __str.size()); }
# 2712 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos,
   size_type __n) const noexcept;
# 2726 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos = 0) const
      noexcept
      {
                               ;
 return this->find_first_not_of(__s, __pos, traits_type::length(__s));
      }
# 2744 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      size_type
      find_first_not_of(_CharT __c, size_type __pos = 0) const
      noexcept;
# 2759 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      size_type
      find_last_not_of(const basic_string& __str, size_type __pos = npos) const
      noexcept
      { return this->find_last_not_of(__str.data(), __pos, __str.size()); }
# 2794 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos,
         size_type __n) const noexcept;
# 2808 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos = npos) const
      noexcept
      {
                               ;
 return this->find_last_not_of(__s, __pos, traits_type::length(__s));
      }
# 2826 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      size_type
      find_last_not_of(_CharT __c, size_type __pos = npos) const
      noexcept;
# 2842 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      basic_string
      substr(size_type __pos = 0, size_type __n = npos) const
      { return basic_string(*this,
       _M_check(__pos, "basic_string::substr"), __n); }
# 2861 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      int
      compare(const basic_string& __str) const
      {
 const size_type __size = this->size();
 const size_type __osize = __str.size();
 const size_type __len = std::min(__size, __osize);

 int __r = traits_type::compare(_M_data(), __str.data(), __len);
 if (!__r)
   __r = _S_compare(__size, __osize);
 return __r;
      }
# 2954 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n, const basic_string& __str) const;
# 2980 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      int
      compare(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2 = npos) const;
# 2998 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      int
      compare(const _CharT* __s) const noexcept;
# 3022 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s) const;
# 3049 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2) const;
# 3080 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
      template<typename, typename, typename> friend class basic_stringbuf;
    };
}
# 6026 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str(__lhs);
      __str.append(__size_type(1), __rhs);
      return __str;
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return std::move(__lhs.append(__rhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    {
      const auto __size = __lhs.size() + __rhs.size();
      const bool __cond = (__size > __lhs.capacity()
      && __size <= __rhs.capacity());
      return __cond ? std::move(__rhs.insert(0, __lhs))
             : std::move(__lhs.append(__rhs));
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, 1, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       const _CharT* __rhs)
    { return std::move(__lhs.append(__rhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       _CharT __rhs)
    { return std::move(__lhs.append(1, __rhs)); }
# 6147 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) == 0; }

  template<typename _CharT>
    inline
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
    operator==(const basic_string<_CharT>& __lhs,
        const basic_string<_CharT>& __rhs) noexcept
    { return (__lhs.size() == __rhs.size()
       && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
          __lhs.size())); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) == 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) == 0; }
# 6194 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return !(__lhs == __rhs); }
# 6232 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) > 0; }
# 6270 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) < 0; }
# 6308 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) >= 0; }
# 6346 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const _CharT* __lhs,
      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) <= 0; }
# 6384 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline void
    swap(basic_string<_CharT, _Traits, _Alloc>& __lhs,
  basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept(noexcept(__lhs.swap(__rhs)))
    { __lhs.swap(__rhs); }
# 6404 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is,
        basic_string<_CharT, _Traits, _Alloc>& __str);

  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __is, basic_string<char>& __str);
# 6422 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os,
        const basic_string<_CharT, _Traits, _Alloc>& __str)
    {


      return __ostream_insert(__os, __str.data(), __str.size());
    }
# 6445 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim);
# 6462 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str)
    { return std::getline(__is, __str, __is.widen('\n')); }



  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>&& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)
    { return std::getline(__is, __str, __delim); }


  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>&& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str)
    { return std::getline(__is, __str); }


  template<>
    basic_istream<char>&
    getline(basic_istream<char>& __in, basic_string<char>& __str,
     char __delim);


  template<>
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>& __in, basic_string<wchar_t>& __str,
     wchar_t __delim);



}



# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ext/string_conversions.h" 1 3
# 33 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ext/string_conversions.h" 3








# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cstdlib" 1 3
# 40 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cstdlib" 3
# 42 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ext/string_conversions.h" 2 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cwchar" 1 3
# 40 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cwchar" 3
# 43 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ext/string_conversions.h" 2 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cstdio" 1 3
# 40 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cstdio" 3
# 96 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cstdio" 3
namespace std
{
  using ::FILE;
  using ::fpos_t;

  using ::clearerr;
  using ::fclose;
  using ::feof;
  using ::ferror;
  using ::fflush;
  using ::fgetc;
  using ::fgetpos;
  using ::fgets;
  using ::fopen;
  using ::fprintf;
  using ::fputc;
  using ::fputs;
  using ::fread;
  using ::freopen;
  using ::fscanf;
  using ::fseek;
  using ::fsetpos;
  using ::ftell;
  using ::fwrite;
  using ::getc;
  using ::getchar;




  using ::perror;
  using ::printf;
  using ::putc;
  using ::putchar;
  using ::puts;
  using ::remove;
  using ::rename;
  using ::rewind;
  using ::scanf;
  using ::setbuf;
  using ::setvbuf;
  using ::sprintf;
  using ::sscanf;
  using ::tmpfile;

  using ::tmpnam;

  using ::ungetc;
  using ::vfprintf;
  using ::vprintf;
  using ::vsprintf;
}
# 157 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cstdio" 3
namespace __gnu_cxx
{
# 175 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cstdio" 3
  using ::snprintf;
  using ::vfscanf;
  using ::vscanf;
  using ::vsnprintf;
  using ::vsscanf;

}

namespace std
{
  using ::__gnu_cxx::snprintf;
  using ::__gnu_cxx::vfscanf;
  using ::__gnu_cxx::vscanf;
  using ::__gnu_cxx::vsnprintf;
  using ::__gnu_cxx::vsscanf;
}
# 44 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ext/string_conversions.h" 2 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cerrno" 1 3
# 40 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cerrno" 3
# 45 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ext/string_conversions.h" 2 3

namespace __gnu_cxx
{



  template<typename _TRet, typename _Ret = _TRet, typename _CharT,
    typename... _Base>
    _Ret
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
    const char* __name, const _CharT* __str, std::size_t* __idx,
    _Base... __base)
    {
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
 _Save_errno() : _M_errno((*_errno())) { (*_errno()) = 0; }
 ~_Save_errno() { if ((*_errno()) == 0) (*_errno()) = _M_errno; }
 int _M_errno;
      } const __save_errno;

      struct _Range_chk {
   static bool
   _S_chk(_TRet, std::false_type) { return false; }

   static bool
   _S_chk(_TRet __val, std::true_type)
   {
     return __val < _TRet(__numeric_traits<int>::__min)
       || __val > _TRet(__numeric_traits<int>::__max);
   }
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);

      if (__endptr == __str)
 std::__throw_invalid_argument(__name);
      else if ((*_errno()) == 34
   || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 std::__throw_out_of_range(__name);
      else
 __ret = __tmp;

      if (__idx)
 *__idx = __endptr - __str;

      return __ret;
    }


  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
     __builtin_va_list), std::size_t __n,
   const _CharT* __fmt, ...)
    {


      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
         * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);

      const int __len = __convf(__s, __n, __fmt, __args);

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
    }


}
# 6502 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 2 3

namespace std
{

namespace __cxx11 {



  inline int
  stoi(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
     __idx, __base); }

  inline long
  stol(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtol, "stol", __str.c_str(),
        __idx, __base); }

  inline unsigned long
  stoul(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoul, "stoul", __str.c_str(),
        __idx, __base); }

  inline long long
  stoll(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoll, "stoll", __str.c_str(),
        __idx, __base); }

  inline unsigned long long
  stoull(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoull, "stoull", __str.c_str(),
        __idx, __base); }


  inline float
  stof(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtof, "stof", __str.c_str(), __idx); }

  inline double
  stod(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtod, "stod", __str.c_str(), __idx); }

  inline long double
  stold(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtold, "stold", __str.c_str(), __idx); }






  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
        "%d", __val); }

  inline string
  to_string(unsigned __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(unsigned),
        "%u", __val); }

  inline string
  to_string(long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(long),
        "%ld", __val); }

  inline string
  to_string(unsigned long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(unsigned long),
        "%lu", __val); }

  inline string
  to_string(long long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(long long),
        "%lld", __val); }

  inline string
  to_string(unsigned long long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(unsigned long long),
        "%llu", __val); }

  inline string
  to_string(float __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%f", __val);
  }

  inline string
  to_string(double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%f", __val);
  }

  inline string
  to_string(long double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<long double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%Lf", __val);
  }



  inline int
  stoi(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::wcstol, "stoi", __str.c_str(),
     __idx, __base); }

  inline long
  stol(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstol, "stol", __str.c_str(),
        __idx, __base); }

  inline unsigned long
  stoul(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoul, "stoul", __str.c_str(),
        __idx, __base); }

  inline long long
  stoll(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoll, "stoll", __str.c_str(),
        __idx, __base); }

  inline unsigned long long
  stoull(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoull, "stoull", __str.c_str(),
        __idx, __base); }


  inline float
  stof(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstof, "stof", __str.c_str(), __idx); }

  inline double
  stod(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstod, "stod", __str.c_str(), __idx); }

  inline long double
  stold(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstold, "stold", __str.c_str(), __idx); }



  inline wstring
  to_wstring(int __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, 4 * sizeof(int),
         L"%d", __val); }

  inline wstring
  to_wstring(unsigned __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(unsigned),
         L"%u", __val); }

  inline wstring
  to_wstring(long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, 4 * sizeof(long),
         L"%ld", __val); }

  inline wstring
  to_wstring(unsigned long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(unsigned long),
         L"%lu", __val); }

  inline wstring
  to_wstring(long long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(long long),
         L"%lld", __val); }

  inline wstring
  to_wstring(unsigned long long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(unsigned long long),
         L"%llu", __val); }

  inline wstring
  to_wstring(float __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,
         L"%f", __val);
  }

  inline wstring
  to_wstring(double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,
         L"%f", __val);
  }

  inline wstring
  to_wstring(long double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<long double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,
         L"%Lf", __val);
  }



}

}





# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/functional_hash.h" 1 3
# 34 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/functional_hash.h" 3



namespace std
{
# 49 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/functional_hash.h" 3
  template<typename _Result, typename _Arg>
    struct __hash_base
    {
      typedef _Result result_type ;
      typedef _Arg argument_type ;
    };


  template<typename _Tp>
    struct hash;

  template<typename _Tp, typename = void>
    struct __poison_hash
    {
      static constexpr bool __enable_hash_call = false;
    private:

      __poison_hash(__poison_hash&&);
      ~__poison_hash();
    };

  template<typename _Tp>
    struct __poison_hash<_Tp, __void_t<decltype(hash<_Tp>()(declval<_Tp>()))>>
    {
      static constexpr bool __enable_hash_call = true;
    };


  template<typename _Tp, bool = is_enum<_Tp>::value>
    struct __hash_enum
    {
    private:

      __hash_enum(__hash_enum&&);
      ~__hash_enum();
    };


  template<typename _Tp>
    struct __hash_enum<_Tp, true> : public __hash_base<size_t, _Tp>
    {
      size_t
      operator()(_Tp __val) const noexcept
      {
       using __type = typename underlying_type<_Tp>::type;
       return hash<__type>{}(static_cast<__type>(__val));
      }
    };



  template<typename _Tp>
    struct hash : __hash_enum<_Tp>
    { };


  template<typename _Tp>
    struct hash<_Tp*> : public __hash_base<size_t, _Tp*>
    {
      size_t
      operator()(_Tp* __p) const noexcept
      { return reinterpret_cast<size_t>(__p); }
    };
# 124 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/functional_hash.h" 3
  template<> struct hash<bool> : public __hash_base<size_t, bool> { size_t operator()(bool __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<char> : public __hash_base<size_t, char> { size_t operator()(char __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<signed char> : public __hash_base<size_t, signed char> { size_t operator()(signed char __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned char> : public __hash_base<size_t, unsigned char> { size_t operator()(unsigned char __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<wchar_t> : public __hash_base<size_t, wchar_t> { size_t operator()(wchar_t __val) const noexcept { return static_cast<size_t>(__val); } };







  template<> struct hash<char16_t> : public __hash_base<size_t, char16_t> { size_t operator()(char16_t __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<char32_t> : public __hash_base<size_t, char32_t> { size_t operator()(char32_t __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<short> : public __hash_base<size_t, short> { size_t operator()(short __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<int> : public __hash_base<size_t, int> { size_t operator()(int __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<long> : public __hash_base<size_t, long> { size_t operator()(long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<long long> : public __hash_base<size_t, long long> { size_t operator()(long long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned short> : public __hash_base<size_t, unsigned short> { size_t operator()(unsigned short __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned int> : public __hash_base<size_t, unsigned int> { size_t operator()(unsigned int __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned long> : public __hash_base<size_t, unsigned long> { size_t operator()(unsigned long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned long long> : public __hash_base<size_t, unsigned long long> { size_t operator()(unsigned long long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<__int128> : public __hash_base<size_t, __int128> { size_t operator()(__int128 __val) const noexcept { return static_cast<size_t>(__val); } };
  template<> struct hash<__int128 unsigned> : public __hash_base<size_t, __int128 unsigned> { size_t operator()(__int128 unsigned __val) const noexcept { return static_cast<size_t>(__val); } };
# 192 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/functional_hash.h" 3
  struct _Hash_impl
  {
    static size_t
    hash(const void* __ptr, size_t __clength,
  size_t __seed = static_cast<size_t>(0xc70f6907UL))
    { return _Hash_bytes(__ptr, __clength, __seed); }

    template<typename _Tp>
      static size_t
      hash(const _Tp& __val)
      { return hash(&__val, sizeof(__val)); }

    template<typename _Tp>
      static size_t
      __hash_combine(const _Tp& __val, size_t __hash)
      { return hash(&__val, sizeof(__val), __hash); }
  };


  struct _Fnv_hash_impl
  {
    static size_t
    hash(const void* __ptr, size_t __clength,
  size_t __seed = static_cast<size_t>(2166136261UL))
    { return _Fnv_hash_bytes(__ptr, __clength, __seed); }

    template<typename _Tp>
      static size_t
      hash(const _Tp& __val)
      { return hash(&__val, sizeof(__val)); }

    template<typename _Tp>
      static size_t
      __hash_combine(const _Tp& __val, size_t __hash)
      { return hash(&__val, sizeof(__val), __hash); }
  };


  template<>
    struct hash<float> : public __hash_base<size_t, float>
    {
      size_t
      operator()(float __val) const noexcept
      {

 return __val != 0.0f ? std::_Hash_impl::hash(__val) : 0;
      }
    };


  template<>
    struct hash<double> : public __hash_base<size_t, double>
    {
      size_t
      operator()(double __val) const noexcept
      {

 return __val != 0.0 ? std::_Hash_impl::hash(__val) : 0;
      }
    };


  template<>
    struct hash<long double>
    : public __hash_base<size_t, long double>
    {
      __attribute__ ((__pure__)) size_t
      operator()(long double __val) const noexcept;
    };
# 278 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/functional_hash.h" 3
  template<typename _Hash>
    struct __is_fast_hash : public std::true_type
    { };

  template<>
    struct __is_fast_hash<hash<long double>> : public std::false_type
    { };


}
# 6728 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 2 3

namespace std
{






  template<>
    struct hash<string>
    : public __hash_base<size_t, string>
    {
      size_t
      operator()(const string& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(), __s.length()); }
    };

  template<>
    struct __is_fast_hash<hash<string>> : std::false_type
    { };



  template<>
    struct hash<wstring>
    : public __hash_base<size_t, wstring>
    {
      size_t
      operator()(const wstring& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(wchar_t)); }
    };

  template<>
    struct __is_fast_hash<hash<wstring>> : std::false_type
    { };
# 6786 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
  template<>
    struct hash<u16string>
    : public __hash_base<size_t, u16string>
    {
      size_t
      operator()(const u16string& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(char16_t)); }
    };

  template<>
    struct __is_fast_hash<hash<u16string>> : std::false_type
    { };


  template<>
    struct hash<u32string>
    : public __hash_base<size_t, u32string>
    {
      size_t
      operator()(const u32string& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(char32_t)); }
    };

  template<>
    struct __is_fast_hash<hash<u32string>> : std::false_type
    { };





  inline namespace literals
  {
  inline namespace string_literals
  {
#pragma GCC diagnostic push

    __attribute ((__abi_tag__ ("cxx11")))
    inline basic_string<char>
    operator""s(const char* __str, size_t __len)
    { return basic_string<char>{__str, __len}; }


    __attribute ((__abi_tag__ ("cxx11")))
    inline basic_string<wchar_t>
    operator""s(const wchar_t* __str, size_t __len)
    { return basic_string<wchar_t>{__str, __len}; }
# 6844 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
    __attribute ((__abi_tag__ ("cxx11")))
    inline basic_string<char16_t>
    operator""s(const char16_t* __str, size_t __len)
    { return basic_string<char16_t>{__str, __len}; }

    __attribute ((__abi_tag__ ("cxx11")))
    inline basic_string<char32_t>
    operator""s(const char32_t* __str, size_t __len)
    { return basic_string<char32_t>{__str, __len}; }

#pragma GCC diagnostic pop
  }
  }
# 6877 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.h" 3
}
# 56 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/string" 2 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.tcc" 1 3
# 43 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.tcc" 3



namespace std
{




  template<typename _CharT, typename _Traits, typename _Alloc>
    const typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::npos;

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    swap(basic_string& __s) noexcept
    {
      if (this == &__s)
 return;

      _Alloc_traits::_S_on_swap(_M_get_allocator(), __s._M_get_allocator());

      if (_M_is_local())
 if (__s._M_is_local())
   {
     if (length() && __s.length())
       {
  _CharT __tmp_data[_S_local_capacity + 1];
  traits_type::copy(__tmp_data, __s._M_local_buf,
      _S_local_capacity + 1);
  traits_type::copy(__s._M_local_buf, _M_local_buf,
      _S_local_capacity + 1);
  traits_type::copy(_M_local_buf, __tmp_data,
      _S_local_capacity + 1);
       }
     else if (__s.length())
       {
  traits_type::copy(_M_local_buf, __s._M_local_buf,
      _S_local_capacity + 1);
  _M_length(__s.length());
  __s._M_set_length(0);
  return;
       }
     else if (length())
       {
  traits_type::copy(__s._M_local_buf, _M_local_buf,
      _S_local_capacity + 1);
  __s._M_length(length());
  _M_set_length(0);
  return;
       }
   }
 else
   {
     const size_type __tmp_capacity = __s._M_allocated_capacity;
     traits_type::copy(__s._M_local_buf, _M_local_buf,
         _S_local_capacity + 1);
     _M_data(__s._M_data());
     __s._M_data(__s._M_local_buf);
     _M_capacity(__tmp_capacity);
   }
      else
 {
   const size_type __tmp_capacity = _M_allocated_capacity;
   if (__s._M_is_local())
     {
       traits_type::copy(_M_local_buf, __s._M_local_buf,
    _S_local_capacity + 1);
       __s._M_data(_M_data());
       _M_data(_M_local_buf);
     }
   else
     {
       pointer __tmp_ptr = _M_data();
       _M_data(__s._M_data());
       __s._M_data(__tmp_ptr);
       _M_capacity(__s._M_allocated_capacity);
     }
   __s._M_capacity(__tmp_capacity);
 }

      const size_type __tmp_length = length();
      _M_length(__s.length());
      __s._M_length(__tmp_length);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::pointer
    basic_string<_CharT, _Traits, _Alloc>::
    _M_create(size_type& __capacity, size_type __old_capacity)
    {


      if (__capacity > max_size())
 std::__throw_length_error(("basic_string::_M_create"));




      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
 {
   __capacity = 2 * __old_capacity;

   if (__capacity > max_size())
     __capacity = max_size();
 }



      return _Alloc_traits::allocate(_M_get_allocator(), __capacity + 1);
    }





  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
      _M_construct(_InIterator __beg, _InIterator __end,
     std::input_iterator_tag)
      {
 size_type __len = 0;
 size_type __capacity = size_type(_S_local_capacity);

 while (__beg != __end && __len < __capacity)
   {
     _M_data()[__len++] = *__beg;
     ++__beg;
   }

 try
   {
     while (__beg != __end)
       {
  if (__len == __capacity)
    {

      __capacity = __len + 1;
      pointer __another = _M_create(__capacity, __len);
      this->_S_copy(__another, _M_data(), __len);
      _M_dispose();
      _M_data(__another);
      _M_capacity(__capacity);
    }
  _M_data()[__len++] = *__beg;
  ++__beg;
       }
   }
 catch(...)
   {
     _M_dispose();
     throw;
   }

 _M_set_length(__len);
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
      _M_construct(_InIterator __beg, _InIterator __end,
     std::forward_iterator_tag)
      {

 if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
   std::__throw_logic_error(("basic_string::" "_M_construct null not valid"));


 size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

 if (__dnew > size_type(_S_local_capacity))
   {
     _M_data(_M_create(__dnew, size_type(0)));
     _M_capacity(__dnew);
   }


 try
   { this->_S_copy_chars(_M_data(), __beg, __end); }
 catch(...)
   {
     _M_dispose();
     throw;
   }

 _M_set_length(__dnew);
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_construct(size_type __n, _CharT __c)
    {
      if (__n > size_type(_S_local_capacity))
 {
   _M_data(_M_create(__n, size_type(0)));
   _M_capacity(__n);
 }

      if (__n)
 this->_S_assign(_M_data(), __n, __c);

      _M_set_length(__n);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_assign(const basic_string& __str)
    {
      if (this != &__str)
 {
   const size_type __rsize = __str.length();
   const size_type __capacity = capacity();

   if (__rsize > __capacity)
     {
       size_type __new_capacity = __rsize;
       pointer __tmp = _M_create(__new_capacity, __capacity);
       _M_dispose();
       _M_data(__tmp);
       _M_capacity(__new_capacity);
     }

   if (__rsize)
     this->_S_copy(_M_data(), __str._M_data(), __rsize);

   _M_set_length(__rsize);
 }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    reserve(size_type __res)
    {

      if (__res < length())
 __res = length();

      const size_type __capacity = capacity();
      if (__res != __capacity)
 {
   if (__res > __capacity
       || __res > size_type(_S_local_capacity))
     {
       pointer __tmp = _M_create(__res, __capacity);
       this->_S_copy(__tmp, _M_data(), length() + 1);
       _M_dispose();
       _M_data(__tmp);
       _M_capacity(__res);
     }
   else if (!_M_is_local())
     {
       this->_S_copy(_M_local_data(), _M_data(), length() + 1);
       _M_destroy(__capacity);
       _M_data(_M_local_data());
     }
 }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,
       size_type __len2)
    {
      const size_type __how_much = length() - __pos - __len1;

      size_type __new_capacity = length() + __len2 - __len1;
      pointer __r = _M_create(__new_capacity, capacity());

      if (__pos)
 this->_S_copy(__r, _M_data(), __pos);
      if (__s && __len2)
 this->_S_copy(__r + __pos, __s, __len2);
      if (__how_much)
 this->_S_copy(__r + __pos + __len2,
        _M_data() + __pos + __len1, __how_much);

      _M_dispose();
      _M_data(__r);
      _M_capacity(__new_capacity);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_erase(size_type __pos, size_type __n)
    {
      const size_type __how_much = length() - __pos - __n;

      if (__how_much && __n)
 this->_S_move(_M_data() + __pos, _M_data() + __pos + __n, __how_much);

      _M_set_length(length() - __n);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    resize(size_type __n, _CharT __c)
    {
      const size_type __size = this->size();
      if (__size < __n)
 this->append(__n - __size, __c);
      else if (__n < __size)
 this->_M_set_length(__n);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_append(const _CharT* __s, size_type __n)
    {
      const size_type __len = __n + this->size();

      if (__len <= this->capacity())
 {
   if (__n)
     this->_S_copy(this->_M_data() + this->size(), __s, __n);
 }
      else
 this->_M_mutate(this->size(), size_type(0), __s, __n);

      this->_M_set_length(__len);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InputIterator>
      basic_string<_CharT, _Traits, _Alloc>&
      basic_string<_CharT, _Traits, _Alloc>::
      _M_replace_dispatch(const_iterator __i1, const_iterator __i2,
     _InputIterator __k1, _InputIterator __k2,
     std::__false_type)
      {
 const basic_string __s(__k1, __k2);
 const size_type __n1 = __i2 - __i1;
 return _M_replace(__i1 - begin(), __n1, __s._M_data(),
     __s.size());
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
     _CharT __c)
    {
      _M_check_length(__n1, __n2, "basic_string::_M_replace_aux");

      const size_type __old_size = this->size();
      const size_type __new_size = __old_size + __n2 - __n1;

      if (__new_size <= this->capacity())
 {
   pointer __p = this->_M_data() + __pos1;

   const size_type __how_much = __old_size - __pos1 - __n1;
   if (__how_much && __n1 != __n2)
     this->_S_move(__p + __n2, __p + __n1, __how_much);
 }
      else
 this->_M_mutate(__pos1, __n1, 0, __n2);

      if (__n2)
 this->_S_assign(this->_M_data() + __pos1, __n2, __c);

      this->_M_set_length(__new_size);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
        const size_type __len2)
    {
      _M_check_length(__len1, __len2, "basic_string::_M_replace");

      const size_type __old_size = this->size();
      const size_type __new_size = __old_size + __len2 - __len1;

      if (__new_size <= this->capacity())
 {
   pointer __p = this->_M_data() + __pos;

   const size_type __how_much = __old_size - __pos - __len1;
   if (_M_disjunct(__s))
     {
       if (__how_much && __len1 != __len2)
  this->_S_move(__p + __len2, __p + __len1, __how_much);
       if (__len2)
  this->_S_copy(__p, __s, __len2);
     }
   else
     {

       if (__len2 && __len2 <= __len1)
  this->_S_move(__p, __s, __len2);
       if (__how_much && __len1 != __len2)
  this->_S_move(__p + __len2, __p + __len1, __how_much);
       if (__len2 > __len1)
  {
    if (__s + __len2 <= __p + __len1)
      this->_S_move(__p, __s, __len2);
    else if (__s >= __p + __len1)
      this->_S_copy(__p, __s + __len2 - __len1, __len2);
    else
      {
        const size_type __nleft = (__p + __len1) - __s;
        this->_S_move(__p, __s, __nleft);
        this->_S_copy(__p + __nleft, __p + __len2,
        __len2 - __nleft);
      }
  }
     }
 }
      else
 this->_M_mutate(__pos, __len1, __s, __len2);

      this->_M_set_length(__new_size);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    copy(_CharT* __s, size_type __n, size_type __pos) const
    {
      _M_check(__pos, "basic_string::copy");
      __n = _M_limit(__pos, __n);
                                             ;
      if (__n)
 _S_copy(__s, _M_data() + __pos, __n);

      return __n;
    }
# 1156 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.tcc" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
                                      ;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      const __size_type __len = _Traits::length(__lhs);
      __string_type __str;
      __str.reserve(__len + __rhs.size());
      __str.append(__lhs, __len);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str;
      const __size_type __len = __rhs.size();
      __str.reserve(__len + 1);
      __str.append(__size_type(1), __lhs);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
                                             ;
      const size_type __size = this->size();

      if (__n == 0)
 return __pos <= __size ? __pos : npos;
      if (__pos >= __size)
 return npos;

      const _CharT __elem0 = __s[0];
      const _CharT* const __data = data();
      const _CharT* __first = __data + __pos;
      const _CharT* const __last = __data + __size;
      size_type __len = __size - __pos;

      while (__len >= __n)
 {

   __first = traits_type::find(__first, __len - __n + 1, __elem0);
   if (!__first)
     return npos;



   if (traits_type::compare(__first, __s, __n) == 0)
     return __first - __data;
   __len = __last - ++__first;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(_CharT __c, size_type __pos) const noexcept
    {
      size_type __ret = npos;
      const size_type __size = this->size();
      if (__pos < __size)
 {
   const _CharT* __data = _M_data();
   const size_type __n = __size - __pos;
   const _CharT* __p = traits_type::find(__data + __pos, __n, __c);
   if (__p)
     __ret = __p - __data;
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
                                             ;
      const size_type __size = this->size();
      if (__n <= __size)
 {
   __pos = std::min(size_type(__size - __n), __pos);
   const _CharT* __data = _M_data();
   do
     {
       if (traits_type::compare(__data + __pos, __s, __n) == 0)
  return __pos;
     }
   while (__pos-- > 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(_CharT __c, size_type __pos) const noexcept
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   for (++__size; __size-- > 0; )
     if (traits_type::eq(_M_data()[__size], __c))
       return __size;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
                                             ;
      for (; __n && __pos < this->size(); ++__pos)
 {
   const _CharT* __p = traits_type::find(__s, __n, _M_data()[__pos]);
   if (__p)
     return __pos;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
                                             ;
      size_type __size = this->size();
      if (__size && __n)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size-- != 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
                                             ;
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::find(__s, __n, _M_data()[__pos]))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(_CharT __c, size_type __pos) const noexcept
    {
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::eq(_M_data()[__pos], __c))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
                                             ;
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(_CharT __c, size_type __pos) const noexcept
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::eq(_M_data()[__size], __c))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n, const basic_string& __str) const
    {
      _M_check(__pos, "basic_string::compare");
      __n = _M_limit(__pos, __n);
      const size_type __osize = __str.size();
      const size_type __len = std::min(__n, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __str.data(), __len);
      if (!__r)
 __r = _S_compare(__n, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos1, size_type __n1, const basic_string& __str,
     size_type __pos2, size_type __n2) const
    {
      _M_check(__pos1, "basic_string::compare");
      __str._M_check(__pos2, "basic_string::compare");
      __n1 = _M_limit(__pos1, __n1);
      __n2 = __str._M_limit(__pos2, __n2);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos1,
         __str.data() + __pos2, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(const _CharT* __s) const noexcept
    {
                                    ;
      const size_type __size = this->size();
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__size, __osize);
      int __r = traits_type::compare(_M_data(), __s, __len);
      if (!__r)
 __r = _S_compare(__size, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s) const
    {
                                    ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__n1, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s,
     size_type __n2) const
    {
                                              ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in,
        basic_string<_CharT, _Traits, _Alloc>& __str)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;
      typedef ctype<_CharT> __ctype_type;
      typedef typename __ctype_type::ctype_base __ctype_base;

      __size_type __extracted = 0;
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   try
     {

       __str.erase();
       _CharT __buf[128];
       __size_type __len = 0;
       const streamsize __w = __in.width();
       const __size_type __n = __w > 0 ? static_cast<__size_type>(__w)
                                : __str.max_size();
       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(__ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    if (__len == sizeof(__buf) / sizeof(_CharT))
      {
        __str.append(__buf, sizeof(__buf) / sizeof(_CharT));
        __len = 0;
      }
    __buf[__len++] = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }
       __str.append(__buf, __len);

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       __in.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }

      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __in,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;

      __size_type __extracted = 0;
      const __size_type __n = __str.max_size();
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, true);
      if (__cerb)
 {
   try
     {
       __str.erase();
       const __int_type __idelim = _Traits::to_int_type(__delim);
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !_Traits::eq_int_type(__c, __idelim))
  {
    __str += _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       else if (_Traits::eq_int_type(__c, __idelim))
  {
    ++__extracted;
    __in.rdbuf()->sbumpc();
  }
       else
  __err |= __ios_base::failbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }
      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }
# 1608 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_string.tcc" 3
  extern template class basic_string<char>;







  extern template
    basic_istream<char>&
    operator>>(basic_istream<char>&, string&);
  extern template
    basic_ostream<char>&
    operator<<(basic_ostream<char>&, const string&);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&, char);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&);



  extern template class basic_string<wchar_t>;





  extern template
    basic_istream<wchar_t>&
    operator>>(basic_istream<wchar_t>&, wstring&);
  extern template
    basic_ostream<wchar_t>&
    operator<<(basic_ostream<wchar_t>&, const wstring&);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&, wchar_t);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&);




}
# 57 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/string" 2 3
# 41 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_classes.h" 2 3


namespace std
{
# 62 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_classes.h" 3
  class locale
  {
  public:


    typedef int category;


    class facet;
    class id;
    class _Impl;

    friend class facet;
    friend class _Impl;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;
# 98 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_classes.h" 3
    static const category none = 0;
    static const category ctype = 1L << 0;
    static const category numeric = 1L << 1;
    static const category collate = 1L << 2;
    static const category time = 1L << 3;
    static const category monetary = 1L << 4;
    static const category messages = 1L << 5;
    static const category all = (ctype | numeric | collate |
        time | monetary | messages);
# 117 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_classes.h" 3
    locale() throw();
# 126 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_classes.h" 3
    locale(const locale& __other) throw();
# 136 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_classes.h" 3
    explicit
    locale(const char* __s);
# 151 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_classes.h" 3
    locale(const locale& __base, const char* __s, category __cat);
# 162 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_classes.h" 3
    explicit
    locale(const std::string& __s) : locale(__s.c_str()) { }
# 177 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_classes.h" 3
    locale(const locale& __base, const std::string& __s, category __cat)
    : locale(__base, __s.c_str(), __cat) { }
# 192 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_classes.h" 3
    locale(const locale& __base, const locale& __add, category __cat);
# 205 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_classes.h" 3
    template<typename _Facet>
      locale(const locale& __other, _Facet* __f);


    ~locale() throw();
# 219 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_classes.h" 3
    const locale&
    operator=(const locale& __other) throw();
# 234 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_classes.h" 3
    template<typename _Facet>
      locale
      combine(const locale& __other) const;






    __attribute ((__abi_tag__ ("cxx11")))
    string
    name() const;
# 254 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_classes.h" 3
    bool
    operator==(const locale& __other) const throw();







    bool
    operator!=(const locale& __other) const throw()
    { return !(this->operator==(__other)); }
# 282 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_classes.h" 3
    template<typename _Char, typename _Traits, typename _Alloc>
      bool
      operator()(const basic_string<_Char, _Traits, _Alloc>& __s1,
   const basic_string<_Char, _Traits, _Alloc>& __s2) const;
# 298 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_classes.h" 3
    static locale
    global(const locale& __loc);




    static const locale&
    classic();

  private:

    _Impl* _M_impl;


    static _Impl* _S_classic;


    static _Impl* _S_global;





    static const char* const* const _S_categories;
# 333 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_classes.h" 3
    enum { _S_categories_size = 6 + 0 };


    static __gthread_once_t _S_once;


    explicit
    locale(_Impl*) throw();

    static void
    _S_initialize();

    static void
    _S_initialize_once() throw();

    static category
    _S_normalize_category(category);

    void
    _M_coalesce(const locale& __base, const locale& __add, category __cat);


    static const id* const _S_twinned_facets[];

  };
# 371 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_classes.h" 3
  class locale::facet
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    mutable _Atomic_word _M_refcount;


    static __c_locale _S_c_locale;


    static const char _S_c_name[2];


    static __gthread_once_t _S_once;


    static void
    _S_initialize_once();

  protected:
# 402 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_classes.h" 3
    explicit
    facet(size_t __refs = 0) throw() : _M_refcount(__refs ? 1 : 0)
    { }


    virtual
    ~facet();

    static void
    _S_create_c_locale(__c_locale& __cloc, const char* __s,
         __c_locale __old = 0);

    static __c_locale
    _S_clone_c_locale(__c_locale& __cloc) throw();

    static void
    _S_destroy_c_locale(__c_locale& __cloc);

    static __c_locale
    _S_lc_ctype_c_locale(__c_locale __cloc, const char* __s);



    static __c_locale
    _S_get_c_locale();

    __attribute__ ((__const__)) static const char*
    _S_get_c_name() throw();
# 438 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_classes.h" 3
    facet(const facet&) = delete;

    facet&
    operator=(const facet&) = delete;


  private:
    void
    _M_add_reference() const throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() const throw()
    {

                                                           ;
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
                                                              ;
   try
     { delete this; }
   catch(...)
     { }
 }
    }

    const facet* _M_sso_shim(const id*) const;
    const facet* _M_cow_shim(const id*) const;

  protected:
    class __shim;
  };
# 483 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_classes.h" 3
  class locale::id
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();




    mutable size_t _M_index;


    static _Atomic_word _S_refcount;

    void
    operator=(const id&);

    id(const id&);

  public:



    id() { }

    size_t
    _M_id() const throw();
  };



  class locale::_Impl
  {
  public:

    friend class locale;
    friend class locale::facet;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;

  private:

    _Atomic_word _M_refcount;
    const facet** _M_facets;
    size_t _M_facets_size;
    const facet** _M_caches;
    char** _M_names;
    static const locale::id* const _S_id_ctype[];
    static const locale::id* const _S_id_numeric[];
    static const locale::id* const _S_id_collate[];
    static const locale::id* const _S_id_time[];
    static const locale::id* const _S_id_monetary[];
    static const locale::id* const _S_id_messages[];
    static const locale::id* const* const _S_facet_categories[];

    void
    _M_add_reference() throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() throw()
    {

                                                           ;
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
                                                              ;
   try
     { delete this; }
   catch(...)
     { }
 }
    }

    _Impl(const _Impl&, size_t);
    _Impl(const char*, size_t);
    _Impl(size_t) throw();

   ~_Impl() throw();

    _Impl(const _Impl&);

    void
    operator=(const _Impl&);

    bool
    _M_check_same_name()
    {
      bool __ret = true;
      if (_M_names[1])

 for (size_t __i = 0; __ret && __i < _S_categories_size - 1; ++__i)
   __ret = __builtin_strcmp(_M_names[__i], _M_names[__i + 1]) == 0;
      return __ret;
    }

    void
    _M_replace_categories(const _Impl*, category);

    void
    _M_replace_category(const _Impl*, const locale::id* const*);

    void
    _M_replace_facet(const _Impl*, const locale::id*);

    void
    _M_install_facet(const locale::id*, const facet*);

    template<typename _Facet>
      void
      _M_init_facet(_Facet* __facet)
      { _M_install_facet(&_Facet::id, __facet); }

    template<typename _Facet>
      void
      _M_init_facet_unchecked(_Facet* __facet)
      {
 __facet->_M_add_reference();
 _M_facets[_Facet::id._M_id()] = __facet;
      }

    void
    _M_install_cache(const facet*, size_t);

    void _M_init_extra(facet**);
    void _M_init_extra(void*, void*, const char*, const char*);
  };
# 641 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_classes.h" 3
  template<typename _CharT>
    class __cxx11:: collate : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


    protected:


      __c_locale _M_c_locale_collate;

    public:

      static locale::id id;
# 668 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_classes.h" 3
      explicit
      collate(size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_get_c_locale())
      { }
# 682 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_classes.h" 3
      explicit
      collate(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_clone_c_locale(__cloc))
      { }
# 699 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_classes.h" 3
      int
      compare(const _CharT* __lo1, const _CharT* __hi1,
       const _CharT* __lo2, const _CharT* __hi2) const
      { return this->do_compare(__lo1, __hi1, __lo2, __hi2); }
# 718 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_classes.h" 3
      string_type
      transform(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_transform(__lo, __hi); }
# 732 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_classes.h" 3
      long
      hash(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_hash(__lo, __hi); }


      int
      _M_compare(const _CharT*, const _CharT*) const throw();

      size_t
      _M_transform(_CharT*, const _CharT*, size_t) const throw();

  protected:

      virtual
      ~collate()
      { _S_destroy_c_locale(_M_c_locale_collate); }
# 761 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_classes.h" 3
      virtual int
      do_compare(const _CharT* __lo1, const _CharT* __hi1,
   const _CharT* __lo2, const _CharT* __hi2) const;
# 775 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_classes.h" 3
      virtual string_type
      do_transform(const _CharT* __lo, const _CharT* __hi) const;
# 788 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_classes.h" 3
      virtual long
      do_hash(const _CharT* __lo, const _CharT* __hi) const;
    };

  template<typename _CharT>
    locale::id collate<_CharT>::id;


  template<>
    int
    collate<char>::_M_compare(const char*, const char*) const throw();

  template<>
    size_t
    collate<char>::_M_transform(char*, const char*, size_t) const throw();


  template<>
    int
    collate<wchar_t>::_M_compare(const wchar_t*, const wchar_t*) const throw();

  template<>
    size_t
    collate<wchar_t>::_M_transform(wchar_t*, const wchar_t*, size_t) const throw();



  template<typename _CharT>
    class __cxx11:: collate_byname : public collate<_CharT>
    {
    public:


      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


      explicit
      collate_byname(const char* __s, size_t __refs = 0)
      : collate<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     this->_S_destroy_c_locale(this->_M_c_locale_collate);
     this->_S_create_c_locale(this->_M_c_locale_collate, __s);
   }
      }


      explicit
      collate_byname(const string& __s, size_t __refs = 0)
      : collate_byname(__s.c_str(), __refs) { }


    protected:
      virtual
      ~collate_byname() { }
    };


}

# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_classes.tcc" 1 3
# 38 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_classes.tcc" 3

namespace std
{


  template<typename _Facet>
    locale::
    locale(const locale& __other, _Facet* __f)
    {
      _M_impl = new _Impl(*__other._M_impl, 1);

      try
 { _M_impl->_M_install_facet(&_Facet::id, __f); }
      catch(...)
 {
   _M_impl->_M_remove_reference();
   throw;
 }
      delete [] _M_impl->_M_names[0];
      _M_impl->_M_names[0] = 0;
    }

  template<typename _Facet>
    locale
    locale::
    combine(const locale& __other) const
    {
      _Impl* __tmp = new _Impl(*_M_impl, 1);
      try
 {
   __tmp->_M_replace_facet(__other._M_impl, &_Facet::id);
 }
      catch(...)
 {
   __tmp->_M_remove_reference();
   throw;
 }
      return locale(__tmp);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    bool
    locale::
    operator()(const basic_string<_CharT, _Traits, _Alloc>& __s1,
        const basic_string<_CharT, _Traits, _Alloc>& __s2) const
    {
      typedef std::collate<_CharT> __collate_type;
      const __collate_type& __collate = use_facet<__collate_type>(*this);
      return (__collate.compare(__s1.data(), __s1.data() + __s1.length(),
    __s2.data(), __s2.data() + __s2.length()) < 0);
    }
# 102 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_classes.tcc" 3
  template<typename _Facet>
    bool
    has_facet(const locale& __loc) throw()
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      return (__i < __loc._M_impl->_M_facets_size

       && dynamic_cast<const _Facet*>(__facets[__i]));



    }
# 130 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_classes.tcc" 3
  template<typename _Facet>
    const _Facet&
    use_facet(const locale& __loc)
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      if (__i >= __loc._M_impl->_M_facets_size || !__facets[__i])
        __throw_bad_cast();

      return dynamic_cast<const _Facet&>(*__facets[__i]);



    }



  template<typename _CharT>
    int
    collate<_CharT>::_M_compare(const _CharT*, const _CharT*) const throw ()
    { return 0; }


  template<typename _CharT>
    size_t
    collate<_CharT>::_M_transform(_CharT*, const _CharT*, size_t) const throw ()
    { return 0; }

  template<typename _CharT>
    int
    collate<_CharT>::
    do_compare(const _CharT* __lo1, const _CharT* __hi1,
        const _CharT* __lo2, const _CharT* __hi2) const
    {


      const string_type __one(__lo1, __hi1);
      const string_type __two(__lo2, __hi2);

      const _CharT* __p = __one.c_str();
      const _CharT* __pend = __one.data() + __one.length();
      const _CharT* __q = __two.c_str();
      const _CharT* __qend = __two.data() + __two.length();




      for (;;)
 {
   const int __res = _M_compare(__p, __q);
   if (__res)
     return __res;

   __p += char_traits<_CharT>::length(__p);
   __q += char_traits<_CharT>::length(__q);
   if (__p == __pend && __q == __qend)
     return 0;
   else if (__p == __pend)
     return -1;
   else if (__q == __qend)
     return 1;

   __p++;
   __q++;
 }
    }

  template<typename _CharT>
    typename collate<_CharT>::string_type
    collate<_CharT>::
    do_transform(const _CharT* __lo, const _CharT* __hi) const
    {
      string_type __ret;


      const string_type __str(__lo, __hi);

      const _CharT* __p = __str.c_str();
      const _CharT* __pend = __str.data() + __str.length();

      size_t __len = (__hi - __lo) * 2;

      _CharT* __c = new _CharT[__len];

      try
 {



   for (;;)
     {

       size_t __res = _M_transform(__c, __p, __len);


       if (__res >= __len)
  {
    __len = __res + 1;
    delete [] __c, __c = 0;
    __c = new _CharT[__len];
    __res = _M_transform(__c, __p, __len);
  }

       __ret.append(__c, __res);
       __p += char_traits<_CharT>::length(__p);
       if (__p == __pend)
  break;

       __p++;
       __ret.push_back(_CharT());
     }
 }
      catch(...)
 {
   delete [] __c;
   throw;
 }

      delete [] __c;

      return __ret;
    }

  template<typename _CharT>
    long
    collate<_CharT>::
    do_hash(const _CharT* __lo, const _CharT* __hi) const
    {
      unsigned long __val = 0;
      for (; __lo < __hi; ++__lo)
 __val =
   *__lo + ((__val << 7)
     | (__val >> (__gnu_cxx::__numeric_traits<unsigned long>::
    __digits - 7)));
      return static_cast<long>(__val);
    }




  extern template class collate<char>;
  extern template class collate_byname<char>;

  extern template
    const collate<char>&
    use_facet<collate<char> >(const locale&);

  extern template
    bool
    has_facet<collate<char> >(const locale&);


  extern template class collate<wchar_t>;
  extern template class collate_byname<wchar_t>;

  extern template
    const collate<wchar_t>&
    use_facet<collate<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<collate<wchar_t> >(const locale&);




}
# 852 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_classes.h" 2 3
# 42 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/ios_base.h" 2 3




# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/system_error" 1 3
# 33 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/system_error" 3






# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/x86_64-w64-mingw32/bits/error_constants.h" 1 3
# 34 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/x86_64-w64-mingw32/bits/error_constants.h" 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cerrno" 1 3
# 40 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cerrno" 3
# 35 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/x86_64-w64-mingw32/bits/error_constants.h" 2 3

namespace std
{




  enum class errc
    {
      address_family_not_supported = 102,
      address_in_use = 100,
      address_not_available = 101,
      already_connected = 113,
      argument_list_too_long = 7,
      argument_out_of_domain = 33,
      bad_address = 14,
      bad_file_descriptor = 9,

      bad_message = 104,

      broken_pipe = 32,
      connection_aborted = 106,
      connection_already_in_progress = 103,
      connection_refused = 107,
      connection_reset = 108,
      cross_device_link = 18,
      destination_address_required = 109,
      device_or_resource_busy = 16,
      directory_not_empty = 41,
      executable_format_error = 8,
      file_exists = 17,
      file_too_large = 27,
      filename_too_long = 38,
      function_not_supported = 40,
      host_unreachable = 110,

      identifier_removed = 111,

      illegal_byte_sequence = 42,
      inappropriate_io_control_operation = 25,
      interrupted = 4,
      invalid_argument = 22,
      invalid_seek = 29,
      io_error = 5,
      is_a_directory = 21,
      message_size = 115,
      network_down = 116,
      network_reset = 117,
      network_unreachable = 118,
      no_buffer_space = 119,

      no_child_process = 10,


      no_link = 121,

      no_lock_available = 39,

      no_message_available = 120,


      no_message = 122,

      no_protocol_option = 123,

      no_space_on_device = 28,


      no_stream_resources = 124,

      no_such_device_or_address = 6,
      no_such_device = 19,
      no_such_file_or_directory = 2,
      no_such_process = 3,
      not_a_directory = 20,
      not_a_socket = 128,

      not_a_stream = 125,

      not_connected = 126,
      not_enough_memory = 12,

      not_supported = 129,

      operation_canceled = 105,
      operation_in_progress = 112,

      operation_not_permitted = 1,

      operation_not_supported = 130,

      operation_would_block = 140,


      owner_dead = 133,

      permission_denied = 13,
      protocol_error = 134,
      protocol_not_supported = 135,
      read_only_file_system = 30,
      resource_deadlock_would_occur = 36,
      resource_unavailable_try_again = 11,
      result_out_of_range = 34,

      state_not_recoverable = 127,


      stream_timeout = 137,


      text_file_busy = 139,


      timed_out = 138,

      too_many_files_open_in_system = 23,
      too_many_files_open = 24,
      too_many_links = 31,
      too_many_symbolic_link_levels = 114,

      value_too_large = 132,

      wrong_protocol_type = 136
   };


}
# 40 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/system_error" 2 3

# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/stdexcept" 1 3
# 37 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/stdexcept" 3




namespace std
{





  struct __cow_string
  {
    union {
      const char* _M_p;
      char _M_bytes[sizeof(const char*)];
    };

    __cow_string();
    __cow_string(const std::string&);
    __cow_string(const char*, size_t);
    __cow_string(const __cow_string&) noexcept;
    __cow_string& operator=(const __cow_string&) noexcept;
    ~__cow_string();

    __cow_string(__cow_string&&) noexcept;
    __cow_string& operator=(__cow_string&&) noexcept;

  };

  typedef basic_string<char> __sso_string;
# 113 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/stdexcept" 3
  class logic_error : public exception
  {
    __cow_string _M_msg;

  public:

    explicit
    logic_error(const string& __arg) ;


    explicit
    logic_error(const char*) ;

    logic_error(logic_error&&) noexcept;
    logic_error& operator=(logic_error&&) noexcept;



    logic_error(const logic_error&) noexcept;
    logic_error& operator=(const logic_error&) noexcept;





    virtual ~logic_error() noexcept;



    virtual const char*
    what() const noexcept;





  };



  class domain_error : public logic_error
  {
  public:
    explicit domain_error(const string& __arg) ;

    explicit domain_error(const char*) ;
    domain_error(const domain_error&) = default;
    domain_error& operator=(const domain_error&) = default;
    domain_error(domain_error&&) = default;
    domain_error& operator=(domain_error&&) = default;

    virtual ~domain_error() noexcept;
  };


  class invalid_argument : public logic_error
  {
  public:
    explicit invalid_argument(const string& __arg) ;

    explicit invalid_argument(const char*) ;
    invalid_argument(const invalid_argument&) = default;
    invalid_argument& operator=(const invalid_argument&) = default;
    invalid_argument(invalid_argument&&) = default;
    invalid_argument& operator=(invalid_argument&&) = default;

    virtual ~invalid_argument() noexcept;
  };



  class length_error : public logic_error
  {
  public:
    explicit length_error(const string& __arg) ;

    explicit length_error(const char*) ;
    length_error(const length_error&) = default;
    length_error& operator=(const length_error&) = default;
    length_error(length_error&&) = default;
    length_error& operator=(length_error&&) = default;

    virtual ~length_error() noexcept;
  };



  class out_of_range : public logic_error
  {
  public:
    explicit out_of_range(const string& __arg) ;

    explicit out_of_range(const char*) ;
    out_of_range(const out_of_range&) = default;
    out_of_range& operator=(const out_of_range&) = default;
    out_of_range(out_of_range&&) = default;
    out_of_range& operator=(out_of_range&&) = default;

    virtual ~out_of_range() noexcept;
  };






  class runtime_error : public exception
  {
    __cow_string _M_msg;

  public:

    explicit
    runtime_error(const string& __arg) ;


    explicit
    runtime_error(const char*) ;

    runtime_error(runtime_error&&) noexcept;
    runtime_error& operator=(runtime_error&&) noexcept;



    runtime_error(const runtime_error&) noexcept;
    runtime_error& operator=(const runtime_error&) noexcept;





    virtual ~runtime_error() noexcept;



    virtual const char*
    what() const noexcept;





  };


  class range_error : public runtime_error
  {
  public:
    explicit range_error(const string& __arg) ;

    explicit range_error(const char*) ;
    range_error(const range_error&) = default;
    range_error& operator=(const range_error&) = default;
    range_error(range_error&&) = default;
    range_error& operator=(range_error&&) = default;

    virtual ~range_error() noexcept;
  };


  class overflow_error : public runtime_error
  {
  public:
    explicit overflow_error(const string& __arg) ;

    explicit overflow_error(const char*) ;
    overflow_error(const overflow_error&) = default;
    overflow_error& operator=(const overflow_error&) = default;
    overflow_error(overflow_error&&) = default;
    overflow_error& operator=(overflow_error&&) = default;

    virtual ~overflow_error() noexcept;
  };


  class underflow_error : public runtime_error
  {
  public:
    explicit underflow_error(const string& __arg) ;

    explicit underflow_error(const char*) ;
    underflow_error(const underflow_error&) = default;
    underflow_error& operator=(const underflow_error&) = default;
    underflow_error(underflow_error&&) = default;
    underflow_error& operator=(underflow_error&&) = default;

    virtual ~underflow_error() noexcept;
  };




}
# 42 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/system_error" 2 3

namespace std
{


  class error_code;
  class error_condition;
  class system_error;


  template<typename _Tp>
    struct is_error_code_enum : public false_type { };


  template<typename _Tp>
    struct is_error_condition_enum : public false_type { };

  template<>
    struct is_error_condition_enum<errc>
    : public true_type { };
# 71 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/system_error" 3
  inline namespace _V2 {


  class error_category
  {
  public:
    constexpr error_category() noexcept = default;

    virtual ~error_category();

    error_category(const error_category&) = delete;
    error_category& operator=(const error_category&) = delete;

    virtual const char*
    name() const noexcept = 0;






  private:
    __attribute ((__abi_tag__ ("cxx11")))
    virtual __cow_string
    _M_message(int) const;

  public:
    __attribute ((__abi_tag__ ("cxx11")))
    virtual string
    message(int) const = 0;
# 110 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/system_error" 3
  public:
    virtual error_condition
    default_error_condition(int __i) const noexcept;

    virtual bool
    equivalent(int __i, const error_condition& __cond) const noexcept;

    virtual bool
    equivalent(const error_code& __code, int __i) const noexcept;

    bool
    operator<(const error_category& __other) const noexcept
    { return less<const error_category*>()(this, &__other); }

    bool
    operator==(const error_category& __other) const noexcept
    { return this == &__other; }

    bool
    operator!=(const error_category& __other) const noexcept
    { return this != &__other; }
  };


  __attribute__ ((__const__)) const error_category& system_category() noexcept;
  __attribute__ ((__const__)) const error_category& generic_category() noexcept;

  }

  error_code make_error_code(errc) noexcept;

  template<typename _Tp>
    struct hash;



  struct error_code
  {
    error_code() noexcept
    : _M_value(0), _M_cat(&system_category()) { }

    error_code(int __v, const error_category& __cat) noexcept
    : _M_value(__v), _M_cat(&__cat) { }

    template<typename _ErrorCodeEnum, typename = typename
      enable_if<is_error_code_enum<_ErrorCodeEnum>::value>::type>
      error_code(_ErrorCodeEnum __e) noexcept
      { *this = make_error_code(__e); }

    void
    assign(int __v, const error_category& __cat) noexcept
    {
      _M_value = __v;
      _M_cat = &__cat;
    }

    void
    clear() noexcept
    { assign(0, system_category()); }


    template<typename _ErrorCodeEnum>
      typename enable_if<is_error_code_enum<_ErrorCodeEnum>::value,
    error_code&>::type
      operator=(_ErrorCodeEnum __e) noexcept
      { return *this = make_error_code(__e); }

    int
    value() const noexcept { return _M_value; }

    const error_category&
    category() const noexcept { return *_M_cat; }

    error_condition
    default_error_condition() const noexcept;

    __attribute ((__abi_tag__ ("cxx11")))
    string
    message() const
    { return category().message(value()); }

    explicit operator bool() const noexcept
    { return _M_value != 0; }


  private:
    friend class hash<error_code>;

    int _M_value;
    const error_category* _M_cat;
  };


  inline error_code
  make_error_code(errc __e) noexcept
  { return error_code(static_cast<int>(__e), generic_category()); }

  inline bool
  operator<(const error_code& __lhs, const error_code& __rhs) noexcept
  {
    return (__lhs.category() < __rhs.category()
     || (__lhs.category() == __rhs.category()
  && __lhs.value() < __rhs.value()));
  }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os, const error_code& __e)
    { return (__os << __e.category().name() << ':' << __e.value()); }

  error_condition make_error_condition(errc) noexcept;



  struct error_condition
  {
    error_condition() noexcept
    : _M_value(0), _M_cat(&generic_category()) { }

    error_condition(int __v, const error_category& __cat) noexcept
    : _M_value(__v), _M_cat(&__cat) { }

    template<typename _ErrorConditionEnum, typename = typename
  enable_if<is_error_condition_enum<_ErrorConditionEnum>::value>::type>
      error_condition(_ErrorConditionEnum __e) noexcept
      { *this = make_error_condition(__e); }

    void
    assign(int __v, const error_category& __cat) noexcept
    {
      _M_value = __v;
      _M_cat = &__cat;
    }


    template<typename _ErrorConditionEnum>
      typename enable_if<is_error_condition_enum
    <_ErrorConditionEnum>::value, error_condition&>::type
      operator=(_ErrorConditionEnum __e) noexcept
      { return *this = make_error_condition(__e); }

    void
    clear() noexcept
    { assign(0, generic_category()); }


    int
    value() const noexcept { return _M_value; }

    const error_category&
    category() const noexcept { return *_M_cat; }

    __attribute ((__abi_tag__ ("cxx11")))
    string
    message() const
    { return category().message(value()); }

    explicit operator bool() const noexcept
    { return _M_value != 0; }


  private:
    int _M_value;
    const error_category* _M_cat;
  };


  inline error_condition
  make_error_condition(errc __e) noexcept
  { return error_condition(static_cast<int>(__e), generic_category()); }

  inline bool
  operator<(const error_condition& __lhs,
     const error_condition& __rhs) noexcept
  {
    return (__lhs.category() < __rhs.category()
     || (__lhs.category() == __rhs.category()
  && __lhs.value() < __rhs.value()));
  }


  inline bool
  operator==(const error_code& __lhs, const error_code& __rhs) noexcept
  { return (__lhs.category() == __rhs.category()
     && __lhs.value() == __rhs.value()); }

  inline bool
  operator==(const error_code& __lhs, const error_condition& __rhs) noexcept
  {
    return (__lhs.category().equivalent(__lhs.value(), __rhs)
     || __rhs.category().equivalent(__lhs, __rhs.value()));
  }

  inline bool
  operator==(const error_condition& __lhs, const error_code& __rhs) noexcept
  {
    return (__rhs.category().equivalent(__rhs.value(), __lhs)
     || __lhs.category().equivalent(__rhs, __lhs.value()));
  }

  inline bool
  operator==(const error_condition& __lhs,
      const error_condition& __rhs) noexcept
  {
    return (__lhs.category() == __rhs.category()
     && __lhs.value() == __rhs.value());
  }

  inline bool
  operator!=(const error_code& __lhs, const error_code& __rhs) noexcept
  { return !(__lhs == __rhs); }

  inline bool
  operator!=(const error_code& __lhs, const error_condition& __rhs) noexcept
  { return !(__lhs == __rhs); }

  inline bool
  operator!=(const error_condition& __lhs, const error_code& __rhs) noexcept
  { return !(__lhs == __rhs); }

  inline bool
  operator!=(const error_condition& __lhs,
      const error_condition& __rhs) noexcept
  { return !(__lhs == __rhs); }







  class system_error : public std::runtime_error
  {
  private:
    error_code _M_code;

  public:
    system_error(error_code __ec = error_code())
    : runtime_error(__ec.message()), _M_code(__ec) { }

    system_error(error_code __ec, const string& __what)
    : runtime_error(__what + ": " + __ec.message()), _M_code(__ec) { }

    system_error(error_code __ec, const char* __what)
    : runtime_error(__what + (": " + __ec.message())), _M_code(__ec) { }

    system_error(int __v, const error_category& __ecat, const char* __what)
    : system_error(error_code(__v, __ecat), __what) { }

    system_error(int __v, const error_category& __ecat)
    : runtime_error(error_code(__v, __ecat).message()),
      _M_code(__v, __ecat) { }

    system_error(int __v, const error_category& __ecat, const string& __what)
    : runtime_error(__what + ": " + error_code(__v, __ecat).message()),
      _M_code(__v, __ecat) { }


    system_error (const system_error &) = default;
    system_error &operator= (const system_error &) = default;


    virtual ~system_error() noexcept;

    const error_code&
    code() const noexcept { return _M_code; }
  };


}



namespace std
{





  template<>
    struct hash<error_code>
    : public __hash_base<size_t, error_code>
    {
      size_t
      operator()(const error_code& __e) const noexcept
      {
 const size_t __tmp = std::_Hash_impl::hash(__e._M_value);
 return std::_Hash_impl::__hash_combine(__e._M_cat, __tmp);
      }
    };
# 420 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/system_error" 3
}
# 47 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/ios_base.h" 2 3


namespace std
{






  enum _Ios_Fmtflags
    {
      _S_boolalpha = 1L << 0,
      _S_dec = 1L << 1,
      _S_fixed = 1L << 2,
      _S_hex = 1L << 3,
      _S_internal = 1L << 4,
      _S_left = 1L << 5,
      _S_oct = 1L << 6,
      _S_right = 1L << 7,
      _S_scientific = 1L << 8,
      _S_showbase = 1L << 9,
      _S_showpoint = 1L << 10,
      _S_showpos = 1L << 11,
      _S_skipws = 1L << 12,
      _S_unitbuf = 1L << 13,
      _S_uppercase = 1L << 14,
      _S_adjustfield = _S_left | _S_right | _S_internal,
      _S_basefield = _S_dec | _S_oct | _S_hex,
      _S_floatfield = _S_scientific | _S_fixed,
      _S_ios_fmtflags_end = 1L << 16,
      _S_ios_fmtflags_max = 2147483647,
      _S_ios_fmtflags_min = ~2147483647
    };

  inline constexpr _Ios_Fmtflags
  operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline constexpr _Ios_Fmtflags
  operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline constexpr _Ios_Fmtflags
  operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline constexpr _Ios_Fmtflags
  operator~(_Ios_Fmtflags __a)
  { return _Ios_Fmtflags(~static_cast<int>(__a)); }

  inline const _Ios_Fmtflags&
  operator|=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a | __b; }

  inline const _Ios_Fmtflags&
  operator&=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a & __b; }

  inline const _Ios_Fmtflags&
  operator^=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a ^ __b; }


  enum _Ios_Openmode
    {
      _S_app = 1L << 0,
      _S_ate = 1L << 1,
      _S_bin = 1L << 2,
      _S_in = 1L << 3,
      _S_out = 1L << 4,
      _S_trunc = 1L << 5,
      _S_ios_openmode_end = 1L << 16,
      _S_ios_openmode_max = 2147483647,
      _S_ios_openmode_min = ~2147483647
    };

  inline constexpr _Ios_Openmode
  operator&(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline constexpr _Ios_Openmode
  operator|(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline constexpr _Ios_Openmode
  operator^(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline constexpr _Ios_Openmode
  operator~(_Ios_Openmode __a)
  { return _Ios_Openmode(~static_cast<int>(__a)); }

  inline const _Ios_Openmode&
  operator|=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a | __b; }

  inline const _Ios_Openmode&
  operator&=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a & __b; }

  inline const _Ios_Openmode&
  operator^=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a ^ __b; }


  enum _Ios_Iostate
    {
      _S_goodbit = 0,
      _S_badbit = 1L << 0,
      _S_eofbit = 1L << 1,
      _S_failbit = 1L << 2,
      _S_ios_iostate_end = 1L << 16,
      _S_ios_iostate_max = 2147483647,
      _S_ios_iostate_min = ~2147483647
    };

  inline constexpr _Ios_Iostate
  operator&(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline constexpr _Ios_Iostate
  operator|(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline constexpr _Ios_Iostate
  operator^(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline constexpr _Ios_Iostate
  operator~(_Ios_Iostate __a)
  { return _Ios_Iostate(~static_cast<int>(__a)); }

  inline const _Ios_Iostate&
  operator|=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a | __b; }

  inline const _Ios_Iostate&
  operator&=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a & __b; }

  inline const _Ios_Iostate&
  operator^=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a ^ __b; }


  enum _Ios_Seekdir
    {
      _S_beg = 0,
      _S_cur = 1,
      _S_end = 2,
      _S_ios_seekdir_end = 1L << 16
    };



  enum class io_errc { stream = 1 };

  template <> struct is_error_code_enum<io_errc> : public true_type { };

  const error_category& iostream_category() noexcept;

  inline error_code
  make_error_code(io_errc __e) noexcept
  { return error_code(static_cast<int>(__e), iostream_category()); }

  inline error_condition
  make_error_condition(io_errc __e) noexcept
  { return error_condition(static_cast<int>(__e), iostream_category()); }
# 228 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/ios_base.h" 3
  class ios_base
  {
# 246 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/ios_base.h" 3
  public:
# 255 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/ios_base.h" 3
    class __attribute ((__abi_tag__ ("cxx11"))) failure : public system_error
    {
    public:
      explicit
      failure(const string& __str);


      explicit
      failure(const string&, const error_code&);

      explicit
      failure(const char*, const error_code& = io_errc::stream);


      virtual
      ~failure() throw();

      virtual const char*
      what() const throw();
    };
# 323 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/ios_base.h" 3
    typedef _Ios_Fmtflags fmtflags;


    static const fmtflags boolalpha = _S_boolalpha;


    static const fmtflags dec = _S_dec;


    static const fmtflags fixed = _S_fixed;


    static const fmtflags hex = _S_hex;




    static const fmtflags internal = _S_internal;



    static const fmtflags left = _S_left;


    static const fmtflags oct = _S_oct;



    static const fmtflags right = _S_right;


    static const fmtflags scientific = _S_scientific;



    static const fmtflags showbase = _S_showbase;



    static const fmtflags showpoint = _S_showpoint;


    static const fmtflags showpos = _S_showpos;


    static const fmtflags skipws = _S_skipws;


    static const fmtflags unitbuf = _S_unitbuf;



    static const fmtflags uppercase = _S_uppercase;


    static const fmtflags adjustfield = _S_adjustfield;


    static const fmtflags basefield = _S_basefield;


    static const fmtflags floatfield = _S_floatfield;
# 398 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/ios_base.h" 3
    typedef _Ios_Iostate iostate;



    static const iostate badbit = _S_badbit;


    static const iostate eofbit = _S_eofbit;




    static const iostate failbit = _S_failbit;


    static const iostate goodbit = _S_goodbit;
# 429 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/ios_base.h" 3
    typedef _Ios_Openmode openmode;


    static const openmode app = _S_app;


    static const openmode ate = _S_ate;




    static const openmode binary = _S_bin;


    static const openmode in = _S_in;


    static const openmode out = _S_out;


    static const openmode trunc = _S_trunc;
# 461 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/ios_base.h" 3
    typedef _Ios_Seekdir seekdir;


    static const seekdir beg = _S_beg;


    static const seekdir cur = _S_cur;


    static const seekdir end = _S_end;



    typedef int io_state
      __attribute__ ((__deprecated__ ("use '" "std::iostate" "' instead")));
    typedef int open_mode
      __attribute__ ((__deprecated__ ("use '" "std::openmode" "' instead")));
    typedef int seek_dir
      __attribute__ ((__deprecated__ ("use '" "std::seekdir" "' instead")));

    typedef std::streampos streampos
      __attribute__ ((__deprecated__ ("use '" "std::streampos" "' instead")));
    typedef std::streamoff streamoff
      __attribute__ ((__deprecated__ ("use '" "std::streamoff" "' instead")));
# 494 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/ios_base.h" 3
    enum event
    {
      erase_event,
      imbue_event,
      copyfmt_event
    };
# 511 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/ios_base.h" 3
    typedef void (*event_callback) (event __e, ios_base& __b, int __i);
# 523 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/ios_base.h" 3
    void
    register_callback(event_callback __fn, int __index);

  protected:
    streamsize _M_precision;
    streamsize _M_width;
    fmtflags _M_flags;
    iostate _M_exception;
    iostate _M_streambuf_state;



    struct _Callback_list
    {

      _Callback_list* _M_next;
      ios_base::event_callback _M_fn;
      int _M_index;
      _Atomic_word _M_refcount;

      _Callback_list(ios_base::event_callback __fn, int __index,
       _Callback_list* __cb)
      : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount(0) { }

      void
      _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }


      int
      _M_remove_reference()
      {

                                                             ;
        int __res = __gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1);
        if (__res == 0)
          {
                                                                ;
          }
        return __res;
      }
    };

     _Callback_list* _M_callbacks;

    void
    _M_call_callbacks(event __ev) throw();

    void
    _M_dispose_callbacks(void) throw();


    struct _Words
    {
      void* _M_pword;
      long _M_iword;
      _Words() : _M_pword(0), _M_iword(0) { }
    };


    _Words _M_word_zero;



    enum { _S_local_word_size = 8 };
    _Words _M_local_word[_S_local_word_size];


    int _M_word_size;
    _Words* _M_word;

    _Words&
    _M_grow_words(int __index, bool __iword);


    locale _M_ios_locale;

    void
    _M_init() throw();

  public:





    class Init
    {
      friend class ios_base;
    public:
      Init();
      ~Init();


      Init(const Init&) = default;
      Init& operator=(const Init&) = default;


    private:
      static _Atomic_word _S_refcount;
      static bool _S_synced_with_stdio;
    };






    fmtflags
    flags() const
    { return _M_flags; }
# 641 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/ios_base.h" 3
    fmtflags
    flags(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags = __fmtfl;
      return __old;
    }
# 657 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags |= __fmtfl;
      return __old;
    }
# 674 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl, fmtflags __mask)
    {
      fmtflags __old = _M_flags;
      _M_flags &= ~__mask;
      _M_flags |= (__fmtfl & __mask);
      return __old;
    }







    void
    unsetf(fmtflags __mask)
    { _M_flags &= ~__mask; }
# 700 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/ios_base.h" 3
    streamsize
    precision() const
    { return _M_precision; }






    streamsize
    precision(streamsize __prec)
    {
      streamsize __old = _M_precision;
      _M_precision = __prec;
      return __old;
    }







    streamsize
    width() const
    { return _M_width; }






    streamsize
    width(streamsize __wide)
    {
      streamsize __old = _M_width;
      _M_width = __wide;
      return __old;
    }
# 751 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/ios_base.h" 3
    static bool
    sync_with_stdio(bool __sync = true);
# 763 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/ios_base.h" 3
    locale
    imbue(const locale& __loc) throw();
# 774 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/ios_base.h" 3
    locale
    getloc() const
    { return _M_ios_locale; }
# 785 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/ios_base.h" 3
    const locale&
    _M_getloc() const
    { return _M_ios_locale; }
# 804 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/ios_base.h" 3
    static int
    xalloc() throw();
# 820 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/ios_base.h" 3
    long&
    iword(int __ix)
    {
      _Words& __word = ((unsigned)__ix < (unsigned)_M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, true);
      return __word._M_iword;
    }
# 841 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/ios_base.h" 3
    void*&
    pword(int __ix)
    {
      _Words& __word = ((unsigned)__ix < (unsigned)_M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, false);
      return __word._M_pword;
    }
# 858 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/ios_base.h" 3
    virtual ~ios_base();

  protected:
    ios_base() throw ();
# 872 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/ios_base.h" 3
  public:
    ios_base(const ios_base&) = delete;

    ios_base&
    operator=(const ios_base&) = delete;

  protected:
    void
    _M_move(ios_base&) noexcept;

    void
    _M_swap(ios_base& __rhs) noexcept;

  };



  inline ios_base&
  boolalpha(ios_base& __base)
  {
    __base.setf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  noboolalpha(ios_base& __base)
  {
    __base.unsetf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  showbase(ios_base& __base)
  {
    __base.setf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  noshowbase(ios_base& __base)
  {
    __base.unsetf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  showpoint(ios_base& __base)
  {
    __base.setf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  noshowpoint(ios_base& __base)
  {
    __base.unsetf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  showpos(ios_base& __base)
  {
    __base.setf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  noshowpos(ios_base& __base)
  {
    __base.unsetf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  skipws(ios_base& __base)
  {
    __base.setf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  noskipws(ios_base& __base)
  {
    __base.unsetf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  uppercase(ios_base& __base)
  {
    __base.setf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  nouppercase(ios_base& __base)
  {
    __base.unsetf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  unitbuf(ios_base& __base)
  {
     __base.setf(ios_base::unitbuf);
     return __base;
  }


  inline ios_base&
  nounitbuf(ios_base& __base)
  {
     __base.unsetf(ios_base::unitbuf);
     return __base;
  }



  inline ios_base&
  internal(ios_base& __base)
  {
     __base.setf(ios_base::internal, ios_base::adjustfield);
     return __base;
  }


  inline ios_base&
  left(ios_base& __base)
  {
    __base.setf(ios_base::left, ios_base::adjustfield);
    return __base;
  }


  inline ios_base&
  right(ios_base& __base)
  {
    __base.setf(ios_base::right, ios_base::adjustfield);
    return __base;
  }



  inline ios_base&
  dec(ios_base& __base)
  {
    __base.setf(ios_base::dec, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  hex(ios_base& __base)
  {
    __base.setf(ios_base::hex, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  oct(ios_base& __base)
  {
    __base.setf(ios_base::oct, ios_base::basefield);
    return __base;
  }



  inline ios_base&
  fixed(ios_base& __base)
  {
    __base.setf(ios_base::fixed, ios_base::floatfield);
    return __base;
  }


  inline ios_base&
  scientific(ios_base& __base)
  {
    __base.setf(ios_base::scientific, ios_base::floatfield);
    return __base;
  }






  inline ios_base&
  hexfloat(ios_base& __base)
  {
    __base.setf(ios_base::fixed | ios_base::scientific, ios_base::floatfield);
    return __base;
  }


  inline ios_base&
  defaultfloat(ios_base& __base)
  {
    __base.unsetf(ios_base::floatfield);
    return __base;
  }



}
# 43 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ios" 2 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/streambuf" 1 3
# 37 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/streambuf" 3








namespace std
{




  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>*,
     basic_streambuf<_CharT, _Traits>*, bool&);
# 121 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/streambuf" 3
  template<typename _CharT, typename _Traits>
    class basic_streambuf
    {
    public:






      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;




      typedef basic_streambuf<char_type, traits_type> __streambuf_type;


      friend class basic_ios<char_type, traits_type>;
      friend class basic_istream<char_type, traits_type>;
      friend class basic_ostream<char_type, traits_type>;
      friend class istreambuf_iterator<char_type, traits_type>;
      friend class ostreambuf_iterator<char_type, traits_type>;

      friend streamsize
      __copy_streambufs_eof<>(basic_streambuf*, basic_streambuf*, bool&);

      template<bool _IsMove, typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
        __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
      istreambuf_iterator<_CharT2> >::__type
        find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

      template<typename _CharT2, typename _Distance>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            void>::__type
        advance(istreambuf_iterator<_CharT2>&, _Distance);

      template<typename _CharT2, typename _Traits2>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&, _CharT2*);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&,
     basic_string<_CharT2, _Traits2, _Alloc>&);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        getline(basic_istream<_CharT2, _Traits2>&,
  basic_string<_CharT2, _Traits2, _Alloc>&, _CharT2);

    protected:







      char_type* _M_in_beg;
      char_type* _M_in_cur;
      char_type* _M_in_end;
      char_type* _M_out_beg;
      char_type* _M_out_cur;
      char_type* _M_out_end;


      locale _M_buf_locale;

  public:

      virtual
      ~basic_streambuf()
      { }
# 215 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/streambuf" 3
      locale
      pubimbue(const locale& __loc)
      {
 locale __tmp(this->getloc());
 this->imbue(__loc);
 _M_buf_locale = __loc;
 return __tmp;
      }
# 232 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/streambuf" 3
      locale
      getloc() const
      { return _M_buf_locale; }
# 245 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/streambuf" 3
      basic_streambuf*
      pubsetbuf(char_type* __s, streamsize __n)
      { return this->setbuf(__s, __n); }
# 257 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/streambuf" 3
      pos_type
      pubseekoff(off_type __off, ios_base::seekdir __way,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekoff(__off, __way, __mode); }
# 269 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/streambuf" 3
      pos_type
      pubseekpos(pos_type __sp,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekpos(__sp, __mode); }




      int
      pubsync() { return this->sync(); }
# 290 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/streambuf" 3
      streamsize
      in_avail()
      {
 const streamsize __ret = this->egptr() - this->gptr();
 return __ret ? __ret : this->showmanyc();
      }
# 304 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/streambuf" 3
      int_type
      snextc()
      {
 int_type __ret = traits_type::eof();
 if (__builtin_expect(!traits_type::eq_int_type(this->sbumpc(),
             __ret), true))
   __ret = this->sgetc();
 return __ret;
      }
# 322 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/streambuf" 3
      int_type
      sbumpc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 else
   __ret = this->uflow();
 return __ret;
      }
# 344 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/streambuf" 3
      int_type
      sgetc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   __ret = traits_type::to_int_type(*this->gptr());
 else
   __ret = this->underflow();
 return __ret;
      }
# 363 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/streambuf" 3
      streamsize
      sgetn(char_type* __s, streamsize __n)
      { return this->xsgetn(__s, __n); }
# 378 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/streambuf" 3
      int_type
      sputbackc(char_type __c)
      {
 int_type __ret;
 const bool __testpos = this->eback() < this->gptr();
 if (__builtin_expect(!__testpos ||
        !traits_type::eq(__c, this->gptr()[-1]), false))
   __ret = this->pbackfail(traits_type::to_int_type(__c));
 else
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 return __ret;
      }
# 403 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/streambuf" 3
      int_type
      sungetc()
      {
 int_type __ret;
 if (__builtin_expect(this->eback() < this->gptr(), true))
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 else
   __ret = this->pbackfail();
 return __ret;
      }
# 430 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/streambuf" 3
      int_type
      sputc(char_type __c)
      {
 int_type __ret;
 if (__builtin_expect(this->pptr() < this->epptr(), true))
   {
     *this->pptr() = __c;
     this->pbump(1);
     __ret = traits_type::to_int_type(__c);
   }
 else
   __ret = this->overflow(traits_type::to_int_type(__c));
 return __ret;
      }
# 456 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/streambuf" 3
      streamsize
      sputn(const char_type* __s, streamsize __n)
      { return this->xsputn(__s, __n); }

    protected:
# 470 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/streambuf" 3
      basic_streambuf()
      : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
      _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
      _M_buf_locale(locale())
      { }
# 488 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/streambuf" 3
      char_type*
      eback() const { return _M_in_beg; }

      char_type*
      gptr() const { return _M_in_cur; }

      char_type*
      egptr() const { return _M_in_end; }
# 504 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/streambuf" 3
      void
      gbump(int __n) { _M_in_cur += __n; }
# 515 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/streambuf" 3
      void
      setg(char_type* __gbeg, char_type* __gnext, char_type* __gend)
      {
 _M_in_beg = __gbeg;
 _M_in_cur = __gnext;
 _M_in_end = __gend;
      }
# 535 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/streambuf" 3
      char_type*
      pbase() const { return _M_out_beg; }

      char_type*
      pptr() const { return _M_out_cur; }

      char_type*
      epptr() const { return _M_out_end; }
# 551 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/streambuf" 3
      void
      pbump(int __n) { _M_out_cur += __n; }
# 561 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/streambuf" 3
      void
      setp(char_type* __pbeg, char_type* __pend)
      {
 _M_out_beg = _M_out_cur = __pbeg;
 _M_out_end = __pend;
      }
# 582 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/streambuf" 3
      virtual void
      imbue(const locale& __loc __attribute__ ((__unused__)))
      { }
# 597 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/streambuf" 3
      virtual basic_streambuf<char_type,_Traits>*
      setbuf(char_type*, streamsize)
      { return this; }
# 608 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/streambuf" 3
      virtual pos_type
      seekoff(off_type, ios_base::seekdir,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 620 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/streambuf" 3
      virtual pos_type
      seekpos(pos_type,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 633 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/streambuf" 3
      virtual int
      sync() { return 0; }
# 655 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/streambuf" 3
      virtual streamsize
      showmanyc() { return 0; }
# 671 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/streambuf" 3
      virtual streamsize
      xsgetn(char_type* __s, streamsize __n);
# 693 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/streambuf" 3
      virtual int_type
      underflow()
      { return traits_type::eof(); }
# 706 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/streambuf" 3
      virtual int_type
      uflow()
      {
 int_type __ret = traits_type::eof();
 const bool __testeof = traits_type::eq_int_type(this->underflow(),
       __ret);
 if (!__testeof)
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 return __ret;
      }
# 730 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/streambuf" 3
      virtual int_type
      pbackfail(int_type __c __attribute__ ((__unused__)) = traits_type::eof())
      { return traits_type::eof(); }
# 748 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/streambuf" 3
      virtual streamsize
      xsputn(const char_type* __s, streamsize __n);
# 774 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/streambuf" 3
      virtual int_type
      overflow(int_type __c __attribute__ ((__unused__)) = traits_type::eof())
      { return traits_type::eof(); }



    public:
# 789 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/streambuf" 3
      __attribute__ ((__deprecated__ ("use '" "std::basic_streambuf::sbumpc" "' instead")))
      void
      stossc()
      {
 if (this->gptr() < this->egptr())
   this->gbump(1);
 else
   this->uflow();
      }



      void
      __safe_gbump(streamsize __n) { _M_in_cur += __n; }

      void
      __safe_pbump(streamsize __n) { _M_out_cur += __n; }




    protected:

      basic_streambuf(const basic_streambuf&);

      basic_streambuf&
      operator=(const basic_streambuf&);


      void
      swap(basic_streambuf& __sb)
      {
 std::swap(_M_in_beg, __sb._M_in_beg);
 std::swap(_M_in_cur, __sb._M_in_cur);
 std::swap(_M_in_end, __sb._M_in_end);
 std::swap(_M_out_beg, __sb._M_out_beg);
 std::swap(_M_out_cur, __sb._M_out_cur);
 std::swap(_M_out_end, __sb._M_out_end);
 std::swap(_M_buf_locale, __sb._M_buf_locale);
      }

    };


  template<typename _CharT, typename _Traits>
    std::basic_streambuf<_CharT, _Traits>::
    basic_streambuf(const basic_streambuf&) = default;

  template<typename _CharT, typename _Traits>
    std::basic_streambuf<_CharT, _Traits>&
    std::basic_streambuf<_CharT, _Traits>::
    operator=(const basic_streambuf&) = default;



  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>* __sbin,
     basic_streambuf<char>* __sbout, bool& __ineof);

  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>* __sbin,
     basic_streambuf<wchar_t>* __sbout, bool& __ineof);





}

# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/streambuf.tcc" 1 3
# 38 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/streambuf.tcc" 3

namespace std
{


  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsgetn(char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->egptr() - this->gptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(__s, this->gptr(), __len);
       __ret += __len;
       __s += __len;
       this->__safe_gbump(__len);
     }

   if (__ret < __n)
     {
       const int_type __c = this->uflow();
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    traits_type::assign(*__s++, traits_type::to_char_type(__c));
    ++__ret;
  }
       else
  break;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsputn(const char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->epptr() - this->pptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(this->pptr(), __s, __len);
       __ret += __len;
       __s += __len;
       this->__safe_pbump(__len);
     }

   if (__ret < __n)
     {
       int_type __c = this->overflow(traits_type::to_int_type(*__s));
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    ++__ret;
    ++__s;
  }
       else
  break;
     }
 }
      return __ret;
    }




  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>* __sbin,
     basic_streambuf<_CharT, _Traits>* __sbout,
     bool& __ineof)
    {
      streamsize __ret = 0;
      __ineof = true;
      typename _Traits::int_type __c = __sbin->sgetc();
      while (!_Traits::eq_int_type(__c, _Traits::eof()))
 {
   __c = __sbout->sputc(_Traits::to_char_type(__c));
   if (_Traits::eq_int_type(__c, _Traits::eof()))
     {
       __ineof = false;
       break;
     }
   ++__ret;
   __c = __sbin->snextc();
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    inline streamsize
    __copy_streambufs(basic_streambuf<_CharT, _Traits>* __sbin,
        basic_streambuf<_CharT, _Traits>* __sbout)
    {
      bool __ineof;
      return __copy_streambufs_eof(__sbin, __sbout, __ineof);
    }




  extern template class basic_streambuf<char>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<char>*,
        basic_streambuf<char>*);
  extern template
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>*,
     basic_streambuf<char>*, bool&);


  extern template class basic_streambuf<wchar_t>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<wchar_t>*,
        basic_streambuf<wchar_t>*);
  extern template
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>*,
     basic_streambuf<wchar_t>*, bool&);




}
# 861 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/streambuf" 2 3
# 44 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ios" 2 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_ios.h" 1 3
# 34 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_ios.h" 3



# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 1 3
# 38 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3

# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cwctype" 1 3
# 40 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cwctype" 3
# 50 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cwctype" 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/wctype.h" 1 3
# 15 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/wctype.h" 3
#pragma pack(push,_CRT_PACKING)


extern "C" {
# 176 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/wctype.h" 3
  typedef wchar_t wctrans_t;
  wint_t __attribute__((__cdecl__)) towctrans(wint_t,wctrans_t);
  wctrans_t __attribute__((__cdecl__)) wctrans(const char *);
  wctype_t __attribute__((__cdecl__)) wctype(const char *);


}


#pragma pack(pop)
# 51 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cwctype" 2 3
# 80 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cwctype" 3
namespace std
{
  using ::wctrans_t;
  using ::wctype_t;
  using ::wint_t;

  using ::iswalnum;
  using ::iswalpha;

  using ::iswblank;

  using ::iswcntrl;
  using ::iswctype;
  using ::iswdigit;
  using ::iswgraph;
  using ::iswlower;
  using ::iswprint;
  using ::iswpunct;
  using ::iswspace;
  using ::iswupper;
  using ::iswxdigit;
  using ::towctrans;
  using ::towlower;
  using ::towupper;
  using ::wctrans;
  using ::wctype;
}
# 40 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 2 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cctype" 1 3
# 40 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cctype" 3
# 41 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 2 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/x86_64-w64-mingw32/bits/ctype_base.h" 1 3
# 37 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/x86_64-w64-mingw32/bits/ctype_base.h" 3
namespace std
{



  struct ctype_base
  {

    typedef const int* __to_type;



    typedef unsigned short mask;
    static const mask upper = 1 << 0;
    static const mask lower = 1 << 1;
    static const mask alpha = 1 << 2;
    static const mask digit = 1 << 3;
    static const mask xdigit = 1 << 4;
    static const mask space = 1 << 5;
    static const mask print = 1 << 6;
    static const mask graph = (1 << 2) | (1 << 3) | (1 << 9);
    static const mask cntrl = 1 << 8;
    static const mask punct = 1 << 9;
    static const mask alnum = (1 << 2) | (1 << 3);

    static const mask blank = 1 << 10;

  };


}
# 42 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 2 3






# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/streambuf_iterator.h" 1 3
# 34 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/streambuf_iterator.h" 3




namespace std
{
# 49 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/streambuf_iterator.h" 3
  template<typename _CharT, typename _Traits>
    class istreambuf_iterator
    : public iterator<input_iterator_tag, _CharT, typename _Traits::off_type,
        _CharT*,


        _CharT>



    {
    public:



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename _Traits::int_type int_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_istream<_CharT, _Traits> istream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
        ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

      template<bool _IsMove, typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
 __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
        istreambuf_iterator<_CharT2> >::__type
 find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

      template<typename _CharT2, typename _Distance>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            void>::__type
 advance(istreambuf_iterator<_CharT2>&, _Distance);

    private:







      mutable streambuf_type* _M_sbuf;
      int_type _M_c;

    public:

      constexpr istreambuf_iterator() noexcept
      : _M_sbuf(0), _M_c(traits_type::eof()) { }


      istreambuf_iterator(const istreambuf_iterator&) noexcept = default;

      ~istreambuf_iterator() = default;



      istreambuf_iterator(istream_type& __s) noexcept
      : _M_sbuf(__s.rdbuf()), _M_c(traits_type::eof()) { }


      istreambuf_iterator(streambuf_type* __s) noexcept
      : _M_sbuf(__s), _M_c(traits_type::eof()) { }


      istreambuf_iterator&
      operator=(const istreambuf_iterator&) noexcept = default;





      char_type
      operator*() const
      {
 int_type __c = _M_get();
# 144 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/streambuf_iterator.h" 3
 return traits_type::to_char_type(__c);
      }


      istreambuf_iterator&
      operator++()
      {



                        ;

 _M_sbuf->sbumpc();
 _M_c = traits_type::eof();
 return *this;
      }


      istreambuf_iterator
      operator++(int)
      {



                        ;

 istreambuf_iterator __old = *this;
 __old._M_c = _M_sbuf->sbumpc();
 _M_c = traits_type::eof();
 return __old;
      }





      bool
      equal(const istreambuf_iterator& __b) const
      { return _M_at_eof() == __b._M_at_eof(); }

    private:
      int_type
      _M_get() const
      {
 int_type __ret = _M_c;
 if (_M_sbuf && _S_is_eof(__ret) && _S_is_eof(__ret = _M_sbuf->sgetc()))
   _M_sbuf = 0;
 return __ret;
      }

      bool
      _M_at_eof() const
      { return _S_is_eof(_M_get()); }

      static bool
      _S_is_eof(int_type __c)
      {
 const int_type __eof = traits_type::eof();
 return traits_type::eq_int_type(__c, __eof);
      }
    };

  template<typename _CharT, typename _Traits>
    inline bool
    operator==(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return __a.equal(__b); }

  template<typename _CharT, typename _Traits>
    inline bool
    operator!=(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return !__a.equal(__b); }


  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    public:



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_ostream<_CharT, _Traits> ostream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
        ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

    private:
      streambuf_type* _M_sbuf;
      bool _M_failed;

    public:

      ostreambuf_iterator(ostream_type& __s) noexcept
      : _M_sbuf(__s.rdbuf()), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator(streambuf_type* __s) noexcept
      : _M_sbuf(__s), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator&
      operator=(_CharT __c)
      {
 if (!_M_failed &&
     _Traits::eq_int_type(_M_sbuf->sputc(__c), _Traits::eof()))
   _M_failed = true;
 return *this;
      }


      ostreambuf_iterator&
      operator*()
      { return *this; }


      ostreambuf_iterator&
      operator++(int)
      { return *this; }


      ostreambuf_iterator&
      operator++()
      { return *this; }


      bool
      failed() const noexcept
      { return _M_failed; }

      ostreambuf_iterator&
      _M_put(const _CharT* __ws, streamsize __len)
      {
 if (__builtin_expect(!_M_failed, true)
     && __builtin_expect(this->_M_sbuf->sputn(__ws, __len) != __len,
    false))
   _M_failed = true;
 return *this;
      }
    };


  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        ostreambuf_iterator<_CharT> >::__type
    copy(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last,
  ostreambuf_iterator<_CharT> __result)
    {
      if (__first._M_sbuf && !__last._M_sbuf && !__result._M_failed)
 {
   bool __ineof;
   __copy_streambufs_eof(__first._M_sbuf, __result._M_sbuf, __ineof);
   if (!__ineof)
     __result._M_failed = true;
 }
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(_CharT* __first, _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(const _CharT* __first, const _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT> __first,
     istreambuf_iterator<_CharT> __last, _CharT* __result)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, traits_type::eof()))
     {
       const streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    traits_type::copy(__result, __sb->gptr(), __n);
    __sb->__safe_gbump(__n);
    __result += __n;
    __c = __sb->underflow();
  }
       else
  {
    *__result++ = traits_type::to_char_type(__c);
    __c = __sb->snextc();
  }
     }
 }
      return __result;
    }

  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
          istreambuf_iterator<_CharT> >::__type
    find(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last, const _CharT& __val)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;
      const int_type __eof = traits_type::eof();

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   const int_type __ival = traits_type::to_int_type(__val);
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, __eof)
   && !traits_type::eq_int_type(__c, __ival))
     {
       streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    const _CharT* __p = traits_type::find(__sb->gptr(),
       __n, __val);
    if (__p)
      __n = __p - __sb->gptr();
    __sb->__safe_gbump(__n);
    __c = __sb->sgetc();
  }
       else
  __c = __sb->snextc();
     }

   __first._M_c = __eof;
 }

      return __first;
    }

  template<typename _CharT, typename _Distance>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        void>::__type
    advance(istreambuf_iterator<_CharT>& __i, _Distance __n)
    {
      if (__n == 0)
 return;

                               ;


                           ;

      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;
      const int_type __eof = traits_type::eof();

      streambuf_type* __sb = __i._M_sbuf;
      while (__n > 0)
 {
   streamsize __size = __sb->egptr() - __sb->gptr();
   if (__size > __n)
     {
       __sb->__safe_gbump(__n);
       break;
     }

   __sb->__safe_gbump(__size);
   __n -= __size;
   if (traits_type::eq_int_type(__sb->underflow(), __eof))
     {


                      ;
       break;
     }
 }

      __i._M_c = __eof;
    }




}
# 49 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 2 3

namespace std
{
# 71 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
  template<typename _Tp>
    void
    __convert_to_v(const char*, _Tp&, ios_base::iostate&,
     const __c_locale&) throw();


  template<>
    void
    __convert_to_v(const char*, float&, ios_base::iostate&,
     const __c_locale&) throw();

  template<>
    void
    __convert_to_v(const char*, double&, ios_base::iostate&,
     const __c_locale&) throw();

  template<>
    void
    __convert_to_v(const char*, long double&, ios_base::iostate&,
     const __c_locale&) throw();



  template<typename _CharT, typename _Traits>
    struct __pad
    {
      static void
      _S_pad(ios_base& __io, _CharT __fill, _CharT* __news,
      const _CharT* __olds, streamsize __newlen, streamsize __oldlen);
    };






  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last);




  template<typename _CharT>
    inline
    ostreambuf_iterator<_CharT>
    __write(ostreambuf_iterator<_CharT> __s, const _CharT* __ws, int __len)
    {
      __s._M_put(__ws, __len);
      return __s;
    }


  template<typename _CharT, typename _OutIter>
    inline
    _OutIter
    __write(_OutIter __s, const _CharT* __ws, int __len)
    {
      for (int __j = 0; __j < __len; __j++, ++__s)
 *__s = __ws[__j];
      return __s;
    }
# 149 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
  template<typename _CharT>
    class __ctype_abstract_base : public locale::facet, public ctype_base
    {
    public:


      typedef _CharT char_type;
# 168 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      bool
      is(mask __m, char_type __c) const
      { return this->do_is(__m, __c); }
# 185 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      const char_type*
      is(const char_type *__lo, const char_type *__hi, mask *__vec) const
      { return this->do_is(__lo, __hi, __vec); }
# 201 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      const char_type*
      scan_is(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_is(__m, __lo, __hi); }
# 217 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      const char_type*
      scan_not(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_not(__m, __lo, __hi); }
# 231 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 246 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 260 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 275 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 292 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      { return this->do_widen(__c); }
# 311 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      { return this->do_widen(__lo, __hi, __to); }
# 330 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return this->do_narrow(__c, __dfault); }
# 352 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
       char __dfault, char* __to) const
      { return this->do_narrow(__lo, __hi, __dfault, __to); }

    protected:
      explicit
      __ctype_abstract_base(size_t __refs = 0): facet(__refs) { }

      virtual
      ~__ctype_abstract_base() { }
# 377 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const = 0;
# 396 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi,
     mask* __vec) const = 0;
# 415 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo,
   const char_type* __hi) const = 0;
# 434 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const = 0;
# 452 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type __c) const = 0;
# 469 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const = 0;
# 485 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type __c) const = 0;
# 502 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const = 0;
# 521 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const = 0;
# 542 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __to) const = 0;
# 563 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char __dfault) const = 0;
# 588 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __to) const = 0;
    };
# 611 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
  template<typename _CharT>
    class ctype : public __ctype_abstract_base<_CharT>
    {
    public:

      typedef _CharT char_type;
      typedef typename __ctype_abstract_base<_CharT>::mask mask;


      static locale::id id;

      explicit
      ctype(size_t __refs = 0) : __ctype_abstract_base<_CharT>(__refs) { }

   protected:
      virtual
      ~ctype();

      virtual bool
      do_is(mask __m, char_type __c) const;

      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;

      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;

      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;

      virtual char_type
      do_toupper(char_type __c) const;

      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_tolower(char_type __c) const;

      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_widen(char __c) const;

      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;

      virtual char
      do_narrow(char_type, char __dfault) const;

      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __to) const;
    };

  template<typename _CharT>
    locale::id ctype<_CharT>::id;
# 680 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
  template<>
    class ctype<char> : public locale::facet, public ctype_base
    {
    public:


      typedef char char_type;

    protected:

      __c_locale _M_c_locale_ctype;
      bool _M_del;
      __to_type _M_toupper;
      __to_type _M_tolower;
      const mask* _M_table;
      mutable char _M_widen_ok;
      mutable char _M_widen[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow_ok;


    public:

      static locale::id id;

      static const size_t table_size = 1 + static_cast<unsigned char>(-1);
# 717 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      explicit
      ctype(const mask* __table = 0, bool __del = false, size_t __refs = 0);
# 730 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, const mask* __table = 0, bool __del = false,
     size_t __refs = 0);
# 743 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      inline bool
      is(mask __m, char __c) const;
# 758 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      inline const char*
      is(const char* __lo, const char* __hi, mask* __vec) const;
# 772 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      inline const char*
      scan_is(mask __m, const char* __lo, const char* __hi) const;
# 786 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      inline const char*
      scan_not(mask __m, const char* __lo, const char* __hi) const;
# 801 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 818 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 834 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 851 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 871 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      {
 if (_M_widen_ok)
   return _M_widen[static_cast<unsigned char>(__c)];
 this->_M_widen_init();
 return this->do_widen(__c);
      }
# 898 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      {
 if (_M_widen_ok == 1)
   {
     if (__builtin_expect(__hi != __lo, true))
       __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_widen_ok)
   _M_widen_init();
 return this->do_widen(__lo, __hi, __to);
      }
# 930 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      {
 if (_M_narrow[static_cast<unsigned char>(__c)])
   return _M_narrow[static_cast<unsigned char>(__c)];
 const char __t = do_narrow(__c, __dfault);
 if (__t != __dfault)
   _M_narrow[static_cast<unsigned char>(__c)] = __t;
 return __t;
      }
# 963 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
      char __dfault, char* __to) const
      {
 if (__builtin_expect(_M_narrow_ok == 1, true))
   {
     if (__builtin_expect(__hi != __lo, true))
       __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_narrow_ok)
   _M_narrow_init();
 return this->do_narrow(__lo, __hi, __dfault, __to);
      }





      const mask*
      table() const throw()
      { return _M_table; }


      static const mask*
      classic_table() throw();
    protected:







      virtual
      ~ctype();
# 1013 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type __c) const;
# 1030 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1046 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type __c) const;
# 1063 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1083 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const
      { return __c; }
# 1106 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __to) const
      {
 if (__builtin_expect(__hi != __lo, true))
   __builtin_memcpy(__to, __lo, __hi - __lo);
 return __hi;
      }
# 1133 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char __dfault __attribute__((__unused__))) const
      { return __c; }
# 1159 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault __attribute__((__unused__)), char* __to) const
      {
 if (__builtin_expect(__hi != __lo, true))
   __builtin_memcpy(__to, __lo, __hi - __lo);
 return __hi;
      }

    private:
      void _M_narrow_init() const;
      void _M_widen_init() const;
    };
# 1185 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
  template<>
    class ctype<wchar_t> : public __ctype_abstract_base<wchar_t>
    {
    public:


      typedef wchar_t char_type;
      typedef wctype_t __wmask_type;

    protected:
      __c_locale _M_c_locale_ctype;


      bool _M_narrow_ok;
      char _M_narrow[128];
      wint_t _M_widen[1 + static_cast<unsigned char>(-1)];


      mask _M_bit[16];
      __wmask_type _M_wmask[16];

    public:


      static locale::id id;
# 1218 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      explicit
      ctype(size_t __refs = 0);
# 1229 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, size_t __refs = 0);

    protected:
      __wmask_type
      _M_convert_to_wmask(const mask __m) const throw();


      virtual
      ~ctype();
# 1253 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const;
# 1272 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;
# 1290 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;
# 1308 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;
# 1325 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type __c) const;
# 1342 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1358 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type __c) const;
# 1375 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1395 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const;
# 1417 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __to) const;
# 1440 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char __dfault) const;
# 1466 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __to) const;


      void
      _M_initialize_ctype() throw();
    };



  template<typename _CharT>
    class ctype_byname : public ctype<_CharT>
    {
    public:
      typedef typename ctype<_CharT>::mask mask;

      explicit
      ctype_byname(const char* __s, size_t __refs = 0);


      explicit
      ctype_byname(const string& __s, size_t __refs = 0)
      : ctype_byname(__s.c_str(), __refs) { }


    protected:
      virtual
      ~ctype_byname() { }
    };


  template<>
    class ctype_byname<char> : public ctype<char>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);


      explicit
      ctype_byname(const string& __s, size_t __refs = 0);


    protected:
      virtual
      ~ctype_byname();
    };


  template<>
    class ctype_byname<wchar_t> : public ctype<wchar_t>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);


      explicit
      ctype_byname(const string& __s, size_t __refs = 0);


    protected:
      virtual
      ~ctype_byname();
    };



}


# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/x86_64-w64-mingw32/bits/ctype_inline.h" 1 3
# 37 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/x86_64-w64-mingw32/bits/ctype_inline.h" 3
namespace std
{


  bool
  ctype<char>::
  is(mask __m, char __c) const
  { return (_M_table[static_cast<unsigned char>(__c) ] & __m); }


  const char*
  ctype<char>::
  is(const char* __low, const char* __high, mask* __vec) const
  {
    while (__low < __high)
      *__vec++ = _M_table[static_cast<unsigned char>(*__low++)];
    return __high;
  }

  const char*
  ctype<char>::
  scan_is(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high && !this->is(__m, *__low))
      ++__low;
    return __low;
  }

  const char*
  ctype<char>::
  scan_not(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high && this->is(__m, *__low) != 0)
      ++__low;
    return __low;
  }


}
# 1539 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 2 3

namespace std
{



  class __num_base
  {
  public:


    enum
      {
 _S_ominus,
 _S_oplus,
 _S_ox,
 _S_oX,
 _S_odigits,
 _S_odigits_end = _S_odigits + 16,
 _S_oudigits = _S_odigits_end,
 _S_oudigits_end = _S_oudigits + 16,
 _S_oe = _S_odigits + 14,
 _S_oE = _S_oudigits + 14,
 _S_oend = _S_oudigits_end
      };






    static const char* _S_atoms_out;



    static const char* _S_atoms_in;

    enum
    {
      _S_iminus,
      _S_iplus,
      _S_ix,
      _S_iX,
      _S_izero,
      _S_ie = _S_izero + 14,
      _S_iE = _S_izero + 20,
      _S_iend = 26
    };



    static void
    _S_format_float(const ios_base& __io, char* __fptr, char __mod) throw();
  };

  template<typename _CharT>
    struct __numpunct_cache : public locale::facet
    {
      const char* _M_grouping;
      size_t _M_grouping_size;
      bool _M_use_grouping;
      const _CharT* _M_truename;
      size_t _M_truename_size;
      const _CharT* _M_falsename;
      size_t _M_falsename_size;
      _CharT _M_decimal_point;
      _CharT _M_thousands_sep;





      _CharT _M_atoms_out[__num_base::_S_oend];





      _CharT _M_atoms_in[__num_base::_S_iend];

      bool _M_allocated;

      __numpunct_cache(size_t __refs = 0)
      : facet(__refs), _M_grouping(0), _M_grouping_size(0),
 _M_use_grouping(false),
 _M_truename(0), _M_truename_size(0), _M_falsename(0),
 _M_falsename_size(0), _M_decimal_point(_CharT()),
 _M_thousands_sep(_CharT()), _M_allocated(false)
 { }

      ~__numpunct_cache();

      void
      _M_cache(const locale& __loc);

    private:
      __numpunct_cache&
      operator=(const __numpunct_cache&);

      explicit
      __numpunct_cache(const __numpunct_cache&);
    };

  template<typename _CharT>
    __numpunct_cache<_CharT>::~__numpunct_cache()
    {
      if (_M_allocated)
 {
   delete [] _M_grouping;
   delete [] _M_truename;
   delete [] _M_falsename;
 }
    }

namespace __cxx11 {
# 1669 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
  template<typename _CharT>
    class numpunct : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      typedef __numpunct_cache<_CharT> __cache_type;

    protected:
      __cache_type* _M_data;

    public:

      static locale::id id;






      explicit
      numpunct(size_t __refs = 0)
      : facet(__refs), _M_data(0)
      { _M_initialize_numpunct(); }
# 1707 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      explicit
      numpunct(__cache_type* __cache, size_t __refs = 0)
      : facet(__refs), _M_data(__cache)
      { _M_initialize_numpunct(); }
# 1721 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      explicit
      numpunct(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_data(0)
      { _M_initialize_numpunct(__cloc); }
# 1735 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      char_type
      decimal_point() const
      { return this->do_decimal_point(); }
# 1748 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      char_type
      thousands_sep() const
      { return this->do_thousands_sep(); }
# 1779 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      string
      grouping() const
      { return this->do_grouping(); }
# 1792 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      string_type
      truename() const
      { return this->do_truename(); }
# 1805 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      string_type
      falsename() const
      { return this->do_falsename(); }

    protected:

      virtual
      ~numpunct();
# 1822 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      virtual char_type
      do_decimal_point() const
      { return _M_data->_M_decimal_point; }
# 1834 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      virtual char_type
      do_thousands_sep() const
      { return _M_data->_M_thousands_sep; }
# 1847 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      virtual string
      do_grouping() const
      { return _M_data->_M_grouping; }
# 1860 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      virtual string_type
      do_truename() const
      { return _M_data->_M_truename; }
# 1873 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      virtual string_type
      do_falsename() const
      { return _M_data->_M_falsename; }


      void
      _M_initialize_numpunct(__c_locale __cloc = 0);
    };

  template<typename _CharT>
    locale::id numpunct<_CharT>::id;

  template<>
    numpunct<char>::~numpunct();

  template<>
    void
    numpunct<char>::_M_initialize_numpunct(__c_locale __cloc);


  template<>
    numpunct<wchar_t>::~numpunct();

  template<>
    void
    numpunct<wchar_t>::_M_initialize_numpunct(__c_locale __cloc);



  template<typename _CharT>
    class numpunct_byname : public numpunct<_CharT>
    {
    public:
      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      explicit
      numpunct_byname(const char* __s, size_t __refs = 0)
      : numpunct<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     __c_locale __tmp;
     this->_S_create_c_locale(__tmp, __s);
     this->_M_initialize_numpunct(__tmp);
     this->_S_destroy_c_locale(__tmp);
   }
      }


      explicit
      numpunct_byname(const string& __s, size_t __refs = 0)
      : numpunct_byname(__s.c_str(), __refs) { }


    protected:
      virtual
      ~numpunct_byname() { }
    };

}
# 1951 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
  template<typename _CharT, typename _InIter>
    class num_get : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _InIter iter_type;



      static locale::id id;
# 1972 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      explicit
      num_get(size_t __refs = 0) : facet(__refs) { }
# 1998 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, bool& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2035 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned short& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned int& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }


      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2095 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, float& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2138 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, void*& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

    protected:

      virtual ~num_get() { }

      __attribute ((__abi_tag__ ("cxx11")))
      iter_type
      _M_extract_float(iter_type, iter_type, ios_base&, ios_base::iostate&,
         string&) const;

      template<typename _ValueT>
 __attribute ((__abi_tag__ ("cxx11")))
 iter_type
 _M_extract_int(iter_type, iter_type, ios_base&, ios_base::iostate&,
         _ValueT&) const;

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value, int>::__type
 _M_find(const _CharT2*, size_t __len, _CharT2 __c) const
 {
   int __ret = -1;
   if (__len <= 10)
     {
       if (__c >= _CharT2('0') && __c < _CharT2(_CharT2('0') + __len))
  __ret = __c - _CharT2('0');
     }
   else
     {
       if (__c >= _CharT2('0') && __c <= _CharT2('9'))
  __ret = __c - _CharT2('0');
       else if (__c >= _CharT2('a') && __c <= _CharT2('f'))
  __ret = 10 + (__c - _CharT2('a'));
       else if (__c >= _CharT2('A') && __c <= _CharT2('F'))
  __ret = 10 + (__c - _CharT2('A'));
     }
   return __ret;
 }

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<!__is_char<_CharT2>::__value,
          int>::__type
 _M_find(const _CharT2* __zero, size_t __len, _CharT2 __c) const
 {
   int __ret = -1;
   const char_type* __q = char_traits<_CharT2>::find(__zero, __len, __c);
   if (__q)
     {
       __ret = __q - __zero;
       if (__ret > 15)
  __ret -= 6;
     }
   return __ret;
 }
# 2211 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, bool&) const;

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned short& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned int& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, float&) const;

      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,
      double&) const;







      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,
      long double&) const;


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, void*&) const;
# 2274 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
    };

  template<typename _CharT, typename _InIter>
    locale::id num_get<_CharT, _InIter>::id;
# 2292 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
  template<typename _CharT, typename _OutIter>
    class num_put : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _OutIter iter_type;



      static locale::id id;
# 2313 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      explicit
      num_put(size_t __refs = 0) : facet(__refs) { }
# 2331 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const
      { return this->do_put(__s, __io, __fill, __v); }
# 2373 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, long __v) const
      { return this->do_put(__s, __io, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   unsigned long __v) const
      { return this->do_put(__s, __io, __fill, __v); }


      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, long long __v) const
      { return this->do_put(__s, __io, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   unsigned long long __v) const
      { return this->do_put(__s, __io, __fill, __v); }
# 2436 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, double __v) const
      { return this->do_put(__s, __io, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   long double __v) const
      { return this->do_put(__s, __io, __fill, __v); }
# 2461 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   const void* __v) const
      { return this->do_put(__s, __io, __fill, __v); }

    protected:
      template<typename _ValueT>
 iter_type
 _M_insert_float(iter_type, ios_base& __io, char_type __fill,
   char __mod, _ValueT __v) const;

      void
      _M_group_float(const char* __grouping, size_t __grouping_size,
       char_type __sep, const char_type* __p, char_type* __new,
       char_type* __cs, int& __len) const;

      template<typename _ValueT>
 iter_type
 _M_insert_int(iter_type, ios_base& __io, char_type __fill,
        _ValueT __v) const;

      void
      _M_group_int(const char* __grouping, size_t __grouping_size,
     char_type __sep, ios_base& __io, char_type* __new,
     char_type* __cs, int& __len) const;

      void
      _M_pad(char_type __fill, streamsize __w, ios_base& __io,
      char_type* __new, const char_type* __cs, int& __len) const;


      virtual
      ~num_put() { }
# 2509 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const;

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill, long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


      virtual iter_type
      do_put(iter_type, ios_base&, char_type, double) const;






      virtual iter_type
      do_put(iter_type, ios_base&, char_type, long double) const;


      virtual iter_type
      do_put(iter_type, ios_base&, char_type, const void*) const;







    };

  template <typename _CharT, typename _OutIter>
    locale::id num_put<_CharT, _OutIter>::id;
# 2567 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 3
  template<typename _CharT>
    inline bool
    isspace(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::space, __c); }


  template<typename _CharT>
    inline bool
    isprint(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::print, __c); }


  template<typename _CharT>
    inline bool
    iscntrl(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::cntrl, __c); }


  template<typename _CharT>
    inline bool
    isupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::upper, __c); }


  template<typename _CharT>
    inline bool
    islower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::lower, __c); }


  template<typename _CharT>
    inline bool
    isalpha(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alpha, __c); }


  template<typename _CharT>
    inline bool
    isdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::digit, __c); }


  template<typename _CharT>
    inline bool
    ispunct(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::punct, __c); }


  template<typename _CharT>
    inline bool
    isxdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::xdigit, __c); }


  template<typename _CharT>
    inline bool
    isalnum(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alnum, __c); }


  template<typename _CharT>
    inline bool
    isgraph(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::graph, __c); }



  template<typename _CharT>
    inline bool
    isblank(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::blank, __c); }



  template<typename _CharT>
    inline _CharT
    toupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).toupper(__c); }


  template<typename _CharT>
    inline _CharT
    tolower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).tolower(__c); }


}

# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.tcc" 1 3
# 34 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.tcc" 3

namespace std
{




  template<typename _Facet>
    struct __use_cache
    {
      const _Facet*
      operator() (const locale& __loc) const;
    };


  template<typename _CharT>
    struct __use_cache<__numpunct_cache<_CharT> >
    {
      const __numpunct_cache<_CharT>*
      operator() (const locale& __loc) const
      {
 const size_t __i = numpunct<_CharT>::id._M_id();
 const locale::facet** __caches = __loc._M_impl->_M_caches;
 if (!__caches[__i])
   {
     __numpunct_cache<_CharT>* __tmp = 0;
     try
       {
  __tmp = new __numpunct_cache<_CharT>;
  __tmp->_M_cache(__loc);
       }
     catch(...)
       {
  delete __tmp;
  throw;
       }
     __loc._M_impl->_M_install_cache(__tmp, __i);
   }
 return static_cast<const __numpunct_cache<_CharT>*>(__caches[__i]);
      }
    };

  template<typename _CharT>
    void
    __numpunct_cache<_CharT>::_M_cache(const locale& __loc)
    {
      const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__loc);

      char* __grouping = 0;
      _CharT* __truename = 0;
      _CharT* __falsename = 0;
      try
 {
   const string& __g = __np.grouping();
   _M_grouping_size = __g.size();
   __grouping = new char[_M_grouping_size];
   __g.copy(__grouping, _M_grouping_size);
   _M_use_grouping = (_M_grouping_size
        && static_cast<signed char>(__grouping[0]) > 0
        && (__grouping[0]
     != __gnu_cxx::__numeric_traits<char>::__max));

   const basic_string<_CharT>& __tn = __np.truename();
   _M_truename_size = __tn.size();
   __truename = new _CharT[_M_truename_size];
   __tn.copy(__truename, _M_truename_size);

   const basic_string<_CharT>& __fn = __np.falsename();
   _M_falsename_size = __fn.size();
   __falsename = new _CharT[_M_falsename_size];
   __fn.copy(__falsename, _M_falsename_size);

   _M_decimal_point = __np.decimal_point();
   _M_thousands_sep = __np.thousands_sep();

   const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__loc);
   __ct.widen(__num_base::_S_atoms_out,
       __num_base::_S_atoms_out
       + __num_base::_S_oend, _M_atoms_out);
   __ct.widen(__num_base::_S_atoms_in,
       __num_base::_S_atoms_in
       + __num_base::_S_iend, _M_atoms_in);

   _M_grouping = __grouping;
   _M_truename = __truename;
   _M_falsename = __falsename;
   _M_allocated = true;
 }
      catch(...)
 {
   delete [] __grouping;
   delete [] __truename;
   delete [] __falsename;
   throw;
 }
    }
# 139 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.tcc" 3
  __attribute__ ((__pure__)) bool
  __verify_grouping(const char* __grouping, size_t __grouping_size,
      const string& __grouping_tmp) throw ();



  template<typename _CharT, typename _InIter>
    __attribute ((__abi_tag__ ("cxx11")))
    _InIter
    num_get<_CharT, _InIter>::
    _M_extract_float(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, string& __xtrc) const
    {
      typedef char_traits<_CharT> __traits_type;
      typedef __numpunct_cache<_CharT> __cache_type;
      __use_cache<__cache_type> __uc;
      const locale& __loc = __io._M_getloc();
      const __cache_type* __lc = __uc(__loc);
      const _CharT* __lit = __lc->_M_atoms_in;
      char_type __c = char_type();


      bool __testeof = __beg == __end;


      if (!__testeof)
 {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
     {
       __xtrc += __plus ? '+' : '-';
       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 }


      bool __found_mantissa = false;
      int __sep_pos = 0;
      while (!__testeof)
 {
   if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       || __c == __lc->_M_decimal_point)
     break;
   else if (__c == __lit[__num_base::_S_izero])
     {
       if (!__found_mantissa)
  {
    __xtrc += '0';
    __found_mantissa = true;
  }
       ++__sep_pos;

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
   else
     break;
 }


      bool __found_dec = false;
      bool __found_sci = false;
      string __found_grouping;
      if (__lc->_M_use_grouping)
 __found_grouping.reserve(32);
      const char_type* __lit_zero = __lit + __num_base::_S_izero;

      if (!__lc->_M_allocated)

 while (!__testeof)
   {
     const int __digit = _M_find(__lit_zero, 10, __c);
     if (__digit != -1)
       {
  __xtrc += '0' + __digit;
  __found_mantissa = true;
       }
     else if (__c == __lc->_M_decimal_point
       && !__found_dec && !__found_sci)
       {
  __xtrc += '.';
  __found_dec = true;
       }
     else if ((__c == __lit[__num_base::_S_ie]
        || __c == __lit[__num_base::_S_iE])
       && !__found_sci && __found_mantissa)
       {

  __xtrc += 'e';
  __found_sci = true;


  if (++__beg != __end)
    {
      __c = *__beg;
      const bool __plus = __c == __lit[__num_base::_S_iplus];
      if (__plus || __c == __lit[__num_base::_S_iminus])
        __xtrc += __plus ? '+' : '-';
      else
        continue;
    }
  else
    {
      __testeof = true;
      break;
    }
       }
     else
       break;

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }
      else
 while (!__testeof)
   {


     if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       {
  if (!__found_dec && !__found_sci)
    {


      if (__sep_pos)
        {
   __found_grouping += static_cast<char>(__sep_pos);
   __sep_pos = 0;
        }
      else
        {


   __xtrc.clear();
   break;
        }
    }
  else
    break;
       }
     else if (__c == __lc->_M_decimal_point)
       {
  if (!__found_dec && !__found_sci)
    {



      if (__found_grouping.size())
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += '.';
      __found_dec = true;
    }
  else
    break;
       }
     else
       {
  const char_type* __q =
    __traits_type::find(__lit_zero, 10, __c);
  if (__q)
    {
      __xtrc += '0' + (__q - __lit_zero);
      __found_mantissa = true;
      ++__sep_pos;
    }
  else if ((__c == __lit[__num_base::_S_ie]
     || __c == __lit[__num_base::_S_iE])
    && !__found_sci && __found_mantissa)
    {

      if (__found_grouping.size() && !__found_dec)
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += 'e';
      __found_sci = true;


      if (++__beg != __end)
        {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping
     && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
        __xtrc += __plus ? '+' : '-';
   else
     continue;
        }
      else
        {
   __testeof = true;
   break;
        }
    }
  else
    break;
       }

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }



      if (__found_grouping.size())
        {

   if (!__found_dec && !__found_sci)
     __found_grouping += static_cast<char>(__sep_pos);

          if (!std::__verify_grouping(__lc->_M_grouping,
          __lc->_M_grouping_size,
          __found_grouping))
     __err = ios_base::failbit;
        }

      return __beg;
    }

  template<typename _CharT, typename _InIter>
    template<typename _ValueT>
      __attribute ((__abi_tag__ ("cxx11")))
      _InIter
      num_get<_CharT, _InIter>::
      _M_extract_int(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, _ValueT& __v) const
      {
        typedef char_traits<_CharT> __traits_type;
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_in;
 char_type __c = char_type();


 const ios_base::fmtflags __basefield = __io.flags()
                                        & ios_base::basefield;
 const bool __oct = __basefield == ios_base::oct;
 int __base = __oct ? 8 : (__basefield == ios_base::hex ? 16 : 10);


 bool __testeof = __beg == __end;


 bool __negative = false;
 if (!__testeof)
   {
     __c = *__beg;
     __negative = __c == __lit[__num_base::_S_iminus];
     if ((__negative || __c == __lit[__num_base::_S_iplus])
  && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  && !(__c == __lc->_M_decimal_point))
       {
  if (++__beg != __end)
    __c = *__beg;
  else
    __testeof = true;
       }
   }



 bool __found_zero = false;
 int __sep_pos = 0;
 while (!__testeof)
   {
     if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  || __c == __lc->_M_decimal_point)
       break;
     else if (__c == __lit[__num_base::_S_izero]
       && (!__found_zero || __base == 10))
       {
  __found_zero = true;
  ++__sep_pos;
  if (__basefield == 0)
    __base = 8;
  if (__base == 8)
    __sep_pos = 0;
       }
     else if (__found_zero
       && (__c == __lit[__num_base::_S_ix]
    || __c == __lit[__num_base::_S_iX]))
       {
  if (__basefield == 0)
    __base = 16;
  if (__base == 16)
    {
      __found_zero = false;
      __sep_pos = 0;
    }
  else
    break;
       }
     else
       break;

     if (++__beg != __end)
       {
  __c = *__beg;
  if (!__found_zero)
    break;
       }
     else
       __testeof = true;
   }



 const size_t __len = (__base == 16 ? __num_base::_S_iend
         - __num_base::_S_izero : __base);


 typedef __gnu_cxx::__numeric_traits<_ValueT> __num_traits;
 string __found_grouping;
 if (__lc->_M_use_grouping)
   __found_grouping.reserve(32);
 bool __testfail = false;
 bool __testoverflow = false;
 const __unsigned_type __max =
   (__negative && __num_traits::__is_signed)
   ? -static_cast<__unsigned_type>(__num_traits::__min)
   : __num_traits::__max;
 const __unsigned_type __smax = __max / __base;
 __unsigned_type __result = 0;
 int __digit = 0;
 const char_type* __lit_zero = __lit + __num_base::_S_izero;

 if (!__lc->_M_allocated)

   while (!__testeof)
     {
       __digit = _M_find(__lit_zero, __len, __c);
       if (__digit == -1)
  break;

       if (__result > __smax)
  __testoverflow = true;
       else
  {
    __result *= __base;
    __testoverflow |= __result > __max - __digit;
    __result += __digit;
    ++__sep_pos;
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 else
   while (!__testeof)
     {


       if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  {


    if (__sep_pos)
      {
        __found_grouping += static_cast<char>(__sep_pos);
        __sep_pos = 0;
      }
    else
      {
        __testfail = true;
        break;
      }
  }
       else if (__c == __lc->_M_decimal_point)
  break;
       else
  {
    const char_type* __q =
      __traits_type::find(__lit_zero, __len, __c);
    if (!__q)
      break;

    __digit = __q - __lit_zero;
    if (__digit > 15)
      __digit -= 6;
    if (__result > __smax)
      __testoverflow = true;
    else
      {
        __result *= __base;
        __testoverflow |= __result > __max - __digit;
        __result += __digit;
        ++__sep_pos;
      }
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }



 if (__found_grouping.size())
   {

     __found_grouping += static_cast<char>(__sep_pos);

     if (!std::__verify_grouping(__lc->_M_grouping,
     __lc->_M_grouping_size,
     __found_grouping))
       __err = ios_base::failbit;
   }



 if ((!__sep_pos && !__found_zero && !__found_grouping.size())
     || __testfail)
   {
     __v = 0;
     __err = ios_base::failbit;
   }
 else if (__testoverflow)
   {
     if (__negative && __num_traits::__is_signed)
       __v = __num_traits::__min;
     else
       __v = __num_traits::__max;
     __err = ios_base::failbit;
   }
 else
   __v = __negative ? -__result : __result;

 if (__testeof)
   __err |= ios_base::eofbit;
 return __beg;
      }



  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, bool& __v) const
    {
      if (!(__io.flags() & ios_base::boolalpha))
        {



   long __l = -1;
          __beg = _M_extract_int(__beg, __end, __io, __err, __l);
   if (__l == 0 || __l == 1)
     __v = bool(__l);
   else
     {


       __v = true;
       __err = ios_base::failbit;
       if (__beg == __end)
  __err |= ios_base::eofbit;
     }
        }
      else
        {

   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   bool __testf = true;
   bool __testt = true;
   bool __donef = __lc->_M_falsename_size == 0;
   bool __donet = __lc->_M_truename_size == 0;
   bool __testeof = false;
   size_t __n = 0;
   while (!__donef || !__donet)
     {
       if (__beg == __end)
  {
    __testeof = true;
    break;
  }

       const char_type __c = *__beg;

       if (!__donef)
  __testf = __c == __lc->_M_falsename[__n];

       if (!__testf && __donet)
  break;

       if (!__donet)
  __testt = __c == __lc->_M_truename[__n];

       if (!__testt && __donef)
  break;

       if (!__testt && !__testf)
  break;

       ++__n;
       ++__beg;

       __donef = !__testf || __n >= __lc->_M_falsename_size;
       __donet = !__testt || __n >= __lc->_M_truename_size;
     }
   if (__testf && __n == __lc->_M_falsename_size && __n)
     {
       __v = false;
       if (__testt && __n == __lc->_M_truename_size)
  __err = ios_base::failbit;
       else
  __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else if (__testt && __n == __lc->_M_truename_size && __n)
     {
       __v = true;
       __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else
     {


       __v = false;
       __err = ios_base::failbit;
       if (__testeof)
  __err |= ios_base::eofbit;
     }
 }
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
    ios_base::iostate& __err, float& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }
# 735 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, long double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, void*& __v) const
    {

      typedef ios_base::fmtflags fmtflags;
      const fmtflags __fmt = __io.flags();
      __io.flags((__fmt & ~ios_base::basefield) | ios_base::hex);

      typedef __gnu_cxx::__conditional_type<(sizeof(void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;

      _UIntPtrType __ul;
      __beg = _M_extract_int(__beg, __end, __io, __err, __ul);


      __io.flags(__fmt);

      __v = reinterpret_cast<void*>(__ul);
      return __beg;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_pad(_CharT __fill, streamsize __w, ios_base& __io,
    _CharT* __new, const _CharT* __cs, int& __len) const
    {


      __pad<_CharT, char_traits<_CharT> >::_S_pad(__io, __fill, __new,
        __cs, __w, __len);
      __len = static_cast<int>(__w);
    }



  template<typename _CharT, typename _ValueT>
    int
    __int_to_char(_CharT* __bufend, _ValueT __v, const _CharT* __lit,
    ios_base::fmtflags __flags, bool __dec)
    {
      _CharT* __buf = __bufend;
      if (__builtin_expect(__dec, true))
 {

   do
     {
       *--__buf = __lit[(__v % 10) + __num_base::_S_odigits];
       __v /= 10;
     }
   while (__v != 0);
 }
      else if ((__flags & ios_base::basefield) == ios_base::oct)
 {

   do
     {
       *--__buf = __lit[(__v & 0x7) + __num_base::_S_odigits];
       __v >>= 3;
     }
   while (__v != 0);
 }
      else
 {

   const bool __uppercase = __flags & ios_base::uppercase;
   const int __case_offset = __uppercase ? __num_base::_S_oudigits
                                         : __num_base::_S_odigits;
   do
     {
       *--__buf = __lit[(__v & 0xf) + __case_offset];
       __v >>= 4;
     }
   while (__v != 0);
 }
      return __bufend - __buf;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_int(const char* __grouping, size_t __grouping_size, _CharT __sep,
   ios_base&, _CharT* __new, _CharT* __cs, int& __len) const
    {
      _CharT* __p = std::__add_grouping(__new, __sep, __grouping,
     __grouping_size, __cs, __cs + __len);
      __len = __p - __new;
    }

  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_int(_OutIter __s, ios_base& __io, _CharT __fill,
      _ValueT __v) const
      {
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_out;
 const ios_base::fmtflags __flags = __io.flags();


 const int __ilen = 5 * sizeof(_ValueT);
 _CharT* __cs = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __ilen));



 const ios_base::fmtflags __basefield = __flags & ios_base::basefield;
 const bool __dec = (__basefield != ios_base::oct
       && __basefield != ios_base::hex);
 const __unsigned_type __u = ((__v > 0 || !__dec)
         ? __unsigned_type(__v)
         : -__unsigned_type(__v));
  int __len = __int_to_char(__cs + __ilen, __u, __lit, __flags, __dec);
 __cs += __ilen - __len;


 if (__lc->_M_use_grouping)
   {


     _CharT* __cs2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * (__len + 1)
          * 2));
     _M_group_int(__lc->_M_grouping, __lc->_M_grouping_size,
    __lc->_M_thousands_sep, __io, __cs2 + 2, __cs, __len);
     __cs = __cs2 + 2;
   }


 if (__builtin_expect(__dec, true))
   {

     if (__v >= 0)
       {
  if (bool(__flags & ios_base::showpos)
      && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
    *--__cs = __lit[__num_base::_S_oplus], ++__len;
       }
     else
       *--__cs = __lit[__num_base::_S_ominus], ++__len;
   }
 else if (bool(__flags & ios_base::showbase) && __v)
   {
     if (__basefield == ios_base::oct)
       *--__cs = __lit[__num_base::_S_odigits], ++__len;
     else
       {

  const bool __uppercase = __flags & ios_base::uppercase;
  *--__cs = __lit[__num_base::_S_ox + __uppercase];

  *--__cs = __lit[__num_base::_S_odigits];
  __len += 2;
       }
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __cs3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __cs3, __cs, __len);
     __cs = __cs3;
   }
 __io.width(0);



 return std::__write(__s, __cs, __len);
      }

  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_float(const char* __grouping, size_t __grouping_size,
     _CharT __sep, const _CharT* __p, _CharT* __new,
     _CharT* __cs, int& __len) const
    {



      const int __declen = __p ? __p - __cs : __len;
      _CharT* __p2 = std::__add_grouping(__new, __sep, __grouping,
      __grouping_size,
      __cs, __cs + __declen);


      int __newlen = __p2 - __new;
      if (__p)
 {
   char_traits<_CharT>::copy(__p2, __p, __len - __declen);
   __newlen += __len - __declen;
 }
      __len = __newlen;
    }
# 971 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_float(_OutIter __s, ios_base& __io, _CharT __fill, char __mod,
         _ValueT __v) const
      {
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);


 const streamsize __prec = __io.precision() < 0 ? 6 : __io.precision();

 const int __max_digits =
   __gnu_cxx::__numeric_traits<_ValueT>::__digits10;


 int __len;

 char __fbuf[16];
 __num_base::_S_format_float(__io, __fbuf, __mod);



 const bool __use_prec =
   (__io.flags() & ios_base::floatfield) != ios_base::floatfield;



 int __cs_size = __max_digits * 3;
 char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));
 if (__use_prec)
   __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
     __fbuf, __prec, __v);
 else
   __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
     __fbuf, __v);


 if (__len >= __cs_size)
   {
     __cs_size = __len + 1;
     __cs = static_cast<char*>(__builtin_alloca(__cs_size));
     if (__use_prec)
       __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
         __fbuf, __prec, __v);
     else
       __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
         __fbuf, __v);
   }
# 1044 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.tcc" 3
 const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

 _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __len));
 __ctype.widen(__cs, __cs + __len, __ws);


 _CharT* __wp = 0;
 const char* __p = char_traits<char>::find(__cs, __len, '.');
 if (__p)
   {
     __wp = __ws + (__p - __cs);
     *__wp = __lc->_M_decimal_point;
   }




 if (__lc->_M_use_grouping
     && (__wp || __len < 3 || (__cs[1] <= '9' && __cs[2] <= '9'
          && __cs[1] >= '0' && __cs[2] >= '0')))
   {


     _CharT* __ws2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __len * 2));

     streamsize __off = 0;
     if (__cs[0] == '-' || __cs[0] == '+')
       {
  __off = 1;
  __ws2[0] = __ws[0];
  __len -= 1;
       }

     _M_group_float(__lc->_M_grouping, __lc->_M_grouping_size,
      __lc->_M_thousands_sep, __wp, __ws2 + __off,
      __ws + __off, __len);
     __len += __off;

     __ws = __ws2;
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __ws3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __ws3, __ws, __len);
     __ws = __ws3;
   }
 __io.width(0);



 return std::__write(__s, __ws, __len);
      }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      if ((__flags & ios_base::boolalpha) == 0)
        {
          const long __l = __v;
          __s = _M_insert_int(__s, __io, __fill, __l);
        }
      else
        {
   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   const _CharT* __name = __v ? __lc->_M_truename
                              : __lc->_M_falsename;
   int __len = __v ? __lc->_M_truename_size
                   : __lc->_M_falsename_size;

   const streamsize __w = __io.width();
   if (__w > static_cast<streamsize>(__len))
     {
       const streamsize __plen = __w - __len;
       _CharT* __ps
  = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
       * __plen));

       char_traits<_CharT>::assign(__ps, __plen, __fill);
       __io.width(0);

       if ((__flags & ios_base::adjustfield) == ios_base::left)
  {
    __s = std::__write(__s, __name, __len);
    __s = std::__write(__s, __ps, __plen);
  }
       else
  {
    __s = std::__write(__s, __ps, __plen);
    __s = std::__write(__s, __name, __len);
  }
       return __s;
     }
   __io.width(0);
   __s = std::__write(__s, __name, __len);
 }
      return __s;
    }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, double __v) const
    { return _M_insert_float(__s, __io, __fill, char(), __v); }
# 1169 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
    long double __v) const
    { return _M_insert_float(__s, __io, __fill, 'L', __v); }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
           const void* __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      const ios_base::fmtflags __fmt = ~(ios_base::basefield
      | ios_base::uppercase);
      __io.flags((__flags & __fmt) | (ios_base::hex | ios_base::showbase));

      typedef __gnu_cxx::__conditional_type<(sizeof(const void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;

      __s = _M_insert_int(__s, __io, __fill,
     reinterpret_cast<_UIntPtrType>(__v));
      __io.flags(__flags);
      return __s;
    }
# 1206 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _Traits>
    void
    __pad<_CharT, _Traits>::_S_pad(ios_base& __io, _CharT __fill,
       _CharT* __news, const _CharT* __olds,
       streamsize __newlen, streamsize __oldlen)
    {
      const size_t __plen = static_cast<size_t>(__newlen - __oldlen);
      const ios_base::fmtflags __adjust = __io.flags() & ios_base::adjustfield;


      if (__adjust == ios_base::left)
 {
   _Traits::copy(__news, __olds, __oldlen);
   _Traits::assign(__news + __oldlen, __plen, __fill);
   return;
 }

      size_t __mod = 0;
      if (__adjust == ios_base::internal)
 {



          const locale& __loc = __io._M_getloc();
   const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

   if (__ctype.widen('-') == __olds[0]
       || __ctype.widen('+') == __olds[0])
     {
       __news[0] = __olds[0];
       __mod = 1;
       ++__news;
     }
   else if (__ctype.widen('0') == __olds[0]
     && __oldlen > 1
     && (__ctype.widen('x') == __olds[1]
         || __ctype.widen('X') == __olds[1]))
     {
       __news[0] = __olds[0];
       __news[1] = __olds[1];
       __mod = 2;
       __news += 2;
     }

 }
      _Traits::assign(__news, __plen, __fill);
      _Traits::copy(__news + __plen, __olds + __mod, __oldlen - __mod);
    }

  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last)
    {
      size_t __idx = 0;
      size_t __ctr = 0;

      while (__last - __first > __gbeg[__idx]
      && static_cast<signed char>(__gbeg[__idx]) > 0
      && __gbeg[__idx] != __gnu_cxx::__numeric_traits<char>::__max)
 {
   __last -= __gbeg[__idx];
   __idx < __gsize - 1 ? ++__idx : ++__ctr;
 }

      while (__first != __last)
 *__s++ = *__first++;

      while (__ctr--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      while (__idx--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      return __s;
    }




  extern template class __cxx11:: numpunct<char>;
  extern template class __cxx11:: numpunct_byname<char>;
  extern template class num_get<char>;
  extern template class num_put<char>;
  extern template class ctype_byname<char>;

  extern template
    const ctype<char>&
    use_facet<ctype<char> >(const locale&);

  extern template
    const numpunct<char>&
    use_facet<numpunct<char> >(const locale&);

  extern template
    const num_put<char>&
    use_facet<num_put<char> >(const locale&);

  extern template
    const num_get<char>&
    use_facet<num_get<char> >(const locale&);

  extern template
    bool
    has_facet<ctype<char> >(const locale&);

  extern template
    bool
    has_facet<numpunct<char> >(const locale&);

  extern template
    bool
    has_facet<num_put<char> >(const locale&);

  extern template
    bool
    has_facet<num_get<char> >(const locale&);


  extern template class __cxx11:: numpunct<wchar_t>;
  extern template class __cxx11:: numpunct_byname<wchar_t>;
  extern template class num_get<wchar_t>;
  extern template class num_put<wchar_t>;
  extern template class ctype_byname<wchar_t>;

  extern template
    const ctype<wchar_t>&
    use_facet<ctype<wchar_t> >(const locale&);

  extern template
    const numpunct<wchar_t>&
    use_facet<numpunct<wchar_t> >(const locale&);

  extern template
    const num_put<wchar_t>&
    use_facet<num_put<wchar_t> >(const locale&);

  extern template
    const num_get<wchar_t>&
    use_facet<num_get<wchar_t> >(const locale&);

 extern template
    bool
    has_facet<ctype<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<numpunct<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_put<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_get<wchar_t> >(const locale&);




}
# 2656 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets.h" 2 3
# 38 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_ios.h" 2 3



namespace std
{


  template<typename _Facet>
    inline const _Facet&
    __check_facet(const _Facet* __f)
    {
      if (!__f)
 __throw_bad_cast();
      return *__f;
    }
# 66 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_ios.h" 3
  template<typename _CharT, typename _Traits>
    class basic_ios : public ios_base
    {
    public:






      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;






      typedef ctype<_CharT> __ctype_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
           __num_put_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
           __num_get_type;



    protected:
      basic_ostream<_CharT, _Traits>* _M_tie;
      mutable char_type _M_fill;
      mutable bool _M_fill_init;
      basic_streambuf<_CharT, _Traits>* _M_streambuf;


      const __ctype_type* _M_ctype;

      const __num_put_type* _M_num_put;

      const __num_get_type* _M_num_get;

    public:
# 117 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_ios.h" 3
      explicit operator bool() const
      { return !this->fail(); }





      bool
      operator!() const
      { return this->fail(); }
# 136 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_ios.h" 3
      iostate
      rdstate() const
      { return _M_streambuf_state; }
# 147 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_ios.h" 3
      void
      clear(iostate __state = goodbit);







      void
      setstate(iostate __state)
      { this->clear(this->rdstate() | __state); }




      void
      _M_setstate(iostate __state)
      {


 _M_streambuf_state |= __state;
 if (this->exceptions() & __state)
   throw;
      }







      bool
      good() const
      { return this->rdstate() == 0; }







      bool
      eof() const
      { return (this->rdstate() & eofbit) != 0; }
# 200 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_ios.h" 3
      bool
      fail() const
      { return (this->rdstate() & (badbit | failbit)) != 0; }







      bool
      bad() const
      { return (this->rdstate() & badbit) != 0; }
# 221 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_ios.h" 3
      iostate
      exceptions() const
      { return _M_exception; }
# 256 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_ios.h" 3
      void
      exceptions(iostate __except)
      {
        _M_exception = __except;
        this->clear(_M_streambuf_state);
      }







      explicit
      basic_ios(basic_streambuf<_CharT, _Traits>* __sb)
      : ios_base(), _M_tie(0), _M_fill(), _M_fill_init(false), _M_streambuf(0),
 _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { this->init(__sb); }







      virtual
      ~basic_ios() { }
# 294 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie() const
      { return _M_tie; }
# 306 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie(basic_ostream<_CharT, _Traits>* __tiestr)
      {
        basic_ostream<_CharT, _Traits>* __old = _M_tie;
        _M_tie = __tiestr;
        return __old;
      }







      basic_streambuf<_CharT, _Traits>*
      rdbuf() const
      { return _M_streambuf; }
# 346 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_ios.h" 3
      basic_streambuf<_CharT, _Traits>*
      rdbuf(basic_streambuf<_CharT, _Traits>* __sb);
# 360 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_ios.h" 3
      basic_ios&
      copyfmt(const basic_ios& __rhs);







      char_type
      fill() const
      {
 if (!_M_fill_init)
   {
     _M_fill = this->widen(' ');
     _M_fill_init = true;
   }
 return _M_fill;
      }
# 389 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_ios.h" 3
      char_type
      fill(char_type __ch)
      {
 char_type __old = this->fill();
 _M_fill = __ch;
 return __old;
      }
# 409 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_ios.h" 3
      locale
      imbue(const locale& __loc);
# 429 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_ios.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return __check_facet(_M_ctype).narrow(__c, __dfault); }
# 448 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_ios.h" 3
      char_type
      widen(char __c) const
      { return __check_facet(_M_ctype).widen(__c); }

    protected:







      basic_ios()
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
 _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { }







      void
      init(basic_streambuf<_CharT, _Traits>* __sb);


      basic_ios(const basic_ios&) = delete;
      basic_ios& operator=(const basic_ios&) = delete;

      void
      move(basic_ios& __rhs)
      {
 ios_base::_M_move(__rhs);
 _M_cache_locale(_M_ios_locale);
 this->tie(__rhs.tie(nullptr));
 _M_fill = __rhs._M_fill;
 _M_fill_init = __rhs._M_fill_init;
 _M_streambuf = nullptr;
      }

      void
      move(basic_ios&& __rhs)
      { this->move(__rhs); }

      void
      swap(basic_ios& __rhs) noexcept
      {
 ios_base::_M_swap(__rhs);
 _M_cache_locale(_M_ios_locale);
 __rhs._M_cache_locale(__rhs._M_ios_locale);
 std::swap(_M_tie, __rhs._M_tie);
 std::swap(_M_fill, __rhs._M_fill);
 std::swap(_M_fill_init, __rhs._M_fill_init);
      }

      void
      set_rdbuf(basic_streambuf<_CharT, _Traits>* __sb)
      { _M_streambuf = __sb; }


      void
      _M_cache_locale(const locale& __loc);
    };


}

# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_ios.tcc" 1 3
# 34 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_ios.tcc" 3

namespace std
{


  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::clear(iostate __state)
    {
      if (this->rdbuf())
 _M_streambuf_state = __state;
      else
   _M_streambuf_state = __state | badbit;
      if (this->exceptions() & this->rdstate())
 __throw_ios_failure(("basic_ios::clear"));
    }

  template<typename _CharT, typename _Traits>
    basic_streambuf<_CharT, _Traits>*
    basic_ios<_CharT, _Traits>::rdbuf(basic_streambuf<_CharT, _Traits>* __sb)
    {
      basic_streambuf<_CharT, _Traits>* __old = _M_streambuf;
      _M_streambuf = __sb;
      this->clear();
      return __old;
    }

  template<typename _CharT, typename _Traits>
    basic_ios<_CharT, _Traits>&
    basic_ios<_CharT, _Traits>::copyfmt(const basic_ios& __rhs)
    {


      if (this != &__rhs)
 {




   _Words* __words = (__rhs._M_word_size <= _S_local_word_size) ?
                      _M_local_word : new _Words[__rhs._M_word_size];


   _Callback_list* __cb = __rhs._M_callbacks;
   if (__cb)
     __cb->_M_add_reference();
   _M_call_callbacks(erase_event);
   if (_M_word != _M_local_word)
     {
       delete [] _M_word;
       _M_word = 0;
     }
   _M_dispose_callbacks();


   _M_callbacks = __cb;
   for (int __i = 0; __i < __rhs._M_word_size; ++__i)
     __words[__i] = __rhs._M_word[__i];
   _M_word = __words;
   _M_word_size = __rhs._M_word_size;

   this->flags(__rhs.flags());
   this->width(__rhs.width());
   this->precision(__rhs.precision());
   this->tie(__rhs.tie());
   this->fill(__rhs.fill());
   _M_ios_locale = __rhs.getloc();
   _M_cache_locale(_M_ios_locale);

   _M_call_callbacks(copyfmt_event);


   this->exceptions(__rhs.exceptions());
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    locale
    basic_ios<_CharT, _Traits>::imbue(const locale& __loc)
    {
      locale __old(this->getloc());
      ios_base::imbue(__loc);
      _M_cache_locale(__loc);
      if (this->rdbuf() != 0)
 this->rdbuf()->pubimbue(__loc);
      return __old;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::init(basic_streambuf<_CharT, _Traits>* __sb)
    {

      ios_base::_M_init();


      _M_cache_locale(_M_ios_locale);
# 146 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_ios.tcc" 3
      _M_fill = _CharT();
      _M_fill_init = false;

      _M_tie = 0;
      _M_exception = goodbit;
      _M_streambuf = __sb;
      _M_streambuf_state = __sb ? goodbit : badbit;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::_M_cache_locale(const locale& __loc)
    {
      if (__builtin_expect(has_facet<__ctype_type>(__loc), true))
 _M_ctype = std::__addressof(use_facet<__ctype_type>(__loc));
      else
 _M_ctype = 0;

      if (__builtin_expect(has_facet<__num_put_type>(__loc), true))
 _M_num_put = std::__addressof(use_facet<__num_put_type>(__loc));
      else
 _M_num_put = 0;

      if (__builtin_expect(has_facet<__num_get_type>(__loc), true))
 _M_num_get = std::__addressof(use_facet<__num_get_type>(__loc));
      else
 _M_num_get = 0;
    }




  extern template class basic_ios<char>;


  extern template class basic_ios<wchar_t>;




}
# 517 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/basic_ios.h" 2 3
# 45 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ios" 2 3
# 39 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ostream" 2 3


namespace std
{
# 57 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ostream" 3
  template<typename _CharT, typename _Traits>
    class basic_ostream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
             __num_put_type;
      typedef ctype<_CharT> __ctype_type;
# 83 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ostream" 3
      explicit
      basic_ostream(__streambuf_type* __sb)
      { this->init(__sb); }






      virtual
      ~basic_ostream() { }


      class sentry;
      friend class sentry;
# 107 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ostream" 3
      __ostream_type&
      operator<<(__ostream_type& (*__pf)(__ostream_type&))
      {



 return __pf(*this);
      }

      __ostream_type&
      operator<<(__ios_type& (*__pf)(__ios_type&))
      {



 __pf(*this);
 return *this;
      }

      __ostream_type&
      operator<<(ios_base& (*__pf) (ios_base&))
      {



 __pf(*this);
 return *this;
      }
# 165 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ostream" 3
      __ostream_type&
      operator<<(long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(bool __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(short __n);

      __ostream_type&
      operator<<(unsigned short __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }

      __ostream_type&
      operator<<(int __n);

      __ostream_type&
      operator<<(unsigned int __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }


      __ostream_type&
      operator<<(long long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long long __n)
      { return _M_insert(__n); }
# 219 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ostream" 3
      __ostream_type&
      operator<<(double __f)
      { return _M_insert(__f); }

      __ostream_type&
      operator<<(float __f)
      {


 return _M_insert(static_cast<double>(__f));
      }

      __ostream_type&
      operator<<(long double __f)
      { return _M_insert(__f); }
# 244 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ostream" 3
      __ostream_type&
      operator<<(const void* __p)
      { return _M_insert(__p); }
# 275 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ostream" 3
      __ostream_type&
      operator<<(__streambuf_type* __sb);
# 308 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ostream" 3
      __ostream_type&
      put(char_type __c);






      void
      _M_write(const char_type* __s, streamsize __n)
      {
 const streamsize __put = this->rdbuf()->sputn(__s, __n);
 if (__put != __n)
   this->setstate(ios_base::badbit);
      }
# 340 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ostream" 3
      __ostream_type&
      write(const char_type* __s, streamsize __n);
# 353 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ostream" 3
      __ostream_type&
      flush();
# 363 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ostream" 3
      pos_type
      tellp();
# 374 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ostream" 3
      __ostream_type&
      seekp(pos_type);
# 386 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ostream" 3
       __ostream_type&
      seekp(off_type, ios_base::seekdir);

    protected:
      basic_ostream()
      { this->init(0); }



      basic_ostream(basic_iostream<_CharT, _Traits>&) { }

      basic_ostream(const basic_ostream&) = delete;

      basic_ostream(basic_ostream&& __rhs)
      : __ios_type()
      { __ios_type::move(__rhs); }



      basic_ostream& operator=(const basic_ostream&) = delete;

      basic_ostream&
      operator=(basic_ostream&& __rhs)
      {
 swap(__rhs);
 return *this;
      }

      void
      swap(basic_ostream& __rhs)
      { __ios_type::swap(__rhs); }


      template<typename _ValueT>
 __ostream_type&
 _M_insert(_ValueT __v);
    };
# 431 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ostream" 3
  template <typename _CharT, typename _Traits>
    class basic_ostream<_CharT, _Traits>::sentry
    {

      bool _M_ok;
      basic_ostream<_CharT, _Traits>& _M_os;

    public:
# 450 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ostream" 3
      explicit
      sentry(basic_ostream<_CharT, _Traits>& __os);

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"







      ~sentry()
      {

 if (bool(_M_os.flags() & ios_base::unitbuf) && !uncaught_exception())
   {

     if (_M_os.rdbuf() && _M_os.rdbuf()->pubsync() == -1)
       _M_os.setstate(ios_base::badbit);
   }
      }
#pragma GCC diagnostic pop
# 482 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ostream" 3
      explicit

      operator bool() const
      { return _M_ok; }
    };
# 504 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)
    { return __ostream_insert(__out, &__c, 1); }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)
    { return (__out << __out.widen(__c)); }


  template <class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, char __c)
    { return __ostream_insert(__out, &__c, 1); }


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, signed char __c)
    { return (__out << static_cast<char>(__c)); }

  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)
    { return (__out << static_cast<char>(__c)); }
# 546 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits> &
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s);


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }

  template<class _Traits>
    inline basic_ostream<char, _Traits> &
    operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }
# 597 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    endl(basic_ostream<_CharT, _Traits>& __os)
    { return flush(__os.put(__os.widen('\n'))); }
# 609 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    ends(basic_ostream<_CharT, _Traits>& __os)
    { return __os.put(_CharT()); }






  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    flush(basic_ostream<_CharT, _Traits>& __os)
    { return __os.flush(); }


  template<typename _Ch, typename _Up>
    basic_ostream<_Ch, _Up>&
    __is_convertible_to_basic_ostream_test(basic_ostream<_Ch, _Up>*);

  template<typename _Tp, typename = void>
    struct __is_convertible_to_basic_ostream_impl
    {
      using __ostream_type = void;
    };

  template<typename _Tp>
    using __do_is_convertible_to_basic_ostream_impl =
    decltype(__is_convertible_to_basic_ostream_test
      (declval<typename remove_reference<_Tp>::type*>()));

  template<typename _Tp>
    struct __is_convertible_to_basic_ostream_impl
    <_Tp,
     __void_t<__do_is_convertible_to_basic_ostream_impl<_Tp>>>
    {
      using __ostream_type =
 __do_is_convertible_to_basic_ostream_impl<_Tp>;
    };

  template<typename _Tp>
    struct __is_convertible_to_basic_ostream
    : __is_convertible_to_basic_ostream_impl<_Tp>
    {
    public:
      using type = __not_<is_void<
        typename __is_convertible_to_basic_ostream_impl<_Tp>::__ostream_type>>;
      constexpr static bool value = type::value;
    };

  template<typename _Ostream, typename _Tp, typename = void>
    struct __is_insertable : false_type {};

  template<typename _Ostream, typename _Tp>
    struct __is_insertable<_Ostream, _Tp,
      __void_t<decltype(declval<_Ostream&>()
          << declval<const _Tp&>())>>
        : true_type {};

  template<typename _Ostream>
    using __rvalue_ostream_type =
      typename __is_convertible_to_basic_ostream<
 _Ostream>::__ostream_type;
# 683 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ostream" 3
  template<typename _Ostream, typename _Tp>
    inline
    typename enable_if<__and_<__not_<is_lvalue_reference<_Ostream>>,
         __is_convertible_to_basic_ostream<_Ostream>,
         __is_insertable<
    __rvalue_ostream_type<_Ostream>,
    const _Tp&>>::value,
         __rvalue_ostream_type<_Ostream>>::type
    operator<<(_Ostream&& __os, const _Tp& __x)
    {
      __rvalue_ostream_type<_Ostream> __ret_os = __os;
      __ret_os << __x;
      return __ret_os;
    }



}

# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/ostream.tcc" 1 3
# 38 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/ostream.tcc" 3



namespace std
{


  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>::sentry::
    sentry(basic_ostream<_CharT, _Traits>& __os)
    : _M_ok(false), _M_os(__os)
    {

      if (__os.tie() && __os.good())
 __os.tie()->flush();

      if (__os.good())
 _M_ok = true;
      else
 __os.setstate(ios_base::failbit);
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_ostream<_CharT, _Traits>&
      basic_ostream<_CharT, _Traits>::
      _M_insert(_ValueT __v)
      {
 sentry __cerb(*this);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::goodbit;
     try
       {
  const __num_put_type& __np = __check_facet(this->_M_num_put);
  if (__np.put(*this, *this, this->fill(), __v).failed())
    __err |= ios_base::badbit;
       }
     catch(__cxxabiv1::__forced_unwind&)
       {
  this->_M_setstate(ios_base::badbit);
  throw;
       }
     catch(...)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(short __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned short>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(int __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned int>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(__streambuf_type* __sbin)
    {
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this);
      if (__cerb && __sbin)
 {
   try
     {
       if (!__copy_streambufs(__sbin, this->rdbuf()))
  __err |= ios_base::failbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbin)
 __err |= ios_base::badbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    put(char_type __c)
    {






      sentry __cerb(*this);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __put = this->rdbuf()->sputc(__c);
       if (traits_type::eq_int_type(__put, traits_type::eof()))
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    write(const _CharT* __s, streamsize __n)
    {







      sentry __cerb(*this);
      if (__cerb)
 {
   try
     { _M_write(__s, __n); }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    flush()
    {



      ios_base::iostate __err = ios_base::goodbit;
      try
 {
   if (this->rdbuf() && this->rdbuf()->pubsync() == -1)
     __err |= ios_base::badbit;
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_ostream<_CharT, _Traits>::pos_type
    basic_ostream<_CharT, _Traits>::
    tellp()
    {
      pos_type __ret = pos_type(-1);
      try
 {
   if (!this->fail())
     __ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::out);
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(pos_type __pos)
    {
      ios_base::iostate __err = ios_base::goodbit;
      try
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekpos(__pos,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(off_type __off, ios_base::seekdir __dir)
    {
      ios_base::iostate __err = ios_base::goodbit;
      try
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 {


   const size_t __clen = char_traits<char>::length(__s);
   try
     {
       struct __ptr_guard
       {
  _CharT *__p;
  __ptr_guard (_CharT *__ip): __p(__ip) { }
  ~__ptr_guard() { delete[] __p; }
  _CharT* __get() { return __p; }
       } __pg (new _CharT[__clen]);

       _CharT *__ws = __pg.__get();
       for (size_t __i = 0; __i < __clen; ++__i)
  __ws[__i] = __out.widen(__s[__i]);
       __ostream_insert(__out, __ws, __clen);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __out._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __out._M_setstate(ios_base::badbit); }
 }
      return __out;
    }




  extern template class basic_ostream<char>;
  extern template ostream& endl(ostream&);
  extern template ostream& ends(ostream&);
  extern template ostream& flush(ostream&);
  extern template ostream& operator<<(ostream&, char);
  extern template ostream& operator<<(ostream&, unsigned char);
  extern template ostream& operator<<(ostream&, signed char);
  extern template ostream& operator<<(ostream&, const char*);
  extern template ostream& operator<<(ostream&, const unsigned char*);
  extern template ostream& operator<<(ostream&, const signed char*);

  extern template ostream& ostream::_M_insert(long);
  extern template ostream& ostream::_M_insert(unsigned long);
  extern template ostream& ostream::_M_insert(bool);

  extern template ostream& ostream::_M_insert(long long);
  extern template ostream& ostream::_M_insert(unsigned long long);

  extern template ostream& ostream::_M_insert(double);
  extern template ostream& ostream::_M_insert(long double);
  extern template ostream& ostream::_M_insert(const void*);


  extern template class basic_ostream<wchar_t>;
  extern template wostream& endl(wostream&);
  extern template wostream& ends(wostream&);
  extern template wostream& flush(wostream&);
  extern template wostream& operator<<(wostream&, wchar_t);
  extern template wostream& operator<<(wostream&, char);
  extern template wostream& operator<<(wostream&, const wchar_t*);
  extern template wostream& operator<<(wostream&, const char*);

  extern template wostream& wostream::_M_insert(long);
  extern template wostream& wostream::_M_insert(unsigned long);
  extern template wostream& wostream::_M_insert(bool);

  extern template wostream& wostream::_M_insert(long long);
  extern template wostream& wostream::_M_insert(unsigned long long);

  extern template wostream& wostream::_M_insert(double);
  extern template wostream& wostream::_M_insert(long double);
  extern template wostream& wostream::_M_insert(const void*);




}
# 703 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ostream" 2 3
# 40 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/iostream" 2 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/istream" 1 3
# 37 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/istream" 3




namespace std
{
# 57 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
        __num_get_type;
      typedef ctype<_CharT> __ctype_type;

    protected:





      streamsize _M_gcount;

    public:







      explicit
      basic_istream(__streambuf_type* __sb)
      : _M_gcount(streamsize(0))
      { this->init(__sb); }






      virtual
      ~basic_istream()
      { _M_gcount = streamsize(0); }


      class sentry;
      friend class sentry;
# 119 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/istream" 3
      __istream_type&
      operator>>(__istream_type& (*__pf)(__istream_type&))
      { return __pf(*this); }

      __istream_type&
      operator>>(__ios_type& (*__pf)(__ios_type&))
      {
 __pf(*this);
 return *this;
      }

      __istream_type&
      operator>>(ios_base& (*__pf)(ios_base&))
      {
 __pf(*this);
 return *this;
      }
# 167 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/istream" 3
      __istream_type&
      operator>>(bool& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(short& __n);

      __istream_type&
      operator>>(unsigned short& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(int& __n);

      __istream_type&
      operator>>(unsigned int& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long& __n)
      { return _M_extract(__n); }


      __istream_type&
      operator>>(long long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long long& __n)
      { return _M_extract(__n); }
# 213 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/istream" 3
      __istream_type&
      operator>>(float& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(double& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(long double& __f)
      { return _M_extract(__f); }
# 234 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/istream" 3
      __istream_type&
      operator>>(void*& __p)
      { return _M_extract(__p); }
# 258 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/istream" 3
      __istream_type&
      operator>>(__streambuf_type* __sb);
# 268 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/istream" 3
      streamsize
      gcount() const
      { return _M_gcount; }
# 301 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/istream" 3
      int_type
      get();
# 315 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/istream" 3
      __istream_type&
      get(char_type& __c);
# 342 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n, char_type __delim);
# 353 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n)
      { return this->get(__s, __n, this->widen('\n')); }
# 376 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/istream" 3
      __istream_type&
      get(__streambuf_type& __sb, char_type __delim);
# 386 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/istream" 3
      __istream_type&
      get(__streambuf_type& __sb)
      { return this->get(__sb, this->widen('\n')); }
# 415 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n, char_type __delim);
# 426 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n)
      { return this->getline(__s, __n, this->widen('\n')); }
# 450 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/istream" 3
      __istream_type&
      ignore(streamsize __n, int_type __delim);

      __istream_type&
      ignore(streamsize __n);

      __istream_type&
      ignore();
# 467 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/istream" 3
      int_type
      peek();
# 485 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/istream" 3
      __istream_type&
      read(char_type* __s, streamsize __n);
# 504 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/istream" 3
      streamsize
      readsome(char_type* __s, streamsize __n);
# 521 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/istream" 3
      __istream_type&
      putback(char_type __c);
# 537 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/istream" 3
      __istream_type&
      unget();
# 555 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/istream" 3
      int
      sync();
# 570 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/istream" 3
      pos_type
      tellg();
# 585 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/istream" 3
      __istream_type&
      seekg(pos_type);
# 601 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/istream" 3
      __istream_type&
      seekg(off_type, ios_base::seekdir);


    protected:
      basic_istream()
      : _M_gcount(streamsize(0))
      { this->init(0); }


      basic_istream(const basic_istream&) = delete;

      basic_istream(basic_istream&& __rhs)
      : __ios_type(), _M_gcount(__rhs._M_gcount)
      {
 __ios_type::move(__rhs);
 __rhs._M_gcount = 0;
      }



      basic_istream& operator=(const basic_istream&) = delete;

      basic_istream&
      operator=(basic_istream&& __rhs)
      {
 swap(__rhs);
 return *this;
      }

      void
      swap(basic_istream& __rhs)
      {
 __ios_type::swap(__rhs);
 std::swap(_M_gcount, __rhs._M_gcount);
      }


      template<typename _ValueT>
 __istream_type&
 _M_extract(_ValueT& __v);
    };


  template<>
    basic_istream<char>&
    basic_istream<char>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n, int_type __delim);


  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n, int_type __delim);
# 685 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream<_CharT, _Traits>::sentry
    {

      bool _M_ok;

    public:

      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::__ctype_type __ctype_type;
      typedef typename _Traits::int_type __int_type;
# 721 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/istream" 3
      explicit
      sentry(basic_istream<_CharT, _Traits>& __is, bool __noskipws = false);
# 732 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/istream" 3
      explicit

      operator bool() const
      { return _M_ok; }
    };
# 750 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }
# 792 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s);


  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __in, char* __s);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }
# 823 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_iostream
    : public basic_istream<_CharT, _Traits>,
      public basic_ostream<_CharT, _Traits>
    {
    public:



      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;







      explicit
      basic_iostream(basic_streambuf<_CharT, _Traits>* __sb)
      : __istream_type(__sb), __ostream_type(__sb) { }




      virtual
      ~basic_iostream() { }

    protected:
      basic_iostream()
      : __istream_type(), __ostream_type() { }


      basic_iostream(const basic_iostream&) = delete;

      basic_iostream(basic_iostream&& __rhs)
      : __istream_type(std::move(__rhs)), __ostream_type(*this)
      { }



      basic_iostream& operator=(const basic_iostream&) = delete;

      basic_iostream&
      operator=(basic_iostream&& __rhs)
      {
 swap(__rhs);
 return *this;
      }

      void
      swap(basic_iostream& __rhs)
      { __istream_type::swap(__rhs); }

    };
# 906 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __is);


  template<typename _Ch, typename _Up>
    basic_istream<_Ch, _Up>&
    __is_convertible_to_basic_istream_test(basic_istream<_Ch, _Up>*);

  template<typename _Tp, typename = void>
    struct __is_convertible_to_basic_istream_impl
    {
      using __istream_type = void;
    };

  template<typename _Tp>
    using __do_is_convertible_to_basic_istream_impl =
    decltype(__is_convertible_to_basic_istream_test
      (declval<typename remove_reference<_Tp>::type*>()));

  template<typename _Tp>
    struct __is_convertible_to_basic_istream_impl
    <_Tp,
     __void_t<__do_is_convertible_to_basic_istream_impl<_Tp>>>
    {
      using __istream_type =
 __do_is_convertible_to_basic_istream_impl<_Tp>;
    };

  template<typename _Tp>
    struct __is_convertible_to_basic_istream
    : __is_convertible_to_basic_istream_impl<_Tp>
    {
    public:
      using type = __not_<is_void<
        typename __is_convertible_to_basic_istream_impl<_Tp>::__istream_type>>;
      constexpr static bool value = type::value;
    };

  template<typename _Istream, typename _Tp, typename = void>
    struct __is_extractable : false_type {};

  template<typename _Istream, typename _Tp>
    struct __is_extractable<_Istream, _Tp,
       __void_t<decltype(declval<_Istream&>()
           >> declval<_Tp>())>>
    : true_type {};

  template<typename _Istream>
    using __rvalue_istream_type =
      typename __is_convertible_to_basic_istream<
 _Istream>::__istream_type;
# 972 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/istream" 3
  template<typename _Istream, typename _Tp>
    inline
    typename enable_if<__and_<__not_<is_lvalue_reference<_Istream>>,
         __is_convertible_to_basic_istream<_Istream>,
         __is_extractable<
    __rvalue_istream_type<_Istream>,
    _Tp&&>>::value,
         __rvalue_istream_type<_Istream>>::type
    operator>>(_Istream&& __is, _Tp&& __x)
    {
      __rvalue_istream_type<_Istream> __ret_is = __is;
      __ret_is >> std::forward<_Tp>(__x);
      return __ret_is;
    }



}

# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/istream.tcc" 1 3
# 38 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/istream.tcc" 3



namespace std
{


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>::sentry::
    sentry(basic_istream<_CharT, _Traits>& __in, bool __noskip) : _M_ok(false)
    {
      ios_base::iostate __err = ios_base::goodbit;
      if (__in.good())
 try
   {
     if (__in.tie())
       __in.tie()->flush();
     if (!__noskip && bool(__in.flags() & ios_base::skipws))
       {
  const __int_type __eof = traits_type::eof();
  __streambuf_type* __sb = __in.rdbuf();
  __int_type __c = __sb->sgetc();

  const __ctype_type& __ct = __check_facet(__in._M_ctype);
  while (!traits_type::eq_int_type(__c, __eof)
         && __ct.is(ctype_base::space,
      traits_type::to_char_type(__c)))
    __c = __sb->snextc();




  if (traits_type::eq_int_type(__c, __eof))
    __err |= ios_base::eofbit;
       }
   }
 catch(__cxxabiv1::__forced_unwind&)
   {
     __in._M_setstate(ios_base::badbit);
     throw;
   }
 catch(...)
   { __in._M_setstate(ios_base::badbit); }

      if (__in.good() && __err == ios_base::goodbit)
 _M_ok = true;
      else
 {
   __err |= ios_base::failbit;
   __in.setstate(__err);
 }
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_istream<_CharT, _Traits>&
      basic_istream<_CharT, _Traits>::
      _M_extract(_ValueT& __v)
      {
 sentry __cerb(*this, false);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::goodbit;
     try
       {
  const __num_get_type& __ng = __check_facet(this->_M_num_get);
  __ng.get(*this, 0, *this, __err, __v);
       }
     catch(__cxxabiv1::__forced_unwind&)
       {
  this->_M_setstate(ios_base::badbit);
  throw;
       }
     catch(...)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(short& __n)
    {


      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       long __l;
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __l);



       if (__l < __gnu_cxx::__numeric_traits<short>::__min)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<short>::__min;
  }
       else if (__l > __gnu_cxx::__numeric_traits<short>::__max)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<short>::__max;
  }
       else
  __n = short(__l);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(int& __n)
    {


      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       long __l;
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __l);



       if (__l < __gnu_cxx::__numeric_traits<int>::__min)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<int>::__min;
  }
       else if (__l > __gnu_cxx::__numeric_traits<int>::__max)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<int>::__max;
  }
       else
  __n = int(__l);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(__streambuf_type* __sbout)
    {
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, false);
      if (__cerb && __sbout)
 {
   try
     {
       bool __ineof;
       if (!__copy_streambufs_eof(this->rdbuf(), __sbout, __ineof))
  __err |= ios_base::failbit;
       if (__ineof)
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::failbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbout)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    get(void)
    {
      const int_type __eof = traits_type::eof();
      int_type __c = __eof;
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       __c = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__c, __eof))
  _M_gcount = 1;
       else
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type& __c)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __cb = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__cb, traits_type::eof()))
  {
    _M_gcount = 1;
    __c = traits_type::to_char_type(__cb);
  }
       else
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       int_type __c = __sb->sgetc();

       while (_M_gcount + 1 < __n
       && !traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim))
  {
    *__s++ = traits_type::to_char_type(__c);
    ++_M_gcount;
    __c = __sb->snextc();
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(__streambuf_type& __sb, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __this_sb = this->rdbuf();
       int_type __c = __this_sb->sgetc();
       char_type __c2 = traits_type::to_char_type(__c);

       while (!traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim)
       && !traits_type::eq_int_type(__sb.sputc(__c2), __eof))
  {
    ++_M_gcount;
    __c = __this_sb->snextc();
    __c2 = traits_type::to_char_type(__c);
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    getline(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
        {
          try
            {
              const int_type __idelim = traits_type::to_int_type(__delim);
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();

              while (_M_gcount + 1 < __n
                     && !traits_type::eq_int_type(__c, __eof)
                     && !traits_type::eq_int_type(__c, __idelim))
                {
                  *__s++ = traits_type::to_char_type(__c);
                  __c = __sb->snextc();
                  ++_M_gcount;
                }
              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
              else
                {
                  if (traits_type::eq_int_type(__c, __idelim))
                    {
                      __sb->sbumpc();
                      ++_M_gcount;
                    }
                  else
                    __err |= ios_base::failbit;
                }
            }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
        }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
        __err |= ios_base::failbit;
      if (__err)
        this->setstate(__err);
      return *this;
    }




  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(void)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();

       if (traits_type::eq_int_type(__sb->sbumpc(), __eof))
  __err |= ios_base::eofbit;
       else
  _M_gcount = 1;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::goodbit;
          try
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();
# 521 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/istream.tcc" 3
       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

       if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
            }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n, int_type __delim)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::goodbit;
          try
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();


       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof)
    && !traits_type::eq_int_type(__c, __delim))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof)
        && !traits_type::eq_int_type(__c, __delim))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
       else if (traits_type::eq_int_type(__c, __delim))
  {
    if (_M_gcount
        < __gnu_cxx::__numeric_traits<streamsize>::__max)
      ++_M_gcount;
    __sb->sbumpc();
  }
            }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    peek(void)
    {
      int_type __c = traits_type::eof();
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       __c = this->rdbuf()->sgetc();
       if (traits_type::eq_int_type(__c, traits_type::eof()))
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    read(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       _M_gcount = this->rdbuf()->sgetn(__s, __n);
       if (_M_gcount != __n)
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_istream<_CharT, _Traits>::
    readsome(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {

       const streamsize __num = this->rdbuf()->in_avail();
       if (__num > 0)
  _M_gcount = this->rdbuf()->sgetn(__s, std::min(__num, __n));
       else if (__num == -1)
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return _M_gcount;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    putback(char_type __c)
    {


      _M_gcount = 0;

      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sputbackc(__c), __eof))
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    unget(void)
    {


      _M_gcount = 0;

      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sungetc(), __eof))
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    int
    basic_istream<_CharT, _Traits>::
    sync(void)
    {


      int __ret = -1;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       __streambuf_type* __sb = this->rdbuf();
       if (__sb)
  {
    if (__sb->pubsync() == -1)
      __err |= ios_base::badbit;
    else
      __ret = 0;
  }
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::pos_type
    basic_istream<_CharT, _Traits>::
    tellg(void)
    {


      pos_type __ret = pos_type(-1);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       if (!this->fail())
  __ret = this->rdbuf()->pubseekoff(0, ios_base::cur,
        ios_base::in);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(pos_type __pos)
    {



      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       if (!this->fail())
  {

    const pos_type __p = this->rdbuf()->pubseekpos(__pos,
         ios_base::in);


    if (__p == pos_type(off_type(-1)))
      __err |= ios_base::failbit;
  }
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(off_type __off, ios_base::seekdir __dir)
    {



      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       if (!this->fail())
  {

    const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
         ios_base::in);


    if (__p == pos_type(off_type(-1)))
      __err |= ios_base::failbit;
  }
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::int_type __int_type;

      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const __int_type __cb = __in.rdbuf()->sbumpc();
       if (!_Traits::eq_int_type(__cb, _Traits::eof()))
  __c = _Traits::to_char_type(__cb);
       else
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __in._M_setstate(ios_base::badbit); }
   if (__err)
     __in.setstate(__err);
 }
      return __in;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename _Traits::int_type int_type;
      typedef _CharT char_type;
      typedef ctype<_CharT> __ctype_type;

      streamsize __extracted = 0;
      ios_base::iostate __err = ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   try
     {

       streamsize __num = __in.width();
       if (__num <= 0)
  __num = __gnu_cxx::__numeric_traits<streamsize>::__max;

       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());

       const int_type __eof = _Traits::eof();
       __streambuf_type* __sb = __in.rdbuf();
       int_type __c = __sb->sgetc();

       while (__extracted < __num - 1
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    *__s++ = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __sb->snextc();
  }
       if (_Traits::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;



       *__s = char_type();
       __in.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __in._M_setstate(ios_base::badbit); }
 }
      if (!__extracted)
 __err |= ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __in)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename __istream_type::int_type __int_type;
      typedef ctype<_CharT> __ctype_type;

      const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
      const __int_type __eof = _Traits::eof();
      __streambuf_type* __sb = __in.rdbuf();
      __int_type __c = __sb->sgetc();

      while (!_Traits::eq_int_type(__c, __eof)
      && __ct.is(ctype_base::space, _Traits::to_char_type(__c)))
 __c = __sb->snextc();

       if (_Traits::eq_int_type(__c, __eof))
  __in.setstate(ios_base::eofbit);
      return __in;
    }




  extern template class basic_istream<char>;
  extern template istream& ws(istream&);
  extern template istream& operator>>(istream&, char&);
  extern template istream& operator>>(istream&, char*);
  extern template istream& operator>>(istream&, unsigned char&);
  extern template istream& operator>>(istream&, signed char&);
  extern template istream& operator>>(istream&, unsigned char*);
  extern template istream& operator>>(istream&, signed char*);

  extern template istream& istream::_M_extract(unsigned short&);
  extern template istream& istream::_M_extract(unsigned int&);
  extern template istream& istream::_M_extract(long&);
  extern template istream& istream::_M_extract(unsigned long&);
  extern template istream& istream::_M_extract(bool&);

  extern template istream& istream::_M_extract(long long&);
  extern template istream& istream::_M_extract(unsigned long long&);

  extern template istream& istream::_M_extract(float&);
  extern template istream& istream::_M_extract(double&);
  extern template istream& istream::_M_extract(long double&);
  extern template istream& istream::_M_extract(void*&);

  extern template class basic_iostream<char>;


  extern template class basic_istream<wchar_t>;
  extern template wistream& ws(wistream&);
  extern template wistream& operator>>(wistream&, wchar_t&);
  extern template wistream& operator>>(wistream&, wchar_t*);

  extern template wistream& wistream::_M_extract(unsigned short&);
  extern template wistream& wistream::_M_extract(unsigned int&);
  extern template wistream& wistream::_M_extract(long&);
  extern template wistream& wistream::_M_extract(unsigned long&);
  extern template wistream& wistream::_M_extract(bool&);

  extern template wistream& wistream::_M_extract(long long&);
  extern template wistream& wistream::_M_extract(unsigned long long&);

  extern template wistream& wistream::_M_extract(float&);
  extern template wistream& wistream::_M_extract(double&);
  extern template wistream& wistream::_M_extract(long double&);
  extern template wistream& wistream::_M_extract(void*&);

  extern template class basic_iostream<wchar_t>;




}
# 992 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/istream" 2 3
# 41 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/iostream" 2 3

namespace std
{
# 60 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/iostream" 3
  extern istream cin;
  extern ostream cout;
  extern ostream cerr;
  extern ostream clog;


  extern wistream wcin;
  extern wostream wcout;
  extern wostream wcerr;
  extern wostream wclog;




  static ios_base::Init __ioinit;


}
# 153 "C:/Xilinx/Vitis/2024.2/include/etc/ap_common.h" 2





# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/sstream" 1 3
# 37 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/sstream" 3




namespace std
{

namespace __cxx11 {
# 64 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/sstream" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    {
      struct __xfer_bufptrs;
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;


      typedef _Alloc allocator_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;

      typedef basic_streambuf<char_type, traits_type> __streambuf_type;
      typedef basic_string<char_type, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;

    protected:

      ios_base::openmode _M_mode;


      __string_type _M_string;

    public:
# 99 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/sstream" 3
      basic_stringbuf()
      : __streambuf_type(), _M_mode(ios_base::in | ios_base::out), _M_string()
      { }
# 110 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/sstream" 3
      explicit
      basic_stringbuf(ios_base::openmode __mode)
      : __streambuf_type(), _M_mode(__mode), _M_string()
      { }
# 123 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/sstream" 3
      explicit
      basic_stringbuf(const __string_type& __str,
        ios_base::openmode __mode = ios_base::in | ios_base::out)
      : __streambuf_type(), _M_mode(),
 _M_string(__str.data(), __str.size(), __str.get_allocator())
      { _M_stringbuf_init(__mode); }


      basic_stringbuf(const basic_stringbuf&) = delete;

      basic_stringbuf(basic_stringbuf&& __rhs)
      : basic_stringbuf(std::move(__rhs), __xfer_bufptrs(__rhs, this))
      { __rhs._M_sync(const_cast<char_type*>(__rhs._M_string.data()), 0, 0); }



      basic_stringbuf&
      operator=(const basic_stringbuf&) = delete;

      basic_stringbuf&
      operator=(basic_stringbuf&& __rhs)
      {
 __xfer_bufptrs __st{__rhs, this};
 const __streambuf_type& __base = __rhs;
 __streambuf_type::operator=(__base);
 this->pubimbue(__rhs.getloc());
 _M_mode = __rhs._M_mode;
 _M_string = std::move(__rhs._M_string);
 __rhs._M_sync(const_cast<char_type*>(__rhs._M_string.data()), 0, 0);
 return *this;
      }

      void
      swap(basic_stringbuf& __rhs)
      {
 __xfer_bufptrs __l_st{*this, std::__addressof(__rhs)};
 __xfer_bufptrs __r_st{__rhs, this};
 __streambuf_type& __base = __rhs;
 __streambuf_type::swap(__base);
 __rhs.pubimbue(this->pubimbue(__rhs.getloc()));
 std::swap(_M_mode, __rhs._M_mode);
 std::swap(_M_string, __rhs._M_string);
      }
# 177 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/sstream" 3
      __string_type
      str() const
      {
 __string_type __ret(_M_string.get_allocator());
 if (this->pptr())
   {

     if (this->pptr() > this->egptr())
       __ret.assign(this->pbase(), this->pptr());
     else
       __ret.assign(this->pbase(), this->egptr());
   }
 else
   __ret = _M_string;
 return __ret;
      }
# 201 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/sstream" 3
      void
      str(const __string_type& __s)
      {


 _M_string.assign(__s.data(), __s.size());
 _M_stringbuf_init(_M_mode);
      }

    protected:

      void
      _M_stringbuf_init(ios_base::openmode __mode)
      {
 _M_mode = __mode;
 __size_type __len = 0;
 if (_M_mode & (ios_base::ate | ios_base::app))
   __len = _M_string.size();
 _M_sync(const_cast<char_type*>(_M_string.data()), 0, __len);
      }

      virtual streamsize
      showmanyc()
      {
 streamsize __ret = -1;
 if (_M_mode & ios_base::in)
   {
     _M_update_egptr();
     __ret = this->egptr() - this->gptr();
   }
 return __ret;
      }

      virtual int_type
      underflow();

      virtual int_type
      pbackfail(int_type __c = traits_type::eof());

      virtual int_type
      overflow(int_type __c = traits_type::eof());
# 254 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/sstream" 3
      virtual __streambuf_type*
      setbuf(char_type* __s, streamsize __n)
      {
 if (__s && __n >= 0)
   {






     _M_string.clear();


     _M_sync(__s, __n, 0);
   }
 return this;
      }

      virtual pos_type
      seekoff(off_type __off, ios_base::seekdir __way,
       ios_base::openmode __mode = ios_base::in | ios_base::out);

      virtual pos_type
      seekpos(pos_type __sp,
       ios_base::openmode __mode = ios_base::in | ios_base::out);




      void
      _M_sync(char_type* __base, __size_type __i, __size_type __o);



      void
      _M_update_egptr()
      {
 const bool __testin = _M_mode & ios_base::in;
 if (this->pptr() && this->pptr() > this->egptr())
   {
     if (__testin)
       this->setg(this->eback(), this->gptr(), this->pptr());
     else
       this->setg(this->pptr(), this->pptr(), this->pptr());
   }
      }



      void
      _M_pbump(char_type* __pbeg, char_type* __pend, off_type __off);

    private:




      struct __xfer_bufptrs
      {
 __xfer_bufptrs(const basic_stringbuf& __from, basic_stringbuf* __to)
 : _M_to{__to}, _M_goff{-1, -1, -1}, _M_poff{-1, -1, -1}
 {
   const _CharT* const __str = __from._M_string.data();
   const _CharT* __end = nullptr;
   if (__from.eback())
     {
       _M_goff[0] = __from.eback() - __str;
       _M_goff[1] = __from.gptr() - __str;
       _M_goff[2] = __from.egptr() - __str;
       __end = __from.egptr();
     }
   if (__from.pbase())
     {
       _M_poff[0] = __from.pbase() - __str;
       _M_poff[1] = __from.pptr() - __from.pbase();
       _M_poff[2] = __from.epptr() - __str;
       if (__from.pptr() > __end)
  __end = __from.pptr();
     }


   if (__end)
     {


       auto& __mut_from = const_cast<basic_stringbuf&>(__from);
       __mut_from._M_string._M_length(__end - __str);
     }
 }

 ~__xfer_bufptrs()
 {
   char_type* __str = const_cast<char_type*>(_M_to->_M_string.data());
   if (_M_goff[0] != -1)
     _M_to->setg(__str+_M_goff[0], __str+_M_goff[1], __str+_M_goff[2]);
   if (_M_poff[0] != -1)
     _M_to->_M_pbump(__str+_M_poff[0], __str+_M_poff[2], _M_poff[1]);
 }

 basic_stringbuf* _M_to;
 off_type _M_goff[3];
 off_type _M_poff[3];
      };
# 368 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/sstream" 3
      basic_stringbuf(basic_stringbuf&& __rhs, __xfer_bufptrs&&)
      : __streambuf_type(static_cast<const __streambuf_type&>(__rhs)),
      _M_mode(__rhs._M_mode), _M_string(std::move(__rhs._M_string))
      { }

    };
# 391 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/sstream" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_istringstream : public basic_istream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;


      typedef _Alloc allocator_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef basic_stringbuf<_CharT, _Traits, _Alloc> __stringbuf_type;
      typedef basic_istream<char_type, traits_type> __istream_type;

    private:
      __stringbuf_type _M_stringbuf;

    public:
# 425 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/sstream" 3
      basic_istringstream()
      : __istream_type(), _M_stringbuf(ios_base::in)
      { this->init(&_M_stringbuf); }
# 441 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/sstream" 3
      explicit
      basic_istringstream(ios_base::openmode __mode)
      : __istream_type(), _M_stringbuf(__mode | ios_base::in)
      { this->init(&_M_stringbuf); }
# 459 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/sstream" 3
      explicit
      basic_istringstream(const __string_type& __str,
     ios_base::openmode __mode = ios_base::in)
      : __istream_type(), _M_stringbuf(__str, __mode | ios_base::in)
      { this->init(&_M_stringbuf); }







      ~basic_istringstream()
      { }


      basic_istringstream(const basic_istringstream&) = delete;

      basic_istringstream(basic_istringstream&& __rhs)
      : __istream_type(std::move(__rhs)),
      _M_stringbuf(std::move(__rhs._M_stringbuf))
      { __istream_type::set_rdbuf(&_M_stringbuf); }



      basic_istringstream&
      operator=(const basic_istringstream&) = delete;

      basic_istringstream&
      operator=(basic_istringstream&& __rhs)
      {
 __istream_type::operator=(std::move(__rhs));
 _M_stringbuf = std::move(__rhs._M_stringbuf);
 return *this;
      }

      void
      swap(basic_istringstream& __rhs)
      {
 __istream_type::swap(__rhs);
 _M_stringbuf.swap(__rhs._M_stringbuf);
      }
# 510 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/sstream" 3
      __stringbuf_type*
      rdbuf() const
      { return const_cast<__stringbuf_type*>(&_M_stringbuf); }





      __string_type
      str() const
      { return _M_stringbuf.str(); }







      void
      str(const __string_type& __s)
      { _M_stringbuf.str(__s); }
    };
# 549 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/sstream" 3
  template <typename _CharT, typename _Traits, typename _Alloc>
    class basic_ostringstream : public basic_ostream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;


      typedef _Alloc allocator_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef basic_stringbuf<_CharT, _Traits, _Alloc> __stringbuf_type;
      typedef basic_ostream<char_type, traits_type> __ostream_type;

    private:
      __stringbuf_type _M_stringbuf;

    public:
# 583 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/sstream" 3
      basic_ostringstream()
      : __ostream_type(), _M_stringbuf(ios_base::out)
      { this->init(&_M_stringbuf); }
# 599 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/sstream" 3
      explicit
      basic_ostringstream(ios_base::openmode __mode)
      : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
      { this->init(&_M_stringbuf); }
# 617 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/sstream" 3
      explicit
      basic_ostringstream(const __string_type& __str,
     ios_base::openmode __mode = ios_base::out)
      : __ostream_type(), _M_stringbuf(__str, __mode | ios_base::out)
      { this->init(&_M_stringbuf); }







      ~basic_ostringstream()
      { }


      basic_ostringstream(const basic_ostringstream&) = delete;

      basic_ostringstream(basic_ostringstream&& __rhs)
      : __ostream_type(std::move(__rhs)),
      _M_stringbuf(std::move(__rhs._M_stringbuf))
      { __ostream_type::set_rdbuf(&_M_stringbuf); }



      basic_ostringstream&
      operator=(const basic_ostringstream&) = delete;

      basic_ostringstream&
      operator=(basic_ostringstream&& __rhs)
      {
 __ostream_type::operator=(std::move(__rhs));
 _M_stringbuf = std::move(__rhs._M_stringbuf);
 return *this;
      }

      void
      swap(basic_ostringstream& __rhs)
      {
 __ostream_type::swap(__rhs);
 _M_stringbuf.swap(__rhs._M_stringbuf);
      }
# 668 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/sstream" 3
      __stringbuf_type*
      rdbuf() const
      { return const_cast<__stringbuf_type*>(&_M_stringbuf); }





      __string_type
      str() const
      { return _M_stringbuf.str(); }







      void
      str(const __string_type& __s)
      { _M_stringbuf.str(__s); }
    };
# 707 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/sstream" 3
  template <typename _CharT, typename _Traits, typename _Alloc>
    class basic_stringstream : public basic_iostream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;


      typedef _Alloc allocator_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef basic_stringbuf<_CharT, _Traits, _Alloc> __stringbuf_type;
      typedef basic_iostream<char_type, traits_type> __iostream_type;

    private:
      __stringbuf_type _M_stringbuf;

    public:
# 741 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/sstream" 3
      basic_stringstream()
      : __iostream_type(), _M_stringbuf(ios_base::out | ios_base::in)
      { this->init(&_M_stringbuf); }
# 755 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/sstream" 3
      explicit
      basic_stringstream(ios_base::openmode __m)
      : __iostream_type(), _M_stringbuf(__m)
      { this->init(&_M_stringbuf); }
# 771 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/sstream" 3
      explicit
      basic_stringstream(const __string_type& __str,
    ios_base::openmode __m = ios_base::out | ios_base::in)
      : __iostream_type(), _M_stringbuf(__str, __m)
      { this->init(&_M_stringbuf); }







      ~basic_stringstream()
      { }


      basic_stringstream(const basic_stringstream&) = delete;

      basic_stringstream(basic_stringstream&& __rhs)
      : __iostream_type(std::move(__rhs)),
      _M_stringbuf(std::move(__rhs._M_stringbuf))
      { __iostream_type::set_rdbuf(&_M_stringbuf); }



      basic_stringstream&
      operator=(const basic_stringstream&) = delete;

      basic_stringstream&
      operator=(basic_stringstream&& __rhs)
      {
 __iostream_type::operator=(std::move(__rhs));
 _M_stringbuf = std::move(__rhs._M_stringbuf);
 return *this;
      }

      void
      swap(basic_stringstream& __rhs)
      {
 __iostream_type::swap(__rhs);
 _M_stringbuf.swap(__rhs._M_stringbuf);
      }
# 822 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/sstream" 3
      __stringbuf_type*
      rdbuf() const
      { return const_cast<__stringbuf_type*>(&_M_stringbuf); }





      __string_type
      str() const
      { return _M_stringbuf.str(); }







      void
      str(const __string_type& __s)
      { _M_stringbuf.str(__s); }
    };



  template <class _CharT, class _Traits, class _Allocator>
    inline void
    swap(basic_stringbuf<_CharT, _Traits, _Allocator>& __x,
  basic_stringbuf<_CharT, _Traits, _Allocator>& __y)
    { __x.swap(__y); }


  template <class _CharT, class _Traits, class _Allocator>
    inline void
    swap(basic_istringstream<_CharT, _Traits, _Allocator>& __x,
  basic_istringstream<_CharT, _Traits, _Allocator>& __y)
    { __x.swap(__y); }


  template <class _CharT, class _Traits, class _Allocator>
    inline void
    swap(basic_ostringstream<_CharT, _Traits, _Allocator>& __x,
  basic_ostringstream<_CharT, _Traits, _Allocator>& __y)
    { __x.swap(__y); }


  template <class _CharT, class _Traits, class _Allocator>
    inline void
    swap(basic_stringstream<_CharT, _Traits, _Allocator>& __x,
  basic_stringstream<_CharT, _Traits, _Allocator>& __y)
    { __x.swap(__y); }


}

}

# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/sstream.tcc" 1 3
# 38 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/sstream.tcc" 3

namespace std
{


  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::int_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    pbackfail(int_type __c)
    {
      int_type __ret = traits_type::eof();
      if (this->eback() < this->gptr())
 {


   const bool __testeof = traits_type::eq_int_type(__c, __ret);
   if (!__testeof)
     {
       const bool __testeq = traits_type::eq(traits_type::
          to_char_type(__c),
          this->gptr()[-1]);
       const bool __testout = this->_M_mode & ios_base::out;
       if (__testeq || __testout)
  {
    this->gbump(-1);
    if (!__testeq)
      *this->gptr() = traits_type::to_char_type(__c);
    __ret = __c;
  }
     }
   else
     {
       this->gbump(-1);
       __ret = traits_type::not_eof(__c);
     }
 }
      return __ret;
    }

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::int_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    overflow(int_type __c)
    {
      const bool __testout = this->_M_mode & ios_base::out;
      if (__builtin_expect(!__testout, false))
 return traits_type::eof();

      const bool __testeof = traits_type::eq_int_type(__c, traits_type::eof());
      if (__builtin_expect(__testeof, false))
 return traits_type::not_eof(__c);

      const __size_type __capacity = _M_string.capacity();


      if ((this->epptr() - this->pbase()) < __capacity)
 {

   char_type* __base = const_cast<char_type*>(_M_string.data());
   _M_pbump(__base, __base + __capacity, this->pptr() - this->pbase());
   if (_M_mode & ios_base::in)
     {
       const __size_type __nget = this->gptr() - this->eback();
       const __size_type __eget = this->egptr() - this->eback();
       this->setg(__base, __base + __nget, __base + __eget + 1);
     }
   *this->pptr() = traits_type::to_char_type(__c);
   this->pbump(1);
   return __c;
 }


      const __size_type __max_size = _M_string.max_size();
      const bool __testput = this->pptr() < this->epptr();
      if (__builtin_expect(!__testput && __capacity == __max_size, false))
 return traits_type::eof();



      const char_type __conv = traits_type::to_char_type(__c);
      if (!__testput)
 {
# 129 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/sstream.tcc" 3
   const __size_type __opt_len = std::max(__size_type(2 * __capacity),
       __size_type(512));
   const __size_type __len = std::min(__opt_len, __max_size);
   __string_type __tmp(_M_string.get_allocator());
   __tmp.reserve(__len);
   if (this->pbase())
     __tmp.assign(this->pbase(), this->epptr() - this->pbase());
   __tmp.push_back(__conv);
   _M_string.swap(__tmp);
   _M_sync(const_cast<char_type*>(_M_string.data()),
    this->gptr() - this->eback(), this->pptr() - this->pbase());
 }
      else
 *this->pptr() = __conv;
      this->pbump(1);
      return __c;
    }

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::int_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    underflow()
    {
      int_type __ret = traits_type::eof();
      const bool __testin = this->_M_mode & ios_base::in;
      if (__testin)
 {

   _M_update_egptr();

   if (this->gptr() < this->egptr())
     __ret = traits_type::to_int_type(*this->gptr());
 }
      return __ret;
    }

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::pos_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    seekoff(off_type __off, ios_base::seekdir __way, ios_base::openmode __mode)
    {
      pos_type __ret = pos_type(off_type(-1));
      bool __testin = (ios_base::in & this->_M_mode & __mode) != 0;
      bool __testout = (ios_base::out & this->_M_mode & __mode) != 0;
      const bool __testboth = __testin && __testout && __way != ios_base::cur;
      __testin &= !(__mode & ios_base::out);
      __testout &= !(__mode & ios_base::in);



      const char_type* __beg = __testin ? this->eback() : this->pbase();
      if ((__beg || !__off) && (__testin || __testout || __testboth))
 {
   _M_update_egptr();

   off_type __newoffi = __off;
   off_type __newoffo = __newoffi;
   if (__way == ios_base::cur)
     {
       __newoffi += this->gptr() - __beg;
       __newoffo += this->pptr() - __beg;
     }
   else if (__way == ios_base::end)
     __newoffo = __newoffi += this->egptr() - __beg;

   if ((__testin || __testboth)
       && __newoffi >= 0
       && this->egptr() - __beg >= __newoffi)
     {
       this->setg(this->eback(), this->eback() + __newoffi,
    this->egptr());
       __ret = pos_type(__newoffi);
     }
   if ((__testout || __testboth)
       && __newoffo >= 0
       && this->egptr() - __beg >= __newoffo)
     {
       _M_pbump(this->pbase(), this->epptr(), __newoffo);
       __ret = pos_type(__newoffo);
     }
 }
      return __ret;
    }

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::pos_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    seekpos(pos_type __sp, ios_base::openmode __mode)
    {
      pos_type __ret = pos_type(off_type(-1));
      const bool __testin = (ios_base::in & this->_M_mode & __mode) != 0;
      const bool __testout = (ios_base::out & this->_M_mode & __mode) != 0;

      const char_type* __beg = __testin ? this->eback() : this->pbase();
      if ((__beg || !off_type(__sp)) && (__testin || __testout))
 {
   _M_update_egptr();

   const off_type __pos(__sp);
   const bool __testpos = (0 <= __pos
      && __pos <= this->egptr() - __beg);
   if (__testpos)
     {
       if (__testin)
  this->setg(this->eback(), this->eback() + __pos,
      this->egptr());
       if (__testout)
  _M_pbump(this->pbase(), this->epptr(), __pos);
       __ret = __sp;
     }
 }
      return __ret;
    }

  template <class _CharT, class _Traits, class _Alloc>
    void
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    _M_sync(char_type* __base, __size_type __i, __size_type __o)
    {
      const bool __testin = _M_mode & ios_base::in;
      const bool __testout = _M_mode & ios_base::out;
      char_type* __endg = __base + _M_string.size();
      char_type* __endp = __base + _M_string.capacity();

      if (__base != _M_string.data())
 {

   __endg += __i;
   __i = 0;
   __endp = __endg;
 }

      if (__testin)
 this->setg(__base, __base + __i, __endg);
      if (__testout)
 {
   _M_pbump(__base, __endp, __o);



   if (!__testin)
     this->setg(__endg, __endg, __endg);
 }
    }

  template <class _CharT, class _Traits, class _Alloc>
    void
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    _M_pbump(char_type* __pbeg, char_type* __pend, off_type __off)
    {
      this->setp(__pbeg, __pend);
      while (__off > __gnu_cxx::__numeric_traits<int>::__max)
 {
   this->pbump(__gnu_cxx::__numeric_traits<int>::__max);
   __off -= __gnu_cxx::__numeric_traits<int>::__max;
 }
      this->pbump(__off);
    }




  extern template class basic_stringbuf<char>;
  extern template class basic_istringstream<char>;
  extern template class basic_ostringstream<char>;
  extern template class basic_stringstream<char>;


  extern template class basic_stringbuf<wchar_t>;
  extern template class basic_istringstream<wchar_t>;
  extern template class basic_ostringstream<wchar_t>;
  extern template class basic_stringstream<wchar_t>;




}
# 880 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/sstream" 2 3
# 159 "C:/Xilinx/Vitis/2024.2/include/etc/ap_common.h" 2





enum { CHAR_IS_SIGNED = (char)-1 < 0 };


namespace _ap_type {
template <typename _Tp>
struct is_signed {
  static const bool value = _Tp(-1) < _Tp(1);
};

template <typename _Tp>
struct is_integral {
  static const bool value = false;
};





template <> struct is_integral<bool> { static const bool value = true; };
template <> struct is_integral<char> { static const bool value = true; };
template <> struct is_integral<signed char> { static const bool value = true; };
template <> struct is_integral<unsigned char> { static const bool value = true; };
template <> struct is_integral<short> { static const bool value = true; };
template <> struct is_integral<unsigned short> { static const bool value = true; };
template <> struct is_integral<int> { static const bool value = true; };
template <> struct is_integral<unsigned int> { static const bool value = true; };
template <> struct is_integral<long> { static const bool value = true; };
template <> struct is_integral<unsigned long> { static const bool value = true; };
template <> struct is_integral<ap_slong> { static const bool value = true; };
template <> struct is_integral<ap_ulong> { static const bool value = true; };


template <bool, typename _Tp = void>
struct enable_if {};

template <typename _Tp>
struct enable_if<true, _Tp> {
  typedef _Tp type;
};

template <typename _Tp>
struct remove_const {
  typedef _Tp type;
};

template <typename _Tp>
struct remove_const<_Tp const> {
  typedef _Tp type;
};
}
# 587 "C:/Xilinx/Vitis/2024.2/include/etc/ap_common.h"
static inline unsigned char guess_radix(const char* s) {
  unsigned char rd = 10;
  const char* p = s;

  if (p[0] == '-' || p[0] == '+') ++p;

  if (p[0] == '0') {
    if (p[1] == 'b' || p[1] == 'B') {
      rd = 2;
    } else if (p[1] == 'o' || p[1] == 'O') {
      rd = 8;
    } else if (p[1] == 'x' || p[1] == 'X') {
      rd = 16;
    } else if (p[1] == 'd' || p[1] == 'D') {
      rd = 10;
    }
  }
  return rd;
}
# 615 "C:/Xilinx/Vitis/2024.2/include/etc/ap_common.h"
class half;
# 645 "C:/Xilinx/Vitis/2024.2/include/etc/ap_common.h"
template <int _AP_W, bool _AP_S, bool _AP_C = _AP_W <= 64>
class ap_private;

template <int _AP_W, bool _AP_S>
struct ssdm_int_sim {

  typedef ap_private<_AP_W, _AP_S> DataType;
  ap_private<_AP_W, _AP_S> V;
  ssdm_int_sim() = default;
                ssdm_int_sim(ap_private<_AP_W, _AP_S> o):V(o){}
};


# 1 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h" 1








#pragma GCC diagnostic push



#pragma GCC diagnostic ignored "-Wpragmas"




#pragma GCC diagnostic ignored "-Wint-in-bool-context"
# 28 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
#pragma GCC diagnostic ignored "-Wunused-parameter"
# 41 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
template <int _AP_W, bool _AP_S>
struct _private_range_ref;
template <int _AP_W, bool _AP_S>
struct _private_bit_ref;
# 68 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
# 1 "C:/Xilinx/Vitis/2024.2/include/hls_half.h" 1
# 26 "C:/Xilinx/Vitis/2024.2/include/hls_half.h"
# 1 "C:/Xilinx/Vitis/2024.2/include/etc/hls_half_fpo.h" 1
# 15 "C:/Xilinx/Vitis/2024.2/include/etc/hls_half_fpo.h"
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/limits" 1 3
# 41 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/limits" 3
# 158 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/limits" 3
namespace std
{







  enum float_round_style
  {
    round_indeterminate = -1,
    round_toward_zero = 0,
    round_to_nearest = 1,
    round_toward_infinity = 2,
    round_toward_neg_infinity = 3
  };







  enum float_denorm_style
  {

    denorm_indeterminate = -1,

    denorm_absent = 0,

    denorm_present = 1
  };
# 202 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/limits" 3
  struct __numeric_limits_base
  {


    static constexpr bool is_specialized = false;




    static constexpr int digits = 0;


    static constexpr int digits10 = 0;




    static constexpr int max_digits10 = 0;



    static constexpr bool is_signed = false;


    static constexpr bool is_integer = false;




    static constexpr bool is_exact = false;



    static constexpr int radix = 0;



    static constexpr int min_exponent = 0;



    static constexpr int min_exponent10 = 0;




    static constexpr int max_exponent = 0;



    static constexpr int max_exponent10 = 0;


    static constexpr bool has_infinity = false;



    static constexpr bool has_quiet_NaN = false;



    static constexpr bool has_signaling_NaN = false;


    static constexpr float_denorm_style has_denorm = denorm_absent;



    static constexpr bool has_denorm_loss = false;



    static constexpr bool is_iec559 = false;




    static constexpr bool is_bounded = false;
# 288 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/limits" 3
    static constexpr bool is_modulo = false;


    static constexpr bool traps = false;


    static constexpr bool tinyness_before = false;




    static constexpr float_round_style round_style =
          round_toward_zero;
  };
# 311 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/limits" 3
  template<typename _Tp>
    struct numeric_limits : public __numeric_limits_base
    {


      static constexpr _Tp
      min() noexcept { return _Tp(); }


      static constexpr _Tp
      max() noexcept { return _Tp(); }




      static constexpr _Tp
      lowest() noexcept { return _Tp(); }




      static constexpr _Tp
      epsilon() noexcept { return _Tp(); }


      static constexpr _Tp
      round_error() noexcept { return _Tp(); }


      static constexpr _Tp
      infinity() noexcept { return _Tp(); }



      static constexpr _Tp
      quiet_NaN() noexcept { return _Tp(); }



      static constexpr _Tp
      signaling_NaN() noexcept { return _Tp(); }




      static constexpr _Tp
      denorm_min() noexcept { return _Tp(); }
    };




  template<typename _Tp>
    struct numeric_limits<const _Tp>
    : public numeric_limits<_Tp> { };

  template<typename _Tp>
    struct numeric_limits<volatile _Tp>
    : public numeric_limits<_Tp> { };

  template<typename _Tp>
    struct numeric_limits<const volatile _Tp>
    : public numeric_limits<_Tp> { };
# 383 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/limits" 3
  template<>
    struct numeric_limits<bool>
    {
      static constexpr bool is_specialized = true;

      static constexpr bool
      min() noexcept { return false; }

      static constexpr bool
      max() noexcept { return true; }


      static constexpr bool
      lowest() noexcept { return min(); }

      static constexpr int digits = 1;
      static constexpr int digits10 = 0;

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr bool
      epsilon() noexcept { return false; }

      static constexpr bool
      round_error() noexcept { return false; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr bool
      infinity() noexcept { return false; }

      static constexpr bool
      quiet_NaN() noexcept { return false; }

      static constexpr bool
      signaling_NaN() noexcept { return false; }

      static constexpr bool
      denorm_min() noexcept { return false; }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;




      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<char>
    {
      static constexpr bool is_specialized = true;

      static constexpr char
      min() noexcept { return (((char)(-1) < 0) ? -(((char)(-1) < 0) ? (((((char)1 << ((sizeof(char) * 8 - ((char)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char)0) - 1 : (char)0); }

      static constexpr char
      max() noexcept { return (((char)(-1) < 0) ? (((((char)1 << ((sizeof(char) * 8 - ((char)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char)0); }


      static constexpr char
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(char) * 8 - ((char)(-1) < 0));
      static constexpr int digits10 = ((sizeof(char) * 8 - ((char)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = ((char)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr char
      epsilon() noexcept { return 0; }

      static constexpr char
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr
      char infinity() noexcept { return char(); }

      static constexpr char
      quiet_NaN() noexcept { return char(); }

      static constexpr char
      signaling_NaN() noexcept { return char(); }

      static constexpr char
      denorm_min() noexcept { return static_cast<char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = !is_signed;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<signed char>
    {
      static constexpr bool is_specialized = true;

      static constexpr signed char
      min() noexcept { return -127 - 1; }

      static constexpr signed char
      max() noexcept { return 127; }


      static constexpr signed char
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(signed char) * 8 - ((signed char)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(signed char) * 8 - ((signed char)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr signed char
      epsilon() noexcept { return 0; }

      static constexpr signed char
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr signed char
      infinity() noexcept { return static_cast<signed char>(0); }

      static constexpr signed char
      quiet_NaN() noexcept { return static_cast<signed char>(0); }

      static constexpr signed char
      signaling_NaN() noexcept
      { return static_cast<signed char>(0); }

      static constexpr signed char
      denorm_min() noexcept
      { return static_cast<signed char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned char>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned char
      min() noexcept { return 0; }

      static constexpr unsigned char
      max() noexcept { return 127 * 2U + 1; }


      static constexpr unsigned char
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned char) * 8 - ((unsigned char)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned char) * 8 - ((unsigned char)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned char
      epsilon() noexcept { return 0; }

      static constexpr unsigned char
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned char
      infinity() noexcept
      { return static_cast<unsigned char>(0); }

      static constexpr unsigned char
      quiet_NaN() noexcept
      { return static_cast<unsigned char>(0); }

      static constexpr unsigned char
      signaling_NaN() noexcept
      { return static_cast<unsigned char>(0); }

      static constexpr unsigned char
      denorm_min() noexcept
      { return static_cast<unsigned char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<wchar_t>
    {
      static constexpr bool is_specialized = true;

      static constexpr wchar_t
      min() noexcept { return (((wchar_t)(-1) < 0) ? -(((wchar_t)(-1) < 0) ? (((((wchar_t)1 << ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(wchar_t)0) - 1 : (wchar_t)0); }

      static constexpr wchar_t
      max() noexcept { return (((wchar_t)(-1) < 0) ? (((((wchar_t)1 << ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(wchar_t)0); }


      static constexpr wchar_t
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = ((wchar_t)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr wchar_t
      epsilon() noexcept { return 0; }

      static constexpr wchar_t
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr wchar_t
      infinity() noexcept { return wchar_t(); }

      static constexpr wchar_t
      quiet_NaN() noexcept { return wchar_t(); }

      static constexpr wchar_t
      signaling_NaN() noexcept { return wchar_t(); }

      static constexpr wchar_t
      denorm_min() noexcept { return wchar_t(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = !is_signed;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };
# 796 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/limits" 3
  template<>
    struct numeric_limits<char16_t>
    {
      static constexpr bool is_specialized = true;

      static constexpr char16_t
      min() noexcept { return (((char16_t)(-1) < 0) ? -(((char16_t)(-1) < 0) ? (((((char16_t)1 << ((sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char16_t)0) - 1 : (char16_t)0); }

      static constexpr char16_t
      max() noexcept { return (((char16_t)(-1) < 0) ? (((((char16_t)1 << ((sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char16_t)0); }

      static constexpr char16_t
      lowest() noexcept { return min(); }

      static constexpr int digits = (sizeof(char16_t) * 8 - ((char16_t)(-1) < 0));
      static constexpr int digits10 = ((sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) * 643L / 2136);
      static constexpr int max_digits10 = 0;
      static constexpr bool is_signed = ((char16_t)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr char16_t
      epsilon() noexcept { return 0; }

      static constexpr char16_t
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr char16_t
      infinity() noexcept { return char16_t(); }

      static constexpr char16_t
      quiet_NaN() noexcept { return char16_t(); }

      static constexpr char16_t
      signaling_NaN() noexcept { return char16_t(); }

      static constexpr char16_t
      denorm_min() noexcept { return char16_t(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = !is_signed;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style = round_toward_zero;
    };


  template<>
    struct numeric_limits<char32_t>
    {
      static constexpr bool is_specialized = true;

      static constexpr char32_t
      min() noexcept { return (((char32_t)(-1) < 0) ? -(((char32_t)(-1) < 0) ? (((((char32_t)1 << ((sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char32_t)0) - 1 : (char32_t)0); }

      static constexpr char32_t
      max() noexcept { return (((char32_t)(-1) < 0) ? (((((char32_t)1 << ((sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char32_t)0); }

      static constexpr char32_t
      lowest() noexcept { return min(); }

      static constexpr int digits = (sizeof(char32_t) * 8 - ((char32_t)(-1) < 0));
      static constexpr int digits10 = ((sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) * 643L / 2136);
      static constexpr int max_digits10 = 0;
      static constexpr bool is_signed = ((char32_t)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr char32_t
      epsilon() noexcept { return 0; }

      static constexpr char32_t
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr char32_t
      infinity() noexcept { return char32_t(); }

      static constexpr char32_t
      quiet_NaN() noexcept { return char32_t(); }

      static constexpr char32_t
      signaling_NaN() noexcept { return char32_t(); }

      static constexpr char32_t
      denorm_min() noexcept { return char32_t(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = !is_signed;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style = round_toward_zero;
    };



  template<>
    struct numeric_limits<short>
    {
      static constexpr bool is_specialized = true;

      static constexpr short
      min() noexcept { return -32767 - 1; }

      static constexpr short
      max() noexcept { return 32767; }


      static constexpr short
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(short) * 8 - ((short)(-1) < 0));
      static constexpr int digits10 = ((sizeof(short) * 8 - ((short)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr short
      epsilon() noexcept { return 0; }

      static constexpr short
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr short
      infinity() noexcept { return short(); }

      static constexpr short
      quiet_NaN() noexcept { return short(); }

      static constexpr short
      signaling_NaN() noexcept { return short(); }

      static constexpr short
      denorm_min() noexcept { return short(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned short>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned short
      min() noexcept { return 0; }

      static constexpr unsigned short
      max() noexcept { return 32767 * 2U + 1; }


      static constexpr unsigned short
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned short) * 8 - ((unsigned short)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned short) * 8 - ((unsigned short)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned short
      epsilon() noexcept { return 0; }

      static constexpr unsigned short
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned short
      infinity() noexcept
      { return static_cast<unsigned short>(0); }

      static constexpr unsigned short
      quiet_NaN() noexcept
      { return static_cast<unsigned short>(0); }

      static constexpr unsigned short
      signaling_NaN() noexcept
      { return static_cast<unsigned short>(0); }

      static constexpr unsigned short
      denorm_min() noexcept
      { return static_cast<unsigned short>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<int>
    {
      static constexpr bool is_specialized = true;

      static constexpr int
      min() noexcept { return -2147483647 - 1; }

      static constexpr int
      max() noexcept { return 2147483647; }


      static constexpr int
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(int) * 8 - ((int)(-1) < 0));
      static constexpr int digits10 = ((sizeof(int) * 8 - ((int)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr int
      epsilon() noexcept { return 0; }

      static constexpr int
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr int
      infinity() noexcept { return static_cast<int>(0); }

      static constexpr int
      quiet_NaN() noexcept { return static_cast<int>(0); }

      static constexpr int
      signaling_NaN() noexcept { return static_cast<int>(0); }

      static constexpr int
      denorm_min() noexcept { return static_cast<int>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned int>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned int
      min() noexcept { return 0; }

      static constexpr unsigned int
      max() noexcept { return 2147483647 * 2U + 1; }


      static constexpr unsigned int
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned int) * 8 - ((unsigned int)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned int) * 8 - ((unsigned int)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned int
      epsilon() noexcept { return 0; }

      static constexpr unsigned int
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned int
      infinity() noexcept { return static_cast<unsigned int>(0); }

      static constexpr unsigned int
      quiet_NaN() noexcept
      { return static_cast<unsigned int>(0); }

      static constexpr unsigned int
      signaling_NaN() noexcept
      { return static_cast<unsigned int>(0); }

      static constexpr unsigned int
      denorm_min() noexcept
      { return static_cast<unsigned int>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<long>
    {
      static constexpr bool is_specialized = true;

      static constexpr long
      min() noexcept { return -2147483647L - 1; }

      static constexpr long
      max() noexcept { return 2147483647L; }


      static constexpr long
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(long) * 8 - ((long)(-1) < 0));
      static constexpr int digits10 = ((sizeof(long) * 8 - ((long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr long
      epsilon() noexcept { return 0; }

      static constexpr long
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr long
      infinity() noexcept { return static_cast<long>(0); }

      static constexpr long
      quiet_NaN() noexcept { return static_cast<long>(0); }

      static constexpr long
      signaling_NaN() noexcept { return static_cast<long>(0); }

      static constexpr long
      denorm_min() noexcept { return static_cast<long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned long>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned long
      min() noexcept { return 0; }

      static constexpr unsigned long
      max() noexcept { return 2147483647L * 2UL + 1; }


      static constexpr unsigned long
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned long) * 8 - ((unsigned long)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned long) * 8 - ((unsigned long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned long
      epsilon() noexcept { return 0; }

      static constexpr unsigned long
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned long
      infinity() noexcept
      { return static_cast<unsigned long>(0); }

      static constexpr unsigned long
      quiet_NaN() noexcept
      { return static_cast<unsigned long>(0); }

      static constexpr unsigned long
      signaling_NaN() noexcept
      { return static_cast<unsigned long>(0); }

      static constexpr unsigned long
      denorm_min() noexcept
      { return static_cast<unsigned long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<long long>
    {
      static constexpr bool is_specialized = true;

      static constexpr long long
      min() noexcept { return -9223372036854775807LL - 1; }

      static constexpr long long
      max() noexcept { return 9223372036854775807LL; }


      static constexpr long long
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(long long) * 8 - ((long long)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(long long) * 8 - ((long long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr long long
      epsilon() noexcept { return 0; }

      static constexpr long long
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr long long
      infinity() noexcept { return static_cast<long long>(0); }

      static constexpr long long
      quiet_NaN() noexcept { return static_cast<long long>(0); }

      static constexpr long long
      signaling_NaN() noexcept
      { return static_cast<long long>(0); }

      static constexpr long long
      denorm_min() noexcept { return static_cast<long long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned long long>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned long long
      min() noexcept { return 0; }

      static constexpr unsigned long long
      max() noexcept { return 9223372036854775807LL * 2ULL + 1; }


      static constexpr unsigned long long
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned long long) * 8 - ((unsigned long long)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned long long) * 8 - ((unsigned long long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned long long
      epsilon() noexcept { return 0; }

      static constexpr unsigned long long
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned long long
      infinity() noexcept
      { return static_cast<unsigned long long>(0); }

      static constexpr unsigned long long
      quiet_NaN() noexcept
      { return static_cast<unsigned long long>(0); }

      static constexpr unsigned long long
      signaling_NaN() noexcept
      { return static_cast<unsigned long long>(0); }

      static constexpr unsigned long long
      denorm_min() noexcept
      { return static_cast<unsigned long long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };
# 1636 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/limits" 3
  template<> struct numeric_limits<__int128> { static constexpr bool is_specialized = true; static constexpr __int128 min() noexcept { return (((__int128)(-1) < 0) ? -(((__int128)(-1) < 0) ? (((((__int128)1 << ((128 - ((__int128)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(__int128)0) - 1 : (__int128)0); } static constexpr __int128 max() noexcept { return (((__int128)(-1) < 0) ? (((((__int128)1 << ((128 - ((__int128)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(__int128)0); } static constexpr int digits = 128 - 1; static constexpr int digits10 = (128 - 1) * 643L / 2136; static constexpr bool is_signed = true; static constexpr bool is_integer = true; static constexpr bool is_exact = true; static constexpr int radix = 2; static constexpr __int128 epsilon() noexcept { return 0; } static constexpr __int128 round_error() noexcept { return 0; } static constexpr __int128 lowest() noexcept { return min(); } static constexpr int max_digits10 = 0; static constexpr int min_exponent = 0; static constexpr int min_exponent10 = 0; static constexpr int max_exponent = 0; static constexpr int max_exponent10 = 0; static constexpr bool has_infinity = false; static constexpr bool has_quiet_NaN = false; static constexpr bool has_signaling_NaN = false; static constexpr float_denorm_style has_denorm = denorm_absent; static constexpr bool has_denorm_loss = false; static constexpr __int128 infinity() noexcept { return static_cast<__int128>(0); } static constexpr __int128 quiet_NaN() noexcept { return static_cast<__int128>(0); } static constexpr __int128 signaling_NaN() noexcept { return static_cast<__int128>(0); } static constexpr __int128 denorm_min() noexcept { return static_cast<__int128>(0); } static constexpr bool is_iec559 = false; static constexpr bool is_bounded = true; static constexpr bool is_modulo = false; static constexpr bool traps = true; static constexpr bool tinyness_before = false; static constexpr float_round_style round_style = round_toward_zero; }; template<> struct numeric_limits<unsigned __int128> { static constexpr bool is_specialized = true; static constexpr unsigned __int128 min() noexcept { return 0; } static constexpr unsigned __int128 max() noexcept { return (((unsigned __int128)(-1) < 0) ? (((((unsigned __int128)1 << ((128 - ((unsigned __int128)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(unsigned __int128)0); } static constexpr unsigned __int128 lowest() noexcept { return min(); } static constexpr int max_digits10 = 0; static constexpr int digits = 128; static constexpr int digits10 = 128 * 643L / 2136; static constexpr bool is_signed = false; static constexpr bool is_integer = true; static constexpr bool is_exact = true; static constexpr int radix = 2; static constexpr unsigned __int128 epsilon() noexcept { return 0; } static constexpr unsigned __int128 round_error() noexcept { return 0; } static constexpr int min_exponent = 0; static constexpr int min_exponent10 = 0; static constexpr int max_exponent = 0; static constexpr int max_exponent10 = 0; static constexpr bool has_infinity = false; static constexpr bool has_quiet_NaN = false; static constexpr bool has_signaling_NaN = false; static constexpr float_denorm_style has_denorm = denorm_absent; static constexpr bool has_denorm_loss = false; static constexpr unsigned __int128 infinity() noexcept { return static_cast<unsigned __int128>(0); } static constexpr unsigned __int128 quiet_NaN() noexcept { return static_cast<unsigned __int128>(0); } static constexpr unsigned __int128 signaling_NaN() noexcept { return static_cast<unsigned __int128>(0); } static constexpr unsigned __int128 denorm_min() noexcept { return static_cast<unsigned __int128>(0); } static constexpr bool is_iec559 = false; static constexpr bool is_bounded = true; static constexpr bool is_modulo = true; static constexpr bool traps = true; static constexpr bool tinyness_before = false; static constexpr float_round_style round_style = round_toward_zero; };
# 1659 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/limits" 3
  template<>
    struct numeric_limits<float>
    {
      static constexpr bool is_specialized = true;

      static constexpr float
      min() noexcept { return 1.17549435e-38F; }

      static constexpr float
      max() noexcept { return 3.40282347e+38F; }


      static constexpr float
      lowest() noexcept { return -3.40282347e+38F; }


      static constexpr int digits = 24;
      static constexpr int digits10 = 6;

      static constexpr int max_digits10
  = (2 + (24) * 643L / 2136);

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr float
      epsilon() noexcept { return 1.19209290e-7F; }

      static constexpr float
      round_error() noexcept { return 0.5F; }

      static constexpr int min_exponent = (-125);
      static constexpr int min_exponent10 = (-37);
      static constexpr int max_exponent = 128;
      static constexpr int max_exponent10 = 38;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;
      static constexpr bool has_signaling_NaN = has_quiet_NaN;
      static constexpr float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static constexpr bool has_denorm_loss
       = false;

      static constexpr float
      infinity() noexcept { return __builtin_huge_valf(); }

      static constexpr float
      quiet_NaN() noexcept { return __builtin_nanf(""); }

      static constexpr float
      signaling_NaN() noexcept { return __builtin_nansf(""); }

      static constexpr float
      denorm_min() noexcept { return 1.40129846e-45F; }

      static constexpr bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before
       = false;
      static constexpr float_round_style round_style
       = round_to_nearest;
    };






  template<>
    struct numeric_limits<double>
    {
      static constexpr bool is_specialized = true;

      static constexpr double
      min() noexcept { return 2.2250738585072014e-308; }

      static constexpr double
      max() noexcept { return 1.7976931348623157e+308; }


      static constexpr double
      lowest() noexcept { return -1.7976931348623157e+308; }


      static constexpr int digits = 53;
      static constexpr int digits10 = 15;

      static constexpr int max_digits10
  = (2 + (53) * 643L / 2136);

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr double
      epsilon() noexcept { return 2.2204460492503131e-16; }

      static constexpr double
      round_error() noexcept { return 0.5; }

      static constexpr int min_exponent = (-1021);
      static constexpr int min_exponent10 = (-307);
      static constexpr int max_exponent = 1024;
      static constexpr int max_exponent10 = 308;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;
      static constexpr bool has_signaling_NaN = has_quiet_NaN;
      static constexpr float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static constexpr bool has_denorm_loss
        = false;

      static constexpr double
      infinity() noexcept { return __builtin_huge_val(); }

      static constexpr double
      quiet_NaN() noexcept { return __builtin_nan(""); }

      static constexpr double
      signaling_NaN() noexcept { return __builtin_nans(""); }

      static constexpr double
      denorm_min() noexcept { return 4.9406564584124654e-324; }

      static constexpr bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before
       = false;
      static constexpr float_round_style round_style
       = round_to_nearest;
    };






  template<>
    struct numeric_limits<long double>
    {
      static constexpr bool is_specialized = true;

      static constexpr long double
      min() noexcept { return 3.36210314311209350626e-4932L; }

      static constexpr long double
      max() noexcept { return 1.18973149535723176502e+4932L; }


      static constexpr long double
      lowest() noexcept { return -1.18973149535723176502e+4932L; }


      static constexpr int digits = 64;
      static constexpr int digits10 = 18;

      static constexpr int max_digits10
  = (2 + (64) * 643L / 2136);

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr long double
      epsilon() noexcept { return 1.08420217248550443401e-19L; }

      static constexpr long double
      round_error() noexcept { return 0.5L; }

      static constexpr int min_exponent = (-16381);
      static constexpr int min_exponent10 = (-4931);
      static constexpr int max_exponent = 16384;
      static constexpr int max_exponent10 = 4932;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;
      static constexpr bool has_signaling_NaN = has_quiet_NaN;
      static constexpr float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static constexpr bool has_denorm_loss
 = false;

      static constexpr long double
      infinity() noexcept { return __builtin_huge_vall(); }

      static constexpr long double
      quiet_NaN() noexcept { return __builtin_nanl(""); }

      static constexpr long double
      signaling_NaN() noexcept { return __builtin_nansl(""); }

      static constexpr long double
      denorm_min() noexcept { return 3.64519953188247460253e-4951L; }

      static constexpr bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before =
      false;
      static constexpr float_round_style round_style =
            round_to_nearest;
    };






}
# 16 "C:/Xilinx/Vitis/2024.2/include/etc/hls_half_fpo.h" 2


# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cstddef" 1 3
# 43 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cstddef" 3







# 1 "C:/Xilinx/Vitis/2024.2/vcxx/lib/clang/14.0.6/include/stddef.h" 1 3
# 51 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cstddef" 2 3

extern "C++"
{

namespace std
{

  using ::max_align_t;
}
# 197 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cstddef" 3
}
# 19 "C:/Xilinx/Vitis/2024.2/include/etc/hls_half_fpo.h" 2
# 1 "C:/Xilinx/Vitis/2024.2/include/hls_fpo.h" 1
# 11 "C:/Xilinx/Vitis/2024.2/include/hls_fpo.h"
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/math.h" 1 3
# 36 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/math.h" 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cmath" 1 3
# 40 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cmath" 3





# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/math.h" 1 3
# 11 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/math.h" 3




struct _exception;

#pragma pack(push,_CRT_PACKING)
# 77 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/math.h" 3
extern "C++" {
template <typename type1, typename type2> struct __mingw_types_compatible_p {
  static const bool result = false;
};

template <typename type1> struct __mingw_types_compatible_p<type1, type1> {
 static const bool result = true;
};

template <typename type1> struct __mingw_types_compatible_p<const type1, type1> {
  static const bool result = true;
};

template <typename type1> struct __mingw_types_compatible_p<type1, const type1> {
  static const bool result = true;
};
}
# 111 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/math.h" 3
extern "C" {







  typedef union __mingw_dbl_type_t {
    double x;
    unsigned long long val;
    __extension__ struct {
      unsigned int low, high;
    } lh;
  } __mingw_dbl_type_t;

  typedef union __mingw_flt_type_t {
    float x;
    unsigned int val;
  } __mingw_flt_type_t;

  typedef union __mingw_ldbl_type_t
  {
    long double x;
    __extension__ struct {
      unsigned int low, high;
      int sign_exponent : 16;
      int res1 : 16;
      int res0 : 32;
    } lh;
  } __mingw_ldbl_type_t;
# 150 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/math.h" 3
  extern double * __imp__HUGE;
# 163 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/math.h" 3
  struct _exception {
    int type;
    const char *name;
    double arg1;
    double arg2;
    double retval;
  };

  void __mingw_raise_matherr (int typ, const char *name, double a1, double a2,
         double rslt);
  void __mingw_setusermatherr (int (__attribute__((__cdecl__)) *)(struct _exception *));
  __attribute__ ((__dllimport__)) void __setusermatherr(int (__attribute__((__cdecl__)) *)(struct _exception *));



  double __attribute__((__cdecl__)) sin(double _X);
  double __attribute__((__cdecl__)) cos(double _X);
  double __attribute__((__cdecl__)) tan(double _X);
  double __attribute__((__cdecl__)) sinh(double _X);
  double __attribute__((__cdecl__)) cosh(double _X);
  double __attribute__((__cdecl__)) tanh(double _X);
  double __attribute__((__cdecl__)) asin(double _X);
  double __attribute__((__cdecl__)) acos(double _X);
  double __attribute__((__cdecl__)) atan(double _X);
  double __attribute__((__cdecl__)) atan2(double _Y,double _X);
  double __attribute__((__cdecl__)) exp(double _X);
  double __attribute__((__cdecl__)) log(double _X);
  double __attribute__((__cdecl__)) log10(double _X);
  double __attribute__((__cdecl__)) pow(double _X,double _Y);
  double __attribute__((__cdecl__)) sqrt(double _X);
  double __attribute__((__cdecl__)) ceil(double _X);
  double __attribute__((__cdecl__)) floor(double _X);


  extern float __attribute__((__cdecl__)) fabsf (float x);
  extern long double __attribute__((__cdecl__)) fabsl (long double);
  extern double __attribute__((__cdecl__)) fabs (double _X);
# 238 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/math.h" 3
  double __attribute__((__cdecl__)) ldexp(double _X,int _Y);
  double __attribute__((__cdecl__)) frexp(double _X,int *_Y);
  double __attribute__((__cdecl__)) modf(double _X,double *_Y);
  double __attribute__((__cdecl__)) fmod(double _X,double _Y);

  void __attribute__((__cdecl__)) sincos (double __x, double *p_sin, double *p_cos);
  void __attribute__((__cdecl__)) sincosl (long double __x, long double *p_sin, long double *p_cos);
  void __attribute__((__cdecl__)) sincosf (float __x, float *p_sin, float *p_cos);
# 265 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/math.h" 3
  struct _complex {
    double x;
    double y;
  };


  double __attribute__((__cdecl__)) _cabs(struct _complex _ComplexA);
  double __attribute__((__cdecl__)) _hypot(double _X,double _Y);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _j0(double _X);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _j1(double _X);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _jn(int _X,double _Y);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _y0(double _X);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _y1(double _X);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _yn(int _X,double _Y);


  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _matherr (struct _exception *);
# 292 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/math.h" 3
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _chgsign (double _X);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _copysign (double _Number,double _Sign);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _logb (double);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _nextafter (double, double);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _scalb (double, long);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _finite (double);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fpclass (double);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isnan (double);






__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) j0 (double) ;
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) j1 (double) ;
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) jn (int, double) ;
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) y0 (double) ;
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) y1 (double) ;
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) yn (int, double) ;

__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) chgsign (double);
# 322 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/math.h" 3
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) finite (double);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) fpclass (double);
# 367 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/math.h" 3
typedef float float_t;
typedef double double_t;
# 402 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/math.h" 3
  extern int __attribute__((__cdecl__)) __fpclassifyl (long double);
  extern int __attribute__((__cdecl__)) __fpclassifyf (float);
  extern int __attribute__((__cdecl__)) __fpclassify (double);
# 515 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/math.h" 3
  extern int __attribute__((__cdecl__)) __isnan (double);
  extern int __attribute__((__cdecl__)) __isnanf (float);
  extern int __attribute__((__cdecl__)) __isnanl (long double);
# 602 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/math.h" 3
  extern int __attribute__((__cdecl__)) __signbit (double);
  extern int __attribute__((__cdecl__)) __signbitf (float);
  extern int __attribute__((__cdecl__)) __signbitl (long double);
# 659 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/math.h" 3
  extern float __attribute__((__cdecl__)) sinf(float _X);
  extern long double __attribute__((__cdecl__)) sinl(long double);

  extern float __attribute__((__cdecl__)) cosf(float _X);
  extern long double __attribute__((__cdecl__)) cosl(long double);

  extern float __attribute__((__cdecl__)) tanf(float _X);
  extern long double __attribute__((__cdecl__)) tanl(long double);
  extern float __attribute__((__cdecl__)) asinf(float _X);
  extern long double __attribute__((__cdecl__)) asinl(long double);

  extern float __attribute__((__cdecl__)) acosf (float);
  extern long double __attribute__((__cdecl__)) acosl (long double);

  extern float __attribute__((__cdecl__)) atanf (float);
  extern long double __attribute__((__cdecl__)) atanl (long double);

  extern float __attribute__((__cdecl__)) atan2f (float, float);
  extern long double __attribute__((__cdecl__)) atan2l (long double, long double);


  extern float __attribute__((__cdecl__)) sinhf(float _X);



  extern long double __attribute__((__cdecl__)) sinhl(long double);

  extern float __attribute__((__cdecl__)) coshf(float _X);



  extern long double __attribute__((__cdecl__)) coshl(long double);

  extern float __attribute__((__cdecl__)) tanhf(float _X);



  extern long double __attribute__((__cdecl__)) tanhl(long double);



  extern double __attribute__((__cdecl__)) acosh (double);
  extern float __attribute__((__cdecl__)) acoshf (float);
  extern long double __attribute__((__cdecl__)) acoshl (long double);


  extern double __attribute__((__cdecl__)) asinh (double);
  extern float __attribute__((__cdecl__)) asinhf (float);
  extern long double __attribute__((__cdecl__)) asinhl (long double);


  extern double __attribute__((__cdecl__)) atanh (double);
  extern float __attribute__((__cdecl__)) atanhf (float);
  extern long double __attribute__((__cdecl__)) atanhl (long double);



  extern float __attribute__((__cdecl__)) expf(float _X);



  extern long double __attribute__((__cdecl__)) expl(long double);


  extern double __attribute__((__cdecl__)) exp2(double);
  extern float __attribute__((__cdecl__)) exp2f(float);
  extern long double __attribute__((__cdecl__)) exp2l(long double);



  extern double __attribute__((__cdecl__)) expm1(double);
  extern float __attribute__((__cdecl__)) expm1f(float);
  extern long double __attribute__((__cdecl__)) expm1l(long double);


  extern float frexpf(float _X,int *_Y);



  extern long double __attribute__((__cdecl__)) frexpl(long double,int *);




  extern int __attribute__((__cdecl__)) ilogb (double);
  extern int __attribute__((__cdecl__)) ilogbf (float);
  extern int __attribute__((__cdecl__)) ilogbl (long double);


  extern float __attribute__((__cdecl__)) ldexpf(float _X,int _Y);



  extern long double __attribute__((__cdecl__)) ldexpl (long double, int);


  extern float __attribute__((__cdecl__)) logf (float);
  extern long double __attribute__((__cdecl__)) logl(long double);


  extern float __attribute__((__cdecl__)) log10f (float);
  extern long double __attribute__((__cdecl__)) log10l(long double);


  extern double __attribute__((__cdecl__)) log1p(double);
  extern float __attribute__((__cdecl__)) log1pf(float);
  extern long double __attribute__((__cdecl__)) log1pl(long double);


  extern double __attribute__((__cdecl__)) log2 (double);
  extern float __attribute__((__cdecl__)) log2f (float);
  extern long double __attribute__((__cdecl__)) log2l (long double);


  extern double __attribute__((__cdecl__)) logb (double);
  extern float __attribute__((__cdecl__)) logbf (float);
  extern long double __attribute__((__cdecl__)) logbl (long double);
# 862 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/math.h" 3
  extern float __attribute__((__cdecl__)) modff (float, float*);
  extern long double __attribute__((__cdecl__)) modfl (long double, long double*);


  extern double __attribute__((__cdecl__)) scalbn (double, int);
  extern float __attribute__((__cdecl__)) scalbnf (float, int);
  extern long double __attribute__((__cdecl__)) scalbnl (long double, int);

  extern double __attribute__((__cdecl__)) scalbln (double, long);
  extern float __attribute__((__cdecl__)) scalblnf (float, long);
  extern long double __attribute__((__cdecl__)) scalblnl (long double, long);



  extern double __attribute__((__cdecl__)) cbrt (double);
  extern float __attribute__((__cdecl__)) cbrtf (float);
  extern long double __attribute__((__cdecl__)) cbrtl (long double);


  extern double __attribute__((__cdecl__)) hypot (double, double) ;
  extern float __attribute__((__cdecl__)) hypotf (float x, float y);



  extern long double __attribute__((__cdecl__)) hypotl (long double, long double);


  extern float __attribute__((__cdecl__)) powf(float _X,float _Y);



  extern long double __attribute__((__cdecl__)) powl (long double, long double);


  extern float __attribute__((__cdecl__)) sqrtf (float);
  extern long double sqrtl(long double);


  extern double __attribute__((__cdecl__)) erf (double);
  extern float __attribute__((__cdecl__)) erff (float);
  extern long double __attribute__((__cdecl__)) erfl (long double);


  extern double __attribute__((__cdecl__)) erfc (double);
  extern float __attribute__((__cdecl__)) erfcf (float);
  extern long double __attribute__((__cdecl__)) erfcl (long double);


  extern double __attribute__((__cdecl__)) lgamma (double);
  extern float __attribute__((__cdecl__)) lgammaf (float);
  extern long double __attribute__((__cdecl__)) lgammal (long double);

  extern int signgam;


  extern double __attribute__((__cdecl__)) tgamma (double);
  extern float __attribute__((__cdecl__)) tgammaf (float);
  extern long double __attribute__((__cdecl__)) tgammal (long double);


  extern float __attribute__((__cdecl__)) ceilf (float);
  extern long double __attribute__((__cdecl__)) ceill (long double);


  extern float __attribute__((__cdecl__)) floorf (float);
  extern long double __attribute__((__cdecl__)) floorl (long double);


  extern double __attribute__((__cdecl__)) nearbyint ( double);
  extern float __attribute__((__cdecl__)) nearbyintf (float);
  extern long double __attribute__((__cdecl__)) nearbyintl (long double);



extern double __attribute__((__cdecl__)) rint (double);
extern float __attribute__((__cdecl__)) rintf (float);
extern long double __attribute__((__cdecl__)) rintl (long double);


extern long __attribute__((__cdecl__)) lrint (double);
extern long __attribute__((__cdecl__)) lrintf (float);
extern long __attribute__((__cdecl__)) lrintl (long double);

__extension__ long long __attribute__((__cdecl__)) llrint (double);
__extension__ long long __attribute__((__cdecl__)) llrintf (float);
__extension__ long long __attribute__((__cdecl__)) llrintl (long double);
# 1029 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/math.h" 3
  extern double __attribute__((__cdecl__)) round (double);
  extern float __attribute__((__cdecl__)) roundf (float);
  extern long double __attribute__((__cdecl__)) roundl (long double);


  extern long __attribute__((__cdecl__)) lround (double);
  extern long __attribute__((__cdecl__)) lroundf (float);
  extern long __attribute__((__cdecl__)) lroundl (long double);
  __extension__ long long __attribute__((__cdecl__)) llround (double);
  __extension__ long long __attribute__((__cdecl__)) llroundf (float);
  __extension__ long long __attribute__((__cdecl__)) llroundl (long double);



  extern double __attribute__((__cdecl__)) trunc (double);
  extern float __attribute__((__cdecl__)) truncf (float);
  extern long double __attribute__((__cdecl__)) truncl (long double);


  extern float __attribute__((__cdecl__)) fmodf (float, float);
  extern long double __attribute__((__cdecl__)) fmodl (long double, long double);


  extern double __attribute__((__cdecl__)) remainder (double, double);
  extern float __attribute__((__cdecl__)) remainderf (float, float);
  extern long double __attribute__((__cdecl__)) remainderl (long double, long double);


  extern double __attribute__((__cdecl__)) remquo(double, double, int *);
  extern float __attribute__((__cdecl__)) remquof(float, float, int *);
  extern long double __attribute__((__cdecl__)) remquol(long double, long double, int *);


  extern double __attribute__((__cdecl__)) copysign (double, double);
  extern float __attribute__((__cdecl__)) copysignf (float, float);
  extern long double __attribute__((__cdecl__)) copysignl (long double, long double);
# 1086 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/math.h" 3
  extern double __attribute__((__cdecl__)) nan(const char *tagp);
  extern float __attribute__((__cdecl__)) nanf(const char *tagp);
  extern long double __attribute__((__cdecl__)) nanl(const char *tagp);
# 1097 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/math.h" 3
  extern double __attribute__((__cdecl__)) nextafter (double, double);
  extern float __attribute__((__cdecl__)) nextafterf (float, float);
  extern long double __attribute__((__cdecl__)) nextafterl (long double, long double);


  extern double __attribute__((__cdecl__)) nexttoward (double, long double);
  extern float __attribute__((__cdecl__)) nexttowardf (float, long double);
  extern long double __attribute__((__cdecl__)) nexttowardl (long double, long double);



  extern double __attribute__((__cdecl__)) fdim (double x, double y);
  extern float __attribute__((__cdecl__)) fdimf (float x, float y);
  extern long double __attribute__((__cdecl__)) fdiml (long double x, long double y);







  extern double __attribute__((__cdecl__)) fmax (double, double);
  extern float __attribute__((__cdecl__)) fmaxf (float, float);
  extern long double __attribute__((__cdecl__)) fmaxl (long double, long double);


  extern double __attribute__((__cdecl__)) fmin (double, double);
  extern float __attribute__((__cdecl__)) fminf (float, float);
  extern long double __attribute__((__cdecl__)) fminl (long double, long double);



  extern double __attribute__((__cdecl__)) fma (double, double, double);
  extern float __attribute__((__cdecl__)) fmaf (float, float, float);
  extern long double __attribute__((__cdecl__)) fmal (long double, long double, long double);
# 1180 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/math.h" 3
   __attribute__ ((__dllimport__)) float __attribute__((__cdecl__)) _copysignf (float _Number,float _Sign);
   __attribute__ ((__dllimport__)) float __attribute__((__cdecl__)) _chgsignf (float _X);
   __attribute__ ((__dllimport__)) float __attribute__((__cdecl__)) _logbf(float _X);
   __attribute__ ((__dllimport__)) float __attribute__((__cdecl__)) _nextafterf(float _X,float _Y);
   __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _finitef(float _X);
   __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isnanf(float _X);
   __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fpclassf(float _X);



   extern long double __attribute__((__cdecl__)) _chgsignl (long double);
# 1575 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/math.h" 3
}




#pragma pack(pop)
# 46 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cmath" 2 3
# 77 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cmath" 3
extern "C++"
{
namespace std
{


  using ::acos;


  inline constexpr float
  acos(float __x)
  { return __builtin_acosf(__x); }

  inline constexpr long double
  acos(long double __x)
  { return __builtin_acosl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    acos(_Tp __x)
    { return __builtin_acos(__x); }

  using ::asin;


  inline constexpr float
  asin(float __x)
  { return __builtin_asinf(__x); }

  inline constexpr long double
  asin(long double __x)
  { return __builtin_asinl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    asin(_Tp __x)
    { return __builtin_asin(__x); }

  using ::atan;


  inline constexpr float
  atan(float __x)
  { return __builtin_atanf(__x); }

  inline constexpr long double
  atan(long double __x)
  { return __builtin_atanl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    atan(_Tp __x)
    { return __builtin_atan(__x); }

  using ::atan2;


  inline constexpr float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }

  inline constexpr long double
  atan2(long double __y, long double __x)
  { return __builtin_atan2l(__y, __x); }


  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    atan2(_Tp __y, _Up __x)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return atan2(__type(__y), __type(__x));
    }

  using ::ceil;


  inline constexpr float
  ceil(float __x)
  { return __builtin_ceilf(__x); }

  inline constexpr long double
  ceil(long double __x)
  { return __builtin_ceill(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ceil(_Tp __x)
    { return __builtin_ceil(__x); }

  using ::cos;


  inline constexpr float
  cos(float __x)
  { return __builtin_cosf(__x); }

  inline constexpr long double
  cos(long double __x)
  { return __builtin_cosl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cos(_Tp __x)
    { return __builtin_cos(__x); }

  using ::cosh;


  inline constexpr float
  cosh(float __x)
  { return __builtin_coshf(__x); }

  inline constexpr long double
  cosh(long double __x)
  { return __builtin_coshl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cosh(_Tp __x)
    { return __builtin_cosh(__x); }

  using ::exp;


  inline constexpr float
  exp(float __x)
  { return __builtin_expf(__x); }

  inline constexpr long double
  exp(long double __x)
  { return __builtin_expl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    exp(_Tp __x)
    { return __builtin_exp(__x); }

  using ::fabs;


  inline constexpr float
  fabs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  fabs(long double __x)
  { return __builtin_fabsl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    fabs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::floor;


  inline constexpr float
  floor(float __x)
  { return __builtin_floorf(__x); }

  inline constexpr long double
  floor(long double __x)
  { return __builtin_floorl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    floor(_Tp __x)
    { return __builtin_floor(__x); }

  using ::fmod;


  inline constexpr float
  fmod(float __x, float __y)
  { return __builtin_fmodf(__x, __y); }

  inline constexpr long double
  fmod(long double __x, long double __y)
  { return __builtin_fmodl(__x, __y); }


  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmod(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmod(__type(__x), __type(__y));
    }

  using ::frexp;


  inline float
  frexp(float __x, int* __exp)
  { return __builtin_frexpf(__x, __exp); }

  inline long double
  frexp(long double __x, int* __exp)
  { return __builtin_frexpl(__x, __exp); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    frexp(_Tp __x, int* __exp)
    { return __builtin_frexp(__x, __exp); }

  using ::ldexp;


  inline constexpr float
  ldexp(float __x, int __exp)
  { return __builtin_ldexpf(__x, __exp); }

  inline constexpr long double
  ldexp(long double __x, int __exp)
  { return __builtin_ldexpl(__x, __exp); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ldexp(_Tp __x, int __exp)
    { return __builtin_ldexp(__x, __exp); }

  using ::log;


  inline constexpr float
  log(float __x)
  { return __builtin_logf(__x); }

  inline constexpr long double
  log(long double __x)
  { return __builtin_logl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log(_Tp __x)
    { return __builtin_log(__x); }

  using ::log10;


  inline constexpr float
  log10(float __x)
  { return __builtin_log10f(__x); }

  inline constexpr long double
  log10(long double __x)
  { return __builtin_log10l(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log10(_Tp __x)
    { return __builtin_log10(__x); }

  using ::modf;


  inline float
  modf(float __x, float* __iptr)
  { return __builtin_modff(__x, __iptr); }

  inline long double
  modf(long double __x, long double* __iptr)
  { return __builtin_modfl(__x, __iptr); }


  using ::pow;


  inline constexpr float
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }

  inline constexpr long double
  pow(long double __x, long double __y)
  { return __builtin_powl(__x, __y); }
# 412 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cmath" 3
  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    }

  using ::sin;


  inline constexpr float
  sin(float __x)
  { return __builtin_sinf(__x); }

  inline constexpr long double
  sin(long double __x)
  { return __builtin_sinl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sin(_Tp __x)
    { return __builtin_sin(__x); }

  using ::sinh;


  inline constexpr float
  sinh(float __x)
  { return __builtin_sinhf(__x); }

  inline constexpr long double
  sinh(long double __x)
  { return __builtin_sinhl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sinh(_Tp __x)
    { return __builtin_sinh(__x); }

  using ::sqrt;


  inline constexpr float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }

  inline constexpr long double
  sqrt(long double __x)
  { return __builtin_sqrtl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sqrt(_Tp __x)
    { return __builtin_sqrt(__x); }

  using ::tan;


  inline constexpr float
  tan(float __x)
  { return __builtin_tanf(__x); }

  inline constexpr long double
  tan(long double __x)
  { return __builtin_tanl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tan(_Tp __x)
    { return __builtin_tan(__x); }

  using ::tanh;


  inline constexpr float
  tanh(float __x)
  { return __builtin_tanhf(__x); }

  inline constexpr long double
  tanh(long double __x)
  { return __builtin_tanhl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tanh(_Tp __x)
    { return __builtin_tanh(__x); }
# 536 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cmath" 3
  constexpr int
  fpclassify(float __x)
  { return __builtin_fpclassify(0x0100, (0x0100 | 0x0400), 0x0400,
    (0x0400 | 0x4000), 0x4000, __x); }

  constexpr int
  fpclassify(double __x)
  { return __builtin_fpclassify(0x0100, (0x0100 | 0x0400), 0x0400,
    (0x0400 | 0x4000), 0x4000, __x); }

  constexpr int
  fpclassify(long double __x)
  { return __builtin_fpclassify(0x0100, (0x0100 | 0x0400), 0x0400,
    (0x0400 | 0x4000), 0x4000, __x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              int>::__type
    fpclassify(_Tp __x)
    { return __x != 0 ? 0x0400 : 0x4000; }



  constexpr bool
  isfinite(float __x)
  { return __builtin_isfinite(__x); }

  constexpr bool
  isfinite(double __x)
  { return __builtin_isfinite(__x); }

  constexpr bool
  isfinite(long double __x)
  { return __builtin_isfinite(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isfinite(_Tp __x)
    { return true; }



  constexpr bool
  isinf(float __x)
  { return __builtin_isinf(__x); }





  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }


  constexpr bool
  isinf(long double __x)
  { return __builtin_isinf(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isinf(_Tp __x)
    { return false; }



  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }





  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }


  constexpr bool
  isnan(long double __x)
  { return __builtin_isnan(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isnan(_Tp __x)
    { return false; }



  constexpr bool
  isnormal(float __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(double __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(long double __x)
  { return __builtin_isnormal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isnormal(_Tp __x)
    { return __x != 0 ? true : false; }




  constexpr bool
  signbit(float __x)
  { return __builtin_signbit(__x); }

  constexpr bool
  signbit(double __x)
  { return __builtin_signbit(__x); }

  constexpr bool
  signbit(long double __x)
  { return __builtin_signbit(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    signbit(_Tp __x)
    { return __x < 0 ? true : false; }



  constexpr bool
  isgreater(float __x, float __y)
  { return __builtin_isgreater(__x, __y); }

  constexpr bool
  isgreater(double __x, double __y)
  { return __builtin_isgreater(__x, __y); }

  constexpr bool
  isgreater(long double __x, long double __y)
  { return __builtin_isgreater(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreater(__type(__x), __type(__y));
    }



  constexpr bool
  isgreaterequal(float __x, float __y)
  { return __builtin_isgreaterequal(__x, __y); }

  constexpr bool
  isgreaterequal(double __x, double __y)
  { return __builtin_isgreaterequal(__x, __y); }

  constexpr bool
  isgreaterequal(long double __x, long double __y)
  { return __builtin_isgreaterequal(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreaterequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreaterequal(__type(__x), __type(__y));
    }



  constexpr bool
  isless(float __x, float __y)
  { return __builtin_isless(__x, __y); }

  constexpr bool
  isless(double __x, double __y)
  { return __builtin_isless(__x, __y); }

  constexpr bool
  isless(long double __x, long double __y)
  { return __builtin_isless(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isless(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isless(__type(__x), __type(__y));
    }



  constexpr bool
  islessequal(float __x, float __y)
  { return __builtin_islessequal(__x, __y); }

  constexpr bool
  islessequal(double __x, double __y)
  { return __builtin_islessequal(__x, __y); }

  constexpr bool
  islessequal(long double __x, long double __y)
  { return __builtin_islessequal(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessequal(__type(__x), __type(__y));
    }



  constexpr bool
  islessgreater(float __x, float __y)
  { return __builtin_islessgreater(__x, __y); }

  constexpr bool
  islessgreater(double __x, double __y)
  { return __builtin_islessgreater(__x, __y); }

  constexpr bool
  islessgreater(long double __x, long double __y)
  { return __builtin_islessgreater(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessgreater(__type(__x), __type(__y));
    }



  constexpr bool
  isunordered(float __x, float __y)
  { return __builtin_isunordered(__x, __y); }

  constexpr bool
  isunordered(double __x, double __y)
  { return __builtin_isunordered(__x, __y); }

  constexpr bool
  isunordered(long double __x, long double __y)
  { return __builtin_isunordered(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isunordered(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isunordered(__type(__x), __type(__y));
    }
# 1065 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cmath" 3
  using ::double_t;
  using ::float_t;


  using ::acosh;
  using ::acoshf;
  using ::acoshl;

  using ::asinh;
  using ::asinhf;
  using ::asinhl;

  using ::atanh;
  using ::atanhf;
  using ::atanhl;

  using ::cbrt;
  using ::cbrtf;
  using ::cbrtl;

  using ::copysign;
  using ::copysignf;
  using ::copysignl;

  using ::erf;
  using ::erff;
  using ::erfl;

  using ::erfc;
  using ::erfcf;
  using ::erfcl;

  using ::exp2;
  using ::exp2f;
  using ::exp2l;

  using ::expm1;
  using ::expm1f;
  using ::expm1l;

  using ::fdim;
  using ::fdimf;
  using ::fdiml;

  using ::fma;
  using ::fmaf;
  using ::fmal;

  using ::fmax;
  using ::fmaxf;
  using ::fmaxl;

  using ::fmin;
  using ::fminf;
  using ::fminl;

  using ::hypot;
  using ::hypotf;
  using ::hypotl;

  using ::ilogb;
  using ::ilogbf;
  using ::ilogbl;

  using ::lgamma;
  using ::lgammaf;
  using ::lgammal;


  using ::llrint;
  using ::llrintf;
  using ::llrintl;

  using ::llround;
  using ::llroundf;
  using ::llroundl;


  using ::log1p;
  using ::log1pf;
  using ::log1pl;

  using ::log2;
  using ::log2f;
  using ::log2l;

  using ::logb;
  using ::logbf;
  using ::logbl;

  using ::lrint;
  using ::lrintf;
  using ::lrintl;

  using ::lround;
  using ::lroundf;
  using ::lroundl;

  using ::nan;
  using ::nanf;
  using ::nanl;

  using ::nearbyint;
  using ::nearbyintf;
  using ::nearbyintl;

  using ::nextafter;
  using ::nextafterf;
  using ::nextafterl;

  using ::nexttoward;
  using ::nexttowardf;
  using ::nexttowardl;

  using ::remainder;
  using ::remainderf;
  using ::remainderl;

  using ::remquo;
  using ::remquof;
  using ::remquol;

  using ::rint;
  using ::rintf;
  using ::rintl;

  using ::round;
  using ::roundf;
  using ::roundl;

  using ::scalbln;
  using ::scalblnf;
  using ::scalblnl;

  using ::scalbn;
  using ::scalbnf;
  using ::scalbnl;

  using ::tgamma;
  using ::tgammaf;
  using ::tgammal;

  using ::trunc;
  using ::truncf;
  using ::truncl;



  constexpr float
  acosh(float __x)
  { return __builtin_acoshf(__x); }

  constexpr long double
  acosh(long double __x)
  { return __builtin_acoshl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    acosh(_Tp __x)
    { return __builtin_acosh(__x); }



  constexpr float
  asinh(float __x)
  { return __builtin_asinhf(__x); }

  constexpr long double
  asinh(long double __x)
  { return __builtin_asinhl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    asinh(_Tp __x)
    { return __builtin_asinh(__x); }



  constexpr float
  atanh(float __x)
  { return __builtin_atanhf(__x); }

  constexpr long double
  atanh(long double __x)
  { return __builtin_atanhl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    atanh(_Tp __x)
    { return __builtin_atanh(__x); }



  constexpr float
  cbrt(float __x)
  { return __builtin_cbrtf(__x); }

  constexpr long double
  cbrt(long double __x)
  { return __builtin_cbrtl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    cbrt(_Tp __x)
    { return __builtin_cbrt(__x); }



  constexpr float
  copysign(float __x, float __y)
  { return __builtin_copysignf(__x, __y); }

  constexpr long double
  copysign(long double __x, long double __y)
  { return __builtin_copysignl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    copysign(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return copysign(__type(__x), __type(__y));
    }



  constexpr float
  erf(float __x)
  { return __builtin_erff(__x); }

  constexpr long double
  erf(long double __x)
  { return __builtin_erfl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    erf(_Tp __x)
    { return __builtin_erf(__x); }



  constexpr float
  erfc(float __x)
  { return __builtin_erfcf(__x); }

  constexpr long double
  erfc(long double __x)
  { return __builtin_erfcl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    erfc(_Tp __x)
    { return __builtin_erfc(__x); }



  constexpr float
  exp2(float __x)
  { return __builtin_exp2f(__x); }

  constexpr long double
  exp2(long double __x)
  { return __builtin_exp2l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    exp2(_Tp __x)
    { return __builtin_exp2(__x); }



  constexpr float
  expm1(float __x)
  { return __builtin_expm1f(__x); }

  constexpr long double
  expm1(long double __x)
  { return __builtin_expm1l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    expm1(_Tp __x)
    { return __builtin_expm1(__x); }



  constexpr float
  fdim(float __x, float __y)
  { return __builtin_fdimf(__x, __y); }

  constexpr long double
  fdim(long double __x, long double __y)
  { return __builtin_fdiml(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fdim(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fdim(__type(__x), __type(__y));
    }



  constexpr float
  fma(float __x, float __y, float __z)
  { return __builtin_fmaf(__x, __y, __z); }

  constexpr long double
  fma(long double __x, long double __y, long double __z)
  { return __builtin_fmal(__x, __y, __z); }



  template<typename _Tp, typename _Up, typename _Vp>
    constexpr typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type
    fma(_Tp __x, _Up __y, _Vp __z)
    {
      typedef typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type __type;
      return fma(__type(__x), __type(__y), __type(__z));
    }



  constexpr float
  fmax(float __x, float __y)
  { return __builtin_fmaxf(__x, __y); }

  constexpr long double
  fmax(long double __x, long double __y)
  { return __builtin_fmaxl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmax(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmax(__type(__x), __type(__y));
    }



  constexpr float
  fmin(float __x, float __y)
  { return __builtin_fminf(__x, __y); }

  constexpr long double
  fmin(long double __x, long double __y)
  { return __builtin_fminl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmin(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmin(__type(__x), __type(__y));
    }



  constexpr float
  hypot(float __x, float __y)
  { return __builtin_hypotf(__x, __y); }

  constexpr long double
  hypot(long double __x, long double __y)
  { return __builtin_hypotl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    hypot(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return hypot(__type(__x), __type(__y));
    }



  constexpr int
  ilogb(float __x)
  { return __builtin_ilogbf(__x); }

  constexpr int
  ilogb(long double __x)
  { return __builtin_ilogbl(__x); }



  template<typename _Tp>
    constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    int>::__type
    ilogb(_Tp __x)
    { return __builtin_ilogb(__x); }



  constexpr float
  lgamma(float __x)
  { return __builtin_lgammaf(__x); }

  constexpr long double
  lgamma(long double __x)
  { return __builtin_lgammal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    lgamma(_Tp __x)
    { return __builtin_lgamma(__x); }



  constexpr long long
  llrint(float __x)
  { return __builtin_llrintf(__x); }

  constexpr long long
  llrint(long double __x)
  { return __builtin_llrintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long long>::__type
    llrint(_Tp __x)
    { return __builtin_llrint(__x); }



  constexpr long long
  llround(float __x)
  { return __builtin_llroundf(__x); }

  constexpr long long
  llround(long double __x)
  { return __builtin_llroundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long long>::__type
    llround(_Tp __x)
    { return __builtin_llround(__x); }



  constexpr float
  log1p(float __x)
  { return __builtin_log1pf(__x); }

  constexpr long double
  log1p(long double __x)
  { return __builtin_log1pl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    log1p(_Tp __x)
    { return __builtin_log1p(__x); }




  constexpr float
  log2(float __x)
  { return __builtin_log2f(__x); }

  constexpr long double
  log2(long double __x)
  { return __builtin_log2l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    log2(_Tp __x)
    { return __builtin_log2(__x); }



  constexpr float
  logb(float __x)
  { return __builtin_logbf(__x); }

  constexpr long double
  logb(long double __x)
  { return __builtin_logbl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    logb(_Tp __x)
    { return __builtin_logb(__x); }



  constexpr long
  lrint(float __x)
  { return __builtin_lrintf(__x); }

  constexpr long
  lrint(long double __x)
  { return __builtin_lrintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long>::__type
    lrint(_Tp __x)
    { return __builtin_lrint(__x); }



  constexpr long
  lround(float __x)
  { return __builtin_lroundf(__x); }

  constexpr long
  lround(long double __x)
  { return __builtin_lroundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long>::__type
    lround(_Tp __x)
    { return __builtin_lround(__x); }



  constexpr float
  nearbyint(float __x)
  { return __builtin_nearbyintf(__x); }

  constexpr long double
  nearbyint(long double __x)
  { return __builtin_nearbyintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    nearbyint(_Tp __x)
    { return __builtin_nearbyint(__x); }



  constexpr float
  nextafter(float __x, float __y)
  { return __builtin_nextafterf(__x, __y); }

  constexpr long double
  nextafter(long double __x, long double __y)
  { return __builtin_nextafterl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    nextafter(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return nextafter(__type(__x), __type(__y));
    }



  constexpr float
  nexttoward(float __x, long double __y)
  { return __builtin_nexttowardf(__x, __y); }

  constexpr long double
  nexttoward(long double __x, long double __y)
  { return __builtin_nexttowardl(__x, __y); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    nexttoward(_Tp __x, long double __y)
    { return __builtin_nexttoward(__x, __y); }



  constexpr float
  remainder(float __x, float __y)
  { return __builtin_remainderf(__x, __y); }

  constexpr long double
  remainder(long double __x, long double __y)
  { return __builtin_remainderl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remainder(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remainder(__type(__x), __type(__y));
    }



  inline float
  remquo(float __x, float __y, int* __pquo)
  { return __builtin_remquof(__x, __y, __pquo); }

  inline long double
  remquo(long double __x, long double __y, int* __pquo)
  { return __builtin_remquol(__x, __y, __pquo); }



  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remquo(_Tp __x, _Up __y, int* __pquo)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remquo(__type(__x), __type(__y), __pquo);
    }



  constexpr float
  rint(float __x)
  { return __builtin_rintf(__x); }

  constexpr long double
  rint(long double __x)
  { return __builtin_rintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    rint(_Tp __x)
    { return __builtin_rint(__x); }



  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }

  constexpr long double
  round(long double __x)
  { return __builtin_roundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    round(_Tp __x)
    { return __builtin_round(__x); }



  constexpr float
  scalbln(float __x, long __ex)
  { return __builtin_scalblnf(__x, __ex); }

  constexpr long double
  scalbln(long double __x, long __ex)
  { return __builtin_scalblnl(__x, __ex); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    scalbln(_Tp __x, long __ex)
    { return __builtin_scalbln(__x, __ex); }



  constexpr float
  scalbn(float __x, int __ex)
  { return __builtin_scalbnf(__x, __ex); }

  constexpr long double
  scalbn(long double __x, int __ex)
  { return __builtin_scalbnl(__x, __ex); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    scalbn(_Tp __x, int __ex)
    { return __builtin_scalbn(__x, __ex); }



  constexpr float
  tgamma(float __x)
  { return __builtin_tgammaf(__x); }

  constexpr long double
  tgamma(long double __x)
  { return __builtin_tgammal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    tgamma(_Tp __x)
    { return __builtin_tgamma(__x); }



  constexpr float
  trunc(float __x)
  { return __builtin_truncf(__x); }

  constexpr long double
  trunc(long double __x)
  { return __builtin_truncl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    trunc(_Tp __x)
    { return __builtin_trunc(__x); }
# 1932 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cmath" 3
}





}
# 37 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/math.h" 2 3

using std::abs;
using std::acos;
using std::asin;
using std::atan;
using std::atan2;
using std::cos;
using std::sin;
using std::tan;
using std::cosh;
using std::sinh;
using std::tanh;
using std::exp;
using std::frexp;
using std::ldexp;
using std::log;
using std::log10;
using std::modf;
using std::pow;
using std::sqrt;
using std::ceil;
using std::fabs;
using std::floor;
using std::fmod;


using std::fpclassify;
using std::isfinite;
using std::isinf;
using std::isnan;
using std::isnormal;
using std::signbit;
using std::isgreater;
using std::isgreaterequal;
using std::isless;
using std::islessequal;
using std::islessgreater;
using std::isunordered;



using std::acosh;
using std::asinh;
using std::atanh;
using std::cbrt;
using std::copysign;
using std::erf;
using std::erfc;
using std::exp2;
using std::expm1;
using std::fdim;
using std::fma;
using std::fmax;
using std::fmin;
using std::hypot;
using std::ilogb;
using std::lgamma;
using std::llrint;
using std::llround;
using std::log1p;
using std::log2;
using std::logb;
using std::lrint;
using std::lround;
using std::nearbyint;
using std::nextafter;
using std::nexttoward;
using std::remainder;
using std::remquo;
using std::rint;
using std::round;
using std::scalbln;
using std::scalbn;
using std::tgamma;
using std::trunc;
# 12 "C:/Xilinx/Vitis/2024.2/include/hls_fpo.h" 2


# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/assert.h" 1 3
# 15 "C:/Xilinx/Vitis/2024.2/include/hls_fpo.h" 2
# 140 "C:/Xilinx/Vitis/2024.2/include/hls_fpo.h"
# 1 "C:/Xilinx/Vitis/2024.2/include/floating_point_v7_1_bitacc_cmodel.h" 1
# 119 "C:/Xilinx/Vitis/2024.2/include/floating_point_v7_1_bitacc_cmodel.h"
typedef int8_t xint8;
typedef int16_t xint16;
typedef int32_t xint32;
typedef int64_t xint64;
typedef uint8_t xuint8;
typedef uint16_t xuint16;
typedef uint32_t xuint32;
typedef uint64_t xuint64;




# 1 "C:/Xilinx/Vitis/2024.2/vcxx/lib/clang/14.0.6/include/stdbool.h" 1 3
# 132 "C:/Xilinx/Vitis/2024.2/include/floating_point_v7_1_bitacc_cmodel.h" 2
# 150 "C:/Xilinx/Vitis/2024.2/include/floating_point_v7_1_bitacc_cmodel.h"
# 1 "C:/Xilinx/Vitis/2024.2/include/gmp.h" 1
# 28 "C:/Xilinx/Vitis/2024.2/include/gmp.h"
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cstdio" 1 3
# 40 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cstdio" 3
# 29 "C:/Xilinx/Vitis/2024.2/include/gmp.h" 2
# 193 "C:/Xilinx/Vitis/2024.2/include/gmp.h"
typedef unsigned long long int mp_limb_t;
typedef long long int mp_limb_signed_t;
# 203 "C:/Xilinx/Vitis/2024.2/include/gmp.h"
typedef mp_limb_t mpir_ui;
typedef mp_limb_signed_t mpir_si;
typedef mpir_ui mp_bitcnt_t;
# 221 "C:/Xilinx/Vitis/2024.2/include/gmp.h"
typedef struct
{
  int _mp_alloc;

  int _mp_size;


  mp_limb_t *_mp_d;
} __mpz_struct;



typedef __mpz_struct mpz_t[1];

typedef mp_limb_t * mp_ptr;
typedef const mp_limb_t * mp_srcptr;


typedef long long int mp_size_t;
typedef long int mp_exp_t;






typedef struct
{
  __mpz_struct _mp_num;
  __mpz_struct _mp_den;
} __mpq_struct;

typedef __mpq_struct mpq_t[1];

typedef struct
{
  int _mp_prec;



  int _mp_size;


  mp_exp_t _mp_exp;
  mp_limb_t *_mp_d;
} __mpf_struct;

typedef __mpf_struct mpf_t[1];


typedef enum
{
  GMP_RAND_ALG_DEFAULT = 0,
  GMP_RAND_ALG_LC = GMP_RAND_ALG_DEFAULT
} gmp_randalg_t;


typedef struct
{
  mpz_t _mp_seed;
  gmp_randalg_t _mp_alg;
  union {
    void *_mp_lc;
  } _mp_algdata;
} __gmp_randstate_struct;
typedef __gmp_randstate_struct gmp_randstate_t[1];



typedef const __mpz_struct *mpz_srcptr;
typedef __mpz_struct *mpz_ptr;
typedef const __mpf_struct *mpf_srcptr;
typedef __mpf_struct *mpf_ptr;
typedef const __mpq_struct *mpq_srcptr;
typedef __mpq_struct *mpq_ptr;
# 536 "C:/Xilinx/Vitis/2024.2/include/gmp.h"
extern "C" {
using std::FILE;



               void __gmp_set_memory_functions (void *(*) (size_t), void *(*) (void *, size_t, size_t), void (*) (void *, size_t)) throw ();




               void __gmp_get_memory_functions (void *(**) (size_t), void *(**) (void *, size_t, size_t), void (**) (void *, size_t)) throw ();




               extern const int __gmp_bits_per_limb;


               extern int __gmp_errno;


               extern const char * const __gmp_version;


               extern const char * const __mpir_version;





               void __gmp_randinit_default (gmp_randstate_t);


               void __gmp_randinit_lc_2exp (gmp_randstate_t, mpz_srcptr, mpir_ui, mp_bitcnt_t);




               int __gmp_randinit_lc_2exp_size (gmp_randstate_t, mp_bitcnt_t);


               void __gmp_randinit_mt (gmp_randstate_t);


               void __gmp_randinit_set (gmp_randstate_t, const __gmp_randstate_struct *);


               void __gmp_randseed (gmp_randstate_t, mpz_srcptr);


               void __gmp_randseed_ui (gmp_randstate_t, mpir_ui);


               void __gmp_randclear (gmp_randstate_t);


               mpir_ui __gmp_urandomb_ui (gmp_randstate_t, mpir_ui);


               mpir_ui __gmp_urandomm_ui (gmp_randstate_t, mpir_ui);





               int __gmp_asprintf (char **, const char *, ...);



               int __gmp_fprintf (FILE *, const char *, ...);
# 619 "C:/Xilinx/Vitis/2024.2/include/gmp.h"
               int __gmp_printf (const char *, ...);


               int __gmp_snprintf (char *, size_t, const char *, ...);


               int __gmp_sprintf (char *, const char *, ...);
# 657 "C:/Xilinx/Vitis/2024.2/include/gmp.h"
               int __gmp_fscanf (FILE *, const char *, ...);



               int __gmp_scanf (const char *, ...);


               int __gmp_sscanf (const char *, const char *, ...);
# 686 "C:/Xilinx/Vitis/2024.2/include/gmp.h"
               void *__gmpz_realloc (mpz_ptr, mp_size_t);




               void __gmpz_abs (mpz_ptr, mpz_srcptr);




               void __gmpz_add (mpz_ptr, mpz_srcptr, mpz_srcptr);



               void __gmpz_add_ui (mpz_ptr, mpz_srcptr, mpir_ui);


               void __gmpz_addmul (mpz_ptr, mpz_srcptr, mpz_srcptr);


               void __gmpz_addmul_ui (mpz_ptr, mpz_srcptr, mpir_ui);


               void __gmpz_and (mpz_ptr, mpz_srcptr, mpz_srcptr);


               void __gmpz_array_init (mpz_ptr, mp_size_t, mp_size_t);


               void __gmpz_bin_ui (mpz_ptr, mpz_srcptr, mpir_ui);


               void __gmpz_bin_uiui (mpz_ptr, mpir_ui, mpir_ui);


               void __gmpz_cdiv_q (mpz_ptr, mpz_srcptr, mpz_srcptr);


               void __gmpz_cdiv_q_2exp (mpz_ptr, mpz_srcptr, mp_bitcnt_t);


               mpir_ui __gmpz_cdiv_q_ui (mpz_ptr, mpz_srcptr, mpir_ui);


               void __gmpz_cdiv_qr (mpz_ptr, mpz_ptr, mpz_srcptr, mpz_srcptr);


               mpir_ui __gmpz_cdiv_qr_ui (mpz_ptr, mpz_ptr, mpz_srcptr, mpir_ui);


               void __gmpz_cdiv_r (mpz_ptr, mpz_srcptr, mpz_srcptr);


               void __gmpz_cdiv_r_2exp (mpz_ptr, mpz_srcptr, mp_bitcnt_t);


               mpir_ui __gmpz_cdiv_r_ui (mpz_ptr, mpz_srcptr, mpir_ui);


               mpir_ui __gmpz_cdiv_ui (mpz_srcptr, mpir_ui) __attribute__ ((__pure__));


               void __gmpz_clear (mpz_ptr);


               void __gmpz_clears (mpz_ptr, ...);


               void __gmpz_clrbit (mpz_ptr, mp_bitcnt_t);


               int __gmpz_cmp (mpz_srcptr, mpz_srcptr) throw () __attribute__ ((__pure__));


               int __gmpz_cmp_d (mpz_srcptr, double) __attribute__ ((__pure__));


               int __gmpz_cmp_si (mpz_srcptr, mpir_si) throw () __attribute__ ((__pure__));


               int __gmpz_cmp_ui (mpz_srcptr, mpir_ui) throw () __attribute__ ((__pure__));


               int __gmpz_cmpabs (mpz_srcptr, mpz_srcptr) throw () __attribute__ ((__pure__));


               int __gmpz_cmpabs_d (mpz_srcptr, double) __attribute__ ((__pure__));


               int __gmpz_cmpabs_ui (mpz_srcptr, mpir_ui) throw () __attribute__ ((__pure__));


               void __gmpz_com (mpz_ptr, mpz_srcptr);


               void __gmpz_combit (mpz_ptr, mp_bitcnt_t);


               int __gmpz_congruent_p (mpz_srcptr, mpz_srcptr, mpz_srcptr) __attribute__ ((__pure__));


               int __gmpz_congruent_2exp_p (mpz_srcptr, mpz_srcptr, mp_bitcnt_t) throw () __attribute__ ((__pure__));


               int __gmpz_congruent_ui_p (mpz_srcptr, mpir_ui, mpir_ui) __attribute__ ((__pure__));


               void __gmpz_divexact (mpz_ptr, mpz_srcptr, mpz_srcptr);


               void __gmpz_divexact_ui (mpz_ptr, mpz_srcptr, mpir_ui);


               int __gmpz_divisible_p (mpz_srcptr, mpz_srcptr) __attribute__ ((__pure__));


               int __gmpz_divisible_ui_p (mpz_srcptr, mpir_ui) __attribute__ ((__pure__));


               int __gmpz_divisible_2exp_p (mpz_srcptr, mp_bitcnt_t) throw () __attribute__ ((__pure__));


               void __gmpz_dump (mpz_srcptr);


               void *__gmpz_export (void *, size_t *, int, size_t, int, size_t, mpz_srcptr);


               void __gmpz_fac_ui (mpz_ptr, mpir_ui);


               void __gmpz_fdiv_q (mpz_ptr, mpz_srcptr, mpz_srcptr);


               void __gmpz_fdiv_q_2exp (mpz_ptr, mpz_srcptr, mp_bitcnt_t);


               mpir_ui __gmpz_fdiv_q_ui (mpz_ptr, mpz_srcptr, mpir_ui);


               void __gmpz_fdiv_qr (mpz_ptr, mpz_ptr, mpz_srcptr, mpz_srcptr);


               mpir_ui __gmpz_fdiv_qr_ui (mpz_ptr, mpz_ptr, mpz_srcptr, mpir_ui);


               void __gmpz_fdiv_r (mpz_ptr, mpz_srcptr, mpz_srcptr);


               void __gmpz_fdiv_r_2exp (mpz_ptr, mpz_srcptr, mp_bitcnt_t);


               mpir_ui __gmpz_fdiv_r_ui (mpz_ptr, mpz_srcptr, mpir_ui);


               mpir_ui __gmpz_fdiv_ui (mpz_srcptr, mpir_ui) __attribute__ ((__pure__));


               void __gmpz_fib_ui (mpz_ptr, mpir_ui);


               void __gmpz_fib2_ui (mpz_ptr, mpz_ptr, mpir_ui);


               int __gmpz_fits_sint_p (mpz_srcptr) throw () __attribute__ ((__pure__));


               int __gmpz_fits_si_p (mpz_srcptr) throw () __attribute__ ((__pure__));


               int __gmpz_fits_slong_p (mpz_srcptr) throw () __attribute__ ((__pure__));


               int __gmpz_fits_sshort_p (mpz_srcptr) throw () __attribute__ ((__pure__));



               int __gmpz_fits_uint_p (mpz_srcptr) throw () __attribute__ ((__pure__));




               int __gmpz_fits_ui_p (mpz_srcptr) throw () __attribute__ ((__pure__));




               int __gmpz_fits_ulong_p (mpz_srcptr) throw () __attribute__ ((__pure__));




               int __gmpz_fits_ushort_p (mpz_srcptr) throw () __attribute__ ((__pure__));



               void __gmpz_gcd (mpz_ptr, mpz_srcptr, mpz_srcptr);


               mpir_ui __gmpz_gcd_ui (mpz_ptr, mpz_srcptr, mpir_ui);


               void __gmpz_gcdext (mpz_ptr, mpz_ptr, mpz_ptr, mpz_srcptr, mpz_srcptr);


               double __gmpz_get_d (mpz_srcptr) __attribute__ ((__pure__));


               double __gmpz_get_d_2exp (mpir_si *, mpz_srcptr);


                            mpir_si __gmpz_get_si (mpz_srcptr) throw () __attribute__ ((__pure__));


               char *__gmpz_get_str (char *, int, mpz_srcptr);



               mpir_ui __gmpz_get_ui (mpz_srcptr) throw () __attribute__ ((__pure__));




               mp_limb_t __gmpz_getlimbn (mpz_srcptr, mp_size_t) throw () __attribute__ ((__pure__));



               mp_bitcnt_t __gmpz_hamdist (mpz_srcptr, mpz_srcptr) throw () __attribute__ ((__pure__));


               void __gmpz_import (mpz_ptr, size_t, int, size_t, int, size_t, const void *);


               void __gmpz_init (mpz_ptr);


               void __gmpz_init2 (mpz_ptr, mp_bitcnt_t);


               void __gmpz_inits (mpz_ptr, ...);


               void __gmpz_init_set (mpz_ptr, mpz_srcptr);


               void __gmpz_init_set_d (mpz_ptr, double);


               void __gmpz_init_set_si (mpz_ptr, mpir_si);


               int __gmpz_init_set_str (mpz_ptr, const char *, int);


               void __gmpz_init_set_ui (mpz_ptr, mpir_ui);



               size_t __gmpz_inp_raw (mpz_ptr, FILE *);




               size_t __gmpz_inp_str (mpz_ptr, FILE *, int);



               int __gmpz_invert (mpz_ptr, mpz_srcptr, mpz_srcptr);


               void __gmpz_ior (mpz_ptr, mpz_srcptr, mpz_srcptr);


               int __gmpz_jacobi (mpz_srcptr, mpz_srcptr) __attribute__ ((__pure__));




               int __gmpz_kronecker_si (mpz_srcptr, mpir_si) __attribute__ ((__pure__));


               int __gmpz_kronecker_ui (mpz_srcptr, mpir_ui) __attribute__ ((__pure__));


               int __gmpz_si_kronecker (mpir_si, mpz_srcptr) __attribute__ ((__pure__));


               int __gmpz_ui_kronecker (mpir_ui, mpz_srcptr) __attribute__ ((__pure__));


               void __gmpz_lcm (mpz_ptr, mpz_srcptr, mpz_srcptr);


               void __gmpz_lcm_ui (mpz_ptr, mpz_srcptr, mpir_ui);




               void __gmpz_lucnum_ui (mpz_ptr, mpir_ui);


               void __gmpz_lucnum2_ui (mpz_ptr, mpz_ptr, mpir_ui);


               int __gmpz_millerrabin (mpz_srcptr, int) __attribute__ ((__pure__));


               int __gmpz_miller_rabin (mpz_srcptr, int, gmp_randstate_t) __attribute__ ((__pure__));


               void __gmpz_mod (mpz_ptr, mpz_srcptr, mpz_srcptr);





               void __gmpz_mul (mpz_ptr, mpz_srcptr, mpz_srcptr);


               void __gmpz_mul_2exp (mpz_ptr, mpz_srcptr, mp_bitcnt_t);



               void __gmpz_mul_si (mpz_ptr, mpz_srcptr, mpir_si);



               void __gmpz_mul_ui (mpz_ptr, mpz_srcptr, mpir_ui);




               void __gmpz_neg (mpz_ptr, mpz_srcptr);



               void __gmpz_nextprime (mpz_ptr, mpz_srcptr);


               void __gmpz_next_likely_prime (mpz_ptr, mpz_srcptr, gmp_randstate_t);



               size_t __gmpz_out_raw (FILE *, mpz_srcptr);




               size_t __gmpz_out_str (FILE *, int, mpz_srcptr);



               int __gmpz_perfect_power_p (mpz_srcptr) __attribute__ ((__pure__));



               int __gmpz_perfect_square_p (mpz_srcptr) __attribute__ ((__pure__));




               mp_bitcnt_t __gmpz_popcount (mpz_srcptr) throw () __attribute__ ((__pure__));



               void __gmpz_pow_ui (mpz_ptr, mpz_srcptr, mpir_ui);


               void __gmpz_powm (mpz_ptr, mpz_srcptr, mpz_srcptr, mpz_srcptr);


               void __gmpz_powm_ui (mpz_ptr, mpz_srcptr, mpir_ui, mpz_srcptr);


               int __gmpz_probab_prime_p (mpz_srcptr, int) __attribute__ ((__pure__));


               int __gmpz_probable_prime_p (mpz_srcptr,gmp_randstate_t, int, mpir_ui);


               int __gmpz_likely_prime_p (mpz_srcptr,gmp_randstate_t, mpir_ui);


               void __gmpz_realloc2 (mpz_ptr, mp_bitcnt_t);


               mp_bitcnt_t __gmpz_remove (mpz_ptr, mpz_srcptr, mpz_srcptr);


               int __gmpz_root (mpz_ptr, mpz_srcptr, mpir_ui);


               void __gmpz_nthroot (mpz_ptr, mpz_srcptr, mpir_ui);


               void __gmpz_rootrem (mpz_ptr,mpz_ptr, mpz_srcptr, mpir_ui);


               void __gmpz_rrandomb (mpz_ptr, gmp_randstate_t, mp_bitcnt_t);


               mp_bitcnt_t __gmpz_scan0 (mpz_srcptr, mp_bitcnt_t) throw () __attribute__ ((__pure__));


               mp_bitcnt_t __gmpz_scan1 (mpz_srcptr, mp_bitcnt_t) throw () __attribute__ ((__pure__));



               void __gmpz_set (mpz_ptr, mpz_srcptr);


               void __gmpz_set_d (mpz_ptr, double);


               void __gmpz_set_f (mpz_ptr, mpf_srcptr);



               void __gmpz_set_q (mpz_ptr, mpq_srcptr);




               void __gmpz_set_si (mpz_ptr, mpir_si);


               int __gmpz_set_str (mpz_ptr, const char *, int);



               void __gmpz_set_ui (mpz_ptr, mpir_ui);


               void __gmpz_setbit (mpz_ptr, mp_bitcnt_t);



               size_t __gmpz_size (mpz_srcptr) throw () __attribute__ ((__pure__));



               size_t __gmpz_sizeinbase (mpz_srcptr, int) throw () __attribute__ ((__pure__));


               void __gmpz_sqrt (mpz_ptr, mpz_srcptr);


               void __gmpz_sqrtrem (mpz_ptr, mpz_ptr, mpz_srcptr);



               void __gmpz_sub (mpz_ptr, mpz_srcptr, mpz_srcptr);



               void __gmpz_sub_ui (mpz_ptr, mpz_srcptr, mpir_ui);



               void __gmpz_ui_sub (mpz_ptr, mpir_ui, mpz_srcptr);


               void __gmpz_submul (mpz_ptr, mpz_srcptr, mpz_srcptr);


               void __gmpz_submul_ui (mpz_ptr, mpz_srcptr, mpir_ui);


               void __gmpz_swap (mpz_ptr, mpz_ptr) throw ();


               mpir_ui __gmpz_tdiv_ui (mpz_srcptr, mpir_ui) __attribute__ ((__pure__));


               void __gmpz_tdiv_q (mpz_ptr, mpz_srcptr, mpz_srcptr);


               void __gmpz_tdiv_q_2exp (mpz_ptr, mpz_srcptr, mp_bitcnt_t);


               mpir_ui __gmpz_tdiv_q_ui (mpz_ptr, mpz_srcptr, mpir_ui);


               void __gmpz_tdiv_qr (mpz_ptr, mpz_ptr, mpz_srcptr, mpz_srcptr);


               mpir_ui __gmpz_tdiv_qr_ui (mpz_ptr, mpz_ptr, mpz_srcptr, mpir_ui);


               void __gmpz_tdiv_r (mpz_ptr, mpz_srcptr, mpz_srcptr);


               void __gmpz_tdiv_r_2exp (mpz_ptr, mpz_srcptr, mp_bitcnt_t);


               mpir_ui __gmpz_tdiv_r_ui (mpz_ptr, mpz_srcptr, mpir_ui);


               int __gmpz_tstbit (mpz_srcptr, mp_bitcnt_t) throw () __attribute__ ((__pure__));


               void __gmpz_ui_pow_ui (mpz_ptr, mpir_ui, mpir_ui);


               void __gmpz_urandomb (mpz_ptr, gmp_randstate_t, mp_bitcnt_t);


               void __gmpz_urandomm (mpz_ptr, gmp_randstate_t, mpz_srcptr);



               void __gmpz_xor (mpz_ptr, mpz_srcptr, mpz_srcptr);
# 1207 "C:/Xilinx/Vitis/2024.2/include/gmp.h"
               uintmax_t __gmpz_get_ux (mpz_srcptr);


               intmax_t __gmpz_get_sx (mpz_srcptr);


               void __gmpz_set_ux (mpz_ptr, uintmax_t);


               void __gmpz_set_sx (mpz_ptr, intmax_t);


               void __gmpz_init_set_ux (mpz_ptr, uintmax_t);


               void __gmpz_init_set_sx (mpz_ptr, intmax_t);
# 1231 "C:/Xilinx/Vitis/2024.2/include/gmp.h"
               void __gmpq_abs (mpq_ptr, mpq_srcptr);



               void __gmpq_add (mpq_ptr, mpq_srcptr, mpq_srcptr);


               void __gmpq_canonicalize (mpq_ptr);


               void __gmpq_clear (mpq_ptr);


               void __gmpq_clears (mpq_ptr, ...);


               int __gmpq_cmp (mpq_srcptr, mpq_srcptr) __attribute__ ((__pure__));


               int __gmpq_cmp_si (mpq_srcptr, mpir_si, mpir_ui) __attribute__ ((__pure__));


               int __gmpq_cmp_ui (mpq_srcptr, mpir_ui, mpir_ui) __attribute__ ((__pure__));


               void __gmpq_div (mpq_ptr, mpq_srcptr, mpq_srcptr);


               void __gmpq_div_2exp (mpq_ptr, mpq_srcptr, mp_bitcnt_t);


               int __gmpq_equal (mpq_srcptr, mpq_srcptr) throw () __attribute__ ((__pure__));


               void __gmpq_get_num (mpz_ptr, mpq_srcptr);


               void __gmpq_get_den (mpz_ptr, mpq_srcptr);


               double __gmpq_get_d (mpq_srcptr) __attribute__ ((__pure__));


               char *__gmpq_get_str (char *, int, mpq_srcptr);


               void __gmpq_init (mpq_ptr);


               void __gmpq_inits (mpq_ptr, ...);



               size_t __gmpq_inp_str (mpq_ptr, FILE *, int);



               void __gmpq_inv (mpq_ptr, mpq_srcptr);


               void __gmpq_mul (mpq_ptr, mpq_srcptr, mpq_srcptr);


               void __gmpq_mul_2exp (mpq_ptr, mpq_srcptr, mp_bitcnt_t);



               void __gmpq_neg (mpq_ptr, mpq_srcptr);




               size_t __gmpq_out_str (FILE *, int, mpq_srcptr);



               void __gmpq_set (mpq_ptr, mpq_srcptr);


               void __gmpq_set_d (mpq_ptr, double);


               void __gmpq_set_den (mpq_ptr, mpz_srcptr);


               void __gmpq_set_f (mpq_ptr, mpf_srcptr);


               void __gmpq_set_num (mpq_ptr, mpz_srcptr);


               void __gmpq_set_si (mpq_ptr, mpir_si, mpir_ui);


               int __gmpq_set_str (mpq_ptr, const char *, int);


               void __gmpq_set_ui (mpq_ptr, mpir_ui, mpir_ui);


               void __gmpq_set_z (mpq_ptr, mpz_srcptr);


               void __gmpq_sub (mpq_ptr, mpq_srcptr, mpq_srcptr);


               void __gmpq_swap (mpq_ptr, mpq_ptr) throw ();





               void __gmpf_abs (mpf_ptr, mpf_srcptr);


               void __gmpf_add (mpf_ptr, mpf_srcptr, mpf_srcptr);


               void __gmpf_add_ui (mpf_ptr, mpf_srcptr, mpir_ui);

               void __gmpf_ceil (mpf_ptr, mpf_srcptr);


               void __gmpf_clear (mpf_ptr);


               void __gmpf_clears (mpf_ptr, ...);


               int __gmpf_cmp (mpf_srcptr, mpf_srcptr) throw () __attribute__ ((__pure__));


               int __gmpf_cmp_d (mpf_srcptr, double) __attribute__ ((__pure__));


               int __gmpf_cmp_si (mpf_srcptr, mpir_si) throw () __attribute__ ((__pure__));


               int __gmpf_cmp_ui (mpf_srcptr, mpir_ui) throw () __attribute__ ((__pure__));


               void __gmpf_div (mpf_ptr, mpf_srcptr, mpf_srcptr);


               void __gmpf_div_2exp (mpf_ptr, mpf_srcptr, mp_bitcnt_t);


               void __gmpf_div_ui (mpf_ptr, mpf_srcptr, mpir_ui);


               void __gmpf_dump (mpf_srcptr);


               int __gmpf_eq (mpf_srcptr, mpf_srcptr, mp_bitcnt_t) __attribute__ ((__pure__));


               int __gmpf_fits_sint_p (mpf_srcptr) throw () __attribute__ ((__pure__));


               int __gmpf_fits_si_p (mpf_srcptr) throw () __attribute__ ((__pure__));


               int __gmpf_fits_slong_p (mpf_srcptr) throw () __attribute__ ((__pure__));


               int __gmpf_fits_sshort_p (mpf_srcptr) throw () __attribute__ ((__pure__));


               int __gmpf_fits_uint_p (mpf_srcptr) throw () __attribute__ ((__pure__));


               int __gmpf_fits_ui_p (mpf_srcptr) throw () __attribute__ ((__pure__));


               int __gmpf_fits_ulong_p (mpf_srcptr) throw () __attribute__ ((__pure__));


               int __gmpf_fits_ushort_p (mpf_srcptr) throw () __attribute__ ((__pure__));


               void __gmpf_floor (mpf_ptr, mpf_srcptr);


               double __gmpf_get_d (mpf_srcptr) __attribute__ ((__pure__));


               double __gmpf_get_d_2exp (mpir_si *, mpf_srcptr);


               mp_bitcnt_t __gmpf_get_default_prec (void) throw () __attribute__ ((__pure__));


               mp_bitcnt_t __gmpf_get_prec (mpf_srcptr) throw () __attribute__ ((__pure__));


               mpir_si __gmpf_get_si (mpf_srcptr) throw () __attribute__ ((__pure__));


               char *__gmpf_get_str (char *, mp_exp_t *, int, size_t, mpf_srcptr);


               mpir_ui __gmpf_get_ui (mpf_srcptr) throw () __attribute__ ((__pure__));


               void __gmpf_init (mpf_ptr);


               void __gmpf_init2 (mpf_ptr, mp_bitcnt_t);


               void __gmpf_inits (mpf_ptr, ...);


               void __gmpf_init_set (mpf_ptr, mpf_srcptr);


               void __gmpf_init_set_d (mpf_ptr, double);


               void __gmpf_init_set_si (mpf_ptr, mpir_si);


               int __gmpf_init_set_str (mpf_ptr, const char *, int);


               void __gmpf_init_set_ui (mpf_ptr, mpir_ui);



               size_t __gmpf_inp_str (mpf_ptr, FILE *, int);



               int __gmpf_integer_p (mpf_srcptr) throw () __attribute__ ((__pure__));


               void __gmpf_mul (mpf_ptr, mpf_srcptr, mpf_srcptr);


               void __gmpf_mul_2exp (mpf_ptr, mpf_srcptr, mp_bitcnt_t);


               void __gmpf_mul_ui (mpf_ptr, mpf_srcptr, mpir_ui);


               void __gmpf_neg (mpf_ptr, mpf_srcptr);



               size_t __gmpf_out_str (FILE *, int, size_t, mpf_srcptr);



               void __gmpf_pow_ui (mpf_ptr, mpf_srcptr, mpir_ui);


               void __gmpf_random2 (mpf_ptr, mp_size_t, mp_exp_t);


               void __gmpf_rrandomb (mpf_ptr, gmp_randstate_t, mp_size_t, mp_exp_t);


               void __gmpf_reldiff (mpf_ptr, mpf_srcptr, mpf_srcptr);


               void __gmpf_set (mpf_ptr, mpf_srcptr);


               void __gmpf_set_d (mpf_ptr, double);


               void __gmpf_set_default_prec (mp_bitcnt_t) throw ();


               void __gmpf_set_prec (mpf_ptr, mp_bitcnt_t);


               void __gmpf_set_prec_raw (mpf_ptr, mp_bitcnt_t) throw ();


               void __gmpf_set_q (mpf_ptr, mpq_srcptr);


               void __gmpf_set_si (mpf_ptr, mpir_si);


               int __gmpf_set_str (mpf_ptr, const char *, int);


               void __gmpf_set_ui (mpf_ptr, mpir_ui);


               void __gmpf_set_z (mpf_ptr, mpz_srcptr);


               size_t __gmpf_size (mpf_srcptr) throw () __attribute__ ((__pure__));


               void __gmpf_sqrt (mpf_ptr, mpf_srcptr);


               void __gmpf_sqrt_ui (mpf_ptr, mpir_ui);


               void __gmpf_sub (mpf_ptr, mpf_srcptr, mpf_srcptr);


               void __gmpf_sub_ui (mpf_ptr, mpf_srcptr, mpir_ui);


               void __gmpf_swap (mpf_ptr, mpf_ptr) throw ();


               void __gmpf_trunc (mpf_ptr, mpf_srcptr);


               void __gmpf_ui_div (mpf_ptr, mpir_ui, mpf_srcptr);


               void __gmpf_ui_sub (mpf_ptr, mpir_ui, mpf_srcptr);


               void __gmpf_urandomb (mpf_t, gmp_randstate_t, mp_bitcnt_t);
# 1562 "C:/Xilinx/Vitis/2024.2/include/gmp.h"
               mp_limb_t __gmpn_add (mp_ptr, mp_srcptr, mp_size_t, mp_srcptr,mp_size_t);




               mp_limb_t __gmpn_add_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t) throw ();



               mp_limb_t __gmpn_add_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);


               mp_limb_t __gmpn_addmul_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);


               mp_limb_t __gmpn_bdivmod (mp_ptr, mp_ptr, mp_size_t, mp_srcptr, mp_size_t, mpir_ui);


               mp_limb_t __gmpn_divrem (mp_ptr, mp_size_t, mp_ptr, mp_size_t, mp_srcptr, mp_size_t);


               int __gmpn_mulmod_Bexpp1 (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t, mp_ptr);


               int __gmpn_mulmod_2expp1_basecase (mp_ptr, mp_srcptr, mp_srcptr,int,mpir_ui, mp_ptr);


               void __gmpn_mulmod_2expm1 (mp_ptr, mp_ptr, mp_ptr, mpir_ui, mp_ptr);



               int __gmpn_cmp (mp_srcptr, mp_srcptr, mp_size_t) throw () __attribute__ ((__pure__));



               void __gmpn_redc_1 (mp_ptr, mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);


               void __gmpn_redc_2 (mp_ptr, mp_ptr, mp_srcptr, mp_size_t, mp_srcptr);

               void __gmpn_redc_n (mp_ptr, mp_ptr, mp_srcptr, mp_size_t, mp_srcptr);





               mp_limb_t __gmpn_divexact_by3c (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);





               mp_limb_t __gmpn_divrem_1 (mp_ptr, mp_size_t, mp_srcptr, mp_size_t, mp_limb_t);


               mp_limb_t __gmpn_divrem_2 (mp_ptr, mp_size_t, mp_ptr, mp_size_t, mp_srcptr);


               void __gmpn_invert (mp_ptr xp, mp_srcptr ap, mp_size_t n);


               mp_limb_t __gmpn_sb_divappr_q (mp_ptr qp, mp_ptr np, mp_size_t nn, mp_srcptr dp, mp_size_t dn, mp_limb_t dip);



               mp_limb_t __gmpn_dc_divappr_q_n (mp_ptr qp, mp_ptr np, mp_srcptr dp, mp_size_t n, mp_limb_t dip, mp_ptr tp);



               void __gmpn_dc_bdiv_q_n (mp_ptr qp, mp_ptr wp, mp_ptr np, mp_srcptr dp, mp_size_t n, mp_limb_t dinv, mp_ptr scratch);



               mp_limb_t __gmpn_inv_divappr_q_n (mp_ptr qp, mp_ptr np, mp_srcptr dp, mp_size_t n, mp_srcptr dip);



               mp_limb_t __gmpn_dc_divappr_q (mp_ptr qp, mp_ptr np, mp_size_t nn, mp_srcptr dp, mp_size_t n, mp_limb_t dinv);



               mp_limb_t __gmpn_dc_div_q (mp_ptr qp, mp_ptr np, mp_size_t nn, mp_srcptr dp, mp_size_t dn, mp_limb_t dinv);



               mp_limb_t __gmpn_inv_divappr_q (mp_ptr qp, mp_ptr np, mp_size_t nn, mp_srcptr dp, mp_size_t n, mp_srcptr dinv);



               mp_limb_t __gmpn_inv_div_q (mp_ptr qp, mp_ptr np, mp_size_t nn, mp_srcptr dp, mp_size_t dn, mp_srcptr dinv);



               mp_limb_t __gmpn_inv_div_qr (mp_ptr qp, mp_ptr np, mp_size_t nn, mp_srcptr dp, mp_size_t dn, mp_srcptr dinv);



               mp_limb_t __gmpn_inv_div_qr_n (mp_ptr qp, mp_ptr np, mp_srcptr dp, mp_size_t dn, mp_srcptr dinv);



               mp_limb_t __gmpn_dc_div_qr (mp_ptr qp, mp_ptr np, mp_size_t nn, mp_srcptr dp, mp_size_t dn, mp_limb_t dinv);



               mp_limb_t __gmpn_dc_div_qr_n (mp_ptr qp, mp_ptr np, mp_srcptr dp, mp_size_t n, mp_limb_t dinv, mp_ptr tp);



               mp_limb_t __gmpn_sb_div_q (mp_ptr qp, mp_ptr np, mp_size_t nn, mp_srcptr dp, mp_size_t dn, mp_limb_t dinv);



               void __gmpn_sb_bdiv_q (mp_ptr qp, mp_ptr wp, mp_ptr np, mp_size_t nn, mp_srcptr dp, mp_size_t dn, mp_limb_t dinv);



               void __gmpn_dc_bdiv_q (mp_ptr qp, mp_ptr np, mp_size_t nn, mp_srcptr dp, mp_size_t dn, mp_limb_t dinv);



               mp_limb_t __gmpn_dc_bdiv_qr (mp_ptr qp, mp_ptr np, mp_size_t nn, mp_srcptr dp, mp_size_t dn, mp_limb_t dinv);



               mp_limb_t __gmpn_dc_bdiv_qr_n (mp_ptr qp, mp_ptr np, mp_srcptr dp, mp_size_t n, mp_limb_t dinv, mp_ptr tp);



               mp_limb_t __gmpn_sb_div_qr (mp_ptr qp, mp_ptr np, mp_size_t nn, mp_srcptr dp, mp_size_t dn, mp_limb_t dinv);



               mp_limb_t __gmpn_sb_bdiv_qr (mp_ptr qp, mp_ptr np, mp_size_t nn, mp_srcptr dp, mp_size_t dn, mp_limb_t dinv);



               void __gmpn_tdiv_q (mp_ptr qp, mp_srcptr np, mp_size_t nn, mp_srcptr dp, mp_size_t dn);



               void __gmpn_divexact (mp_ptr qp, mp_srcptr np, mp_size_t nn, mp_srcptr dp, mp_size_t dn);



               mp_size_t __gmpn_gcd (mp_ptr, mp_ptr, mp_size_t, mp_ptr, mp_size_t);


               mp_limb_t __gmpn_gcd_1 (mp_srcptr, mp_size_t, mp_limb_t) __attribute__ ((__pure__));


               mp_limb_t __gmpn_gcdext_1 (mp_limb_signed_t *, mp_limb_signed_t *, mp_limb_t, mp_limb_t);


               mp_size_t __gmpn_gcdext (mp_ptr, mp_ptr, mp_size_t *, mp_ptr, mp_size_t, mp_ptr, mp_size_t);


               size_t __gmpn_get_str (unsigned char *, int, mp_ptr, mp_size_t);


               mp_bitcnt_t __gmpn_hamdist (mp_srcptr, mp_srcptr, mp_size_t) throw () __attribute__ ((__pure__));


               mp_limb_t __gmpn_lshift (mp_ptr, mp_srcptr, mp_size_t, unsigned int);


               mp_limb_t __gmpn_mod_1 (mp_srcptr, mp_size_t, mp_limb_t) __attribute__ ((__pure__));


               mp_limb_t __gmpn_mul (mp_ptr, mp_srcptr, mp_size_t, mp_srcptr, mp_size_t);


               mp_limb_t __gmpn_mul_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);


               void __gmpn_mul_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);


               void __gmpn_sqr (mp_ptr, mp_srcptr, mp_size_t);



               mp_limb_t __gmpn_neg_n (mp_ptr, mp_srcptr, mp_size_t);



               void __gmpn_com_n (mp_ptr, mp_srcptr, mp_size_t);


               int __gmpn_perfect_square_p (mp_srcptr, mp_size_t) __attribute__ ((__pure__));


               mp_bitcnt_t __gmpn_popcount (mp_srcptr, mp_size_t) throw () __attribute__ ((__pure__));


               mp_size_t __gmpn_pow_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t, mp_ptr);



               mp_limb_t __gmpn_preinv_mod_1 (mp_srcptr, mp_size_t, mp_limb_t, mp_limb_t) __attribute__ ((__pure__));


               void __gmpn_random (mp_ptr, mp_size_t);


               void __gmpn_random2 (mp_ptr, mp_size_t);


               void __gmpn_urandomb (mp_ptr, gmp_randstate_t, mpir_ui);


               void __gmpn_urandomm (mp_ptr, gmp_randstate_t, mp_srcptr, mp_size_t);


               void __gmpn_randomb (mp_ptr, gmp_randstate_t, mp_size_t);


               void __gmpn_rrandom (mp_ptr, gmp_randstate_t, mp_size_t);


               mp_limb_t __gmpn_rshift (mp_ptr, mp_srcptr, mp_size_t, unsigned int);


               mp_bitcnt_t __gmpn_scan0 (mp_srcptr, mp_bitcnt_t) __attribute__ ((__pure__));


               mp_bitcnt_t __gmpn_scan1 (mp_srcptr, mp_bitcnt_t) __attribute__ ((__pure__));


               mp_size_t __gmpn_set_str (mp_ptr, const unsigned char *, size_t, int);


               mp_size_t __gmpn_sqrtrem (mp_ptr, mp_ptr, mp_srcptr, mp_size_t);



               mp_limb_t __gmpn_sub (mp_ptr, mp_srcptr, mp_size_t, mp_srcptr,mp_size_t);




               mp_limb_t __gmpn_sub_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t) throw ();



               mp_limb_t __gmpn_sub_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);


               mp_limb_t __gmpn_submul_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);


               void __gmpn_tdiv_qr (mp_ptr, mp_ptr, mp_size_t, mp_srcptr, mp_size_t, mp_srcptr, mp_size_t);


               void __gmpn_and_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

               void __gmpn_andn_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

               void __gmpn_nand_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

               void __gmpn_ior_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

               void __gmpn_iorn_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

               void __gmpn_nior_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

               void __gmpn_xor_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

               void __gmpn_xnor_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);


               void __gmpn_copyi (mp_ptr, mp_srcptr, mp_size_t);

               void __gmpn_copyd (mp_ptr, mp_srcptr, mp_size_t);

               void __gmpn_zero (mp_ptr, mp_size_t);



               mp_limb_t __gmpn_sumdiff_n (mp_ptr, mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);





               void __gmpn_mul_fft_main (mp_ptr r1, mp_srcptr i1, mp_size_t n1, mp_srcptr i2, mp_size_t n2);
# 1866 "C:/Xilinx/Vitis/2024.2/include/gmp.h"
extern __inline__ __attribute__((__gnu_inline__)) void
__gmpz_abs (mpz_ptr __gmp_w, mpz_srcptr __gmp_u)
{
  if (__gmp_w != __gmp_u)
    __gmpz_set (__gmp_w, __gmp_u);
  __gmp_w->_mp_size = ((__gmp_w->_mp_size) >= 0 ? (__gmp_w->_mp_size) : -(__gmp_w->_mp_size));
}
# 1890 "C:/Xilinx/Vitis/2024.2/include/gmp.h"
extern __inline__ __attribute__((__gnu_inline__))

int
__gmpz_fits_uint_p (mpz_srcptr __gmp_z) throw ()
{
  mp_size_t __gmp_n = __gmp_z->_mp_size; mp_ptr __gmp_p = __gmp_z->_mp_d; return (__gmp_n == 0 || (__gmp_n == 1 && __gmp_p[0] <= (~ (unsigned) 0)));;
}




extern __inline__ __attribute__((__gnu_inline__))

int
__gmpz_fits_ui_p (mpz_srcptr __gmp_z) throw ()
{
  mp_size_t __gmp_n = __gmp_z->_mp_size; mp_ptr __gmp_p = __gmp_z->_mp_d; return (__gmp_n == 0 || (__gmp_n == 1 && __gmp_p[0] <= ((mpir_ui)(~(mpir_ui)0))));;
}




extern __inline__ __attribute__((__gnu_inline__))

int
__gmpz_fits_ulong_p (mpz_srcptr __gmp_z) throw ()
{
  mp_size_t __gmp_n = __gmp_z->_mp_size; mp_ptr __gmp_p = __gmp_z->_mp_d; return (__gmp_n == 0 || (__gmp_n == 1 && __gmp_p[0] <= (~ (unsigned long) 0)));;
}




extern __inline__ __attribute__((__gnu_inline__))

int
__gmpz_fits_ushort_p (mpz_srcptr __gmp_z) throw ()
{
  mp_size_t __gmp_n = __gmp_z->_mp_size; mp_ptr __gmp_p = __gmp_z->_mp_d; return (__gmp_n == 0 || (__gmp_n == 1 && __gmp_p[0] <= ((unsigned short) ~0)));;
}




extern __inline__ __attribute__((__gnu_inline__))

mpir_ui
__gmpz_get_ui (mpz_srcptr __gmp_z) throw ()
{
  mp_ptr __gmp_p = __gmp_z->_mp_d;
  mp_size_t __gmp_n = __gmp_z->_mp_size;
  mp_limb_t __gmp_l = __gmp_p[0];






  return (mpir_ui)(__gmp_n != 0 ? __gmp_l : 0);
# 1957 "C:/Xilinx/Vitis/2024.2/include/gmp.h"
}




extern __inline__ __attribute__((__gnu_inline__))

mp_limb_t
__gmpz_getlimbn (mpz_srcptr __gmp_z, mp_size_t __gmp_n) throw ()
{
  mp_limb_t __gmp_result = 0;
  if (__builtin_expect ((__gmp_n >= 0 && __gmp_n < ((__gmp_z->_mp_size) >= 0 ? (__gmp_z->_mp_size) : -(__gmp_z->_mp_size))) != 0, 1))
    __gmp_result = __gmp_z->_mp_d[__gmp_n];
  return __gmp_result;
}



extern __inline__ __attribute__((__gnu_inline__)) void
__gmpz_neg (mpz_ptr __gmp_w, mpz_srcptr __gmp_u)
{
  if (__gmp_w != __gmp_u)
    __gmpz_set (__gmp_w, __gmp_u);
  __gmp_w->_mp_size = - __gmp_w->_mp_size;
}




extern __inline__ __attribute__((__gnu_inline__))

int
__gmpz_perfect_square_p (mpz_srcptr __gmp_a)
{
  mp_size_t __gmp_asize;
  int __gmp_result;

  __gmp_asize = __gmp_a->_mp_size;
  __gmp_result = (__gmp_asize >= 0);
  if (__builtin_expect ((__gmp_asize > 0) != 0, 1))
    __gmp_result = __gmpn_perfect_square_p (__gmp_a->_mp_d, __gmp_asize);
  return __gmp_result;
}




extern __inline__ __attribute__((__gnu_inline__))

mp_bitcnt_t
__gmpz_popcount (mpz_srcptr __gmp_u) throw ()
{
  mp_size_t __gmp_usize;
  mp_bitcnt_t __gmp_result;

  __gmp_usize = __gmp_u->_mp_size;
  __gmp_result = (__gmp_usize < 0 ? (~(mp_bitcnt_t)0) : 0);
  if (__builtin_expect ((__gmp_usize > 0) != 0, 1))
    __gmp_result = __gmpn_popcount (__gmp_u->_mp_d, __gmp_usize);
  return __gmp_result;
}




extern __inline__ __attribute__((__gnu_inline__))

void
__gmpz_set_q (mpz_ptr __gmp_w, mpq_srcptr __gmp_u)
{
  __gmpz_tdiv_q (__gmp_w, (&((__gmp_u)->_mp_num)), (&((__gmp_u)->_mp_den)));
}




extern __inline__ __attribute__((__gnu_inline__))

size_t
__gmpz_size (mpz_srcptr __gmp_z) throw ()
{
  return ((__gmp_z->_mp_size) >= 0 ? (__gmp_z->_mp_size) : -(__gmp_z->_mp_size));
}






extern __inline__ __attribute__((__gnu_inline__)) void
__gmpq_abs (mpq_ptr __gmp_w, mpq_srcptr __gmp_u)
{
  if (__gmp_w != __gmp_u)
    __gmpq_set (__gmp_w, __gmp_u);
  __gmp_w->_mp_num._mp_size = ((__gmp_w->_mp_num._mp_size) >= 0 ? (__gmp_w->_mp_num._mp_size) : -(__gmp_w->_mp_num._mp_size));
}



extern __inline__ __attribute__((__gnu_inline__)) void
__gmpq_neg (mpq_ptr __gmp_w, mpq_srcptr __gmp_u)
{
  if (__gmp_w != __gmp_u)
    __gmpq_set (__gmp_w, __gmp_u);
  __gmp_w->_mp_num._mp_size = - __gmp_w->_mp_num._mp_size;
}
# 2298 "C:/Xilinx/Vitis/2024.2/include/gmp.h"
extern __inline__ __attribute__((__gnu_inline__))

mp_limb_t
__gmpn_add (mp_ptr __gmp_wp, mp_srcptr __gmp_xp, mp_size_t __gmp_xsize, mp_srcptr __gmp_yp, mp_size_t __gmp_ysize)
{
  mp_limb_t __gmp_c;
  do { mp_size_t __gmp_i; mp_limb_t __gmp_x; __gmp_i = (__gmp_ysize); if (__gmp_i != 0) { if (__gmpn_add_n (__gmp_wp, __gmp_xp, __gmp_yp, __gmp_i)) { do { if (__gmp_i >= (__gmp_xsize)) { (__gmp_c) = 1; goto __gmp_done; } __gmp_x = (__gmp_xp)[__gmp_i]; } while ((((__gmp_wp)[__gmp_i++] = (__gmp_x + 1) & ((~ (static_cast<mp_limb_t> (0))) >> 0)) == 0)); } } if ((__gmp_wp) != (__gmp_xp)) do { mp_size_t __gmp_j; for (__gmp_j = (__gmp_i); __gmp_j < (__gmp_xsize); __gmp_j++) (__gmp_wp)[__gmp_j] = (__gmp_xp)[__gmp_j]; } while (0); (__gmp_c) = 0; __gmp_done: ; } while (0);
  return __gmp_c;
}




extern __inline__ __attribute__((__gnu_inline__))

mp_limb_t
__gmpn_add_1 (mp_ptr __gmp_dst, mp_srcptr __gmp_src, mp_size_t __gmp_size, mp_limb_t __gmp_n) throw ()
{
  mp_limb_t __gmp_c;
  do { mp_size_t __gmp_i; mp_limb_t __gmp_x, __gmp_r; __gmp_x = (__gmp_src)[0]; __gmp_r = __gmp_x + (__gmp_n); (__gmp_dst)[0] = __gmp_r; if (((__gmp_r) < ((__gmp_n)))) { (__gmp_c) = 1; for (__gmp_i = 1; __gmp_i < (__gmp_size);) { __gmp_x = (__gmp_src)[__gmp_i]; __gmp_r = __gmp_x + 1; (__gmp_dst)[__gmp_i] = __gmp_r; ++__gmp_i; if (!((__gmp_r) < (1))) { if ((__gmp_src) != (__gmp_dst)) do { mp_size_t __gmp_j; for (__gmp_j = (__gmp_i); __gmp_j < (__gmp_size); __gmp_j++) (__gmp_dst)[__gmp_j] = (__gmp_src)[__gmp_j]; } while (0); (__gmp_c) = 0; break; } } } else { if ((__gmp_src) != (__gmp_dst)) do { mp_size_t __gmp_j; for (__gmp_j = (1); __gmp_j < (__gmp_size); __gmp_j++) (__gmp_dst)[__gmp_j] = (__gmp_src)[__gmp_j]; } while (0); (__gmp_c) = 0; } } while (0);
  return __gmp_c;
}




extern __inline__ __attribute__((__gnu_inline__))

int
__gmpn_cmp (mp_srcptr __gmp_xp, mp_srcptr __gmp_yp, mp_size_t __gmp_size) throw ()
{
  int __gmp_result;
  do { mp_size_t __gmp_i; mp_limb_t __gmp_x, __gmp_y; (__gmp_result) = 0; __gmp_i = (__gmp_size); while (--__gmp_i >= 0) { __gmp_x = (__gmp_xp)[__gmp_i]; __gmp_y = (__gmp_yp)[__gmp_i]; if (__gmp_x != __gmp_y) { (__gmp_result) = (__gmp_x > __gmp_y ? 1 : -1); break; } } } while (0);
  return __gmp_result;
}




extern __inline__ __attribute__((__gnu_inline__))

mp_limb_t
__gmpn_sub (mp_ptr __gmp_wp, mp_srcptr __gmp_xp, mp_size_t __gmp_xsize, mp_srcptr __gmp_yp, mp_size_t __gmp_ysize)
{
  mp_limb_t __gmp_c;
  do { mp_size_t __gmp_i; mp_limb_t __gmp_x; __gmp_i = (__gmp_ysize); if (__gmp_i != 0) { if (__gmpn_sub_n (__gmp_wp, __gmp_xp, __gmp_yp, __gmp_i)) { do { if (__gmp_i >= (__gmp_xsize)) { (__gmp_c) = 1; goto __gmp_done; } __gmp_x = (__gmp_xp)[__gmp_i]; } while ((((__gmp_wp)[__gmp_i++] = (__gmp_x - 1) & ((~ (static_cast<mp_limb_t> (0))) >> 0)), __gmp_x == 0)); } } if ((__gmp_wp) != (__gmp_xp)) do { mp_size_t __gmp_j; for (__gmp_j = (__gmp_i); __gmp_j < (__gmp_xsize); __gmp_j++) (__gmp_wp)[__gmp_j] = (__gmp_xp)[__gmp_j]; } while (0); (__gmp_c) = 0; __gmp_done: ; } while (0);
  return __gmp_c;
}




extern __inline__ __attribute__((__gnu_inline__))

mp_limb_t
__gmpn_sub_1 (mp_ptr __gmp_dst, mp_srcptr __gmp_src, mp_size_t __gmp_size, mp_limb_t __gmp_n) throw ()
{
  mp_limb_t __gmp_c;
  do { mp_size_t __gmp_i; mp_limb_t __gmp_x, __gmp_r; __gmp_x = (__gmp_src)[0]; __gmp_r = __gmp_x - (__gmp_n); (__gmp_dst)[0] = __gmp_r; if (((__gmp_x) < ((__gmp_n)))) { (__gmp_c) = 1; for (__gmp_i = 1; __gmp_i < (__gmp_size);) { __gmp_x = (__gmp_src)[__gmp_i]; __gmp_r = __gmp_x - 1; (__gmp_dst)[__gmp_i] = __gmp_r; ++__gmp_i; if (!((__gmp_x) < (1))) { if ((__gmp_src) != (__gmp_dst)) do { mp_size_t __gmp_j; for (__gmp_j = (__gmp_i); __gmp_j < (__gmp_size); __gmp_j++) (__gmp_dst)[__gmp_j] = (__gmp_src)[__gmp_j]; } while (0); (__gmp_c) = 0; break; } } } else { if ((__gmp_src) != (__gmp_dst)) do { mp_size_t __gmp_j; for (__gmp_j = (1); __gmp_j < (__gmp_size); __gmp_j++) (__gmp_dst)[__gmp_j] = (__gmp_src)[__gmp_j]; } while (0); (__gmp_c) = 0; } } while (0);
  return __gmp_c;
}



}
# 2406 "C:/Xilinx/Vitis/2024.2/include/gmp.h"
                  std::ostream& operator<< (std::ostream &, mpz_srcptr);
                  std::ostream& operator<< (std::ostream &, mpq_srcptr);
                  std::ostream& operator<< (std::ostream &, mpf_srcptr);
                  std::istream& operator>> (std::istream &, mpz_ptr);
                  std::istream& operator>> (std::istream &, mpq_ptr);
                  std::istream& operator>> (std::istream &, mpf_ptr);
# 2426 "C:/Xilinx/Vitis/2024.2/include/gmp.h"
typedef __mpz_struct MP_INT;
typedef __mpq_struct MP_RAT;
# 2436 "C:/Xilinx/Vitis/2024.2/include/gmp.h"
enum
{
  GMP_ERROR_NONE = 0,
  GMP_ERROR_UNSUPPORTED_ARGUMENT = 1,
  GMP_ERROR_DIVISION_BY_ZERO = 2,
  GMP_ERROR_SQRT_OF_NEGATIVE = 4,
  GMP_ERROR_INVALID_ARGUMENT = 8
};
# 151 "C:/Xilinx/Vitis/2024.2/include/floating_point_v7_1_bitacc_cmodel.h" 2




# 1 "C:/Xilinx/Vitis/2024.2/include/mpfr.h" 1
# 58 "C:/Xilinx/Vitis/2024.2/include/mpfr.h"
typedef void mpfr_void;
typedef int mpfr_int;
typedef unsigned int mpfr_uint;
typedef long mpfr_long;
typedef unsigned long mpfr_ulong;
typedef size_t mpfr_size_t;
# 80 "C:/Xilinx/Vitis/2024.2/include/mpfr.h"
typedef enum {
  MPFR_RNDN=0,
  MPFR_RNDZ,
  MPFR_RNDU,
  MPFR_RNDD,
  MPFR_RNDA,
  MPFR_RNDF,
  MPFR_RNDNA=-1
} mpfr_rnd_t;
# 129 "C:/Xilinx/Vitis/2024.2/include/mpfr.h"
typedef long mpfr_prec_t;
typedef unsigned long mpfr_uprec_t;
# 142 "C:/Xilinx/Vitis/2024.2/include/mpfr.h"
typedef int mpfr_sign_t;
# 153 "C:/Xilinx/Vitis/2024.2/include/mpfr.h"
typedef long mpfr_exp_t;
typedef unsigned long mpfr_uexp_t;
# 178 "C:/Xilinx/Vitis/2024.2/include/mpfr.h"
typedef struct {
  mpfr_prec_t _mpfr_prec;
  mpfr_sign_t _mpfr_sign;
  mpfr_exp_t _mpfr_exp;
  mp_limb_t *_mpfr_d;
} __mpfr_struct;
# 204 "C:/Xilinx/Vitis/2024.2/include/mpfr.h"
typedef __mpfr_struct mpfr_t[1];
typedef __mpfr_struct *mpfr_ptr;
typedef const __mpfr_struct *mpfr_srcptr;
# 217 "C:/Xilinx/Vitis/2024.2/include/mpfr.h"
typedef enum {
  MPFR_NAN_KIND = 0,
  MPFR_INF_KIND = 1, MPFR_ZERO_KIND = 2, MPFR_REGULAR_KIND = 3
} mpfr_kind_t;
# 277 "C:/Xilinx/Vitis/2024.2/include/mpfr.h"
extern "C" {


                const char * mpfr_get_version (void);
                const char * mpfr_get_patches (void);
                int mpfr_buildopt_tls_p (void);
                int mpfr_buildopt_decimal_p (void);
                int mpfr_buildopt_gmpinternals_p (void);
                const char * mpfr_buildopt_tune_case (void);

                mpfr_exp_t mpfr_get_emin (void);
                int mpfr_set_emin (mpfr_exp_t);
                mpfr_exp_t mpfr_get_emin_min (void);
                mpfr_exp_t mpfr_get_emin_max (void);
                mpfr_exp_t mpfr_get_emax (void);
                int mpfr_set_emax (mpfr_exp_t);
                mpfr_exp_t mpfr_get_emax_min (void);
                mpfr_exp_t mpfr_get_emax_max (void);

                void mpfr_set_default_rounding_mode (mpfr_rnd_t);
                mpfr_rnd_t mpfr_get_default_rounding_mode (void);
                const char *
   mpfr_print_rnd_mode (mpfr_rnd_t);

                void mpfr_clear_flags (void);
                void mpfr_clear_underflow (void);
                void mpfr_clear_overflow (void);
                void mpfr_clear_divby0 (void);
                void mpfr_clear_nanflag (void);
                void mpfr_clear_inexflag (void);
                void mpfr_clear_erangeflag (void);

                void mpfr_set_underflow (void);
                void mpfr_set_overflow (void);
                void mpfr_set_divby0 (void);
                void mpfr_set_nanflag (void);
                void mpfr_set_inexflag (void);
                void mpfr_set_erangeflag (void);

                int mpfr_underflow_p (void);
                int mpfr_overflow_p (void);
                int mpfr_divby0_p (void);
                int mpfr_nanflag_p (void);
                int mpfr_inexflag_p (void);
                int mpfr_erangeflag_p (void);

                int
  mpfr_check_range (mpfr_ptr, int, mpfr_rnd_t);

                void mpfr_init2 (mpfr_ptr, mpfr_prec_t);
                void mpfr_init (mpfr_ptr);
                void mpfr_clear (mpfr_ptr);

                void
  mpfr_inits2 (mpfr_prec_t, mpfr_ptr, ...) __attribute__ ((sentinel));
                void
  mpfr_inits (mpfr_ptr, ...) __attribute__ ((sentinel));
                void
  mpfr_clears (mpfr_ptr, ...) __attribute__ ((sentinel));

                int
  mpfr_prec_round (mpfr_ptr, mpfr_prec_t, mpfr_rnd_t);
                int
  mpfr_can_round (mpfr_srcptr, mpfr_exp_t, mpfr_rnd_t, mpfr_rnd_t, mpfr_prec_t);

                mpfr_prec_t mpfr_min_prec (mpfr_srcptr);

                mpfr_exp_t mpfr_get_exp (mpfr_srcptr);
                int mpfr_set_exp (mpfr_ptr, mpfr_exp_t);
                mpfr_prec_t mpfr_get_prec (mpfr_srcptr);
                void mpfr_set_prec (mpfr_ptr, mpfr_prec_t);
                void mpfr_set_prec_raw (mpfr_ptr, mpfr_prec_t);
                void mpfr_set_default_prec (mpfr_prec_t);
                mpfr_prec_t mpfr_get_default_prec (void);

                int mpfr_set_d (mpfr_ptr, double, mpfr_rnd_t);
                int mpfr_set_flt (mpfr_ptr, float, mpfr_rnd_t);




                int
  mpfr_set_ld (mpfr_ptr, long double, mpfr_rnd_t);
                int
  mpfr_set_z (mpfr_ptr, mpz_srcptr, mpfr_rnd_t);
                int
  mpfr_set_z_2exp (mpfr_ptr, mpz_srcptr, mpfr_exp_t, mpfr_rnd_t);
                void mpfr_set_nan (mpfr_ptr);
                void mpfr_set_inf (mpfr_ptr, int);
                void mpfr_set_zero (mpfr_ptr, int);
                int
  mpfr_set_f (mpfr_ptr, mpf_srcptr, mpfr_rnd_t);
                int
  mpfr_get_f (mpf_ptr, mpfr_srcptr, mpfr_rnd_t);
                int mpfr_set_si (mpfr_ptr, long, mpfr_rnd_t);
                int
  mpfr_set_ui (mpfr_ptr, unsigned long, mpfr_rnd_t);
                int
  mpfr_set_si_2exp (mpfr_ptr, long, mpfr_exp_t, mpfr_rnd_t);
                int
  mpfr_set_ui_2exp (mpfr_ptr,unsigned long,mpfr_exp_t,mpfr_rnd_t);
                int
  mpfr_set_q (mpfr_ptr, mpq_srcptr, mpfr_rnd_t);
                int
  mpfr_set_str (mpfr_ptr, const char *, int, mpfr_rnd_t);
                int
  mpfr_init_set_str (mpfr_ptr, const char *, int, mpfr_rnd_t);

                int
  mpfr_set4 (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t, int);
                int
  mpfr_abs (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
                int
  mpfr_set (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
                int mpfr_neg (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
                int mpfr_signbit (mpfr_srcptr);
                int
  mpfr_setsign (mpfr_ptr, mpfr_srcptr, int, mpfr_rnd_t);
                int
  mpfr_copysign (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);

                mpfr_exp_t mpfr_get_z_2exp (mpz_ptr, mpfr_srcptr);
                float mpfr_get_flt (mpfr_srcptr, mpfr_rnd_t);
                double mpfr_get_d (mpfr_srcptr, mpfr_rnd_t);




                long double mpfr_get_ld (mpfr_srcptr, mpfr_rnd_t);

                double mpfr_get_d1 (mpfr_srcptr);
                double mpfr_get_d_2exp (long*, mpfr_srcptr, mpfr_rnd_t);

                long double mpfr_get_ld_2exp (long*, mpfr_srcptr, mpfr_rnd_t);

                int mpfr_frexp (mpfr_exp_t*, mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);

                long mpfr_get_si (mpfr_srcptr, mpfr_rnd_t);
                unsigned long mpfr_get_ui (mpfr_srcptr, mpfr_rnd_t);

                char*mpfr_get_str (char*, mpfr_exp_t*, int, size_t, mpfr_srcptr, mpfr_rnd_t);

                int mpfr_get_z (mpz_ptr z, mpfr_srcptr f, mpfr_rnd_t);


                void mpfr_free_str (char *);

                int mpfr_urandom (mpfr_ptr, gmp_randstate_t, mpfr_rnd_t);

                int mpfr_grandom (mpfr_ptr, mpfr_ptr, gmp_randstate_t, mpfr_rnd_t);

                int mpfr_urandomb (mpfr_ptr, gmp_randstate_t);

                void mpfr_nextabove (mpfr_ptr);
                void mpfr_nextbelow (mpfr_ptr);
                void mpfr_nexttoward (mpfr_ptr, mpfr_srcptr);

                int mpfr_printf (const char*, ...);
                int mpfr_asprintf (char**, const char*, ...);

                int mpfr_sprintf (char*, const char*, ...);

                int mpfr_snprintf (char*, size_t, const char*, ...);


                int mpfr_pow (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);

                int mpfr_pow_si (mpfr_ptr, mpfr_srcptr, long int, mpfr_rnd_t);

                int mpfr_pow_ui (mpfr_ptr, mpfr_srcptr, unsigned long int, mpfr_rnd_t);

                int mpfr_ui_pow_ui (mpfr_ptr, unsigned long int, unsigned long int, mpfr_rnd_t);

                int mpfr_ui_pow (mpfr_ptr, unsigned long int, mpfr_srcptr, mpfr_rnd_t);

                int mpfr_pow_z (mpfr_ptr, mpfr_srcptr, mpz_srcptr, mpfr_rnd_t);


                int mpfr_sqrt (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);

                int mpfr_sqrt_ui (mpfr_ptr, unsigned long, mpfr_rnd_t);

                int mpfr_rec_sqrt (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);


                int mpfr_add (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);

                int mpfr_sub (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);

                int mpfr_mul (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);

                int mpfr_div (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);


                int mpfr_add_ui (mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t);

                int mpfr_sub_ui (mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t);

                int mpfr_ui_sub (mpfr_ptr, unsigned long, mpfr_srcptr, mpfr_rnd_t);

                int mpfr_mul_ui (mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t);

                int mpfr_div_ui (mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t);

                int mpfr_ui_div (mpfr_ptr, unsigned long, mpfr_srcptr, mpfr_rnd_t);


                int mpfr_add_si (mpfr_ptr, mpfr_srcptr, long int, mpfr_rnd_t);

                int mpfr_sub_si (mpfr_ptr, mpfr_srcptr, long int, mpfr_rnd_t);

                int mpfr_si_sub (mpfr_ptr, long int, mpfr_srcptr, mpfr_rnd_t);

                int mpfr_mul_si (mpfr_ptr, mpfr_srcptr, long int, mpfr_rnd_t);

                int mpfr_div_si (mpfr_ptr, mpfr_srcptr, long int, mpfr_rnd_t);

                int mpfr_si_div (mpfr_ptr, long int, mpfr_srcptr, mpfr_rnd_t);


                int mpfr_add_d (mpfr_ptr, mpfr_srcptr, double, mpfr_rnd_t);

                int mpfr_sub_d (mpfr_ptr, mpfr_srcptr, double, mpfr_rnd_t);

                int mpfr_d_sub (mpfr_ptr, double, mpfr_srcptr, mpfr_rnd_t);

                int mpfr_mul_d (mpfr_ptr, mpfr_srcptr, double, mpfr_rnd_t);

                int mpfr_div_d (mpfr_ptr, mpfr_srcptr, double, mpfr_rnd_t);

                int mpfr_d_div (mpfr_ptr, double, mpfr_srcptr, mpfr_rnd_t);


                int mpfr_sqr (mpfr_ptr, mpfr_srcptr,mpfr_rnd_t);

                int mpfr_const_pi (mpfr_ptr, mpfr_rnd_t);
                int mpfr_const_log2 (mpfr_ptr, mpfr_rnd_t);
                int mpfr_const_euler (mpfr_ptr, mpfr_rnd_t);
                int mpfr_const_catalan (mpfr_ptr, mpfr_rnd_t);

                int mpfr_agm (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);


                int mpfr_log (mpfr_ptr, mpfr_srcptr,mpfr_rnd_t);
                int mpfr_log2 (mpfr_ptr,mpfr_srcptr,mpfr_rnd_t);
                int mpfr_log10 (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);

                int mpfr_log1p (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);


                int mpfr_exp (mpfr_ptr, mpfr_srcptr,mpfr_rnd_t);
                int mpfr_exp2 (mpfr_ptr,mpfr_srcptr,mpfr_rnd_t);
                int mpfr_exp10 (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);

                int mpfr_expm1 (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);

                int mpfr_eint (mpfr_ptr,mpfr_srcptr,mpfr_rnd_t);
                int mpfr_li2 (mpfr_ptr,mpfr_srcptr,mpfr_rnd_t);

                int mpfr_cmp (mpfr_srcptr, mpfr_srcptr);
                int mpfr_cmp3 (mpfr_srcptr, mpfr_srcptr, int);
                int mpfr_cmp_d (mpfr_srcptr, double);
                int mpfr_cmp_ld (mpfr_srcptr, long double);
                int mpfr_cmpabs (mpfr_srcptr, mpfr_srcptr);
                int mpfr_cmp_ui (mpfr_srcptr, unsigned long);
                int mpfr_cmp_si (mpfr_srcptr, long);
                int mpfr_cmp_ui_2exp (mpfr_srcptr, unsigned long, mpfr_exp_t);

                int mpfr_cmp_si_2exp (mpfr_srcptr, long, mpfr_exp_t);

                void mpfr_reldiff (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);

                int mpfr_eq (mpfr_srcptr, mpfr_srcptr, unsigned long);

                int mpfr_sgn (mpfr_srcptr);

                int mpfr_mul_2exp (mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t);

                int mpfr_div_2exp (mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t);

                int mpfr_mul_2ui (mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t);

                int mpfr_div_2ui (mpfr_ptr, mpfr_srcptr, unsigned long, mpfr_rnd_t);

                int mpfr_mul_2si (mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t);

                int mpfr_div_2si (mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t);


                int mpfr_rint (mpfr_ptr,mpfr_srcptr, mpfr_rnd_t);
                int mpfr_round (mpfr_ptr, mpfr_srcptr);
                int mpfr_trunc (mpfr_ptr, mpfr_srcptr);
                int mpfr_ceil (mpfr_ptr, mpfr_srcptr);
                int mpfr_floor (mpfr_ptr, mpfr_srcptr);
                int mpfr_rint_round (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);

                int mpfr_rint_trunc (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);

                int mpfr_rint_ceil (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);

                int mpfr_rint_floor (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);

                int mpfr_frac (mpfr_ptr,mpfr_srcptr,mpfr_rnd_t);
                int mpfr_modf (mpfr_ptr, mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);

                int mpfr_remquo (mpfr_ptr, long*, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);

                int mpfr_remainder (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);

                int mpfr_fmod (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);


                int mpfr_fits_ulong_p (mpfr_srcptr, mpfr_rnd_t);
                int mpfr_fits_slong_p (mpfr_srcptr, mpfr_rnd_t);
                int mpfr_fits_uint_p (mpfr_srcptr, mpfr_rnd_t);
                int mpfr_fits_sint_p (mpfr_srcptr, mpfr_rnd_t);
                int mpfr_fits_ushort_p (mpfr_srcptr, mpfr_rnd_t);
                int mpfr_fits_sshort_p (mpfr_srcptr, mpfr_rnd_t);
                int mpfr_fits_uintmax_p (mpfr_srcptr,mpfr_rnd_t);
                int mpfr_fits_intmax_p (mpfr_srcptr, mpfr_rnd_t);

                void mpfr_extract (mpz_ptr, mpfr_srcptr, unsigned int);

                void mpfr_swap (mpfr_ptr, mpfr_ptr);
                void mpfr_dump (mpfr_srcptr);

                int mpfr_nan_p (mpfr_srcptr);
                int mpfr_inf_p (mpfr_srcptr);
                int mpfr_number_p (mpfr_srcptr);
                int mpfr_integer_p (mpfr_srcptr);
                int mpfr_zero_p (mpfr_srcptr);
                int mpfr_regular_p (mpfr_srcptr);

                int mpfr_greater_p (mpfr_srcptr, mpfr_srcptr);
                int mpfr_greaterequal_p (mpfr_srcptr, mpfr_srcptr);

                int mpfr_less_p (mpfr_srcptr, mpfr_srcptr);
                int mpfr_lessequal_p (mpfr_srcptr, mpfr_srcptr);
                int mpfr_lessgreater_p (mpfr_srcptr,mpfr_srcptr);
                int mpfr_equal_p (mpfr_srcptr, mpfr_srcptr);
                int mpfr_unordered_p (mpfr_srcptr, mpfr_srcptr);

                int mpfr_atanh (mpfr_ptr,mpfr_srcptr,mpfr_rnd_t);
                int mpfr_acosh (mpfr_ptr,mpfr_srcptr,mpfr_rnd_t);
                int mpfr_asinh (mpfr_ptr,mpfr_srcptr,mpfr_rnd_t);
                int mpfr_cosh (mpfr_ptr,mpfr_srcptr, mpfr_rnd_t);
                int mpfr_sinh (mpfr_ptr,mpfr_srcptr, mpfr_rnd_t);
                int mpfr_tanh (mpfr_ptr,mpfr_srcptr, mpfr_rnd_t);
                int mpfr_sinh_cosh (mpfr_ptr, mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);


                int mpfr_sech (mpfr_ptr, mpfr_srcptr,mpfr_rnd_t);
                int mpfr_csch (mpfr_ptr, mpfr_srcptr,mpfr_rnd_t);
                int mpfr_coth (mpfr_ptr, mpfr_srcptr,mpfr_rnd_t);

                int mpfr_acos (mpfr_ptr,mpfr_srcptr,mpfr_rnd_t);
                int mpfr_asin (mpfr_ptr,mpfr_srcptr,mpfr_rnd_t);
                int mpfr_atan (mpfr_ptr,mpfr_srcptr,mpfr_rnd_t);
                int mpfr_sin (mpfr_ptr, mpfr_srcptr,mpfr_rnd_t);
                int mpfr_sin_cos (mpfr_ptr, mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);

                int mpfr_cos (mpfr_ptr, mpfr_srcptr,mpfr_rnd_t);
                int mpfr_tan (mpfr_ptr, mpfr_srcptr,mpfr_rnd_t);
                int mpfr_atan2 (mpfr_ptr,mpfr_srcptr,mpfr_srcptr, mpfr_rnd_t);

                int mpfr_sec (mpfr_ptr, mpfr_srcptr,mpfr_rnd_t);
                int mpfr_csc (mpfr_ptr, mpfr_srcptr,mpfr_rnd_t);
                int mpfr_cot (mpfr_ptr, mpfr_srcptr,mpfr_rnd_t);

                int mpfr_hypot (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);

                int mpfr_erf (mpfr_ptr, mpfr_srcptr,mpfr_rnd_t);
                int mpfr_erfc (mpfr_ptr, mpfr_srcptr,mpfr_rnd_t);
                int mpfr_cbrt (mpfr_ptr,mpfr_srcptr,mpfr_rnd_t);
                int mpfr_root (mpfr_ptr,mpfr_srcptr,unsigned long,mpfr_rnd_t);
                int mpfr_gamma (mpfr_ptr,mpfr_srcptr,mpfr_rnd_t);
                int mpfr_lngamma (mpfr_ptr,mpfr_srcptr,mpfr_rnd_t);
                int mpfr_lgamma (mpfr_ptr,int*,mpfr_srcptr,mpfr_rnd_t);
                int mpfr_digamma (mpfr_ptr,mpfr_srcptr,mpfr_rnd_t);
                int mpfr_zeta (mpfr_ptr,mpfr_srcptr,mpfr_rnd_t);
                int mpfr_zeta_ui (mpfr_ptr,unsigned long,mpfr_rnd_t);
                int mpfr_fac_ui (mpfr_ptr, unsigned long int, mpfr_rnd_t);

                int mpfr_j0 (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
                int mpfr_j1 (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
                int mpfr_jn (mpfr_ptr, long, mpfr_srcptr, mpfr_rnd_t);

                int mpfr_y0 (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
                int mpfr_y1 (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
                int mpfr_yn (mpfr_ptr, long, mpfr_srcptr, mpfr_rnd_t);


                int mpfr_ai (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);

                int mpfr_min (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);

                int mpfr_max (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);

                int mpfr_dim (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);


                int mpfr_mul_z (mpfr_ptr, mpfr_srcptr, mpz_srcptr, mpfr_rnd_t);

                int mpfr_div_z (mpfr_ptr, mpfr_srcptr, mpz_srcptr, mpfr_rnd_t);

                int mpfr_add_z (mpfr_ptr, mpfr_srcptr, mpz_srcptr, mpfr_rnd_t);

                int mpfr_sub_z (mpfr_ptr, mpfr_srcptr, mpz_srcptr, mpfr_rnd_t);

                int mpfr_z_sub (mpfr_ptr, mpz_srcptr, mpfr_srcptr, mpfr_rnd_t);

                int mpfr_cmp_z (mpfr_srcptr, mpz_srcptr);

                int mpfr_mul_q (mpfr_ptr, mpfr_srcptr, mpq_srcptr, mpfr_rnd_t);

                int mpfr_div_q (mpfr_ptr, mpfr_srcptr, mpq_srcptr, mpfr_rnd_t);

                int mpfr_add_q (mpfr_ptr, mpfr_srcptr, mpq_srcptr, mpfr_rnd_t);

                int mpfr_sub_q (mpfr_ptr, mpfr_srcptr, mpq_srcptr, mpfr_rnd_t);

                int mpfr_cmp_q (mpfr_srcptr, mpq_srcptr);

                int mpfr_cmp_f (mpfr_srcptr, mpf_srcptr);

                int mpfr_fma (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);

                int mpfr_fms (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);

                int mpfr_sum (mpfr_ptr, mpfr_ptr *const, unsigned long, mpfr_rnd_t);


                void mpfr_free_cache (void);

                int mpfr_subnormalize (mpfr_ptr, int, mpfr_rnd_t);


                int mpfr_strtofr (mpfr_ptr, const char *, char **, int, mpfr_rnd_t);


                size_t mpfr_custom_get_size (mpfr_prec_t);
                void mpfr_custom_init (void *, mpfr_prec_t);
                void * mpfr_custom_get_significand (mpfr_srcptr);
                mpfr_exp_t mpfr_custom_get_exp (mpfr_srcptr);
                void mpfr_custom_move (mpfr_ptr, void *);
                void mpfr_custom_init_set (mpfr_ptr, int, mpfr_exp_t, mpfr_prec_t, void *);

                int mpfr_custom_get_kind (mpfr_srcptr);


}
# 959 "C:/Xilinx/Vitis/2024.2/include/mpfr.h"
extern "C" {
# 968 "C:/Xilinx/Vitis/2024.2/include/mpfr.h"
                int __gmpfr_set_sj (mpfr_t, intmax_t, mpfr_rnd_t);
                int
  __gmpfr_set_sj_2exp (mpfr_t, intmax_t, intmax_t, mpfr_rnd_t);
                int __gmpfr_set_uj (mpfr_t, uintmax_t, mpfr_rnd_t);
                int
  __gmpfr_set_uj_2exp (mpfr_t, uintmax_t, intmax_t, mpfr_rnd_t);
                intmax_t __gmpfr_mpfr_get_sj (mpfr_srcptr, mpfr_rnd_t);
                uintmax_t __gmpfr_mpfr_get_uj (mpfr_srcptr, mpfr_rnd_t);


}
# 991 "C:/Xilinx/Vitis/2024.2/include/mpfr.h"
extern "C" {




                size_t __gmpfr_inp_str (mpfr_ptr, FILE*, int, mpfr_rnd_t);

                size_t __gmpfr_out_str (FILE*, int, size_t, mpfr_srcptr, mpfr_rnd_t);


                int __gmpfr_fprintf (FILE*, const char*, ...);



}
# 156 "C:/Xilinx/Vitis/2024.2/include/floating_point_v7_1_bitacc_cmodel.h" 2



typedef long xip_fpo_prec_t;


typedef int xip_fpo_sign_t;


typedef long xip_fpo_exp_t;


typedef struct {
  xip_fpo_prec_t _xip_fpo_exp_prec;
  xip_fpo_prec_t _xip_fpo_mant_prec;
  xip_fpo_sign_t _xip_fpo_sign;
  xip_fpo_exp_t _xip_fpo_exp;
  mp_limb_t *_xip_fpo_d;
} __xip_fpo_struct;


typedef struct {
  xip_fpo_prec_t _xip_fpo_i_prec;
  xip_fpo_prec_t _xip_fpo_frac_prec;
  xint64 _xip_fpo_i;
  xint64 _xip_fpo_frac;
} __xip_fpo_fix_struct;


typedef __xip_fpo_struct xip_fpo_t[1];
typedef __xip_fpo_fix_struct xip_fpo_fix_t[1];


typedef __xip_fpo_struct *xip_fpo_ptr;
typedef const __xip_fpo_struct *xip_fpo_srcptr;
typedef __xip_fpo_fix_struct *xip_fpo_fix_ptr;
typedef const __xip_fpo_fix_struct *xip_fpo_fix_srcptr;
# 204 "C:/Xilinx/Vitis/2024.2/include/floating_point_v7_1_bitacc_cmodel.h"
typedef int xip_fpo_exc_t;


extern "C" {


typedef struct xil_fpo_accum_state xil_fpo_accum_state;


              const char * xip_fpo_get_version (void);


              void xip_fpo_init2 (xip_fpo_ptr, xip_fpo_prec_t, xip_fpo_prec_t);
              void xip_fpo_fix_init2 (xip_fpo_fix_ptr, xip_fpo_prec_t, xip_fpo_prec_t);
              void xip_fpo_inits2 (xip_fpo_prec_t, xip_fpo_prec_t, xip_fpo_ptr, ...) __attribute__ ((sentinel));
              void xip_fpo_fix_inits2 (xip_fpo_prec_t, xip_fpo_prec_t, xip_fpo_fix_ptr, ...) __attribute__ ((sentinel));
              void xip_fpo_clear (xip_fpo_ptr);
              void xip_fpo_fix_clear (xip_fpo_fix_ptr);
              void xip_fpo_clears (xip_fpo_ptr, ...) __attribute__ ((sentinel));
              void xip_fpo_fix_clears (xip_fpo_fix_ptr, ...) __attribute__ ((sentinel));
              void xip_fpo_set_prec (xip_fpo_ptr, xip_fpo_prec_t, xip_fpo_prec_t);
              void xip_fpo_fix_set_prec (xip_fpo_fix_ptr, xip_fpo_prec_t, xip_fpo_prec_t);
              xip_fpo_prec_t xip_fpo_get_prec_mant (xip_fpo_ptr);
              xip_fpo_prec_t xip_fpo_get_prec_exp (xip_fpo_ptr);
              xip_fpo_prec_t xip_fpo_fix_get_prec_frac (xip_fpo_fix_ptr);
              xip_fpo_prec_t xip_fpo_fix_get_prec_int (xip_fpo_fix_ptr);


              xip_fpo_exc_t xip_fpo_set (xip_fpo_ptr, xip_fpo_srcptr);
              xip_fpo_exc_t xip_fpo_fix_set (xip_fpo_fix_ptr, xip_fpo_fix_srcptr);
              xip_fpo_exc_t xip_fpo_set_ui (xip_fpo_ptr, unsigned long);
              xip_fpo_exc_t xip_fpo_fix_set_ui (xip_fpo_fix_ptr, unsigned long);
              xip_fpo_exc_t xip_fpo_set_si (xip_fpo_ptr, long);
              xip_fpo_exc_t xip_fpo_fix_set_si (xip_fpo_fix_ptr, long);
              xip_fpo_exc_t xip_fpo_set_uj (xip_fpo_ptr, uintmax_t);
              xip_fpo_exc_t xip_fpo_fix_set_uj (xip_fpo_fix_ptr, uintmax_t);
              xip_fpo_exc_t xip_fpo_set_sj (xip_fpo_ptr, intmax_t);
              xip_fpo_exc_t xip_fpo_fix_set_sj (xip_fpo_fix_ptr, intmax_t);
              xip_fpo_exc_t xip_fpo_set_flt (xip_fpo_ptr, float);
              xip_fpo_exc_t xip_fpo_fix_set_flt (xip_fpo_fix_ptr, float);
              xip_fpo_exc_t xip_fpo_set_d (xip_fpo_ptr, double);
              xip_fpo_exc_t xip_fpo_fix_set_d (xip_fpo_fix_ptr, double);
              xip_fpo_exc_t xip_fpo_set_z (xip_fpo_ptr, mpz_srcptr);
              xip_fpo_exc_t xip_fpo_fix_set_z (xip_fpo_fix_ptr, mpz_srcptr);
              xip_fpo_exc_t xip_fpo_set_q (xip_fpo_ptr, mpq_srcptr);
              xip_fpo_exc_t xip_fpo_fix_set_q (xip_fpo_fix_ptr, mpq_srcptr);
              xip_fpo_exc_t xip_fpo_set_f (xip_fpo_ptr, mpf_srcptr);
              xip_fpo_exc_t xip_fpo_fix_set_f (xip_fpo_fix_ptr, mpf_srcptr);
              xip_fpo_exc_t xip_fpo_set_fr (xip_fpo_ptr, mpfr_srcptr);
              xip_fpo_exc_t xip_fpo_fix_set_fr (xip_fpo_fix_ptr, mpfr_srcptr);
              xip_fpo_exc_t xip_fpo_set_ui_2exp (xip_fpo_ptr, unsigned long, xip_fpo_exp_t);
              xip_fpo_exc_t xip_fpo_set_si_2exp (xip_fpo_ptr, long, xip_fpo_exp_t);
              xip_fpo_exc_t xip_fpo_set_uj_2exp (xip_fpo_ptr, uintmax_t, intmax_t);
              xip_fpo_exc_t xip_fpo_set_sj_2exp (xip_fpo_ptr, intmax_t, intmax_t);
              xip_fpo_exc_t xip_fpo_set_str (xip_fpo_ptr, const char *, int);
              xip_fpo_exc_t xip_fpo_fix_set_str (xip_fpo_fix_ptr, const char *, int);
              void xip_fpo_set_nan (xip_fpo_ptr);
              void xip_fpo_set_inf (xip_fpo_ptr, int);
              void xip_fpo_set_zero (xip_fpo_ptr, int);


              unsigned long xip_fpo_get_ui (xip_fpo_srcptr);
              unsigned long xip_fpo_fix_get_ui (xip_fpo_fix_srcptr);
              long xip_fpo_get_si (xip_fpo_srcptr);
              long xip_fpo_fix_get_si (xip_fpo_fix_srcptr);
              uintmax_t xip_fpo_get_uj (xip_fpo_srcptr);
              uintmax_t xip_fpo_fix_get_uj (xip_fpo_fix_srcptr);
              intmax_t xip_fpo_get_sj (xip_fpo_srcptr);
              intmax_t xip_fpo_fix_get_sj (xip_fpo_fix_srcptr);
              float xip_fpo_get_flt (xip_fpo_srcptr);
              float xip_fpo_fix_get_flt (xip_fpo_fix_srcptr);
              double xip_fpo_get_d (xip_fpo_srcptr);
              double xip_fpo_fix_get_d (xip_fpo_fix_srcptr);
              double xip_fpo_get_d_2exp (long *, xip_fpo_srcptr);
              xip_fpo_exc_t xip_fpo_get_z (mpz_ptr, xip_fpo_srcptr);
              xip_fpo_exc_t xip_fpo_fix_get_z (mpz_ptr, xip_fpo_fix_srcptr);
              xip_fpo_exc_t xip_fpo_get_f (mpf_ptr, xip_fpo_srcptr);
              xip_fpo_exc_t xip_fpo_fix_get_f (mpf_ptr, xip_fpo_fix_srcptr);
              xip_fpo_exc_t xip_fpo_get_fr (mpfr_ptr, xip_fpo_srcptr);
              xip_fpo_exc_t xip_fpo_fix_get_fr (mpfr_ptr, xip_fpo_fix_srcptr);
              char * xip_fpo_get_str (char *, xip_fpo_exp_t *, int, int, xip_fpo_srcptr);
              char * xip_fpo_fix_get_str (char *, int, xip_fpo_fix_srcptr);
              void xip_fpo_free_str (char *);
              void xip_fpo_fix_free_str (char *);
              int xip_fpo_sizeinbase (xip_fpo_srcptr, int);
              int xip_fpo_fix_sizeinbase (xip_fpo_fix_srcptr, int);


              xip_fpo_exc_t xip_fpo_add (xip_fpo_ptr, xip_fpo_srcptr, xip_fpo_srcptr);
              xip_fpo_exc_t xip_fpo_add_flt (float *, float, float);
              xip_fpo_exc_t xip_fpo_add_d (double *, double, double);
              xip_fpo_exc_t xip_fpo_sub (xip_fpo_ptr, xip_fpo_srcptr, xip_fpo_srcptr);
              xip_fpo_exc_t xip_fpo_sub_flt (float *, float, float);
              xip_fpo_exc_t xip_fpo_sub_d (double *, double, double);
              xip_fpo_exc_t xip_fpo_mul (xip_fpo_ptr, xip_fpo_srcptr, xip_fpo_srcptr);
              xip_fpo_exc_t xip_fpo_mul_flt (float *, float, float);
              xip_fpo_exc_t xip_fpo_mul_d (double *, double, double);
              xip_fpo_exc_t xip_fpo_fma (xip_fpo_ptr, xip_fpo_srcptr, xip_fpo_srcptr, xip_fpo_srcptr);
              xip_fpo_exc_t xip_fpo_fma_flt (float *, float, float, float);
              xip_fpo_exc_t xip_fpo_fma_d (double *, double, double, double);
              xip_fpo_exc_t xip_fpo_fms (xip_fpo_ptr, xip_fpo_srcptr, xip_fpo_srcptr, xip_fpo_srcptr);
              xip_fpo_exc_t xip_fpo_fms_flt (float *, float, float, float);
              xip_fpo_exc_t xip_fpo_fms_d (double *, double, double, double);
              xip_fpo_exc_t xip_fpo_div (xip_fpo_ptr, xip_fpo_srcptr, xip_fpo_srcptr);
              xip_fpo_exc_t xip_fpo_div_flt (float *, float, float);
              xip_fpo_exc_t xip_fpo_div_d (double *, double, double);
              xip_fpo_exc_t xip_fpo_rec (xip_fpo_ptr, xip_fpo_srcptr);
              xip_fpo_exc_t xip_fpo_rec_flt (float *, float);
              xip_fpo_exc_t xip_fpo_rec_d (double *, double);
              xip_fpo_exc_t xip_fpo_abs (xip_fpo_ptr, xip_fpo_srcptr);
              xip_fpo_exc_t xip_fpo_abs_flt (float *, float);
              xip_fpo_exc_t xip_fpo_abs_d (double *, double);
              xip_fpo_exc_t xip_fpo_log (xip_fpo_ptr, xip_fpo_srcptr);
              xip_fpo_exc_t xip_fpo_log_flt (float *, float);
              xip_fpo_exc_t xip_fpo_log_d (double *, double);
              int xip_fpo_exp_array (xip_fpo_t * , xip_fpo_t * , xip_fpo_exc_t *, unsigned long long);
              void xip_fpo_exp_flt_array (float * , float * , xip_fpo_exc_t *, unsigned long long);
              void xip_fpo_exp_d_array (double * , double * , xip_fpo_exc_t *, unsigned long long);
              xip_fpo_exc_t xip_fpo_exp (xip_fpo_ptr , xip_fpo_srcptr );
              xip_fpo_exc_t xip_fpo_exp_flt (float * , float );
              xip_fpo_exc_t xip_fpo_exp_d (double * , double );
              struct xil_fpo_accum_state * xip_fpo_accum_create_state (int , int , int , int , int);
              void xip_fpo_accum_reset_state (struct xil_fpo_accum_state *);
              void xip_fpo_accum_destroy_state (struct xil_fpo_accum_state *);
              xip_fpo_exc_t xip_fpo_accum_sample (xip_fpo_t, xip_fpo_t, bool, struct xil_fpo_accum_state *);
              xip_fpo_exc_t xip_fpo_accum_sample_flt (float *, float , bool, struct xil_fpo_accum_state *);
              xip_fpo_exc_t xip_fpo_accum_sample_d (double *, double , bool, struct xil_fpo_accum_state *);
              xip_fpo_exc_t xip_fpo_sqrt (xip_fpo_ptr, xip_fpo_srcptr);
              xip_fpo_exc_t xip_fpo_sqrt_flt (float *, float);
              xip_fpo_exc_t xip_fpo_sqrt_d (double *, double);
              xip_fpo_exc_t xip_fpo_recsqrt (xip_fpo_ptr, xip_fpo_srcptr);
              xip_fpo_exc_t xip_fpo_recsqrt_flt (float *, float);
              xip_fpo_exc_t xip_fpo_recsqrt_d (double *, double);
              xip_fpo_exc_t xip_fpo_unordered (int *, xip_fpo_srcptr, xip_fpo_srcptr);
              xip_fpo_exc_t xip_fpo_unordered_flt (int *, float, float);
              xip_fpo_exc_t xip_fpo_unordered_d (int *, double, double);
              xip_fpo_exc_t xip_fpo_equal (int *, xip_fpo_srcptr, xip_fpo_srcptr);
              xip_fpo_exc_t xip_fpo_equal_flt (int *, float, float);
              xip_fpo_exc_t xip_fpo_equal_d (int *, double, double);
              xip_fpo_exc_t xip_fpo_less (int *, xip_fpo_srcptr, xip_fpo_srcptr);
              xip_fpo_exc_t xip_fpo_less_flt (int *, float, float);
              xip_fpo_exc_t xip_fpo_less_d (int *, double, double);
              xip_fpo_exc_t xip_fpo_lessequal (int *, xip_fpo_srcptr, xip_fpo_srcptr);
              xip_fpo_exc_t xip_fpo_lessequal_flt (int *, float, float);
              xip_fpo_exc_t xip_fpo_lessequal_d (int *, double, double);
              xip_fpo_exc_t xip_fpo_greater (int *, xip_fpo_srcptr, xip_fpo_srcptr);
              xip_fpo_exc_t xip_fpo_greater_flt (int *, float, float);
              xip_fpo_exc_t xip_fpo_greater_d (int *, double, double);
              xip_fpo_exc_t xip_fpo_greaterequal (int *, xip_fpo_srcptr, xip_fpo_srcptr);
              xip_fpo_exc_t xip_fpo_greaterequal_flt (int *, float, float);
              xip_fpo_exc_t xip_fpo_greaterequal_d (int *, double, double);
              xip_fpo_exc_t xip_fpo_notequal (int *, xip_fpo_srcptr, xip_fpo_srcptr);
              xip_fpo_exc_t xip_fpo_notequal_flt (int *, float, float);
              xip_fpo_exc_t xip_fpo_notequal_d (int *, double, double);
              xip_fpo_exc_t xip_fpo_condcode (int *, xip_fpo_srcptr, xip_fpo_srcptr);
              xip_fpo_exc_t xip_fpo_condcode_flt (int *, float, float);
              xip_fpo_exc_t xip_fpo_condcode_d (int *, double, double);
              xip_fpo_exc_t xip_fpo_flttofix (xip_fpo_fix_ptr, xip_fpo_srcptr);
              xip_fpo_exc_t xip_fpo_flttofix_int_flt (int *, float);
              xip_fpo_exc_t xip_fpo_flttofix_int_d (int *, double);
              xip_fpo_exc_t xip_fpo_fixtoflt (xip_fpo_ptr, xip_fpo_fix_srcptr);
              xip_fpo_exc_t xip_fpo_fixtoflt_flt_int (float *, int);
              xip_fpo_exc_t xip_fpo_fixtoflt_d_int (double *, int);
              xip_fpo_exc_t xip_fpo_fixtoflt_flt_int64 (float *, long long);
              xip_fpo_exc_t xip_fpo_fixtoflt_d_int64 (double *, long long);
              xip_fpo_exc_t xip_fpo_fixtoflt_flt_uint (float *, unsigned int);
              xip_fpo_exc_t xip_fpo_fixtoflt_d_uint (double *, unsigned int);
              xip_fpo_exc_t xip_fpo_fixtoflt_flt_uint64 (float *, unsigned long long);
              xip_fpo_exc_t xip_fpo_fixtoflt_d_uint64 (double *, unsigned long long);
              xip_fpo_exc_t xip_fpo_flttoflt (xip_fpo_ptr, xip_fpo_srcptr);
              xip_fpo_exc_t xip_fpo_flttoflt_flt_flt (float *, float);
              xip_fpo_exc_t xip_fpo_flttoflt_flt_d (float *, double);
              xip_fpo_exc_t xip_fpo_flttoflt_d_flt (double *, float);
              xip_fpo_exc_t xip_fpo_flttoflt_d_d (double *, double);


              xip_fpo_exc_t xip_fpo_ufma (xip_fpo_ptr, xip_fpo_srcptr, xip_fpo_srcptr, xip_fpo_srcptr);
              xip_fpo_exc_t xip_fpo_ufma_flt (float *, float, float, float);
              xip_fpo_exc_t xip_fpo_ufms (xip_fpo_ptr, xip_fpo_srcptr, xip_fpo_srcptr, xip_fpo_srcptr);
              xip_fpo_exc_t xip_fpo_ufms_flt (float *, float, float, float);

              float * xip_fpo_accum_prim_create_state (int , int , int , int , int);
              void xip_fpo_accum_prim_reset_state (float *);
              void xip_fpo_accum_prim_destroy_state (float *);
              xip_fpo_exc_t xip_fpo_accum_prim_sample (xip_fpo_t, xip_fpo_t, bool, float *);
              xip_fpo_exc_t xip_fpo_accum_prim_sample_flt (float *, float , bool, float *);

              float * xip_fpo_ufmacc_create_state (int , int , int , int , int);
              void xip_fpo_ufmacc_reset_state (float *);
              void xip_fpo_ufmacc_destroy_state (float *);
              xip_fpo_exc_t xip_fpo_ufmacc_a_sample (xip_fpo_t, xip_fpo_t, float *);
              xip_fpo_exc_t xip_fpo_ufmacc_s_sample (xip_fpo_t, xip_fpo_t, float *);
              xip_fpo_exc_t xip_fpo_ufmacc_a_sample_flt (float , float , float *);
              xip_fpo_exc_t xip_fpo_ufmacc_s_sample_flt (float , float , float *);


}
# 141 "C:/Xilinx/Vitis/2024.2/include/hls_fpo.h" 2

# 1 "C:/Xilinx/Vitis/2024.2/include/mpfr.h" 1
# 143 "C:/Xilinx/Vitis/2024.2/include/hls_fpo.h" 2





inline float xil_fpo_add_flt(float a, float b)
{
  float res_flt = 0.0f;


  xip_fpo_add_flt(&res_flt, a, b);
  return res_flt;
}

inline double xil_fpo_add_d(double a, double b)
{
  double res_d = 0.0;


  xip_fpo_add_d(&res_d, a, b);
  return res_d;
}





inline float xil_fpo_sub_flt(float a, float b)
{
  float res_flt = 0.0f;


  xip_fpo_sub_flt(&res_flt, a, b);
  return res_flt;
}

inline double xil_fpo_sub_d(double a, double b)
{
  double res_d = 0.0;


  xip_fpo_sub_d(&res_d, a, b);
  return res_d;
}





inline float xil_fpo_mul_flt(float a, float b)
{
  float res_flt = 0.0f;


  xip_fpo_mul_flt(&res_flt, a, b);
  return res_flt;
}

inline double xil_fpo_mul_d(double a, double b)
{
  double res_d = 0.0;


  xip_fpo_mul_d(&res_d, a, b);
  return res_d;
}





inline float xil_fpo_div_flt(float a, float b)
{
  float res_flt = 0.0f;


  xip_fpo_div_flt(&res_flt, a, b);
  return res_flt;
}

inline double xil_fpo_div_d(double a, double b)
{
  double res_d = 0.0;


  xip_fpo_div_d(&res_d, a, b);
  return res_d;
}





inline float xil_fpo_rec_flt(float a)
{
  float res_flt = 0.0f;


  xip_fpo_rec_flt(&res_flt, a);
  return res_flt;
}

inline double xil_fpo_rec_d(double a)
{
  double res_d = 0.0;


  xip_fpo_rec_d(&res_d, a);
  return res_d;
}





inline float xil_fpo_sqrt_flt(float a)
{

  float res_flt = 0.0f;


  xip_fpo_sqrt_flt(&res_flt, a);

  return res_flt;
}

inline double xil_fpo_sqrt_d(double a)
{
  double res_d = 0.0;


  xip_fpo_sqrt_d(&res_d, a);

  return res_d;
}





inline float xil_fpo_recsqrt_flt(float a)
{
  float res_flt = 0.0f;


  xip_fpo_recsqrt_flt(&res_flt, a);
  return res_flt;
}

inline double xil_fpo_recsqrt_d(double a)
{
  double res_d = 0.0;


  xip_fpo_recsqrt_d(&res_d, a);
  return res_d;
}





inline float xil_fpo_abs_flt(float a)
{
  float res_flt = 0.0f;

  xip_fpo_abs_flt(&res_flt, a);
  return res_flt;
}

inline double xil_fpo_abs_d(double a)
{
  double res_d = 0.0;

  xip_fpo_abs_d(&res_d, a);
  return res_d;
}





inline float xil_fpo_log_flt(float a)
{
  float res_flt = 0.0f;


  xip_fpo_log_flt(&res_flt, a);
  return res_flt;
}

inline double xil_fpo_log_d(double a)
{
  double res_d = 0.0;


  xip_fpo_log_d(&res_d, a);
  return res_d;
}





inline float xil_fpo_exp_flt(float a)
{
  float res_flt = 0.0f;


  xip_fpo_exp_flt(&res_flt, a);
  return res_flt;
}

inline double xil_fpo_exp_d(double a)
{
  double res_d = 0.0;


  xip_fpo_exp_d(&res_d, a);
  return res_d;
}





inline int xil_fpo_unordered_flt(float a, float b)
{
  int res_int = 0;


  xip_fpo_unordered_flt(&res_int, a, b);
  return res_int;
}

inline int xil_fpo_unordered_d(double a, double b)
{
  int res_int = 0;


  xip_fpo_unordered_d(&res_int, a, b);
  return res_int;
}






inline int xil_fpo_equal_flt(float a, float b)
{
  int res_int = 0;


  xip_fpo_equal_flt(&res_int, a, b);
  return res_int;
}

inline int xil_fpo_equal_d(double a, double b)
{
  int res_int = 0;


  xip_fpo_equal_d(&res_int, a, b);
  return res_int;
}





inline int xil_fpo_less_flt(float a, float b)
{
  int res_int = 0;


  xip_fpo_less_flt(&res_int, a, b);
  return res_int;
}

inline int xil_fpo_less_d(double a, double b)
{
  int res_int = 0;


  xip_fpo_less_d(&res_int, a, b);
  return res_int;
}





inline int xil_fpo_lessequal_flt(float a, float b)
{
  int res_int = 0;


  xip_fpo_lessequal_flt(&res_int, a, b);
  return res_int;
}

inline int xil_fpo_lessequal_d(double a, double b)
{
  int res_int = 0;


  xip_fpo_lessequal_d(&res_int, a, b);
  return res_int;
}





inline int xil_fpo_greater_flt(float a, float b)
{
  int res_int = 0;


  xip_fpo_greater_flt(&res_int, a, b);
  return res_int;
}

inline int xil_fpo_greater_d(double a, double b)
{
  int res_int = 0;


  xip_fpo_greater_d(&res_int, a, b);
  return res_int;
}





inline int xil_fpo_greaterequal_flt(float a, float b)
{
  int res_int = 0;


  xip_fpo_greaterequal_flt(&res_int, a, b);
  return res_int;
}

inline int xil_fpo_greaterequal_d(double a, double b)
{
  int res_int = 0;


  xip_fpo_greaterequal_d(&res_int, a, b);
  return res_int;
}





inline int xil_fpo_notequal_flt(float a, float b)
{
  int res_int = 0;


  xip_fpo_notequal_flt(&res_int, a, b);
  return res_int;
}

inline int xil_fpo_notequal_d(double a, double b)
{
  int res_int = 0;

  xip_fpo_notequal_d(&res_int, a, b);
  return res_int;
}





inline int xil_fpo_condcode_flt(float a, float b)
{
  int res_int = 0;


  xip_fpo_condcode_flt(&res_int, a, b);
  return res_int;
}

inline int xil_fpo_condcode_d(double a, double b)
{
  int res_int = 0;


  xip_fpo_condcode_d(&res_int, a, b);
  return res_int;
}




inline int xil_fpo_flttofix_int_flt(float a)
{
  int res_int = 0;


  xip_fpo_flttofix_int_flt(&res_int, a);
  return res_int;
}

inline int xil_fpo_flttofix_int_d(double a)
{
  int res_int = 0;


  xip_fpo_flttofix_int_d(&res_int, a);
  return res_int;
}

inline float xil_fpo_fixtoflt_flt_int(int a)
{
  float res_flt = 0.0f;


  xip_fpo_fixtoflt_flt_int(&res_flt, a);
  return res_flt;
}

inline double xil_fpo_fixtoflt_d_int(int a)
{
  double res_d = 0.0;


  xip_fpo_fixtoflt_d_int(&res_d, a);
  return res_d;
}

inline float xil_fpo_flttoflt_flt_flt(float a)
{
  float res_flt = 0.0f;


  xip_fpo_flttoflt_flt_flt(&res_flt, a);
  return res_flt;
}

inline float xil_fpo_flttoflt_flt_d(double a)
{
  float res_flt = 0.0f;


  xip_fpo_flttoflt_flt_d(&res_flt, a);
  return res_flt;
}

inline double xil_fpo_flttoflt_d_flt(float a)
{
  double res_d = 0.0;


  xip_fpo_flttoflt_d_flt(&res_d, a);
  return res_d;
}

inline double xil_fpo_flttoflt_d_d(double a)
{
  double res_d = 0.0;


  xip_fpo_flttoflt_d_d(&res_d, a);
  return res_d;
}
# 20 "C:/Xilinx/Vitis/2024.2/include/etc/hls_half_fpo.h" 2
# 33 "C:/Xilinx/Vitis/2024.2/include/etc/hls_half_fpo.h"
class half {
   public:
    typedef unsigned short uint16;
    template <typename T1, typename T2>
    struct half_traits;
# 50 "C:/Xilinx/Vitis/2024.2/include/etc/hls_half_fpo.h"
    half() : m_data() {}
    half(float rhs) {
        xip_fpo_half_set_flt(rhs);
    }


    template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
    half(const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& rhs) {
        std::cout << "WARNING: explicit method ap_fixed::to_half() should be used to convert ap_fixed to half."
                  << std::endl;
        *this = rhs.to_half();
    }

    template <int _AP_W, bool _AP_S>
    half(const ap_int_base<_AP_W, _AP_S>& rhs) {
        *this = rhs.to_half();
    }

    template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
    half& operator =(const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& rhs) {
       return *this = rhs.to_half();
     }
    template <int _AP_W, bool _AP_S>
    half& operator =(const ap_int_base<_AP_W, _AP_S>& rhs) {
      return *this = rhs.to_half();
     }

    static bool half_isnan(half hf) { return (hf.m_data & 0x7FFF) > 0x7C00; }



    operator float() const { return xip_fpo_half_get_flt(); }

    half& operator=(float rhs) { return *this = half(rhs); }


    template <typename T>
    half& operator+=(const T& rhs) {
        return *this = half_axu_functions::half_plus(*this, rhs);
    }
     half& operator+=(const half& rhs) { return *this = *this + rhs; }

    template <typename T>
    half& operator-=(const T& rhs) {
        return *this = half_axu_functions::half_minus(*this, rhs);
    }

    half& operator-=(const half& rhs) { return *this = *this - rhs; }

    template <typename T>
    half& operator*=(const T& rhs) {
        return *this = half_axu_functions::half_multiplies(*this, rhs);
    }

    half& operator*=(const half& rhs) { return *this = *this * rhs; }

    template <typename T>
    half& operator/=(const T& rhs) {
        return *this = half_axu_functions::half_divides(*this, rhs);
    }

    half& operator/=(const half& rhs) { return *this = *this / rhs; }


    half& operator++() { return *this += 1.0f; }


    half& operator--() { return *this -= 1.0f; }


    half operator++(int) {
        half out(*this);
        ++*this;
        return out;
    }


    half operator--(int) {
        half out(*this);
        --*this;
        return out;
    }



    void set_bits(uint16 d) { m_data = d; }

    uint16 get_bits() { return m_data; }

   private:

    uint16 m_data;


    friend std::ostream& operator<<(std::ostream& out, const half& hf) {
        float f = static_cast<float>(hf);
        return out << f;
    }

    friend std::istream& operator>>(std::istream& in, half& hf) {
        float f;
        if (in >> f) hf = static_cast<half>(f);
        return in;
    }

   public:



    template <typename T>
    friend typename half::half_traits<T, half>::rtvl_t operator+(const T& lhs, const half& rhs) {
        return half_axu_functions::half_plus(lhs, rhs);
    }


    template <typename T>
    typename half::half_traits<half, T>::rtvl_t operator+(const T& rhs) {
        return half_axu_functions::half_plus(*this, rhs);
    }


    half operator+(const half& rhs) { return half_axu_functions::half_plus(*this, rhs); }


    template <typename T>
    friend typename half::half_traits<T, half>::rtvl_t operator-(const T& lhs, const half& rhs) {
        return half_axu_functions::half_minus(lhs, rhs);
    }


    template <typename T>
    typename half::half_traits<half, T>::rtvl_t operator-(const T& rhs) {
        return half_axu_functions::half_minus(*this, rhs);
    }

    half operator-(const half& rhs) { return half_axu_functions::half_minus(*this, rhs); }


    template <typename T>
    friend typename half::half_traits<T, half>::rtvl_t operator*(const T& lhs, const half& rhs) {
        return half_axu_functions::half_multiplies(lhs, rhs);
    }


    template <typename T>
    typename half::half_traits<half, T>::rtvl_t operator*(const T& rhs) {
        return half_axu_functions::half_multiplies(*this, rhs);
    }

    half operator*(const half& rhs) { return half_axu_functions::half_multiplies(*this, rhs); }


    template <typename T>
    friend typename half::half_traits<T, half>::rtvl_t operator/(const T& lhs, const half& rhs) {
        return half_axu_functions::half_divides(lhs, rhs);
    }


    template <typename T>
    typename half::half_traits<half, T>::rtvl_t operator/(const T& rhs) {
        return half_axu_functions::half_divides(*this, rhs);
    }

    half operator/(const half& rhs) { return half_axu_functions::half_divides(*this, rhs); }
# 249 "C:/Xilinx/Vitis/2024.2/include/etc/hls_half_fpo.h"
    template <typename T>
    bool operator==(const T& rhs) {
        return half_axu_functions::half_isequal(*this, rhs);
    }
    bool operator==(const half& rhs) { return half_axu_functions::half_isequal(*this, rhs); }

    template <typename T>
    bool operator!=(const T& rhs) {
        return half_axu_functions::half_isnotequal(*this, rhs);
    }
    bool operator!=(const half& rhs) { return half_axu_functions::half_isnotequal(*this, rhs); }

    template <typename T>
    bool operator>(const T& rhs) {
        return half_axu_functions::half_isgreater(*this, rhs);
    }
    bool operator>(const half& rhs) { return half_axu_functions::half_isgreater(*this, rhs); }
    template <typename T>

    bool operator>=(const T& rhs) {
        return half_axu_functions::half_isgreaterequal(*this, rhs);
    }
    bool operator>=(const half& rhs) { return half_axu_functions::half_isgreaterequal(*this, rhs); }

    template <typename T>
    bool operator<(const T& rhs) {
        return half_axu_functions::half_isless(*this, rhs);
    }
    bool operator<(const half& rhs) { return half_axu_functions::half_isless(*this, rhs); }

    template <typename T>
    bool operator<=(const T& rhs) {
        return half_axu_functions::half_islessequal(*this, rhs);
    }
    bool operator<=(const half& rhs) { return half_axu_functions::half_islessequal(*this, rhs); }






    template <typename F>
    static half math_function_1arg(F f, half x) {
        half res;
        xip_fpo_t rop, xop;
        xip_fpo_inits2(5, 11, rop, xop, (xip_fpo_ptr)0);
        x.xip_fpo_get_data(xop);
        f(rop, xop);
        res.xip_fpo_set_data(rop);
        xip_fpo_clears(rop, xop, (xip_fpo_ptr)0);
        return res;
    }

    template <typename F>
    static half binary_operator(F f, half x, half y) {
        half res;
        xip_fpo_t op, xop, yop;
        xip_fpo_inits2(5, 11, op, xop, yop, (xip_fpo_ptr)0);
        x.xip_fpo_get_data(xop);
        y.xip_fpo_get_data(yop);
        f(op, xop, yop);
        res.xip_fpo_set_data(op);
        xip_fpo_clears(op, xop, yop, (xip_fpo_ptr)0);
        return res;
    }

    template <typename F>
    static bool binary_operator_compare(F f, half x, half y) {
        int res;
        xip_fpo_t xop, yop;
        xip_fpo_inits2(5, 11, xop, yop, (xip_fpo_ptr)0);
        x.xip_fpo_get_data(xop);
        y.xip_fpo_get_data(yop);
        f(&res, xop, yop);
        xip_fpo_clears(xop, yop, (xip_fpo_ptr)0);
        return res;
    }

   private:


    xip_fpo_exc_t xip_fpo_get_data(xip_fpo_ptr op) const {
        int exc = 0;
        op->_xip_fpo_sign = ((m_data & 0x8000) ? -1 : 1);
        op->_xip_fpo_exp = ((m_data & 0x7C00) >> 10) - 14;
        *(op->_xip_fpo_d) = ((mp_limb_t)(m_data & 0x3FF) + (mp_limb_t)(0x400)) << (8 * sizeof(*(op->_xip_fpo_d)) - 11);
        if ((m_data & 0x7C00) == 0) {
            exc |= 0x1;
            xip_fpo_set_zero(op, op->_xip_fpo_sign);
        } else if ((m_data & 0x7FFF) == 0x7C00) {
            exc |= 0x2;
            xip_fpo_set_inf(op, op->_xip_fpo_sign);
        } else if ((m_data & 0x7FFF) > 0x7C00) {
            exc |= 0x4;
            xip_fpo_set_nan(op);
        }
        return exc;
    }


    float xip_fpo_half_get_flt() const {
        xip_fpo_t op;
        xip_fpo_init2(op, 5, 11);
        xip_fpo_exc_t exc = xip_fpo_get_data(op);
        float res;
        if (exc & 0x1) {
            res = (op->_xip_fpo_sign > 0 ? 0.0f : -0.0f);
        } else if (exc & 0x2) {
            res = (op->_xip_fpo_sign > 0 ? std::numeric_limits<float>::infinity()
                                         : -std::numeric_limits<float>::infinity());
        } else if (exc & 0x4) {
            res = std::numeric_limits<float>::quiet_NaN();
        } else {
            res = xip_fpo_get_flt(op);
        }
        xip_fpo_clear(op);
        return res;
    }



    void xip_fpo_set_data(xip_fpo_ptr op) {
        mpfr_t fr;
        (fr)->_mpfr_prec = (op)->_xip_fpo_mant_prec; (fr)->_mpfr_sign = (op)->_xip_fpo_sign; (fr)->_mpfr_exp = (op)->_xip_fpo_exp; (fr)->_mpfr_d = (op)->_xip_fpo_d;;
        m_data = 0;
        m_data |= (op->_xip_fpo_sign == 1 ? 0 : 1) << 15;
        if (((fr)->_mpfr_exp == (0 - ((mpfr_exp_t) (((mpfr_uexp_t) -1) >> 1))))) {
            m_data &= 0x8000;
        } else if (((fr)->_mpfr_exp == (2 - ((mpfr_exp_t) (((mpfr_uexp_t) -1) >> 1))))) {
            m_data |= 0x7C00;
        } else if (((fr)->_mpfr_exp == (1 - ((mpfr_exp_t) (((mpfr_uexp_t) -1) >> 1))))) {
            m_data |= 0x7E00;
        } else {
            m_data |= (op->_xip_fpo_exp + 14) << 10;
            m_data |= (*(op->_xip_fpo_d) << 1) >> (8 * sizeof(*(op->_xip_fpo_d)) - 10);
        }
    }


    void xip_fpo_half_set_flt(float rhs) {
        xip_fpo_t op;
        xip_fpo_init2(op, 5, 11);
        xip_fpo_set_flt(op, rhs);
        xip_fpo_set_data(op);
        xip_fpo_clear(op);
    }



    struct half_axu_functions {

        template <typename T1, typename T2>
        static half half_plus(T1 x, T2 y) {
            return half::binary_operator(xip_fpo_add, x, y);
        }
        static float half_plus(float x, half y) { return xil_fpo_add_flt(x,y); }
        static float half_plus(half x, float y) { return xil_fpo_add_flt(x,y); }
        static double half_plus(double x, half y) { return xil_fpo_add_d(x,y); }
        static double half_plus(half x, double y) { return xil_fpo_add_d(x,y); }

        template <typename T1, typename T2>
        static half half_minus(T1 x, T2 y) {
            return half::binary_operator(xip_fpo_sub, x, y);
        }
        static float half_minus(float x, half y) { return xil_fpo_sub_flt(x,y); }
        static float half_minus(half x, float y) { return xil_fpo_sub_flt(x,y); }
        static double half_minus(double x, half y) { return xil_fpo_sub_d(x,y); }
        static double half_minus(half x, double y) { return xil_fpo_sub_d(x,y); }

        template <typename T1, typename T2>
        static half half_multiplies(T1 x, T2 y) {
            return half::binary_operator(xip_fpo_mul, x, y);
        }
        static float half_multiplies(float x, half y) { return xil_fpo_mul_flt(x,y); }
        static float half_multiplies(half x, float y) { return xil_fpo_mul_flt(x,y); }
        static double half_multiplies(double x, half y) { return xil_fpo_mul_d(x,y); }
        static double half_multiplies(half x, double y) { return xil_fpo_mul_d(x,y); }

        template <typename T1, typename T2>
        static half half_divides(T1 x, T2 y) {
            return half::binary_operator(xip_fpo_div, x, y);
        }
        static float half_divides(float x, half y) { return xil_fpo_div_flt(x,y); }
        static float half_divides(half x, float y) { return xil_fpo_div_flt(x,y); }
        static double half_divides(double x, half y) { return xil_fpo_div_d(x,y); }
        static double half_divides(half x, double y) { return xil_fpo_div_d(x,y); }

        template <typename T1, typename T2>
        static bool half_isequal(T1 x, T2 y) {
            return half::binary_operator_compare(xip_fpo_equal, x, y);
        }
        static bool half_isequal(float x, half y) { return xil_fpo_equal_flt(x,y); }
        static bool half_isequal(half x, float y) { return xil_fpo_equal_flt(x,y); }
        static bool half_isequal(double x, half y) { return xil_fpo_equal_d(x,y); }
        static bool half_isequal(half x, double y) { return xil_fpo_equal_d(x,y); }

        template <typename T1, typename T2>
        static bool half_isnotequal(T1 x, T2 y) {
            return half::binary_operator_compare(xip_fpo_notequal, x, y);
        }
        static bool half_isnotequal(float x, half y) { return xil_fpo_notequal_flt(x,y); }
        static bool half_isnotequal(half x, float y) { return xil_fpo_notequal_flt(x,y); }
        static bool half_isnotequal(double x, half y) { return xil_fpo_notequal_d(x,y); }
        static bool half_isnotequal(half x, double y) { return xil_fpo_notequal_d(x,y); }

        template <typename T1, typename T2>
        static bool half_isgreater(T1 x, T2 y) {
            return half::binary_operator_compare(xip_fpo_greater, x, y);
        }
        static bool half_isgreater(float x, half y) { return xil_fpo_greater_flt(x,y); }
        static bool half_isgreater(half x, float y) { return xil_fpo_greater_flt(x,y); }
        static bool half_isgreater(double x, half y) { return xil_fpo_greater_d(x,y); }
        static bool half_isgreater(half x, double y) { return xil_fpo_greater_d(x,y); }

        template <typename T1, typename T2>
        static bool half_isgreaterequal(T1 x, T2 y) {
            return half::binary_operator_compare(xip_fpo_greaterequal, x, y);
        }
        static bool half_isgreaterequal(float x, half y) { return xil_fpo_greaterequal_flt(x,y); }
        static bool half_isgreaterequal(half x, float y) { return xil_fpo_greaterequal_flt(x,y); }
        static bool half_isgreaterequal(double x, half y) { return xil_fpo_greaterequal_d(x,y); }
        static bool half_isgreaterequal(half x, double y) { return xil_fpo_greaterequal_d(x,y); }

        template <typename T1, typename T2>
        static bool half_isless(T1 x, T2 y) {
            return half::binary_operator_compare(xip_fpo_less, x, y);
        }
        static bool half_isless(float x, half y) { return xil_fpo_less_flt(x,y); }
        static bool half_isless(half x, float y) { return xil_fpo_less_flt(x,y); }
        static bool half_isless(double x, half y) { return xil_fpo_less_d(x,y); }
        static bool half_isless(half x, double y) { return xil_fpo_less_d(x,y); }

        template <typename T1, typename T2>
        static bool half_islessequal(T1 x, T2 y) {
            return half::binary_operator_compare(xip_fpo_lessequal, x, y);
        }
        static bool half_islessequal(float x, half y) { return xil_fpo_lessequal_flt(x,y); }
        static bool half_islessequal(half x, float y) { return xil_fpo_lessequal_flt(x,y); }
        static bool half_islessequal(double x, half y) { return xil_fpo_lessequal_d(x,y); }
        static bool half_islessequal(half x, double y) { return xil_fpo_lessequal_d(x,y); }

    };

};

template <>
struct half::half_traits<char, half> {
    typedef half rtvl_t;
};

template <>
struct half::half_traits<signed char, half> {
    typedef half rtvl_t;
};

template <>
struct half::half_traits<unsigned char, half> {
    typedef half rtvl_t;
};

template <>
struct half::half_traits<short, half> {
    typedef half rtvl_t;
};

template <>
struct half::half_traits<unsigned short, half> {
    typedef half rtvl_t;
};

template <>
struct half::half_traits<int, half> {
    typedef half rtvl_t;
};

template <>
struct half::half_traits<unsigned int, half> {
    typedef half rtvl_t;
};

template <>
struct half::half_traits<float, half> {
    typedef float rtvl_t;
};

template <>
struct half::half_traits<double, half> {
    typedef double rtvl_t;
};

template <>
struct half::half_traits<long, half> {

    typedef half rtvl_t;
};

template <>
struct half::half_traits<unsigned long, half> {
    typedef half rtvl_t;

};

template <>
struct half::half_traits<half, char> {
    typedef half rtvl_t;
};

template <>
struct half::half_traits<half, signed char> {
    typedef half rtvl_t;
};

template <>
struct half::half_traits<half, unsigned char> {
    typedef half rtvl_t;
};

template <>
struct half::half_traits<half, short> {
    typedef half rtvl_t;
};

template <>
struct half::half_traits<half, unsigned short> {
    typedef half rtvl_t;
};

template <>
struct half::half_traits<half, int> {
    typedef half rtvl_t;
};

template <>
struct half::half_traits<half, unsigned int> {
    typedef half rtvl_t;
};

template <>
struct half::half_traits<half, float> {
    typedef float rtvl_t;
};

template <>
struct half::half_traits<half, double> {
    typedef double rtvl_t;
};

template <>
struct half::half_traits<half, long> {

    typedef half rtvl_t;
};

template <>
struct half::half_traits<half, unsigned long> {
    typedef half rtvl_t;

};
# 27 "C:/Xilinx/Vitis/2024.2/include/hls_half.h" 2





# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/climits" 1 3
# 40 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/climits" 3
# 33 "C:/Xilinx/Vitis/2024.2/include/hls_half.h" 2


namespace std {



template <>
struct numeric_limits<half> : public numeric_limits<float> {
   public:

    static const bool is_signed = true;


    static const bool is_exact = false;


    static const bool is_modulo = false;


    static const bool is_iec559 = true;


    static const bool has_infinity = true;


    static const bool has_quiet_NaN = true;


    static const float_denorm_style has_denorm = denorm_present;


    static const int digits = 11;


    static const int digits10 = 3;


    static const int max_digits10 = 5;


    static const int radix = 2;


    static const int min_exponent = -13;


    static const int min_exponent10 = -4;


    static const int max_exponent = 16;


    static const int max_exponent10 = 4;


    static half min() throw() {
        half t;
        t.set_bits(0x0400);
        return t;
    }


    static half lowest() throw() {
        half t;
        t.set_bits(0xFBFF);
        return t;
    }

    static half max() throw() {
        half t;
        t.set_bits(0x7BFF);
        return t;
    }


    static half epsilon() throw() {
        half t;
        t.set_bits(0x1400);
        return t;
    }


    static half round_error() throw() {
        half t;
        t.set_bits(0x3800);
        return t;
    }


    static half infinity() throw() {
        half t;
        t.set_bits(0x7C00);
        return t;
    }


    static half quiet_NaN() throw() {
        half t;
        t.set_bits(0x7FFF);
        return t;
    }


    static half signaling_NaN() throw() {
        half t;
        t.set_bits(0x7DFF);
        return t;
    }


    static half denorm_min() throw() {
        half t;
        t.set_bits(0x0001);
        return t;
    }
};
}

# 1 "C:/Xilinx/Vitis/2024.2/include/etc/hls_half_x_utils.h" 1
# 16 "C:/Xilinx/Vitis/2024.2/include/etc/hls_half_x_utils.h"
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cmath" 1 3
# 40 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cmath" 3
# 17 "C:/Xilinx/Vitis/2024.2/include/etc/hls_half_x_utils.h" 2


# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/climits" 1 3
# 40 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/climits" 3
# 20 "C:/Xilinx/Vitis/2024.2/include/etc/hls_half_x_utils.h" 2
# 69 "C:/Xilinx/Vitis/2024.2/include/etc/hls_half_x_utils.h"
class half;
namespace detail {
# 84 "C:/Xilinx/Vitis/2024.2/include/etc/hls_half_x_utils.h"
inline bool isfinite(half arg) {
    return (arg.get_bits() & 0x7C00) != 0x7C00;
}

inline bool isinf(half arg) {
    return (arg.get_bits() & 0x7FFF) == 0x7C00;
}

inline bool isnan(half arg) {
    return (arg.get_bits() & 0x7FFF) > 0x7C00;
}

inline bool isnormal(half arg) {
    return ((arg.get_bits() & 0x7C00) != 0) & ((arg.get_bits() & 0x7C00) != 0x7C00);
}

inline bool signbit(half arg) {
    return (arg.get_bits() & 0x8000) != 0;
}

inline int fpclassify(half arg) {
    unsigned int abs = arg.get_bits() & 0x7FFF;
    if (abs == 0x7C00) return (0x0100 | 0x0400);
    if (abs > 0x3FF) return 0x0400;
    return abs ? (0x0400 | 0x4000) : 0x4000;
}

inline half fmod(half x, half y) {
    return (std::fmod(x, y));
}

inline half sinh(half arg) {
    return std::sinh(arg);
}

inline half cosh(half arg) {
    return std::cosh(arg);
}

inline half sin(half arg) {
    return std::sin(arg);
}

inline half cos(half arg) {
    return std::cos(arg);
}
inline half frexp(half arg, int* exp) {
    unsigned int m = arg.get_bits() & 0x7FFF;
    if (m >= 0x7C00 || !m) return *exp = 0, arg;
    int e = m >> 10;
    if (!e)
        for (m <<= 1; m < 0x400; m <<= 1, --e)
            ;

    *exp = e - 14;
    half t;
    t.set_bits(static_cast<half::uint16>((arg.get_bits() & 0x8000) | 0x3800 | (m & 0x3FF)));
    return t;
}

inline half modf(half arg, half* iptr) {
    half t;
    unsigned int e = arg.get_bits() & 0x7C00;
    if (e > 0x6000) {
        *iptr = arg;
        t.set_bits(arg.get_bits() & 0x8000);
        return (e == 0x7C00 && (arg.get_bits() & 0x3FF)) ? arg : t;
    }
    if (e < 0x3C00) return iptr->set_bits(arg.get_bits() & 0x8000), arg;
    e >>= 10;
    unsigned int mask = (1 << (25 - e)) - 1, m = arg.get_bits() & mask;
    iptr->set_bits(arg.get_bits() & ~mask);
    if (!m)
        t.set_bits(arg.get_bits() & 0x8000);
    else {
        for (; m < 0x400; m <<= 1, --e)
            ;
        t.set_bits(static_cast<half::uint16>((arg.get_bits() & 0x8000) | (e << 10) | (m & 0x3FF)));
    }
    return t;
}

inline int ilogb(half arg) {
    int exp = arg.get_bits() & 0x7FFF;
    if (!exp) return ((int)0x80000000);
    if (exp < 0x7C00) {
        if (!(exp >>= 10))
            for (unsigned int m = (arg.get_bits() & 0x3FF); m < 0x200; m <<= 1, --exp)
                ;
        return exp - 15;
    }
    if (exp > 0x7C00) return ((int)0x7fffffff);
    return 2147483647;
}
inline float fdim(float x, float y) {
    return ((x <= y) ? 0.0f : (x - y));
}



template <typename T, typename U>
struct binary_specialized {
    static float fmin(float x, float y) {
        if (isnan(x)) return y;
        if (isnan(y)) return x;
        return std::min(x, y);
    }

    static float fmax(float x, float y) {
        if (isnan(x)) return y;
        if (isnan(y)) return x;
        return std::max(x, y);
    }
};
template <>
struct binary_specialized<half, half> {
    static half fmin(half x, half y) {
        if (isnan(x)) return y;
        if (isnan(y)) return x;
        return ((signbit(x) ? (static_cast<int>(0x8000) - x.get_bits()) : static_cast<int>(x.get_bits())) >
                (signbit(y) ? (static_cast<int>(0x8000) - y.get_bits()) : static_cast<int>(y.get_bits())))
                   ? y
                   : x;
    }
    static half fmax(half x, half y) {
        if (isnan(x)) return y;
        if (isnan(y)) return x;
        return ((signbit(x) ? (static_cast<int>(0x8000) - x.get_bits()) : static_cast<int>(x.get_bits())) <
                (signbit(y) ? (static_cast<int>(0x8000) - y.get_bits()) : static_cast<int>(y.get_bits())))
                   ? y
                   : x;
    }
};

inline half fmax(half x, half y) {
    return binary_specialized<half, half>::fmax(x, y);
}
inline float fmax(half x, float y) {
    return binary_specialized<half, float>::fmax(x, y);
}
inline float fmax(float x, half y) {
    return binary_specialized<float, half>::fmax(x, y);
}
inline float fmax(float x, float y) {
    return binary_specialized<float, float>::fmax(x, y);
}

inline half fmin(half x, half y) {
    return binary_specialized<half, half>::fmin(x, y);
}
inline float fmin(half x, float y) {
    return binary_specialized<half, float>::fmin(x, y);
}
inline float fmin(float x, half y) {
    return binary_specialized<float, half>::fmin(x, y);
}
inline float fmin(float x, float y) {
    return binary_specialized<float, float>::fmin(x, y);
}

inline half fabs(half x) {
    half t;
    t.set_bits(x.get_bits() & 0x7FFF);
    return t;
}
inline half abs(half x) {
    half t;
    t.set_bits(x.get_bits() & 0x7FFF);
    return t;
}

inline half scalbln(half arg, long exp) {
    long e = arg.get_bits() & 0x7C00;
    if (e == 0x7C00) return arg;
    unsigned int m = arg.get_bits() & 0x3FF;
    if (e >>= 10)
        m |= 0x400;
    else {
        if (!m) return arg;
        for (m <<= 1; m < 0x400; m <<= 1, --e)
            ;
    }
    e += exp;
    half::uint16 value = arg.get_bits() & 0x8000;
    if (e > 30) {
        value |= 0x7C00;
    } else if (e > 0)
        value |= (e << 10) | (m & 0x3FF);
    else if (e > -11) {

        {
            m += 1 << -e;

            m -= (m >> (1 - e)) & 1;

        }
        value |= m >> (1 - e);
    }
    half t;
    t.set_bits(value);
    return t;
}

inline half ldexp(half arg, int exp) {
    return scalbln(arg, exp);
}
inline half ldexp(float arg, int exp) {
    return scalbln(arg, exp);
}
# 301 "C:/Xilinx/Vitis/2024.2/include/etc/hls_half_x_utils.h"
template <std::float_round_style R, bool E, typename T>
T half2int_impl(half::uint16 value) {
    unsigned int e = value & 0x7FFF;
    if (e >= 0x7C00) return (value & 0x8000) ? std::numeric_limits<T>::min() : std::numeric_limits<T>::max();
    if (e < 0x3800) {
        if (R == std::round_toward_infinity)
            return T(~(value >> 15) & (e != 0));
        else if (R == std::round_toward_neg_infinity)
            return -T(value > 0x8000);
        return T();
    }
    int m = (value & 0x3FF) | 0x400;
    e >>= 10;
    if (e < 25) {
        if (R == std::round_indeterminate || R == std::round_toward_zero)
            m >>= 25 - e;
        else {
            if (R == std::round_to_nearest)
                m += (1 << (24 - e)) - (~(m >> (25 - e)) & E);
            else if (R == std::round_toward_infinity)
                m += ((value >> 15) - 1) & ((1 << (25 - e)) - 1U);
            else if (R == std::round_toward_neg_infinity)
                m += -(value >> 15) & ((1 << (25 - e)) - 1U);
            m >>= 25 - e;
        }
    } else
        m <<= e - 25;



    return static_cast<T>((value & 0x8000) ? -m : m);
}





template <std::float_round_style R, typename T>
T half2int(half::uint16 value) {
    return half2int_impl<R, 1, T>(value);
}




template <typename T>
T half2int_up(half::uint16 value) {
    return half2int_impl<std::round_to_nearest, 0, T>(value);
}






template <std::float_round_style R, bool E>
half::uint16 round_half_impl(half::uint16 value) {
    unsigned int e = value & 0x7FFF;
    half::uint16 result = value;
    if (e < 0x3C00) {
        result &= 0x8000;
        if (R == std::round_to_nearest)
            result |= 0x3C00U & -(e >= (0x3800 + E));
        else if (R == std::round_toward_infinity)
            result |= 0x3C00U & -(~(value >> 15) & (e != 0));
        else if (R == std::round_toward_neg_infinity)
            result |= 0x3C00U & -(value > 0x8000);
    } else if (e < 0x6400) {
        e = 25 - (e >> 10);
        unsigned int mask = (1 << e) - 1;
        if (R == std::round_to_nearest)
            result += (1 << (e - 1)) - (~(result >> e) & E);
        else if (R == std::round_toward_infinity)
            result += mask & ((value >> 15) - 1);
        else if (R == std::round_toward_neg_infinity)
            result += mask & -(value >> 15);
        result &= ~mask;
    }
    return result;
}

template <std::float_round_style R>
half::uint16 round_half(half::uint16 value) {
    return round_half_impl<R, 1>(value);
}

inline half::uint16 round_half_up(half::uint16 value) {
    return round_half_impl<std::round_to_nearest, 0>(value);
}

inline half floor(half arg) {
    half t;
    t.set_bits(round_half<std::round_toward_neg_infinity>(arg.get_bits()));
    return t;
}

inline half ceil(half arg) {
    half t;
    t.set_bits(round_half<std::round_toward_infinity>(arg.get_bits()));
    return t;
}

inline half trunc(half arg) {
    half t;
    t.set_bits(round_half<std::round_toward_zero>(arg.get_bits()));
    return t;
}

inline half round(half arg) {
    half t;
    t.set_bits(round_half_up(arg.get_bits()));
    return t;
}

inline long lround(half arg) {
    return half2int_up<long>(arg.get_bits());
}

struct half_round_style {
    static const std::float_round_style round_style = (std::float_round_style)(1);
};

inline half rint(half arg) {
    half t;
    t.set_bits(round_half<half_round_style::round_style>(arg.get_bits()));
    return t;
}

inline long lrint(half arg) {
    return half2int<half_round_style::round_style, long>(arg.get_bits());
}


inline long long llround(half arg) {
    return half2int_up<long long>(arg.get_bits());
}

inline long long llrint(half arg) {
    return half2int<half_round_style::round_style, long long>(arg.get_bits());
}







inline half sqrt(half arg) {
    return half::math_function_1arg(xip_fpo_sqrt, arg);
}


inline bool isunordered(half x, half y) {
    return isnan(x) || isnan(y);
}






template <typename T1, typename T2>
inline bool isequal(T1 x, T2 y) {
    return half::binary_operator_compare(xip_fpo_equal, x, y);
}
inline bool isequal(float x, half y) {
    return xil_fpo_equal_flt(x,y);
}
inline bool isequal(half x, float y) {
    return xil_fpo_equal_flt(x,y);
}
inline bool isequal(double x, half y) {
    return xil_fpo_equal_d(x,y);
}
inline bool isequal(half x, double y) {
    return xil_fpo_equal_d(x,y);
}







template <typename T1, typename T2>
inline bool isnotequal(T1 x, T2 y) {
    return half::binary_operator_compare(xip_fpo_notequal, x, y);
}
inline bool isnotequal(float x, half y) {
    return xil_fpo_notequal_flt(x,y);
}
inline bool isnotequal(half x, float y) {
    return xil_fpo_notequal_flt(x,y);
}
inline bool isnotequal(double x, half y) {
    return xil_fpo_notequal_d(x,y);
}
inline bool isnotequal(half x, double y) {
    return xil_fpo_notequal_d(x,y);
}
# 510 "C:/Xilinx/Vitis/2024.2/include/etc/hls_half_x_utils.h"
template <typename T1, typename T2>
inline bool isgreater(T1 x, T2 y) {
    return half::binary_operator_compare(xip_fpo_greater, x, y);
}
inline bool isgreater(float x, half y) {
    return xil_fpo_greater_flt(x,y);
}
inline bool isgreater(half x, float y) {
    return xil_fpo_greater_flt(x,y);
}
inline bool isgreater(double x, half y) {
    return xil_fpo_greater_d(x,y);
}
inline bool isgreater(half x, double y) {
    return xil_fpo_greater_d(x,y);
}
# 535 "C:/Xilinx/Vitis/2024.2/include/etc/hls_half_x_utils.h"
template <typename T1, typename T2>
inline bool isgreaterequal(T1 x, T2 y) {
    return half::binary_operator_compare(xip_fpo_greaterequal, x, y);
}
inline bool isgreaterequal(float x, half y) {
    return xil_fpo_greaterequal_flt(x,y);
}
inline bool isgreaterequal(half x, float y) {
    return xil_fpo_greaterequal_flt(x,y);
}
inline bool isgreaterequal(double x, half y) {
    return xil_fpo_greaterequal_d(x,y);
}
inline bool isgreaterequal(half x, double y) {
    return xil_fpo_greaterequal_d(x,y);
}
# 560 "C:/Xilinx/Vitis/2024.2/include/etc/hls_half_x_utils.h"
template <typename T1, typename T2>
inline bool isless(T1 x, T2 y) {
    return half::binary_operator_compare(xip_fpo_less, x, y);
}
inline bool isless(float x, half y) {
    return xil_fpo_less_flt(x,y);
}
inline bool isless(half x, float y) {
    return xil_fpo_less_flt(x,y);
}
inline bool isless(double x, half y) {
    return xil_fpo_less_d(x,y);
}
inline bool isless(half x, double y) {
    return xil_fpo_less_d(x,y);
}
# 585 "C:/Xilinx/Vitis/2024.2/include/etc/hls_half_x_utils.h"
template <typename T1, typename T2>
inline bool islessequal(T1 x, T2 y) {
    return half::binary_operator_compare(xip_fpo_lessequal, x, y);
}
inline bool islessequal(float x, half y) {
    return xil_fpo_lessequal_flt(x,y);
}
inline bool islessequal(half x, float y) {
    return xil_fpo_lessequal_flt(x,y);
}
inline bool islessequal(double x, half y) {
    return xil_fpo_lessequal_d(x,y);
}
inline bool islessequal(half x, double y) {
    return xil_fpo_lessequal_d(x,y);
}


inline bool islessgreater(half x, half y) {
    if (isnan(x) || isnan(y)) return false;
    return detail::isless(x, y) || detail::isgreater(x, y);
}


}
using detail::fpclassify;
using detail::isfinite;
using detail::isgreater;
using detail::isgreaterequal;
using detail::isinf;
using detail::isless;
using detail::islessequal;
using detail::islessgreater;
using detail::isnan;
using detail::isnormal;
using detail::isunordered;
using detail::signbit;
# 152 "C:/Xilinx/Vitis/2024.2/include/hls_half.h" 2
# 69 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h" 2
# 79 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
namespace AESL_std {
template <class DataType>
              DataType inline min(DataType a, DataType b) {
  return (a >= b) ? b : a;
}

template <class DataType>
              DataType inline max(DataType a, DataType b) {
  return (a >= b) ? a : b;
}
}


# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/math.h" 1 3
# 93 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h" 2

# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cassert" 1 3
# 42 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cassert" 3


# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/assert.h" 1 3
# 45 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cassert" 2 3
# 95 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h" 2
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cstdlib" 1 3
# 40 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cstdlib" 3
# 96 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h" 2
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cstring" 1 3
# 40 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cstring" 3


# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/string.h" 1 3
# 21 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/string.h" 3
extern "C" {
# 45 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/string.h" 3
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _memccpy(void *_Dst,const void *_Src,int _Val,size_t _MaxCount);
                void *__attribute__((__cdecl__)) memchr(const void *_Buf ,int _Val,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _memicmp(const void *_Buf1,const void *_Buf2,size_t _Size);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _memicmp_l(const void *_Buf1,const void *_Buf2,size_t _Size,_locale_t _Locale);
  int __attribute__((__cdecl__)) memcmp(const void *_Buf1,const void *_Buf2,size_t _Size);
  void * __attribute__((__cdecl__)) memcpy(void * __restrict__ _Dst,const void * __restrict__ _Src,size_t _Size) ;
  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) memcpy_s (void *_dest,size_t _numberOfElements,const void *_src,size_t _count);
  void * __attribute__((__cdecl__)) mempcpy (void *_Dst, const void *_Src, size_t _Size);
  void * __attribute__((__cdecl__)) memset(void *_Dst,int _Val,size_t _Size);

  void * __attribute__((__cdecl__)) memccpy(void *_Dst,const void *_Src,int _Val,size_t _Size) ;
  int __attribute__((__cdecl__)) memicmp(const void *_Buf1,const void *_Buf2,size_t _Size) ;


  char * __attribute__((__cdecl__)) _strset(char *_Str,int _Val) ;
  char * __attribute__((__cdecl__)) _strset_l(char *_Str,int _Val,_locale_t _Locale) ;
  char * __attribute__((__cdecl__)) strcpy(char * __restrict__ _Dest,const char * __restrict__ _Source);
  char * __attribute__((__cdecl__)) strcat(char * __restrict__ _Dest,const char * __restrict__ _Source);
  int __attribute__((__cdecl__)) strcmp(const char *_Str1,const char *_Str2);
  size_t __attribute__((__cdecl__)) strlen(const char *_Str);
  size_t __attribute__((__cdecl__)) strnlen(const char *_Str,size_t _MaxCount);
  void *__attribute__((__cdecl__)) memmove(void *_Dst,const void *_Src,size_t _Size) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strdup(const char *_Src);
                char *__attribute__((__cdecl__)) strchr(const char *_Str,int _Val);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _stricmp(const char *_Str1,const char *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strcmpi(const char *_Str1,const char *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _stricmp_l(const char *_Str1,const char *_Str2,_locale_t _Locale);
  int __attribute__((__cdecl__)) strcoll(const char *_Str1,const char *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strcoll_l(const char *_Str1,const char *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _stricoll(const char *_Str1,const char *_Str2);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _stricoll_l(const char *_Str1,const char *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strncoll (const char *_Str1,const char *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strncoll_l(const char *_Str1,const char *_Str2,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strnicoll (const char *_Str1,const char *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strnicoll_l(const char *_Str1,const char *_Str2,size_t _MaxCount,_locale_t _Locale);
  size_t __attribute__((__cdecl__)) strcspn(const char *_Str,const char *_Control);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strerror(const char *_ErrMsg) ;
  char *__attribute__((__cdecl__)) strerror(int) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strlwr(char *_String) ;
  char *strlwr_l(char *_String,_locale_t _Locale) ;
  char *__attribute__((__cdecl__)) strncat(char * __restrict__ _Dest,const char * __restrict__ _Source,size_t _Count) ;
  int __attribute__((__cdecl__)) strncmp(const char *_Str1,const char *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strnicmp(const char *_Str1,const char *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _strnicmp_l(const char *_Str1,const char *_Str2,size_t _MaxCount,_locale_t _Locale);
  char *strncpy(char * __restrict__ _Dest,const char * __restrict__ _Source,size_t _Count) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strnset(char *_Str,int _Val,size_t _MaxCount) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strnset_l(char *str,int c,size_t count,_locale_t _Locale) ;
                char *__attribute__((__cdecl__)) strpbrk(const char *_Str,const char *_Control);
                char *__attribute__((__cdecl__)) strrchr(const char *_Str,int _Ch);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strrev(char *_Str);
  size_t __attribute__((__cdecl__)) strspn(const char *_Str,const char *_Control);
                char *__attribute__((__cdecl__)) strstr(const char *_Str,const char *_SubStr);
  char *__attribute__((__cdecl__)) strtok(char * __restrict__ _Str,const char * __restrict__ _Delim) ;


  char *strtok_r(char * __restrict__ _Str, const char * __restrict__ _Delim, char ** __restrict__ __last);

  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strupr(char *_String) ;
  __attribute__ ((__dllimport__)) char *_strupr_l(char *_String,_locale_t _Locale) ;
  size_t __attribute__((__cdecl__)) strxfrm(char * __restrict__ _Dst,const char * __restrict__ _Src,size_t _MaxCount);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _strxfrm_l(char * __restrict__ _Dst,const char * __restrict__ _Src,size_t _MaxCount,_locale_t _Locale);


  char *__attribute__((__cdecl__)) strdup(const char *_Src) ;
  int __attribute__((__cdecl__)) strcmpi(const char *_Str1,const char *_Str2) ;
  int __attribute__((__cdecl__)) stricmp(const char *_Str1,const char *_Str2) ;
  char *__attribute__((__cdecl__)) strlwr(char *_Str) ;
  int __attribute__((__cdecl__)) strnicmp(const char *_Str1,const char *_Str,size_t _MaxCount) ;
  int __attribute__((__cdecl__)) strncasecmp (const char *, const char *, size_t);
  int __attribute__((__cdecl__)) strcasecmp (const char *, const char *);







  char *__attribute__((__cdecl__)) strnset(char *_Str,int _Val,size_t _MaxCount) ;
  char *__attribute__((__cdecl__)) strrev(char *_Str) ;
  char *__attribute__((__cdecl__)) strset(char *_Str,int _Val) ;
  char *__attribute__((__cdecl__)) strupr(char *_Str) ;
# 187 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/string.h" 3
}


# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/sec_api/string_s.h" 1 3








# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/string.h" 1 3
# 10 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/sec_api/string_s.h" 2 3
# 21 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/sec_api/string_s.h" 3
extern "C" {


  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _strset_s(char *_Dst,size_t _DstSize,int _Value);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _strerror_s(char *_Buf,size_t _SizeInBytes,const char *_ErrMsg);
  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) strerror_s(char *_Buf,size_t _SizeInBytes,int _ErrNum);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _strlwr_s(char *_Str,size_t _Size);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _strlwr_s_l(char *_Str,size_t _Size,_locale_t _Locale);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _strnset_s(char *_Str,size_t _Size,int _Val,size_t _MaxCount);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _strupr_s(char *_Str,size_t _Size);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _strupr_s_l(char *_Str,size_t _Size,_locale_t _Locale);

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) strncat_s(char *_Dst,size_t _DstSizeInChars,const char *_Src,size_t _MaxCount);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _strncat_s_l(char *_Dst,size_t _DstSizeInChars,const char *_Src,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) strcpy_s(char *_Dst, rsize_t _SizeInBytes, const char *_Src);
  extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) strcpy_s(char (&_Dest)[__size], const char * _Source) { return strcpy_s(_Dest,__size,_Source); } }
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) strncpy_s(char *_Dst, size_t _DstSizeInChars, const char *_Src, size_t _MaxCount);
  extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) strncpy_s(char (&_Dest)[__size], const char * _Source, size_t _MaxCount) { return strncpy_s(_Dest,__size,_Source,_MaxCount); } }
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _strncpy_s_l(char *_Dst, size_t _DstSizeInChars, const char *_Src, size_t _MaxCount, _locale_t _Locale);
  extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) _strncpy_s_l(char (&_Dest)[__size], const char * _Source, size_t _MaxCount, _locale_t _Locale) { return _strncpy_s_l(_Dest,__size,_Source,_MaxCount,_Locale); } };
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) strtok_s(char *_Str,const char *_Delim,char **_Context);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _strtok_s_l(char *_Str,const char *_Delim,char **_Context,_locale_t _Locale);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) strcat_s(char *_Dst, rsize_t _SizeInBytes, const char * _Src);
  extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) strcat_s(char (&_Dest)[__size], const char * _Source) { return strcat_s(_Dest,__size,_Source); } }

  inline __attribute__((__always_inline__)) size_t __attribute__((__cdecl__)) strnlen_s(const char * _src, size_t _count) {
    return _src ? strnlen(_src, _count) : 0;
  }

  __attribute__((dllimport)) errno_t __attribute__((__cdecl__)) memmove_s(void *_dest,size_t _numberOfElements,const void *_src,size_t _count);
# 88 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/sec_api/string_s.h" 3
}
# 191 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/string.h" 2 3
# 43 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cstring" 2 3
# 71 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cstring" 3
extern "C++"
{
namespace std
{


  using ::memchr;
  using ::memcmp;
  using ::memcpy;
  using ::memmove;
  using ::memset;
  using ::strcat;
  using ::strcmp;
  using ::strcoll;
  using ::strcpy;
  using ::strcspn;
  using ::strerror;
  using ::strlen;
  using ::strncat;
  using ::strncmp;
  using ::strncpy;
  using ::strspn;
  using ::strtok;
  using ::strxfrm;
  using ::strchr;
  using ::strpbrk;
  using ::strrchr;
  using ::strstr;


  inline void*
  memchr(void* __s, int __c, size_t __n)
  { return __builtin_memchr(__s, __c, __n); }

  inline char*
  strchr(char* __s, int __n)
  { return __builtin_strchr(__s, __n); }

  inline char*
  strpbrk(char* __s1, const char* __s2)
  { return __builtin_strpbrk(__s1, __s2); }

  inline char*
  strrchr(char* __s, int __n)
  { return __builtin_strrchr(__s, __n); }

  inline char*
  strstr(char* __s1, const char* __s2)
  { return __builtin_strstr(__s1, __s2); }



}
}
# 97 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h" 2
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/iomanip" 1 3
# 37 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/iomanip" 3






# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/locale" 1 3
# 37 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/locale" 3




# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 1 3
# 38 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3

# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ctime" 1 3
# 40 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ctime" 3
# 58 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/ctime" 3
namespace std
{
  using ::clock_t;
  using ::time_t;
  using ::tm;

  using ::clock;
  using ::difftime;
  using ::mktime;
  using ::time;
  using ::asctime;
  using ::ctime;
  using ::gmtime;
  using ::localtime;
  using ::strftime;
}
# 40 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 2 3

namespace std
{
# 52 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
  class time_base
  {
  public:
    enum dateorder { no_order, dmy, mdy, ymd, ydm };
  };

  template<typename _CharT>
    struct __timepunct_cache : public locale::facet
    {

      static const _CharT* _S_timezones[14];

      const _CharT* _M_date_format;
      const _CharT* _M_date_era_format;
      const _CharT* _M_time_format;
      const _CharT* _M_time_era_format;
      const _CharT* _M_date_time_format;
      const _CharT* _M_date_time_era_format;
      const _CharT* _M_am;
      const _CharT* _M_pm;
      const _CharT* _M_am_pm_format;


      const _CharT* _M_day1;
      const _CharT* _M_day2;
      const _CharT* _M_day3;
      const _CharT* _M_day4;
      const _CharT* _M_day5;
      const _CharT* _M_day6;
      const _CharT* _M_day7;


      const _CharT* _M_aday1;
      const _CharT* _M_aday2;
      const _CharT* _M_aday3;
      const _CharT* _M_aday4;
      const _CharT* _M_aday5;
      const _CharT* _M_aday6;
      const _CharT* _M_aday7;


      const _CharT* _M_month01;
      const _CharT* _M_month02;
      const _CharT* _M_month03;
      const _CharT* _M_month04;
      const _CharT* _M_month05;
      const _CharT* _M_month06;
      const _CharT* _M_month07;
      const _CharT* _M_month08;
      const _CharT* _M_month09;
      const _CharT* _M_month10;
      const _CharT* _M_month11;
      const _CharT* _M_month12;


      const _CharT* _M_amonth01;
      const _CharT* _M_amonth02;
      const _CharT* _M_amonth03;
      const _CharT* _M_amonth04;
      const _CharT* _M_amonth05;
      const _CharT* _M_amonth06;
      const _CharT* _M_amonth07;
      const _CharT* _M_amonth08;
      const _CharT* _M_amonth09;
      const _CharT* _M_amonth10;
      const _CharT* _M_amonth11;
      const _CharT* _M_amonth12;

      bool _M_allocated;

      __timepunct_cache(size_t __refs = 0) : facet(__refs),
      _M_date_format(0), _M_date_era_format(0), _M_time_format(0),
      _M_time_era_format(0), _M_date_time_format(0),
      _M_date_time_era_format(0), _M_am(0), _M_pm(0),
      _M_am_pm_format(0), _M_day1(0), _M_day2(0), _M_day3(0),
      _M_day4(0), _M_day5(0), _M_day6(0), _M_day7(0),
      _M_aday1(0), _M_aday2(0), _M_aday3(0), _M_aday4(0),
      _M_aday5(0), _M_aday6(0), _M_aday7(0), _M_month01(0),
      _M_month02(0), _M_month03(0), _M_month04(0), _M_month05(0),
      _M_month06(0), _M_month07(0), _M_month08(0), _M_month09(0),
      _M_month10(0), _M_month11(0), _M_month12(0), _M_amonth01(0),
      _M_amonth02(0), _M_amonth03(0), _M_amonth04(0),
      _M_amonth05(0), _M_amonth06(0), _M_amonth07(0),
      _M_amonth08(0), _M_amonth09(0), _M_amonth10(0),
      _M_amonth11(0), _M_amonth12(0), _M_allocated(false)
      { }

      ~__timepunct_cache();

    private:
      __timepunct_cache&
      operator=(const __timepunct_cache&);

      explicit
      __timepunct_cache(const __timepunct_cache&);
    };

  template<typename _CharT>
    __timepunct_cache<_CharT>::~__timepunct_cache()
    {
      if (_M_allocated)
 {

 }
    }


  template<>
    const char*
    __timepunct_cache<char>::_S_timezones[14];


  template<>
    const wchar_t*
    __timepunct_cache<wchar_t>::_S_timezones[14];



  template<typename _CharT>
    const _CharT* __timepunct_cache<_CharT>::_S_timezones[14];

  template<typename _CharT>
    class __timepunct : public locale::facet
    {
    public:

      typedef _CharT __char_type;
      typedef __timepunct_cache<_CharT> __cache_type;

    protected:
      __cache_type* _M_data;
      __c_locale _M_c_locale_timepunct;
      const char* _M_name_timepunct;

    public:

      static locale::id id;

      explicit
      __timepunct(size_t __refs = 0);

      explicit
      __timepunct(__cache_type* __cache, size_t __refs = 0);
# 206 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      explicit
      __timepunct(__c_locale __cloc, const char* __s, size_t __refs = 0);



      void
      _M_put(_CharT* __s, size_t __maxlen, const _CharT* __format,
      const tm* __tm) const throw ();

      void
      _M_date_formats(const _CharT** __date) const
      {

 __date[0] = _M_data->_M_date_format;
 __date[1] = _M_data->_M_date_era_format;
      }

      void
      _M_time_formats(const _CharT** __time) const
      {

 __time[0] = _M_data->_M_time_format;
 __time[1] = _M_data->_M_time_era_format;
      }

      void
      _M_date_time_formats(const _CharT** __dt) const
      {

 __dt[0] = _M_data->_M_date_time_format;
 __dt[1] = _M_data->_M_date_time_era_format;
      }


      void
      _M_am_pm_format(const _CharT*) const
      { }


      void
      _M_am_pm(const _CharT** __ampm) const
      {
 __ampm[0] = _M_data->_M_am;
 __ampm[1] = _M_data->_M_pm;
      }

      void
      _M_days(const _CharT** __days) const
      {
 __days[0] = _M_data->_M_day1;
 __days[1] = _M_data->_M_day2;
 __days[2] = _M_data->_M_day3;
 __days[3] = _M_data->_M_day4;
 __days[4] = _M_data->_M_day5;
 __days[5] = _M_data->_M_day6;
 __days[6] = _M_data->_M_day7;
      }

      void
      _M_days_abbreviated(const _CharT** __days) const
      {
 __days[0] = _M_data->_M_aday1;
 __days[1] = _M_data->_M_aday2;
 __days[2] = _M_data->_M_aday3;
 __days[3] = _M_data->_M_aday4;
 __days[4] = _M_data->_M_aday5;
 __days[5] = _M_data->_M_aday6;
 __days[6] = _M_data->_M_aday7;
      }

      void
      _M_months(const _CharT** __months) const
      {
 __months[0] = _M_data->_M_month01;
 __months[1] = _M_data->_M_month02;
 __months[2] = _M_data->_M_month03;
 __months[3] = _M_data->_M_month04;
 __months[4] = _M_data->_M_month05;
 __months[5] = _M_data->_M_month06;
 __months[6] = _M_data->_M_month07;
 __months[7] = _M_data->_M_month08;
 __months[8] = _M_data->_M_month09;
 __months[9] = _M_data->_M_month10;
 __months[10] = _M_data->_M_month11;
 __months[11] = _M_data->_M_month12;
      }

      void
      _M_months_abbreviated(const _CharT** __months) const
      {
 __months[0] = _M_data->_M_amonth01;
 __months[1] = _M_data->_M_amonth02;
 __months[2] = _M_data->_M_amonth03;
 __months[3] = _M_data->_M_amonth04;
 __months[4] = _M_data->_M_amonth05;
 __months[5] = _M_data->_M_amonth06;
 __months[6] = _M_data->_M_amonth07;
 __months[7] = _M_data->_M_amonth08;
 __months[8] = _M_data->_M_amonth09;
 __months[9] = _M_data->_M_amonth10;
 __months[10] = _M_data->_M_amonth11;
 __months[11] = _M_data->_M_amonth12;
      }

    protected:
      virtual
      ~__timepunct();


      void
      _M_initialize_timepunct(__c_locale __cloc = 0);
    };

  template<typename _CharT>
    locale::id __timepunct<_CharT>::id;


  template<>
    void
    __timepunct<char>::_M_initialize_timepunct(__c_locale __cloc);

  template<>
    void
    __timepunct<char>::_M_put(char*, size_t, const char*, const tm*) const throw ();


  template<>
    void
    __timepunct<wchar_t>::_M_initialize_timepunct(__c_locale __cloc);

  template<>
    void
    __timepunct<wchar_t>::_M_put(wchar_t*, size_t, const wchar_t*,
     const tm*) const throw ();



}


# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/x86_64-w64-mingw32/bits/time_members.h" 1 3
# 37 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/x86_64-w64-mingw32/bits/time_members.h" 3
namespace std
{


  template<typename _CharT>
    __timepunct<_CharT>::__timepunct(size_t __refs)
    : facet(__refs), _M_data(0)
    {
      _M_name_timepunct = _S_get_c_name();
      _M_initialize_timepunct();
    }

  template<typename _CharT>
    __timepunct<_CharT>::__timepunct(__cache_type* __cache, size_t __refs)
    : facet(__refs), _M_data(__cache)
    {
      _M_name_timepunct = _S_get_c_name();
      _M_initialize_timepunct();
    }

  template<typename _CharT>
    __timepunct<_CharT>::__timepunct(__c_locale __cloc, const char* __s,
         size_t __refs)
    : facet(__refs), _M_data(0)
    {
      if (__builtin_strcmp(__s, _S_get_c_name()) != 0)
 {
   const size_t __len = __builtin_strlen(__s) + 1;
   char* __tmp = new char[__len];
   __builtin_memcpy(__tmp, __s, __len);
   _M_name_timepunct = __tmp;
 }
      else
 _M_name_timepunct = _S_get_c_name();

      try
 { _M_initialize_timepunct(__cloc); }
      catch(...)
 {
   if (_M_name_timepunct != _S_get_c_name())
     delete [] _M_name_timepunct;
   throw;
 }
    }

  template<typename _CharT>
    __timepunct<_CharT>::~__timepunct()
    {
      if (_M_name_timepunct != _S_get_c_name())
 delete [] _M_name_timepunct;
      delete _M_data;
      _S_destroy_c_locale(_M_c_locale_timepunct);
    }


}
# 347 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 2 3

namespace std
{


namespace __cxx11 {
# 367 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
  template<typename _CharT, typename _InIter>
    class time_get : public locale::facet, public time_base
    {
    public:



      typedef _CharT char_type;
      typedef _InIter iter_type;



      static locale::id id;
# 388 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      explicit
      time_get(size_t __refs = 0)
      : facet (__refs) { }
# 405 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      dateorder
      date_order() const
      { return this->do_date_order(); }
# 429 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      iter_type
      get_time(iter_type __beg, iter_type __end, ios_base& __io,
        ios_base::iostate& __err, tm* __tm) const
      { return this->do_get_time(__beg, __end, __io, __err, __tm); }
# 454 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      iter_type
      get_date(iter_type __beg, iter_type __end, ios_base& __io,
        ios_base::iostate& __err, tm* __tm) const
      { return this->do_get_date(__beg, __end, __io, __err, __tm); }
# 482 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      iter_type
      get_weekday(iter_type __beg, iter_type __end, ios_base& __io,
    ios_base::iostate& __err, tm* __tm) const
      { return this->do_get_weekday(__beg, __end, __io, __err, __tm); }
# 511 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      iter_type
      get_monthname(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, tm* __tm) const
      { return this->do_get_monthname(__beg, __end, __io, __err, __tm); }
# 537 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      iter_type
      get_year(iter_type __beg, iter_type __end, ios_base& __io,
        ios_base::iostate& __err, tm* __tm) const
      { return this->do_get_year(__beg, __end, __io, __err, __tm); }
# 558 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      inline
      iter_type get(iter_type __s, iter_type __end, ios_base& __io,
                    ios_base::iostate& __err, tm* __tm, char __format,
                    char __modifier = 0) const
      {
        return this->do_get(__s, __end, __io, __err, __tm, __format,
                            __modifier);
      }
# 585 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      iter_type get(iter_type __s, iter_type __end, ios_base& __io,
                    ios_base::iostate& __err, tm* __tm, const char_type* __fmt,
                    const char_type* __fmtend) const;


    protected:

      virtual
      ~time_get() { }
# 605 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      virtual dateorder
      do_date_order() const;
# 623 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      virtual iter_type
      do_get_time(iter_type __beg, iter_type __end, ios_base& __io,
    ios_base::iostate& __err, tm* __tm) const;
# 642 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      virtual iter_type
      do_get_date(iter_type __beg, iter_type __end, ios_base& __io,
    ios_base::iostate& __err, tm* __tm) const;
# 661 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      virtual iter_type
      do_get_weekday(iter_type __beg, iter_type __end, ios_base&,
       ios_base::iostate& __err, tm* __tm) const;
# 680 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      virtual iter_type
      do_get_monthname(iter_type __beg, iter_type __end, ios_base&,
         ios_base::iostate& __err, tm* __tm) const;
# 699 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      virtual iter_type
      do_get_year(iter_type __beg, iter_type __end, ios_base& __io,
    ios_base::iostate& __err, tm* __tm) const;
# 722 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      virtual

      iter_type
      do_get(iter_type __s, iter_type __end, ios_base& __f,
             ios_base::iostate& __err, tm* __tm,
             char __format, char __modifier) const;



      iter_type
      _M_extract_num(iter_type __beg, iter_type __end, int& __member,
       int __min, int __max, size_t __len,
       ios_base& __io, ios_base::iostate& __err) const;


      iter_type
      _M_extract_name(iter_type __beg, iter_type __end, int& __member,
        const _CharT** __names, size_t __indexlen,
        ios_base& __io, ios_base::iostate& __err) const;


      iter_type
      _M_extract_wday_or_month(iter_type __beg, iter_type __end, int& __member,
          const _CharT** __names, size_t __indexlen,
          ios_base& __io, ios_base::iostate& __err) const;


      iter_type
      _M_extract_via_format(iter_type __beg, iter_type __end, ios_base& __io,
       ios_base::iostate& __err, tm* __tm,
       const _CharT* __format) const;
    };

  template<typename _CharT, typename _InIter>
    locale::id time_get<_CharT, _InIter>::id;


  template<typename _CharT, typename _InIter>
    class time_get_byname : public time_get<_CharT, _InIter>
    {
    public:

      typedef _CharT char_type;
      typedef _InIter iter_type;

      explicit
      time_get_byname(const char*, size_t __refs = 0)
      : time_get<_CharT, _InIter>(__refs) { }


      explicit
      time_get_byname(const string& __s, size_t __refs = 0)
      : time_get_byname(__s.c_str(), __refs) { }


    protected:
      virtual
      ~time_get_byname() { }
    };

}
# 796 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
  template<typename _CharT, typename _OutIter>
    class time_put : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _OutIter iter_type;



      static locale::id id;
# 817 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      explicit
      time_put(size_t __refs = 0)
      : facet(__refs) { }
# 836 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, const tm* __tm,
   const _CharT* __beg, const _CharT* __end) const;
# 856 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   const tm* __tm, char __format, char __mod = 0) const
      { return this->do_put(__s, __io, __fill, __tm, __format, __mod); }

    protected:

      virtual
      ~time_put()
      { }
# 883 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill, const tm* __tm,
      char __format, char __mod) const;
    };

  template<typename _CharT, typename _OutIter>
    locale::id time_put<_CharT, _OutIter>::id;


  template<typename _CharT, typename _OutIter>
    class time_put_byname : public time_put<_CharT, _OutIter>
    {
    public:

      typedef _CharT char_type;
      typedef _OutIter iter_type;

      explicit
      time_put_byname(const char*, size_t __refs = 0)
      : time_put<_CharT, _OutIter>(__refs)
      { }


      explicit
      time_put_byname(const string& __s, size_t __refs = 0)
      : time_put_byname(__s.c_str(), __refs) { }


    protected:
      virtual
      ~time_put_byname() { }
    };
# 928 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
  class money_base
  {
  public:
    enum part { none, space, symbol, sign, value };
    struct pattern { char field[4]; };

    static const pattern _S_default_pattern;

    enum
    {
      _S_minus,
      _S_zero,
      _S_end = 11
    };



    static const char* _S_atoms;



    __attribute__ ((__const__)) static pattern
    _S_construct_pattern(char __precedes, char __space, char __posn) throw ();
  };

  template<typename _CharT, bool _Intl>
    struct __moneypunct_cache : public locale::facet
    {
      const char* _M_grouping;
      size_t _M_grouping_size;
      bool _M_use_grouping;
      _CharT _M_decimal_point;
      _CharT _M_thousands_sep;
      const _CharT* _M_curr_symbol;
      size_t _M_curr_symbol_size;
      const _CharT* _M_positive_sign;
      size_t _M_positive_sign_size;
      const _CharT* _M_negative_sign;
      size_t _M_negative_sign_size;
      int _M_frac_digits;
      money_base::pattern _M_pos_format;
      money_base::pattern _M_neg_format;




      _CharT _M_atoms[money_base::_S_end];

      bool _M_allocated;

      __moneypunct_cache(size_t __refs = 0) : facet(__refs),
      _M_grouping(0), _M_grouping_size(0), _M_use_grouping(false),
      _M_decimal_point(_CharT()), _M_thousands_sep(_CharT()),
      _M_curr_symbol(0), _M_curr_symbol_size(0),
      _M_positive_sign(0), _M_positive_sign_size(0),
      _M_negative_sign(0), _M_negative_sign_size(0),
      _M_frac_digits(0),
      _M_pos_format(money_base::pattern()),
      _M_neg_format(money_base::pattern()), _M_allocated(false)
      { }

      ~__moneypunct_cache();

      void
      _M_cache(const locale& __loc);

    private:
      __moneypunct_cache&
      operator=(const __moneypunct_cache&);

      explicit
      __moneypunct_cache(const __moneypunct_cache&);
    };

  template<typename _CharT, bool _Intl>
    __moneypunct_cache<_CharT, _Intl>::~__moneypunct_cache()
    {
      if (_M_allocated)
 {
   delete [] _M_grouping;
   delete [] _M_curr_symbol;
   delete [] _M_positive_sign;
   delete [] _M_negative_sign;
 }
    }

namespace __cxx11 {
# 1023 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
  template<typename _CharT, bool _Intl>
    class moneypunct : public locale::facet, public money_base
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      typedef __moneypunct_cache<_CharT, _Intl> __cache_type;

    private:
      __cache_type* _M_data;

    public:


      static const bool intl = _Intl;

      static locale::id id;
# 1052 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      explicit
      moneypunct(size_t __refs = 0)
      : facet(__refs), _M_data(0)
      { _M_initialize_moneypunct(); }
# 1065 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      explicit
      moneypunct(__cache_type* __cache, size_t __refs = 0)
      : facet(__refs), _M_data(__cache)
      { _M_initialize_moneypunct(); }
# 1080 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      explicit
      moneypunct(__c_locale __cloc, const char* __s, size_t __refs = 0)
      : facet(__refs), _M_data(0)
      { _M_initialize_moneypunct(__cloc, __s); }
# 1094 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      char_type
      decimal_point() const
      { return this->do_decimal_point(); }
# 1107 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      char_type
      thousands_sep() const
      { return this->do_thousands_sep(); }
# 1137 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      string
      grouping() const
      { return this->do_grouping(); }
# 1150 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      string_type
      curr_symbol() const
      { return this->do_curr_symbol(); }
# 1167 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      string_type
      positive_sign() const
      { return this->do_positive_sign(); }
# 1184 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      string_type
      negative_sign() const
      { return this->do_negative_sign(); }
# 1200 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      int
      frac_digits() const
      { return this->do_frac_digits(); }
# 1236 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      pattern
      pos_format() const
      { return this->do_pos_format(); }

      pattern
      neg_format() const
      { return this->do_neg_format(); }


    protected:

      virtual
      ~moneypunct();
# 1258 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      virtual char_type
      do_decimal_point() const
      { return _M_data->_M_decimal_point; }
# 1270 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      virtual char_type
      do_thousands_sep() const
      { return _M_data->_M_thousands_sep; }
# 1283 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      virtual string
      do_grouping() const
      { return _M_data->_M_grouping; }
# 1296 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      virtual string_type
      do_curr_symbol() const
      { return _M_data->_M_curr_symbol; }
# 1309 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      virtual string_type
      do_positive_sign() const
      { return _M_data->_M_positive_sign; }
# 1322 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      virtual string_type
      do_negative_sign() const
      { return _M_data->_M_negative_sign; }
# 1336 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      virtual int
      do_frac_digits() const
      { return _M_data->_M_frac_digits; }
# 1350 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      virtual pattern
      do_pos_format() const
      { return _M_data->_M_pos_format; }
# 1364 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      virtual pattern
      do_neg_format() const
      { return _M_data->_M_neg_format; }


       void
       _M_initialize_moneypunct(__c_locale __cloc = 0,
    const char* __name = 0);
    };

  template<typename _CharT, bool _Intl>
    locale::id moneypunct<_CharT, _Intl>::id;

  template<typename _CharT, bool _Intl>
    const bool moneypunct<_CharT, _Intl>::intl;

  template<>
    moneypunct<char, true>::~moneypunct();

  template<>
    moneypunct<char, false>::~moneypunct();

  template<>
    void
    moneypunct<char, true>::_M_initialize_moneypunct(__c_locale, const char*);

  template<>
    void
    moneypunct<char, false>::_M_initialize_moneypunct(__c_locale, const char*);


  template<>
    moneypunct<wchar_t, true>::~moneypunct();

  template<>
    moneypunct<wchar_t, false>::~moneypunct();

  template<>
    void
    moneypunct<wchar_t, true>::_M_initialize_moneypunct(__c_locale,
       const char*);

  template<>
    void
    moneypunct<wchar_t, false>::_M_initialize_moneypunct(__c_locale,
        const char*);



  template<typename _CharT, bool _Intl>
    class moneypunct_byname : public moneypunct<_CharT, _Intl>
    {
    public:
      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      static const bool intl = _Intl;

      explicit
      moneypunct_byname(const char* __s, size_t __refs = 0)
      : moneypunct<_CharT, _Intl>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     __c_locale __tmp;
     this->_S_create_c_locale(__tmp, __s);
     this->_M_initialize_moneypunct(__tmp);
     this->_S_destroy_c_locale(__tmp);
   }
      }


      explicit
      moneypunct_byname(const string& __s, size_t __refs = 0)
      : moneypunct_byname(__s.c_str(), __refs) { }


    protected:
      virtual
      ~moneypunct_byname() { }
    };

  template<typename _CharT, bool _Intl>
    const bool moneypunct_byname<_CharT, _Intl>::intl;

}

namespace __cxx11 {
# 1467 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
  template<typename _CharT, typename _InIter>
    class money_get : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _InIter iter_type;
      typedef basic_string<_CharT> string_type;



      static locale::id id;
# 1489 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      explicit
      money_get(size_t __refs = 0) : facet(__refs) { }
# 1519 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      iter_type
      get(iter_type __s, iter_type __end, bool __intl, ios_base& __io,
   ios_base::iostate& __err, long double& __units) const
      { return this->do_get(__s, __end, __intl, __io, __err, __units); }
# 1550 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      iter_type
      get(iter_type __s, iter_type __end, bool __intl, ios_base& __io,
   ios_base::iostate& __err, string_type& __digits) const
      { return this->do_get(__s, __end, __intl, __io, __err, __digits); }

    protected:

      virtual
      ~money_get() { }
# 1574 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      virtual iter_type
      do_get(iter_type __s, iter_type __end, bool __intl, ios_base& __io,
      ios_base::iostate& __err, long double& __units) const;
# 1586 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      virtual iter_type
      do_get(iter_type __s, iter_type __end, bool __intl, ios_base& __io,
      ios_base::iostate& __err, string_type& __digits) const;
# 1598 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      template<bool _Intl>
        iter_type
        _M_extract(iter_type __s, iter_type __end, ios_base& __io,
     ios_base::iostate& __err, string& __digits) const;
    };

  template<typename _CharT, typename _InIter>
    locale::id money_get<_CharT, _InIter>::id;
# 1620 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
  template<typename _CharT, typename _OutIter>
    class money_put : public locale::facet
    {
    public:


      typedef _CharT char_type;
      typedef _OutIter iter_type;
      typedef basic_string<_CharT> string_type;



      static locale::id id;
# 1641 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      explicit
      money_put(size_t __refs = 0) : facet(__refs) { }
# 1661 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      iter_type
      put(iter_type __s, bool __intl, ios_base& __io,
   char_type __fill, long double __units) const
      { return this->do_put(__s, __intl, __io, __fill, __units); }
# 1684 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      iter_type
      put(iter_type __s, bool __intl, ios_base& __io,
   char_type __fill, const string_type& __digits) const
      { return this->do_put(__s, __intl, __io, __fill, __digits); }

    protected:

      virtual
      ~money_put() { }
# 1719 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      virtual iter_type
      do_put(iter_type __s, bool __intl, ios_base& __io, char_type __fill,
      long double __units) const;
# 1743 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      virtual iter_type
      do_put(iter_type __s, bool __intl, ios_base& __io, char_type __fill,
      const string_type& __digits) const;
# 1755 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      template<bool _Intl>
        iter_type
        _M_insert(iter_type __s, ios_base& __io, char_type __fill,
    const string_type& __digits) const;
    };

  template<typename _CharT, typename _OutIter>
    locale::id money_put<_CharT, _OutIter>::id;

}





  struct messages_base
  {
    typedef int catalog;
  };

namespace __cxx11 {
# 1798 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
  template<typename _CharT>
    class messages : public locale::facet, public messages_base
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


    protected:


      __c_locale _M_c_locale_messages;
      const char* _M_name_messages;

    public:

      static locale::id id;
# 1826 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      explicit
      messages(size_t __refs = 0);
# 1840 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      explicit
      messages(__c_locale __cloc, const char* __s, size_t __refs = 0);
# 1853 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      catalog
      open(const basic_string<char>& __s, const locale& __loc) const
      { return this->do_open(__s, __loc); }
# 1871 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      catalog
      open(const basic_string<char>&, const locale&, const char*) const;
# 1889 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      string_type
      get(catalog __c, int __set, int __msgid, const string_type& __s) const
      { return this->do_get(__c, __set, __msgid, __s); }
# 1900 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      void
      close(catalog __c) const
      { return this->do_close(__c); }

    protected:

      virtual
      ~messages();
# 1920 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      virtual catalog
      do_open(const basic_string<char>&, const locale&) const;
# 1939 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 3
      virtual string_type
      do_get(catalog, int, int, const string_type& __dfault) const;






      virtual void
      do_close(catalog) const;


      char*
      _M_convert_to_char(const string_type& __msg) const
      {

 return reinterpret_cast<char*>(const_cast<_CharT*>(__msg.c_str()));
      }


      string_type
      _M_convert_from_char(char*) const
      {

 return string_type();
      }
     };

  template<typename _CharT>
    locale::id messages<_CharT>::id;


  template<>
    string
    messages<char>::do_get(catalog, int, int, const string&) const;


  template<>
    wstring
    messages<wchar_t>::do_get(catalog, int, int, const wstring&) const;



   template<typename _CharT>
    class messages_byname : public messages<_CharT>
    {
    public:
      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      explicit
      messages_byname(const char* __s, size_t __refs = 0);


      explicit
      messages_byname(const string& __s, size_t __refs = 0)
      : messages_byname(__s.c_str(), __refs) { }


    protected:
      virtual
      ~messages_byname()
      { }
    };

}


}


# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/x86_64-w64-mingw32/bits/messages_members.h" 1 3
# 36 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/x86_64-w64-mingw32/bits/messages_members.h" 3
namespace std
{



  template<typename _CharT>
     messages<_CharT>::messages(size_t __refs)
     : facet(__refs)
     { _M_c_locale_messages = _S_get_c_locale(); }

  template<typename _CharT>
     messages<_CharT>::messages(__c_locale, const char*, size_t __refs)
     : facet(__refs)
     { _M_c_locale_messages = _S_get_c_locale(); }

  template<typename _CharT>
    typename messages<_CharT>::catalog
    messages<_CharT>::open(const basic_string<char>& __s, const locale& __loc,
      const char*) const
    { return this->do_open(__s, __loc); }


  template<typename _CharT>
    messages<_CharT>::~messages()
    { _S_destroy_c_locale(_M_c_locale_messages); }

  template<typename _CharT>
    typename messages<_CharT>::catalog
    messages<_CharT>::do_open(const basic_string<char>&, const locale&) const
    { return 0; }

  template<typename _CharT>
    typename messages<_CharT>::string_type
    messages<_CharT>::do_get(catalog, int, int,
        const string_type& __dfault) const
    { return __dfault; }

  template<typename _CharT>
    void
    messages<_CharT>::do_close(catalog) const
    { }


   template<typename _CharT>
     messages_byname<_CharT>::messages_byname(const char* __s, size_t __refs)
     : messages<_CharT>(__refs)
     {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     this->_S_destroy_c_locale(this->_M_c_locale_messages);
     this->_S_create_c_locale(this->_M_c_locale_messages, __s);
   }
     }


}
# 2011 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 2 3


# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/codecvt.h" 1 3
# 40 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/codecvt.h" 3

namespace std
{



  class codecvt_base
  {
  public:
    enum result
    {
      ok,
      partial,
      error,
      noconv
    };
  };
# 67 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/codecvt.h" 3
  template<typename _InternT, typename _ExternT, typename _StateT>
    class __codecvt_abstract_base
    : public locale::facet, public codecvt_base
    {
    public:

      typedef codecvt_base::result result;
      typedef _InternT intern_type;
      typedef _ExternT extern_type;
      typedef _StateT state_type;
# 115 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/codecvt.h" 3
      result
      out(state_type& __state, const intern_type* __from,
   const intern_type* __from_end, const intern_type*& __from_next,
   extern_type* __to, extern_type* __to_end,
   extern_type*& __to_next) const
      {
 return this->do_out(__state, __from, __from_end, __from_next,
       __to, __to_end, __to_next);
      }
# 154 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/codecvt.h" 3
      result
      unshift(state_type& __state, extern_type* __to, extern_type* __to_end,
       extern_type*& __to_next) const
      { return this->do_unshift(__state, __to,__to_end,__to_next); }
# 195 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/codecvt.h" 3
      result
      in(state_type& __state, const extern_type* __from,
  const extern_type* __from_end, const extern_type*& __from_next,
  intern_type* __to, intern_type* __to_end,
  intern_type*& __to_next) const
      {
 return this->do_in(__state, __from, __from_end, __from_next,
      __to, __to_end, __to_next);
      }

      int
      encoding() const throw()
      { return this->do_encoding(); }

      bool
      always_noconv() const throw()
      { return this->do_always_noconv(); }

      int
      length(state_type& __state, const extern_type* __from,
      const extern_type* __end, size_t __max) const
      { return this->do_length(__state, __from, __end, __max); }

      int
      max_length() const throw()
      { return this->do_max_length(); }

    protected:
      explicit
      __codecvt_abstract_base(size_t __refs = 0) : locale::facet(__refs) { }

      virtual
      ~__codecvt_abstract_base() { }
# 236 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/codecvt.h" 3
      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const = 0;

      virtual result
      do_unshift(state_type& __state, extern_type* __to,
   extern_type* __to_end, extern_type*& __to_next) const = 0;

      virtual result
      do_in(state_type& __state, const extern_type* __from,
     const extern_type* __from_end, const extern_type*& __from_next,
     intern_type* __to, intern_type* __to_end,
     intern_type*& __to_next) const = 0;

      virtual int
      do_encoding() const throw() = 0;

      virtual bool
      do_always_noconv() const throw() = 0;

      virtual int
      do_length(state_type&, const extern_type* __from,
  const extern_type* __end, size_t __max) const = 0;

      virtual int
      do_max_length() const throw() = 0;
    };
# 273 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/codecvt.h" 3
   template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt
    : public __codecvt_abstract_base<_InternT, _ExternT, _StateT>
    {
    public:

      typedef codecvt_base::result result;
      typedef _InternT intern_type;
      typedef _ExternT extern_type;
      typedef _StateT state_type;

    protected:
      __c_locale _M_c_locale_codecvt;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0)
      : __codecvt_abstract_base<_InternT, _ExternT, _StateT> (__refs),
 _M_c_locale_codecvt(0)
      { }

      explicit
      codecvt(__c_locale __cloc, size_t __refs = 0);

    protected:
      virtual
      ~codecvt() { }

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state, extern_type* __to,
   extern_type* __to_end, extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state, const extern_type* __from,
     const extern_type* __from_end, const extern_type*& __from_next,
     intern_type* __to, intern_type* __to_end,
     intern_type*& __to_next) const;

      virtual int
      do_encoding() const throw();

      virtual bool
      do_always_noconv() const throw();

      virtual int
      do_length(state_type&, const extern_type* __from,
  const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
    };

  template<typename _InternT, typename _ExternT, typename _StateT>
    locale::id codecvt<_InternT, _ExternT, _StateT>::id;


  template<>
    class codecvt<char, char, mbstate_t>
    : public __codecvt_abstract_base<char, char, mbstate_t>
    {
      friend class messages<char>;

    public:

      typedef char intern_type;
      typedef char extern_type;
      typedef mbstate_t state_type;

    protected:
      __c_locale _M_c_locale_codecvt;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0);

      explicit
      codecvt(__c_locale __cloc, size_t __refs = 0);

    protected:
      virtual
      ~codecvt();

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state, extern_type* __to,
   extern_type* __to_end, extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state, const extern_type* __from,
     const extern_type* __from_end, const extern_type*& __from_next,
     intern_type* __to, intern_type* __to_end,
     intern_type*& __to_next) const;

      virtual int
      do_encoding() const throw();

      virtual bool
      do_always_noconv() const throw();

      virtual int
      do_length(state_type&, const extern_type* __from,
  const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
  };






  template<>
    class codecvt<wchar_t, char, mbstate_t>
    : public __codecvt_abstract_base<wchar_t, char, mbstate_t>
    {
      friend class messages<wchar_t>;

    public:

      typedef wchar_t intern_type;
      typedef char extern_type;
      typedef mbstate_t state_type;

    protected:
      __c_locale _M_c_locale_codecvt;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0);

      explicit
      codecvt(__c_locale __cloc, size_t __refs = 0);

    protected:
      virtual
      ~codecvt();

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state,
   extern_type* __to, extern_type* __to_end,
   extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state,
      const extern_type* __from, const extern_type* __from_end,
      const extern_type*& __from_next,
      intern_type* __to, intern_type* __to_end,
      intern_type*& __to_next) const;

      virtual
      int do_encoding() const throw();

      virtual
      bool do_always_noconv() const throw();

      virtual
      int do_length(state_type&, const extern_type* __from,
      const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
    };







  template<>
    class codecvt<char16_t, char, mbstate_t>
    : public __codecvt_abstract_base<char16_t, char, mbstate_t>
    {
    public:

      typedef char16_t intern_type;
      typedef char extern_type;
      typedef mbstate_t state_type;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0)
      : __codecvt_abstract_base<char16_t, char, mbstate_t>(__refs) { }

    protected:
      virtual
      ~codecvt();

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state,
   extern_type* __to, extern_type* __to_end,
   extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state,
      const extern_type* __from, const extern_type* __from_end,
      const extern_type*& __from_next,
      intern_type* __to, intern_type* __to_end,
      intern_type*& __to_next) const;

      virtual
      int do_encoding() const throw();

      virtual
      bool do_always_noconv() const throw();

      virtual
      int do_length(state_type&, const extern_type* __from,
      const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
    };





  template<>
    class codecvt<char32_t, char, mbstate_t>
    : public __codecvt_abstract_base<char32_t, char, mbstate_t>
    {
    public:

      typedef char32_t intern_type;
      typedef char extern_type;
      typedef mbstate_t state_type;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0)
      : __codecvt_abstract_base<char32_t, char, mbstate_t>(__refs) { }

    protected:
      virtual
      ~codecvt();

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state,
   extern_type* __to, extern_type* __to_end,
   extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state,
      const extern_type* __from, const extern_type* __from_end,
      const extern_type*& __from_next,
      intern_type* __to, intern_type* __to_end,
      intern_type*& __to_next) const;

      virtual
      int do_encoding() const throw();

      virtual
      bool do_always_noconv() const throw();

      virtual
      int do_length(state_type&, const extern_type* __from,
      const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
    };
# 695 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/codecvt.h" 3
  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt_byname : public codecvt<_InternT, _ExternT, _StateT>
    {
    public:
      explicit
      codecvt_byname(const char* __s, size_t __refs = 0)
      : codecvt<_InternT, _ExternT, _StateT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     this->_S_destroy_c_locale(this->_M_c_locale_codecvt);
     this->_S_create_c_locale(this->_M_c_locale_codecvt, __s);
   }
      }


      explicit
      codecvt_byname(const string& __s, size_t __refs = 0)
      : codecvt_byname(__s.c_str(), __refs) { }


    protected:
      virtual
      ~codecvt_byname() { }
    };


  template<>
    class codecvt_byname<char16_t, char, mbstate_t>
    : public codecvt<char16_t, char, mbstate_t>
    {
    public:
      explicit
      codecvt_byname(const char*, size_t __refs = 0)
      : codecvt<char16_t, char, mbstate_t>(__refs) { }

      explicit
      codecvt_byname(const string& __s, size_t __refs = 0)
      : codecvt_byname(__s.c_str(), __refs) { }

    protected:
      virtual
      ~codecvt_byname() { }
    };

  template<>
    class codecvt_byname<char32_t, char, mbstate_t>
    : public codecvt<char32_t, char, mbstate_t>
    {
    public:
      explicit
      codecvt_byname(const char*, size_t __refs = 0)
      : codecvt<char32_t, char, mbstate_t>(__refs) { }

      explicit
      codecvt_byname(const string& __s, size_t __refs = 0)
      : codecvt_byname(__s.c_str(), __refs) { }

    protected:
      virtual
      ~codecvt_byname() { }
    };
# 802 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/codecvt.h" 3
  extern template class codecvt_byname<char, char, mbstate_t>;

  extern template
    const codecvt<char, char, mbstate_t>&
    use_facet<codecvt<char, char, mbstate_t> >(const locale&);

  extern template
    bool
    has_facet<codecvt<char, char, mbstate_t> >(const locale&);


  extern template class codecvt_byname<wchar_t, char, mbstate_t>;

  extern template
    const codecvt<wchar_t, char, mbstate_t>&
    use_facet<codecvt<wchar_t, char, mbstate_t> >(const locale&);

  extern template
    bool
    has_facet<codecvt<wchar_t, char, mbstate_t> >(const locale&);



  extern template class codecvt_byname<char16_t, char, mbstate_t>;
  extern template class codecvt_byname<char32_t, char, mbstate_t>;
# 838 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/codecvt.h" 3
}
# 2014 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 2 3

# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.tcc" 1 3
# 34 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.tcc" 3

namespace std
{


  template<typename _CharT, bool _Intl>
    struct __use_cache<__moneypunct_cache<_CharT, _Intl> >
    {
      const __moneypunct_cache<_CharT, _Intl>*
      operator() (const locale& __loc) const
      {
 const size_t __i = moneypunct<_CharT, _Intl>::id._M_id();
 const locale::facet** __caches = __loc._M_impl->_M_caches;
 if (!__caches[__i])
   {
     __moneypunct_cache<_CharT, _Intl>* __tmp = 0;
     try
       {
  __tmp = new __moneypunct_cache<_CharT, _Intl>;
  __tmp->_M_cache(__loc);
       }
     catch(...)
       {
  delete __tmp;
  throw;
       }
     __loc._M_impl->_M_install_cache(__tmp, __i);
   }
 return static_cast<
   const __moneypunct_cache<_CharT, _Intl>*>(__caches[__i]);
      }
    };

  template<typename _CharT, bool _Intl>
    void
    __moneypunct_cache<_CharT, _Intl>::_M_cache(const locale& __loc)
    {
      const moneypunct<_CharT, _Intl>& __mp =
 use_facet<moneypunct<_CharT, _Intl> >(__loc);

      _M_decimal_point = __mp.decimal_point();
      _M_thousands_sep = __mp.thousands_sep();
      _M_frac_digits = __mp.frac_digits();

      char* __grouping = 0;
      _CharT* __curr_symbol = 0;
      _CharT* __positive_sign = 0;
      _CharT* __negative_sign = 0;
      try
 {
   const string& __g = __mp.grouping();
   _M_grouping_size = __g.size();
   __grouping = new char[_M_grouping_size];
   __g.copy(__grouping, _M_grouping_size);
   _M_use_grouping = (_M_grouping_size
        && static_cast<signed char>(__grouping[0]) > 0
        && (__grouping[0]
     != __gnu_cxx::__numeric_traits<char>::__max));

   const basic_string<_CharT>& __cs = __mp.curr_symbol();
   _M_curr_symbol_size = __cs.size();
   __curr_symbol = new _CharT[_M_curr_symbol_size];
   __cs.copy(__curr_symbol, _M_curr_symbol_size);

   const basic_string<_CharT>& __ps = __mp.positive_sign();
   _M_positive_sign_size = __ps.size();
   __positive_sign = new _CharT[_M_positive_sign_size];
   __ps.copy(__positive_sign, _M_positive_sign_size);

   const basic_string<_CharT>& __ns = __mp.negative_sign();
   _M_negative_sign_size = __ns.size();
   __negative_sign = new _CharT[_M_negative_sign_size];
   __ns.copy(__negative_sign, _M_negative_sign_size);

   _M_pos_format = __mp.pos_format();
   _M_neg_format = __mp.neg_format();

   const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__loc);
   __ct.widen(money_base::_S_atoms,
       money_base::_S_atoms + money_base::_S_end, _M_atoms);

   _M_grouping = __grouping;
   _M_curr_symbol = __curr_symbol;
   _M_positive_sign = __positive_sign;
   _M_negative_sign = __negative_sign;
   _M_allocated = true;
 }
      catch(...)
 {
   delete [] __grouping;
   delete [] __curr_symbol;
   delete [] __positive_sign;
   delete [] __negative_sign;
   throw;
 }
    }

namespace __cxx11 {

  template<typename _CharT, typename _InIter>
    template<bool _Intl>
      _InIter
      money_get<_CharT, _InIter>::
      _M_extract(iter_type __beg, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, string& __units) const
      {
 typedef char_traits<_CharT> __traits_type;
 typedef typename string_type::size_type size_type;
 typedef money_base::part part;
 typedef __moneypunct_cache<_CharT, _Intl> __cache_type;

 const locale& __loc = __io._M_getloc();
 const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

 __use_cache<__cache_type> __uc;
 const __cache_type* __lc = __uc(__loc);
 const char_type* __lit = __lc->_M_atoms;


 bool __negative = false;

 size_type __sign_size = 0;

 const bool __mandatory_sign = (__lc->_M_positive_sign_size
           && __lc->_M_negative_sign_size);

 string __grouping_tmp;
 if (__lc->_M_use_grouping)
   __grouping_tmp.reserve(32);

 int __last_pos = 0;

 int __n = 0;

 bool __testvalid = true;

 bool __testdecfound = false;


 string __res;
 __res.reserve(32);

 const char_type* __lit_zero = __lit + money_base::_S_zero;
 const money_base::pattern __p = __lc->_M_neg_format;
 for (int __i = 0; __i < 4 && __testvalid; ++__i)
   {
     const part __which = static_cast<part>(__p.field[__i]);
     switch (__which)
       {
       case money_base::symbol:




  if (__io.flags() & ios_base::showbase || __sign_size > 1
      || __i == 0
      || (__i == 1 && (__mandatory_sign
         || (static_cast<part>(__p.field[0])
      == money_base::sign)
         || (static_cast<part>(__p.field[2])
      == money_base::space)))
      || (__i == 2 && ((static_cast<part>(__p.field[3])
          == money_base::value)
         || (__mandatory_sign
      && (static_cast<part>(__p.field[3])
          == money_base::sign)))))
    {
      const size_type __len = __lc->_M_curr_symbol_size;
      size_type __j = 0;
      for (; __beg != __end && __j < __len
      && *__beg == __lc->_M_curr_symbol[__j];
    ++__beg, (void)++__j);
      if (__j != __len
   && (__j || __io.flags() & ios_base::showbase))
        __testvalid = false;
    }
  break;
       case money_base::sign:

  if (__lc->_M_positive_sign_size && __beg != __end
      && *__beg == __lc->_M_positive_sign[0])
    {
      __sign_size = __lc->_M_positive_sign_size;
      ++__beg;
    }
  else if (__lc->_M_negative_sign_size && __beg != __end
    && *__beg == __lc->_M_negative_sign[0])
    {
      __negative = true;
      __sign_size = __lc->_M_negative_sign_size;
      ++__beg;
    }
  else if (__lc->_M_positive_sign_size
    && !__lc->_M_negative_sign_size)


    __negative = true;
  else if (__mandatory_sign)
    __testvalid = false;
  break;
       case money_base::value:


  for (; __beg != __end; ++__beg)
    {
      const char_type __c = *__beg;
      const char_type* __q = __traits_type::find(__lit_zero,
              10, __c);
      if (__q != 0)
        {
   __res += money_base::_S_atoms[__q - __lit];
   ++__n;
        }
      else if (__c == __lc->_M_decimal_point
        && !__testdecfound)
        {
   if (__lc->_M_frac_digits <= 0)
     break;

   __last_pos = __n;
   __n = 0;
   __testdecfound = true;
        }
      else if (__lc->_M_use_grouping
        && __c == __lc->_M_thousands_sep
        && !__testdecfound)
        {
   if (__n)
     {

       __grouping_tmp += static_cast<char>(__n);
       __n = 0;
     }
   else
     {
       __testvalid = false;
       break;
     }
        }
      else
        break;
    }
  if (__res.empty())
    __testvalid = false;
  break;
       case money_base::space:

  if (__beg != __end && __ctype.is(ctype_base::space, *__beg))
    ++__beg;
  else
    __testvalid = false;

       case money_base::none:

  if (__i != 3)
    for (; __beg != __end
    && __ctype.is(ctype_base::space, *__beg); ++__beg);
  break;
       }
   }


 if (__sign_size > 1 && __testvalid)
   {
     const char_type* __sign = __negative ? __lc->_M_negative_sign
                                          : __lc->_M_positive_sign;
     size_type __i = 1;
     for (; __beg != __end && __i < __sign_size
     && *__beg == __sign[__i]; ++__beg, (void)++__i);

     if (__i != __sign_size)
       __testvalid = false;
   }

 if (__testvalid)
   {

     if (__res.size() > 1)
       {
  const size_type __first = __res.find_first_not_of('0');
  const bool __only_zeros = __first == string::npos;
  if (__first)
    __res.erase(0, __only_zeros ? __res.size() - 1 : __first);
       }


     if (__negative && __res[0] != '0')
       __res.insert(__res.begin(), '-');


     if (__grouping_tmp.size())
       {

  __grouping_tmp += static_cast<char>(__testdecfound ? __last_pos
                         : __n);
  if (!std::__verify_grouping(__lc->_M_grouping,
         __lc->_M_grouping_size,
         __grouping_tmp))
    __err |= ios_base::failbit;
       }


     if (__testdecfound && __n != __lc->_M_frac_digits)
       __testvalid = false;
   }


 if (!__testvalid)
   __err |= ios_base::failbit;
 else
   __units.swap(__res);


 if (__beg == __end)
   __err |= ios_base::eofbit;
 return __beg;
      }
# 368 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.tcc" 3
  template<typename _CharT, typename _InIter>
    _InIter
    money_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, bool __intl, ios_base& __io,
    ios_base::iostate& __err, long double& __units) const
    {
      string __str;
      __beg = __intl ? _M_extract<true>(__beg, __end, __io, __err, __str)
              : _M_extract<false>(__beg, __end, __io, __err, __str);
      std::__convert_to_v(__str.c_str(), __units, __err, _S_get_c_locale());
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    money_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, bool __intl, ios_base& __io,
    ios_base::iostate& __err, string_type& __digits) const
    {
      typedef typename string::size_type size_type;

      const locale& __loc = __io._M_getloc();
      const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

      string __str;
      __beg = __intl ? _M_extract<true>(__beg, __end, __io, __err, __str)
              : _M_extract<false>(__beg, __end, __io, __err, __str);
      const size_type __len = __str.size();
      if (__len)
 {
   __digits.resize(__len);
   __ctype.widen(__str.data(), __str.data() + __len, &__digits[0]);
 }
      return __beg;
    }

  template<typename _CharT, typename _OutIter>
    template<bool _Intl>
      _OutIter
      money_put<_CharT, _OutIter>::
      _M_insert(iter_type __s, ios_base& __io, char_type __fill,
  const string_type& __digits) const
      {
 typedef typename string_type::size_type size_type;
 typedef money_base::part part;
 typedef __moneypunct_cache<_CharT, _Intl> __cache_type;

 const locale& __loc = __io._M_getloc();
 const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

 __use_cache<__cache_type> __uc;
 const __cache_type* __lc = __uc(__loc);
 const char_type* __lit = __lc->_M_atoms;



 const char_type* __beg = __digits.data();

 money_base::pattern __p;
 const char_type* __sign;
 size_type __sign_size;
 if (!(*__beg == __lit[money_base::_S_minus]))
   {
     __p = __lc->_M_pos_format;
     __sign = __lc->_M_positive_sign;
     __sign_size = __lc->_M_positive_sign_size;
   }
 else
   {
     __p = __lc->_M_neg_format;
     __sign = __lc->_M_negative_sign;
     __sign_size = __lc->_M_negative_sign_size;
     if (__digits.size())
       ++__beg;
   }


 size_type __len = __ctype.scan_not(ctype_base::digit, __beg,
        __beg + __digits.size()) - __beg;
 if (__len)
   {



     string_type __value;
     __value.reserve(2 * __len);



     long __paddec = __len - __lc->_M_frac_digits;
     if (__paddec > 0)
         {
  if (__lc->_M_frac_digits < 0)
    __paddec = __len;
    if (__lc->_M_grouping_size)
      {
      __value.assign(2 * __paddec, char_type());
       _CharT* __vend =
        std::__add_grouping(&__value[0], __lc->_M_thousands_sep,
       __lc->_M_grouping,
       __lc->_M_grouping_size,
       __beg, __beg + __paddec);
      __value.erase(__vend - &__value[0]);
      }
    else
    __value.assign(__beg, __paddec);
       }


     if (__lc->_M_frac_digits > 0)
       {
  __value += __lc->_M_decimal_point;
  if (__paddec >= 0)
    __value.append(__beg + __paddec, __lc->_M_frac_digits);
  else
    {

      __value.append(-__paddec, __lit[money_base::_S_zero]);
      __value.append(__beg, __len);
    }
         }


     const ios_base::fmtflags __f = __io.flags()
                                    & ios_base::adjustfield;
     __len = __value.size() + __sign_size;
     __len += ((__io.flags() & ios_base::showbase)
        ? __lc->_M_curr_symbol_size : 0);

     string_type __res;
     __res.reserve(2 * __len);

     const size_type __width = static_cast<size_type>(__io.width());
     const bool __testipad = (__f == ios_base::internal
         && __len < __width);

     for (int __i = 0; __i < 4; ++__i)
       {
  const part __which = static_cast<part>(__p.field[__i]);
  switch (__which)
    {
    case money_base::symbol:
      if (__io.flags() & ios_base::showbase)
        __res.append(__lc->_M_curr_symbol,
       __lc->_M_curr_symbol_size);
      break;
    case money_base::sign:



      if (__sign_size)
        __res += __sign[0];
      break;
    case money_base::value:
      __res += __value;
      break;
    case money_base::space:



      if (__testipad)
        __res.append(__width - __len, __fill);
      else
        __res += __fill;
      break;
    case money_base::none:
      if (__testipad)
        __res.append(__width - __len, __fill);
      break;
    }
       }


     if (__sign_size > 1)
       __res.append(__sign + 1, __sign_size - 1);


     __len = __res.size();
     if (__width > __len)
       {
  if (__f == ios_base::left)

    __res.append(__width - __len, __fill);
  else

    __res.insert(0, __width - __len, __fill);
  __len = __width;
       }


     __s = std::__write(__s, __res.data(), __len);
   }
 __io.width(0);
 return __s;
      }
# 574 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.tcc" 3
  template<typename _CharT, typename _OutIter>
    _OutIter
    money_put<_CharT, _OutIter>::
    do_put(iter_type __s, bool __intl, ios_base& __io, char_type __fill,
    long double __units) const
    {
      const locale __loc = __io.getloc();
      const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);


      int __cs_size = 64;
      char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));


      int __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
     "%.*Lf", 0, __units);

      if (__len >= __cs_size)
 {
   __cs_size = __len + 1;
   __cs = static_cast<char*>(__builtin_alloca(__cs_size));
   __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
     "%.*Lf", 0, __units);
 }
# 606 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.tcc" 3
      string_type __digits(__len, char_type());
      __ctype.widen(__cs, __cs + __len, &__digits[0]);
      return __intl ? _M_insert<true>(__s, __io, __fill, __digits)
             : _M_insert<false>(__s, __io, __fill, __digits);
    }

  template<typename _CharT, typename _OutIter>
    _OutIter
    money_put<_CharT, _OutIter>::
    do_put(iter_type __s, bool __intl, ios_base& __io, char_type __fill,
    const string_type& __digits) const
    { return __intl ? _M_insert<true>(__s, __io, __fill, __digits)
             : _M_insert<false>(__s, __io, __fill, __digits); }

}




  template<typename _CharT, typename _InIter>
    time_base::dateorder
    time_get<_CharT, _InIter>::do_date_order() const
    { return time_base::no_order; }



  template<typename _CharT, typename _InIter>
    _InIter
    time_get<_CharT, _InIter>::
    _M_extract_via_format(iter_type __beg, iter_type __end, ios_base& __io,
     ios_base::iostate& __err, tm* __tm,
     const _CharT* __format) const
    {
      const locale& __loc = __io._M_getloc();
      const __timepunct<_CharT>& __tp = use_facet<__timepunct<_CharT> >(__loc);
      const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);
      const size_t __len = char_traits<_CharT>::length(__format);

      ios_base::iostate __tmperr = ios_base::goodbit;
      size_t __i = 0;
      for (; __beg != __end && __i < __len && !__tmperr; ++__i)
 {
   if (__ctype.narrow(__format[__i], 0) == '%')
     {

       char __c = __ctype.narrow(__format[++__i], 0);
       int __mem = 0;
       if (__c == 'E' || __c == 'O')
  __c = __ctype.narrow(__format[++__i], 0);
       switch (__c)
  {
    const char* __cs;
    _CharT __wcs[10];
  case 'a':

    const char_type* __days1[7];
    __tp._M_days_abbreviated(__days1);
    __beg = _M_extract_name(__beg, __end, __mem, __days1,
       7, __io, __tmperr);
    if (!__tmperr)
      __tm->tm_wday = __mem;
    break;
  case 'A':

    const char_type* __days2[7];
    __tp._M_days(__days2);
    __beg = _M_extract_name(__beg, __end, __mem, __days2,
       7, __io, __tmperr);
    if (!__tmperr)
      __tm->tm_wday = __mem;
    break;
  case 'h':
  case 'b':

    const char_type* __months1[12];
    __tp._M_months_abbreviated(__months1);
    __beg = _M_extract_name(__beg, __end, __mem,
       __months1, 12, __io, __tmperr);
    if (!__tmperr)
      __tm->tm_mon = __mem;
    break;
  case 'B':

    const char_type* __months2[12];
    __tp._M_months(__months2);
    __beg = _M_extract_name(__beg, __end, __mem,
       __months2, 12, __io, __tmperr);
    if (!__tmperr)
      __tm->tm_mon = __mem;
    break;
  case 'c':

    const char_type* __dt[2];
    __tp._M_date_time_formats(__dt);
    __beg = _M_extract_via_format(__beg, __end, __io, __tmperr,
      __tm, __dt[0]);
    break;
  case 'd':

    __beg = _M_extract_num(__beg, __end, __mem, 1, 31, 2,
      __io, __tmperr);
    if (!__tmperr)
      __tm->tm_mday = __mem;
    break;
  case 'e':


    if (__ctype.is(ctype_base::space, *__beg))
      __beg = _M_extract_num(++__beg, __end, __mem, 1, 9,
        1, __io, __tmperr);
    else
      __beg = _M_extract_num(__beg, __end, __mem, 10, 31,
        2, __io, __tmperr);
    if (!__tmperr)
      __tm->tm_mday = __mem;
    break;
  case 'D':

    __cs = "%m/%d/%y";
    __ctype.widen(__cs, __cs + 9, __wcs);
    __beg = _M_extract_via_format(__beg, __end, __io, __tmperr,
      __tm, __wcs);
    break;
  case 'H':

    __beg = _M_extract_num(__beg, __end, __mem, 0, 23, 2,
      __io, __tmperr);
    if (!__tmperr)
      __tm->tm_hour = __mem;
    break;
  case 'I':

    __beg = _M_extract_num(__beg, __end, __mem, 1, 12, 2,
      __io, __tmperr);
    if (!__tmperr)
      __tm->tm_hour = __mem;
    break;
  case 'm':

    __beg = _M_extract_num(__beg, __end, __mem, 1, 12, 2,
      __io, __tmperr);
    if (!__tmperr)
      __tm->tm_mon = __mem - 1;
    break;
  case 'M':

    __beg = _M_extract_num(__beg, __end, __mem, 0, 59, 2,
      __io, __tmperr);
    if (!__tmperr)
      __tm->tm_min = __mem;
    break;
  case 'n':
    if (__ctype.narrow(*__beg, 0) == '\n')
      ++__beg;
    else
      __tmperr |= ios_base::failbit;
    break;
  case 'R':

    __cs = "%H:%M";
    __ctype.widen(__cs, __cs + 6, __wcs);
    __beg = _M_extract_via_format(__beg, __end, __io, __tmperr,
      __tm, __wcs);
    break;
  case 'S':



    __beg = _M_extract_num(__beg, __end, __mem, 0, 60, 2,



      __io, __tmperr);
    if (!__tmperr)
    __tm->tm_sec = __mem;
    break;
  case 't':
    if (__ctype.narrow(*__beg, 0) == '\t')
      ++__beg;
    else
      __tmperr |= ios_base::failbit;
    break;
  case 'T':

    __cs = "%H:%M:%S";
    __ctype.widen(__cs, __cs + 9, __wcs);
    __beg = _M_extract_via_format(__beg, __end, __io, __tmperr,
      __tm, __wcs);
    break;
  case 'x':

    const char_type* __dates[2];
    __tp._M_date_formats(__dates);
    __beg = _M_extract_via_format(__beg, __end, __io, __tmperr,
      __tm, __dates[0]);
    break;
  case 'X':

    const char_type* __times[2];
    __tp._M_time_formats(__times);
    __beg = _M_extract_via_format(__beg, __end, __io, __tmperr,
      __tm, __times[0]);
    break;
  case 'y':
  case 'C':

  case 'Y':




    __beg = _M_extract_num(__beg, __end, __mem, 0, 9999, 4,
      __io, __tmperr);
    if (!__tmperr)
      __tm->tm_year = __mem < 0 ? __mem + 100 : __mem - 1900;
    break;
  case 'Z':

    if (__ctype.is(ctype_base::upper, *__beg))
      {
        int __tmp;
        __beg = _M_extract_name(__beg, __end, __tmp,
           __timepunct_cache<_CharT>::_S_timezones,
           14, __io, __tmperr);


        if (__beg != __end && !__tmperr && __tmp == 0
     && (*__beg == __ctype.widen('-')
         || *__beg == __ctype.widen('+')))
   {
     __beg = _M_extract_num(__beg, __end, __tmp, 0, 23, 2,
       __io, __tmperr);
     __beg = _M_extract_num(__beg, __end, __tmp, 0, 59, 2,
       __io, __tmperr);
   }
      }
    else
      __tmperr |= ios_base::failbit;
    break;
  default:

    __tmperr |= ios_base::failbit;
  }
     }
   else
     {

       if (__format[__i] == *__beg)
  ++__beg;
       else
  __tmperr |= ios_base::failbit;
     }
 }

      if (__tmperr || __i != __len)
 __err |= ios_base::failbit;

      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    time_get<_CharT, _InIter>::
    _M_extract_num(iter_type __beg, iter_type __end, int& __member,
     int __min, int __max, size_t __len,
     ios_base& __io, ios_base::iostate& __err) const
    {
      const locale& __loc = __io._M_getloc();
      const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);


      int __mult = __len == 2 ? 10 : (__len == 4 ? 1000 : 1);

      ++__min;
      size_t __i = 0;
      int __value = 0;
      for (; __beg != __end && __i < __len; ++__beg, (void)++__i)
 {
   const char __c = __ctype.narrow(*__beg, '*');
   if (__c >= '0' && __c <= '9')
     {
       __value = __value * 10 + (__c - '0');
       const int __valuec = __value * __mult;
       if (__valuec > __max || __valuec + __mult < __min)
  break;
       __mult /= 10;
     }
   else
     break;
 }
      if (__i == __len)
 __member = __value;

      else if (__len == 4 && __i == 2)
 __member = __value - 100;
      else
 __err |= ios_base::failbit;

      return __beg;
    }



  template<typename _CharT, typename _InIter>
    _InIter
    time_get<_CharT, _InIter>::
    _M_extract_name(iter_type __beg, iter_type __end, int& __member,
      const _CharT** __names, size_t __indexlen,
      ios_base& __io, ios_base::iostate& __err) const
    {
      typedef char_traits<_CharT> __traits_type;
      const locale& __loc = __io._M_getloc();
      const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

      int* __matches = static_cast<int*>(__builtin_alloca(sizeof(int)
         * __indexlen));
      size_t __nmatches = 0;
      size_t __pos = 0;
      bool __testvalid = true;
      const char_type* __name;





      if (__beg != __end)
 {
   const char_type __c = *__beg;
   for (size_t __i1 = 0; __i1 < __indexlen; ++__i1)
     if (__c == __names[__i1][0]
  || __c == __ctype.toupper(__names[__i1][0]))
       __matches[__nmatches++] = __i1;
 }

      while (__nmatches > 1)
 {

   size_t __minlen = __traits_type::length(__names[__matches[0]]);
   for (size_t __i2 = 1; __i2 < __nmatches; ++__i2)
     __minlen = std::min(__minlen,
         __traits_type::length(__names[__matches[__i2]]));
   ++__beg;
   ++__pos;
   if (__pos < __minlen && __beg != __end)
     for (size_t __i3 = 0; __i3 < __nmatches;)
       {
  __name = __names[__matches[__i3]];
  if (!(__name[__pos] == *__beg))
    __matches[__i3] = __matches[--__nmatches];
  else
    ++__i3;
       }
   else
     break;
 }

      if (__nmatches == 1)
 {

   ++__beg;
   ++__pos;
   __name = __names[__matches[0]];
   const size_t __len = __traits_type::length(__name);
   while (__pos < __len && __beg != __end && __name[__pos] == *__beg)
     ++__beg, (void)++__pos;

   if (__len == __pos)
     __member = __matches[0];
   else
     __testvalid = false;
 }
      else
 __testvalid = false;
      if (!__testvalid)
 __err |= ios_base::failbit;

      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    time_get<_CharT, _InIter>::
    _M_extract_wday_or_month(iter_type __beg, iter_type __end, int& __member,
        const _CharT** __names, size_t __indexlen,
        ios_base& __io, ios_base::iostate& __err) const
    {
      typedef char_traits<_CharT> __traits_type;
      const locale& __loc = __io._M_getloc();
      const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

      int* __matches = static_cast<int*>(__builtin_alloca(2 * sizeof(int)
         * __indexlen));
      size_t __nmatches = 0;
      size_t* __matches_lengths = 0;
      size_t __pos = 0;

      if (__beg != __end)
 {
   const char_type __c = *__beg;
   for (size_t __i = 0; __i < 2 * __indexlen; ++__i)
     if (__c == __names[__i][0]
  || __c == __ctype.toupper(__names[__i][0]))
       __matches[__nmatches++] = __i;
 }

      if (__nmatches)
 {
   ++__beg;
   ++__pos;

   __matches_lengths
     = static_cast<size_t*>(__builtin_alloca(sizeof(size_t)
          * __nmatches));
   for (size_t __i = 0; __i < __nmatches; ++__i)
     __matches_lengths[__i]
       = __traits_type::length(__names[__matches[__i]]);
 }

      for (; __beg != __end; ++__beg, (void)++__pos)
 {
   size_t __nskipped = 0;
   const char_type __c = *__beg;
   for (size_t __i = 0; __i < __nmatches;)
     {
       const char_type* __name = __names[__matches[__i]];
       if (__pos >= __matches_lengths[__i])
  ++__nskipped, ++__i;
       else if (!(__name[__pos] == __c))
  {
    --__nmatches;
    __matches[__i] = __matches[__nmatches];
    __matches_lengths[__i] = __matches_lengths[__nmatches];
  }
       else
  ++__i;
     }
   if (__nskipped == __nmatches)
     break;
 }

      if ((__nmatches == 1 && __matches_lengths[0] == __pos)
   || (__nmatches == 2 && (__matches_lengths[0] == __pos
      || __matches_lengths[1] == __pos)))
 __member = (__matches[0] >= __indexlen
      ? __matches[0] - __indexlen : __matches[0]);
      else
 __err |= ios_base::failbit;

      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    time_get<_CharT, _InIter>::
    do_get_time(iter_type __beg, iter_type __end, ios_base& __io,
  ios_base::iostate& __err, tm* __tm) const
    {
      const locale& __loc = __io._M_getloc();
      const __timepunct<_CharT>& __tp = use_facet<__timepunct<_CharT> >(__loc);
      const char_type* __times[2];
      __tp._M_time_formats(__times);
      __beg = _M_extract_via_format(__beg, __end, __io, __err,
        __tm, __times[0]);
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    time_get<_CharT, _InIter>::
    do_get_date(iter_type __beg, iter_type __end, ios_base& __io,
  ios_base::iostate& __err, tm* __tm) const
    {
      const locale& __loc = __io._M_getloc();
      const __timepunct<_CharT>& __tp = use_facet<__timepunct<_CharT> >(__loc);
      const char_type* __dates[2];
      __tp._M_date_formats(__dates);
      __beg = _M_extract_via_format(__beg, __end, __io, __err,
        __tm, __dates[0]);
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    time_get<_CharT, _InIter>::
    do_get_weekday(iter_type __beg, iter_type __end, ios_base& __io,
     ios_base::iostate& __err, tm* __tm) const
    {
      const locale& __loc = __io._M_getloc();
      const __timepunct<_CharT>& __tp = use_facet<__timepunct<_CharT> >(__loc);
      const char_type* __days[14];
      __tp._M_days_abbreviated(__days);
      __tp._M_days(__days + 7);
      int __tmpwday;
      ios_base::iostate __tmperr = ios_base::goodbit;

      __beg = _M_extract_wday_or_month(__beg, __end, __tmpwday, __days, 7,
           __io, __tmperr);
      if (!__tmperr)
 __tm->tm_wday = __tmpwday;
      else
 __err |= ios_base::failbit;

      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
     }

  template<typename _CharT, typename _InIter>
    _InIter
    time_get<_CharT, _InIter>::
    do_get_monthname(iter_type __beg, iter_type __end,
                     ios_base& __io, ios_base::iostate& __err, tm* __tm) const
    {
      const locale& __loc = __io._M_getloc();
      const __timepunct<_CharT>& __tp = use_facet<__timepunct<_CharT> >(__loc);
      const char_type* __months[24];
      __tp._M_months_abbreviated(__months);
      __tp._M_months(__months + 12);
      int __tmpmon;
      ios_base::iostate __tmperr = ios_base::goodbit;

      __beg = _M_extract_wday_or_month(__beg, __end, __tmpmon, __months, 12,
           __io, __tmperr);
      if (!__tmperr)
 __tm->tm_mon = __tmpmon;
      else
 __err |= ios_base::failbit;

      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    time_get<_CharT, _InIter>::
    do_get_year(iter_type __beg, iter_type __end, ios_base& __io,
  ios_base::iostate& __err, tm* __tm) const
    {
      int __tmpyear;
      ios_base::iostate __tmperr = ios_base::goodbit;

      __beg = _M_extract_num(__beg, __end, __tmpyear, 0, 9999, 4,
        __io, __tmperr);
      if (!__tmperr)
 __tm->tm_year = __tmpyear < 0 ? __tmpyear + 100 : __tmpyear - 1900;
      else
 __err |= ios_base::failbit;

      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }


  template<typename _CharT, typename _InIter>
    inline
    _InIter
    time_get<_CharT, _InIter>::
    get(iter_type __s, iter_type __end, ios_base& __io,
        ios_base::iostate& __err, tm* __tm, const char_type* __fmt,
        const char_type* __fmtend) const
    {
      const locale& __loc = __io._M_getloc();
      ctype<_CharT> const& __ctype = use_facet<ctype<_CharT> >(__loc);
      __err = ios_base::goodbit;
      while (__fmt != __fmtend &&
             __err == ios_base::goodbit)
        {
          if (__s == __end)
            {
              __err = ios_base::eofbit | ios_base::failbit;
              break;
            }
          else if (__ctype.narrow(*__fmt, 0) == '%')
            {
              char __format;
              char __mod = 0;
              if (++__fmt == __fmtend)
                {
                  __err = ios_base::failbit;
                  break;
                }
              const char __c = __ctype.narrow(*__fmt, 0);
              if (__c != 'E' && __c != 'O')
                __format = __c;
              else if (++__fmt != __fmtend)
                {
                  __mod = __c;
                  __format = __ctype.narrow(*__fmt, 0);
                }
              else
                {
                  __err = ios_base::failbit;
                  break;
                }
              __s = this->do_get(__s, __end, __io, __err, __tm, __format,
     __mod);
              ++__fmt;
            }
          else if (__ctype.is(ctype_base::space, *__fmt))
            {
              ++__fmt;
              while (__fmt != __fmtend &&
                     __ctype.is(ctype_base::space, *__fmt))
                ++__fmt;

              while (__s != __end &&
                     __ctype.is(ctype_base::space, *__s))
                ++__s;
            }

          else if (__ctype.tolower(*__s) == __ctype.tolower(*__fmt) ||
                   __ctype.toupper(*__s) == __ctype.toupper(*__fmt))
            {
              ++__s;
              ++__fmt;
            }
          else
            {
              __err = ios_base::failbit;
              break;
            }
        }
      return __s;
    }

  template<typename _CharT, typename _InIter>
    inline
    _InIter
    time_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, tm* __tm,
           char __format, char __mod) const
    {
      const locale& __loc = __io._M_getloc();
      ctype<_CharT> const& __ctype = use_facet<ctype<_CharT> >(__loc);
      __err = ios_base::goodbit;

      char_type __fmt[4];
      __fmt[0] = __ctype.widen('%');
      if (!__mod)
        {
          __fmt[1] = __format;
          __fmt[2] = char_type();
        }
      else
        {
          __fmt[1] = __mod;
          __fmt[2] = __format;
          __fmt[3] = char_type();
        }

      __beg = _M_extract_via_format(__beg, __end, __io, __err, __tm, __fmt);
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }



  template<typename _CharT, typename _OutIter>
    _OutIter
    time_put<_CharT, _OutIter>::
    put(iter_type __s, ios_base& __io, char_type __fill, const tm* __tm,
 const _CharT* __beg, const _CharT* __end) const
    {
      const locale& __loc = __io._M_getloc();
      ctype<_CharT> const& __ctype = use_facet<ctype<_CharT> >(__loc);
      for (; __beg != __end; ++__beg)
 if (__ctype.narrow(*__beg, 0) != '%')
   {
     *__s = *__beg;
     ++__s;
   }
 else if (++__beg != __end)
   {
     char __format;
     char __mod = 0;
     const char __c = __ctype.narrow(*__beg, 0);
     if (__c != 'E' && __c != 'O')
       __format = __c;
     else if (++__beg != __end)
       {
  __mod = __c;
  __format = __ctype.narrow(*__beg, 0);
       }
     else
       break;
     __s = this->do_put(__s, __io, __fill, __tm, __format, __mod);
   }
 else
   break;
      return __s;
    }

  template<typename _CharT, typename _OutIter>
    _OutIter
    time_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type, const tm* __tm,
    char __format, char __mod) const
    {
      const locale& __loc = __io._M_getloc();
      ctype<_CharT> const& __ctype = use_facet<ctype<_CharT> >(__loc);
      __timepunct<_CharT> const& __tp = use_facet<__timepunct<_CharT> >(__loc);



      const size_t __maxlen = 128;
      char_type __res[__maxlen];






      char_type __fmt[4];
      __fmt[0] = __ctype.widen('%');
      if (!__mod)
 {
   __fmt[1] = __format;
   __fmt[2] = char_type();
 }
      else
 {
   __fmt[1] = __mod;
   __fmt[2] = __format;
   __fmt[3] = char_type();
 }

      __tp._M_put(__res, __maxlen, __fmt, __tm);


      return std::__write(__s, __res, char_traits<char_type>::length(__res));
    }





  extern template class moneypunct<char, false>;
  extern template class moneypunct<char, true>;
  extern template class moneypunct_byname<char, false>;
  extern template class moneypunct_byname<char, true>;
  extern template class __cxx11:: money_get<char>;
  extern template class __cxx11:: money_put<char>;
  extern template class __timepunct<char>;
  extern template class time_put<char>;
  extern template class time_put_byname<char>;
  extern template class time_get<char>;
  extern template class time_get_byname<char>;
  extern template class messages<char>;
  extern template class messages_byname<char>;

  extern template
    const moneypunct<char, true>&
    use_facet<moneypunct<char, true> >(const locale&);

  extern template
    const moneypunct<char, false>&
    use_facet<moneypunct<char, false> >(const locale&);

  extern template
    const money_put<char>&
    use_facet<money_put<char> >(const locale&);

  extern template
    const money_get<char>&
    use_facet<money_get<char> >(const locale&);

  extern template
    const __timepunct<char>&
    use_facet<__timepunct<char> >(const locale&);

  extern template
    const time_put<char>&
    use_facet<time_put<char> >(const locale&);

  extern template
    const time_get<char>&
    use_facet<time_get<char> >(const locale&);

  extern template
    const messages<char>&
    use_facet<messages<char> >(const locale&);

  extern template
    bool
    has_facet<moneypunct<char> >(const locale&);

  extern template
    bool
    has_facet<money_put<char> >(const locale&);

  extern template
    bool
    has_facet<money_get<char> >(const locale&);

  extern template
    bool
    has_facet<__timepunct<char> >(const locale&);

  extern template
    bool
    has_facet<time_put<char> >(const locale&);

  extern template
    bool
    has_facet<time_get<char> >(const locale&);

  extern template
    bool
    has_facet<messages<char> >(const locale&);


  extern template class moneypunct<wchar_t, false>;
  extern template class moneypunct<wchar_t, true>;
  extern template class moneypunct_byname<wchar_t, false>;
  extern template class moneypunct_byname<wchar_t, true>;
  extern template class __cxx11:: money_get<wchar_t>;
  extern template class __cxx11:: money_put<wchar_t>;
  extern template class __timepunct<wchar_t>;
  extern template class time_put<wchar_t>;
  extern template class time_put_byname<wchar_t>;
  extern template class time_get<wchar_t>;
  extern template class time_get_byname<wchar_t>;
  extern template class messages<wchar_t>;
  extern template class messages_byname<wchar_t>;

  extern template
    const moneypunct<wchar_t, true>&
    use_facet<moneypunct<wchar_t, true> >(const locale&);

  extern template
    const moneypunct<wchar_t, false>&
    use_facet<moneypunct<wchar_t, false> >(const locale&);

  extern template
    const money_put<wchar_t>&
    use_facet<money_put<wchar_t> >(const locale&);

  extern template
    const money_get<wchar_t>&
    use_facet<money_get<wchar_t> >(const locale&);

  extern template
    const __timepunct<wchar_t>&
    use_facet<__timepunct<wchar_t> >(const locale&);

  extern template
    const time_put<wchar_t>&
    use_facet<time_put<wchar_t> >(const locale&);

  extern template
    const time_get<wchar_t>&
    use_facet<time_get<wchar_t> >(const locale&);

  extern template
    const messages<wchar_t>&
    use_facet<messages<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<moneypunct<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<money_put<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<money_get<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<__timepunct<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<time_put<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<time_get<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<messages<wchar_t> >(const locale&);




}
# 2016 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_facets_nonio.h" 2 3
# 42 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/locale" 2 3

# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_conv.h" 1 3
# 41 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_conv.h" 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/unique_ptr.h" 1 3
# 36 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/unique_ptr.h" 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/utility" 1 3
# 59 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/utility" 3
# 69 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/utility" 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_relops.h" 1 3
# 67 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_relops.h" 3
namespace std
{


  namespace rel_ops
  {
# 85 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator!=(const _Tp& __x, const _Tp& __y)
      { return !(__x == __y); }
# 98 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator>(const _Tp& __x, const _Tp& __y)
      { return __y < __x; }
# 111 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator<=(const _Tp& __x, const _Tp& __y)
      { return !(__y < __x); }
# 124 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator>=(const _Tp& __x, const _Tp& __y)
      { return !(__x < __y); }
  }


}
# 70 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/utility" 2 3








namespace std
{



  template<typename _Tp>
    struct tuple_size;





  template<typename _Tp,
    typename _Up = typename remove_cv<_Tp>::type,
    typename = typename enable_if<is_same<_Tp, _Up>::value>::type,
    size_t = tuple_size<_Tp>::value>
    using __enable_if_has_tuple_size = _Tp;

  template<typename _Tp>
    struct tuple_size<const __enable_if_has_tuple_size<_Tp>>
    : public tuple_size<_Tp> { };

  template<typename _Tp>
    struct tuple_size<volatile __enable_if_has_tuple_size<_Tp>>
    : public tuple_size<_Tp> { };

  template<typename _Tp>
    struct tuple_size<const volatile __enable_if_has_tuple_size<_Tp>>
    : public tuple_size<_Tp> { };


  template<std::size_t __i, typename _Tp>
    struct tuple_element;


  template<std::size_t __i, typename _Tp>
    using __tuple_element_t = typename tuple_element<__i, _Tp>::type;

  template<std::size_t __i, typename _Tp>
    struct tuple_element<__i, const _Tp>
    {
      typedef typename add_const<__tuple_element_t<__i, _Tp>>::type type;
    };

  template<std::size_t __i, typename _Tp>
    struct tuple_element<__i, volatile _Tp>
    {
      typedef typename add_volatile<__tuple_element_t<__i, _Tp>>::type type;
    };

  template<std::size_t __i, typename _Tp>
    struct tuple_element<__i, const volatile _Tp>
    {
      typedef typename add_cv<__tuple_element_t<__i, _Tp>>::type type;
    };







  template<std::size_t __i, typename _Tp>
    using tuple_element_t = typename tuple_element<__i, _Tp>::type;





  template<typename _T1, typename _T2>
    struct __is_tuple_like_impl<std::pair<_T1, _T2>> : true_type
    { };


  template<class _Tp1, class _Tp2>
    struct tuple_size<std::pair<_Tp1, _Tp2>>
    : public integral_constant<std::size_t, 2> { };


  template<class _Tp1, class _Tp2>
    struct tuple_element<0, std::pair<_Tp1, _Tp2>>
    { typedef _Tp1 type; };


  template<class _Tp1, class _Tp2>
    struct tuple_element<1, std::pair<_Tp1, _Tp2>>
    { typedef _Tp2 type; };

  template<std::size_t _Int>
    struct __pair_get;

  template<>
    struct __pair_get<0>
    {
      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp1&
        __get(std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.first; }

      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp1&&
        __move_get(std::pair<_Tp1, _Tp2>&& __pair) noexcept
        { return std::forward<_Tp1>(__pair.first); }

      template<typename _Tp1, typename _Tp2>
        static constexpr const _Tp1&
        __const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.first; }

      template<typename _Tp1, typename _Tp2>
        static constexpr const _Tp1&&
        __const_move_get(const std::pair<_Tp1, _Tp2>&& __pair) noexcept
        { return std::forward<const _Tp1>(__pair.first); }
    };

  template<>
    struct __pair_get<1>
    {
      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp2&
        __get(std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.second; }

      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp2&&
        __move_get(std::pair<_Tp1, _Tp2>&& __pair) noexcept
        { return std::forward<_Tp2>(__pair.second); }

      template<typename _Tp1, typename _Tp2>
        static constexpr const _Tp2&
        __const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.second; }

      template<typename _Tp1, typename _Tp2>
        static constexpr const _Tp2&&
        __const_move_get(const std::pair<_Tp1, _Tp2>&& __pair) noexcept
        { return std::forward<const _Tp2>(__pair.second); }
    };

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&
    get(std::pair<_Tp1, _Tp2>& __in) noexcept
    { return __pair_get<_Int>::__get(__in); }

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&&
    get(std::pair<_Tp1, _Tp2>&& __in) noexcept
    { return __pair_get<_Int>::__move_get(std::move(__in)); }

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr const typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&
    get(const std::pair<_Tp1, _Tp2>& __in) noexcept
    { return __pair_get<_Int>::__const_get(__in); }

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr const typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&&
    get(const std::pair<_Tp1, _Tp2>&& __in) noexcept
    { return __pair_get<_Int>::__const_move_get(std::move(__in)); }





  template <typename _Tp, typename _Up>
    constexpr _Tp&
    get(pair<_Tp, _Up>& __p) noexcept
    { return __p.first; }

  template <typename _Tp, typename _Up>
    constexpr const _Tp&
    get(const pair<_Tp, _Up>& __p) noexcept
    { return __p.first; }

  template <typename _Tp, typename _Up>
    constexpr _Tp&&
    get(pair<_Tp, _Up>&& __p) noexcept
    { return std::move(__p.first); }

  template <typename _Tp, typename _Up>
    constexpr const _Tp&&
    get(const pair<_Tp, _Up>&& __p) noexcept
    { return std::move(__p.first); }

  template <typename _Tp, typename _Up>
    constexpr _Tp&
    get(pair<_Up, _Tp>& __p) noexcept
    { return __p.second; }

  template <typename _Tp, typename _Up>
    constexpr const _Tp&
    get(const pair<_Up, _Tp>& __p) noexcept
    { return __p.second; }

  template <typename _Tp, typename _Up>
    constexpr _Tp&&
    get(pair<_Up, _Tp>&& __p) noexcept
    { return std::move(__p.second); }

  template <typename _Tp, typename _Up>
    constexpr const _Tp&&
    get(const pair<_Up, _Tp>&& __p) noexcept
    { return std::move(__p.second); }




  template <typename _Tp, typename _Up = _Tp>
    inline _Tp
    exchange(_Tp& __obj, _Up&& __new_val)
    { return std::__exchange(__obj, std::forward<_Up>(__new_val)); }




  template<size_t... _Indexes> struct _Index_tuple { };
# 301 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/utility" 3
  template<size_t _Num>
    struct _Build_index_tuple
    {

      template<typename, size_t... _Indices>
        using _IdxTuple = _Index_tuple<_Indices...>;

      using __type = __make_integer_seq<_IdxTuple, size_t, _Num>;



    };






  template<typename _Tp, _Tp... _Idx>
    struct integer_sequence
    {
      typedef _Tp value_type;
      static constexpr size_t size() noexcept { return sizeof...(_Idx); }
    };


  template<typename _Tp, _Tp _Num>
    using make_integer_sequence

      = __make_integer_seq<integer_sequence, _Tp, _Num>;







  template<size_t... _Idx>
    using index_sequence = integer_sequence<size_t, _Idx...>;


  template<size_t _Num>
    using make_index_sequence = make_integer_sequence<size_t, _Num>;


  template<typename... _Types>
    using index_sequence_for = make_index_sequence<sizeof...(_Types)>;
# 397 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/utility" 3
}
# 37 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/unique_ptr.h" 2 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/tuple" 1 3
# 33 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/tuple" 3






# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/array" 1 3
# 33 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/array" 3
# 43 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/array" 3
namespace std
{


  template<typename _Tp, std::size_t _Nm>
    struct __array_traits
    {
      typedef _Tp _Type[_Nm];
      typedef __is_swappable<_Tp> _Is_swappable;
      typedef __is_nothrow_swappable<_Tp> _Is_nothrow_swappable;

      static constexpr _Tp&
      _S_ref(const _Type& __t, std::size_t __n) noexcept
      { return const_cast<_Tp&>(__t[__n]); }

      static constexpr _Tp*
      _S_ptr(const _Type& __t) noexcept
      { return const_cast<_Tp*>(__t); }
    };

 template<typename _Tp>
   struct __array_traits<_Tp, 0>
   {
     struct _Type { };
     typedef true_type _Is_swappable;
     typedef true_type _Is_nothrow_swappable;

     static constexpr _Tp&
     _S_ref(const _Type&, std::size_t) noexcept
     { return *static_cast<_Tp*>(nullptr); }

     static constexpr _Tp*
     _S_ptr(const _Type&) noexcept
     { return nullptr; }
   };
# 93 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/array" 3
  template<typename _Tp, std::size_t _Nm>
    struct array
    {
      typedef _Tp value_type;
      typedef value_type* pointer;
      typedef const value_type* const_pointer;
      typedef value_type& reference;
      typedef const value_type& const_reference;
      typedef value_type* iterator;
      typedef const value_type* const_iterator;
      typedef std::size_t size_type;
      typedef std::ptrdiff_t difference_type;
      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;


      typedef std::__array_traits<_Tp, _Nm> _AT_Type;
      typename _AT_Type::_Type _M_elems;




      void
      fill(const value_type& __u)
      { std::fill_n(begin(), size(), __u); }

      void
      swap(array& __other)
      noexcept(_AT_Type::_Is_nothrow_swappable::value)
      { std::swap_ranges(begin(), end(), __other.begin()); }


                           iterator
      begin() noexcept
      { return iterator(data()); }

                           const_iterator
      begin() const noexcept
      { return const_iterator(data()); }

                           iterator
      end() noexcept
      { return iterator(data() + _Nm); }

                           const_iterator
      end() const noexcept
      { return const_iterator(data() + _Nm); }

                           reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(end()); }

                           const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(end()); }

                           reverse_iterator
      rend() noexcept
      { return reverse_iterator(begin()); }

                           const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(begin()); }

                           const_iterator
      cbegin() const noexcept
      { return const_iterator(data()); }

                           const_iterator
      cend() const noexcept
      { return const_iterator(data() + _Nm); }

                           const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(end()); }

                           const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(begin()); }


      constexpr size_type
      size() const noexcept { return _Nm; }

      constexpr size_type
      max_size() const noexcept { return _Nm; }

                         constexpr bool
      empty() const noexcept { return size() == 0; }


                           reference
      operator[](size_type __n) noexcept
      { return _AT_Type::_S_ref(_M_elems, __n); }

      constexpr const_reference
      operator[](size_type __n) const noexcept
      { return _AT_Type::_S_ref(_M_elems, __n); }

                           reference
      at(size_type __n)
      {
 if (__n >= _Nm)
   std::__throw_out_of_range_fmt(("array::at: __n (which is %zu) " ">= _Nm (which is %zu)"),

     __n, _Nm);
 return _AT_Type::_S_ref(_M_elems, __n);
      }

      constexpr const_reference
      at(size_type __n) const
      {


 return __n < _Nm ? _AT_Type::_S_ref(_M_elems, __n)
   : (std::__throw_out_of_range_fmt(("array::at: __n (which is %zu) " ">= _Nm (which is %zu)"),

        __n, _Nm),
      _AT_Type::_S_ref(_M_elems, 0));
      }

                           reference
      front() noexcept
      { return *begin(); }

      constexpr const_reference
      front() const noexcept
      { return _AT_Type::_S_ref(_M_elems, 0); }

                           reference
      back() noexcept
      { return _Nm ? *(end() - 1) : *end(); }

      constexpr const_reference
      back() const noexcept
      {
 return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
             : _AT_Type::_S_ref(_M_elems, 0);
      }

                           pointer
      data() noexcept
      { return _AT_Type::_S_ptr(_M_elems); }

                           const_pointer
      data() const noexcept
      { return _AT_Type::_S_ptr(_M_elems); }
    };
# 250 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/array" 3
  template<typename _Tp, std::size_t _Nm>
    inline bool
    operator==(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return std::equal(__one.begin(), __one.end(), __two.begin()); }

  template<typename _Tp, std::size_t _Nm>
    inline bool
    operator!=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return !(__one == __two); }

  template<typename _Tp, std::size_t _Nm>
    inline bool
    operator<(const array<_Tp, _Nm>& __a, const array<_Tp, _Nm>& __b)
    {
      return std::lexicographical_compare(__a.begin(), __a.end(),
       __b.begin(), __b.end());
    }

  template<typename _Tp, std::size_t _Nm>
    inline bool
    operator>(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return __two < __one; }

  template<typename _Tp, std::size_t _Nm>
    inline bool
    operator<=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return !(__one > __two); }

  template<typename _Tp, std::size_t _Nm>
    inline bool
    operator>=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return !(__one < __two); }


  template<typename _Tp, std::size_t _Nm>
    inline


    typename enable_if<
      std::__array_traits<_Tp, _Nm>::_Is_swappable::value
    >::type



    swap(array<_Tp, _Nm>& __one, array<_Tp, _Nm>& __two)
    noexcept(noexcept(__one.swap(__two)))
    { __one.swap(__two); }


  template<typename _Tp, std::size_t _Nm>
    typename enable_if<
      !std::__array_traits<_Tp, _Nm>::_Is_swappable::value>::type
    swap(array<_Tp, _Nm>&, array<_Tp, _Nm>&) = delete;


  template<std::size_t _Int, typename _Tp, std::size_t _Nm>
    constexpr _Tp&
    get(array<_Tp, _Nm>& __arr) noexcept
    {
      static_assert(_Int < _Nm, "array index is within bounds");
      return std::__array_traits<_Tp, _Nm>::
 _S_ref(__arr._M_elems, _Int);
    }

  template<std::size_t _Int, typename _Tp, std::size_t _Nm>
    constexpr _Tp&&
    get(array<_Tp, _Nm>&& __arr) noexcept
    {
      static_assert(_Int < _Nm, "array index is within bounds");
      return std::move(std::get<_Int>(__arr));
    }

  template<std::size_t _Int, typename _Tp, std::size_t _Nm>
    constexpr const _Tp&
    get(const array<_Tp, _Nm>& __arr) noexcept
    {
      static_assert(_Int < _Nm, "array index is within bounds");
      return std::__array_traits<_Tp, _Nm>::
 _S_ref(__arr._M_elems, _Int);
    }

  template<std::size_t _Int, typename _Tp, std::size_t _Nm>
    constexpr const _Tp&&
    get(const array<_Tp, _Nm>&& __arr) noexcept
    {
      static_assert(_Int < _Nm, "array index is within bounds");
      return std::move(std::get<_Int>(__arr));
    }


}

namespace std
{





  template<typename _Tp>
    struct tuple_size;


  template<typename _Tp, std::size_t _Nm>
    struct tuple_size<std::array<_Tp, _Nm>>
    : public integral_constant<std::size_t, _Nm> { };


  template<std::size_t _Int, typename _Tp>
    struct tuple_element;


  template<std::size_t _Int, typename _Tp, std::size_t _Nm>
    struct tuple_element<_Int, std::array<_Tp, _Nm>>
    {
      static_assert(_Int < _Nm, "index is out of bounds");
      typedef _Tp type;
    };

  template<typename _Tp, std::size_t _Nm>
    struct __is_tuple_like_impl<std::array<_Tp, _Nm>> : true_type
    { };


}
# 40 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/tuple" 2 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/uses_allocator.h" 1 3
# 35 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/uses_allocator.h" 3
namespace std
{



  struct __erased_type { };




  template<typename _Alloc, typename _Tp>
    using __is_erased_or_convertible
      = __or_<is_convertible<_Alloc, _Tp>, is_same<_Tp, __erased_type>>;


  struct allocator_arg_t { explicit allocator_arg_t() = default; };

                    constexpr allocator_arg_t allocator_arg =
    allocator_arg_t();

  template<typename _Tp, typename _Alloc, typename = __void_t<>>
    struct __uses_allocator_helper
    : false_type { };

  template<typename _Tp, typename _Alloc>
    struct __uses_allocator_helper<_Tp, _Alloc,
       __void_t<typename _Tp::allocator_type>>
    : __is_erased_or_convertible<_Alloc, typename _Tp::allocator_type>::type
    { };


  template<typename _Tp, typename _Alloc>
    struct uses_allocator
    : __uses_allocator_helper<_Tp, _Alloc>::type
    { };

  struct __uses_alloc_base { };

  struct __uses_alloc0 : __uses_alloc_base
  {
    struct _Sink { void operator=(const void*) { } } _M_a;
  };

  template<typename _Alloc>
    struct __uses_alloc1 : __uses_alloc_base { const _Alloc* _M_a; };

  template<typename _Alloc>
    struct __uses_alloc2 : __uses_alloc_base { const _Alloc* _M_a; };

  template<bool, typename _Tp, typename _Alloc, typename... _Args>
    struct __uses_alloc;

  template<typename _Tp, typename _Alloc, typename... _Args>
    struct __uses_alloc<true, _Tp, _Alloc, _Args...>
    : conditional<
        is_constructible<_Tp, allocator_arg_t, const _Alloc&, _Args...>::value,
        __uses_alloc1<_Alloc>,
        __uses_alloc2<_Alloc>>::type
    {


      static_assert(__or_<
   is_constructible<_Tp, allocator_arg_t, const _Alloc&, _Args...>,
   is_constructible<_Tp, _Args..., const _Alloc&>>::value,
   "construction with an allocator must be possible"
   " if uses_allocator is true");
    };

  template<typename _Tp, typename _Alloc, typename... _Args>
    struct __uses_alloc<false, _Tp, _Alloc, _Args...>
    : __uses_alloc0 { };

  template<typename _Tp, typename _Alloc, typename... _Args>
    using __uses_alloc_t =
      __uses_alloc<uses_allocator<_Tp, _Alloc>::value, _Tp, _Alloc, _Args...>;

  template<typename _Tp, typename _Alloc, typename... _Args>
    inline __uses_alloc_t<_Tp, _Alloc, _Args...>
    __use_alloc(const _Alloc& __a)
    {
      __uses_alloc_t<_Tp, _Alloc, _Args...> __ret;
      __ret._M_a = std::__addressof(__a);
      return __ret;
    }

  template<typename _Tp, typename _Alloc, typename... _Args>
    void
    __use_alloc(const _Alloc&&) = delete;







  template<template<typename...> class _Predicate,
    typename _Tp, typename _Alloc, typename... _Args>
    struct __is_uses_allocator_predicate
    : conditional<uses_allocator<_Tp, _Alloc>::value,
      __or_<_Predicate<_Tp, allocator_arg_t, _Alloc, _Args...>,
     _Predicate<_Tp, _Args..., _Alloc>>,
      _Predicate<_Tp, _Args...>>::type { };

  template<typename _Tp, typename _Alloc, typename... _Args>
    struct __is_uses_allocator_constructible
    : __is_uses_allocator_predicate<is_constructible, _Tp, _Alloc, _Args...>
    { };


  template<typename _Tp, typename _Alloc, typename... _Args>
                      constexpr bool __is_uses_allocator_constructible_v =
      __is_uses_allocator_constructible<_Tp, _Alloc, _Args...>::value;


  template<typename _Tp, typename _Alloc, typename... _Args>
    struct __is_nothrow_uses_allocator_constructible
    : __is_uses_allocator_predicate<is_nothrow_constructible,
        _Tp, _Alloc, _Args...>
    { };



  template<typename _Tp, typename _Alloc, typename... _Args>
                      constexpr bool
    __is_nothrow_uses_allocator_constructible_v =
      __is_nothrow_uses_allocator_constructible<_Tp, _Alloc, _Args...>::value;


  template<typename _Tp, typename... _Args>
    void __uses_allocator_construct_impl(__uses_alloc0 __a, _Tp* __ptr,
      _Args&&... __args)
    { ::new ((void*)__ptr) _Tp(std::forward<_Args>(__args)...); }

  template<typename _Tp, typename _Alloc, typename... _Args>
    void __uses_allocator_construct_impl(__uses_alloc1<_Alloc> __a, _Tp* __ptr,
      _Args&&... __args)
    {
      ::new ((void*)__ptr) _Tp(allocator_arg, *__a._M_a,
          std::forward<_Args>(__args)...);
    }

  template<typename _Tp, typename _Alloc, typename... _Args>
    void __uses_allocator_construct_impl(__uses_alloc2<_Alloc> __a, _Tp* __ptr,
      _Args&&... __args)
    { ::new ((void*)__ptr) _Tp(std::forward<_Args>(__args)..., *__a._M_a); }

  template<typename _Tp, typename _Alloc, typename... _Args>
    void __uses_allocator_construct(const _Alloc& __a, _Tp* __ptr,
        _Args&&... __args)
    {
      std::__uses_allocator_construct_impl(
   std::__use_alloc<_Tp, _Alloc, _Args...>(__a), __ptr,
   std::forward<_Args>(__args)...);
    }


}
# 41 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/tuple" 2 3
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/invoke.h" 1 3
# 34 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/invoke.h" 3







namespace std
{
# 52 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/invoke.h" 3
  template<typename _Tp, typename _Up = typename __inv_unwrap<_Tp>::type>
    constexpr _Up&&
    __invfwd(typename remove_reference<_Tp>::type& __t) noexcept
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
    _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
    _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
    }

  template<typename _Res, typename _MemPtr, typename _Tp>
    constexpr _Res
    __invoke_impl(__invoke_memobj_ref, _MemPtr&& __f, _Tp&& __t)
    { return __invfwd<_Tp>(__t).*__f; }

  template<typename _Res, typename _MemPtr, typename _Tp>
    constexpr _Res
    __invoke_impl(__invoke_memobj_deref, _MemPtr&& __f, _Tp&& __t)
    { return (*std::forward<_Tp>(__t)).*__f; }


  template<typename _Callable, typename... _Args>
    constexpr typename __invoke_result<_Callable, _Args...>::type
    __invoke(_Callable&& __fn, _Args&&... __args)
    noexcept(__is_nothrow_invocable<_Callable, _Args...>::value)
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
     std::forward<_Args>(__args)...);
    }


}
# 42 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/tuple" 2 3

namespace std
{







  template<typename... _Elements>
    class tuple;

  template<typename _Tp>
    struct __is_empty_non_tuple : is_empty<_Tp> { };


  template<typename _El0, typename... _El>
    struct __is_empty_non_tuple<tuple<_El0, _El...>> : false_type { };


  template<typename _Tp>
    using __empty_not_final
    = typename conditional<__is_final(_Tp), false_type,
      __is_empty_non_tuple<_Tp>>::type;

  template<std::size_t _Idx, typename _Head,
    bool = __empty_not_final<_Head>::value>
    struct _Head_base;

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, true>
    : public _Head
    {
      constexpr _Head_base()
      : _Head() { }

      constexpr _Head_base(const _Head& __h)
      : _Head(__h) { }

      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
 : _Head(std::forward<_UHead>(__h)) { }

      _Head_base(allocator_arg_t, __uses_alloc0)
      : _Head() { }

      template<typename _Alloc>
 _Head_base(allocator_arg_t, __uses_alloc1<_Alloc> __a)
 : _Head(allocator_arg, *__a._M_a) { }

      template<typename _Alloc>
 _Head_base(allocator_arg_t, __uses_alloc2<_Alloc> __a)
 : _Head(*__a._M_a) { }

      template<typename _UHead>
 _Head_base(__uses_alloc0, _UHead&& __uhead)
 : _Head(std::forward<_UHead>(__uhead)) { }

      template<typename _Alloc, typename _UHead>
 _Head_base(__uses_alloc1<_Alloc> __a, _UHead&& __uhead)
 : _Head(allocator_arg, *__a._M_a, std::forward<_UHead>(__uhead)) { }

      template<typename _Alloc, typename _UHead>
 _Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
 : _Head(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b; }

      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }

      constexpr _Head_base(const _Head& __h)
      : _M_head_impl(__h) { }

      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
 : _M_head_impl(std::forward<_UHead>(__h)) { }

      _Head_base(allocator_arg_t, __uses_alloc0)
      : _M_head_impl() { }

      template<typename _Alloc>
 _Head_base(allocator_arg_t, __uses_alloc1<_Alloc> __a)
 : _M_head_impl(allocator_arg, *__a._M_a) { }

      template<typename _Alloc>
 _Head_base(allocator_arg_t, __uses_alloc2<_Alloc> __a)
 : _M_head_impl(*__a._M_a) { }

      template<typename _UHead>
 _Head_base(__uses_alloc0, _UHead&& __uhead)
 : _M_head_impl(std::forward<_UHead>(__uhead)) { }

      template<typename _Alloc, typename _UHead>
 _Head_base(__uses_alloc1<_Alloc> __a, _UHead&& __uhead)
 : _M_head_impl(allocator_arg, *__a._M_a, std::forward<_UHead>(__uhead))
 { }

      template<typename _Alloc, typename _UHead>
 _Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
 : _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }

      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }

      _Head _M_head_impl;
    };
# 176 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/tuple" 3
  template<std::size_t _Idx, typename... _Elements>
    struct _Tuple_impl;






  template<std::size_t _Idx, typename _Head, typename... _Tail>
    struct _Tuple_impl<_Idx, _Head, _Tail...>
    : public _Tuple_impl<_Idx + 1, _Tail...>,
      private _Head_base<_Idx, _Head>
    {
      template<std::size_t, typename...> friend class _Tuple_impl;

      typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;
      typedef _Head_base<_Idx, _Head> _Base;

      static constexpr _Head&
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      static constexpr const _Head&
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      static constexpr _Inherited&
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }

      static constexpr const _Inherited&
      _M_tail(const _Tuple_impl& __t) noexcept { return __t; }

      constexpr _Tuple_impl()
      : _Inherited(), _Base() { }

      explicit
      constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail)
      : _Inherited(__tail...), _Base(__head) { }

      template<typename _UHead, typename... _UTail, typename = typename
               enable_if<sizeof...(_Tail) == sizeof...(_UTail)>::type>
        explicit
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 : _Inherited(std::forward<_UTail>(__tail)...),
   _Base(std::forward<_UHead>(__head)) { }

      constexpr _Tuple_impl(const _Tuple_impl&) = default;



      _Tuple_impl& operator=(const _Tuple_impl&) = delete;

      constexpr
      _Tuple_impl(_Tuple_impl&& __in)
      noexcept(__and_<is_nothrow_move_constructible<_Head>,
               is_nothrow_move_constructible<_Inherited>>::value)
      : _Inherited(std::move(_M_tail(__in))),
 _Base(std::forward<_Head>(_M_head(__in))) { }

      template<typename... _UElements>
        constexpr _Tuple_impl(const _Tuple_impl<_Idx, _UElements...>& __in)
 : _Inherited(_Tuple_impl<_Idx, _UElements...>::_M_tail(__in)),
   _Base(_Tuple_impl<_Idx, _UElements...>::_M_head(__in)) { }

      template<typename _UHead, typename... _UTails>
        constexpr _Tuple_impl(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
 : _Inherited(std::move
       (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in))),
   _Base(std::forward<_UHead>
  (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in))) { }

      template<typename _Alloc>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a)
 : _Inherited(__tag, __a),
          _Base(__tag, __use_alloc<_Head>(__a)) { }

      template<typename _Alloc>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
      const _Head& __head, const _Tail&... __tail)
 : _Inherited(__tag, __a, __tail...),
          _Base(__use_alloc<_Head, _Alloc, _Head>(__a), __head) { }

      template<typename _Alloc, typename _UHead, typename... _UTail,
               typename = typename enable_if<sizeof...(_Tail)
          == sizeof...(_UTail)>::type>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             _UHead&& __head, _UTail&&... __tail)
 : _Inherited(__tag, __a, std::forward<_UTail>(__tail)...),
          _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
         std::forward<_UHead>(__head)) { }

      template<typename _Alloc>
        _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             const _Tuple_impl& __in)
 : _Inherited(__tag, __a, _M_tail(__in)),
          _Base(__use_alloc<_Head, _Alloc, _Head>(__a), _M_head(__in)) { }

      template<typename _Alloc>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             _Tuple_impl&& __in)
 : _Inherited(__tag, __a, std::move(_M_tail(__in))),
   _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
         std::forward<_Head>(_M_head(__in))) { }

      template<typename _Alloc, typename _UHead, typename... _UTails>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
      const _Tuple_impl<_Idx, _UHead, _UTails...>& __in)
 : _Inherited(__tag, __a,
       _Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in)),
   _Base(__use_alloc<_Head, _Alloc, const _UHead&>(__a),
  _Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in)) { }

      template<typename _Alloc, typename _UHead, typename... _UTails>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             _Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
 : _Inherited(__tag, __a, std::move
       (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in))),
   _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
                std::forward<_UHead>
  (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in))) { }

      template<typename... _UElements>
        void
        _M_assign(const _Tuple_impl<_Idx, _UElements...>& __in)
        {
   _M_head(*this) = _Tuple_impl<_Idx, _UElements...>::_M_head(__in);
   _M_tail(*this)._M_assign(
       _Tuple_impl<_Idx, _UElements...>::_M_tail(__in));
 }

      template<typename _UHead, typename... _UTails>
        void
        _M_assign(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
        {
   _M_head(*this) = std::forward<_UHead>
     (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in));
   _M_tail(*this)._M_assign(
       std::move(_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in)));
 }

    protected:
      void
      _M_swap(_Tuple_impl& __in)
      {
 using std::swap;
 swap(_M_head(*this), _M_head(__in));
 _Inherited::_M_swap(_M_tail(__in));
      }
    };


  template<std::size_t _Idx, typename _Head>
    struct _Tuple_impl<_Idx, _Head>
    : private _Head_base<_Idx, _Head>
    {
      template<std::size_t, typename...> friend class _Tuple_impl;

      typedef _Head_base<_Idx, _Head> _Base;

      static constexpr _Head&
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      static constexpr const _Head&
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      constexpr _Tuple_impl()
      : _Base() { }

      explicit
      constexpr _Tuple_impl(const _Head& __head)
      : _Base(__head) { }

      template<typename _UHead>
        explicit
        constexpr _Tuple_impl(_UHead&& __head)
 : _Base(std::forward<_UHead>(__head)) { }

      constexpr _Tuple_impl(const _Tuple_impl&) = default;



      _Tuple_impl& operator=(const _Tuple_impl&) = delete;

      constexpr
      _Tuple_impl(_Tuple_impl&& __in)
      noexcept(is_nothrow_move_constructible<_Head>::value)
      : _Base(std::forward<_Head>(_M_head(__in))) { }

      template<typename _UHead>
        constexpr _Tuple_impl(const _Tuple_impl<_Idx, _UHead>& __in)
 : _Base(_Tuple_impl<_Idx, _UHead>::_M_head(__in)) { }

      template<typename _UHead>
        constexpr _Tuple_impl(_Tuple_impl<_Idx, _UHead>&& __in)
 : _Base(std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in)))
 { }

      template<typename _Alloc>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a)
 : _Base(__tag, __use_alloc<_Head>(__a)) { }

      template<typename _Alloc>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
      const _Head& __head)
 : _Base(__use_alloc<_Head, _Alloc, _Head>(__a), __head) { }

      template<typename _Alloc, typename _UHead>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             _UHead&& __head)
 : _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
         std::forward<_UHead>(__head)) { }

      template<typename _Alloc>
        _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             const _Tuple_impl& __in)
 : _Base(__use_alloc<_Head, _Alloc, _Head>(__a), _M_head(__in)) { }

      template<typename _Alloc>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             _Tuple_impl&& __in)
 : _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
         std::forward<_Head>(_M_head(__in))) { }

      template<typename _Alloc, typename _UHead>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             const _Tuple_impl<_Idx, _UHead>& __in)
 : _Base(__use_alloc<_Head, _Alloc, const _UHead&>(__a),
  _Tuple_impl<_Idx, _UHead>::_M_head(__in)) { }

      template<typename _Alloc, typename _UHead>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             _Tuple_impl<_Idx, _UHead>&& __in)
 : _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
                std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in)))
 { }

      template<typename _UHead>
        void
        _M_assign(const _Tuple_impl<_Idx, _UHead>& __in)
        {
   _M_head(*this) = _Tuple_impl<_Idx, _UHead>::_M_head(__in);
 }

      template<typename _UHead>
        void
        _M_assign(_Tuple_impl<_Idx, _UHead>&& __in)
        {
   _M_head(*this)
     = std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in));
 }

    protected:
      void
      _M_swap(_Tuple_impl& __in)
      {
 using std::swap;
 swap(_M_head(*this), _M_head(__in));
      }
    };



  template<bool, typename... _Elements>
  struct _TC
  {
    template<typename... _UElements>
    static constexpr bool _ConstructibleTuple()
    {
      return __and_<is_constructible<_Elements, const _UElements&>...>::value;
    }

    template<typename... _UElements>
    static constexpr bool _ImplicitlyConvertibleTuple()
    {
      return __and_<is_convertible<const _UElements&, _Elements>...>::value;
    }

    template<typename... _UElements>
    static constexpr bool _MoveConstructibleTuple()
    {
      return __and_<is_constructible<_Elements, _UElements&&>...>::value;
    }

    template<typename... _UElements>
    static constexpr bool _ImplicitlyMoveConvertibleTuple()
    {
      return __and_<is_convertible<_UElements&&, _Elements>...>::value;
    }

    template<typename _SrcTuple>
    static constexpr bool _NonNestedTuple()
    {
      return __and_<__not_<is_same<tuple<_Elements...>,
        __remove_cvref_t<_SrcTuple>>>,
                     __not_<is_convertible<_SrcTuple, _Elements...>>,
                     __not_<is_constructible<_Elements..., _SrcTuple>>
              >::value;
    }

    template<typename... _UElements>
    static constexpr bool _NotSameTuple()
    {
      return __not_<is_same<tuple<_Elements...>,
        __remove_cvref_t<_UElements>...>>::value;
    }
  };

  template<typename... _Elements>
  struct _TC<false, _Elements...>
  {
    template<typename... _UElements>
    static constexpr bool _ConstructibleTuple()
    {
      return false;
    }

    template<typename... _UElements>
    static constexpr bool _ImplicitlyConvertibleTuple()
    {
      return false;
    }

    template<typename... _UElements>
    static constexpr bool _MoveConstructibleTuple()
    {
      return false;
    }

    template<typename... _UElements>
    static constexpr bool _ImplicitlyMoveConvertibleTuple()
    {
      return false;
    }

    template<typename... _UElements>
    static constexpr bool _NonNestedTuple()
    {
      return true;
    }

    template<typename... _UElements>
    static constexpr bool _NotSameTuple()
    {
      return true;
    }
  };


  template<typename... _Elements>
    class tuple : public _Tuple_impl<0, _Elements...>
    {
      typedef _Tuple_impl<0, _Elements...> _Inherited;



      template<typename _Dummy>
      struct _TC2
      {
        static constexpr bool _DefaultConstructibleTuple()
        {
          return __and_<is_default_constructible<_Elements>...>::value;
        }
        static constexpr bool _ImplicitlyDefaultConstructibleTuple()
        {
          return __and_<__is_implicitly_default_constructible<_Elements>...>
            ::value;
        }
      };

      template<typename... _UElements>
 static constexpr
 __enable_if_t<sizeof...(_UElements) == sizeof...(_Elements), bool>
 __assignable()
 { return __and_<is_assignable<_Elements&, _UElements>...>::value; }

      template<typename... _UElements>
 static constexpr bool __nothrow_assignable()
 {
   return
     __and_<is_nothrow_assignable<_Elements&, _UElements>...>::value;
 }

    public:
      template<typename _Dummy = void,
               typename enable_if<_TC2<_Dummy>::
                                    _ImplicitlyDefaultConstructibleTuple(),
                                  bool>::type = true>
      constexpr tuple()
      : _Inherited() { }

      template<typename _Dummy = void,
               typename enable_if<_TC2<_Dummy>::
                                    _DefaultConstructibleTuple()
                                  &&
                                  !_TC2<_Dummy>::
                                    _ImplicitlyDefaultConstructibleTuple(),
                                  bool>::type = false>
      explicit constexpr tuple()
      : _Inherited() { }



      template<typename _Dummy> using _TCC =
        _TC<is_same<_Dummy, void>::value,
            _Elements...>;

      template<typename _Dummy = void,
               typename enable_if<
                 _TCC<_Dummy>::template
                   _ConstructibleTuple<_Elements...>()
                 && _TCC<_Dummy>::template
                   _ImplicitlyConvertibleTuple<_Elements...>()
                 && (sizeof...(_Elements) >= 1),
               bool>::type=true>
        constexpr tuple(const _Elements&... __elements)
      : _Inherited(__elements...) { }

      template<typename _Dummy = void,
               typename enable_if<
                 _TCC<_Dummy>::template
                   _ConstructibleTuple<_Elements...>()
                 && !_TCC<_Dummy>::template
                   _ImplicitlyConvertibleTuple<_Elements...>()
                 && (sizeof...(_Elements) >= 1),
               bool>::type=false>
      explicit constexpr tuple(const _Elements&... __elements)
      : _Inherited(__elements...) { }



      template<typename... _UElements> using _TMC =
                  _TC<(sizeof...(_Elements) == sizeof...(_UElements))
        && (_TC<(sizeof...(_UElements)==1), _Elements...>::
     template _NotSameTuple<_UElements...>()),
                      _Elements...>;



      template<typename... _UElements> using _TMCT =
                  _TC<(sizeof...(_Elements) == sizeof...(_UElements))
        && !is_same<tuple<_Elements...>,
      tuple<_UElements...>>::value,
                      _Elements...>;

      template<typename... _UElements, typename
        enable_if<
    _TMC<_UElements...>::template
                    _MoveConstructibleTuple<_UElements...>()
                  && _TMC<_UElements...>::template
                    _ImplicitlyMoveConvertibleTuple<_UElements...>()
                  && (sizeof...(_Elements) >= 1),
        bool>::type=true>
        constexpr tuple(_UElements&&... __elements)
        : _Inherited(std::forward<_UElements>(__elements)...) { }

      template<typename... _UElements, typename
        enable_if<
    _TMC<_UElements...>::template
                    _MoveConstructibleTuple<_UElements...>()
                  && !_TMC<_UElements...>::template
                    _ImplicitlyMoveConvertibleTuple<_UElements...>()
                  && (sizeof...(_Elements) >= 1),
        bool>::type=false>
        explicit constexpr tuple(_UElements&&... __elements)
 : _Inherited(std::forward<_UElements>(__elements)...) { }

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;



      template<typename _Dummy> using _TNTC =
        _TC<is_same<_Dummy, void>::value && sizeof...(_Elements) == 1,
            _Elements...>;

      template<typename... _UElements, typename _Dummy = void, typename
        enable_if<_TMCT<_UElements...>::template
                    _ConstructibleTuple<_UElements...>()
                  && _TMCT<_UElements...>::template
                    _ImplicitlyConvertibleTuple<_UElements...>()
                  && _TNTC<_Dummy>::template
                    _NonNestedTuple<const tuple<_UElements...>&>(),
        bool>::type=true>
        constexpr tuple(const tuple<_UElements...>& __in)
        : _Inherited(static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
        { }

      template<typename... _UElements, typename _Dummy = void, typename
        enable_if<_TMCT<_UElements...>::template
                    _ConstructibleTuple<_UElements...>()
                  && !_TMCT<_UElements...>::template
                    _ImplicitlyConvertibleTuple<_UElements...>()
                  && _TNTC<_Dummy>::template
                    _NonNestedTuple<const tuple<_UElements...>&>(),
        bool>::type=false>
        explicit constexpr tuple(const tuple<_UElements...>& __in)
        : _Inherited(static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
        { }

      template<typename... _UElements, typename _Dummy = void, typename
        enable_if<_TMCT<_UElements...>::template
                    _MoveConstructibleTuple<_UElements...>()
                  && _TMCT<_UElements...>::template
                    _ImplicitlyMoveConvertibleTuple<_UElements...>()
                  && _TNTC<_Dummy>::template
                    _NonNestedTuple<tuple<_UElements...>&&>(),
        bool>::type=true>
        constexpr tuple(tuple<_UElements...>&& __in)
        : _Inherited(static_cast<_Tuple_impl<0, _UElements...>&&>(__in)) { }

      template<typename... _UElements, typename _Dummy = void, typename
        enable_if<_TMCT<_UElements...>::template
                    _MoveConstructibleTuple<_UElements...>()
                  && !_TMCT<_UElements...>::template
                    _ImplicitlyMoveConvertibleTuple<_UElements...>()
                  && _TNTC<_Dummy>::template
                    _NonNestedTuple<tuple<_UElements...>&&>(),
        bool>::type=false>
        explicit constexpr tuple(tuple<_UElements...>&& __in)
        : _Inherited(static_cast<_Tuple_impl<0, _UElements...>&&>(__in)) { }



      template<typename _Alloc>
 tuple(allocator_arg_t __tag, const _Alloc& __a)
 : _Inherited(__tag, __a) { }

      template<typename _Alloc, typename _Dummy = void,
               typename enable_if<
                 _TCC<_Dummy>::template
                   _ConstructibleTuple<_Elements...>()
                 && _TCC<_Dummy>::template
                   _ImplicitlyConvertibleTuple<_Elements...>(),
               bool>::type=true>
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const _Elements&... __elements)
 : _Inherited(__tag, __a, __elements...) { }

      template<typename _Alloc, typename _Dummy = void,
               typename enable_if<
                 _TCC<_Dummy>::template
                   _ConstructibleTuple<_Elements...>()
                 && !_TCC<_Dummy>::template
                   _ImplicitlyConvertibleTuple<_Elements...>(),
               bool>::type=false>
 explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
                       const _Elements&... __elements)
 : _Inherited(__tag, __a, __elements...) { }

      template<typename _Alloc, typename... _UElements, typename
        enable_if<_TMC<_UElements...>::template
                    _MoveConstructibleTuple<_UElements...>()
                  && _TMC<_UElements...>::template
                    _ImplicitlyMoveConvertibleTuple<_UElements...>(),
        bool>::type=true>
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       _UElements&&... __elements)
 : _Inherited(__tag, __a, std::forward<_UElements>(__elements)...)
        { }

      template<typename _Alloc, typename... _UElements, typename
        enable_if<_TMC<_UElements...>::template
                    _MoveConstructibleTuple<_UElements...>()
                  && !_TMC<_UElements...>::template
                    _ImplicitlyMoveConvertibleTuple<_UElements...>(),
        bool>::type=false>
 explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
       _UElements&&... __elements)
 : _Inherited(__tag, __a, std::forward<_UElements>(__elements)...)
        { }

      template<typename _Alloc>
 tuple(allocator_arg_t __tag, const _Alloc& __a, const tuple& __in)
 : _Inherited(__tag, __a, static_cast<const _Inherited&>(__in)) { }

      template<typename _Alloc>
 tuple(allocator_arg_t __tag, const _Alloc& __a, tuple&& __in)
 : _Inherited(__tag, __a, static_cast<_Inherited&&>(__in)) { }

      template<typename _Alloc, typename _Dummy = void,
        typename... _UElements, typename
        enable_if<_TMCT<_UElements...>::template
                    _ConstructibleTuple<_UElements...>()
                  && _TMCT<_UElements...>::template
                    _ImplicitlyConvertibleTuple<_UElements...>()
                  && _TNTC<_Dummy>::template
                    _NonNestedTuple<const tuple<_UElements...>&>(),
        bool>::type=true>
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const tuple<_UElements...>& __in)
 : _Inherited(__tag, __a,
              static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
 { }

      template<typename _Alloc, typename _Dummy = void,
        typename... _UElements, typename
        enable_if<_TMCT<_UElements...>::template
                    _ConstructibleTuple<_UElements...>()
                  && !_TMCT<_UElements...>::template
                    _ImplicitlyConvertibleTuple<_UElements...>()
                  && _TNTC<_Dummy>::template
                    _NonNestedTuple<const tuple<_UElements...>&>(),
        bool>::type=false>
 explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
       const tuple<_UElements...>& __in)
 : _Inherited(__tag, __a,
              static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
 { }

      template<typename _Alloc, typename _Dummy = void,
        typename... _UElements, typename
        enable_if<_TMCT<_UElements...>::template
                    _MoveConstructibleTuple<_UElements...>()
                  && _TMCT<_UElements...>::template
                    _ImplicitlyMoveConvertibleTuple<_UElements...>()
                  && _TNTC<_Dummy>::template
                    _NonNestedTuple<tuple<_UElements...>&&>(),
        bool>::type=true>
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       tuple<_UElements...>&& __in)
 : _Inherited(__tag, __a,
              static_cast<_Tuple_impl<0, _UElements...>&&>(__in))
 { }

      template<typename _Alloc, typename _Dummy = void,
        typename... _UElements, typename
        enable_if<_TMCT<_UElements...>::template
                    _MoveConstructibleTuple<_UElements...>()
                  && !_TMCT<_UElements...>::template
                    _ImplicitlyMoveConvertibleTuple<_UElements...>()
                  && _TNTC<_Dummy>::template
                    _NonNestedTuple<tuple<_UElements...>&&>(),
        bool>::type=false>
 explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
       tuple<_UElements...>&& __in)
 : _Inherited(__tag, __a,
              static_cast<_Tuple_impl<0, _UElements...>&&>(__in))
 { }



      tuple&
      operator=(typename conditional<__assignable<const _Elements&...>(),
         const tuple&,
         const __nonesuch_no_braces&>::type __in)
      noexcept(__nothrow_assignable<const _Elements&...>())
      {
 this->_M_assign(__in);
 return *this;
      }

      tuple&
      operator=(typename conditional<__assignable<_Elements...>(),
         tuple&&,
         __nonesuch_no_braces&&>::type __in)
      noexcept(__nothrow_assignable<_Elements...>())
      {
 this->_M_assign(std::move(__in));
 return *this;
      }

      template<typename... _UElements>
 __enable_if_t<__assignable<const _UElements&...>(), tuple&>
 operator=(const tuple<_UElements...>& __in)
 noexcept(__nothrow_assignable<const _UElements&...>())
 {
   this->_M_assign(__in);
   return *this;
 }

      template<typename... _UElements>
 __enable_if_t<__assignable<_UElements...>(), tuple&>
 operator=(tuple<_UElements...>&& __in)
 noexcept(__nothrow_assignable<_UElements...>())
 {
   this->_M_assign(std::move(__in));
   return *this;
 }


      void
      swap(tuple& __in)
      noexcept(__and_<__is_nothrow_swappable<_Elements>...>::value)
      { _Inherited::_M_swap(__in); }
    };
# 875 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/tuple" 3
  template<>
    class tuple<>
    {
    public:
      void swap(tuple&) noexcept { }


      tuple() = default;

      template<typename _Alloc>
 tuple(allocator_arg_t, const _Alloc&) { }
      template<typename _Alloc>
 tuple(allocator_arg_t, const _Alloc&, const tuple&) { }
    };



  template<typename _T1, typename _T2>
    class tuple<_T1, _T2> : public _Tuple_impl<0, _T1, _T2>
    {
      typedef _Tuple_impl<0, _T1, _T2> _Inherited;

      template<typename _U1, typename _U2>
 static constexpr bool __assignable()
 {
   return __and_<is_assignable<_T1&, _U1>,
   is_assignable<_T2&, _U2>>::value;
 }

      template<typename _U1, typename _U2>
 static constexpr bool __nothrow_assignable()
 {
   return __and_<is_nothrow_assignable<_T1&, _U1>,
   is_nothrow_assignable<_T2&, _U2>>::value;
 }

    public:
      template <typename _U1 = _T1,
                typename _U2 = _T2,
                typename enable_if<__and_<
                                     __is_implicitly_default_constructible<_U1>,
                                     __is_implicitly_default_constructible<_U2>>
                                   ::value, bool>::type = true>
 constexpr tuple()
 : _Inherited() { }

      template <typename _U1 = _T1,
                typename _U2 = _T2,
                typename enable_if<
                  __and_<
                    is_default_constructible<_U1>,
                    is_default_constructible<_U2>,
                    __not_<
                      __and_<__is_implicitly_default_constructible<_U1>,
                             __is_implicitly_default_constructible<_U2>>>>
                  ::value, bool>::type = false>
 explicit constexpr tuple()
 : _Inherited() { }



      template<typename _Dummy> using _TCC =
        _TC<is_same<_Dummy, void>::value, _T1, _T2>;

      template<typename _Dummy = void, typename
               enable_if<_TCC<_Dummy>::template
                           _ConstructibleTuple<_T1, _T2>()
                         && _TCC<_Dummy>::template
                           _ImplicitlyConvertibleTuple<_T1, _T2>(),
 bool>::type = true>
        constexpr tuple(const _T1& __a1, const _T2& __a2)
        : _Inherited(__a1, __a2) { }

      template<typename _Dummy = void, typename
               enable_if<_TCC<_Dummy>::template
                           _ConstructibleTuple<_T1, _T2>()
                         && !_TCC<_Dummy>::template
                           _ImplicitlyConvertibleTuple<_T1, _T2>(),
 bool>::type = false>
        explicit constexpr tuple(const _T1& __a1, const _T2& __a2)
        : _Inherited(__a1, __a2) { }



      using _TMC = _TC<true, _T1, _T2>;

      template<typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _MoveConstructibleTuple<_U1, _U2>()
                  && _TMC::template
                    _ImplicitlyMoveConvertibleTuple<_U1, _U2>()
           && !is_same<__remove_cvref_t<_U1>, allocator_arg_t>::value,
 bool>::type = true>
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 : _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _MoveConstructibleTuple<_U1, _U2>()
                  && !_TMC::template
                    _ImplicitlyMoveConvertibleTuple<_U1, _U2>()
           && !is_same<__remove_cvref_t<_U1>, allocator_arg_t>::value,
 bool>::type = false>
        explicit constexpr tuple(_U1&& __a1, _U2&& __a2)
 : _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;

      template<typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _ConstructibleTuple<_U1, _U2>()
                  && _TMC::template
                    _ImplicitlyConvertibleTuple<_U1, _U2>(),
 bool>::type = true>
        constexpr tuple(const tuple<_U1, _U2>& __in)
 : _Inherited(static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _ConstructibleTuple<_U1, _U2>()
                  && !_TMC::template
                    _ImplicitlyConvertibleTuple<_U1, _U2>(),
 bool>::type = false>
        explicit constexpr tuple(const tuple<_U1, _U2>& __in)
 : _Inherited(static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _MoveConstructibleTuple<_U1, _U2>()
                  && _TMC::template
                    _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
 bool>::type = true>
        constexpr tuple(tuple<_U1, _U2>&& __in)
 : _Inherited(static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _MoveConstructibleTuple<_U1, _U2>()
                  && !_TMC::template
                    _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
 bool>::type = false>
        explicit constexpr tuple(tuple<_U1, _U2>&& __in)
 : _Inherited(static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _ConstructibleTuple<_U1, _U2>()
                  && _TMC::template
                    _ImplicitlyConvertibleTuple<_U1, _U2>(),
 bool>::type = true>
        constexpr tuple(const pair<_U1, _U2>& __in)
 : _Inherited(__in.first, __in.second) { }

      template<typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _ConstructibleTuple<_U1, _U2>()
                  && !_TMC::template
                    _ImplicitlyConvertibleTuple<_U1, _U2>(),
 bool>::type = false>
        explicit constexpr tuple(const pair<_U1, _U2>& __in)
 : _Inherited(__in.first, __in.second) { }

      template<typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _MoveConstructibleTuple<_U1, _U2>()
                  && _TMC::template
                    _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
 bool>::type = true>
        constexpr tuple(pair<_U1, _U2>&& __in)
 : _Inherited(std::forward<_U1>(__in.first),
       std::forward<_U2>(__in.second)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _MoveConstructibleTuple<_U1, _U2>()
                  && !_TMC::template
                    _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
 bool>::type = false>
        explicit constexpr tuple(pair<_U1, _U2>&& __in)
 : _Inherited(std::forward<_U1>(__in.first),
       std::forward<_U2>(__in.second)) { }



      template<typename _Alloc>
 tuple(allocator_arg_t __tag, const _Alloc& __a)
 : _Inherited(__tag, __a) { }

      template<typename _Alloc, typename _Dummy = void,
               typename enable_if<
                 _TCC<_Dummy>::template
                   _ConstructibleTuple<_T1, _T2>()
                 && _TCC<_Dummy>::template
                   _ImplicitlyConvertibleTuple<_T1, _T2>(),
               bool>::type=true>

 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const _T1& __a1, const _T2& __a2)
 : _Inherited(__tag, __a, __a1, __a2) { }

      template<typename _Alloc, typename _Dummy = void,
               typename enable_if<
                 _TCC<_Dummy>::template
                   _ConstructibleTuple<_T1, _T2>()
                 && !_TCC<_Dummy>::template
                   _ImplicitlyConvertibleTuple<_T1, _T2>(),
               bool>::type=false>

 explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
       const _T1& __a1, const _T2& __a2)
 : _Inherited(__tag, __a, __a1, __a2) { }

      template<typename _Alloc, typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _MoveConstructibleTuple<_U1, _U2>()
                  && _TMC::template
                    _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
 bool>::type = true>
 tuple(allocator_arg_t __tag, const _Alloc& __a, _U1&& __a1, _U2&& __a2)
 : _Inherited(__tag, __a, std::forward<_U1>(__a1),
              std::forward<_U2>(__a2)) { }

      template<typename _Alloc, typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _MoveConstructibleTuple<_U1, _U2>()
                  && !_TMC::template
                    _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
 bool>::type = false>
 explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
                       _U1&& __a1, _U2&& __a2)
 : _Inherited(__tag, __a, std::forward<_U1>(__a1),
              std::forward<_U2>(__a2)) { }

      template<typename _Alloc>
 tuple(allocator_arg_t __tag, const _Alloc& __a, const tuple& __in)
 : _Inherited(__tag, __a, static_cast<const _Inherited&>(__in)) { }

      template<typename _Alloc>
 tuple(allocator_arg_t __tag, const _Alloc& __a, tuple&& __in)
 : _Inherited(__tag, __a, static_cast<_Inherited&&>(__in)) { }

      template<typename _Alloc, typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _ConstructibleTuple<_U1, _U2>()
                  && _TMC::template
                    _ImplicitlyConvertibleTuple<_U1, _U2>(),
 bool>::type = true>
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const tuple<_U1, _U2>& __in)
 : _Inherited(__tag, __a,
              static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in))
 { }

      template<typename _Alloc, typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _ConstructibleTuple<_U1, _U2>()
                  && !_TMC::template
                    _ImplicitlyConvertibleTuple<_U1, _U2>(),
 bool>::type = false>
 explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
       const tuple<_U1, _U2>& __in)
 : _Inherited(__tag, __a,
              static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in))
 { }

      template<typename _Alloc, typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _MoveConstructibleTuple<_U1, _U2>()
                  && _TMC::template
                    _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
 bool>::type = true>
 tuple(allocator_arg_t __tag, const _Alloc& __a, tuple<_U1, _U2>&& __in)
 : _Inherited(__tag, __a, static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in))
 { }

      template<typename _Alloc, typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _MoveConstructibleTuple<_U1, _U2>()
                  && !_TMC::template
                    _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
 bool>::type = false>
 explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
                       tuple<_U1, _U2>&& __in)
 : _Inherited(__tag, __a, static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in))
 { }

      template<typename _Alloc, typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _ConstructibleTuple<_U1, _U2>()
                  && _TMC::template
                    _ImplicitlyConvertibleTuple<_U1, _U2>(),
 bool>::type = true>
        tuple(allocator_arg_t __tag, const _Alloc& __a,
       const pair<_U1, _U2>& __in)
 : _Inherited(__tag, __a, __in.first, __in.second) { }

      template<typename _Alloc, typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _ConstructibleTuple<_U1, _U2>()
                  && !_TMC::template
                    _ImplicitlyConvertibleTuple<_U1, _U2>(),
 bool>::type = false>
        explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
       const pair<_U1, _U2>& __in)
 : _Inherited(__tag, __a, __in.first, __in.second) { }

      template<typename _Alloc, typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _MoveConstructibleTuple<_U1, _U2>()
                  && _TMC::template
                    _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
 bool>::type = true>
        tuple(allocator_arg_t __tag, const _Alloc& __a, pair<_U1, _U2>&& __in)
 : _Inherited(__tag, __a, std::forward<_U1>(__in.first),
       std::forward<_U2>(__in.second)) { }

      template<typename _Alloc, typename _U1, typename _U2, typename
        enable_if<_TMC::template
                    _MoveConstructibleTuple<_U1, _U2>()
                  && !_TMC::template
                    _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
 bool>::type = false>
        explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
                       pair<_U1, _U2>&& __in)
 : _Inherited(__tag, __a, std::forward<_U1>(__in.first),
       std::forward<_U2>(__in.second)) { }

      tuple&
      operator=(typename conditional<__assignable<const _T1&, const _T2&>(),
         const tuple&,
         const __nonesuch_no_braces&>::type __in)
      noexcept(__nothrow_assignable<const _T1&, const _T2&>())
      {
 this->_M_assign(__in);
 return *this;
      }

      tuple&
      operator=(typename conditional<__assignable<_T1, _T2>(),
         tuple&&,
         __nonesuch_no_braces&&>::type __in)
      noexcept(__nothrow_assignable<_T1, _T2>())
      {
 this->_M_assign(std::move(__in));
 return *this;
      }

      template<typename _U1, typename _U2>
 __enable_if_t<__assignable<const _U1&, const _U2&>(), tuple&>
 operator=(const tuple<_U1, _U2>& __in)
 noexcept(__nothrow_assignable<const _U1&, const _U2&>())
 {
   this->_M_assign(__in);
   return *this;
 }

      template<typename _U1, typename _U2>
 __enable_if_t<__assignable<_U1, _U2>(), tuple&>
 operator=(tuple<_U1, _U2>&& __in)
 noexcept(__nothrow_assignable<_U1, _U2>())
 {
   this->_M_assign(std::move(__in));
   return *this;
 }

      template<typename _U1, typename _U2>
 __enable_if_t<__assignable<const _U1&, const _U2&>(), tuple&>
 operator=(const pair<_U1, _U2>& __in)
 noexcept(__nothrow_assignable<const _U1&, const _U2&>())
 {
   this->_M_head(*this) = __in.first;
   this->_M_tail(*this)._M_head(*this) = __in.second;
   return *this;
 }

      template<typename _U1, typename _U2>
 __enable_if_t<__assignable<_U1, _U2>(), tuple&>
 operator=(pair<_U1, _U2>&& __in)
 noexcept(__nothrow_assignable<_U1, _U2>())
 {
   this->_M_head(*this) = std::forward<_U1>(__in.first);
   this->_M_tail(*this)._M_head(*this) = std::forward<_U2>(__in.second);
   return *this;
 }

      void
      swap(tuple& __in)
      noexcept(__and_<__is_nothrow_swappable<_T1>,
        __is_nothrow_swappable<_T2>>::value)
      { _Inherited::_M_swap(__in); }
    };



  template<typename... _Elements>
    struct tuple_size<tuple<_Elements...>>
    : public integral_constant<std::size_t, sizeof...(_Elements)> { };
# 1284 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/tuple" 3
  template<std::size_t __i, typename _Head, typename... _Tail>
    struct tuple_element<__i, tuple<_Head, _Tail...> >
    : tuple_element<__i - 1, tuple<_Tail...> > { };




  template<typename _Head, typename... _Tail>
    struct tuple_element<0, tuple<_Head, _Tail...> >
    {
      typedef _Head type;
    };




  template<size_t __i>
    struct tuple_element<__i, tuple<>>
    {
      static_assert(__i < tuple_size<tuple<>>::value,
   "tuple index is in range");
    };

  template<std::size_t __i, typename _Head, typename... _Tail>
    constexpr _Head&
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  template<std::size_t __i, typename _Head, typename... _Tail>
    constexpr const _Head&
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }


  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
    { return std::__get_helper<__i>(__t); }


  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
    { return std::__get_helper<__i>(__t); }


  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&&
    get(tuple<_Elements...>&& __t) noexcept
    {
      typedef __tuple_element_t<__i, tuple<_Elements...>> __element_type;
      return std::forward<__element_type&&>(std::get<__i>(__t));
    }


  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&&
    get(const tuple<_Elements...>&& __t) noexcept
    {
      typedef __tuple_element_t<__i, tuple<_Elements...>> __element_type;
      return std::forward<const __element_type&&>(std::get<__i>(__t));
    }





  template<typename _Head, size_t __i, typename... _Tail>
    constexpr _Head&
    __get_helper2(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  template<typename _Head, size_t __i, typename... _Tail>
    constexpr const _Head&
    __get_helper2(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }


  template <typename _Tp, typename... _Types>
    constexpr _Tp&
    get(tuple<_Types...>& __t) noexcept
    { return std::__get_helper2<_Tp>(__t); }


  template <typename _Tp, typename... _Types>
    constexpr _Tp&&
    get(tuple<_Types...>&& __t) noexcept
    { return std::forward<_Tp&&>(std::__get_helper2<_Tp>(__t)); }


  template <typename _Tp, typename... _Types>
    constexpr const _Tp&
    get(const tuple<_Types...>& __t) noexcept
    { return std::__get_helper2<_Tp>(__t); }



  template <typename _Tp, typename... _Types>
    constexpr const _Tp&&
    get(const tuple<_Types...>&& __t) noexcept
    { return std::forward<const _Tp&&>(std::__get_helper2<_Tp>(__t)); }



  template<typename _Tp, typename _Up, size_t __i, size_t __size>
    struct __tuple_compare
    {
      static constexpr bool
      __eq(const _Tp& __t, const _Up& __u)
      {
 return bool(std::get<__i>(__t) == std::get<__i>(__u))
   && __tuple_compare<_Tp, _Up, __i + 1, __size>::__eq(__t, __u);
      }

      static constexpr bool
      __less(const _Tp& __t, const _Up& __u)
      {
 return bool(std::get<__i>(__t) < std::get<__i>(__u))
   || (!bool(std::get<__i>(__u) < std::get<__i>(__t))
       && __tuple_compare<_Tp, _Up, __i + 1, __size>::__less(__t, __u));
      }
    };

  template<typename _Tp, typename _Up, size_t __size>
    struct __tuple_compare<_Tp, _Up, __size, __size>
    {
      static constexpr bool
      __eq(const _Tp&, const _Up&) { return true; }

      static constexpr bool
      __less(const _Tp&, const _Up&) { return false; }
    };

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator==(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    {
      static_assert(sizeof...(_TElements) == sizeof...(_UElements),
   "tuple objects can only be compared if they have equal sizes.");
      using __compare = __tuple_compare<tuple<_TElements...>,
     tuple<_UElements...>,
     0, sizeof...(_TElements)>;
      return __compare::__eq(__t, __u);
    }

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator<(const tuple<_TElements...>& __t,
       const tuple<_UElements...>& __u)
    {
      static_assert(sizeof...(_TElements) == sizeof...(_UElements),
   "tuple objects can only be compared if they have equal sizes.");
      using __compare = __tuple_compare<tuple<_TElements...>,
     tuple<_UElements...>,
     0, sizeof...(_TElements)>;
      return __compare::__less(__t, __u);
    }

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator!=(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    { return !(__t == __u); }

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator>(const tuple<_TElements...>& __t,
       const tuple<_UElements...>& __u)
    { return __u < __t; }

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator<=(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    { return !(__u < __t); }

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator>=(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    { return !(__t < __u); }


  template<typename... _Elements>
    constexpr tuple<typename __decay_and_strip<_Elements>::__type...>
    make_tuple(_Elements&&... __args)
    {
      typedef tuple<typename __decay_and_strip<_Elements>::__type...>
 __result_type;
      return __result_type(std::forward<_Elements>(__args)...);
    }




  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }

  template<size_t, typename, typename, size_t>
    struct __make_tuple_impl;

  template<size_t _Idx, typename _Tuple, typename... _Tp, size_t _Nm>
    struct __make_tuple_impl<_Idx, tuple<_Tp...>, _Tuple, _Nm>
    : __make_tuple_impl<_Idx + 1,
   tuple<_Tp..., __tuple_element_t<_Idx, _Tuple>>,
   _Tuple, _Nm>
    { };

  template<std::size_t _Nm, typename _Tuple, typename... _Tp>
    struct __make_tuple_impl<_Nm, tuple<_Tp...>, _Tuple, _Nm>
    {
      typedef tuple<_Tp...> __type;
    };

  template<typename _Tuple>
    struct __do_make_tuple
    : __make_tuple_impl<0, tuple<>, _Tuple, std::tuple_size<_Tuple>::value>
    { };


  template<typename _Tuple>
    struct __make_tuple
    : public __do_make_tuple<__remove_cvref_t<_Tuple>>
    { };


  template<typename...>
    struct __combine_tuples;

  template<>
    struct __combine_tuples<>
    {
      typedef tuple<> __type;
    };

  template<typename... _Ts>
    struct __combine_tuples<tuple<_Ts...>>
    {
      typedef tuple<_Ts...> __type;
    };

  template<typename... _T1s, typename... _T2s, typename... _Rem>
    struct __combine_tuples<tuple<_T1s...>, tuple<_T2s...>, _Rem...>
    {
      typedef typename __combine_tuples<tuple<_T1s..., _T2s...>,
     _Rem...>::__type __type;
    };


  template<typename... _Tpls>
    struct __tuple_cat_result
    {
      typedef typename __combine_tuples
        <typename __make_tuple<_Tpls>::__type...>::__type __type;
    };



  template<typename...>
    struct __make_1st_indices;

  template<>
    struct __make_1st_indices<>
    {
      typedef std::_Index_tuple<> __type;
    };

  template<typename _Tp, typename... _Tpls>
    struct __make_1st_indices<_Tp, _Tpls...>
    {
      typedef typename std::_Build_index_tuple<std::tuple_size<
 typename std::remove_reference<_Tp>::type>::value>::__type __type;
    };




  template<typename _Ret, typename _Indices, typename... _Tpls>
    struct __tuple_concater;

  template<typename _Ret, std::size_t... _Is, typename _Tp, typename... _Tpls>
    struct __tuple_concater<_Ret, std::_Index_tuple<_Is...>, _Tp, _Tpls...>
    {
      template<typename... _Us>
        static constexpr _Ret
        _S_do(_Tp&& __tp, _Tpls&&... __tps, _Us&&... __us)
        {
   typedef typename __make_1st_indices<_Tpls...>::__type __idx;
   typedef __tuple_concater<_Ret, __idx, _Tpls...> __next;
   return __next::_S_do(std::forward<_Tpls>(__tps)...,
          std::forward<_Us>(__us)...,
          std::get<_Is>(std::forward<_Tp>(__tp))...);
 }
    };

  template<typename _Ret>
    struct __tuple_concater<_Ret, std::_Index_tuple<>>
    {
      template<typename... _Us>
 static constexpr _Ret
 _S_do(_Us&&... __us)
        {
   return _Ret(std::forward<_Us>(__us)...);
 }
    };


  template<typename... _Tpls, typename = typename
           enable_if<__and_<__is_tuple_like<_Tpls>...>::value>::type>
    constexpr auto
    tuple_cat(_Tpls&&... __tpls)
    -> typename __tuple_cat_result<_Tpls...>::__type
    {
      typedef typename __tuple_cat_result<_Tpls...>::__type __ret;
      typedef typename __make_1st_indices<_Tpls...>::__type __idx;
      typedef __tuple_concater<__ret, __idx, _Tpls...> __concater;
      return __concater::_S_do(std::forward<_Tpls>(__tpls)...);
    }




  template<typename... _Elements>
    constexpr tuple<_Elements&...>
    tie(_Elements&... __args) noexcept
    { return tuple<_Elements&...>(__args...); }


  template<typename... _Elements>
    inline


    typename enable_if<__and_<__is_swappable<_Elements>...>::value
      >::type



    swap(tuple<_Elements...>& __x, tuple<_Elements...>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }


  template<typename... _Elements>
    typename enable_if<!__and_<__is_swappable<_Elements>...>::value>::type
    swap(tuple<_Elements...>&, tuple<_Elements...>&) = delete;






  struct _Swallow_assign
  {
    template<class _Tp>
      constexpr const _Swallow_assign&
      operator=(const _Tp&) const
      { return *this; }
  };



                    constexpr _Swallow_assign ignore{};


  template<typename... _Types, typename _Alloc>
    struct uses_allocator<tuple<_Types...>, _Alloc> : true_type { };


  template<class _T1, class _T2>
    template<typename... _Args1, typename... _Args2>
      inline
      pair<_T1, _T2>::
      pair(piecewise_construct_t,
    tuple<_Args1...> __first, tuple<_Args2...> __second)
      : pair(__first, __second,
      typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
      typename _Build_index_tuple<sizeof...(_Args2)>::__type())
      { }

  template<class _T1, class _T2>
    template<typename... _Args1, std::size_t... _Indexes1,
             typename... _Args2, std::size_t... _Indexes2>
      inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
    _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
      { }
# 1719 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/tuple" 3
}
# 38 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/unique_ptr.h" 2 3



namespace std
{








#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  template<typename> class auto_ptr;
#pragma GCC diagnostic pop



  template<typename _Tp>
    struct default_delete
    {

      constexpr default_delete() noexcept = default;






      template<typename _Up, typename = typename
        enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }


      void
      operator()(_Tp* __ptr) const
      {
 static_assert(!is_void<_Tp>::value,
        "can't delete pointer to incomplete type");
 static_assert(sizeof(_Tp)>0,
        "can't delete pointer to incomplete type");
 delete __ptr;
      }
    };




  template<typename _Tp>
    struct default_delete<_Tp[]>
    {
    public:

      constexpr default_delete() noexcept = default;
# 104 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/unique_ptr.h" 3
      template<typename _Up, typename = typename
        enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value>::type>
        default_delete(const default_delete<_Up[]>&) noexcept { }


      template<typename _Up>
      typename enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value>::type
 operator()(_Up* __ptr) const
      {
 static_assert(sizeof(_Tp)>0,
        "can't delete pointer to incomplete type");
 delete [] __ptr;
      }
    };

  template <typename _Tp, typename _Dp>
    class __uniq_ptr_impl
    {
      template <typename _Up, typename _Ep, typename = void>
 struct _Ptr
 {
   using type = _Up*;
 };

      template <typename _Up, typename _Ep>
 struct
 _Ptr<_Up, _Ep, __void_t<typename remove_reference<_Ep>::type::pointer>>
 {
   using type = typename remove_reference<_Ep>::type::pointer;
 };

    public:
      using _DeleterConstraint = enable_if<
        __and_<__not_<is_pointer<_Dp>>,
        is_default_constructible<_Dp>>::value>;

      using pointer = typename _Ptr<_Tp, _Dp>::type;

      static_assert( !is_rvalue_reference<_Dp>::value,
       "unique_ptr's deleter type must be a function object type"
       " or an lvalue reference type" );

      __uniq_ptr_impl() = default;
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }

      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 : _M_t(__p, std::forward<_Del>(__d)) { }

      pointer& _M_ptr() { return std::get<0>(_M_t); }
      pointer _M_ptr() const { return std::get<0>(_M_t); }
      _Dp& _M_deleter() { return std::get<1>(_M_t); }
      const _Dp& _M_deleter() const { return std::get<1>(_M_t); }

      void
      swap(__uniq_ptr_impl& __rhs) noexcept
      {
 using std::swap;
 swap(this->_M_ptr(), __rhs._M_ptr());
 swap(this->_M_deleter(), __rhs._M_deleter());
      }

    private:
      tuple<pointer, _Dp> _M_t;
    };


  template <typename _Tp, typename _Dp = default_delete<_Tp>>
    class unique_ptr
    {
      template <typename _Up>
 using _DeleterConstraint =
   typename __uniq_ptr_impl<_Tp, _Up>::_DeleterConstraint::type;

      __uniq_ptr_impl<_Tp, _Dp> _M_t;

    public:
      using pointer = typename __uniq_ptr_impl<_Tp, _Dp>::pointer;
      using element_type = _Tp;
      using deleter_type = _Dp;

    private:


      template<typename _Up, typename _Ep>
 using __safe_conversion_up = __and_<
   is_convertible<typename unique_ptr<_Up, _Ep>::pointer, pointer>,
   __not_<is_array<_Up>>
        >;

    public:



      template<typename _Del = _Dp, typename = _DeleterConstraint<_Del>>
 constexpr unique_ptr() noexcept
 : _M_t()
 { }







      template<typename _Del = _Dp, typename = _DeleterConstraint<_Del>>
 explicit
 unique_ptr(pointer __p) noexcept
 : _M_t(__p)
        { }
# 222 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/unique_ptr.h" 3
      template<typename _Del = deleter_type,
        typename = _Require<is_copy_constructible<_Del>>>
 unique_ptr(pointer __p, const deleter_type& __d) noexcept
 : _M_t(__p, __d) { }
# 234 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/unique_ptr.h" 3
      template<typename _Del = deleter_type,
        typename = _Require<is_move_constructible<_Del>>>
 unique_ptr(pointer __p,
     __enable_if_t<!is_lvalue_reference<_Del>::value,
     _Del&&> __d) noexcept
 : _M_t(__p, std::move(__d))
 { }

      template<typename _Del = deleter_type,
        typename _DelUnref = typename remove_reference<_Del>::type>
 unique_ptr(pointer,
     __enable_if_t<is_lvalue_reference<_Del>::value,
     _DelUnref&&>) = delete;


      template<typename _Del = _Dp, typename = _DeleterConstraint<_Del>>
 constexpr unique_ptr(nullptr_t) noexcept
 : _M_t()
 { }




      unique_ptr(unique_ptr&& __u) noexcept
      : _M_t(__u.release(), std::forward<deleter_type>(__u.get_deleter())) { }







      template<typename _Up, typename _Ep, typename = _Require<
               __safe_conversion_up<_Up, _Ep>,
        typename conditional<is_reference<_Dp>::value,
        is_same<_Ep, _Dp>,
        is_convertible<_Ep, _Dp>>::type>>
 unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
 : _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
 { }


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

      template<typename _Up, typename = _Require<
        is_convertible<_Up*, _Tp*>, is_same<_Dp, default_delete<_Tp>>>>
 unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop



      ~unique_ptr() noexcept
      {
 static_assert(__is_invocable<deleter_type&, pointer>::value,
        "unique_ptr's deleter must be invocable with a pointer");
 auto& __ptr = _M_t._M_ptr();
 if (__ptr != nullptr)
   get_deleter()(std::move(__ptr));
 __ptr = pointer();
      }
# 304 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/unique_ptr.h" 3
      unique_ptr&
      operator=(unique_ptr&& __u) noexcept
      {
 reset(__u.release());
 get_deleter() = std::forward<deleter_type>(__u.get_deleter());
 return *this;
      }
# 319 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/unique_ptr.h" 3
      template<typename _Up, typename _Ep>
        typename enable_if< __and_<
          __safe_conversion_up<_Up, _Ep>,
          is_assignable<deleter_type&, _Ep&&>
          >::value,
          unique_ptr&>::type
 operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
 {
   reset(__u.release());
   get_deleter() = std::forward<_Ep>(__u.get_deleter());
   return *this;
 }


      unique_ptr&
      operator=(nullptr_t) noexcept
      {
 reset();
 return *this;
      }




      typename add_lvalue_reference<element_type>::type
      operator*() const
      {
                                     ;
 return *get();
      }


      pointer
      operator->() const noexcept
      {
                                             ;
 return get();
      }


      pointer
      get() const noexcept
      { return _M_t._M_ptr(); }


      deleter_type&
      get_deleter() noexcept
      { return _M_t._M_deleter(); }


      const deleter_type&
      get_deleter() const noexcept
      { return _M_t._M_deleter(); }


      explicit operator bool() const noexcept
      { return get() == pointer() ? false : true; }




      pointer
      release() noexcept
      {
 pointer __p = get();
 _M_t._M_ptr() = pointer();
 return __p;
      }







      void
      reset(pointer __p = pointer()) noexcept
      {
 static_assert(__is_invocable<deleter_type&, pointer>::value,
        "unique_ptr's deleter must be invocable with a pointer");
 using std::swap;
 swap(_M_t._M_ptr(), __p);
 if (__p != pointer())
   get_deleter()(std::move(__p));
      }


      void
      swap(unique_ptr& __u) noexcept
      {
 static_assert(__is_swappable<_Dp>::value, "deleter must be swappable");
 _M_t.swap(__u._M_t);
      }


      unique_ptr(const unique_ptr&) = delete;
      unique_ptr& operator=(const unique_ptr&) = delete;
  };





  template<typename _Tp, typename _Dp>
    class unique_ptr<_Tp[], _Dp>
    {
      template <typename _Up>
      using _DeleterConstraint =
 typename __uniq_ptr_impl<_Tp, _Up>::_DeleterConstraint::type;

      __uniq_ptr_impl<_Tp, _Dp> _M_t;

      template<typename _Up>
 using __remove_cv = typename remove_cv<_Up>::type;


      template<typename _Up>
 using __is_derived_Tp
   = __and_< is_base_of<_Tp, _Up>,
      __not_<is_same<__remove_cv<_Tp>, __remove_cv<_Up>>> >;

    public:
      using pointer = typename __uniq_ptr_impl<_Tp, _Dp>::pointer;
      using element_type = _Tp;
      using deleter_type = _Dp;



      template<typename _Up, typename _Ep,
               typename _UPtr = unique_ptr<_Up, _Ep>,
        typename _UP_pointer = typename _UPtr::pointer,
        typename _UP_element_type = typename _UPtr::element_type>
 using __safe_conversion_up = __and_<
          is_array<_Up>,
          is_same<pointer, element_type*>,
          is_same<_UP_pointer, _UP_element_type*>,
          is_convertible<_UP_element_type(*)[], element_type(*)[]>
        >;


      template<typename _Up>
        using __safe_conversion_raw = __and_<
          __or_<__or_<is_same<_Up, pointer>,
                      is_same<_Up, nullptr_t>>,
                __and_<is_pointer<_Up>,
                       is_same<pointer, element_type*>,
                       is_convertible<
                         typename remove_pointer<_Up>::type(*)[],
                         element_type(*)[]>
                >
          >
        >;




      template<typename _Del = _Dp, typename = _DeleterConstraint<_Del>>
 constexpr unique_ptr() noexcept
 : _M_t()
 { }
# 487 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/unique_ptr.h" 3
      template<typename _Up,
        typename _Vp = _Dp,
        typename = _DeleterConstraint<_Vp>,
        typename = typename enable_if<
                 __safe_conversion_raw<_Up>::value, bool>::type>
 explicit
 unique_ptr(_Up __p) noexcept
 : _M_t(__p)
        { }
# 505 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/unique_ptr.h" 3
      template<typename _Up, typename _Del = deleter_type,
        typename = _Require<__safe_conversion_raw<_Up>,
       is_copy_constructible<_Del>>>
      unique_ptr(_Up __p, const deleter_type& __d) noexcept
      : _M_t(__p, __d) { }
# 519 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/unique_ptr.h" 3
      template<typename _Up, typename _Del = deleter_type,
        typename = _Require<__safe_conversion_raw<_Up>,
       is_move_constructible<_Del>>>
 unique_ptr(_Up __p,
     __enable_if_t<!is_lvalue_reference<_Del>::value,
     _Del&&> __d) noexcept
 : _M_t(std::move(__p), std::move(__d))
 { }

      template<typename _Up, typename _Del = deleter_type,
        typename _DelUnref = typename remove_reference<_Del>::type,
        typename = _Require<__safe_conversion_raw<_Up>>>
 unique_ptr(_Up,
     __enable_if_t<is_lvalue_reference<_Del>::value,
     _DelUnref&&>) = delete;


      unique_ptr(unique_ptr&& __u) noexcept
      : _M_t(__u.release(), std::forward<deleter_type>(__u.get_deleter())) { }


      template<typename _Del = _Dp, typename = _DeleterConstraint<_Del>>
 constexpr unique_ptr(nullptr_t) noexcept
 : _M_t()
        { }

      template<typename _Up, typename _Ep, typename = _Require<
        __safe_conversion_up<_Up, _Ep>,
        typename conditional<is_reference<_Dp>::value,
        is_same<_Ep, _Dp>,
        is_convertible<_Ep, _Dp>>::type>>
 unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
 : _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
 { }


      ~unique_ptr()
      {
 auto& __ptr = _M_t._M_ptr();
 if (__ptr != nullptr)
   get_deleter()(__ptr);
 __ptr = pointer();
      }
# 571 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/unique_ptr.h" 3
      unique_ptr&
      operator=(unique_ptr&& __u) noexcept
      {
 reset(__u.release());
 get_deleter() = std::forward<deleter_type>(__u.get_deleter());
 return *this;
      }
# 586 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/unique_ptr.h" 3
      template<typename _Up, typename _Ep>
 typename
 enable_if<__and_<__safe_conversion_up<_Up, _Ep>,
                         is_assignable<deleter_type&, _Ep&&>
                  >::value,
                  unique_ptr&>::type
 operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
 {
   reset(__u.release());
   get_deleter() = std::forward<_Ep>(__u.get_deleter());
   return *this;
 }


      unique_ptr&
      operator=(nullptr_t) noexcept
      {
 reset();
 return *this;
      }




      typename std::add_lvalue_reference<element_type>::type
      operator[](size_t __i) const
      {
                                     ;
 return get()[__i];
      }


      pointer
      get() const noexcept
      { return _M_t._M_ptr(); }


      deleter_type&
      get_deleter() noexcept
      { return _M_t._M_deleter(); }


      const deleter_type&
      get_deleter() const noexcept
      { return _M_t._M_deleter(); }


      explicit operator bool() const noexcept
      { return get() == pointer() ? false : true; }




      pointer
      release() noexcept
      {
 pointer __p = get();
 _M_t._M_ptr() = pointer();
 return __p;
      }







      template <typename _Up,
                typename = _Require<
                  __or_<is_same<_Up, pointer>,
                        __and_<is_same<pointer, element_type*>,
                               is_pointer<_Up>,
                               is_convertible<
                                 typename remove_pointer<_Up>::type(*)[],
                                 element_type(*)[]
                               >
                        >
                  >
               >>
      void
      reset(_Up __p) noexcept
      {
 pointer __ptr = __p;
 using std::swap;
 swap(_M_t._M_ptr(), __ptr);
 if (__ptr != nullptr)
   get_deleter()(__ptr);
      }

      void reset(nullptr_t = nullptr) noexcept
      {
        reset(pointer());
      }


      void
      swap(unique_ptr& __u) noexcept
      {
 static_assert(__is_swappable<_Dp>::value, "deleter must be swappable");
 _M_t.swap(__u._M_t);
      }


      unique_ptr(const unique_ptr&) = delete;
      unique_ptr& operator=(const unique_ptr&) = delete;
    };

  template<typename _Tp, typename _Dp>
    inline


    typename enable_if<__is_swappable<_Dp>::value>::type



    swap(unique_ptr<_Tp, _Dp>& __x,
  unique_ptr<_Tp, _Dp>& __y) noexcept
    { __x.swap(__y); }


  template<typename _Tp, typename _Dp>
    typename enable_if<!__is_swappable<_Dp>::value>::type
    swap(unique_ptr<_Tp, _Dp>&,
  unique_ptr<_Tp, _Dp>&) = delete;


  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
                       inline bool
    operator==(const unique_ptr<_Tp, _Dp>& __x,
        const unique_ptr<_Up, _Ep>& __y)
    { return __x.get() == __y.get(); }

  template<typename _Tp, typename _Dp>
                       inline bool
    operator==(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
    { return !__x; }

  template<typename _Tp, typename _Dp>
                       inline bool
    operator==(nullptr_t, const unique_ptr<_Tp, _Dp>& __x) noexcept
    { return !__x; }

  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
                       inline bool
    operator!=(const unique_ptr<_Tp, _Dp>& __x,
        const unique_ptr<_Up, _Ep>& __y)
    { return __x.get() != __y.get(); }

  template<typename _Tp, typename _Dp>
                       inline bool
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
    { return (bool)__x; }

  template<typename _Tp, typename _Dp>
                       inline bool
    operator!=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x) noexcept
    { return (bool)__x; }

  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
                       inline bool
    operator<(const unique_ptr<_Tp, _Dp>& __x,
       const unique_ptr<_Up, _Ep>& __y)
    {
      typedef typename
 std::common_type<typename unique_ptr<_Tp, _Dp>::pointer,
                  typename unique_ptr<_Up, _Ep>::pointer>::type _CT;
      return std::less<_CT>()(__x.get(), __y.get());
    }

  template<typename _Tp, typename _Dp>
                       inline bool
    operator<(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
    { return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(__x.get(),
         nullptr); }

  template<typename _Tp, typename _Dp>
                       inline bool
    operator<(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
    { return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(nullptr,
         __x.get()); }

  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
                       inline bool
    operator<=(const unique_ptr<_Tp, _Dp>& __x,
        const unique_ptr<_Up, _Ep>& __y)
    { return !(__y < __x); }

  template<typename _Tp, typename _Dp>
                       inline bool
    operator<=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
    { return !(nullptr < __x); }

  template<typename _Tp, typename _Dp>
                       inline bool
    operator<=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
    { return !(__x < nullptr); }

  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
                       inline bool
    operator>(const unique_ptr<_Tp, _Dp>& __x,
       const unique_ptr<_Up, _Ep>& __y)
    { return (__y < __x); }

  template<typename _Tp, typename _Dp>
                       inline bool
    operator>(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
    { return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(nullptr,
         __x.get()); }

  template<typename _Tp, typename _Dp>
                       inline bool
    operator>(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
    { return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(__x.get(),
         nullptr); }

  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
                       inline bool
    operator>=(const unique_ptr<_Tp, _Dp>& __x,
        const unique_ptr<_Up, _Ep>& __y)
    { return !(__x < __y); }

  template<typename _Tp, typename _Dp>
                       inline bool
    operator>=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
    { return !(__x < nullptr); }

  template<typename _Tp, typename _Dp>
                       inline bool
    operator>=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
    { return !(nullptr < __x); }


  template<typename _Tp, typename _Dp>
    struct hash<unique_ptr<_Tp, _Dp>>
    : public __hash_base<size_t, unique_ptr<_Tp, _Dp>>,
    private __poison_hash<typename unique_ptr<_Tp, _Dp>::pointer>
    {
      size_t
      operator()(const unique_ptr<_Tp, _Dp>& __u) const noexcept
      {
 typedef unique_ptr<_Tp, _Dp> _UP;
 return std::hash<typename _UP::pointer>()(__u.get());
      }
    };





  template<typename _Tp>
    struct _MakeUniq
    { typedef unique_ptr<_Tp> __single_object; };

  template<typename _Tp>
    struct _MakeUniq<_Tp[]>
    { typedef unique_ptr<_Tp[]> __array; };

  template<typename _Tp, size_t _Bound>
    struct _MakeUniq<_Tp[_Bound]>
    { struct __invalid_type { }; };


  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }


  template<typename _Tp>
    inline typename _MakeUniq<_Tp>::__array
    make_unique(size_t __num)
    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }


  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__invalid_type
    make_unique(_Args&&...) = delete;
# 888 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/unique_ptr.h" 3
}
# 42 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_conv.h" 2 3

namespace std
{







  template<typename _OutStr, typename _InChar, typename _Codecvt,
    typename _State, typename _Fn>
    bool
    __do_str_codecvt(const _InChar* __first, const _InChar* __last,
       _OutStr& __outstr, const _Codecvt& __cvt, _State& __state,
       size_t& __count, _Fn __fn)
    {
      if (__first == __last)
 {
   __outstr.clear();
   __count = 0;
   return true;
 }

      size_t __outchars = 0;
      auto __next = __first;
      const auto __maxlen = __cvt.max_length() + 1;

      codecvt_base::result __result;
      do
 {
   __outstr.resize(__outstr.size() + (__last - __next) * __maxlen);
   auto __outnext = &__outstr.front() + __outchars;
   auto const __outlast = &__outstr.back() + 1;
   __result = (__cvt.*__fn)(__state, __next, __last, __next,
     __outnext, __outlast, __outnext);
   __outchars = __outnext - &__outstr.front();
 }
      while (__result == codecvt_base::partial && __next != __last
      && (__outstr.size() - __outchars) < __maxlen);

      if (__result == codecvt_base::error)
 {
   __count = __next - __first;
   return false;
 }



      if (is_same<typename _Codecvt::intern_type,
           typename _Codecvt::extern_type>())
 if (__result == codecvt_base::noconv)
   {
     __outstr.assign(__first, __last);
     __count = __last - __first;
     return true;
   }

      __outstr.resize(__outchars);
      __count = __next - __first;
      return true;
    }


  template<typename _CharT, typename _Traits, typename _Alloc, typename _State>
    inline bool
    __str_codecvt_in(const char* __first, const char* __last,
       basic_string<_CharT, _Traits, _Alloc>& __outstr,
       const codecvt<_CharT, char, _State>& __cvt,
       _State& __state, size_t& __count)
    {
      using _Codecvt = codecvt<_CharT, char, _State>;
      using _ConvFn
 = codecvt_base::result
   (_Codecvt::*)(_State&, const char*, const char*, const char*&,
   _CharT*, _CharT*, _CharT*&) const;
      _ConvFn __fn = &codecvt<_CharT, char, _State>::in;
      return __do_str_codecvt(__first, __last, __outstr, __cvt, __state,
         __count, __fn);
    }


  template<typename _CharT, typename _Traits, typename _Alloc, typename _State>
    inline bool
    __str_codecvt_in(const char* __first, const char* __last,
       basic_string<_CharT, _Traits, _Alloc>& __outstr,
       const codecvt<_CharT, char, _State>& __cvt)
    {
      _State __state = {};
      size_t __n;
      return __str_codecvt_in(__first, __last, __outstr, __cvt, __state, __n);
    }


  template<typename _CharT, typename _Traits, typename _Alloc, typename _State>
    inline bool
    __str_codecvt_in_all(const char* __first, const char* __last,
    basic_string<_CharT, _Traits, _Alloc>& __outstr,
    const codecvt<_CharT, char, _State>& __cvt)
    {
      _State __state = {};
      size_t __n;
      return __str_codecvt_in(__first, __last, __outstr, __cvt, __state, __n)
 && (__n == (__last - __first));
    }


  template<typename _CharT, typename _Traits, typename _Alloc, typename _State>
    inline bool
    __str_codecvt_out(const _CharT* __first, const _CharT* __last,
        basic_string<char, _Traits, _Alloc>& __outstr,
        const codecvt<_CharT, char, _State>& __cvt,
        _State& __state, size_t& __count)
    {
      using _Codecvt = codecvt<_CharT, char, _State>;
      using _ConvFn
 = codecvt_base::result
   (_Codecvt::*)(_State&, const _CharT*, const _CharT*, const _CharT*&,
   char*, char*, char*&) const;
      _ConvFn __fn = &codecvt<_CharT, char, _State>::out;
      return __do_str_codecvt(__first, __last, __outstr, __cvt, __state,
         __count, __fn);
    }


  template<typename _CharT, typename _Traits, typename _Alloc, typename _State>
    inline bool
    __str_codecvt_out(const _CharT* __first, const _CharT* __last,
        basic_string<char, _Traits, _Alloc>& __outstr,
        const codecvt<_CharT, char, _State>& __cvt)
    {
      _State __state = {};
      size_t __n;
      return __str_codecvt_out(__first, __last, __outstr, __cvt, __state, __n);
    }


  template<typename _CharT, typename _Traits, typename _Alloc, typename _State>
    inline bool
    __str_codecvt_out_all(const _CharT* __first, const _CharT* __last,
     basic_string<char, _Traits, _Alloc>& __outstr,
     const codecvt<_CharT, char, _State>& __cvt)
    {
      _State __state = {};
      size_t __n;
      return __str_codecvt_out(__first, __last, __outstr, __cvt, __state, __n)
 && (__n == (__last - __first));
    }
# 226 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_conv.h" 3
namespace __cxx11 {


  template<typename _Codecvt, typename _Elem = wchar_t,
    typename _Wide_alloc = allocator<_Elem>,
    typename _Byte_alloc = allocator<char>>
    class wstring_convert
    {
    public:
      typedef basic_string<char, char_traits<char>, _Byte_alloc> byte_string;
      typedef basic_string<_Elem, char_traits<_Elem>, _Wide_alloc> wide_string;
      typedef typename _Codecvt::state_type state_type;
      typedef typename wide_string::traits_type::int_type int_type;


      wstring_convert() : _M_cvt(new _Codecvt()) { }







      explicit
      wstring_convert(_Codecvt* __pcvt) : _M_cvt(__pcvt)
      {
 if (!_M_cvt)
   __throw_logic_error("wstring_convert");
      }
# 264 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_conv.h" 3
      wstring_convert(_Codecvt* __pcvt, state_type __state)
      : _M_cvt(__pcvt), _M_state(__state), _M_with_cvtstate(true)
      {
 if (!_M_cvt)
   __throw_logic_error("wstring_convert");
      }






      explicit
      wstring_convert(const byte_string& __byte_err,
        const wide_string& __wide_err = wide_string())
      : _M_cvt(new _Codecvt),
 _M_byte_err_string(__byte_err), _M_wide_err_string(__wide_err),
 _M_with_strings(true)
      {
 if (!_M_cvt)
   __throw_logic_error("wstring_convert");
      }

      ~wstring_convert() = default;



      wstring_convert(const wstring_convert&) = delete;
      wstring_convert& operator=(const wstring_convert&) = delete;


      wide_string
      from_bytes(char __byte)
      {
 char __bytes[2] = { __byte };
 return from_bytes(__bytes, __bytes+1);
      }

      wide_string
      from_bytes(const char* __ptr)
      { return from_bytes(__ptr, __ptr+char_traits<char>::length(__ptr)); }

      wide_string
      from_bytes(const byte_string& __str)
      {
 auto __ptr = __str.data();
 return from_bytes(__ptr, __ptr + __str.size());
      }

      wide_string
      from_bytes(const char* __first, const char* __last)
      {
 if (!_M_with_cvtstate)
   _M_state = state_type();
 wide_string __out{ _M_wide_err_string.get_allocator() };
 if (__str_codecvt_in(__first, __last, __out, *_M_cvt, _M_state,
        _M_count))
   return __out;
 if (_M_with_strings)
   return _M_wide_err_string;
 __throw_range_error("wstring_convert::from_bytes");
      }



      byte_string
      to_bytes(_Elem __wchar)
      {
 _Elem __wchars[2] = { __wchar };
 return to_bytes(__wchars, __wchars+1);
      }

      byte_string
      to_bytes(const _Elem* __ptr)
      {
 return to_bytes(__ptr, __ptr+wide_string::traits_type::length(__ptr));
      }

      byte_string
      to_bytes(const wide_string& __wstr)
      {
 auto __ptr = __wstr.data();
 return to_bytes(__ptr, __ptr + __wstr.size());
      }

      byte_string
      to_bytes(const _Elem* __first, const _Elem* __last)
      {
 if (!_M_with_cvtstate)
   _M_state = state_type();
 byte_string __out{ _M_byte_err_string.get_allocator() };
 if (__str_codecvt_out(__first, __last, __out, *_M_cvt, _M_state,
         _M_count))
   return __out;
 if (_M_with_strings)
   return _M_byte_err_string;
 __throw_range_error("wstring_convert::to_bytes");
      }





      size_t converted() const noexcept { return _M_count; }


      state_type state() const { return _M_state; }

    private:
      unique_ptr<_Codecvt> _M_cvt;
      byte_string _M_byte_err_string;
      wide_string _M_wide_err_string;
      state_type _M_state = state_type();
      size_t _M_count = 0;
      bool _M_with_cvtstate = false;
      bool _M_with_strings = false;
    };

}


  template<typename _Codecvt, typename _Elem = wchar_t,
    typename _Tr = char_traits<_Elem>>
    class wbuffer_convert : public basic_streambuf<_Elem, _Tr>
    {
      typedef basic_streambuf<_Elem, _Tr> _Wide_streambuf;

    public:
      typedef typename _Codecvt::state_type state_type;


      wbuffer_convert() : wbuffer_convert(nullptr) { }
# 405 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/locale_conv.h" 3
      explicit
      wbuffer_convert(streambuf* __bytebuf, _Codecvt* __pcvt = new _Codecvt,
        state_type __state = state_type())
      : _M_buf(__bytebuf), _M_cvt(__pcvt), _M_state(__state)
      {
 if (!_M_cvt)
   __throw_logic_error("wbuffer_convert");

 _M_always_noconv = _M_cvt->always_noconv();

 if (_M_buf)
   {
     this->setp(_M_put_area, _M_put_area + _S_buffer_length);
     this->setg(_M_get_area + _S_putback_length,
         _M_get_area + _S_putback_length,
         _M_get_area + _S_putback_length);
   }
      }

      ~wbuffer_convert() = default;



      wbuffer_convert(const wbuffer_convert&) = delete;
      wbuffer_convert& operator=(const wbuffer_convert&) = delete;

      streambuf* rdbuf() const noexcept { return _M_buf; }

      streambuf*
      rdbuf(streambuf *__bytebuf) noexcept
      {
 auto __prev = _M_buf;
 _M_buf = __bytebuf;
 return __prev;
      }


      state_type state() const noexcept { return _M_state; }

    protected:
      int
      sync()
      { return _M_buf && _M_conv_put() && !_M_buf->pubsync() ? 0 : -1; }

      typename _Wide_streambuf::int_type
      overflow(typename _Wide_streambuf::int_type __out)
      {
 if (!_M_buf || !_M_conv_put())
   return _Tr::eof();
 else if (!_Tr::eq_int_type(__out, _Tr::eof()))
   return this->sputc(__out);
 return _Tr::not_eof(__out);
      }

      typename _Wide_streambuf::int_type
      underflow()
      {
 if (!_M_buf)
   return _Tr::eof();

 if (this->gptr() < this->egptr() || (_M_buf && _M_conv_get()))
   return _Tr::to_int_type(*this->gptr());
 else
   return _Tr::eof();
      }

      streamsize
      xsputn(const typename _Wide_streambuf::char_type* __s, streamsize __n)
      {
 if (!_M_buf || __n == 0)
   return 0;
 streamsize __done = 0;
 do
 {
   auto __nn = std::min<streamsize>(this->epptr() - this->pptr(),
        __n - __done);
   _Tr::copy(this->pptr(), __s + __done, __nn);
   this->pbump(__nn);
   __done += __nn;
 } while (__done < __n && _M_conv_put());
 return __done;
      }

    private:

      bool
      _M_conv_get()
      {
 const streamsize __pb1 = this->gptr() - this->eback();
 const streamsize __pb2 = _S_putback_length;
 const streamsize __npb = std::min(__pb1, __pb2);

 _Tr::move(_M_get_area + _S_putback_length - __npb,
    this->gptr() - __npb, __npb);

 streamsize __nbytes = sizeof(_M_get_buf) - _M_unconv;
 __nbytes = std::min(__nbytes, _M_buf->in_avail());
 if (__nbytes < 1)
   __nbytes = 1;
 __nbytes = _M_buf->sgetn(_M_get_buf + _M_unconv, __nbytes);
 if (__nbytes < 1)
   return false;
 __nbytes += _M_unconv;



 _Elem* __outbuf = _M_get_area + _S_putback_length;
 _Elem* __outnext = __outbuf;
 const char* __bnext = _M_get_buf;

 codecvt_base::result __result;
 if (_M_always_noconv)
   __result = codecvt_base::noconv;
 else
   {
     _Elem* __outend = _M_get_area + _S_buffer_length;

     __result = _M_cvt->in(_M_state,
      __bnext, __bnext + __nbytes, __bnext,
      __outbuf, __outend, __outnext);
   }

 if (__result == codecvt_base::noconv)
   {

     auto __get_buf = reinterpret_cast<const _Elem*>(_M_get_buf);
     _Tr::copy(__outbuf, __get_buf, __nbytes);
     _M_unconv = 0;
     return true;
   }

 if ((_M_unconv = _M_get_buf + __nbytes - __bnext))
   char_traits<char>::move(_M_get_buf, __bnext, _M_unconv);

 this->setg(__outbuf, __outbuf, __outnext);

 return __result != codecvt_base::error;
      }


      bool
      _M_put(...)
      { return false; }

      bool
      _M_put(const char* __p, streamsize __n)
      {
 if (_M_buf->sputn(__p, __n) < __n)
   return false;
 return true;
      }


      bool
      _M_conv_put()
      {
 _Elem* const __first = this->pbase();
 const _Elem* const __last = this->pptr();
 const streamsize __pending = __last - __first;

 if (_M_always_noconv)
   return _M_put(__first, __pending);

 char __outbuf[2 * _S_buffer_length];

 const _Elem* __next = __first;
 const _Elem* __start;
 do
   {
     __start = __next;
     char* __outnext = __outbuf;
     char* const __outlast = __outbuf + sizeof(__outbuf);
     auto __result = _M_cvt->out(_M_state, __next, __last, __next,
     __outnext, __outlast, __outnext);
     if (__result == codecvt_base::error)
       return false;
     else if (__result == codecvt_base::noconv)
       return _M_put(__next, __pending);

     if (!_M_put(__outbuf, __outnext - __outbuf))
       return false;
   }
 while (__next != __last && __next != __start);

 if (__next != __last)
   _Tr::move(__first, __next, __last - __next);

 this->pbump(__first - __next);
 return __next != __first;
      }

      streambuf* _M_buf;
      unique_ptr<_Codecvt> _M_cvt;
      state_type _M_state;

      static const streamsize _S_buffer_length = 32;
      static const streamsize _S_putback_length = 3;
      _Elem _M_put_area[_S_buffer_length];
      _Elem _M_get_area[_S_buffer_length];
      streamsize _M_unconv = 0;
      char _M_get_buf[_S_buffer_length-_S_putback_length];
      bool _M_always_noconv;
    };






}
# 44 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/locale" 2 3
# 44 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/iomanip" 2 3

# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/quoted_string.h" 1 3
# 34 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/quoted_string.h" 3






namespace std
{


  namespace __detail {



    template<typename _String, typename _CharT>
      struct _Quoted_string
      {
 static_assert(is_reference<_String>::value
     || is_pointer<_String>::value,
        "String type must be pointer or reference");

 _Quoted_string(_String __str, _CharT __del, _CharT __esc)
 : _M_string(__str), _M_delim{__del}, _M_escape{__esc}
 { }

 _Quoted_string&
 operator=(_Quoted_string&) = delete;

 _String _M_string;
 _CharT _M_delim;
 _CharT _M_escape;
      };
# 91 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/bits/quoted_string.h" 3
    template<typename _CharT, typename _Traits>
      std::basic_ostream<_CharT, _Traits>&
      operator<<(std::basic_ostream<_CharT, _Traits>& __os,
   const _Quoted_string<const _CharT*, _CharT>& __str)
      {
 std::basic_ostringstream<_CharT, _Traits> __ostr;
 __ostr << __str._M_delim;
 for (const _CharT* __c = __str._M_string; *__c; ++__c)
   {
     if (*__c == __str._M_delim || *__c == __str._M_escape)
       __ostr << __str._M_escape;
     __ostr << *__c;
   }
 __ostr << __str._M_delim;

 return __os << __ostr.str();
      }







    template<typename _CharT, typename _Traits, typename _String>
      std::basic_ostream<_CharT, _Traits>&
      operator<<(std::basic_ostream<_CharT, _Traits>& __os,
   const _Quoted_string<_String, _CharT>& __str)
      {
 std::basic_ostringstream<_CharT, _Traits> __ostr;
 __ostr << __str._M_delim;
 for (auto __c : __str._M_string)
   {
     if (__c == __str._M_delim || __c == __str._M_escape)
       __ostr << __str._M_escape;
     __ostr << __c;
   }
 __ostr << __str._M_delim;

 return __os << __ostr.str();
      }





    template<typename _CharT, typename _Traits, typename _Alloc>
      std::basic_istream<_CharT, _Traits>&
      operator>>(std::basic_istream<_CharT, _Traits>& __is,
   const _Quoted_string<basic_string<_CharT, _Traits, _Alloc>&,
          _CharT>& __str)
      {
 _CharT __c;
 __is >> __c;
 if (!__is.good())
   return __is;
 if (__c != __str._M_delim)
   {
     __is.unget();
     __is >> __str._M_string;
     return __is;
   }
 __str._M_string.clear();
 std::ios_base::fmtflags __flags
   = __is.flags(__is.flags() & ~std::ios_base::skipws);
 do
   {
     __is >> __c;
     if (!__is.good())
       break;
     if (__c == __str._M_escape)
       {
  __is >> __c;
  if (!__is.good())
    break;
       }
     else if (__c == __str._M_delim)
       break;
     __str._M_string += __c;
   }
 while (true);
 __is.setf(__flags);

 return __is;
      }
  }


}
# 46 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/iomanip" 2 3



namespace std
{





  struct _Resetiosflags { ios_base::fmtflags _M_mask; };
# 65 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/iomanip" 3
  inline _Resetiosflags
  resetiosflags(ios_base::fmtflags __mask)
  { return { __mask }; }

  template<typename _CharT, typename _Traits>
    inline basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is, _Resetiosflags __f)
    {
      __is.setf(ios_base::fmtflags(0), __f._M_mask);
      return __is;
    }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os, _Resetiosflags __f)
    {
      __os.setf(ios_base::fmtflags(0), __f._M_mask);
      return __os;
    }


  struct _Setiosflags { ios_base::fmtflags _M_mask; };
# 95 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/iomanip" 3
  inline _Setiosflags
  setiosflags(ios_base::fmtflags __mask)
  { return { __mask }; }

  template<typename _CharT, typename _Traits>
    inline basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is, _Setiosflags __f)
    {
      __is.setf(__f._M_mask);
      return __is;
    }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os, _Setiosflags __f)
    {
      __os.setf(__f._M_mask);
      return __os;
    }


  struct _Setbase { int _M_base; };
# 126 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/iomanip" 3
  inline _Setbase
  setbase(int __base)
  { return { __base }; }

  template<typename _CharT, typename _Traits>
    inline basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is, _Setbase __f)
    {
      __is.setf(__f._M_base == 8 ? ios_base::oct :
  __f._M_base == 10 ? ios_base::dec :
  __f._M_base == 16 ? ios_base::hex :
  ios_base::fmtflags(0), ios_base::basefield);
      return __is;
    }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os, _Setbase __f)
    {
      __os.setf(__f._M_base == 8 ? ios_base::oct :
  __f._M_base == 10 ? ios_base::dec :
  __f._M_base == 16 ? ios_base::hex :
  ios_base::fmtflags(0), ios_base::basefield);
      return __os;
    }


  template<typename _CharT>
    struct _Setfill { _CharT _M_c; };
# 163 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/iomanip" 3
  template<typename _CharT>
    inline _Setfill<_CharT>
    setfill(_CharT __c)
    { return { __c }; }

  template<typename _CharT, typename _Traits>
    inline basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is, _Setfill<_CharT> __f)
    {
      __is.fill(__f._M_c);
      return __is;
    }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os, _Setfill<_CharT> __f)
    {
      __os.fill(__f._M_c);
      return __os;
    }


  struct _Setprecision { int _M_n; };
# 194 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/iomanip" 3
  inline _Setprecision
  setprecision(int __n)
  { return { __n }; }

  template<typename _CharT, typename _Traits>
    inline basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is, _Setprecision __f)
    {
      __is.precision(__f._M_n);
      return __is;
    }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os, _Setprecision __f)
    {
      __os.precision(__f._M_n);
      return __os;
    }


  struct _Setw { int _M_n; };
# 224 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/iomanip" 3
  inline _Setw
  setw(int __n)
  { return { __n }; }

  template<typename _CharT, typename _Traits>
    inline basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is, _Setw __f)
    {
      __is.width(__f._M_n);
      return __is;
    }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os, _Setw __f)
    {
      __os.width(__f._M_n);
      return __os;
    }



  template<typename _MoneyT>
    struct _Get_money { _MoneyT& _M_mon; bool _M_intl; };
# 257 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/iomanip" 3
  template<typename _MoneyT>
    inline _Get_money<_MoneyT>
    get_money(_MoneyT& __mon, bool __intl = false)
    { return { __mon, __intl }; }

  template<typename _CharT, typename _Traits, typename _MoneyT>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is, _Get_money<_MoneyT> __f)
    {
      typename basic_istream<_CharT, _Traits>::sentry __cerb(__is, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       typedef istreambuf_iterator<_CharT, _Traits> _Iter;
       typedef money_get<_CharT, _Iter> _MoneyGet;

       const _MoneyGet& __mg = use_facet<_MoneyGet>(__is.getloc());
       __mg.get(_Iter(__is.rdbuf()), _Iter(), __f._M_intl,
         __is, __err, __f._M_mon);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __is._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __is._M_setstate(ios_base::badbit); }
   if (__err)
     __is.setstate(__err);
 }
      return __is;
    }


  template<typename _MoneyT>
    struct _Put_money { const _MoneyT& _M_mon; bool _M_intl; };
# 304 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/iomanip" 3
  template<typename _MoneyT>
    inline _Put_money<_MoneyT>
    put_money(const _MoneyT& __mon, bool __intl = false)
    { return { __mon, __intl }; }

  template<typename _CharT, typename _Traits, typename _MoneyT>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os, _Put_money<_MoneyT> __f)
    {
      typename basic_ostream<_CharT, _Traits>::sentry __cerb(__os);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       typedef ostreambuf_iterator<_CharT, _Traits> _Iter;
       typedef money_put<_CharT, _Iter> _MoneyPut;

       const _MoneyPut& __mp = use_facet<_MoneyPut>(__os.getloc());
       if (__mp.put(_Iter(__os.rdbuf()), __f._M_intl, __os,
      __os.fill(), __f._M_mon).failed())
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __os._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __os._M_setstate(ios_base::badbit); }
   if (__err)
     __os.setstate(__err);
 }
      return __os;
    }

  template<typename _CharT>
    struct _Put_time
    {
      const std::tm* _M_tmb;
      const _CharT* _M_fmt;
    };
# 356 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/iomanip" 3
  template<typename _CharT>
    inline _Put_time<_CharT>
    put_time(const std::tm* __tmb, const _CharT* __fmt)
    { return { __tmb, __fmt }; }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os, _Put_time<_CharT> __f)
    {
      typename basic_ostream<_CharT, _Traits>::sentry __cerb(__os);
      if (__cerb)
        {
          ios_base::iostate __err = ios_base::goodbit;
          try
            {
              typedef ostreambuf_iterator<_CharT, _Traits> _Iter;
              typedef time_put<_CharT, _Iter> _TimePut;

              const _CharT* const __fmt_end = __f._M_fmt +
                _Traits::length(__f._M_fmt);

              const _TimePut& __mp = use_facet<_TimePut>(__os.getloc());
              if (__mp.put(_Iter(__os.rdbuf()), __os, __os.fill(),
                           __f._M_tmb, __f._M_fmt, __fmt_end).failed())
                __err |= ios_base::badbit;
            }
          catch(__cxxabiv1::__forced_unwind&)
            {
              __os._M_setstate(ios_base::badbit);
              throw;
            }
          catch(...)
            { __os._M_setstate(ios_base::badbit); }
          if (__err)
            __os.setstate(__err);
        }
      return __os;
    }

  template<typename _CharT>
    struct _Get_time
    {
      std::tm* _M_tmb;
      const _CharT* _M_fmt;
    };
# 411 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/iomanip" 3
  template<typename _CharT>
    inline _Get_time<_CharT>
    get_time(std::tm* __tmb, const _CharT* __fmt)
    { return { __tmb, __fmt }; }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is, _Get_time<_CharT> __f)
    {
      typename basic_istream<_CharT, _Traits>::sentry __cerb(__is, false);
      if (__cerb)
        {
          ios_base::iostate __err = ios_base::goodbit;
          try
            {
              typedef istreambuf_iterator<_CharT, _Traits> _Iter;
              typedef time_get<_CharT, _Iter> _TimeGet;

              const _CharT* const __fmt_end = __f._M_fmt +
                _Traits::length(__f._M_fmt);

              const _TimeGet& __mg = use_facet<_TimeGet>(__is.getloc());
              __mg.get(_Iter(__is.rdbuf()), _Iter(), __is,
                       __err, __f._M_tmb, __f._M_fmt, __fmt_end);
            }
          catch(__cxxabiv1::__forced_unwind&)
            {
              __is._M_setstate(ios_base::badbit);
              throw;
            }
          catch(...)
            { __is._M_setstate(ios_base::badbit); }
          if (__err)
            __is.setstate(__err);
        }
      return __is;
    }
# 459 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/iomanip" 3
  template<typename _CharT>
    inline auto
    quoted(const _CharT* __string,
    _CharT __delim = _CharT('"'), _CharT __escape = _CharT('\\'))
    {
      return __detail::_Quoted_string<const _CharT*, _CharT>(__string, __delim,
            __escape);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline auto
    quoted(const basic_string<_CharT, _Traits, _Alloc>& __string,
    _CharT __delim = _CharT('"'), _CharT __escape = _CharT('\\'))
    {
      return __detail::_Quoted_string<
 const basic_string<_CharT, _Traits, _Alloc>&, _CharT>(
     __string, __delim, __escape);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline auto
    quoted(basic_string<_CharT, _Traits, _Alloc>& __string,
    _CharT __delim = _CharT('"'), _CharT __escape = _CharT('\\'))
    {
      return __detail::_Quoted_string<
 basic_string<_CharT, _Traits, _Alloc>&, _CharT>(
     __string, __delim, __escape);
    }
# 508 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/iomanip" 3
  extern template ostream& operator<<(ostream&, _Setfill<char>);
  extern template ostream& operator<<(ostream&, _Setiosflags);
  extern template ostream& operator<<(ostream&, _Resetiosflags);
  extern template ostream& operator<<(ostream&, _Setbase);
  extern template ostream& operator<<(ostream&, _Setprecision);
  extern template ostream& operator<<(ostream&, _Setw);
  extern template istream& operator>>(istream&, _Setfill<char>);
  extern template istream& operator>>(istream&, _Setiosflags);
  extern template istream& operator>>(istream&, _Resetiosflags);
  extern template istream& operator>>(istream&, _Setbase);
  extern template istream& operator>>(istream&, _Setprecision);
  extern template istream& operator>>(istream&, _Setw);


  extern template wostream& operator<<(wostream&, _Setfill<wchar_t>);
  extern template wostream& operator<<(wostream&, _Setiosflags);
  extern template wostream& operator<<(wostream&, _Resetiosflags);
  extern template wostream& operator<<(wostream&, _Setbase);
  extern template wostream& operator<<(wostream&, _Setprecision);
  extern template wostream& operator<<(wostream&, _Setw);
  extern template wistream& operator>>(wistream&, _Setfill<wchar_t>);
  extern template wistream& operator>>(wistream&, _Setiosflags);
  extern template wistream& operator>>(wistream&, _Resetiosflags);
  extern template wistream& operator>>(wistream&, _Setbase);
  extern template wistream& operator>>(wistream&, _Setprecision);
  extern template wistream& operator>>(wistream&, _Setw);




}
# 98 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h" 2




namespace ap_private_ops {

              static inline uint32_t Hi_32(uint64_t Value) {
  return static_cast<uint32_t>(Value >> 32);
}


              static inline uint32_t Lo_32(uint64_t Value) {
  return static_cast<uint32_t>(Value);
}

template <int _AP_W>
              inline bool isNegative(const ap_private<_AP_W, false>& a) {
  return false;
}

template <int _AP_W>
              inline bool isNegative(const ap_private<_AP_W, true>& a) {
  enum {
    APINT_BITS_PER_WORD = 64,
    _AP_N = (_AP_W + APINT_BITS_PER_WORD - 1) / APINT_BITS_PER_WORD
  };

  const uint64_t sign_mask = 1ULL << ((_AP_W - 1) % APINT_BITS_PER_WORD);
  return (sign_mask & a.get_pVal(_AP_N - 1)) != 0;
}





              static inline unsigned CountLeadingZeros_32(uint32_t Value) {
  unsigned Count = 0;



  if (Value == 0) return 32;

  Count = __builtin_clz(Value);
# 154 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
  return Count;
}





              static inline unsigned CountLeadingZeros_64(uint64_t Value) {
  unsigned Count = 0;



  if (!Value) return 64;

  Count = __builtin_clzll(Value);
# 198 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
  return Count;
}





              static inline unsigned CountTrailingZeros_64(uint64_t Value) {

  return (Value != 0) ? __builtin_ctzll(Value) : 64;
# 216 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
}



              static inline unsigned CountPopulation_64(uint64_t Value) {

  return __builtin_popcountll(Value);






}

              static inline uint32_t countLeadingOnes_64(uint64_t __V, uint32_t skip) {
  uint32_t Count = 0;
  if (skip) (__V) <<= (skip);
  while (__V && (__V & (1ULL << 63))) {
    Count++;
    (__V) <<= 1;
  }
  return Count;
}

static inline std::string oct2Bin(char oct) {
  switch (oct) {
    case '\0': {
      return "";
    }
    case '.': {
      return ".";
    }
    case '0': {
      return "000";
    }
    case '1': {
      return "001";
    }
    case '2': {
      return "010";
    }
    case '3': {
      return "011";
    }
    case '4': {
      return "100";
    }
    case '5': {
      return "101";
    }
    case '6': {
      return "110";
    }
    case '7': {
      return "111";
    }
  }
  (void) ((!!(0 && "Invalid character in digit string")) || (_assert("0 && \"Invalid character in digit string\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",274),0));
  return "";
}

static inline std::string hex2Bin(char hex) {
  switch (hex) {
    case '\0': {
      return "";
    }
    case '.': {
      return ".";
    }
    case '0': {
      return "0000";
    }
    case '1': {
      return "0001";
    }
    case '2': {
      return "0010";
    }
    case '3': {
      return "0011";
    }
    case '4': {
      return "0100";
    }
    case '5': {
      return "0101";
    }
    case '6': {
      return "0110";
    }
    case '7': {
      return "0111";
    }
    case '8': {
      return "1000";
    }
    case '9': {
      return "1001";
    }
    case 'A':
    case 'a': {
      return "1010";
    }
    case 'B':
    case 'b': {
      return "1011";
    }
    case 'C':
    case 'c': {
      return "1100";
    }
    case 'D':
    case 'd': {
      return "1101";
    }
    case 'E':
    case 'e': {
      return "1110";
    }
    case 'F':
    case 'f': {
      return "1111";
    }
  }
  (void) ((!!(0 && "Invalid character in digit string")) || (_assert("0 && \"Invalid character in digit string\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",341),0));
  return "";
}

static inline uint32_t decode_digit(char cdigit, int radix) {
  uint32_t digit = 0;
  if (radix == 16) {




    if (!(((cdigit) >= '0' && (cdigit) <= '9') || ((cdigit) >= 'a' && (cdigit) <= 'f') || ((cdigit) >= 'A' && (cdigit) <= 'F'))) (void) ((!!(0 && "Invalid hex digit in string")) || (_assert("0 && \"Invalid hex digit in string\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",352),0));
    if (((cdigit) >= '0' && (cdigit) <= '9'))
      digit = cdigit - '0';
    else if (cdigit >= 'a')
      digit = cdigit - 'a' + 10;
    else if (cdigit >= 'A')
      digit = cdigit - 'A' + 10;
    else
      (void) ((!!(0 && "huh? we shouldn't get here")) || (_assert("0 && \"huh? we shouldn't get here\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",360),0));
  } else if (((cdigit) >= '0' && (cdigit) <= '9')) {
    digit = cdigit - '0';
  } else {
    (void) ((!!(0 && "Invalid character in digit string")) || (_assert("0 && \"Invalid character in digit string\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",364),0));
  }


  return digit;
}


static inline std::string parseString(const std::string& input, unsigned char& radix) {
  size_t len = input.length();
  if (len == 0) {
    if (radix == 0) radix = 10;
    return input;
  }

  size_t startPos = 0;

  while (input[startPos] == ' ' && startPos < len) startPos++;
  while (input[len - 1] == ' ' && startPos < len) len--;

  std::string val = input.substr(startPos, len - startPos);

  len = val.length();
  startPos = 0;



  if (len < 2) {
    if (radix == 0) radix = 10;
    return val;
  }

  bool isNegative = false;
  std::string ans;


  if (val[0] == '-') {
    ans = "-";
    ++startPos;
    isNegative = true;
  } else if (val[0] == '+')
    ++startPos;

  if (len - startPos < 2) {
    if (radix == 0) radix = 10;
    return val;
  }

  if (val.substr(startPos, 2) == "0x" || val.substr(startPos, 2) == "0X") {

    radix = 16;
    startPos += 2;
  } else if (val.substr(startPos, 2) == "0b" ||
             val.substr(startPos, 2) == "0B") {

    radix = 2;
    startPos += 2;
  } else if (val.substr(startPos, 2) == "0o" ||
             val.substr(startPos, 2) == "0O") {

    radix = 8;
    startPos += 2;
  } else if (radix == 0) {
    radix = 10;
  }

  int exp = 0;
  if (radix == 10) {


    size_t expPos = val.find('e');
    bool has_exponent = true;
    if (expPos == std::string::npos) expPos = val.find('E');
    if (expPos == std::string::npos) {

      expPos = len;
      has_exponent = false;
    }


    ans += val.substr(startPos, expPos - startPos);
    if (has_exponent) {

      std::istringstream iss(val.substr(expPos + 1, len - expPos - 1));
      iss >> exp;
    }
  } else {

    size_t expPos = val.find('p');
    bool has_exponent = true;
    if (expPos == std::string::npos) expPos = val.find('P');
    if (expPos == std::string::npos) {

      expPos = len;
      has_exponent = false;
    }



    (void) ((!!(startPos <= expPos)) || (_assert("startPos <= expPos","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",463),0));

    for (size_t i = startPos; i < expPos; ++i) {
      if (radix == 16) {
        ans += hex2Bin(val[i]);
      } else if (radix == 8) {
        ans += oct2Bin(val[i]);
      } else {
        ans += val[i];
      }
    }

    radix = 2;
    if (has_exponent) {

      std::istringstream iss(val.substr(expPos + 1, len - expPos - 1));
      iss >> exp;
    }
  }
  if (exp == 0) return ans;

  size_t decPos = ans.find('.');
  if (decPos == std::string::npos) decPos = ans.length();
  if ((int)decPos + exp >= (int)ans.length()) {
    int i = decPos;
    for (; i < (int)ans.length() - 1; ++i) ans[i] = ans[i + 1];
    for (; i < (int)ans.length(); ++i) ans[i] = '0';
    for (; i < (int)decPos + exp; ++i) ans += '0';
    return ans;
  } else if ((int)decPos + exp < (int)isNegative) {
    std::string dupAns = "0.";
    if (ans[0] == '-') dupAns = "-0.";
    for (int i = 0; i < isNegative - (int)decPos - exp; ++i) dupAns += '0';
    for (size_t i = isNegative; i < ans.length(); ++i)
      if (ans[i] != '.') dupAns += ans[i];
    return dupAns;
  }

  if (exp > 0)
    for (size_t i = decPos; i < decPos + exp; ++i) ans[i] = ans[i + 1];
  else {
    if (decPos == ans.length()) ans += ' ';
    for (int i = decPos; i > (int)decPos + exp; --i) ans[i] = ans[i - 1];
  }
  ans[decPos + exp] = '.';
  return ans;
}







              static inline bool sub_1(uint64_t x[], uint32_t len, uint64_t y) {
  for (uint32_t i = 0; i < len; ++i) {
    uint64_t __X = x[i];
    x[i] -= y;
    if (y > __X)
      y = 1;
    else {
      y = 0;
      break;
    }
  }
  return (y != 0);
}





              static inline bool add_1(uint64_t dest[], uint64_t x[], uint32_t len,
                         uint64_t y) {
  for (uint32_t i = 0; i < len; ++i) {
    dest[i] = y + x[i];
    if (dest[i] < y)
      y = 1;
    else {
      y = 0;
      break;
    }
  }
  return (y != 0);
}





              static inline bool add(uint64_t* dest, const uint64_t* x, const uint64_t* y,
                       uint32_t destlen, uint32_t xlen, uint32_t ylen,
                       bool xsigned, bool ysigned) {
  bool carry = false;
  uint32_t len = AESL_std::min(xlen, ylen);
  uint32_t i = 0;
  for (i = 0; i < len && i < destlen; ++i) {
    uint64_t limit =
        AESL_std::min(x[i], y[i]);
    dest[i] = x[i] + y[i] + carry;
    carry = dest[i] < limit || (carry && dest[i] == limit);
  }
  if (xlen > ylen) {
    const uint64_t yext = ysigned && int64_t(y[ylen - 1]) < 0 ? -1 : 0;
    for (i = ylen; i < xlen && i < destlen; i++) {
      uint64_t limit = AESL_std::min(x[i], yext);
      dest[i] = x[i] + yext + carry;
      carry = (dest[i] < limit) || (carry && dest[i] == limit);
    }
  } else if (ylen > xlen) {
    const uint64_t xext = xsigned && int64_t(x[xlen - 1]) < 0 ? -1 : 0;
    for (i = xlen; i < ylen && i < destlen; i++) {
      uint64_t limit = AESL_std::min(xext, y[i]);
      dest[i] = xext + y[i] + carry;
      carry = (dest[i] < limit) || (carry && dest[i] == limit);
    }
  }
  return carry;
}



              static inline bool sub(uint64_t* dest, const uint64_t* x, const uint64_t* y,
                       uint32_t destlen, uint32_t xlen, uint32_t ylen,
                       bool xsigned, bool ysigned) {
  bool borrow = false;
  uint32_t i = 0;
  uint32_t len = AESL_std::min(xlen, ylen);
  for (i = 0; i < len && i < destlen; ++i) {
    uint64_t x_tmp = borrow ? x[i] - 1 : x[i];
    borrow = y[i] > x_tmp || (borrow && x[i] == 0);
    dest[i] = x_tmp - y[i];
  }
  if (xlen > ylen) {
    const uint64_t yext = ysigned && int64_t(y[ylen - 1]) < 0 ? -1 : 0;
    for (i = ylen; i < xlen && i < destlen; i++) {
      uint64_t x_tmp = borrow ? x[i] - 1 : x[i];
      borrow = yext > x_tmp || (borrow && x[i] == 0);
      dest[i] = x_tmp - yext;
    }
  } else if (ylen > xlen) {
    const uint64_t xext = xsigned && int64_t(x[xlen - 1]) < 0 ? -1 : 0;
    for (i = xlen; i < ylen && i < destlen; i++) {
      uint64_t x_tmp = borrow ? xext - 1 : xext;
      borrow = y[i] > x_tmp || (borrow && xext == 0);
      dest[i] = x_tmp - y[i];
    }
  }
  return borrow;
}
# 622 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
              static inline uint64_t mul_1(uint64_t dest[], const uint64_t x[], uint32_t len,
                             uint64_t y) {

  uint64_t ly = y & 0xffffffffULL, hy = (y) >> 32;
  uint64_t carry = 0;

  const uint64_t two_power_32 = 1ULL << 32;

  for (uint32_t i = 0; i < len; ++i) {

    uint64_t lx = x[i] & 0xffffffffULL;
    uint64_t hx = (x[i]) >> 32;




    uint8_t hasCarry = 0;
    dest[i] = carry + lx * ly;

    hasCarry = (dest[i] < carry) ? 1 : 0;
    carry = hx * ly + ((dest[i]) >> 32) + (hasCarry ? two_power_32 : 0);


    hasCarry = (!carry && hasCarry) ? 1 : (!carry ? 2 : 0);

    carry += (lx * hy) & 0xffffffffULL;
    dest[i] = ((carry) << 32) | (dest[i] & 0xffffffffULL);
    carry = (((!carry && hasCarry != 2) || hasCarry == 1) ? two_power_32 : 0) +
            ((carry) >> 32) + ((lx * hy) >> 32) + hx * hy;
  }
  return carry;
}







static inline void mul(uint64_t dest[], const uint64_t x[], uint32_t xlen,
                       const uint64_t y[], uint32_t ylen, uint32_t destlen) {
  (void) ((!!(xlen > 0)) || (_assert("xlen > 0","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",663),0));
  (void) ((!!(ylen > 0)) || (_assert("ylen > 0","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",664),0));
  (void) ((!!(destlen >= xlen + ylen)) || (_assert("destlen >= xlen + ylen","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",665),0));
  if (xlen < destlen) dest[xlen] = mul_1(dest, x, xlen, y[0]);
  for (uint32_t i = 1; i < ylen; ++i) {
    uint64_t ly = y[i] & 0xffffffffULL, hy = (y[i]) >> 32;
    uint64_t carry = 0, lx = 0, hx = 0;
    for (uint32_t j = 0; j < xlen; ++j) {
      lx = x[j] & 0xffffffffULL;
      hx = (x[j]) >> 32;




      uint8_t hasCarry = 0;
      uint64_t resul = carry + lx * ly;
      hasCarry = (resul < carry) ? 1 : 0;
      carry = (hasCarry ? (1ULL << 32) : 0) + hx * ly + ((resul) >> 32);
      hasCarry = (!carry && hasCarry) ? 1 : (!carry ? 2 : 0);
      carry += (lx * hy) & 0xffffffffULL;
      resul = ((carry) << 32) | (resul & 0xffffffffULL);
      if (i + j < destlen) dest[i + j] += resul;
      carry =
          (((!carry && hasCarry != 2) || hasCarry == 1) ? (1ULL << 32) : 0) +
          ((carry) >> 32) + (dest[i + j] < resul ? 1 : 0) + ((lx * hy) >> 32) +
          hx * hy;
    }
    if (i + xlen < destlen) dest[i + xlen] = carry;
  }
}





static inline void KnuthDiv(uint32_t* u, uint32_t* v, uint32_t* q, uint32_t* r,
                            uint32_t m, uint32_t n) {
  (void) ((!!(u && "Must provide dividend")) || (_assert("u && \"Must provide dividend\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",700),0));
  (void) ((!!(v && "Must provide divisor")) || (_assert("v && \"Must provide divisor\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",701),0));
  (void) ((!!(q && "Must provide quotient")) || (_assert("q && \"Must provide quotient\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",702),0));
  (void) ((!!(u != v && u != q && v != q && "Must us different memory")) || (_assert("u != v && u != q && v != q && \"Must us different memory\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",703),0));
  (void) ((!!(n > 1 && "n must be > 1")) || (_assert("n > 1 && \"n must be > 1\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",704),0));



  uint64_t b = uint64_t(1) << 32;
# 726 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
  uint32_t shift = CountLeadingZeros_32(v[n - 1]);
  uint32_t v_carry = 0;
  uint32_t u_carry = 0;
  if (shift) {
    for (uint32_t i = 0; i < m + n; ++i) {
      uint32_t u_tmp = (u[i]) >> (32 - shift);
      u[i] = ((u[i]) << (shift)) | u_carry;
      u_carry = u_tmp;
    }
    for (uint32_t i = 0; i < n; ++i) {
      uint32_t v_tmp = (v[i]) >> (32 - shift);
      v[i] = ((v[i]) << (shift)) | v_carry;
      v_carry = v_tmp;
    }
  }
  u[m + n] = u_carry;
# 751 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
  int j = m;
  do {
# 762 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
    uint64_t dividend = ((uint64_t(u[j + n]) << 32) + u[j + n - 1]);

    uint64_t qp = dividend / v[n - 1];
    uint64_t rp = dividend % v[n - 1];
    if (qp == b || qp * v[n - 2] > b * rp + u[j + n - 2]) {
      qp--;
      rp += v[n - 1];
      if (rp < b && (qp == b || qp * v[n - 2] > b * rp + u[j + n - 2])) qp--;
    }






    bool isNeg = false;
    for (uint32_t i = 0; i < n; ++i) {
      uint64_t u_tmp = uint64_t(u[j + i]) | ((uint64_t(u[j + i + 1])) << 32);
      uint64_t subtrahend = uint64_t(qp) * uint64_t(v[i]);
      bool borrow = subtrahend > u_tmp;




      uint64_t result = u_tmp - subtrahend;
      uint32_t k = j + i;
      u[k++] = (uint32_t)(result & (b - 1));
      u[k++] = (uint32_t)((result) >> 32);
      while (borrow && k <= m + n) {
        borrow = u[k] == 0;
        u[k]--;
        k++;
      }
      isNeg |= borrow;


    }
# 807 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
    if (isNeg) {
      bool carry = true;
      for (uint32_t i = 0; i <= m + n; ++i) {
        u[i] = ~u[i] + carry;
        carry = carry && u[i] == 0;
      }
    }






    q[j] = (uint32_t)qp;
    if (isNeg) {



      q[j]--;



      bool carry = false;
      for (uint32_t i = 0; i < n; i++) {
        uint32_t limit = AESL_std::min(u[j + i], v[i]);
        u[j + i] += v[i] + carry;
        carry = u[j + i] < limit || (carry && u[j + i] == limit);
      }
      u[j + n] += carry;
    }





  } while (--j >= 0);
# 851 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
  if (r) {



    if (shift) {
      uint32_t carry = 0;

      for (int i = n - 1; i >= 0; i--) {
        r[i] = ((u[i]) >> (shift)) | carry;
        carry = (u[i]) << (32 - shift);

      }
    } else {
      for (int i = n - 1; i >= 0; i--) {
        r[i] = u[i];

      }
    }

  }

}

template <int _AP_W, bool _AP_S>
void divide(const ap_private<_AP_W, _AP_S>& LHS, uint32_t lhsWords,
            const ap_private<_AP_W, _AP_S>& RHS, uint32_t rhsWords,
            ap_private<_AP_W, _AP_S>* Quotient,
            ap_private<_AP_W, _AP_S>* Remainder) {
  ap_private<_AP_W, _AP_S> LHS_(LHS);
  LHS_.clearUnusedBits();
  ap_private<_AP_W, _AP_S> RHS_(RHS);
  RHS_.clearUnusedBits();

  (void) ((!!(lhsWords >= rhsWords && "Fractional result")) || (_assert("lhsWords >= rhsWords && \"Fractional result\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",884),0));
  enum { APINT_BITS_PER_WORD = 64 };







  uint64_t mask = ~0ull >> (sizeof(uint32_t) * 8);
  uint32_t n = rhsWords * 2;
  uint32_t m = (lhsWords * 2) - n;



  uint32_t SPACE[128];
  uint32_t* __U = 0;
  uint32_t* __V = 0;
  uint32_t* __Q = 0;
  uint32_t* __R = 0;
  if ((Remainder ? 4 : 3) * n + 2 * m + 1 <= 128) {
    __U = &SPACE[0];
    __V = &SPACE[m + n + 1];
    __Q = &SPACE[(m + n + 1) + n];
    if (Remainder) __R = &SPACE[(m + n + 1) + n + (m + n)];
  } else {
    __U = new uint32_t[m + n + 1];
    __V = new uint32_t[n];
    __Q = new uint32_t[m + n];
    if (Remainder) __R = new uint32_t[n];
  }


  memset(__U, 0, (m + n + 1) * sizeof(uint32_t));
  for (unsigned i = 0; i < lhsWords; ++i) {
    uint64_t tmp = LHS_.get_pVal(i);
    __U[i * 2] = (uint32_t)(tmp & mask);
    __U[i * 2 + 1] = (tmp) >> (sizeof(uint32_t) * 8);
  }
  __U[m + n] = 0;


  memset(__V, 0, (n) * sizeof(uint32_t));
  for (unsigned i = 0; i < rhsWords; ++i) {
    uint64_t tmp = RHS_.get_pVal(i);
    __V[i * 2] = (uint32_t)(tmp & mask);
    __V[i * 2 + 1] = (tmp) >> (sizeof(uint32_t) * 8);
  }


  memset(__Q, 0, (m + n) * sizeof(uint32_t));
  if (Remainder) memset(__R, 0, n * sizeof(uint32_t));





  for (unsigned i = n; i > 0 && __V[i - 1] == 0; i--) {
    n--;
    m++;
  }
  for (unsigned i = m + n; i > 0 && __U[i - 1] == 0; i--) m--;







  (void) ((!!(n != 0 && "Divide by zero?")) || (_assert("n != 0 && \"Divide by zero?\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",953),0));
  if (n == 1) {
    uint32_t divisor = __V[0];
    uint32_t remainder = 0;
    for (int i = m + n - 1; i >= 0; i--) {
      uint64_t partial_dividend = (uint64_t(remainder)) << 32 | __U[i];
      if (partial_dividend == 0) {
        __Q[i] = 0;
        remainder = 0;
      } else if (partial_dividend < divisor) {
        __Q[i] = 0;
        remainder = (uint32_t)partial_dividend;
      } else if (partial_dividend == divisor) {
        __Q[i] = 1;
        remainder = 0;
      } else {
        __Q[i] = (uint32_t)(partial_dividend / divisor);
        remainder = (uint32_t)(partial_dividend - (__Q[i] * divisor));
      }
    }
    if (__R) __R[0] = remainder;
  } else {


    KnuthDiv(__U, __V, __Q, __R, m, n);
  }


  if (Quotient) {

    Quotient->clearUnusedBits();
    if (Quotient->BitWidth != LHS_.BitWidth) {
      if (Quotient->isSingleWord()) Quotient->set_VAL(0);
    } else
      Quotient->clear();



    if (lhsWords == 1) {
      uint64_t tmp =
          uint64_t(__Q[0]) | ((uint64_t(__Q[1])) << (APINT_BITS_PER_WORD / 2));
      Quotient->set_VAL(tmp);
    } else {
      (void) ((!!(!Quotient->isSingleWord() && "Quotient ap_private not large enough")) || (_assert("!Quotient->isSingleWord() && \"Quotient ap_private not large enough\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",997),0));

      for (unsigned i = 0; i < lhsWords; ++i)
        Quotient->set_pVal(
            i, uint64_t(__Q[i * 2]) |
                   ((uint64_t(__Q[i * 2 + 1])) << (APINT_BITS_PER_WORD / 2)));
    }
    Quotient->clearUnusedBits();
  }


  if (Remainder) {

    Remainder->clearUnusedBits();
    if (Remainder->BitWidth != RHS_.BitWidth) {
      if (Remainder->isSingleWord()) Remainder->set_VAL(0);
    } else
      Remainder->clear();



    if (rhsWords == 1) {
      uint64_t tmp =
          uint64_t(__R[0]) | ((uint64_t(__R[1])) << (APINT_BITS_PER_WORD / 2));
      Remainder->set_VAL(tmp);
    } else {
      (void) ((!!(!Remainder->isSingleWord() && "Remainder ap_private not large enough")) || (_assert("!Remainder->isSingleWord() && \"Remainder ap_private not large enough\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",1023),0));

      for (unsigned i = 0; i < rhsWords; ++i)
        Remainder->set_pVal(
            i, uint64_t(__R[i * 2]) |
                   ((uint64_t(__R[i * 2 + 1])) << (APINT_BITS_PER_WORD / 2)));
    }
    Remainder->clearUnusedBits();
  }


  if (__U != &SPACE[0]) {
    delete[] __U;
    delete[] __V;
    delete[] __Q;
    delete[] __R;
  }
}

template <int _AP_W, bool _AP_S>
void divide(const ap_private<_AP_W, _AP_S>& LHS, uint32_t lhsWords,
            uint64_t RHS, ap_private<_AP_W, _AP_S>* Quotient,
            ap_private<_AP_W, _AP_S>* Remainder) {
  ap_private<_AP_W, _AP_S> LHS_(LHS);
  LHS_.clearUnusedBits();

  uint32_t rhsWords = 1;
  (void) ((!!(lhsWords >= rhsWords && "Fractional result")) || (_assert("lhsWords >= rhsWords && \"Fractional result\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",1049),0));
  enum { APINT_BITS_PER_WORD = 64 };







  uint64_t mask = ~0ull >> (sizeof(uint32_t) * 8);
  uint32_t n = 2;
  uint32_t m = (lhsWords * 2) - n;



  uint32_t SPACE[128];
  uint32_t* __U = 0;
  uint32_t* __V = 0;
  uint32_t* __Q = 0;
  uint32_t* __R = 0;
  if ((Remainder ? 4 : 3) * n + 2 * m + 1 <= 128) {
    __U = &SPACE[0];
    __V = &SPACE[m + n + 1];
    __Q = &SPACE[(m + n + 1) + n];
    if (Remainder) __R = &SPACE[(m + n + 1) + n + (m + n)];
  } else {
    __U = new uint32_t[m + n + 1];
    __V = new uint32_t[n];
    __Q = new uint32_t[m + n];
    if (Remainder) __R = new uint32_t[n];
  }


  memset(__U, 0, (m + n + 1) * sizeof(uint32_t));
  for (unsigned i = 0; i < lhsWords; ++i) {
    uint64_t tmp = LHS_.get_pVal(i);
    __U[i * 2] = tmp & mask;
    __U[i * 2 + 1] = (tmp) >> (sizeof(uint32_t) * 8);
  }
  __U[m + n] = 0;


  memset(__V, 0, (n) * sizeof(uint32_t));
  __V[0] = RHS & mask;
  __V[1] = (RHS) >> (sizeof(uint32_t) * 8);


  memset(__Q, 0, (m + n) * sizeof(uint32_t));
  if (Remainder) memset(__R, 0, n * sizeof(uint32_t));





  for (unsigned i = n; i > 0 && __V[i - 1] == 0; i--) {
    n--;
    m++;
  }
  for (unsigned i = m + n; i > 0 && __U[i - 1] == 0; i--) m--;







  (void) ((!!(n != 0 && "Divide by zero?")) || (_assert("n != 0 && \"Divide by zero?\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",1115),0));
  if (n == 1) {
    uint32_t divisor = __V[0];
    uint32_t remainder = 0;
    for (int i = m + n - 1; i >= 0; i--) {
      uint64_t partial_dividend = (uint64_t(remainder)) << 32 | __U[i];
      if (partial_dividend == 0) {
        __Q[i] = 0;
        remainder = 0;
      } else if (partial_dividend < divisor) {
        __Q[i] = 0;
        remainder = partial_dividend;
      } else if (partial_dividend == divisor) {
        __Q[i] = 1;
        remainder = 0;
      } else {
        __Q[i] = partial_dividend / divisor;
        remainder = partial_dividend - (__Q[i] * divisor);
      }
    }
    if (__R) __R[0] = remainder;
  } else {


    KnuthDiv(__U, __V, __Q, __R, m, n);
  }


  if (Quotient) {

    Quotient->clearUnusedBits();
    if (Quotient->BitWidth != LHS_.BitWidth) {
      if (Quotient->isSingleWord()) Quotient->set_VAL(0);
    } else
      Quotient->clear();



    if (lhsWords == 1) {
      uint64_t tmp =
          uint64_t(__Q[0]) | ((uint64_t(__Q[1])) << (APINT_BITS_PER_WORD / 2));
      Quotient->set_VAL(tmp);
    } else {
      (void) ((!!(!Quotient->isSingleWord() && "Quotient ap_private not large enough")) || (_assert("!Quotient->isSingleWord() && \"Quotient ap_private not large enough\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",1159),0));

      for (unsigned i = 0; i < lhsWords; ++i)
        Quotient->set_pVal(
            i, uint64_t(__Q[i * 2]) |
                   ((uint64_t(__Q[i * 2 + 1])) << (APINT_BITS_PER_WORD / 2)));
    }
    Quotient->clearUnusedBits();
  }


  if (Remainder) {

    Remainder->clearUnusedBits();
    if (Remainder->BitWidth != 64 ) {
      if (Remainder->isSingleWord()) Remainder->set_VAL(0);
    } else
      Remainder->clear();



    if (rhsWords == 1) {
      uint64_t tmp =
          uint64_t(__R[0]) | ((uint64_t(__R[1])) << (APINT_BITS_PER_WORD / 2));
      Remainder->set_VAL(tmp);
    } else {
      (void) ((!!(!Remainder->isSingleWord() && "Remainder ap_private not large enough")) || (_assert("!Remainder->isSingleWord() && \"Remainder ap_private not large enough\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",1185),0));

      for (unsigned i = 0; i < rhsWords; ++i)
        Remainder->set_pVal(
            i, uint64_t(__R[i * 2]) |
                   ((uint64_t(__R[i * 2 + 1])) << (APINT_BITS_PER_WORD / 2)));
    }
    Remainder->clearUnusedBits();
  }


  if (__U != &SPACE[0]) {
    delete[] __U;
    delete[] __V;
    delete[] __Q;
    delete[] __R;
  }
}


template <int _AP_W, bool _AP_S, bool _AP_C>
              inline ap_private<_AP_W, _AP_S, _AP_C> lshr(
    const ap_private<_AP_W, _AP_S, _AP_C>& LHS, uint32_t shiftAmt) {
  return LHS.lshr(shiftAmt);
}



template <int _AP_W, bool _AP_S, bool _AP_C>
              inline ap_private<_AP_W, _AP_S, _AP_C> shl(
    const ap_private<_AP_W, _AP_S, _AP_C>& LHS, uint32_t shiftAmt) {
  return LHS.shl(shiftAmt);
}

}





enum {
  MIN_INT_BITS = 1,

  MAX_INT_BITS = (1 << 23) - 1

};
# 1272 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
typedef unsigned long long ap_ulong;
typedef signed long long ap_slong;

template <int _AP_N8, bool _AP_S>
struct valtype;

template <int _AP_N8>
struct valtype<_AP_N8, false> {
  typedef uint64_t Type;
};

template <int _AP_N8>
struct valtype<_AP_N8, true> {
  typedef int64_t Type;
};

template <>
struct valtype<1, false> {
  typedef unsigned char Type;
};
template <>
struct valtype<2, false> {
  typedef unsigned short Type;
};
template <>
struct valtype<3, false> {
  typedef unsigned int Type;
};
template <>
struct valtype<4, false> {
  typedef unsigned int Type;
};
template <>
struct valtype<1, true> {
  typedef signed char Type;
};
template <>
struct valtype<2, true> {
  typedef short Type;
};
template <>
struct valtype<3, true> {
  typedef int Type;
};
template <>
struct valtype<4, true> {
  typedef int Type;
};

template <bool enable>
struct ap_private_enable_if {};
template <>
struct ap_private_enable_if<true> {
  static const bool isValid = true;
};

template<int _WIDTH>
struct logceil {
  static const int val = logceil<(_WIDTH+1)/2>::val + 1;
};
template<>
struct logceil<1> {
  static const int val = -3;
};

template <int _AP_W, bool _AP_S>
class ap_private<_AP_W, _AP_S, true> {

  const static bool valid = ap_private_enable_if<_AP_W <= 64>::isValid;




 public:
  typedef typename valtype<(_AP_W + 7) / 8, _AP_S>::Type ValType;
  typedef ap_private<_AP_W, _AP_S> Type;
  template <int _AP_W2, bool _AP_S2>
  struct RType {
    enum {
      mult_w = _AP_W + _AP_W2,
      mult_s = _AP_S || _AP_S2,
      plus_w =
          ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))) + 1,
      plus_s = _AP_S || _AP_S2,
      minus_w =
          ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))) + 1,
      minus_s = true,
      div_w = _AP_W + _AP_S2,
      div_s = _AP_S || _AP_S2,
      mod_w = ((_AP_W) < (_AP_W2 + (!_AP_S2 && _AP_S)) ? (_AP_W) : (_AP_W2 + (!_AP_S2 && _AP_S))),
      mod_s = _AP_S,
      logic_w = ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))),
      logic_s = _AP_S || _AP_S2
    };
    typedef ap_private<mult_w, mult_s> mult;
    typedef ap_private<plus_w, plus_s> plus;
    typedef ap_private<minus_w, minus_s> minus;
    typedef ap_private<logic_w, logic_s> logic;
    typedef ap_private<div_w, div_s> div;
    typedef ap_private<mod_w, mod_s> mod;
    typedef ap_private<_AP_W, _AP_S> arg1;
    typedef bool reduce;
  };
  enum { APINT_BITS_PER_WORD = sizeof(uint64_t) * 8 };
  enum {
    excess_bits = (_AP_W % APINT_BITS_PER_WORD)
                      ? APINT_BITS_PER_WORD - (_AP_W % APINT_BITS_PER_WORD)
                      : 0
  };
  static const uint64_t mask = ((uint64_t)~0ULL >> (excess_bits));
  static const uint64_t not_mask = ~mask;
  static const uint64_t sign_bit_mask = 1ULL << (APINT_BITS_PER_WORD - 1);
  template <int _AP_W1>
  struct sign_ext_mask {
    static const uint64_t mask = ~0ULL << _AP_W1;
  };
  static const int width = _AP_W;

  enum {
    BitWidth = _AP_W,
    _AP_N = 1,
  };
  ValType VAL;





                void check_canary() {}
                void set_canary() {}


                inline ValType& get_VAL(void) { return VAL; }
                inline ValType get_VAL(void) const { return VAL; }
  inline ValType get_VAL(void) const volatile { return VAL; }

                inline ValType get_cleared_VAL(void)


      __attribute__((no_sanitize("undefined")))

  {
# 1423 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
    enum { excess_bits = (_AP_W % 64) ? 64 - _AP_W % 64 : 0 };
    VAL = (ValType)(
        _AP_S
            ? ((((int64_t)VAL) << (excess_bits)) >> (excess_bits))
            : (excess_bits ? (((uint64_t)VAL) << (excess_bits)) >> (excess_bits)
                           : (uint64_t)VAL));
    return VAL;

  }

                inline ValType get_cleared_VAL(void) const


      __attribute__((no_sanitize("undefined")))

  {
# 1448 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
    enum { excess_bits = (_AP_W % 64) ? 64 - _AP_W % 64 : 0 };
    ValType clearedVAL = (ValType)(
        _AP_S
            ? ((((int64_t)VAL) << (excess_bits)) >> (excess_bits))
            : (excess_bits ? (((uint64_t)VAL) << (excess_bits)) >> (excess_bits)
                           : (uint64_t)VAL));
    return clearedVAL;

  }

  inline void set_VAL(uint64_t value) { VAL = (ValType)value; }
                inline ValType& get_pVal(int i) { return VAL; }
                inline ValType get_pVal(int i) const { return VAL; }
  inline const uint64_t* get_pVal() const {
    (void) ((!!(0 && "invalid usage")) || (_assert("0 && \"invalid usage\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",1462),0));
    return 0;
  }

  inline ValType get_pVal(int i) const volatile { return VAL; }
  inline uint64_t* get_pVal() const volatile {
    (void) ((!!(0 && "invalid usage")) || (_assert("0 && \"invalid usage\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",1468),0));
    return 0;
  }
  inline void set_pVal(int i, uint64_t value) { VAL = (ValType)value; }

                inline uint32_t getBitWidth() const { return BitWidth; }

  template <int _AP_W1, bool _AP_S1>
                ap_private<_AP_W, _AP_S>& operator=(const ap_private<_AP_W1, _AP_S1>& RHS) {
    VAL = (ValType)(RHS.get_cleared_VAL());
    clearUnusedBits();
    return *this;
  }

  template <int _AP_W1, bool _AP_S1>
  ap_private<_AP_W, _AP_S>& operator=(
      const volatile ap_private<_AP_W1, _AP_S1>& RHS) {
    VAL = (ValType)(RHS.get_VAL());
    clearUnusedBits();
    return *this;
  }

  void operator=(const ap_private& RHS) volatile {

    VAL = RHS.get_VAL();
    clearUnusedBits();
  }

                ap_private& operator=(const ap_private& RHS) {

    VAL = RHS.get_VAL();
    clearUnusedBits();
    return *this;
  }

  void operator=(const volatile ap_private& RHS) volatile {

    VAL = RHS.get_VAL();
    clearUnusedBits();
  }

  ap_private& operator=(const volatile ap_private& RHS) {

    VAL = RHS.get_VAL();
    clearUnusedBits();
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
                      inline ap_private& operator=(const _private_range_ref<_AP_W2, _AP_S2>& op2) {
    *this = ap_private<_AP_W2, false>(op2);
    return *this;
  }
# 1531 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
              inline ap_private& operator=(const bool v) { set_canary(); this->VAL = (ValType)v; clearUnusedBits(); check_canary(); return *this; }
              inline ap_private& operator=(const char v) { set_canary(); this->VAL = (ValType)v; clearUnusedBits(); check_canary(); return *this; }
              inline ap_private& operator=(const signed char v) { set_canary(); this->VAL = (ValType)v; clearUnusedBits(); check_canary(); return *this; }
              inline ap_private& operator=(const unsigned char v) { set_canary(); this->VAL = (ValType)v; clearUnusedBits(); check_canary(); return *this; }
              inline ap_private& operator=(const short v) { set_canary(); this->VAL = (ValType)v; clearUnusedBits(); check_canary(); return *this; }
              inline ap_private& operator=(const unsigned short v) { set_canary(); this->VAL = (ValType)v; clearUnusedBits(); check_canary(); return *this; }
              inline ap_private& operator=(const int v) { set_canary(); this->VAL = (ValType)v; clearUnusedBits(); check_canary(); return *this; }
              inline ap_private& operator=(const unsigned int v) { set_canary(); this->VAL = (ValType)v; clearUnusedBits(); check_canary(); return *this; }
              inline ap_private& operator=(const long v) { set_canary(); this->VAL = (ValType)v; clearUnusedBits(); check_canary(); return *this; }
              inline ap_private& operator=(const unsigned long v) { set_canary(); this->VAL = (ValType)v; clearUnusedBits(); check_canary(); return *this; }
              inline ap_private& operator=(const ap_slong v) { set_canary(); this->VAL = (ValType)v; clearUnusedBits(); check_canary(); return *this; }
              inline ap_private& operator=(const ap_ulong v) { set_canary(); this->VAL = (ValType)v; clearUnusedBits(); check_canary(); return *this; }
inline ap_private& operator=(const half v) { set_canary(); this->VAL = (ValType)v; clearUnusedBits(); check_canary(); return *this; }

              inline ap_private& operator=(const float v) { set_canary(); this->VAL = (ValType)v; clearUnusedBits(); check_canary(); return *this; }
              inline ap_private& operator=(const double v) { set_canary(); this->VAL = (ValType)v; clearUnusedBits(); check_canary(); return *this; }



  inline ap_private& operator=(const char* s) {
    ap_private tmp(s);
    operator=(tmp);
    return *this;
  }

 private:
                explicit inline ap_private(uint64_t* val) : VAL(val[0]) {
    set_canary();
    clearUnusedBits();
    check_canary();
  }

                inline bool isSingleWord() const { return true; }

 public:
  inline void fromString(const char* strStart, uint32_t slen, uint8_t radix) {
    bool isNeg = strStart[0] == '-';
    if (isNeg) {
      strStart++;
      slen--;
    }

    if (strStart[0] == '0' && (strStart[1] == 'b' || strStart[1] == 'B')) {

      do { if ((radix != 2)) { fprintf((__acrt_iob_func(2)), "WARNING: " "%s seems to have base %d, but %d given.", strStart, 2, radix); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);
      strStart += 2;
      slen -=2;
    } else if (strStart[0] == '0' && (strStart[1] == 'o' || strStart[1] == 'O')) {

      do { if ((radix != 8)) { fprintf((__acrt_iob_func(2)), "WARNING: " "%s seems to have base %d, but %d given.", strStart, 8, radix); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);
      strStart += 2;
      slen -=2;
    } else if (strStart[0] == '0' && (strStart[1] == 'x' || strStart[1] == 'X')) {

      do { if ((radix != 16)) { fprintf((__acrt_iob_func(2)), "WARNING: " "%s seems to have base %d, but %d given.", strStart, 16, radix); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);
      strStart += 2;
      slen -=2;
    } else if (strStart[0] == '0' && (strStart[1] == 'd' || strStart[1] == 'D')) {

      do { if ((radix != 10)) { fprintf((__acrt_iob_func(2)), "WARNING: " "%s seems to have base %d, but %d given.", strStart, 10, radix); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);
      strStart += 2;
      slen -=2;
    } else if (radix == 0) {

    }


    (void) ((!!((radix == 10 || radix == 8 || radix == 16 || radix == 2) && "Radix should be 2, 8, 10, or 16!")) || (_assert("(radix == 10 || radix == 8 || radix == 16 || radix == 2) && \"Radix should be 2, 8, 10, or 16!\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",1599),0));

    (void) ((!!(strStart && "String is null?")) || (_assert("strStart && \"String is null?\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",1600),0));


    uint64_t tmpVAL = VAL = 0;

    switch (radix) {
      case 2:


        for (; *strStart; ++strStart) {
          (void) ((!!((*strStart == '0' || *strStart == '1') && ("Wrong binary number"))) || (_assert("(*strStart == '0' || *strStart == '1') && (\"Wrong binary number\")","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",1611),0));

          tmpVAL <<= 1;
          tmpVAL |= (*strStart - '0');
        }
        break;
      case 8:






        sscanf(strStart, "%llo", &tmpVAL);


        break;
      case 10:






        sscanf(strStart, "%llu", &tmpVAL);


        break;
      case 16:






        sscanf(strStart, "%llx", &tmpVAL);


        break;
      default:
        (void) ((!!(true && "Unknown radix")) || (_assert("true && \"Unknown radix\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",1650),0));

    }
    VAL = isNeg ? (ValType)(-tmpVAL) : (ValType)(tmpVAL);

    clearUnusedBits();
  }

 private:
  inline ap_private(const std::string& val, uint8_t radix = 2) : VAL(0) {
    (void) ((!!(!val.empty() && "String empty?")) || (_assert("!val.empty() && \"String empty?\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",1660),0));
    set_canary();
    fromString(val.c_str(), val.size(), radix);
    check_canary();
  }

  inline ap_private(const char strStart[], uint32_t slen, uint8_t radix)
      : VAL(0) {
    set_canary();
    fromString(strStart, slen, radix);
    check_canary();
  }

  inline ap_private(uint32_t numWords, const uint64_t bigVal[])
      : VAL(bigVal[0]) {
    set_canary();
    clearUnusedBits();
    check_canary();
  }

 public:
  inline ap_private() {
    set_canary();
    clearUnusedBits();
    check_canary();
  }







                inline ap_private(bool v) : VAL((ValType)v) { set_canary(); clearUnusedBits(); check_canary(); }
                inline ap_private(char v) : VAL((ValType)v) { set_canary(); clearUnusedBits(); check_canary(); }
                inline ap_private(signed char v) : VAL((ValType)v) { set_canary(); clearUnusedBits(); check_canary(); }
                inline ap_private(unsigned char v) : VAL((ValType)v) { set_canary(); clearUnusedBits(); check_canary(); }
                inline ap_private(short v) : VAL((ValType)v) { set_canary(); clearUnusedBits(); check_canary(); }
                inline ap_private(unsigned short v) : VAL((ValType)v) { set_canary(); clearUnusedBits(); check_canary(); }
                inline ap_private(int v) : VAL((ValType)v) { set_canary(); clearUnusedBits(); check_canary(); }
                inline ap_private(unsigned int v) : VAL((ValType)v) { set_canary(); clearUnusedBits(); check_canary(); }
                inline ap_private(long v) : VAL((ValType)v) { set_canary(); clearUnusedBits(); check_canary(); }
                inline ap_private(unsigned long v) : VAL((ValType)v) { set_canary(); clearUnusedBits(); check_canary(); }
                inline ap_private(ap_slong v) : VAL((ValType)v) { set_canary(); clearUnusedBits(); check_canary(); }
                inline ap_private(ap_ulong v) : VAL((ValType)v) { set_canary(); clearUnusedBits(); check_canary(); }
  inline ap_private(half v) : VAL((ValType)v) { set_canary(); clearUnusedBits(); check_canary(); }
                inline ap_private(float v) : VAL((ValType)v) { set_canary(); clearUnusedBits(); check_canary(); }
                inline ap_private(double v) : VAL((ValType)v) { set_canary(); clearUnusedBits(); check_canary(); }


  template <int _AP_W1, bool _AP_S1, bool _AP_OPT>
                inline ap_private(const ap_private<_AP_W1, _AP_S1, _AP_OPT>& that)
      : VAL((ValType)that.get_VAL()) {
    set_canary();
    clearUnusedBits();
    check_canary();
  }

  template <int _AP_W1, bool _AP_S1, bool _AP_OPT>
                inline ap_private(const volatile ap_private<_AP_W1, _AP_S1, _AP_OPT>& that)
      : VAL((ValType)that.get_VAL()) {
    set_canary();
    clearUnusedBits();
    check_canary();
  }

  explicit inline ap_private(const char* val) {
    set_canary();
    unsigned char radix = 10;
    std::string str = ap_private_ops::parseString(val, radix);
    std::string::size_type pos = str.find('.');

    if (pos != std::string::npos) str = str.substr(pos);

    ap_private<_AP_W, _AP_S> ap_private_val(str, radix);
    operator=(ap_private_val);
    check_canary();
  }

  inline ap_private(const char* val, signed char rd) {
    set_canary();
    unsigned char radix = rd;
    std::string str = ap_private_ops::parseString(val, radix);
    std::string::size_type pos = str.find('.');

    if (pos != std::string::npos) str = str.substr(pos);

    ap_private<_AP_W, _AP_S> ap_private_val(str, radix);
    operator=(ap_private_val);
    check_canary();
  }

  inline ~ap_private() = default;


                inline bool isNegative() const {

    const uint64_t sign_mask = 1ULL << (_AP_W - 1);
    return _AP_S && (sign_mask & VAL);
  }

                inline bool isPositive() const { return !isNegative(); }

                inline bool isStrictlyPositive() const { return !isNegative() && VAL != 0; }

                inline bool isAllOnesValue() const { return (mask & VAL) == mask; }

                inline bool operator==(const ap_private<_AP_W, _AP_S>& RHS) const {
    return get_cleared_VAL() == RHS.get_cleared_VAL();
  }
                inline bool operator==(const ap_private<_AP_W, !_AP_S>& RHS) const {
    return (uint64_t)get_cleared_VAL() == (uint64_t)RHS.get_cleared_VAL();
  }

                inline bool operator==(uint64_t Val) const {
    return ((uint64_t)get_cleared_VAL() == Val);
  }
                inline bool operator!=(uint64_t Val) const {
    return ((uint64_t)get_cleared_VAL() != Val);
  }
                inline bool operator!=(const ap_private<_AP_W, _AP_S>& RHS) const {
    return get_cleared_VAL() != RHS.get_cleared_VAL();
  }
                inline bool operator!=(const ap_private<_AP_W, !_AP_S>& RHS) const {
    return (uint64_t)get_cleared_VAL() != (uint64_t)RHS.get_cleared_VAL();
  }


                const ap_private operator++(int) {
    ap_private orig(*this);
    VAL++;
    clearUnusedBits();
    return orig;
  }


                const ap_private operator++() {
    ++VAL;
    clearUnusedBits();
    return *this;
  }


                const ap_private operator--(int) {
    ap_private orig(*this);
    --VAL;
    clearUnusedBits();
    return orig;
  }


                const ap_private operator--() {
    --VAL;
    clearUnusedBits();
    return *this;
  }


                inline ap_private<_AP_W + !_AP_S, true> operator~() const {
    ap_private<_AP_W + !_AP_S, true> Result(*this);
    Result.flip();
    return Result;
  }


                inline typename RType<1, false>::minus operator-() const {
    return ap_private<1, false>(0) - (*this);
  }


                inline bool operator!() const { return !get_cleared_VAL(); }

  inline std::string toString(uint8_t radix, bool wantSigned) const;
  inline std::string toStringUnsigned(uint8_t radix = 10) const {
    return toString(radix, false);
  }
  inline std::string toStringSigned(uint8_t radix = 10) const {
    return toString(radix, true);
  }
  inline void clear() { VAL = 0; }
  inline ap_private& clear(uint32_t bitPosition) {
    VAL &= ~(1ULL << (bitPosition));
    clearUnusedBits();
    return *this;
  }

                inline ap_private ashr(uint32_t shiftAmt) const {
    if (_AP_S)
      return ap_private((shiftAmt == BitWidth) ? 0
                                               : ((int64_t)get_cleared_VAL()) >> (shiftAmt));
    else
      return ap_private((shiftAmt == BitWidth) ? 0
                                               : ((uint64_t)get_cleared_VAL()) >> (shiftAmt));
  }


                inline ap_private lshr(uint32_t shiftAmt) const {
    return ap_private((shiftAmt == BitWidth)
                          ? ap_private(0)
                          : ap_private((get_cleared_VAL() & mask) >> (shiftAmt)));
  }

                inline ap_private shl(uint32_t shiftAmt) const


      __attribute__((no_sanitize("undefined")))

  {
    if (shiftAmt > BitWidth) {
      if (!isNegative())
        return ap_private(0);
      else
        return ap_private(-1);
    }
    if (shiftAmt == BitWidth)
      return ap_private(0);
    else
      return ap_private(((uint64_t)get_cleared_VAL()) << (shiftAmt));


  }

                inline int64_t getSExtValue() const { return get_cleared_VAL(); }


                inline uint64_t getZExtValue() const { return get_cleared_VAL() & mask; }

  template <int _AP_W2, bool _AP_S2>
                      inline ap_private(const _private_range_ref<_AP_W2, _AP_S2>& ref) :VAL((ValType)ref.get()){
    set_canary();
    *this = ref.get();
    check_canary();
  }

  template <int _AP_W2, bool _AP_S2>
                      inline ap_private(const _private_bit_ref<_AP_W2, _AP_S2>& ref) {
    set_canary();
    *this = ((uint64_t)(bool)ref);
    check_canary();
  }
# 1926 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
  inline void write(const ap_private<_AP_W, _AP_S>& op2) volatile {
    *this = (op2);
  }



                inline operator ValType() const { return get_cleared_VAL(); }

                inline int to_uchar() const { return (unsigned char)get_cleared_VAL(); }

                inline int to_char() const { return (signed char)get_cleared_VAL(); }

                inline int to_ushort() const { return (unsigned short)get_cleared_VAL(); }

                inline int to_short() const { return (short)get_cleared_VAL(); }

                inline int to_int() const {

    return (int)get_cleared_VAL();
  }

                inline unsigned to_uint() const { return (unsigned)get_cleared_VAL(); }

                inline long to_long() const { return (long)get_cleared_VAL(); }

                inline unsigned long to_ulong() const { return (unsigned long)get_cleared_VAL(); }

                inline ap_slong to_int64() const { return (ap_slong)get_cleared_VAL(); }

                inline ap_ulong to_uint64() const { return (ap_ulong)get_cleared_VAL(); }

                inline double to_double() const {
    if (isNegative())
      return roundToDouble(true);
    else
      return roundToDouble(false);
  }

                inline unsigned length() const { return _AP_W; }

                inline bool isMinValue() const { return get_cleared_VAL() == 0; }
  template <int _AP_W1, bool _AP_S1>
                inline ap_private& operator&=(const ap_private<_AP_W1, _AP_S1>& RHS) {
    VAL = (ValType)(((uint64_t)VAL) & RHS.get_VAL());
    clearUnusedBits();
    return *this;
  }

  template <int _AP_W1, bool _AP_S1>
                inline ap_private& operator|=(const ap_private<_AP_W1, _AP_S1>& RHS) {
    VAL = (ValType)(((uint64_t)VAL) | RHS.get_VAL());
    clearUnusedBits();
    return *this;
  }

  template <int _AP_W1, bool _AP_S1>
                inline ap_private& operator^=(const ap_private<_AP_W1, _AP_S1>& RHS) {
    VAL = (ValType)(((uint64_t)VAL) ^ RHS.get_VAL());
    clearUnusedBits();
    return *this;
  }

  template <int _AP_W1, bool _AP_S1>
                inline ap_private& operator*=(const ap_private<_AP_W1, _AP_S1>& RHS) {
    VAL = (ValType)(((uint64_t)get_cleared_VAL()) * RHS.get_cleared_VAL());
    clearUnusedBits();
    return *this;
  }

  template <int _AP_W1, bool _AP_S1>
                inline ap_private& operator+=(const ap_private<_AP_W1, _AP_S1>& RHS) {
    VAL = (ValType)(((uint64_t)get_cleared_VAL()) + RHS.get_cleared_VAL());
    clearUnusedBits();
    return *this;
  }

  template <int _AP_W1, bool _AP_S1>
                inline ap_private& operator-=(const ap_private<_AP_W1, _AP_S1>& RHS) {
    VAL = (ValType)(((uint64_t)get_cleared_VAL()) - RHS.get_cleared_VAL());
    clearUnusedBits();
    return *this;
  }

  template <int _AP_W1, bool _AP_S1>
                inline typename RType<_AP_W1, _AP_S1>::logic operator&(
      const ap_private<_AP_W1, _AP_S1>& RHS) const {
    if (RType<_AP_W1, _AP_S1>::logic_w <= 64) {
      typename RType<_AP_W1, _AP_S1>::logic Ret(((uint64_t)get_cleared_VAL()) &
                                                RHS.get_cleared_VAL());
      return Ret;
    } else {
      typename RType<_AP_W1, _AP_S1>::logic Ret = *this;
      return Ret & RHS;
    }
  }

  template <int _AP_W1, bool _AP_S1>
                inline typename RType<_AP_W1, _AP_S1>::logic operator^(
      const ap_private<_AP_W1, _AP_S1>& RHS) const {
    if (RType<_AP_W1, _AP_S1>::logic_w <= 64) {
      typename RType<_AP_W1, _AP_S1>::logic Ret(((uint64_t)get_cleared_VAL()) ^
                                                RHS.get_cleared_VAL());
      return Ret;
    } else {
      typename RType<_AP_W1, _AP_S1>::logic Ret = *this;
      return Ret ^ RHS;
    }
  }

  template <int _AP_W1, bool _AP_S1>
                inline typename RType<_AP_W1, _AP_S1>::logic operator|(
      const ap_private<_AP_W1, _AP_S1>& RHS) const {
    if (RType<_AP_W1, _AP_S1>::logic_w <= 64) {
      typename RType<_AP_W1, _AP_S1>::logic Ret(((uint64_t)get_cleared_VAL()) |
                                                RHS.get_cleared_VAL());
      return Ret;
    } else {
      typename RType<_AP_W1, _AP_S1>::logic Ret = *this;
      return Ret | RHS;
    }
  }

                inline ap_private And(const ap_private& RHS) const {
    return ap_private(get_cleared_VAL() & RHS.get_cleared_VAL());
  }

                inline ap_private Or(const ap_private& RHS) const {
    return ap_private(get_cleared_VAL() | RHS.get_cleared_VAL());
  }

                inline ap_private Xor(const ap_private& RHS) const {
    return ap_private(get_cleared_VAL() ^ RHS.get_cleared_VAL());
  }

  template <int _AP_W1, bool _AP_S1>
                inline typename RType<_AP_W1, _AP_S1>::mult operator*(
      const ap_private<_AP_W1, _AP_S1>& RHS) const {
    if (RType<_AP_W1, _AP_S1>::mult_w <= 64) {
      typename RType<_AP_W1, _AP_S1>::mult Result(((uint64_t)VAL) *
                                                  RHS.get_VAL());
      return Result;
    } else {
      typename RType<_AP_W1, _AP_S1>::mult Result(*this);
      Result *= RHS;
      return Result;
    }
  }

                inline ap_private Mul(const ap_private& RHS) const {
    return ap_private(VAL * RHS.get_VAL());
  }

                inline ap_private Add(const ap_private& RHS) const {
    return ap_private(VAL + RHS.get_VAL());
  }

                inline ap_private Sub(const ap_private& RHS) const {
    return ap_private(VAL - RHS.get_VAL());
  }

                inline ap_private& operator&=(uint64_t RHS) {
    VAL &= (ValType)RHS;
    clearUnusedBits();
    return *this;
  }
                inline ap_private& operator|=(uint64_t RHS) {
    VAL |= (ValType)RHS;
    clearUnusedBits();
    return *this;
  }
                inline ap_private& operator^=(uint64_t RHS) {
    VAL ^= (ValType)RHS;
    clearUnusedBits();
    return *this;
  }
                inline ap_private& operator*=(uint64_t RHS) {
    VAL *= (ValType)RHS;
    clearUnusedBits();
    return *this;
  }
                inline ap_private& operator+=(uint64_t RHS) {
    VAL += (ValType)RHS;
    clearUnusedBits();
    return *this;
  }
                inline ap_private& operator-=(uint64_t RHS) {
    VAL -= (ValType)RHS;
    clearUnusedBits();
    return *this;
  }
# 2131 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
  inline ap_private& operator &=(int64_t RHS) { VAL &= (ValType)RHS; clearUnusedBits(); return *this; } inline ap_private& operator |=(int64_t RHS) { VAL |= (ValType)RHS; clearUnusedBits(); return *this; } inline ap_private& operator ^=(int64_t RHS) { VAL ^= (ValType)RHS; clearUnusedBits(); return *this; } inline ap_private& operator *=(int64_t RHS) { VAL *= (ValType)RHS; clearUnusedBits(); return *this; } inline ap_private& operator +=(int64_t RHS) { VAL += (ValType)RHS; clearUnusedBits(); return *this; } inline ap_private& operator -=(int64_t RHS) { VAL -= (ValType)RHS; clearUnusedBits(); return *this; }
# 2142 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
                inline bool isMinSignedValue() const {

    const uint64_t min_mask = ~(~0ULL << (_AP_W - 1));
    return BitWidth == 1 ? get_cleared_VAL() == 1
                         : (ap_private_ops::isNegative<_AP_W>(*this) &&
                            ((min_mask & get_cleared_VAL()) == 0));
  }

  template <int _AP_W1, bool _AP_S1>
                inline typename RType<_AP_W1, _AP_S1>::plus operator+(
      const ap_private<_AP_W1, _AP_S1>& RHS) const {
    if (RType<_AP_W1, _AP_S1>::plus_w <= 64)
      return typename RType<_AP_W1, _AP_S1>::plus(
          RType<_AP_W1, _AP_S1>::plus_s
              ? int64_t(((uint64_t)get_cleared_VAL()) + RHS.get_cleared_VAL())
              : uint64_t(((uint64_t)get_cleared_VAL()) + RHS.get_cleared_VAL()));
    typename RType<_AP_W1, _AP_S1>::plus Result = RHS;
    Result += get_cleared_VAL();
    return Result;
  }

  template <int _AP_W1, bool _AP_S1>
                inline typename RType<_AP_W1, _AP_S1>::minus operator-(
      const ap_private<_AP_W1, _AP_S1>& RHS) const {
    if (RType<_AP_W1, _AP_S1>::minus_w <= 64)
      return typename RType<_AP_W1, _AP_S1>::minus(
          int64_t(((uint64_t)get_cleared_VAL()) - RHS.get_cleared_VAL()));
    typename RType<_AP_W1, _AP_S1>::minus Result = *this;
    Result -= RHS;
    return Result;
  }

                inline uint32_t countPopulation() const {
    return ap_private_ops::CountPopulation_64(get_cleared_VAL());
  }
                inline uint32_t countLeadingZeros() const {
    int remainder = BitWidth % 64;
    int excessBits = (64 - remainder) % 64;
    uint32_t Count = ap_private_ops::CountLeadingZeros_64(get_cleared_VAL());
    if (Count) Count -= excessBits;
    return AESL_std::min(Count, (uint32_t)_AP_W);
  }
                inline uint32_t countLeadingOnes() const {
    int remainder = BitWidth % 64;
    int excessBits = (64 - remainder) % 64;
    uint32_t Count = ap_private_ops::countLeadingOnes_64(get_cleared_VAL(), 0);
    if (Count) Count -= excessBits;
    return AESL_std::min(Count, (uint32_t)_AP_W);
  }


                inline ap_private<_AP_W, _AP_S> getHiBits(uint32_t numBits) const {
    ap_private<_AP_W, _AP_S> ret(*this);
    ret = (ret) >> (BitWidth - numBits);
    return ret;
  }


                inline ap_private<_AP_W, _AP_S> getLoBits(uint32_t numBits) const {
    ap_private<_AP_W, _AP_S> ret(((uint64_t)VAL) << (BitWidth - numBits));
    ret = (ret) >> (BitWidth - numBits);
    return ret;


  }

  inline ap_private<_AP_W, _AP_S>& set(uint32_t bitPosition) {

    VAL |= (1ULL << (bitPosition));
    clearUnusedBits();
    return *this;
  }

  inline void set() {
    VAL = (ValType)~0ULL;
    clearUnusedBits();
  }

  template <int _AP_W3>
  inline void set(const ap_private<_AP_W3, false>& val) {
    operator=(ap_private<_AP_W3, _AP_S>(val));
  }

  inline void set(const ap_private& val) { operator=(val); }

                inline void clearUnusedBits(void)


      __attribute__((no_sanitize("undefined")))

  {
# 2241 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
    enum { excess_bits = (_AP_W % 64) ? 64 - _AP_W % 64 : 0 };
    VAL = (ValType)(
        _AP_S
            ? ((((int64_t)VAL) << (excess_bits)) >> (excess_bits))
            : (excess_bits ? (((uint64_t)VAL) << (excess_bits)) >> (excess_bits)
                           : (uint64_t)VAL));

  }

  inline void clearUnusedBits(void) volatile


      __attribute__((no_sanitize("undefined")))

  {
    enum { excess_bits = (_AP_W % 64) ? 64 - _AP_W % 64 : 0 };
    VAL = (ValType)(
        _AP_S
            ? ((((int64_t)VAL) << (excess_bits)) >> (excess_bits))
            : (excess_bits ? (((uint64_t)VAL) << (excess_bits)) >> (excess_bits)
                           : (uint64_t)VAL));
  }

  inline void clearUnusedBitsToZero(void) {
    enum { excess_bits = (_AP_W % 64) ? 64 - _AP_W % 64 : 0 };
    static uint64_t mask = ~0ULL >> (excess_bits);
    VAL &= mask;
  }

  inline ap_private udiv(const ap_private& RHS) const {
    ap_private<_AP_W, _AP_S> LHS_(*this);
    LHS_.clearUnusedBits();
    ap_private RHS_(RHS);
    RHS_.clearUnusedBits();

    return ap_private((uint64_t)LHS_.get_VAL() / RHS_.get_VAL());
  }



  inline ap_private sdiv(const ap_private& RHS) const {
    ap_private<_AP_W, _AP_S> LHS_(*this);
    LHS_.clearUnusedBits();
    ap_private RHS_(RHS);
    RHS_.clearUnusedBits();

    if (LHS_.isNegative())
      if (RHS_.isNegative())
        return ((uint64_t)(0 - LHS_)) / (uint64_t)(0 - RHS_);
      else
        return 0 - ((uint64_t)(0 - LHS_) / (uint64_t)(RHS_));
    else if (RHS_.isNegative())
      return 0 - (LHS_.udiv((ap_private)(0 - RHS_)));
    return LHS_.udiv(RHS_);
  }

  template <bool _AP_S2>
  inline ap_private urem(const ap_private<_AP_W, _AP_S2>& RHS) const {
    ap_private<_AP_W, _AP_S> LHS_(*this);
    LHS_.clearUnusedBits();
    ap_private<_AP_W, _AP_S2> RHS_(RHS);
    RHS_.clearUnusedBits();

    (void) ((!!(RHS_.get_VAL() != 0 && "Divide by 0")) || (_assert("RHS_.get_VAL() != 0 && \"Divide by 0\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",2304),0));
    return ap_private(((uint64_t)LHS_.get_VAL()) % ((uint64_t)RHS_.get_VAL()));
  }



  template <bool _AP_S2>
  inline ap_private srem(const ap_private<_AP_W, _AP_S2>& RHS) const {
    ap_private<_AP_W, _AP_S> LHS_(*this);
    LHS_.clearUnusedBits();
    ap_private<_AP_W, _AP_S2> RHS_(RHS);
    RHS_.clearUnusedBits();

    if (LHS_.isNegative()) {
      ap_private lhs = 0 - LHS_;
      if (RHS_.isNegative()) {
        ap_private rhs = 0 - RHS_;
        return 0 - (lhs.urem(rhs));
      } else
        return 0 - (lhs.urem(RHS));
    } else if (RHS_.isNegative()) {
      ap_private rhs = 0 - RHS_;
      return LHS_.urem(rhs);
    }
    return LHS_.urem(RHS_);
  }

  template <int _AP_W1, bool _AP_S1>
                inline bool eq(const ap_private<_AP_W1, _AP_S1>& RHS) const {
    return (*this) == RHS;
  }

  template <int _AP_W1, bool _AP_S1>
                inline bool ne(const ap_private<_AP_W1, _AP_S1>& RHS) const {
    return !((*this) == RHS);
  }





  template <int _AP_W1, bool _AP_S1>
                inline bool ult(const ap_private<_AP_W1, _AP_S1>& RHS) const {
    if (_AP_W1 <= 64) {
      uint64_t lhsZext = ((uint64_t(VAL)) << (64 - _AP_W)) >> (64 - _AP_W);
      uint64_t rhsZext =
          ((uint64_t(RHS.get_VAL())) << (64 - _AP_W1)) >> (64 - _AP_W1);
      return lhsZext < rhsZext;
    } else
      return RHS.uge(*this);
  }





  template <int _AP_W1, bool _AP_S1>
                inline bool slt(const ap_private<_AP_W1, _AP_S1>& RHS) const


      __attribute__((no_sanitize("undefined")))

  {
    if (_AP_W1 <= 64) {
      int64_t lhsSext = ( int64_t ((uint64_t(VAL)) << (64 - _AP_W)) ) >> (64 - _AP_W);
      int64_t rhsSext =
          ( int64_t ((uint64_t(RHS.get_VAL())) << (64 - _AP_W1)) ) >> (64 - _AP_W1);
      return lhsSext < rhsSext;
    } else
      return RHS.sge(*this);
  }





  template <int _AP_W1, bool _AP_S1>
                inline bool ule(const ap_private<_AP_W1, _AP_S1>& RHS) const {
    return ult(RHS) || eq(RHS);
  }





  template <int _AP_W1, bool _AP_S1>
                inline bool sle(const ap_private<_AP_W1, _AP_S1>& RHS) const {
    return slt(RHS) || eq(RHS);
  }





  template <int _AP_W1, bool _AP_S1>
                inline bool ugt(const ap_private<_AP_W1, _AP_S1>& RHS) const {
    return !ult(RHS) && !eq(RHS);
  }





  template <int _AP_W1, bool _AP_S1>
                inline bool sgt(const ap_private<_AP_W1, _AP_S1>& RHS) const {
    return !slt(RHS) && !eq(RHS);
  }





  template <int _AP_W1, bool _AP_S1>
                inline bool uge(const ap_private<_AP_W1, _AP_S1>& RHS) const {
    return !ult(RHS);
  }





  template <int _AP_W1, bool _AP_S1>
                inline bool sge(const ap_private<_AP_W1, _AP_S1>& RHS) const {
    return !slt(RHS);
  }

                inline ap_private abs() const {
    if (isNegative()) return -(*this);
    return *this;
  }

                inline ap_private<_AP_W, false> get() const {
    ap_private<_AP_W, false> ret(*this);
    return ret;
  }

                inline static uint32_t getBitsNeeded(const char* str, uint32_t slen,
                                       uint8_t radix) {
    return _AP_W;
  }

                inline uint32_t getActiveBits() const {
    uint32_t bits = _AP_W - countLeadingZeros();
    return bits ? bits : 1;
  }

                inline double roundToDouble(bool isSigned = false) const {
    ValType val = get_cleared_VAL();
    return isSigned ? double((int64_t)val) : double((uint64_t)val);
  }



  inline ap_private& reverse() {
    for (int i = 0; i < _AP_W / 2; ++i) {
      bool tmp = operator[](i);
      if (operator[](_AP_W - 1 - i))
        set(i);
      else
        clear(i);
      if (tmp)
        set(_AP_W - 1 - i);
      else
        clear(_AP_W - 1 - i);
    }
    clearUnusedBits();
    return *this;
  }


                inline bool iszero() const { return isMinValue(); }

                inline bool to_bool() const { return !iszero(); }


                inline bool sign() const {
    if (isNegative()) return true;
    return false;
  }


  inline void invert(int i) {
    (void) ((!!(i >= 0 && "Attempting to read bit with negative index")) || (_assert("i >= 0 && \"Attempting to read bit with negative index\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",2486),0));
    (void) ((!!(i < _AP_W && "Attempting to read bit beyond MSB")) || (_assert("i < _AP_W && \"Attempting to read bit beyond MSB\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",2487),0));
    flip(i);
  }


  inline bool test(int i) const {
    (void) ((!!(i >= 0 && "Attempting to read bit with negative index")) || (_assert("i >= 0 && \"Attempting to read bit with negative index\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",2493),0));
    (void) ((!!(i < _AP_W && "Attempting to read bit beyond MSB")) || (_assert("i < _AP_W && \"Attempting to read bit beyond MSB\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",2494),0));
    return operator[](i);
  }



  inline void lrotate(int n) {
    (void) ((!!(n >= 0 && "Attempting to shift negative index")) || (_assert("n >= 0 && \"Attempting to shift negative index\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",2501),0));
    (void) ((!!(n < _AP_W && "Shift value larger than bit width")) || (_assert("n < _AP_W && \"Shift value larger than bit width\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",2502),0));
    operator=(shl(n) | lshr(_AP_W - n));
  }



  inline void rrotate(int n) {
    (void) ((!!(n >= 0 && "Attempting to shift negative index")) || (_assert("n >= 0 && \"Attempting to shift negative index\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",2509),0));
    (void) ((!!(n < _AP_W && "Shift value larger than bit width")) || (_assert("n < _AP_W && \"Shift value larger than bit width\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",2510),0));
    operator=(lshr(n) | shl(_AP_W - n));
  }


                      inline void set(int i, bool v) {

    (void) ((!!(i >= 0 && "Attempting to write bit with negative index")) || (_assert("i >= 0 && \"Attempting to write bit with negative index\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",2517),0));
    (void) ((!!(i < _AP_W && "Attempting to write bit beyond MSB")) || (_assert("i < _AP_W && \"Attempting to write bit beyond MSB\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",2518),0));

    v ? set(i) : clear(i);
  }


                      inline void set_bit(int i, bool v) {

    (void) ((!!(i >= 0 && "Attempting to write bit with negative index")) || (_assert("i >= 0 && \"Attempting to write bit with negative index\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",2526),0));
    (void) ((!!(i < _AP_W && "Attempting to write bit beyond MSB")) || (_assert("i < _AP_W && \"Attempting to write bit beyond MSB\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",2527),0));

    v ? set(i) : clear(i);
  }


                      inline bool get_bit(int i) const {

    (void) ((!!(i >= 0 && "Attempting to read bit with negative index")) || (_assert("i >= 0 && \"Attempting to read bit with negative index\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",2535),0));
    (void) ((!!(i < _AP_W && "Attempting to read bit beyond MSB")) || (_assert("i < _AP_W && \"Attempting to read bit beyond MSB\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",2536),0));

    return (((1ULL << i) & get_cleared_VAL()) != 0);
  }


                inline ap_private& flip() {
    VAL = (ValType)((~0ULL ^ get_cleared_VAL()) & mask);
    clearUnusedBits();
    return *this;
  }


  inline ap_private& flip(uint32_t bitPosition) {
    (void) ((!!(bitPosition < BitWidth && "Out of the bit-width range!")) || (_assert("bitPosition < BitWidth && \"Out of the bit-width range!\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",2550),0));
    set_bit(bitPosition, !get_bit(bitPosition));
    return *this;
  }


                inline void b_not() { flip(); }
# 2575 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
  template <int _AP_W2, bool _AP_S2>
  inline typename RType<_AP_W2, _AP_S2>::div operator/(
      const ap_private<_AP_W2, _AP_S2>& op) const {
    ap_private<((_AP_W + (_AP_S || _AP_S2)) > (_AP_W2 + (_AP_S || _AP_S2)) ? (_AP_W + (_AP_S || _AP_S2)) : (_AP_W2 + (_AP_S || _AP_S2))),
               (_AP_W > _AP_W2 ? _AP_S
                               : (_AP_W2 > _AP_W ? _AP_S2 : _AP_S || _AP_S2))>
        lhs = *this;
    ap_private<((_AP_W + (_AP_S || _AP_S2)) > (_AP_W2 + (_AP_S || _AP_S2)) ? (_AP_W + (_AP_S || _AP_S2)) : (_AP_W2 + (_AP_S || _AP_S2))),
               (_AP_W > _AP_W2 ? _AP_S
                               : (_AP_W2 > _AP_W ? _AP_S2 : _AP_S || _AP_S2))>
        rhs = op;
    return typename RType<_AP_W2, _AP_S2>::div(
        (_AP_S || _AP_S2) ? lhs.sdiv(rhs) : lhs.udiv(rhs));
  }

  template <int _AP_W2, bool _AP_S2>
  inline typename RType<_AP_W2, _AP_S2>::mod operator%(
      const ap_private<_AP_W2, _AP_S2>& op) const {
    ap_private<((_AP_W + (_AP_S || _AP_S2)) > (_AP_W2 + (_AP_S || _AP_S2)) ? (_AP_W + (_AP_S || _AP_S2)) : (_AP_W2 + (_AP_S || _AP_S2))),
               (_AP_W > _AP_W2 ? _AP_S
                               : (_AP_W2 > _AP_W ? _AP_S2 : _AP_S || _AP_S2))>
        lhs = *this;
    ap_private<((_AP_W + (_AP_S || _AP_S2)) > (_AP_W2 + (_AP_S || _AP_S2)) ? (_AP_W + (_AP_S || _AP_S2)) : (_AP_W2 + (_AP_S || _AP_S2))),
               (_AP_W > _AP_W2 ? _AP_S
                               : (_AP_W2 > _AP_W ? _AP_S2 : _AP_S || _AP_S2))>
        rhs = op;
    typename RType<_AP_W2, _AP_S2>::mod res =
        typename RType<_AP_W2, _AP_S2>::mod((_AP_S || _AP_S2) ? lhs.srem(rhs)
                                                  : lhs.urem(rhs));
    return res;
  }
# 2615 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
  template <int _AP_W2, bool _AP_S2> inline ap_private<_AP_W, _AP_S>& operator /=( const ap_private<_AP_W2, _AP_S2>& op) { *this = operator /(op); return *this; }
  template <int _AP_W2, bool _AP_S2> inline ap_private<_AP_W, _AP_S>& operator %=( const ap_private<_AP_W2, _AP_S2>& op) { *this = operator %(op); return *this; }
# 2633 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
                inline ap_private operator<<(const char op) const { if (op >= _AP_W) return ap_private(0); if (CHAR_IS_SIGNED && op < 0) return *this >> (0 - op); return shl(op); }
                inline ap_private operator<<(const signed char op) const { if (op >= _AP_W) return ap_private(0); if (true && op < 0) return *this >> (0 - op); return shl(op); }
                inline ap_private operator<<(const unsigned char op) const { if (op >= _AP_W) return ap_private(0); if (false && op < 0) return *this >> (0 - op); return shl(op); }
                inline ap_private operator<<(const short op) const { if (op >= _AP_W) return ap_private(0); if (true && op < 0) return *this >> (0 - op); return shl(op); }
                inline ap_private operator<<(const unsigned short op) const { if (op >= _AP_W) return ap_private(0); if (false && op < 0) return *this >> (0 - op); return shl(op); }
                inline ap_private operator<<(const int op) const { if (op >= _AP_W) return ap_private(0); if (true && op < 0) return *this >> (0 - op); return shl(op); }
                inline ap_private operator<<(const unsigned int op) const { if (op >= _AP_W) return ap_private(0); if (false && op < 0) return *this >> (0 - op); return shl(op); }
                inline ap_private operator<<(const long op) const { if (op >= _AP_W) return ap_private(0); if (true && op < 0) return *this >> (0 - op); return shl(op); }
                inline ap_private operator<<(const unsigned long op) const { if (op >= _AP_W) return ap_private(0); if (false && op < 0) return *this >> (0 - op); return shl(op); }
                inline ap_private operator<<(const long long op) const { if (op >= _AP_W) return ap_private(0); if (true && op < 0) return *this >> (0 - op); return shl(op); }
                inline ap_private operator<<(const unsigned long long op) const { if (op >= _AP_W) return ap_private(0); if (false && op < 0) return *this >> (0 - op); return shl(op); }
  inline ap_private operator<<(const half op) const { if (op >= _AP_W) return ap_private(0); if (false && op < 0) return *this >> (0 - op); return shl(op); }
                inline ap_private operator<<(const float op) const { if (op >= _AP_W) return ap_private(0); if (false && op < 0) return *this >> (0 - op); return shl(op); }
                inline ap_private operator<<(const double op) const { if (op >= _AP_W) return ap_private(0); if (false && op < 0) return *this >> (0 - op); return shl(op); }



  template <int _AP_W2, bool _AP_S2>
                inline ap_private operator<<(const ap_private<_AP_W2, _AP_S2>& op2) const {
    if (_AP_S2 == false) {
      uint32_t sh = op2.to_uint();
      return *this << sh;
    } else {
      int sh = op2.to_int();
      return *this << sh;
    }
  }
# 2677 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
                inline ap_private operator>>(const char op) const { if (op >= _AP_W) { if (isNegative()) return ap_private(-1); else return ap_private(0); } if ((CHAR_IS_SIGNED) && op < 0) return *this << (0 - op); if (_AP_S) return ashr(op); else return lshr(op); }
                inline ap_private operator>>(const signed char op) const { if (op >= _AP_W) { if (isNegative()) return ap_private(-1); else return ap_private(0); } if ((true) && op < 0) return *this << (0 - op); if (_AP_S) return ashr(op); else return lshr(op); }
                inline ap_private operator>>(const unsigned char op) const { if (op >= _AP_W) { if (isNegative()) return ap_private(-1); else return ap_private(0); } if ((false) && op < 0) return *this << (0 - op); if (_AP_S) return ashr(op); else return lshr(op); }
                inline ap_private operator>>(const short op) const { if (op >= _AP_W) { if (isNegative()) return ap_private(-1); else return ap_private(0); } if ((true) && op < 0) return *this << (0 - op); if (_AP_S) return ashr(op); else return lshr(op); }
                inline ap_private operator>>(const unsigned short op) const { if (op >= _AP_W) { if (isNegative()) return ap_private(-1); else return ap_private(0); } if ((false) && op < 0) return *this << (0 - op); if (_AP_S) return ashr(op); else return lshr(op); }
                inline ap_private operator>>(const int op) const { if (op >= _AP_W) { if (isNegative()) return ap_private(-1); else return ap_private(0); } if ((true) && op < 0) return *this << (0 - op); if (_AP_S) return ashr(op); else return lshr(op); }
                inline ap_private operator>>(const unsigned int op) const { if (op >= _AP_W) { if (isNegative()) return ap_private(-1); else return ap_private(0); } if ((false) && op < 0) return *this << (0 - op); if (_AP_S) return ashr(op); else return lshr(op); }
                inline ap_private operator>>(const long op) const { if (op >= _AP_W) { if (isNegative()) return ap_private(-1); else return ap_private(0); } if ((true) && op < 0) return *this << (0 - op); if (_AP_S) return ashr(op); else return lshr(op); }
                inline ap_private operator>>(const unsigned long op) const { if (op >= _AP_W) { if (isNegative()) return ap_private(-1); else return ap_private(0); } if ((false) && op < 0) return *this << (0 - op); if (_AP_S) return ashr(op); else return lshr(op); }
                inline ap_private operator>>(const unsigned long long op) const { if (op >= _AP_W) { if (isNegative()) return ap_private(-1); else return ap_private(0); } if ((false) && op < 0) return *this << (0 - op); if (_AP_S) return ashr(op); else return lshr(op); }
                inline ap_private operator>>(const long long op) const { if (op >= _AP_W) { if (isNegative()) return ap_private(-1); else return ap_private(0); } if ((true) && op < 0) return *this << (0 - op); if (_AP_S) return ashr(op); else return lshr(op); }
  inline ap_private operator>>(const half op) const { if (op >= _AP_W) { if (isNegative()) return ap_private(-1); else return ap_private(0); } if ((false) && op < 0) return *this << (0 - op); if (_AP_S) return ashr(op); else return lshr(op); }
                inline ap_private operator>>(const float op) const { if (op >= _AP_W) { if (isNegative()) return ap_private(-1); else return ap_private(0); } if ((false) && op < 0) return *this << (0 - op); if (_AP_S) return ashr(op); else return lshr(op); }
                inline ap_private operator>>(const double op) const { if (op >= _AP_W) { if (isNegative()) return ap_private(-1); else return ap_private(0); } if ((false) && op < 0) return *this << (0 - op); if (_AP_S) return ashr(op); else return lshr(op); }



  template <int _AP_W2, bool _AP_S2>
                inline ap_private operator>>(const ap_private<_AP_W2, _AP_S2>& op2) const {
    if (_AP_S2 == false) {
      uint32_t sh = op2.to_uint();
      return *this >> sh;
    } else {
      int sh = op2.to_int();
      return *this >> sh;
    }
  }
# 2733 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
  template <int _AP_W2, bool _AP_S2> inline ap_private& operator >>=(int op) { clearUnusedBits(); *this = operator >>(op); return *this; } inline ap_private& operator >>=(unsigned int op) { clearUnusedBits(); *this = operator >>(op); return *this; } template <int _AP_W2, bool _AP_S2> inline ap_private& operator >>=(const ap_private<_AP_W2, _AP_S2>& op) { clearUnusedBits(); *this = operator >>(op); return *this; }
  template <int _AP_W2, bool _AP_S2> inline ap_private& operator <<=(int op) { clearUnusedBits(); *this = operator <<(op); return *this; } inline ap_private& operator <<=(unsigned int op) { clearUnusedBits(); *this = operator <<(op); return *this; } template <int _AP_W2, bool _AP_S2> inline ap_private& operator <<=(const ap_private<_AP_W2, _AP_S2>& op) { clearUnusedBits(); *this = operator <<(op); return *this; }




  template <int _AP_W1, bool _AP_S1>
                inline bool operator==(const ap_private<_AP_W1, _AP_S1>& op) const {
    ap_private<_AP_W, _AP_S> tmp(*this);
    tmp.clearUnusedBits();
    ap_private<_AP_W1, _AP_S1> op_(op);
    op_.clearUnusedBits();

    enum { _AP_MAX_W = ((((_AP_W) > (_AP_W1) ? (_AP_W) : (_AP_W1))) > (32) ? (((_AP_W) > (_AP_W1) ? (_AP_W) : (_AP_W1))) : (32)) };
    ap_private<_AP_MAX_W, false> lhs(tmp);
    ap_private<_AP_MAX_W, false> rhs(op_);
    if (_AP_MAX_W <= 64) {
      return (uint64_t)lhs.get_VAL() == (uint64_t)rhs.get_VAL();
    } else
      return lhs == rhs;
  }

  template <int _AP_W2, bool _AP_S2>
                inline bool operator!=(const ap_private<_AP_W2, _AP_S2>& op) const {
    return !(*this == op);
  }

  template <int _AP_W2, bool _AP_S2>
                inline bool operator>(const ap_private<_AP_W2, _AP_S2>& op) const {
    ap_private<_AP_W, _AP_S> tmp(*this);
    tmp.clearUnusedBits();
    ap_private<_AP_W2, _AP_S2> op_(op);
    op_.clearUnusedBits();

    enum {
      _AP_MAX_W = ((_AP_W + (_AP_S || _AP_S2)) > (_AP_W2 + (_AP_S || _AP_S2)) ? (_AP_W + (_AP_S || _AP_S2)) : (_AP_W2 + (_AP_S || _AP_S2)))
    };
    ap_private<_AP_MAX_W, _AP_S> lhs(tmp);
    ap_private<_AP_MAX_W, _AP_S2> rhs(op_);


    if (_AP_S == _AP_S2)
      return _AP_S ? lhs.sgt(rhs) : lhs.ugt(rhs);
    else if (_AP_W < 32 && _AP_W2 < 32)

      return lhs.sgt(rhs);
    else


        if (_AP_S)
      if (_AP_W2 >= _AP_W)
        return lhs.ugt(rhs);
      else
        return lhs.sgt(rhs);
    else if (_AP_W >= _AP_W2)
      return lhs.ugt(rhs);
    else
      return lhs.sgt(rhs);
  }

  template <int _AP_W2, bool _AP_S2>
                inline bool operator<=(const ap_private<_AP_W2, _AP_S2>& op) const {
    return !(*this > op);
  }

  template <int _AP_W2, bool _AP_S2>
                inline bool operator<(const ap_private<_AP_W2, _AP_S2>& op) const {
    ap_private<_AP_W, _AP_S> tmp(*this);
    tmp.clearUnusedBits();
    ap_private<_AP_W2, _AP_S2> op_(op);
    op_.clearUnusedBits();

    enum {
      _AP_MAX_W = ((_AP_W + (_AP_S || _AP_S2)) > (_AP_W2 + (_AP_S || _AP_S2)) ? (_AP_W + (_AP_S || _AP_S2)) : (_AP_W2 + (_AP_S || _AP_S2)))
    };
    ap_private<_AP_MAX_W, _AP_S> lhs(tmp);
    ap_private<_AP_MAX_W, _AP_S2> rhs(op_);
    if (_AP_S == _AP_S2)
      return _AP_S ? lhs.slt(rhs) : lhs.ult(rhs);
    else if (_AP_W < 32 && _AP_W2 < 32)
      return lhs.slt(rhs);
    else if (_AP_S)
      if (_AP_W2 >= _AP_W)
        return lhs.ult(rhs);
      else
        return lhs.slt(rhs);
    else if (_AP_W >= _AP_W2)
      return lhs.ult(rhs);
    else
      return lhs.slt(rhs);
  }

  template <int _AP_W2, bool _AP_S2>
                inline bool operator>=(const ap_private<_AP_W2, _AP_S2>& op) const {
    return !(*this < op);
  }




                      inline _private_range_ref<_AP_W, _AP_S> operator()(int Hi, int Lo) {
    return _private_range_ref<_AP_W, _AP_S>(this, Hi, Lo);
  }

                      inline _private_range_ref<_AP_W, _AP_S> operator()(int Hi, int Lo) const {
    return _private_range_ref<_AP_W, _AP_S>(
        const_cast<ap_private<_AP_W, _AP_S>*>(this), Hi, Lo);
  }

                      inline _private_range_ref<_AP_W, _AP_S> range(int Hi, int Lo) const {
    return _private_range_ref<_AP_W, _AP_S>(
        (const_cast<ap_private<_AP_W, _AP_S>*>(this)), Hi, Lo);
  }

                      inline _private_range_ref<_AP_W, _AP_S> range(int Hi, int Lo) {
    return _private_range_ref<_AP_W, _AP_S>(this, Hi, Lo);
  }

                      inline _private_bit_ref<_AP_W, _AP_S> operator[](int index) {
    return _private_bit_ref<_AP_W, _AP_S>(*this, index);
  }

  template <int _AP_W2, bool _AP_S2>
                      inline _private_bit_ref<_AP_W, _AP_S> operator[](
      const ap_private<_AP_W2, _AP_S2>& index) {
    return _private_bit_ref<_AP_W, _AP_S>(*this, index.to_int());
  }

                      inline const _private_bit_ref<_AP_W, _AP_S> operator[](int index) const {
    return _private_bit_ref<_AP_W, _AP_S>(
        const_cast<ap_private<_AP_W, _AP_S>&>(*this), index);
  }

  template <int _AP_W2, bool _AP_S2>
                      inline const _private_bit_ref<_AP_W, _AP_S> operator[](
      const ap_private<_AP_W2, _AP_S2>& index) const {
    return _private_bit_ref<_AP_W, _AP_S>(
        const_cast<ap_private<_AP_W, _AP_S>&>(*this), index.to_int());
  }

                      inline _private_bit_ref<_AP_W, _AP_S> bit(int index) {
    return _private_bit_ref<_AP_W, _AP_S>(*this, index);
  }

  template <int _AP_W2, bool _AP_S2>
                      inline _private_bit_ref<_AP_W, _AP_S> bit(const ap_private<_AP_W2, _AP_S2>& index) {
    return _private_bit_ref<_AP_W, _AP_S>(*this, index.to_int());
  }

                      inline const _private_bit_ref<_AP_W, _AP_S> bit(int index) const {
    return _private_bit_ref<_AP_W, _AP_S>(
        const_cast<ap_private<_AP_W, _AP_S>&>(*this), index);
  }

  template <int _AP_W2, bool _AP_S2>
                      inline const _private_bit_ref<_AP_W, _AP_S> bit(
      const ap_private<_AP_W2, _AP_S2>& index) const {
    return _private_bit_ref<_AP_W, _AP_S>(
        const_cast<ap_private<_AP_W, _AP_S>&>(*this), index.to_int());
  }
# 3073 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
  inline bool and_reduce() const { return (get_cleared_VAL() & mask) == mask; }

  inline bool nand_reduce() const { return (get_cleared_VAL() & mask) != mask; }

  inline bool or_reduce() const { return (bool)get_cleared_VAL(); }

  inline bool nor_reduce() const { return get_cleared_VAL() == 0; }

  inline bool xor_reduce() const {
    unsigned int i = countPopulation();
    return (i % 2) ? true : false;
  }

  inline bool xnor_reduce() const {
    unsigned int i = countPopulation();
    return (i % 2) ? false : true;
  }

  inline std::string to_string(uint8_t radix = 2, bool sign = false) const {
    return toString(radix, radix == 10 ? _AP_S : sign);
  }
};

template <int _AP_W, bool _AP_S>
std::string ap_private<_AP_W, _AP_S, true>::toString(uint8_t radix,
                                                     bool wantSigned) const {
  (void) ((!!((radix == 10 || radix == 8 || radix == 16 || radix == 2) && "Radix should be 2, 8, 10, or 16!")) || (_assert("(radix == 10 || radix == 8 || radix == 16 || radix == 2) && \"Radix should be 2, 8, 10, or 16!\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",3100),0));

  static const char* digits[] = {"0", "1", "2", "3", "4", "5", "6", "7",
                                 "8", "9", "a", "b", "c", "d", "e", "f"};
  std::string result;
  if (radix != 10) {





    if (*this == (uint64_t)(0)) {


      switch (radix) {
        case 2:
          result = "0b0";
          break;
        case 8:
          result = "0o0";
          break;
        case 16:
          result = "0x0";
          break;
        default:
          (void) ((!!("invalid radix" && 0)) || (_assert("\"invalid radix\" && 0","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",3124),0));
      }
    } else {
      ap_private<_AP_W, false, true> tmp(*this);
      size_t insert_at = 0;
      bool leading_zero = true;
      if (wantSigned && isNegative()) {



        tmp.flip();
        tmp++;
        result = "-";
        insert_at = 1;
        leading_zero = false;
      }
      switch (radix) {
        case 2:
          result += "0b";
          break;
        case 8:
          result += "0o";
          break;
        case 16:
          result += "0x";
          break;
        default:
          (void) ((!!("invalid radix" && 0)) || (_assert("\"invalid radix\" && 0","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",3151),0));
      }
      insert_at += 2;


      uint32_t shift = (radix == 16 ? 4 : (radix == 8 ? 3 : 1));
      uint64_t mask = radix - 1;
      ap_private<_AP_W, false, true> zero(0);
      unsigned bits = 0;
      bool msb = false;
      while (tmp.ne(zero)) {
        unsigned digit = (unsigned)(tmp.get_VAL() & mask);
        result.insert(insert_at, digits[digit]);
        tmp = tmp.lshr(shift);
        bits++;
        msb = (digit >> (shift - 1)) == 1;
      }
      bits *= shift;
      if (bits < _AP_W && leading_zero && msb)
        result.insert(insert_at, digits[0]);
    }
    return result;
  }

  ap_private<_AP_W, false, true> tmp(*this);
  ap_private<6, false, true> divisor(radix);
  ap_private<_AP_W, _AP_S, true> zero(0);
  size_t insert_at = 0;
  if (wantSigned && isNegative()) {



    tmp.flip();
    tmp++;
    result = "-";
    insert_at = 1;
  }
  if (tmp == ap_private<_AP_W, false, true>(0ULL))
    result = "0";
  else
    while (tmp.ne(zero)) {
      ap_private<_AP_W, false, true> APdigit = tmp % divisor;
      ap_private<_AP_W, false, true> tmp2 = tmp / divisor;
      uint32_t digit = (uint32_t)(APdigit.getZExtValue());
      (void) ((!!(digit < radix && "divide failed")) || (_assert("digit < radix && \"divide failed\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",3195),0));
      result.insert(insert_at, digits[digit]);
      tmp = tmp2;
    }
  return result;

}


template <int _AP_W, bool _AP_S>
class ap_private<_AP_W, _AP_S, false> {

  const static bool valid = ap_private_enable_if<(_AP_W > 64)>::isValid;




 public:
  enum { BitWidth = _AP_W, _AP_N = (_AP_W + 63) / 64 };
  static const int width = _AP_W;

 private:
# 3227 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
  inline ap_private(uint32_t numWords, const uint64_t bigVal[]) {
    set_canary();
    (void) ((!!(bigVal && "Null pointer detected!")) || (_assert("bigVal && \"Null pointer detected!\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",3229),0));
    {

      memset(pVal, 0, _AP_N * sizeof(uint64_t));


      uint32_t words = AESL_std::min<uint32_t>(numWords, _AP_N);

      memcpy(pVal, bigVal, words * APINT_WORD_SIZE);
      if (words >= _AP_W) clearUnusedBits();

    }
    check_canary();
  }
# 3252 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
  inline ap_private(const std::string& val, uint8_t radix = 2) {
    set_canary();
    (void) ((!!(!val.empty() && "The input string is empty.")) || (_assert("!val.empty() && \"The input string is empty.\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",3254),0));
    const char* c_str = val.c_str();
    fromString(c_str, val.size(), radix);
    check_canary();
  }
# 3270 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
  inline ap_private(const char strStart[], uint32_t slen, uint8_t radix) {
    set_canary();
    fromString(strStart, slen, radix);
    check_canary();
  }

  inline void report() {
    do { if ((_AP_W > ((1024 + 1023) / 1024) * 1024)) { fprintf((__acrt_iob_func(2)), "ERROR: " "ap_%sint<%d>: Bitwidth exceeds the " "default max value %d. Please use macro " "AP_INT_MAX_W to set a larger max value.", _AP_S ? "" : "u", _AP_W, ((1024 + 1023) / 1024) * 1024); fprintf((__acrt_iob_func(2)), "\n"); abort(); } } while (0);




  }
# 3291 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
uint64_t pVal[_AP_N]

__attribute__((aligned(1 << logceil<_AP_W>::val)))

;





                inline void check_canary() {}
                inline void set_canary() {}


 public:
  typedef typename valtype<8, _AP_S>::Type ValType;
  typedef ap_private<_AP_W, _AP_S> Type;

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  friend struct ap_fixed_base;


  template <int _AP_W2, bool _AP_S2>
  struct RType {
    enum {
      mult_w = _AP_W + _AP_W2,
      mult_s = _AP_S || _AP_S2,
      plus_w =
          ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))) + 1,
      plus_s = _AP_S || _AP_S2,
      minus_w =
          ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))) + 1,
      minus_s = true,
      div_w = _AP_W + _AP_S2,
      div_s = _AP_S || _AP_S2,
      mod_w = ((_AP_W) < (_AP_W2 + (!_AP_S2 && _AP_S)) ? (_AP_W) : (_AP_W2 + (!_AP_S2 && _AP_S))),
      mod_s = _AP_S,
      logic_w = ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))),
      logic_s = _AP_S || _AP_S2
    };
    typedef ap_private<mult_w, mult_s> mult;
    typedef ap_private<plus_w, plus_s> plus;
    typedef ap_private<minus_w, minus_s> minus;
    typedef ap_private<logic_w, logic_s> logic;
    typedef ap_private<div_w, div_s> div;
    typedef ap_private<mod_w, mod_s> mod;
    typedef ap_private<_AP_W, _AP_S> arg1;
    typedef bool reduce;
  };

                inline uint64_t& get_VAL(void) { return pVal[0]; }
                inline uint64_t get_VAL(void) const { return pVal[0]; }
  inline uint64_t get_VAL(void) const volatile { return pVal[0]; }
                inline uint64_t get_cleared_VAL(void) { return pVal[0]; }
                inline uint64_t get_cleared_VAL(void) const { return pVal[0]; }
                inline void set_VAL(uint64_t value) { pVal[0] = value; }
                inline uint64_t& get_pVal(int index) { return pVal[index]; }
                inline uint64_t* get_pVal() { return pVal; }
                inline const uint64_t* get_pVal() const { return pVal; }
                inline uint64_t get_pVal(int index) const { return pVal[index]; }
  inline uint64_t* get_pVal() const volatile { return pVal; }
                inline uint64_t get_pVal(int index) const volatile { return pVal[index]; }
                inline void set_pVal(int i, uint64_t value) { pVal[i] = value; }


  enum {
    APINT_BITS_PER_WORD = sizeof(uint64_t) * 8,
    APINT_WORD_SIZE = sizeof(uint64_t)
  };

  enum {
    excess_bits = (_AP_W % APINT_BITS_PER_WORD)
                      ? APINT_BITS_PER_WORD - (_AP_W % APINT_BITS_PER_WORD)
                      : 0
  };
  static const uint64_t mask = ((uint64_t)~0ULL >> (excess_bits));

 public:

  explicit inline ap_private(const char* val) {
    set_canary();
    unsigned char radix = 10;
    std::string str = ap_private_ops::parseString(val, radix);
    std::string::size_type pos = str.find('.');
    if (pos != std::string::npos) str = str.substr(pos);
    ap_private ap_private_val(str, radix);
    operator=(ap_private_val);
    report();
    check_canary();
  }

  inline ap_private(const char* val, unsigned char rd) {
    set_canary();
    unsigned char radix = rd;
    std::string str = ap_private_ops::parseString(val, radix);
    std::string::size_type pos = str.find('.');
    if (pos != std::string::npos) str = str.substr(pos);
    ap_private ap_private_val(str, radix);
    operator=(ap_private_val);
    report();

    report();
    check_canary();
  }

  template <int _AP_W2, bool _AP_S2>
  inline ap_private(const _private_range_ref<_AP_W2, _AP_S2>& ref) {
    set_canary();
    *this = ref.get();
    report();
    check_canary();
  }

  template <int _AP_W2, bool _AP_S2>
  inline ap_private(const _private_bit_ref<_AP_W2, _AP_S2>& ref) {
    set_canary();
    *this = ((uint64_t)(bool)ref);
    report();
    check_canary();
  }
# 3443 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
                inline ap_private(const ap_private& that):pVal() {
      set_canary();
      for (int i = 0; i < _AP_N; ++i) pVal[i] = that.get_pVal(i);

      clearUnusedBits();
      check_canary();
  }

  template <int _AP_W1, bool _AP_S1>
                inline ap_private(const ap_private<_AP_W1, _AP_S1, false>& that):pVal() {
    set_canary();
    operator=(that);
    check_canary();
  }

  template <int _AP_W1, bool _AP_S1>
  inline ap_private(const volatile ap_private<_AP_W1, _AP_S1, false>& that) {
    set_canary();
    operator=(const_cast<const ap_private<_AP_W1, _AP_S1, false>&>(that));
    check_canary();
  }

  template <int _AP_W1, bool _AP_S1>
                inline ap_private(const ap_private<_AP_W1, _AP_S1, true>& that):pVal() {
    set_canary();
    const uint64_t that_sign_ext_mask =
        (_AP_W1 == APINT_BITS_PER_WORD)
            ? 0
            : ~0ULL >> (_AP_W1 % APINT_BITS_PER_WORD)
                           << (_AP_W1 % APINT_BITS_PER_WORD);
    if (that.isNegative()) {
      pVal[0] = that.get_VAL() | that_sign_ext_mask;
      for (int i = 1; i < _AP_N; ++i) pVal[i] = ~0;

    } else {
      pVal[0] = that.get_VAL();
      for (int i = 1; i < _AP_N; ++i) pVal[i] = 0;

    }
    clearUnusedBits();
    check_canary();
  }

  template <int _AP_W1, bool _AP_S1>
  inline ap_private(const volatile ap_private<_AP_W1, _AP_S1, true>& that) {
    set_canary();
    operator=(const_cast<const ap_private<_AP_W1, _AP_S1, true>&>(that));
    check_canary();
  }




  inline ~ap_private() = default;







  ap_private() {
    set_canary();
    clearUnusedBits();
    check_canary();
  }

  inline ap_private(uint64_t* val, uint32_t bits = _AP_W) { (void) ((!!(0)) || (_assert("0","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",3510),0)); }
  inline ap_private(const uint64_t* const val, uint32_t bits) { (void) ((!!(0)) || (_assert("0","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",3511),0)); }
# 3534 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
                inline ap_private(bool val, bool isSigned = false):pVal() { set_canary(); pVal[0] = (ValType)val; if (isSigned && int64_t(pVal[0]) < 0) { for (int i = 1; i < _AP_N; ++i) pVal[i] = ~0; } else { for (int i = 1; i < _AP_N; ++i) pVal[i] = 0; } clearUnusedBits(); check_canary(); }
                inline ap_private(char val, bool isSigned = CHAR_IS_SIGNED):pVal() { set_canary(); pVal[0] = (ValType)val; if (isSigned && int64_t(pVal[0]) < 0) { for (int i = 1; i < _AP_N; ++i) pVal[i] = ~0; } else { for (int i = 1; i < _AP_N; ++i) pVal[i] = 0; } clearUnusedBits(); check_canary(); }
                inline ap_private(signed char val, bool isSigned = true):pVal() { set_canary(); pVal[0] = (ValType)val; if (isSigned && int64_t(pVal[0]) < 0) { for (int i = 1; i < _AP_N; ++i) pVal[i] = ~0; } else { for (int i = 1; i < _AP_N; ++i) pVal[i] = 0; } clearUnusedBits(); check_canary(); }
                inline ap_private(unsigned char val, bool isSigned = false):pVal() { set_canary(); pVal[0] = (ValType)val; if (isSigned && int64_t(pVal[0]) < 0) { for (int i = 1; i < _AP_N; ++i) pVal[i] = ~0; } else { for (int i = 1; i < _AP_N; ++i) pVal[i] = 0; } clearUnusedBits(); check_canary(); }
                inline ap_private(short val, bool isSigned = true):pVal() { set_canary(); pVal[0] = (ValType)val; if (isSigned && int64_t(pVal[0]) < 0) { for (int i = 1; i < _AP_N; ++i) pVal[i] = ~0; } else { for (int i = 1; i < _AP_N; ++i) pVal[i] = 0; } clearUnusedBits(); check_canary(); }
                inline ap_private(unsigned short val, bool isSigned = false):pVal() { set_canary(); pVal[0] = (ValType)val; if (isSigned && int64_t(pVal[0]) < 0) { for (int i = 1; i < _AP_N; ++i) pVal[i] = ~0; } else { for (int i = 1; i < _AP_N; ++i) pVal[i] = 0; } clearUnusedBits(); check_canary(); }
                inline ap_private(int val, bool isSigned = true):pVal() { set_canary(); pVal[0] = (ValType)val; if (isSigned && int64_t(pVal[0]) < 0) { for (int i = 1; i < _AP_N; ++i) pVal[i] = ~0; } else { for (int i = 1; i < _AP_N; ++i) pVal[i] = 0; } clearUnusedBits(); check_canary(); }
                inline ap_private(unsigned int val, bool isSigned = false):pVal() { set_canary(); pVal[0] = (ValType)val; if (isSigned && int64_t(pVal[0]) < 0) { for (int i = 1; i < _AP_N; ++i) pVal[i] = ~0; } else { for (int i = 1; i < _AP_N; ++i) pVal[i] = 0; } clearUnusedBits(); check_canary(); }
                inline ap_private(long val, bool isSigned = true):pVal() { set_canary(); pVal[0] = (ValType)val; if (isSigned && int64_t(pVal[0]) < 0) { for (int i = 1; i < _AP_N; ++i) pVal[i] = ~0; } else { for (int i = 1; i < _AP_N; ++i) pVal[i] = 0; } clearUnusedBits(); check_canary(); }
                inline ap_private(unsigned long val, bool isSigned = false):pVal() { set_canary(); pVal[0] = (ValType)val; if (isSigned && int64_t(pVal[0]) < 0) { for (int i = 1; i < _AP_N; ++i) pVal[i] = ~0; } else { for (int i = 1; i < _AP_N; ++i) pVal[i] = 0; } clearUnusedBits(); check_canary(); }
                inline ap_private(ap_slong val, bool isSigned = true):pVal() { set_canary(); pVal[0] = (ValType)val; if (isSigned && int64_t(pVal[0]) < 0) { for (int i = 1; i < _AP_N; ++i) pVal[i] = ~0; } else { for (int i = 1; i < _AP_N; ++i) pVal[i] = 0; } clearUnusedBits(); check_canary(); }
                inline ap_private(ap_ulong val, bool isSigned = false):pVal() { set_canary(); pVal[0] = (ValType)val; if (isSigned && int64_t(pVal[0]) < 0) { for (int i = 1; i < _AP_N; ++i) pVal[i] = ~0; } else { for (int i = 1; i < _AP_N; ++i) pVal[i] = 0; } clearUnusedBits(); check_canary(); }
  inline ap_private(half val, bool isSigned = false):pVal() { set_canary(); pVal[0] = (ValType)val; if (isSigned && int64_t(pVal[0]) < 0) { for (int i = 1; i < _AP_N; ++i) pVal[i] = ~0; } else { for (int i = 1; i < _AP_N; ++i) pVal[i] = 0; } clearUnusedBits(); check_canary(); }
                inline ap_private(float val, bool isSigned = false):pVal() { set_canary(); pVal[0] = (ValType)val; if (isSigned && int64_t(pVal[0]) < 0) { for (int i = 1; i < _AP_N; ++i) pVal[i] = ~0; } else { for (int i = 1; i < _AP_N; ++i) pVal[i] = 0; } clearUnusedBits(); check_canary(); }
                inline ap_private(double val, bool isSigned = false):pVal() { set_canary(); pVal[0] = (ValType)val; if (isSigned && int64_t(pVal[0]) < 0) { for (int i = 1; i < _AP_N; ++i) pVal[i] = ~0; } else { for (int i = 1; i < _AP_N; ++i) pVal[i] = 0; } clearUnusedBits(); check_canary(); }




                inline bool isSingleWord() const { return false; }



                static inline uint32_t whichWord(uint32_t bitPosition) {

    return (bitPosition) >> 6;
  }




                static inline uint32_t whichBit(uint32_t bitPosition) {

    return bitPosition & 0x3f;
  }





                static inline uint64_t maskBit(uint32_t bitPosition) {
    return 1ULL << (whichBit(bitPosition));
  }



                inline uint64_t getWord(uint32_t bitPosition) const {
    return pVal[whichWord(bitPosition)];
  }






                inline void clearUnusedBits(void)


      __attribute__((no_sanitize("undefined")))

  {







    pVal[_AP_N - 1] =
        _AP_S ? ((((int64_t)pVal[_AP_N - 1]) << (excess_bits)) >> excess_bits)
              : (excess_bits
                     ? ((pVal[_AP_N - 1]) << (excess_bits)) >> (excess_bits)
                     : pVal[_AP_N - 1]);

  }

  inline void clearUnusedBits(void) volatile


      __attribute__((no_sanitize("undefined")))

  {
    pVal[_AP_N - 1] =
        _AP_S ? ((((int64_t)pVal[_AP_N - 1]) << (excess_bits)) >> excess_bits)
              : (excess_bits
                     ? ((pVal[_AP_N - 1]) << (excess_bits)) >> (excess_bits)
                     : pVal[_AP_N - 1]);
  }

  inline void clearUnusedBitsToZero(void) { pVal[_AP_N - 1] &= mask; }

  inline void clearUnusedBitsToOne(void) { pVal[_AP_N - 1] |= mask; }



  inline void fromString(const char* str, uint32_t slen, uint8_t radix) {
    enum { numbits = _AP_W };
    bool isNeg = str[0] == '-';
    if (isNeg) {
      str++;
      slen--;
    }

    if (str[0] == '0' && (str[1] == 'b' || str[1] == 'B')) {

      do { if ((radix != 2)) { fprintf((__acrt_iob_func(2)), "WARNING: " "%s seems to have base %d, but %d given.", str, 2, radix); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);
      str += 2;
      slen -=2;
    } else if (str[0] == '0' && (str[1] == 'o' || str[1] == 'O')) {

      do { if ((radix != 8)) { fprintf((__acrt_iob_func(2)), "WARNING: " "%s seems to have base %d, but %d given.", str, 8, radix); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);
      str += 2;
      slen -=2;
    } else if (str[0] == '0' && (str[1] == 'x' || str[1] == 'X')) {

      do { if ((radix != 16)) { fprintf((__acrt_iob_func(2)), "WARNING: " "%s seems to have base %d, but %d given.", str, 16, radix); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);
      str += 2;
      slen -=2;
    } else if (str[0] == '0' && (str[1] == 'd' || str[1] == 'D')) {

      do { if ((radix != 10)) { fprintf((__acrt_iob_func(2)), "WARNING: " "%s seems to have base %d, but %d given.", str, 10, radix); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);
      str += 2;
      slen -=2;
    } else if (radix == 0) {

    }


    (void) ((!!((radix == 10 || radix == 8 || radix == 16 || radix == 2) && "Radix should be 2, 8, 10, or 16!")) || (_assert("(radix == 10 || radix == 8 || radix == 16 || radix == 2) && \"Radix should be 2, 8, 10, or 16!\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",3663),0));

    (void) ((!!(str && "String is null?")) || (_assert("str && \"String is null?\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",3664),0));


    while (*str == '0' && *(str + 1) != '\0') {
      str++;
      slen--;
    }
    (void) ((!!((slen <= numbits || radix != 2) && "Insufficient bit width")) || (_assert("(slen <= numbits || radix != 2) && \"Insufficient bit width\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",3671),0));
    (void) ((!!(((slen - 1) * 3 <= numbits || radix != 8) && "Insufficient bit width")) || (_assert("((slen - 1) * 3 <= numbits || radix != 8) && \"Insufficient bit width\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",3673),0));

    (void) ((!!(((slen - 1) * 4 <= numbits || radix != 16) && "Insufficient bit width")) || (_assert("((slen - 1) * 4 <= numbits || radix != 16) && \"Insufficient bit width\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",3675),0));

    (void) ((!!((((slen - 1) * 64) / 22 <= numbits || radix != 10) && "Insufficient bit width")) || (_assert("(((slen - 1) * 64) / 22 <= numbits || radix != 10) && \"Insufficient bit width\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",3677),0));



    memset(pVal, 0, _AP_N * sizeof(uint64_t));


    uint32_t shift = (radix == 16 ? 4 : radix == 8 ? 3 : radix == 2 ? 1 : 0);



    uint64_t bigVal[_AP_N];
    memset(bigVal, 0, _AP_N * sizeof(uint64_t));
    ap_private<_AP_W, _AP_S> apdigit(getBitWidth(), bigVal);
    ap_private<_AP_W, _AP_S> apradix(radix);


    for (unsigned i = 0; i < slen; i++) {

      uint32_t digit = 0;
      char cdigit = str[i];
      if (radix == 16) {




        if (!(((cdigit) >= '0' && (cdigit) <= '9') || ((cdigit) >= 'a' && (cdigit) <= 'f') || ((cdigit) >= 'A' && (cdigit) <= 'F'))) (void) ((!!(0 && "Invalid hex digit in string")) || (_assert("0 && \"Invalid hex digit in string\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",3702),0));
        if (((cdigit) >= '0' && (cdigit) <= '9'))
          digit = cdigit - '0';
        else if (cdigit >= 'a')
          digit = cdigit - 'a' + 10;
        else if (cdigit >= 'A')
          digit = cdigit - 'A' + 10;
        else
          (void) ((!!(0 && "huh? we shouldn't get here")) || (_assert("0 && \"huh? we shouldn't get here\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",3710),0));
      } else if (((cdigit) >= '0' && (cdigit) <= '9')) {
        digit = cdigit - '0';
      } else if (cdigit != '\0') {
        (void) ((!!(0 && "Invalid character in digit string")) || (_assert("0 && \"Invalid character in digit string\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",3714),0));
      }



      if (shift)
        *this <<= shift;
      else
        *this *= apradix;


      apdigit.set_VAL(digit);
      *this += apdigit;
    }

    if (isNeg) {
      (*this)--;
      this->flip();
    }
    clearUnusedBits();
  }

  inline ap_private read() volatile { return *this; }

  inline void write(const ap_private& op2) volatile { *this = (op2); }

                inline operator ValType() const { return get_VAL(); }

                inline int to_uchar() const { return (unsigned char)get_VAL(); }

                inline int to_char() const { return (signed char)get_VAL(); }

                inline int to_ushort() const { return (unsigned short)get_VAL(); }

                inline int to_short() const { return (short)get_VAL(); }

                inline int to_int() const { return (int)get_VAL(); }

                inline unsigned to_uint() const { return (unsigned)get_VAL(); }

                inline long to_long() const { return (long)get_VAL(); }

                inline unsigned long to_ulong() const { return (unsigned long)get_VAL(); }

                inline ap_slong to_int64() const { return (ap_slong)get_VAL(); }

                inline ap_ulong to_uint64() const { return (ap_ulong)get_VAL(); }

                inline double to_double() const {
    if (isNegative())
      return roundToDouble(true);
    else
      return roundToDouble(false);
  }

                inline unsigned length() const { return _AP_W; }



  inline ap_private& reverse() {
    for (int i = 0; i < _AP_W / 2; ++i) {
      bool tmp = operator[](i);
      if (operator[](_AP_W - 1 - i))
        set(i);
      else
        clear(i);
      if (tmp)
        set(_AP_W - 1 - i);
      else
        clear(_AP_W - 1 - i);
    }
    clearUnusedBits();
    return *this;
  }


                inline bool iszero() const { return isMinValue(); }

                inline bool to_bool() const { return !iszero(); }


                inline bool sign() const {
    if (isNegative()) return true;
    return false;
  }


  inline void invert(int i) {
    (void) ((!!(i >= 0 && "Attempting to read bit with negative index")) || (_assert("i >= 0 && \"Attempting to read bit with negative index\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",3802),0));
    (void) ((!!(i < _AP_W && "Attempting to read bit beyond MSB")) || (_assert("i < _AP_W && \"Attempting to read bit beyond MSB\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",3803),0));
    flip(i);
  }


  inline bool test(int i) const {
    (void) ((!!(i >= 0 && "Attempting to read bit with negative index")) || (_assert("i >= 0 && \"Attempting to read bit with negative index\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",3809),0));
    (void) ((!!(i < _AP_W && "Attempting to read bit beyond MSB")) || (_assert("i < _AP_W && \"Attempting to read bit beyond MSB\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",3810),0));
    return operator[](i);
  }


  inline void set(int i, bool v) {
    (void) ((!!(i >= 0 && "Attempting to write bit with negative index")) || (_assert("i >= 0 && \"Attempting to write bit with negative index\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",3816),0));
    (void) ((!!(i < _AP_W && "Attempting to write bit beyond MSB")) || (_assert("i < _AP_W && \"Attempting to write bit beyond MSB\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",3817),0));
    v ? set(i) : clear(i);
  }


  inline void set_bit(int i, bool v) {
    (void) ((!!(i >= 0 && "Attempting to write bit with negative index")) || (_assert("i >= 0 && \"Attempting to write bit with negative index\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",3823),0));
    (void) ((!!(i < _AP_W && "Attempting to write bit beyond MSB")) || (_assert("i < _AP_W && \"Attempting to write bit beyond MSB\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",3824),0));
    v ? set(i) : clear(i);
  }


  inline ap_private& set(uint32_t bitPosition) {
    pVal[whichWord(bitPosition)] |= maskBit(bitPosition);
    clearUnusedBits();
    return *this;
  }

  inline void set() {
    for (int i = 0; i < _AP_N; ++i) pVal[i] = ~0ULL;
    clearUnusedBits();
  }


  inline bool get(int i) const {
    (void) ((!!(i >= 0 && "Attempting to read bit with negative index")) || (_assert("i >= 0 && \"Attempting to read bit with negative index\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",3842),0));
    (void) ((!!(i < _AP_W && "Attempting to read bit beyond MSB")) || (_assert("i < _AP_W && \"Attempting to read bit beyond MSB\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",3843),0));
    return ((maskBit(i) & (pVal[whichWord(i)])) != 0);
  }


  inline bool get_bit(int i) const {
    (void) ((!!(i >= 0 && "Attempting to read bit with negative index")) || (_assert("i >= 0 && \"Attempting to read bit with negative index\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",3849),0));
    (void) ((!!(i < _AP_W && "Attempting to read bit beyond MSB")) || (_assert("i < _AP_W && \"Attempting to read bit beyond MSB\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",3850),0));
    return ((maskBit(i) & (pVal[whichWord(i)])) != 0);
  }



  inline void lrotate(int n) {
    (void) ((!!(n >= 0 && "Attempting to shift negative index")) || (_assert("n >= 0 && \"Attempting to shift negative index\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",3857),0));
    (void) ((!!(n < _AP_W && "Shift value larger than bit width")) || (_assert("n < _AP_W && \"Shift value larger than bit width\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",3858),0));
    operator=(shl(n) | lshr(_AP_W - n));
  }



  inline void rrotate(int n) {
    (void) ((!!(n >= 0 && "Attempting to shift negative index")) || (_assert("n >= 0 && \"Attempting to shift negative index\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",3865),0));
    (void) ((!!(n < _AP_W && "Shift value larger than bit width")) || (_assert("n < _AP_W && \"Shift value larger than bit width\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",3866),0));
    operator=(lshr(n) | shl(_AP_W - n));
  }



  inline ap_private& clear(uint32_t bitPosition) {
    pVal[whichWord(bitPosition)] &= ~maskBit(bitPosition);
    clearUnusedBits();
    return *this;
  }


  inline void clear() { memset(pVal, 0, _AP_N * APINT_WORD_SIZE); }


                ap_private& flip() {
    for (int i = 0; i < _AP_N; ++i) pVal[i] ^= ~0ULL;
    clearUnusedBits();
    return *this;
  }


  inline ap_private& flip(uint32_t bitPosition) {
    (void) ((!!(bitPosition < BitWidth && "Out of the bit-width range!")) || (_assert("bitPosition < BitWidth && \"Out of the bit-width range!\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",3890),0));
    set_bit(bitPosition, !get_bit(bitPosition));
    return *this;
  }


                inline void b_not() { flip(); }

                inline ap_private getLoBits(uint32_t numBits) const {
    return ap_private_ops::lshr(ap_private_ops::shl(*this, _AP_W - numBits),
                                _AP_W - numBits);
  }

                inline ap_private getHiBits(uint32_t numBits) const {
    return ap_private_ops::lshr(*this, _AP_W - numBits);
  }
# 3949 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
  template <int _AP_W1, bool _AP_S1> inline ap_private& operator &=(const ap_private<_AP_W1, _AP_S1>& RHS) { const int _AP_N1 = ap_private<_AP_W1, _AP_S1>::_AP_N; uint32_t numWords = AESL_std::min((int)_AP_N, _AP_N1); uint32_t i = 0; if (_AP_W != _AP_W1) fprintf((__acrt_iob_func(2)), "Warning! Bitsize mismach for ap_[u]int " "&=" " ap_[u]int.\n"); for (i = 0; i < numWords; ++i) pVal[i] &= RHS.get_pVal(i); if (_AP_N1 < _AP_N) { uint64_t ext = RHS.isNegative() ? ~0ULL : 0; for (; i < _AP_N; i++) pVal[i] &= ext; } clearUnusedBits(); return *this; };
  template <int _AP_W1, bool _AP_S1> inline ap_private& operator |=(const ap_private<_AP_W1, _AP_S1>& RHS) { const int _AP_N1 = ap_private<_AP_W1, _AP_S1>::_AP_N; uint32_t numWords = AESL_std::min((int)_AP_N, _AP_N1); uint32_t i = 0; if (_AP_W != _AP_W1) fprintf((__acrt_iob_func(2)), "Warning! Bitsize mismach for ap_[u]int " "|=" " ap_[u]int.\n"); for (i = 0; i < numWords; ++i) pVal[i] |= RHS.get_pVal(i); if (_AP_N1 < _AP_N) { uint64_t ext = RHS.isNegative() ? ~0ULL : 0; for (; i < _AP_N; i++) pVal[i] |= ext; } clearUnusedBits(); return *this; };
  template <int _AP_W1, bool _AP_S1> inline ap_private& operator ^=(const ap_private<_AP_W1, _AP_S1>& RHS) { const int _AP_N1 = ap_private<_AP_W1, _AP_S1>::_AP_N; uint32_t numWords = AESL_std::min((int)_AP_N, _AP_N1); uint32_t i = 0; if (_AP_W != _AP_W1) fprintf((__acrt_iob_func(2)), "Warning! Bitsize mismach for ap_[u]int " "^=" " ap_[u]int.\n"); for (i = 0; i < numWords; ++i) pVal[i] ^= RHS.get_pVal(i); if (_AP_N1 < _AP_N) { uint64_t ext = RHS.isNegative() ? ~0ULL : 0; for (; i < _AP_N; i++) pVal[i] ^= ext; } clearUnusedBits(); return *this; };





  template <int _AP_W1, bool _AP_S1>
                inline ap_private& operator+=(const ap_private<_AP_W1, _AP_S1>& RHS) {
    const int _AP_N1 = ap_private<_AP_W1, _AP_S1>::_AP_N;
    uint64_t RHSpVal[_AP_N1] = {0};
    for (int i = 0; i < _AP_N1; ++i) RHSpVal[i] = RHS.get_pVal(i);
    ap_private_ops::add(pVal, pVal, RHSpVal, _AP_N, _AP_N, _AP_N1, _AP_S,
                        _AP_S1);
    clearUnusedBits();
    return *this;
  }

  template <int _AP_W1, bool _AP_S1>
                inline ap_private& operator-=(const ap_private<_AP_W1, _AP_S1>& RHS) {
    const int _AP_N1 = ap_private<_AP_W1, _AP_S1>::_AP_N;
    uint64_t RHSpVal[_AP_N1] = {0};
    for (int i = 0; i < _AP_N1; ++i) RHSpVal[i] = RHS.get_pVal(i);
    ap_private_ops::sub(pVal, pVal, RHSpVal, _AP_N, _AP_N, _AP_N1, _AP_S,
                        _AP_S1);
    clearUnusedBits();
    return *this;
  }

  template <int _AP_W1, bool _AP_S1>
                inline ap_private& operator*=(const ap_private<_AP_W1, _AP_S1>& RHS) {

    uint32_t lhsBits = getActiveBits();
    uint32_t lhsWords = !lhsBits ? 0 : whichWord(lhsBits - 1) + 1;
    if (!lhsWords) {

      return *this;
    }

    ap_private dupRHS = RHS;

    uint32_t rhsBits = dupRHS.getActiveBits();
    uint32_t rhsWords = !rhsBits ? 0 : whichWord(rhsBits - 1) + 1;
    if (!rhsWords) {

      clear();
      return *this;
    }


    uint32_t destWords = rhsWords + lhsWords;
    uint64_t* dest = (uint64_t*)malloc(destWords * sizeof(uint64_t));


    ap_private_ops::mul(dest, pVal, lhsWords, dupRHS.get_pVal(), rhsWords,
                        destWords);


    clear();
    uint32_t wordsToCopy = destWords >= _AP_N ? _AP_N : destWords;

    for (int i = 0; i < wordsToCopy; ++i) pVal[i] = dest[i];


    uint64_t ext = (isNegative() ^ RHS.isNegative()) ? ~0ULL : 0ULL;
    for (int i = wordsToCopy; i < _AP_N; i++) pVal[i] = ext;
    clearUnusedBits();

    free(dest);
    return *this;
  }
# 4029 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
  template <int _AP_W2, bool _AP_S2> inline ap_private& operator /=(const ap_private<_AP_W2, _AP_S2>& op) { *this = operator /(op); return *this; }
  template <int _AP_W2, bool _AP_S2> inline ap_private& operator %=(const ap_private<_AP_W2, _AP_S2>& op) { *this = operator %(op); return *this; }
# 4069 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
  template <int _AP_W1, bool _AP_S1> inline typename RType<_AP_W1, _AP_S1>::logic operator |( const ap_private<_AP_W1, _AP_S1>& RHS) const { enum { numWords = (RType<_AP_W1, _AP_S1>::logic_w + APINT_BITS_PER_WORD - 1) / APINT_BITS_PER_WORD }; typename RType<_AP_W1, _AP_S1>::logic Result(0); uint32_t i = 0; const int _AP_N1 = ap_private<_AP_W1, _AP_S1>::_AP_N; uint32_t min_N = std::min((int)_AP_N, _AP_N1); uint32_t max_N = std::max((int)_AP_N, _AP_N1); for (i = 0; i < min_N; ++i) Result.set_pVal(i, pVal[i] | RHS.get_pVal(i)); if (numWords > i) { uint64_t ext = ((_AP_N < _AP_N1 && isNegative()) || (_AP_N1 < _AP_N && RHS.isNegative())) ? ~0ULL : 0; if (_AP_N > _AP_N1) for (; i < max_N; i++) Result.set_pVal(i, pVal[i] | ext); else for (; i < max_N; i++) Result.set_pVal(i, RHS.get_pVal(i) | ext); if (numWords > i) { uint64_t ext2 = ((_AP_N > _AP_N1 && isNegative()) || (_AP_N1 > _AP_N && RHS.isNegative())) ? ~0ULL : 0; Result.set_pVal(i, ext | ext2); } } Result.clearUnusedBits(); return Result; };
  template <int _AP_W1, bool _AP_S1> inline typename RType<_AP_W1, _AP_S1>::logic operator &( const ap_private<_AP_W1, _AP_S1>& RHS) const { enum { numWords = (RType<_AP_W1, _AP_S1>::logic_w + APINT_BITS_PER_WORD - 1) / APINT_BITS_PER_WORD }; typename RType<_AP_W1, _AP_S1>::logic Result(0); uint32_t i = 0; const int _AP_N1 = ap_private<_AP_W1, _AP_S1>::_AP_N; uint32_t min_N = std::min((int)_AP_N, _AP_N1); uint32_t max_N = std::max((int)_AP_N, _AP_N1); for (i = 0; i < min_N; ++i) Result.set_pVal(i, pVal[i] & RHS.get_pVal(i)); if (numWords > i) { uint64_t ext = ((_AP_N < _AP_N1 && isNegative()) || (_AP_N1 < _AP_N && RHS.isNegative())) ? ~0ULL : 0; if (_AP_N > _AP_N1) for (; i < max_N; i++) Result.set_pVal(i, pVal[i] & ext); else for (; i < max_N; i++) Result.set_pVal(i, RHS.get_pVal(i) & ext); if (numWords > i) { uint64_t ext2 = ((_AP_N > _AP_N1 && isNegative()) || (_AP_N1 > _AP_N && RHS.isNegative())) ? ~0ULL : 0; Result.set_pVal(i, ext & ext2); } } Result.clearUnusedBits(); return Result; };
  template <int _AP_W1, bool _AP_S1> inline typename RType<_AP_W1, _AP_S1>::logic operator ^( const ap_private<_AP_W1, _AP_S1>& RHS) const { enum { numWords = (RType<_AP_W1, _AP_S1>::logic_w + APINT_BITS_PER_WORD - 1) / APINT_BITS_PER_WORD }; typename RType<_AP_W1, _AP_S1>::logic Result(0); uint32_t i = 0; const int _AP_N1 = ap_private<_AP_W1, _AP_S1>::_AP_N; uint32_t min_N = std::min((int)_AP_N, _AP_N1); uint32_t max_N = std::max((int)_AP_N, _AP_N1); for (i = 0; i < min_N; ++i) Result.set_pVal(i, pVal[i] ^ RHS.get_pVal(i)); if (numWords > i) { uint64_t ext = ((_AP_N < _AP_N1 && isNegative()) || (_AP_N1 < _AP_N && RHS.isNegative())) ? ~0ULL : 0; if (_AP_N > _AP_N1) for (; i < max_N; i++) Result.set_pVal(i, pVal[i] ^ ext); else for (; i < max_N; i++) Result.set_pVal(i, RHS.get_pVal(i) ^ ext); if (numWords > i) { uint64_t ext2 = ((_AP_N > _AP_N1 && isNegative()) || (_AP_N1 > _AP_N && RHS.isNegative())) ? ~0ULL : 0; Result.set_pVal(i, ext ^ ext2); } } Result.clearUnusedBits(); return Result; };



  template <int _AP_W1, bool _AP_S1>
                inline typename RType<_AP_W1, _AP_S1>::plus operator+(
      const ap_private<_AP_W1, _AP_S1>& RHS) const {
    typename RType<_AP_W1, _AP_S1>::plus Result(0), lhs(*this), rhs(RHS);
    const int Result_AP_N = (RType<_AP_W1, _AP_S1>::plus_w + 63) / 64;
    ap_private_ops::add(Result.get_pVal(), lhs.get_pVal(), rhs.get_pVal(),
                        Result_AP_N, Result_AP_N, Result_AP_N, _AP_S, _AP_S1);
    Result.clearUnusedBits();
    return Result;
  }

  template <int _AP_W1, bool _AP_S1>
                inline typename RType<_AP_W1, _AP_S1>::minus operator-(
      const ap_private<_AP_W1, _AP_S1>& RHS) const {
    typename RType<_AP_W1, _AP_S1>::minus Result(0), lhs(*this), rhs(RHS);
    const int Result_AP_N = (RType<_AP_W1, _AP_S1>::minus_w + 63) / 64;
    ap_private_ops::sub(Result.get_pVal(), lhs.get_pVal(), rhs.get_pVal(),
                        Result_AP_N, Result_AP_N, Result_AP_N, _AP_S, _AP_S1);
    Result.clearUnusedBits();
    return Result;
  }

  template <int _AP_W1, bool _AP_S1>
                inline typename RType<_AP_W1, _AP_S1>::mult operator*(
      const ap_private<_AP_W1, _AP_S1>& RHS) const {
    typename RType<_AP_W1, _AP_S1>::mult temp = *this;
    temp *= RHS;
    return temp;
  }

  template <int _AP_W2, bool _AP_S2>
                inline typename RType<_AP_W2, _AP_S2>::div operator/(
      const ap_private<_AP_W2, _AP_S2>& op) const {
    ap_private<((_AP_W + (_AP_S || _AP_S2)) > (_AP_W2 + (_AP_S || _AP_S2)) ? (_AP_W + (_AP_S || _AP_S2)) : (_AP_W2 + (_AP_S || _AP_S2))),
               (_AP_W > _AP_W2 ? _AP_S
                               : (_AP_W2 > _AP_W ? _AP_S2 : _AP_S || _AP_S2))>
        lhs = *this;
    ap_private<((_AP_W + (_AP_S || _AP_S2)) > (_AP_W2 + (_AP_S || _AP_S2)) ? (_AP_W + (_AP_S || _AP_S2)) : (_AP_W2 + (_AP_S || _AP_S2))),
               (_AP_W > _AP_W2 ? _AP_S
                               : (_AP_W2 > _AP_W ? _AP_S2 : _AP_S || _AP_S2))>
        rhs = op;
    return typename RType<_AP_W2, _AP_S2>::div(
        (_AP_S || _AP_S2) ? lhs.sdiv(rhs) : lhs.udiv(rhs));
  }

  template <int _AP_W2, bool _AP_S2>
                inline typename RType<_AP_W2, _AP_S2>::mod operator%(
      const ap_private<_AP_W2, _AP_S2>& op) const {
    ap_private<((_AP_W + (_AP_S || _AP_S2)) > (_AP_W2 + (_AP_S || _AP_S2)) ? (_AP_W + (_AP_S || _AP_S2)) : (_AP_W2 + (_AP_S || _AP_S2))),
               (_AP_W > _AP_W2 ? _AP_S
                               : (_AP_W2 > _AP_W ? _AP_S2 : _AP_S || _AP_S2))>
        lhs = *this;
    ap_private<((_AP_W + (_AP_S || _AP_S2)) > (_AP_W2 + (_AP_S || _AP_S2)) ? (_AP_W + (_AP_S || _AP_S2)) : (_AP_W2 + (_AP_S || _AP_S2))),
               (_AP_W > _AP_W2 ? _AP_S
                               : (_AP_W2 > _AP_W ? _AP_S2 : _AP_S || _AP_S2))>
        rhs = op;
    typename RType<_AP_W2, _AP_S2>::mod res =
        typename RType<_AP_W2, _AP_S2>::mod(_AP_S ? lhs.srem(rhs)
                                                  : lhs.urem(rhs));
    return res;
  }
# 4144 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
                inline ap_private operator<<(const int op) const { if (op >= _AP_W) return ap_private(0); if (true && op < 0) return *this >> (0 - op); return shl(op); }

                inline ap_private operator<<(const signed char op) const { if (op >= _AP_W) return ap_private(0); if (true && op < 0) return *this >> (0 - op); return shl(op); }
                inline ap_private operator<<(const unsigned char op) const { if (op >= _AP_W) return ap_private(0); if (false && op < 0) return *this >> (0 - op); return shl(op); }
                inline ap_private operator<<(const short op) const { if (op >= _AP_W) return ap_private(0); if (true && op < 0) return *this >> (0 - op); return shl(op); }
                inline ap_private operator<<(const unsigned short op) const { if (op >= _AP_W) return ap_private(0); if (false && op < 0) return *this >> (0 - op); return shl(op); }
                inline ap_private operator<<(const unsigned int op) const { if (op >= _AP_W) return ap_private(0); if (false && op < 0) return *this >> (0 - op); return shl(op); }
                inline ap_private operator<<(const long op) const { if (op >= _AP_W) return ap_private(0); if (true && op < 0) return *this >> (0 - op); return shl(op); }
                inline ap_private operator<<(const unsigned long op) const { if (op >= _AP_W) return ap_private(0); if (false && op < 0) return *this >> (0 - op); return shl(op); }
                inline ap_private operator<<(const unsigned long long op) const { if (op >= _AP_W) return ap_private(0); if (false && op < 0) return *this >> (0 - op); return shl(op); }
                inline ap_private operator<<(const long long op) const { if (op >= _AP_W) return ap_private(0); if (true && op < 0) return *this >> (0 - op); return shl(op); }
  inline ap_private operator<<(const half op) const { if (op >= _AP_W) return ap_private(0); if (false && op < 0) return *this >> (0 - op); return shl(op); }
                inline ap_private operator<<(const float op) const { if (op >= _AP_W) return ap_private(0); if (false && op < 0) return *this >> (0 - op); return shl(op); }
                inline ap_private operator<<(const double op) const { if (op >= _AP_W) return ap_private(0); if (false && op < 0) return *this >> (0 - op); return shl(op); }


  template <int _AP_W2, bool _AP_S2>
                inline ap_private operator<<(const ap_private<_AP_W2, _AP_S2>& op2) const {
    if (_AP_S2 == false) {
      uint32_t sh = op2.to_uint();
      return *this << sh;
    } else {
      int sh = op2.to_int();
      return *this << sh;
    }
  }
# 4187 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
                inline ap_private operator>>(const char op) const { if (op >= _AP_W) { if (isNegative()) return ap_private(-1); else return ap_private(0); } if ((CHAR_IS_SIGNED) && op < 0) return *this << (0 - op); if (_AP_S) return ashr(op); else return lshr(op); }
                inline ap_private operator>>(const signed char op) const { if (op >= _AP_W) { if (isNegative()) return ap_private(-1); else return ap_private(0); } if ((true) && op < 0) return *this << (0 - op); if (_AP_S) return ashr(op); else return lshr(op); }
                inline ap_private operator>>(const unsigned char op) const { if (op >= _AP_W) { if (isNegative()) return ap_private(-1); else return ap_private(0); } if ((false) && op < 0) return *this << (0 - op); if (_AP_S) return ashr(op); else return lshr(op); }
                inline ap_private operator>>(const short op) const { if (op >= _AP_W) { if (isNegative()) return ap_private(-1); else return ap_private(0); } if ((true) && op < 0) return *this << (0 - op); if (_AP_S) return ashr(op); else return lshr(op); }
                inline ap_private operator>>(const unsigned short op) const { if (op >= _AP_W) { if (isNegative()) return ap_private(-1); else return ap_private(0); } if ((false) && op < 0) return *this << (0 - op); if (_AP_S) return ashr(op); else return lshr(op); }
                inline ap_private operator>>(const int op) const { if (op >= _AP_W) { if (isNegative()) return ap_private(-1); else return ap_private(0); } if ((true) && op < 0) return *this << (0 - op); if (_AP_S) return ashr(op); else return lshr(op); }
                inline ap_private operator>>(const unsigned int op) const { if (op >= _AP_W) { if (isNegative()) return ap_private(-1); else return ap_private(0); } if ((false) && op < 0) return *this << (0 - op); if (_AP_S) return ashr(op); else return lshr(op); }
                inline ap_private operator>>(const long op) const { if (op >= _AP_W) { if (isNegative()) return ap_private(-1); else return ap_private(0); } if ((true) && op < 0) return *this << (0 - op); if (_AP_S) return ashr(op); else return lshr(op); }
                inline ap_private operator>>(const unsigned long op) const { if (op >= _AP_W) { if (isNegative()) return ap_private(-1); else return ap_private(0); } if ((false) && op < 0) return *this << (0 - op); if (_AP_S) return ashr(op); else return lshr(op); }
                inline ap_private operator>>(const unsigned long long op) const { if (op >= _AP_W) { if (isNegative()) return ap_private(-1); else return ap_private(0); } if ((false) && op < 0) return *this << (0 - op); if (_AP_S) return ashr(op); else return lshr(op); }
                inline ap_private operator>>(const long long op) const { if (op >= _AP_W) { if (isNegative()) return ap_private(-1); else return ap_private(0); } if ((true) && op < 0) return *this << (0 - op); if (_AP_S) return ashr(op); else return lshr(op); }
  inline ap_private operator>>(const half op) const { if (op >= _AP_W) { if (isNegative()) return ap_private(-1); else return ap_private(0); } if ((false) && op < 0) return *this << (0 - op); if (_AP_S) return ashr(op); else return lshr(op); }
                inline ap_private operator>>(const float op) const { if (op >= _AP_W) { if (isNegative()) return ap_private(-1); else return ap_private(0); } if ((false) && op < 0) return *this << (0 - op); if (_AP_S) return ashr(op); else return lshr(op); }
                inline ap_private operator>>(const double op) const { if (op >= _AP_W) { if (isNegative()) return ap_private(-1); else return ap_private(0); } if ((false) && op < 0) return *this << (0 - op); if (_AP_S) return ashr(op); else return lshr(op); }


  template <int _AP_W2, bool _AP_S2>
                inline ap_private operator>>(const ap_private<_AP_W2, _AP_S2>& op2) const {
    if (_AP_S2 == false) {
      uint32_t sh = op2.to_uint();
      return *this >> sh;
    } else {
      int sh = op2.to_int();
      return *this >> sh;
    }
  }
# 4232 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
  template <int _AP_W2, bool _AP_S2> inline ap_private& operator >>=(int op) { *this = operator >>(op); return *this; } inline ap_private& operator >>=(unsigned int op) { *this = operator >>(op); return *this; } template <int _AP_W2, bool _AP_S2> inline ap_private& operator >>=(const ap_private<_AP_W2, _AP_S2>& op) { *this = operator >>(op); return *this; }
  template <int _AP_W2, bool _AP_S2> inline ap_private& operator <<=(int op) { *this = operator <<(op); return *this; } inline ap_private& operator <<=(unsigned int op) { *this = operator <<(op); return *this; } template <int _AP_W2, bool _AP_S2> inline ap_private& operator <<=(const ap_private<_AP_W2, _AP_S2>& op) { *this = operator <<(op); return *this; }




                inline bool operator==(const ap_private& RHS) const {
    ap_private<_AP_W, _AP_S, false> LHS_(*this);
    LHS_.clearUnusedBits();
    ap_private RHS_(RHS);
    RHS_.clearUnusedBits();


    uint32_t n1 = LHS_.getActiveBits();
    uint32_t n2 = RHS_.getActiveBits();


    if (n1 != n2) return false;



    if (n1 <= APINT_BITS_PER_WORD) return LHS_.get_pVal(0) == RHS_.get_pVal(0);


    for (int i = whichWord(n1 - 1); i >= 0; --i)
      if (LHS_.get_pVal(i) != RHS_.get_pVal(i)) return false;
    return true;
  }

  template <int _AP_W2, bool _AP_S2>
                inline bool operator==(const ap_private<_AP_W2, _AP_S2>& op) const {
    ap_private<_AP_W, _AP_S, false> LHS_(*this);
    LHS_.clearUnusedBits();

    ap_private<_AP_W2, _AP_S2> RHS_(op);
    RHS_.clearUnusedBits();

    enum {
      _AP_MAX_W = ((_AP_W) > (_AP_W2) ? (_AP_W) : (_AP_W2)),
    };
    ap_private<_AP_MAX_W, false> lhs(LHS_);
    ap_private<_AP_MAX_W, false> rhs(RHS_);
    return lhs == rhs;
  }

                inline bool operator==(uint64_t Val) const {
    ap_private<_AP_W, _AP_S, false> LHS_(*this);
    LHS_.clearUnusedBits();

    uint32_t n = LHS_.getActiveBits();
    if (n <= APINT_BITS_PER_WORD)
      return LHS_.get_pVal(0) == Val;
    else
      return false;
  }

  template <int _AP_W2, bool _AP_S2>
                inline bool operator!=(const ap_private<_AP_W2, _AP_S2>& op) const {
    return !(*this == op);
  }

  template <bool _AP_S1>
                inline bool operator!=(const ap_private<_AP_W, _AP_S1>& RHS) const {
    return !((*this) == RHS);
  }

                inline bool operator!=(uint64_t Val) const { return !((*this) == Val); }

  template <int _AP_W2, bool _AP_S2>
                inline bool operator<=(const ap_private<_AP_W2, _AP_S2>& op) const {
    return !(*this > op);
  }

                inline bool operator<(const ap_private& op) const {
    return _AP_S ? slt(op) : ult(op);
  }

  template <int _AP_W2, bool _AP_S2>
                inline bool operator<(const ap_private<_AP_W2, _AP_S2>& op) const {
    ap_private<_AP_W, _AP_S, false> LHS_(*this);
    LHS_.clearUnusedBits();

    ap_private<_AP_W2, _AP_S2> RHS_(op);
    RHS_.clearUnusedBits();

    enum {
      _AP_MAX_W = ((_AP_W + (_AP_S || _AP_S2)) > (_AP_W2 + (_AP_S || _AP_S2)) ? (_AP_W + (_AP_S || _AP_S2)) : (_AP_W2 + (_AP_S || _AP_S2)))
    };
    ap_private<_AP_MAX_W, _AP_S> lhs(LHS_);
    ap_private<_AP_MAX_W, _AP_S2> rhs(RHS_);
    if (_AP_S == _AP_S2)
      return _AP_S ? lhs.slt(rhs) : lhs.ult(rhs);
    else if (_AP_S)
      if (_AP_W2 >= _AP_W)
        return lhs.ult(rhs);
      else
        return lhs.slt(rhs);
    else if (_AP_W >= _AP_W2)
      return lhs.ult(rhs);
    else
      return lhs.slt(rhs);
  }

  template <int _AP_W2, bool _AP_S2>
                inline bool operator>=(const ap_private<_AP_W2, _AP_S2>& op) const {
    return !(*this < op);
  }

                inline bool operator>(const ap_private& op) const {
    return _AP_S ? sgt(op) : ugt(op);
  }

  template <int _AP_W2, bool _AP_S2>
                inline bool operator>(const ap_private<_AP_W2, _AP_S2>& op) const {
    ap_private<_AP_W, _AP_S, false> LHS_(*this);
    LHS_.clearUnusedBits();

    ap_private<_AP_W2, _AP_S2> RHS_(op);
    RHS_.clearUnusedBits();

    enum {
      _AP_MAX_W = ((_AP_W + (_AP_S || _AP_S2)) > (_AP_W2 + (_AP_S || _AP_S2)) ? (_AP_W + (_AP_S || _AP_S2)) : (_AP_W2 + (_AP_S || _AP_S2)))
    };
    ap_private<_AP_MAX_W, _AP_S> lhs(LHS_);
    ap_private<_AP_MAX_W, _AP_S2> rhs(RHS_);
    if (_AP_S == _AP_S2)
      return _AP_S ? lhs.sgt(rhs) : lhs.ugt(rhs);
    else if (_AP_S)
      if (_AP_W2 >= _AP_W)
        return lhs.ugt(rhs);
      else
        return lhs.sgt(rhs);
    else if (_AP_W >= _AP_W2)
      return lhs.ugt(rhs);
    else
      return lhs.sgt(rhs);
  }



  inline _private_range_ref<_AP_W, _AP_S> operator()(int Hi, int Lo) {
    return _private_range_ref<_AP_W, _AP_S>(this, Hi, Lo);
  }

  inline _private_range_ref<_AP_W, _AP_S> operator()(int Hi, int Lo) const {
    return _private_range_ref<_AP_W, _AP_S>(
        const_cast<ap_private<_AP_W, _AP_S>*>(this), Hi, Lo);
  }

  inline _private_range_ref<_AP_W, _AP_S> range(int Hi, int Lo) const {
    return _private_range_ref<_AP_W, _AP_S>(
        (const_cast<ap_private<_AP_W, _AP_S>*>(this)), Hi, Lo);
  }

  inline _private_range_ref<_AP_W, _AP_S> range(int Hi, int Lo) {
    return _private_range_ref<_AP_W, _AP_S>(this, Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline _private_range_ref<_AP_W, _AP_S> range(
      const ap_private<_AP_W2, _AP_S2>& HiIdx,
      const ap_private<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return _private_range_ref<_AP_W, _AP_S>(this, Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline _private_range_ref<_AP_W, _AP_S> operator()(
      const ap_private<_AP_W2, _AP_S2>& HiIdx,
      const ap_private<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return _private_range_ref<_AP_W, _AP_S>(this, Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline _private_range_ref<_AP_W, _AP_S> range(
      const ap_private<_AP_W2, _AP_S2>& HiIdx,
      const ap_private<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return _private_range_ref<_AP_W, _AP_S>(const_cast<ap_private*>(this), Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline _private_range_ref<_AP_W, _AP_S> operator()(
      const ap_private<_AP_W2, _AP_S2>& HiIdx,
      const ap_private<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline _private_bit_ref<_AP_W, _AP_S> operator[](int index) {
    return _private_bit_ref<_AP_W, _AP_S>(*this, index);
  }

  template <int _AP_W2, bool _AP_S2>
  inline _private_bit_ref<_AP_W, _AP_S> operator[](
      const ap_private<_AP_W2, _AP_S2>& index) {
    return _private_bit_ref<_AP_W, _AP_S>(*this, index.to_int());
  }

  template <int _AP_W2, bool _AP_S2>
  inline const _private_bit_ref<_AP_W, _AP_S> operator[](
      const ap_private<_AP_W2, _AP_S2>& index) const {
    return _private_bit_ref<_AP_W, _AP_S>(
        const_cast<ap_private<_AP_W, _AP_S>&>(*this), index.to_int());
  }

  inline const _private_bit_ref<_AP_W, _AP_S> operator[](int index) const {
    return _private_bit_ref<_AP_W, _AP_S>(
        const_cast<ap_private<_AP_W, _AP_S>&>(*this), index);
  }

  inline _private_bit_ref<_AP_W, _AP_S> bit(int index) {
    return _private_bit_ref<_AP_W, _AP_S>(*this, index);
  }

  template <int _AP_W2, bool _AP_S2>
  inline _private_bit_ref<_AP_W, _AP_S> bit(const ap_private<_AP_W2, _AP_S2>& index) {
    return _private_bit_ref<_AP_W, _AP_S>(*this, index.to_int());
  }

  inline const _private_bit_ref<_AP_W, _AP_S> bit(int index) const {
    return _private_bit_ref<_AP_W, _AP_S>(
        const_cast<ap_private<_AP_W, _AP_S>&>(*this), index);
  }

  template <int _AP_W2, bool _AP_S2>
  inline const _private_bit_ref<_AP_W, _AP_S> bit(
      const ap_private<_AP_W2, _AP_S2>& index) const {
    return _private_bit_ref<_AP_W, _AP_S>(
        const_cast<ap_private<_AP_W, _AP_S>&>(*this), index.to_int());
  }
# 4628 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
                inline ap_private<_AP_W, false> get() const {
    ap_private<_AP_W, false> ret(*this);
    return ret;
  }

  template <int _AP_W3>
  inline void set(const ap_private<_AP_W3, false>& val) {
    operator=(ap_private<_AP_W3, _AP_S>(val));
  }







                inline bool isNegative() const {

    enum { shift = (_AP_W - APINT_BITS_PER_WORD * (_AP_N - 1) - 1) };

    const uint64_t mask = 1ULL << (shift);
    return _AP_S && (pVal[_AP_N - 1] & mask);
  }



                inline bool isPositive() const { return !isNegative(); }




                inline bool isStrictlyPositive() const {
    return isPositive() && (*this) != 0;
  }




  inline bool isAllOnesValue() const { return countPopulation() == _AP_W; }




  inline bool isMaxValue() const { return countPopulation() == _AP_W; }




  inline bool isMaxSignedValue() const {
    return !isNegative() && countPopulation() == _AP_W - 1;
  }




                inline bool isMinValue() const { return countPopulation() == 0; }




  inline bool isMinSignedValue() const {
    return isNegative() && countPopulation() == 1;
  }




                inline const uint64_t* getRawData() const { return &pVal[0]; }
# 4704 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
  inline ap_private sqrt() const {

    uint32_t magnitude = getActiveBits();



    if (magnitude <= 5) {
      static const uint8_t results[32] = {
                      0,
                      1, 1,
                      2, 2, 2, 2,
                      3, 3, 3, 3, 3, 3,
                      4, 4, 4, 4, 4, 4, 4, 4,
                      5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                      6};
      return ap_private<_AP_W, _AP_S>( results[get_VAL()]);
    }





    if (magnitude < 52) {






      return ap_private<_AP_W, _AP_S>(
                                      uint64_t(
                                          ::round(::sqrt(double(get_VAL())))));

    }






    uint32_t nbits = BitWidth, i = 4;
    ap_private<_AP_W, _AP_S> testy(16);
    ap_private<_AP_W, _AP_S> x_old( 1);
    ap_private<_AP_W, _AP_S> x_new(0);
    ap_private<_AP_W, _AP_S> two( 2);


    for (;; i += 2, testy = testy.shl(2))
      if (i >= nbits || this->ule(testy)) {
        x_old = x_old.shl(i / 2);
        break;
      }


    for (;;) {
      x_new = (this->udiv(x_old) + x_old).udiv(two);
      if (x_old.ule(x_new)) break;
      x_old = x_new;
    }
# 4771 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
    ap_private<_AP_W, _AP_S> square(x_old * x_old);
    ap_private<_AP_W, _AP_S> nextSquare((x_old + 1) * (x_old + 1));
    if (this->ult(square))
      return x_old;
    else if (this->ule(nextSquare)) {
      ap_private<_AP_W, _AP_S> midpoint((nextSquare - square).udiv(two));
      ap_private<_AP_W, _AP_S> offset(*this - square);
      if (offset.ult(midpoint))
        return x_old;
      else
        return x_old + 1;
    } else
      (void) ((!!(0 && "Error in ap_private<_AP_W, _AP_S>::sqrt computation")) || (_assert("0 && \"Error in ap_private<_AP_W, _AP_S>::sqrt computation\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",4783),0));
    return x_old + 1;
  }






                inline ap_private& operator=(const ap_private& RHS) {
    if (this != &RHS)
      for (int i = 0; i < _AP_N; ++i) pVal[i] = RHS.get_pVal(i);
    clearUnusedBits();
    return *this;
  }
  inline ap_private& operator=(const volatile ap_private& RHS) {
    if (this != &RHS)
      for (int i = 0; i < _AP_N; ++i) pVal[i] = RHS.get_pVal(i);
    clearUnusedBits();
    return *this;
  }
  inline void operator=(const ap_private& RHS) volatile {
    if (this != &RHS)
      for (int i = 0; i < _AP_N; ++i) pVal[i] = RHS.get_pVal(i);
    clearUnusedBits();
  }
  inline void operator=(const volatile ap_private& RHS) volatile {
    if (this != &RHS)
      for (int i = 0; i < _AP_N; ++i) pVal[i] = RHS.get_pVal(i);
    clearUnusedBits();
  }

  template <int _AP_W1, bool _AP_S1>
                inline ap_private& operator=(const ap_private<_AP_W1, _AP_S1>& RHS) {
    if (_AP_S1)
      cpSextOrTrunc(RHS);
    else
      cpZextOrTrunc(RHS);
    clearUnusedBits();
    return *this;
  }

  template <int _AP_W1, bool _AP_S1>
  inline ap_private& operator=(const volatile ap_private<_AP_W1, _AP_S1>& RHS) {
    if (_AP_S1)
      cpSextOrTrunc(RHS);
    else
      cpZextOrTrunc(RHS);
    clearUnusedBits();
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
                inline ap_private& operator=(const _private_range_ref<_AP_W2, _AP_S2>& op2) {
    *this = ap_private<_AP_W2, false>(op2);
    return *this;
  }
# 4879 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
  inline ap_private& operator=(const bool rhs) { ap_private<(1), (false)> tmp = rhs; operator=(tmp); return *this; }
  inline ap_private& operator=(const char rhs) { ap_private<(8), (CHAR_IS_SIGNED)> tmp = rhs; operator=(tmp); return *this; }
  inline ap_private& operator=(const signed char rhs) { ap_private<(8), (true)> tmp = rhs; operator=(tmp); return *this; }
  inline ap_private& operator=(const unsigned char rhs) { ap_private<(8), (false)> tmp = rhs; operator=(tmp); return *this; }
  inline ap_private& operator=(const short rhs) { ap_private<(sizeof(short) * 8), (true)> tmp = rhs; operator=(tmp); return *this; }
  inline ap_private& operator=(const unsigned short rhs) { ap_private<(sizeof(unsigned short) * 8), (false)> tmp = rhs; operator=(tmp); return *this; }
  inline ap_private& operator=(const int rhs) { ap_private<(sizeof(int) * 8), (true)> tmp = rhs; operator=(tmp); return *this; }
  inline ap_private& operator=(const unsigned int rhs) { ap_private<(sizeof(unsigned int) * 8), (false)> tmp = rhs; operator=(tmp); return *this; }
  inline ap_private& operator=(const long rhs) { ap_private<(sizeof(long) * 8), (true)> tmp = rhs; operator=(tmp); return *this; }
  inline ap_private& operator=(const unsigned long rhs) { ap_private<(sizeof(unsigned long) * 8), (false)> tmp = rhs; operator=(tmp); return *this; }
  inline ap_private& operator=(const ap_slong rhs) { ap_private<(sizeof(ap_slong) * 8), (true)> tmp = rhs; operator=(tmp); return *this; }
  inline ap_private& operator=(const ap_ulong rhs) { ap_private<(sizeof(ap_ulong) * 8), (false)> tmp = rhs; operator=(tmp); return *this; }




  inline ap_private& operator=(const char* s) {
    ap_private tmp(s);
    operator=(tmp);
    return *this;
  }






                inline const ap_private operator++(int) {
    ap_private API(*this);
    ++(*this);
    return API;
  }



                inline ap_private& operator++() {
    ap_private_ops::add_1(pVal, pVal, _AP_N, 1);
    clearUnusedBits();
    return *this;
  }



                inline const ap_private operator--(int) {
    ap_private API(*this);
    --(*this);
    return API;
  }



                inline ap_private& operator--() {
    ap_private_ops::sub_1(pVal, _AP_N, 1);
    clearUnusedBits();
    return *this;
  }




                inline ap_private<_AP_W + !_AP_S, true> operator~() const {
    ap_private<_AP_W + !_AP_S, true> Result(*this);
    Result.flip();
    return Result;
  }




                inline typename RType<1, false>::minus operator-() const {
    return ap_private<1, false>(0) - (*this);
  }




                inline bool operator!() const {
    for (int i = 0; i < _AP_N; ++i)
      if (pVal[i]) return false;
    return true;
  }

  template <bool _AP_S1>
                inline ap_private<_AP_W, _AP_S || _AP_S1> And(
      const ap_private<_AP_W, _AP_S1>& RHS) const {
    return this->operator&(RHS);
  }
  template <bool _AP_S1>
                inline ap_private Or(const ap_private<_AP_W, _AP_S1>& RHS) const {
    return this->operator|(RHS);
  }
  template <bool _AP_S1>
                inline ap_private Xor(const ap_private<_AP_W, _AP_S1>& RHS) const {
    return this->operator^(RHS);
  }

                inline ap_private Mul(const ap_private& RHS) const {
    ap_private Result(*this);
    Result *= RHS;
    return Result;
  }

                inline ap_private Add(const ap_private& RHS) const {
    ap_private Result(0);
    ap_private_ops::add(Result.get_pVal(), pVal, RHS.get_pVal(), _AP_N, _AP_N,
                        _AP_N, _AP_S, _AP_S);
    Result.clearUnusedBits();
    return Result;
  }

                inline ap_private Sub(const ap_private& RHS) const {
    ap_private Result(0);
    ap_private_ops::sub(Result.get_pVal(), pVal, RHS.get_pVal(), _AP_N, _AP_N,
                        _AP_N, _AP_S, _AP_S);
    Result.clearUnusedBits();
    return Result;
  }



  inline ap_private ashr(uint32_t shiftAmt) const {
    (void) ((!!(shiftAmt <= BitWidth && "Invalid shift amount, too big")) || (_assert("shiftAmt <= BitWidth && \"Invalid shift amount, too big\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",5000),0));

    if (shiftAmt == 0) return ap_private(*this);





    if (shiftAmt == BitWidth) {
      if (isNegative())
        return ap_private(-1);
      else
        return ap_private(0);
    }


    ap_private Retval(0);
    uint64_t* val = Retval.get_pVal();


    uint32_t wordShift =
        shiftAmt % APINT_BITS_PER_WORD;
    uint32_t offset = shiftAmt / APINT_BITS_PER_WORD;
    uint32_t breakWord = _AP_N - 1 - offset;
    uint32_t bitsInWord = whichBit(BitWidth);
    if (bitsInWord == 0) bitsInWord = APINT_BITS_PER_WORD;


    if (wordShift == 0) {

      for (uint32_t i = 0; i <= breakWord; ++i)
        val[i] = pVal[i + offset];


      if (isNegative())
        if (bitsInWord < APINT_BITS_PER_WORD)
          val[breakWord] |= ~0ULL << (bitsInWord);
    } else {

      for (uint32_t i = 0; i < breakWord; ++i) {


        val[i] = ((pVal[i + offset]) >> (wordShift));
        val[i] |= ((pVal[i + offset + 1]) << (APINT_BITS_PER_WORD - wordShift));
      }



      val[breakWord] = (pVal[breakWord + offset]) >> (wordShift);




      if (isNegative()) {
        if (wordShift > bitsInWord) {
          if (breakWord > 0)
            val[breakWord - 1] |=
                ~0ULL << (APINT_BITS_PER_WORD - (wordShift - bitsInWord));
          val[breakWord] |= ~0ULL;
        } else
          val[breakWord] |= (~0ULL << (bitsInWord - wordShift));
      }
    }


    uint64_t fillValue = (isNegative() ? ~0ULL : 0);
    for (int i = breakWord + 1; i < _AP_N; ++i) val[i] = fillValue;
    Retval.clearUnusedBits();
    return Retval;
  }



                inline ap_private lshr(uint32_t shiftAmt) const {



    if (shiftAmt == BitWidth) return ap_private(0);




    if (shiftAmt == 0) return ap_private(*this);


    ap_private Retval(0);
    uint64_t* val = Retval.get_pVal();



    if (shiftAmt < APINT_BITS_PER_WORD) {
      uint64_t carry = 0;
      for (int i = _AP_N - 1; i >= 0; --i) {
        val[i] = ((pVal[i]) >> (shiftAmt)) | carry;
        carry = (pVal[i]) << (APINT_BITS_PER_WORD - shiftAmt);
      }
      Retval.clearUnusedBits();
      return Retval;
    }


    uint32_t wordShift = shiftAmt % APINT_BITS_PER_WORD;
    uint32_t offset = shiftAmt / APINT_BITS_PER_WORD;


    if (wordShift == 0) {
      for (uint32_t i = 0; i < _AP_N - offset; ++i) val[i] = pVal[i + offset];
      for (uint32_t i = _AP_N - offset; i < _AP_N; i++) val[i] = 0;
      Retval.clearUnusedBits();
      return Retval;
    }


    uint32_t breakWord = _AP_N - offset - 1;
    for (uint32_t i = 0; i < breakWord; ++i)
      val[i] = ((pVal[i + offset]) >> (wordShift)) |
               ((pVal[i + offset + 1]) << (APINT_BITS_PER_WORD - wordShift));

    val[breakWord] = (pVal[breakWord + offset]) >> (wordShift);


    for (int i = breakWord + 1; i < _AP_N; ++i) val[i] = 0;
    Retval.clearUnusedBits();
    return Retval;
  }



                inline ap_private shl(uint32_t shiftAmt) const {
    (void) ((!!(shiftAmt <= BitWidth && "Invalid shift amount, too big")) || (_assert("shiftAmt <= BitWidth && \"Invalid shift amount, too big\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",5129),0));



    if (shiftAmt == BitWidth) return ap_private(0);





    if (shiftAmt == 0) return ap_private(*this);


    ap_private Retval(0);
    uint64_t* val = Retval.get_pVal();

    if (shiftAmt < APINT_BITS_PER_WORD) {
      uint64_t carry = 0;
      for (int i = 0; i < _AP_N; i++) {
        val[i] = ((pVal[i]) << (shiftAmt)) | carry;
        carry = (pVal[i]) >> (APINT_BITS_PER_WORD - shiftAmt);
      }
      Retval.clearUnusedBits();
      return Retval;
    }


    uint32_t wordShift = shiftAmt % APINT_BITS_PER_WORD;
    uint32_t offset = shiftAmt / APINT_BITS_PER_WORD;


    if (wordShift == 0) {
      for (uint32_t i = 0; i < offset; i++) val[i] = 0;
      for (int i = offset; i < _AP_N; i++) val[i] = pVal[i - offset];
      Retval.clearUnusedBits();
      return Retval;
    }


    uint32_t i = _AP_N - 1;
    for (; i > offset; --i)
      val[i] = (pVal[i - offset]) << (wordShift) |
               (pVal[i - offset - 1]) >> (APINT_BITS_PER_WORD - wordShift);
    val[offset] = (pVal[0]) << (wordShift);
    for (i = 0; i < offset; ++i) val[i] = 0;
    Retval.clearUnusedBits();
    return Retval;
  }

  inline ap_private rotl(uint32_t rotateAmt) const {
    if (rotateAmt == 0) return ap_private(*this);

    ap_private hi(*this);
    ap_private lo(*this);
    hi.shl(rotateAmt);
    lo.lshr(BitWidth - rotateAmt);
    return hi | lo;
  }

  inline ap_private rotr(uint32_t rotateAmt) const {
    if (rotateAmt == 0) return ap_private(*this);

    ap_private hi(*this);
    ap_private lo(*this);
    lo.lshr(rotateAmt);
    hi.shl(BitWidth - rotateAmt);
    return hi | lo;
  }






  inline ap_private udiv(const ap_private& RHS) const {
    ap_private<_AP_W, _AP_S, false> LHS_(*this);
    LHS_.clearUnusedBits();
    ap_private RHS_(RHS);
    RHS_.clearUnusedBits();


    uint32_t rhsBits = RHS_.getActiveBits();
    uint32_t rhsWords = !rhsBits ? 0 : (whichWord(rhsBits - 1) + 1);
    (void) ((!!(rhsWords && "Divided by zero???")) || (_assert("rhsWords && \"Divided by zero???\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",5212),0));
    uint32_t lhsBits = LHS_.getActiveBits();
    uint32_t lhsWords = !lhsBits ? 0 : (whichWord(lhsBits - 1) + 1);


    if (!lhsWords)

      return ap_private(0);
    else if (lhsWords < rhsWords || LHS_.ult(RHS_)) {

      return ap_private(0);
    } else if (LHS_ == RHS_) {

      return ap_private(1);
    } else if (lhsWords == 1 && rhsWords == 1) {

      return ap_private(LHS_.get_pVal(0) / RHS_.get_pVal(0));
    }


    ap_private Quotient(0);
    ap_private_ops::divide(LHS_, lhsWords, RHS_, rhsWords, &Quotient,
                           (ap_private*)0);
    return Quotient;
  }



  inline ap_private sdiv(const ap_private& RHS) const {
    ap_private<_AP_W, _AP_S, false> LHS_(*this);
    LHS_.clearUnusedBits();
    ap_private RHS_(RHS);
    RHS_.clearUnusedBits();

    if (LHS_.isNegative())
      if (RHS_.isNegative())
        return (-LHS_).udiv(-RHS_);
      else
        return -((-LHS_).udiv(RHS_));
    else if (RHS_.isNegative())
      return -(LHS_.udiv((ap_private)(-RHS_)));
    return LHS_.udiv(RHS_);
  }
# 5264 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
  inline ap_private urem(const ap_private& RHS) const {
    ap_private<_AP_W, _AP_S, false> LHS_(*this);
    LHS_.clearUnusedBits();
    ap_private RHS_(RHS);
    RHS_.clearUnusedBits();


    uint32_t lhsBits = LHS_.getActiveBits();
    uint32_t lhsWords = !lhsBits ? 0 : (whichWord(lhsBits - 1) + 1);


    uint32_t rhsBits = RHS_.getActiveBits();
    uint32_t rhsWords = !rhsBits ? 0 : (whichWord(rhsBits - 1) + 1);
    (void) ((!!(rhsWords && "Performing remainder operation by zero ???")) || (_assert("rhsWords && \"Performing remainder operation by zero ???\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",5277),0));


    if (lhsWords == 0) {

      return ap_private(0);
    } else if (lhsWords < rhsWords || LHS_.ult(RHS_)) {

      return LHS_;
    } else if (LHS_ == RHS_) {

      return ap_private(0);
    } else if (lhsWords == 1) {

      return ap_private(LHS_.get_pVal(0) % RHS_.get_pVal(0));
    }


    ap_private Remainder(0);
    ap_private_ops::divide(LHS_, lhsWords, RHS_, rhsWords, (ap_private*)(0),
                           &Remainder);
    return Remainder;
  }

  inline ap_private urem(uint64_t RHS) const {
    ap_private<_AP_W, _AP_S, false> LHS_(*this);
    LHS_.clearUnusedBits();


    uint32_t lhsBits = LHS_.getActiveBits();
    uint32_t lhsWords = !lhsBits ? 0 : (whichWord(lhsBits - 1) + 1);

    uint32_t rhsWords = 1;

    (void) ((!!(rhsWords && "Performing remainder operation by zero ???")) || (_assert("rhsWords && \"Performing remainder operation by zero ???\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",5311),0));

    if (lhsWords == 0) {

      return ap_private(0);
    } else if (lhsWords < rhsWords || LHS_.ult(RHS)) {

      return *this;
    } else if (LHS_ == RHS) {

      return ap_private(0);
    } else if (lhsWords == 1) {

      return ap_private(LHS_.get_pVal(0) % RHS);
    }


    ap_private Remainder(0);
    divide(LHS_, lhsWords, RHS, (ap_private*)(0), &Remainder);
    return Remainder;
  }



  inline ap_private srem(const ap_private& RHS) const {
    ap_private<_AP_W, _AP_S, false> LHS_(*this);
    LHS_.clearUnusedBits();
    ap_private RHS_(RHS);
    RHS_.clearUnusedBits();

    if (LHS_.isNegative()) {
      ap_private lhs = -LHS_;
      if (RHS_.isNegative()) {
        ap_private rhs = -RHS_;
        return -(lhs.urem(rhs));
      } else
        return -(lhs.urem(RHS_));
    } else if (RHS_.isNegative()) {
      ap_private rhs = -RHS_;
      return LHS_.urem(rhs);
    }
    return LHS_.urem(RHS);
  }



  inline ap_private srem(int64_t RHS) const {
    ap_private<_AP_W, _AP_S, false> LHS_(*this);
    LHS_.clearUnusedBits();

    if (LHS_.isNegative())
      if (RHS < 0)
        return -((-LHS_).urem(-RHS));
      else
        return -((-LHS_).urem(RHS));
    else if (RHS < 0)
      return LHS_.urem(-RHS);
    return LHS_.urem(RHS);
  }





  template <bool _AP_S1>
                inline bool eq(const ap_private<_AP_W, _AP_S1>& RHS) const {
    return (*this) == RHS;
  }





  template <bool _AP_S1>
                inline bool ne(const ap_private<_AP_W, _AP_S1>& RHS) const {
    return !((*this) == RHS);
  }





  template <bool _AP_S1>
                inline bool ult(const ap_private<_AP_W, _AP_S1>& RHS) const {
    ap_private<_AP_W, _AP_S, false> LHS_(*this);
    LHS_.clearUnusedBits();
    ap_private<_AP_W, _AP_S1> RHS_(RHS);
    RHS_.clearUnusedBits();


    uint32_t n1 = LHS_.getActiveBits();
    uint32_t n2 = RHS_.getActiveBits();


    if (n1 < n2) return true;


    if (n2 < n1) return false;


    if (n1 <= APINT_BITS_PER_WORD && n2 <= APINT_BITS_PER_WORD)
      return LHS_.get_pVal(0) < RHS_.get_pVal(0);


    uint32_t topWord = whichWord(AESL_std::max(n1, n2) - 1);
    for (int i = topWord; i >= 0; --i) {
      if (LHS_.get_pVal(i) > RHS_.get_pVal(i)) return false;
      if (LHS_.get_pVal(i) < RHS_.get_pVal(i)) return true;
    }
    return false;
  }

                inline bool ult(uint64_t RHS) const {
    ap_private<_AP_W, _AP_S, false> LHS_(*this);
    LHS_.clearUnusedBits();


    uint32_t n1 = LHS_.getActiveBits();
    uint32_t n2 =
        64 - ap_private_ops::CountLeadingZeros_64(RHS);


    if (n1 < n2) return true;


    if (n2 < n1) return false;


    if (n1 <= APINT_BITS_PER_WORD && n2 <= APINT_BITS_PER_WORD)
      return LHS_.get_pVal(0) < RHS;
    (void) ((!!(0)) || (_assert("0","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",5441),0));
  }

  template <bool _AP_S1>
                inline bool slt(const ap_private<_AP_W, _AP_S1>& RHS) const {
    ap_private lhs(*this);
    ap_private<_AP_W, _AP_S1> rhs(RHS);
    bool lhsNeg = isNegative();
    bool rhsNeg = rhs.isNegative();
    if (lhsNeg) {

      lhs.flip();
      lhs++;
    }
    if (rhsNeg) {

      rhs.flip();
      rhs++;
    }



    if (lhsNeg)
      if (rhsNeg)
        return lhs.ugt(rhs);
      else
        return true;
    else if (rhsNeg)
      return false;
    else
      return lhs.ult(rhs);
  }





  template <bool _AP_S1>
                inline bool ule(const ap_private<_AP_W, _AP_S1>& RHS) const {
    return ult(RHS) || eq(RHS);
  }





  template <bool _AP_S1>
                inline bool sle(const ap_private<_AP_W, _AP_S1>& RHS) const {
    return slt(RHS) || eq(RHS);
  }





  template <bool _AP_S1>
                inline bool ugt(const ap_private<_AP_W, _AP_S1>& RHS) const {
    return !ult(RHS) && !eq(RHS);
  }





  template <bool _AP_S1>
                inline bool sgt(const ap_private<_AP_W, _AP_S1>& RHS) const {
    return !slt(RHS) && !eq(RHS);
  }





  template <bool _AP_S1>
                inline bool uge(const ap_private<_AP_W, _AP_S>& RHS) const {
    return !ult(RHS);
  }





  template <bool _AP_S1>
                inline bool sge(const ap_private<_AP_W, _AP_S1>& RHS) const {
    return !slt(RHS);
  }


  template <int _AP_W1, bool _AP_S1>
                inline void cpSext(const ap_private<_AP_W1, _AP_S1>& that) {


    (void) ((!!(_AP_W1 < BitWidth && "Invalid ap_private SignExtend request")) || (_assert("_AP_W1 < BitWidth && \"Invalid ap_private SignExtend request\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",5533),0));
    (void) ((!!(_AP_W1 <= MAX_INT_BITS && "Too many bits")) || (_assert("_AP_W1 <= MAX_INT_BITS && \"Too many bits\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",5534),0));


    if (!that.isNegative()) {
      cpZext(that);
      return;
    }


    enum { wordBits = _AP_W1 % APINT_BITS_PER_WORD };
    const int _AP_N1 = ap_private<_AP_W1, _AP_S1>::_AP_N;

    if (_AP_N1 == _AP_N) {
      enum { newWordBits = _AP_W % APINT_BITS_PER_WORD };


      const uint64_t mask = wordBits ? (~0ULL << (wordBits)) : 0ULL;
      for (int i = 0; i < _AP_N; ++i) pVal[i] = that.get_pVal(i);
      pVal[_AP_N - 1] |= mask;
      return;
    }

    enum { newWordBits = _AP_W % APINT_BITS_PER_WORD };


    const uint64_t mask = wordBits ? (~0ULL << (wordBits)) : 0ULL;
    int i = 0;
    for (i = 0; i < _AP_N1; ++i) pVal[i] = that.get_pVal(i);
    pVal[i - 1] |= mask;
    for (; i < _AP_N - 1; i++) pVal[i] = ~0ULL;
    pVal[i] = ~0ULL;
    clearUnusedBits();
    return;
  }


  template <int _AP_W1, bool _AP_S1>
                inline void cpZext(const ap_private<_AP_W1, _AP_S1>& that) {


    (void) ((!!(_AP_W1 < BitWidth && "Invalid ap_private ZeroExtend request")) || (_assert("_AP_W1 < BitWidth && \"Invalid ap_private ZeroExtend request\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",5574),0));
    (void) ((!!(_AP_W1 <= MAX_INT_BITS && "Too many bits")) || (_assert("_AP_W1 <= MAX_INT_BITS && \"Too many bits\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",5575),0));

    const int _AP_N1 = ap_private<_AP_W1, _AP_S1>::_AP_N;
    const uint64_t mask = ap_private<_AP_W1, _AP_S1>::mask;
    int i = 0;
    for (; i < _AP_N1; ++i) pVal[i] = that.get_pVal(i);
    pVal[i - 1] &= mask;
    for (; i < _AP_N; ++i) pVal[i] = 0;
    clearUnusedBits();
  }

  template <int _AP_W1, bool _AP_S1>
                inline void cpZextOrTrunc(const ap_private<_AP_W1, _AP_S1>& that) {
    if (BitWidth > _AP_W1)
      cpZext(that);
    else {
      for (int i = 0; i < _AP_N; ++i) pVal[i] = that.get_pVal(i);
      clearUnusedBits();
    }
  }

  template <int _AP_W1, bool _AP_S1>
                inline void cpSextOrTrunc(const ap_private<_AP_W1, _AP_S1>& that) {
    if (BitWidth > _AP_W1)
      cpSext(that);
    else {
      for (int i = 0; i < _AP_N; ++i) pVal[i] = that.get_pVal(i);
      clearUnusedBits();
    }
  }






                inline uint32_t getBitWidth() const { return BitWidth; }




                inline uint32_t getNumWords() const {
    return (BitWidth + APINT_BITS_PER_WORD - 1) / APINT_BITS_PER_WORD;
  }





                inline uint32_t getActiveBits() const {
    uint32_t bits = BitWidth - countLeadingZeros();
    return bits ? bits : 1;
  }






  inline uint64_t getZExtValue() const {
    (void) ((!!(getActiveBits() <= 64 && "Too many bits for uint64_t")) || (_assert("getActiveBits() <= 64 && \"Too many bits for uint64_t\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",5635),0));
    return *pVal;
  }






  inline int64_t getSExtValue() const {
    (void) ((!!(getActiveBits() <= 64 && "Too many bits for int64_t")) || (_assert("getActiveBits() <= 64 && \"Too many bits for int64_t\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",5645),0));
    return int64_t(pVal[0]);
  }




  inline static uint32_t getBitsNeeded(const char* str, uint32_t slen,
                                       uint8_t radix) {
    (void) ((!!(str != 0 && "Invalid value string")) || (_assert("str != 0 && \"Invalid value string\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",5654),0));
    (void) ((!!(slen > 0 && "Invalid string length")) || (_assert("slen > 0 && \"Invalid string length\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",5655),0));


    uint32_t isNegative = str[0] == '-';
    if (isNegative) {
      slen--;
      str++;
    }


    if (radix == 2) return slen + isNegative;
    if (radix == 8) return slen * 3 + isNegative;
    if (radix == 16) return slen * 4 + isNegative;


    (void) ((!!(radix == 10 && "Invalid radix")) || (_assert("radix == 10 && \"Invalid radix\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",5670),0));






    return isNegative + slen * 4;
  }







                inline uint32_t countLeadingZeros() const {
    enum {
      msw_bits = (BitWidth % APINT_BITS_PER_WORD)
                     ? (BitWidth % APINT_BITS_PER_WORD)
                     : APINT_BITS_PER_WORD,
      excessBits = APINT_BITS_PER_WORD - msw_bits
    };
    uint32_t Count = ap_private_ops::CountLeadingZeros_64(pVal[_AP_N - 1]);
    if (Count >= excessBits) Count -= excessBits;
    if (!pVal[_AP_N - 1]) {
      for (int i = _AP_N - 1; i; --i) {
        if (!pVal[i - 1])
          Count += APINT_BITS_PER_WORD;
        else {
          Count += ap_private_ops::CountLeadingZeros_64(pVal[i - 1]);
          break;
        }
      }
    }
    return Count;
  }






                inline uint32_t countLeadingOnes() const {
    if (isSingleWord())
      return ap_private_ops::countLeadingOnes_64(get_VAL(), APINT_BITS_PER_WORD - BitWidth);

    uint32_t highWordBits = BitWidth % APINT_BITS_PER_WORD;
    uint32_t shift =
        (highWordBits == 0 ? 0 : APINT_BITS_PER_WORD - highWordBits);
    int i = _AP_N - 1;
    uint32_t Count = ap_private_ops::countLeadingOnes_64(get_pVal(i), shift);
    if (Count == highWordBits) {
      for (i--; i >= 0; --i) {
        if (get_pVal(i) == ~0ULL)
          Count += APINT_BITS_PER_WORD;
        else {
          Count += ap_private_ops::countLeadingOnes_64(get_pVal(i), 0);
          break;
        }
      }
    }
    return Count;
  }
# 5742 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
  inline uint32_t countTrailingZeros() const {
    uint32_t Count = 0;
    uint32_t i = 0;
    for (; i < _AP_N && get_pVal(i) == 0; ++i) Count += APINT_BITS_PER_WORD;
    if (i < _AP_N) Count += ap_private_ops::CountTrailingZeros_64(get_pVal(i));
    return AESL_std::min(Count, BitWidth);
  }






  inline uint32_t countPopulation() const {
    uint32_t Count = 0;
    for (int i = 0; i < _AP_N - 1; ++i)
      Count += ap_private_ops::CountPopulation_64(pVal[i]);
    Count += ap_private_ops::CountPopulation_64(pVal[_AP_N - 1] & mask);
    return Count;
  }







  inline std::string toString(uint8_t radix, bool wantSigned) const;






  inline std::string toStringUnsigned(uint8_t radix = 10) const {
    return toString(radix, false);
  }






  inline std::string toStringSigned(uint8_t radix = 10) const {
    return toString(radix, true);
  }


                inline double roundToDouble(bool isSigned) const {

    if (isSingleWord() || getActiveBits() <= APINT_BITS_PER_WORD) {
      uint64_t val = pVal[0];
      if (isSigned) {
        int64_t sext = ((int64_t(val)) << (64 - BitWidth)) >> (64 - BitWidth);
        return double(sext);
      } else
        return double(val);
    }


    bool isNeg = isSigned ? (*this)[BitWidth - 1] : false;


    ap_private<_AP_W, _AP_S> Tmp(isNeg ? -(*this) : (*this));


    uint32_t n = Tmp.getActiveBits();




    uint64_t exp = n;


    if (exp > 1023) {
      if (!isSigned || !isNeg)
        return std::numeric_limits<double>::infinity();
      else
        return -std::numeric_limits<double>::infinity();
    }
    exp += 1023;



    uint64_t mantissa = 0;
    unsigned hiWord = whichWord(n - 1);
    if (hiWord == 0) {
      mantissa = Tmp.get_pVal(0);
      if (n > 52)
        (mantissa) >>= (n - 52);
    } else {

      uint64_t hibits = (Tmp.get_pVal(hiWord))
                        << (52 - n % APINT_BITS_PER_WORD);
      uint64_t lobits =
          (Tmp.get_pVal(hiWord - 1)) >> (11 + n % APINT_BITS_PER_WORD);
      mantissa = hibits | lobits;
    }


    uint64_t sign = isNeg ? (1ULL << (APINT_BITS_PER_WORD - 1)) : 0;
    union {
      double __D;
      uint64_t __I;
    } __T;
    __T.__I = sign | ((exp) << 52) | mantissa;
    return __T.__D;
  }


                inline double roundToDouble() const { return roundToDouble(false); }


                inline double signedRoundToDouble() const { return roundToDouble(true); }





  inline double bitsToDouble() const {
    union {
      uint64_t __I;
      double __D;
    } __T;
    __T.__I = pVal[0];
    return __T.__D;
  }





  inline float bitsToFloat() const {
    union {
      uint32_t __I;
      float __F;
    } __T;
    __T.__I = uint32_t(pVal[0]);
    return __T.__F;
  }





  inline ap_private& doubleToBits(double __V) {
    union {
      uint64_t __I;
      double __D;
    } __T;
    __T.__D = __V;
    pVal[0] = __T.__I;
    return *this;
  }





  inline ap_private& floatToBits(float __V) {
    union {
      uint32_t __I;
      float __F;
    } __T;
    __T.__F = __V;
    pVal[0] = __T.__I;
  }



  inline bool and_reduce() const { return isMaxValue(); }

  inline bool nand_reduce() const { return countPopulation() != 0; }

  inline bool or_reduce() const { return (bool)countPopulation(); }

  inline bool nor_reduce() const { return countPopulation() == 0; }

  inline bool xor_reduce() const {
    unsigned int i = countPopulation();
    return (i % 2) ? true : false;
  }

  inline bool xnor_reduce() const {
    unsigned int i = countPopulation();
    return (i % 2) ? false : true;
  }
  inline std::string to_string(uint8_t radix = 16, bool sign = false) const {
    return toString(radix, radix == 10 ? _AP_S : sign);
  }
};

namespace ap_private_ops {

enum { APINT_BITS_PER_WORD = 64 };
template <int _AP_W, bool _AP_S>
              inline bool operator==(uint64_t V1, const ap_private<_AP_W, _AP_S>& V2) {
  return V2 == V1;
}

template <int _AP_W, bool _AP_S>
              inline bool operator!=(uint64_t V1, const ap_private<_AP_W, _AP_S>& V2) {
  return V2 != V1;
}

template <int _AP_W, bool _AP_S, int index>
              inline bool get(const ap_private<_AP_W, _AP_S>& a) {

  const uint64_t mask = 1ULL << (index & 0x3f);
  return ((mask & a.get_pVal((index) >> 6)) != 0);
}

template <int _AP_W, bool _AP_S, int msb_index, int lsb_index>
inline void set(ap_private<_AP_W, _AP_S>& a,
                const ap_private<((msb_index) > (1) ? (msb_index) : (1)), true>& mark1 = 0,
                const ap_private<((lsb_index) > (1) ? (lsb_index) : (1)), true>& mark2 = 0) {
  enum {
    APINT_BITS_PER_WORD = 64,
    lsb_word = lsb_index / APINT_BITS_PER_WORD,
    msb_word = msb_index / APINT_BITS_PER_WORD,
    msb = msb_index % APINT_BITS_PER_WORD,
    lsb = lsb_index % APINT_BITS_PER_WORD
  };
  if (msb_word == lsb_word) {
    const uint64_t mask = ~0ULL >>
                          (lsb) << (APINT_BITS_PER_WORD - msb + lsb - 1) >>
                          (APINT_BITS_PER_WORD - msb - 1);

    a.get_pVal(msb_word) |= mask;
  } else {
    const uint64_t lsb_mask = ~0ULL >> (lsb) << (lsb);
    const uint64_t msb_mask = ~0ULL << (APINT_BITS_PER_WORD - msb - 1) >>
                              (APINT_BITS_PER_WORD - msb - 1);

    a.get_pVal(lsb_word) |= lsb_mask;
    for (int i = lsb_word + 1; i < msb_word; i++) {
      a.set_pVal(i, ~0ULL);

    }


    a.get_pVal(msb_word) |= msb_mask;
  }
  a.clearUnusedBits();
}

template <int _AP_W, bool _AP_S, int msb_index, int lsb_index>
inline void clear(ap_private<_AP_W, _AP_S>& a,
                  const ap_private<((msb_index) > (1) ? (msb_index) : (1)), true>& mark1 = 0,
                  const ap_private<((lsb_index) > (1) ? (lsb_index) : (1)), true>& mark2 = 0) {
  enum {
    APINT_BITS_PER_WORD = 64,
    lsb_word = lsb_index / APINT_BITS_PER_WORD,
    msb_word = msb_index / APINT_BITS_PER_WORD,
    msb = msb_index % APINT_BITS_PER_WORD,
    lsb = lsb_index % APINT_BITS_PER_WORD
  };
  if (msb_word == lsb_word) {
    const uint64_t mask =
        ~(~0ULL >> (lsb) << (APINT_BITS_PER_WORD - msb + lsb - 1) >>
          (APINT_BITS_PER_WORD - msb - 1));

    a.get_pVal(msb_word) &= mask;
  } else {
    const uint64_t lsb_mask = ~(~0ULL >> (lsb) << (lsb));
    const uint64_t msb_mask = ~(~0ULL << (APINT_BITS_PER_WORD - msb - 1) >>
                                (APINT_BITS_PER_WORD - msb - 1));

    a.get_pVal(lsb_word) &= lsb_mask;
    for (int i = lsb_word + 1; i < msb_word; i++) {

      a.get_pVal(i) = 0;
    }

    a.get_pVal(msb_word) &= msb_mask;
  }
  a.clearUnusedBits();
}

template <int _AP_W, bool _AP_S, int index>
inline void set(ap_private<_AP_W, _AP_S>& a,
                const ap_private<((index) > (1) ? (index) : (1)), true>& mark = 0) {
  enum { APINT_BITS_PER_WORD = 64, word = index / APINT_BITS_PER_WORD };
  static const uint64_t mask = 1ULL << (index % APINT_BITS_PER_WORD);

  a.get_pVal(word) |= mask;
  a.clearUnusedBits();
}

template <int _AP_W, bool _AP_S, int index>
inline void clear(ap_private<_AP_W, _AP_S>& a,
                  const ap_private<((index) > (1) ? (index) : (1)), true>& mark = 0) {
  enum { APINT_BITS_PER_WORD = 64, word = index / APINT_BITS_PER_WORD };
  static const uint64_t mask = ~(1ULL << (index % APINT_BITS_PER_WORD));

  a.get_pVal(word) &= mask;
  a.clearUnusedBits();
}

}

template <int _AP_W, bool _AP_S>
inline std::string ap_private<_AP_W, _AP_S, false>::toString(
    uint8_t radix, bool wantSigned) const {
  (void) ((!!((radix == 10 || radix == 8 || radix == 16 || radix == 2) && "Radix should be 2, 8, 10, or 16!")) || (_assert("(radix == 10 || radix == 8 || radix == 16 || radix == 2) && \"Radix should be 2, 8, 10, or 16!\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",6047),0));

  static const char* digits[] = {"0", "1", "2", "3", "4", "5", "6", "7",
                                 "8", "9", "A", "B", "C", "D", "E", "F"};
  std::string result;

  if (radix != 10) {





    if (*this == (uint64_t)(0))
      result = "0";
    else {
      ap_private<_AP_W, false> tmp(*this);
      size_t insert_at = 0;
      bool leading_zero = true;
      if (wantSigned && isNegative()) {



        tmp.flip();
        tmp++;
        tmp.clearUnusedBitsToZero();
        result = "-";
        insert_at = 1;
        leading_zero = false;
      }
      switch (radix) {
        case 2:
          result += "0b";
          break;
        case 8:
          result += "0o";
          break;
        case 16:
          result += "0x";
          break;
        default:
          (void) ((!!("invalid radix" && 0)) || (_assert("\"invalid radix\" && 0","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",6086),0));
      }
      insert_at += 2;

      uint32_t shift = (radix == 16 ? 4 : (radix == 8 ? 3 : 1));
      uint64_t mask = radix - 1;
      ap_private<_AP_W, false> zero(0);
      unsigned bits = 0;
      while (tmp.ne(zero)) {
        uint64_t digit = tmp.get_VAL() & mask;
        result.insert(insert_at, digits[digit]);
        tmp = tmp.lshr(shift);
        ++bits;
      }
      bits *= shift;
      if (bits < _AP_W && leading_zero) result.insert(insert_at, digits[0]);
    }
    return result;
  }

  ap_private<_AP_W, false> tmp(*this);
  ap_private<_AP_W, false> divisor(radix);
  ap_private<_AP_W, false> zero(0);
  size_t insert_at = 0;
  if (wantSigned && isNegative()) {



    tmp.flip();
    tmp++;
    tmp.clearUnusedBitsToZero();
    result = "-";
    insert_at = 1;
  }
  if (tmp == ap_private<_AP_W, false>(0))
    result = "0";
  else
    while (tmp.ne(zero)) {
      ap_private<_AP_W, false> APdigit(0);
      ap_private<_AP_W, false> tmp2(0);
      ap_private_ops::divide(tmp, tmp.getNumWords(), divisor,
                             divisor.getNumWords(), &tmp2, &APdigit);
      uint64_t digit = APdigit.getZExtValue();
      (void) ((!!(digit < radix && "divide failed")) || (_assert("digit < radix && \"divide failed\"","C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h",6129),0));
      result.insert(insert_at, digits[digit]);
      tmp = tmp2;
    }

  return result;
}

template <int _AP_W, bool _AP_S>
std::ostream &operator<<(std::ostream &os, const ap_private<_AP_W, _AP_S> &x) {
  std::ios_base::fmtflags ff = std::cout.flags();
  if (ff & std::cout.hex) {
    os << x.toString(16, false);
  } else if (ff & std::cout.oct) {
    os << x.toString(8, false);
  } else {
    os << x.toString(10, _AP_S);
  }
  return os;
}
# 6394 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
template <int _AP_W, bool _AP_S>
struct _private_range_ref {



  ap_private<_AP_W, _AP_S>& d_bv;
  int l_index;
  int h_index;

 public:

                      inline _private_range_ref(const _private_range_ref<_AP_W, _AP_S>& ref)
      : d_bv(ref.d_bv), l_index(ref.l_index), h_index(ref.h_index) {}


                      inline _private_range_ref(ap_private<_AP_W, _AP_S>* bv, int h, int l)
      : d_bv(*bv), l_index(l), h_index(h) {
    do { if ((h < 0 || l < 0)) { fprintf((__acrt_iob_func(2)), "WARNING: " "Higher bound (%d) and lower bound (%d) cannot be " "negative.", h, l); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);



    do { if ((h >= _AP_W || l >= _AP_W)) { fprintf((__acrt_iob_func(2)), "WARNING: " "Higher bound (%d) or lower bound (%d) out of range (%d).", h, l, _AP_W); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);


  }


  template <int _AP_W2, bool _AP_S2>
  inline _private_range_ref<_AP_W, _AP_S>& operator|=(
      const _private_range_ref<_AP_W2, _AP_S2>& ref) {
    do { if (((h_index - l_index) != (ref.h_index - ref.l_index))) { fprintf((__acrt_iob_func(2)), "WARNING: " "Bitsize mismach for ap_private<>.range() &= " "ap_private<>.range()."); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);


    this->d_bv |= ref.d_bv;
    return *this;
  }


  template <int _AP_W2, bool _AP_S2>
  inline _private_range_ref<_AP_W, _AP_S>& operator|=(
      const ssdm_int_sim<_AP_W2, _AP_S2>& ref) {
    do { if (((h_index - l_index + 1) != _AP_W2)) { fprintf((__acrt_iob_func(2)), "WARNING: " "Bitsize mismach for ap_private<>.range() |= _AP_ROOT_TYPE<>."); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);

    this->d_bv |= ref.V;
    return *this;
  }


  template <int _AP_W2, bool _AP_S2>
  inline _private_range_ref<_AP_W, _AP_S>& operator&=(
      const _private_range_ref<_AP_W2, _AP_S2>& ref) {
    do { if (((h_index - l_index) != (ref.h_index - ref.l_index))) { fprintf((__acrt_iob_func(2)), "WARNING: " "Bitsize mismach for ap_private<>.range() &= " "ap_private<>.range()."); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);


    this->d_bv &= ref.d_bv;
    return *this;
  };


  template <int _AP_W2, bool _AP_S2>
  inline _private_range_ref<_AP_W, _AP_S>& operator&=(
      const ssdm_int_sim<_AP_W2, _AP_S2>& ref) {
    do { if (((h_index - l_index + 1) != _AP_W2)) { fprintf((__acrt_iob_func(2)), "WARNING: " "Bitsize mismach for ap_private<>.range() &= _AP_ROOT_TYPE<>."); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);

    this->d_bv &= ref.V;
    return *this;
  }


  template <int _AP_W2, bool _AP_S2>
  inline _private_range_ref<_AP_W, _AP_S>& operator^=(
      const _private_range_ref<_AP_W2, _AP_S2>& ref) {
    do { if (((h_index - l_index) != (ref.h_index - ref.l_index))) { fprintf((__acrt_iob_func(2)), "WARNING: " "Bitsize mismach for ap_private<>.range() ^= " "ap_private<>.range()."); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);


    this->d_bv ^= ref.d_bv;
    return *this;
  };


  template <int _AP_W2, bool _AP_S2>
  inline _private_range_ref<_AP_W, _AP_S>& operator^=(
      const ssdm_int_sim<_AP_W2, _AP_S2>& ref) {
    do { if (((h_index - l_index + 1) != _AP_W2)) { fprintf((__acrt_iob_func(2)), "WARNING: " "Bitsize mismach for ap_private<>.range() ^= _AP_ROOT_TYPE<>."); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);

    this->d_bv ^= ref.V;
    return *this;
  }



                      inline operator ap_private<_AP_W, false>() const {
    ap_private<_AP_W, false> val(0);
    if (h_index >= l_index) {
      if (_AP_W > 64) {
        val = d_bv;
        ap_private<_AP_W, false> mask(-1);
        mask >>= _AP_W - (h_index - l_index + 1);
        val >>= l_index;
        val &= mask;
      } else {
        const uint64_t mask = (~0ULL >> (64 > _AP_W ? (64 - _AP_W) : 0));

        val = (d_bv >> l_index) & (mask >> (_AP_W - (h_index - l_index + 1)));
      }
    } else {
      for (int i = 0, j = l_index; j >= 0 && j >= h_index; j--, i++)
        if ((d_bv)[j]) val.set(i);
    }
    return val;
  }

                      inline operator unsigned long long() const { return to_uint64(); }


  template <int _AP_W2, bool _AP_S2>
                      inline _private_range_ref& operator=(const ap_private<_AP_W2, _AP_S2>& val) {
    ap_private<_AP_W, false> vval = ap_private<_AP_W, false>(val);
    if (l_index > h_index) {
      for (int i = 0, j = l_index; j >= 0 && j >= h_index; j--, i++)
        (vval)[i] ? d_bv.set(j) : d_bv.clear(j);
    } else {
      if (_AP_W > 64) {
        ap_private<_AP_W, false> mask(-1);
        if (l_index > 0) {
          mask <<= l_index;
          vval <<= l_index;
        }
        if (h_index < _AP_W - 1) {
          ap_private<_AP_W, false> mask2(-1);
          mask2 >>= _AP_W - h_index - 1;
          mask &= mask2;
          vval &= mask2;
        }
        mask.flip();
        d_bv &= mask;
        d_bv |= vval;
      } else {
        unsigned shift = 64 - _AP_W;
        uint64_t mask = ~0ULL >> (shift);
        if (l_index > 0) {
          vval = mask & vval << l_index;
          mask = mask & mask << l_index;
        }
        if (h_index < _AP_W - 1) {
          uint64_t mask2 = mask;
          mask2 >>= (_AP_W - h_index - 1);
          mask &= mask2;
          vval &= mask2;
        }
        mask = ~mask;
        d_bv &= mask;
        d_bv |= vval;
      }
    }
    return *this;
  }

                      inline _private_range_ref& operator=(unsigned long long val) {
    const ap_private<_AP_W, _AP_S> vval = val;
    return operator=(vval);
  }

  template <int _AP_W2, bool _AP_S2>
                      inline _private_range_ref& operator=(
      const _private_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=((unsigned long long)(bool)val);
  }

  template <int _AP_W2, bool _AP_S2>
                      inline _private_range_ref& operator=(
      const _private_range_ref<_AP_W2, _AP_S2>& val) {
    const ap_private<_AP_W, false> tmpVal(val);
    return operator=(tmpVal);
  }
# 6579 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline _private_range_ref& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=(val.to_ap_int_base().V);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline _private_range_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=(val.operator ap_int_base<_AP_W2, false>().V);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline _private_range_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((unsigned long long)(bool)val);
  }
# 6672 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
  template <int _AP_W2, bool _AP_S2>
                      inline bool operator==(const _private_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_private<_AP_W, false> lhs = get();
    ap_private<_AP_W2, false> rhs = op2.get();
    return lhs == rhs;
  }

  template <int _AP_W2, bool _AP_S2>
                      inline bool operator!=(const _private_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_private<_AP_W, false> lhs = get();
    ap_private<_AP_W2, false> rhs = op2.get();
    return lhs != rhs;
  }

  template <int _AP_W2, bool _AP_S2>
                      inline bool operator>(const _private_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_private<_AP_W, false> lhs = get();
    ap_private<_AP_W2, false> rhs = op2.get();
    return lhs > rhs;
  }

  template <int _AP_W2, bool _AP_S2>
                      inline bool operator>=(const _private_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_private<_AP_W, false> lhs = get();
    ap_private<_AP_W2, false> rhs = op2.get();
    return lhs >= rhs;
  }

  template <int _AP_W2, bool _AP_S2>
                      inline bool operator<(const _private_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_private<_AP_W, false> lhs = get();
    ap_private<_AP_W2, false> rhs = op2.get();
    return lhs < rhs;
  }

  template <int _AP_W2, bool _AP_S2>
                      inline bool operator<=(const _private_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_private<_AP_W, false> lhs = get();
    ap_private<_AP_W2, false> rhs = op2.get();
    return lhs <= rhs;
  }

  template <int _AP_W2>
  inline void set(const ap_private<_AP_W2, false>& val) {
    ap_private<_AP_W, _AP_S> vval = val;
    if (l_index > h_index) {
      for (int i = 0, j = l_index; j >= 0 && j >= h_index; j--, i++)
        (vval)[i] ? d_bv.set(j) : d_bv.clear(j);
    } else {
      if (_AP_W > 64) {
        ap_private<_AP_W, _AP_S> mask(-1);
        if (l_index > 0) {
          ap_private<_AP_W, false> mask1(-1);
          mask1 >>= _AP_W - l_index;
          mask1.flip();
          mask = mask1;

          vval <<= l_index;
        }
        if (h_index < _AP_W - 1) {
          ap_private<_AP_W, false> mask2(-1);
          mask2 <<= h_index + 1;
          mask2.flip();
          mask &= mask2;
          vval &= mask2;
        }
        mask.flip();
        d_bv &= mask;
        d_bv |= vval;
      } else {
        uint64_t mask = ~0ULL >> (64 - _AP_W);
        if (l_index > 0) {
          uint64_t mask1 = mask;
          mask1 = mask & (mask1 >> (_AP_W - l_index));
          vval = mask & (vval << l_index);
          mask = ~mask1 & mask;

        }
        if (h_index < _AP_W - 1) {
          uint64_t mask2 = ~0ULL >> (64 - _AP_W);
          mask2 = mask & (mask2 << (h_index + 1));
          mask &= ~mask2;
          vval &= ~mask2;
        }
        d_bv &= (~mask & (~0ULL >> (64 - _AP_W)));
        d_bv |= vval;
      }
    }
  }

                      inline ap_private<_AP_W, false> get() const {
    ap_private<_AP_W, false> val(0);
    if (h_index < l_index) {
      for (int i = 0, j = l_index; j >= 0 && j >= h_index; j--, i++)
        if ((d_bv)[j]) val.set(i);
    } else {
      val = d_bv;
      val >>= l_index;
      if (h_index < _AP_W - 1) {
        if (_AP_W <= 64) {
          const uint64_t mask =
              (~0ULL >> (64 > _AP_W ? (64 - _AP_W) : 0));

          val &= (mask >> (_AP_W - (h_index - l_index + 1)));
        } else {
          ap_private<_AP_W, false> mask(-1);
          mask >>= _AP_W - (h_index - l_index + 1);
          val &= mask;
        }
      }
    }
    return val;
  }

                      inline ap_private<_AP_W, false> get() {
    ap_private<_AP_W, false> val(0);
    if (h_index < l_index) {
      for (int i = 0, j = l_index; j >= 0 && j >= h_index; j--, i++)
        if ((d_bv)[j]) val.set(i);
    } else {
      val = d_bv;
      val >>= l_index;
      if (h_index < _AP_W - 1) {
        if (_AP_W <= 64) {
          const uint64_t mask = ~0ULL >> (64 > _AP_W ? (64 - _AP_W) : 0);

          return val &= ((mask) >> (_AP_W - (h_index - l_index + 1)));
        } else {
          ap_private<_AP_W, false> mask(-1);
          mask >>= _AP_W - (h_index - l_index + 1);
          val &= mask;
        }
      }
    }
    return val;
  }

                      inline int length() const {
    return h_index >= l_index ? h_index - l_index + 1 : l_index - h_index + 1;
  }

                      inline int to_int() const {
    ap_private<_AP_W, false> val = get();
    return val.to_int();
  }

                      inline unsigned int to_uint() const {
    ap_private<_AP_W, false> val = get();
    return val.to_uint();
  }

                      inline long to_long() const {
    ap_private<_AP_W, false> val = get();
    return val.to_long();
  }

                      inline unsigned long to_ulong() const {
    ap_private<_AP_W, false> val = get();
    return val.to_ulong();
  }

                      inline ap_slong to_int64() const {
    ap_private<_AP_W, false> val = get();
    return val.to_int64();
  }

                      inline ap_ulong to_uint64() const {
    ap_private<_AP_W, false> val = get();
    return val.to_uint64();
  }

                      inline std::string to_string(uint8_t radix = 2) const {
    return get().to_string(radix);
  }

                      inline bool and_reduce() {
    bool ret = true;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    for (unsigned i = low; i != high; ++i) ret &= d_bv[i];
    return ret;
  }

                      inline bool or_reduce() {
    bool ret = false;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    for (unsigned i = low; i != high; ++i) ret |= d_bv[i];
    return ret;
  }

                      inline bool xor_reduce() {
    bool ret = false;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    for (unsigned i = low; i != high; ++i) ret ^= d_bv[i];
    return ret;
  }
};





template <int _AP_W, bool _AP_S>
struct _private_bit_ref {



  ap_private<_AP_W, _AP_S>& d_bv;
  int d_index;

 public:

                      inline _private_bit_ref(const _private_bit_ref<_AP_W, _AP_S>& ref)
      : d_bv(ref.d_bv), d_index(ref.d_index) {}


                      inline _private_bit_ref(ap_private<_AP_W, _AP_S>& bv, int index = 0)
      : d_bv(bv), d_index(index) {
    do { if ((d_index < 0)) { fprintf((__acrt_iob_func(2)), "WARNING: " "Index of bit vector  (%d) cannot be negative.\n", d_index); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);

    do { if ((d_index >= _AP_W)) { fprintf((__acrt_iob_func(2)), "WARNING: " "Index of bit vector (%d) out of range (%d).\n", d_index, _AP_W); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);

  }

                      inline operator bool() const { return d_bv.get_bit(d_index); }

                      inline bool to_bool() const { return operator bool(); }

  template <typename T>
                      inline _private_bit_ref& operator=(const T& val) {
    if (!!val)
      d_bv.set(d_index);
    else
      d_bv.clear(d_index);
    return *this;
  }
# 6999 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
  template <int _AP_W2, bool _AP_S2>
                      inline bool operator==(const _private_bit_ref<_AP_W2, _AP_S2>& op) const {
    return get() == op.get();
  }

  template <int _AP_W2, bool _AP_S2>
                      inline bool operator!=(const _private_bit_ref<_AP_W2, _AP_S2>& op) const {
    return get() != op.get();
  }

                      inline bool get() const { return operator bool(); }
# 7021 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
                      inline int length() const { return 1; }






};
# 7049 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline PTR_TYPE* operator +(PTR_TYPE* i_op, const ap_private<_AP_W, _AP_S>& op) { typename ap_private<_AP_W, _AP_S>::ValType op2 = op; return i_op + op2; } template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline PTR_TYPE* operator +(const ap_private<_AP_W, _AP_S>& op, PTR_TYPE* i_op) { typename ap_private<_AP_W, _AP_S>::ValType op2 = op; return op2 + i_op; }
template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline PTR_TYPE* operator -(PTR_TYPE* i_op, const ap_private<_AP_W, _AP_S>& op) { typename ap_private<_AP_W, _AP_S>::ValType op2 = op; return i_op - op2; } template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline PTR_TYPE* operator -(const ap_private<_AP_W, _AP_S>& op, PTR_TYPE* i_op) { typename ap_private<_AP_W, _AP_S>::ValType op2 = op; return op2 - i_op; }
# 7075 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
template <int _AP_W, bool _AP_S> inline float operator *(float i_op, const ap_private<_AP_W, _AP_S>& op) { typename ap_private<_AP_W, _AP_S>::ValType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline float operator *(const ap_private<_AP_W, _AP_S>& op, float i_op) { typename ap_private<_AP_W, _AP_S>::ValType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline float operator /(float i_op, const ap_private<_AP_W, _AP_S>& op) { typename ap_private<_AP_W, _AP_S>::ValType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline float operator /(const ap_private<_AP_W, _AP_S>& op, float i_op) { typename ap_private<_AP_W, _AP_S>::ValType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline float operator +(float i_op, const ap_private<_AP_W, _AP_S>& op) { typename ap_private<_AP_W, _AP_S>::ValType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline float operator +(const ap_private<_AP_W, _AP_S>& op, float i_op) { typename ap_private<_AP_W, _AP_S>::ValType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline float operator -(float i_op, const ap_private<_AP_W, _AP_S>& op) { typename ap_private<_AP_W, _AP_S>::ValType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline float operator -(const ap_private<_AP_W, _AP_S>& op, float i_op) { typename ap_private<_AP_W, _AP_S>::ValType op2 = op; return op2 - i_op; }
template <int _AP_W, bool _AP_S> inline double operator *(double i_op, const ap_private<_AP_W, _AP_S>& op) { typename ap_private<_AP_W, _AP_S>::ValType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline double operator *(const ap_private<_AP_W, _AP_S>& op, double i_op) { typename ap_private<_AP_W, _AP_S>::ValType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline double operator /(double i_op, const ap_private<_AP_W, _AP_S>& op) { typename ap_private<_AP_W, _AP_S>::ValType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline double operator /(const ap_private<_AP_W, _AP_S>& op, double i_op) { typename ap_private<_AP_W, _AP_S>::ValType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline double operator +(double i_op, const ap_private<_AP_W, _AP_S>& op) { typename ap_private<_AP_W, _AP_S>::ValType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline double operator +(const ap_private<_AP_W, _AP_S>& op, double i_op) { typename ap_private<_AP_W, _AP_S>::ValType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline double operator -(double i_op, const ap_private<_AP_W, _AP_S>& op) { typename ap_private<_AP_W, _AP_S>::ValType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline double operator -(const ap_private<_AP_W, _AP_S>& op, double i_op) { typename ap_private<_AP_W, _AP_S>::ValType op2 = op; return op2 - i_op; }
# 7180 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
template <int _AP_W, bool _AP_S> inline typename ap_private<(1), (false)>::template RType<_AP_W, _AP_S>::mult operator *(bool i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(1), (false)>(i_op).operator *(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(1), (false)>::mult operator *(const ap_private<_AP_W, _AP_S>& op, bool i_op) { return op.operator *(ap_private<(1), (false)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(1), (false)>::template RType<_AP_W, _AP_S>::plus operator +(bool i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(1), (false)>(i_op).operator +(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(1), (false)>::plus operator +(const ap_private<_AP_W, _AP_S>& op, bool i_op) { return op.operator +(ap_private<(1), (false)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(1), (false)>::template RType<_AP_W, _AP_S>::minus operator -(bool i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(1), (false)>(i_op).operator -(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(1), (false)>::minus operator -(const ap_private<_AP_W, _AP_S>& op, bool i_op) { return op.operator -(ap_private<(1), (false)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(1), (false)>::template RType<_AP_W, _AP_S>::div operator /(bool i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(1), (false)>(i_op).operator /(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(1), (false)>::div operator /(const ap_private<_AP_W, _AP_S>& op, bool i_op) { return op.operator /(ap_private<(1), (false)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(1), (false)>::template RType<_AP_W, _AP_S>::mod operator %(bool i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(1), (false)>(i_op).operator %(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(1), (false)>::mod operator %(const ap_private<_AP_W, _AP_S>& op, bool i_op) { return op.operator %(ap_private<(1), (false)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(1), (false)>::template RType<_AP_W, _AP_S>::logic operator &(bool i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(1), (false)>(i_op).operator &(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(1), (false)>::logic operator &(const ap_private<_AP_W, _AP_S>& op, bool i_op) { return op.operator &(ap_private<(1), (false)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(1), (false)>::template RType<_AP_W, _AP_S>::logic operator |(bool i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(1), (false)>(i_op).operator |(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(1), (false)>::logic operator |(const ap_private<_AP_W, _AP_S>& op, bool i_op) { return op.operator |(ap_private<(1), (false)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(1), (false)>::template RType<_AP_W, _AP_S>::logic operator ^(bool i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(1), (false)>(i_op).operator ^(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(1), (false)>::logic operator ^(const ap_private<_AP_W, _AP_S>& op, bool i_op) { return op.operator ^(ap_private<(1), (false)>(i_op)); } template <int _AP_W, bool _AP_S> bool operator >>(bool i_op, const ap_private<_AP_W, _AP_S, false>& op) { return i_op >>(op.get_VAL()); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(1), (false)>::arg1 operator >>(const ap_private<_AP_W, _AP_S>& op, bool i_op) { return op.operator >>(i_op); } template <int _AP_W, bool _AP_S> bool operator <<(bool i_op, const ap_private<_AP_W, _AP_S, false>& op) { return i_op <<(op.get_VAL()); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(1), (false)>::arg1 operator <<(const ap_private<_AP_W, _AP_S>& op, bool i_op) { return op.operator <<(i_op); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator +=( ap_private<_AP_W, _AP_S>& op, bool op2) { return op.operator +=(ap_private<(1), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator -=( ap_private<_AP_W, _AP_S>& op, bool op2) { return op.operator -=(ap_private<(1), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator *=( ap_private<_AP_W, _AP_S>& op, bool op2) { return op.operator *=(ap_private<(1), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator /=( ap_private<_AP_W, _AP_S>& op, bool op2) { return op.operator /=(ap_private<(1), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator %=( ap_private<_AP_W, _AP_S>& op, bool op2) { return op.operator %=(ap_private<(1), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator &=( ap_private<_AP_W, _AP_S>& op, bool op2) { return op.operator &=(ap_private<(1), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator |=( ap_private<_AP_W, _AP_S>& op, bool op2) { return op.operator |=(ap_private<(1), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator ^=( ap_private<_AP_W, _AP_S>& op, bool op2) { return op.operator ^=(ap_private<(1), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator >>=( ap_private<_AP_W, _AP_S>& op, bool op2) { op = op.operator>>(op2); return op; } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator <<=( ap_private<_AP_W, _AP_S>& op, bool op2) { op = op.operator<<(op2); return op; } template <int _AP_W, bool _AP_S> inline bool operator >(const ap_private<_AP_W, _AP_S>& op, bool op2) { return op.operator >(ap_private<(1), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator >(bool op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(1), (false)>(op2).operator >(op); } template <int _AP_W, bool _AP_S> inline bool operator <(const ap_private<_AP_W, _AP_S>& op, bool op2) { return op.operator <(ap_private<(1), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator <(bool op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(1), (false)>(op2).operator <(op); } template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_private<_AP_W, _AP_S>& op, bool op2) { return op.operator >=(ap_private<(1), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator >=(bool op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(1), (false)>(op2).operator >=(op); } template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_private<_AP_W, _AP_S>& op, bool op2) { return op.operator <=(ap_private<(1), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator <=(bool op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(1), (false)>(op2).operator <=(op); } template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_private<_AP_W, _AP_S>& op, bool op2) { return op.operator ==(ap_private<(1), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator ==(bool op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(1), (false)>(op2).operator ==(op); } template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_private<_AP_W, _AP_S>& op, bool op2) { return op.operator !=(ap_private<(1), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator !=(bool op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(1), (false)>(op2).operator !=(op); }
template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, _AP_S>::mult operator *(char i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(8), (CHAR_IS_SIGNED)>(i_op).operator *(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(8), (CHAR_IS_SIGNED)>::mult operator *(const ap_private<_AP_W, _AP_S>& op, char i_op) { return op.operator *(ap_private<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, _AP_S>::plus operator +(char i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(8), (CHAR_IS_SIGNED)>(i_op).operator +(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(8), (CHAR_IS_SIGNED)>::plus operator +(const ap_private<_AP_W, _AP_S>& op, char i_op) { return op.operator +(ap_private<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, _AP_S>::minus operator -(char i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(8), (CHAR_IS_SIGNED)>(i_op).operator -(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(8), (CHAR_IS_SIGNED)>::minus operator -(const ap_private<_AP_W, _AP_S>& op, char i_op) { return op.operator -(ap_private<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, _AP_S>::div operator /(char i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(8), (CHAR_IS_SIGNED)>(i_op).operator /(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(8), (CHAR_IS_SIGNED)>::div operator /(const ap_private<_AP_W, _AP_S>& op, char i_op) { return op.operator /(ap_private<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, _AP_S>::mod operator %(char i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(8), (CHAR_IS_SIGNED)>(i_op).operator %(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(8), (CHAR_IS_SIGNED)>::mod operator %(const ap_private<_AP_W, _AP_S>& op, char i_op) { return op.operator %(ap_private<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, _AP_S>::logic operator &(char i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(8), (CHAR_IS_SIGNED)>(i_op).operator &(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator &(const ap_private<_AP_W, _AP_S>& op, char i_op) { return op.operator &(ap_private<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, _AP_S>::logic operator |(char i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(8), (CHAR_IS_SIGNED)>(i_op).operator |(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator |(const ap_private<_AP_W, _AP_S>& op, char i_op) { return op.operator |(ap_private<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, _AP_S>::logic operator ^(char i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(8), (CHAR_IS_SIGNED)>(i_op).operator ^(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator ^(const ap_private<_AP_W, _AP_S>& op, char i_op) { return op.operator ^(ap_private<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, bool _AP_S> char operator >>(char i_op, const ap_private<_AP_W, _AP_S, false>& op) { return i_op >>(op.get_VAL()); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(8), (CHAR_IS_SIGNED)>::arg1 operator >>(const ap_private<_AP_W, _AP_S>& op, char i_op) { return op.operator >>(i_op); } template <int _AP_W, bool _AP_S> char operator <<(char i_op, const ap_private<_AP_W, _AP_S, false>& op) { return i_op <<(op.get_VAL()); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(8), (CHAR_IS_SIGNED)>::arg1 operator <<(const ap_private<_AP_W, _AP_S>& op, char i_op) { return op.operator <<(i_op); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator +=( ap_private<_AP_W, _AP_S>& op, char op2) { return op.operator +=(ap_private<(8), (CHAR_IS_SIGNED)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator -=( ap_private<_AP_W, _AP_S>& op, char op2) { return op.operator -=(ap_private<(8), (CHAR_IS_SIGNED)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator *=( ap_private<_AP_W, _AP_S>& op, char op2) { return op.operator *=(ap_private<(8), (CHAR_IS_SIGNED)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator /=( ap_private<_AP_W, _AP_S>& op, char op2) { return op.operator /=(ap_private<(8), (CHAR_IS_SIGNED)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator %=( ap_private<_AP_W, _AP_S>& op, char op2) { return op.operator %=(ap_private<(8), (CHAR_IS_SIGNED)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator &=( ap_private<_AP_W, _AP_S>& op, char op2) { return op.operator &=(ap_private<(8), (CHAR_IS_SIGNED)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator |=( ap_private<_AP_W, _AP_S>& op, char op2) { return op.operator |=(ap_private<(8), (CHAR_IS_SIGNED)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator ^=( ap_private<_AP_W, _AP_S>& op, char op2) { return op.operator ^=(ap_private<(8), (CHAR_IS_SIGNED)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator >>=( ap_private<_AP_W, _AP_S>& op, char op2) { op = op.operator>>(op2); return op; } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator <<=( ap_private<_AP_W, _AP_S>& op, char op2) { op = op.operator<<(op2); return op; } template <int _AP_W, bool _AP_S> inline bool operator >(const ap_private<_AP_W, _AP_S>& op, char op2) { return op.operator >(ap_private<(8), (CHAR_IS_SIGNED)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator >(char op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(8), (CHAR_IS_SIGNED)>(op2).operator >(op); } template <int _AP_W, bool _AP_S> inline bool operator <(const ap_private<_AP_W, _AP_S>& op, char op2) { return op.operator <(ap_private<(8), (CHAR_IS_SIGNED)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator <(char op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(8), (CHAR_IS_SIGNED)>(op2).operator <(op); } template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_private<_AP_W, _AP_S>& op, char op2) { return op.operator >=(ap_private<(8), (CHAR_IS_SIGNED)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator >=(char op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(8), (CHAR_IS_SIGNED)>(op2).operator >=(op); } template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_private<_AP_W, _AP_S>& op, char op2) { return op.operator <=(ap_private<(8), (CHAR_IS_SIGNED)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator <=(char op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(8), (CHAR_IS_SIGNED)>(op2).operator <=(op); } template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_private<_AP_W, _AP_S>& op, char op2) { return op.operator ==(ap_private<(8), (CHAR_IS_SIGNED)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator ==(char op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(8), (CHAR_IS_SIGNED)>(op2).operator ==(op); } template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_private<_AP_W, _AP_S>& op, char op2) { return op.operator !=(ap_private<(8), (CHAR_IS_SIGNED)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator !=(char op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(8), (CHAR_IS_SIGNED)>(op2).operator !=(op); }
template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (true)>::template RType<_AP_W, _AP_S>::mult operator *(signed char i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(8), (true)>(i_op).operator *(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(8), (true)>::mult operator *(const ap_private<_AP_W, _AP_S>& op, signed char i_op) { return op.operator *(ap_private<(8), (true)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (true)>::template RType<_AP_W, _AP_S>::plus operator +(signed char i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(8), (true)>(i_op).operator +(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(8), (true)>::plus operator +(const ap_private<_AP_W, _AP_S>& op, signed char i_op) { return op.operator +(ap_private<(8), (true)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (true)>::template RType<_AP_W, _AP_S>::minus operator -(signed char i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(8), (true)>(i_op).operator -(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(8), (true)>::minus operator -(const ap_private<_AP_W, _AP_S>& op, signed char i_op) { return op.operator -(ap_private<(8), (true)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (true)>::template RType<_AP_W, _AP_S>::div operator /(signed char i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(8), (true)>(i_op).operator /(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(8), (true)>::div operator /(const ap_private<_AP_W, _AP_S>& op, signed char i_op) { return op.operator /(ap_private<(8), (true)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (true)>::template RType<_AP_W, _AP_S>::mod operator %(signed char i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(8), (true)>(i_op).operator %(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(8), (true)>::mod operator %(const ap_private<_AP_W, _AP_S>& op, signed char i_op) { return op.operator %(ap_private<(8), (true)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (true)>::template RType<_AP_W, _AP_S>::logic operator &(signed char i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(8), (true)>(i_op).operator &(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(8), (true)>::logic operator &(const ap_private<_AP_W, _AP_S>& op, signed char i_op) { return op.operator &(ap_private<(8), (true)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (true)>::template RType<_AP_W, _AP_S>::logic operator |(signed char i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(8), (true)>(i_op).operator |(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(8), (true)>::logic operator |(const ap_private<_AP_W, _AP_S>& op, signed char i_op) { return op.operator |(ap_private<(8), (true)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (true)>::template RType<_AP_W, _AP_S>::logic operator ^(signed char i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(8), (true)>(i_op).operator ^(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(8), (true)>::logic operator ^(const ap_private<_AP_W, _AP_S>& op, signed char i_op) { return op.operator ^(ap_private<(8), (true)>(i_op)); } template <int _AP_W, bool _AP_S> signed char operator >>(signed char i_op, const ap_private<_AP_W, _AP_S, false>& op) { return i_op >>(op.get_VAL()); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(8), (true)>::arg1 operator >>(const ap_private<_AP_W, _AP_S>& op, signed char i_op) { return op.operator >>(i_op); } template <int _AP_W, bool _AP_S> signed char operator <<(signed char i_op, const ap_private<_AP_W, _AP_S, false>& op) { return i_op <<(op.get_VAL()); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(8), (true)>::arg1 operator <<(const ap_private<_AP_W, _AP_S>& op, signed char i_op) { return op.operator <<(i_op); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator +=( ap_private<_AP_W, _AP_S>& op, signed char op2) { return op.operator +=(ap_private<(8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator -=( ap_private<_AP_W, _AP_S>& op, signed char op2) { return op.operator -=(ap_private<(8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator *=( ap_private<_AP_W, _AP_S>& op, signed char op2) { return op.operator *=(ap_private<(8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator /=( ap_private<_AP_W, _AP_S>& op, signed char op2) { return op.operator /=(ap_private<(8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator %=( ap_private<_AP_W, _AP_S>& op, signed char op2) { return op.operator %=(ap_private<(8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator &=( ap_private<_AP_W, _AP_S>& op, signed char op2) { return op.operator &=(ap_private<(8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator |=( ap_private<_AP_W, _AP_S>& op, signed char op2) { return op.operator |=(ap_private<(8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator ^=( ap_private<_AP_W, _AP_S>& op, signed char op2) { return op.operator ^=(ap_private<(8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator >>=( ap_private<_AP_W, _AP_S>& op, signed char op2) { op = op.operator>>(op2); return op; } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator <<=( ap_private<_AP_W, _AP_S>& op, signed char op2) { op = op.operator<<(op2); return op; } template <int _AP_W, bool _AP_S> inline bool operator >(const ap_private<_AP_W, _AP_S>& op, signed char op2) { return op.operator >(ap_private<(8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator >(signed char op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(8), (true)>(op2).operator >(op); } template <int _AP_W, bool _AP_S> inline bool operator <(const ap_private<_AP_W, _AP_S>& op, signed char op2) { return op.operator <(ap_private<(8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator <(signed char op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(8), (true)>(op2).operator <(op); } template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_private<_AP_W, _AP_S>& op, signed char op2) { return op.operator >=(ap_private<(8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator >=(signed char op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(8), (true)>(op2).operator >=(op); } template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_private<_AP_W, _AP_S>& op, signed char op2) { return op.operator <=(ap_private<(8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator <=(signed char op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(8), (true)>(op2).operator <=(op); } template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_private<_AP_W, _AP_S>& op, signed char op2) { return op.operator ==(ap_private<(8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator ==(signed char op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(8), (true)>(op2).operator ==(op); } template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_private<_AP_W, _AP_S>& op, signed char op2) { return op.operator !=(ap_private<(8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator !=(signed char op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(8), (true)>(op2).operator !=(op); }
template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (false)>::template RType<_AP_W, _AP_S>::mult operator *(unsigned char i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(8), (false)>(i_op).operator *(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(8), (false)>::mult operator *(const ap_private<_AP_W, _AP_S>& op, unsigned char i_op) { return op.operator *(ap_private<(8), (false)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (false)>::template RType<_AP_W, _AP_S>::plus operator +(unsigned char i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(8), (false)>(i_op).operator +(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(8), (false)>::plus operator +(const ap_private<_AP_W, _AP_S>& op, unsigned char i_op) { return op.operator +(ap_private<(8), (false)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (false)>::template RType<_AP_W, _AP_S>::minus operator -(unsigned char i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(8), (false)>(i_op).operator -(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(8), (false)>::minus operator -(const ap_private<_AP_W, _AP_S>& op, unsigned char i_op) { return op.operator -(ap_private<(8), (false)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (false)>::template RType<_AP_W, _AP_S>::div operator /(unsigned char i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(8), (false)>(i_op).operator /(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(8), (false)>::div operator /(const ap_private<_AP_W, _AP_S>& op, unsigned char i_op) { return op.operator /(ap_private<(8), (false)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (false)>::template RType<_AP_W, _AP_S>::mod operator %(unsigned char i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(8), (false)>(i_op).operator %(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(8), (false)>::mod operator %(const ap_private<_AP_W, _AP_S>& op, unsigned char i_op) { return op.operator %(ap_private<(8), (false)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (false)>::template RType<_AP_W, _AP_S>::logic operator &(unsigned char i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(8), (false)>(i_op).operator &(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(8), (false)>::logic operator &(const ap_private<_AP_W, _AP_S>& op, unsigned char i_op) { return op.operator &(ap_private<(8), (false)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (false)>::template RType<_AP_W, _AP_S>::logic operator |(unsigned char i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(8), (false)>(i_op).operator |(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(8), (false)>::logic operator |(const ap_private<_AP_W, _AP_S>& op, unsigned char i_op) { return op.operator |(ap_private<(8), (false)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (false)>::template RType<_AP_W, _AP_S>::logic operator ^(unsigned char i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(8), (false)>(i_op).operator ^(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(8), (false)>::logic operator ^(const ap_private<_AP_W, _AP_S>& op, unsigned char i_op) { return op.operator ^(ap_private<(8), (false)>(i_op)); } template <int _AP_W, bool _AP_S> unsigned char operator >>(unsigned char i_op, const ap_private<_AP_W, _AP_S, false>& op) { return i_op >>(op.get_VAL()); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(8), (false)>::arg1 operator >>(const ap_private<_AP_W, _AP_S>& op, unsigned char i_op) { return op.operator >>(i_op); } template <int _AP_W, bool _AP_S> unsigned char operator <<(unsigned char i_op, const ap_private<_AP_W, _AP_S, false>& op) { return i_op <<(op.get_VAL()); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(8), (false)>::arg1 operator <<(const ap_private<_AP_W, _AP_S>& op, unsigned char i_op) { return op.operator <<(i_op); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator +=( ap_private<_AP_W, _AP_S>& op, unsigned char op2) { return op.operator +=(ap_private<(8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator -=( ap_private<_AP_W, _AP_S>& op, unsigned char op2) { return op.operator -=(ap_private<(8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator *=( ap_private<_AP_W, _AP_S>& op, unsigned char op2) { return op.operator *=(ap_private<(8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator /=( ap_private<_AP_W, _AP_S>& op, unsigned char op2) { return op.operator /=(ap_private<(8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator %=( ap_private<_AP_W, _AP_S>& op, unsigned char op2) { return op.operator %=(ap_private<(8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator &=( ap_private<_AP_W, _AP_S>& op, unsigned char op2) { return op.operator &=(ap_private<(8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator |=( ap_private<_AP_W, _AP_S>& op, unsigned char op2) { return op.operator |=(ap_private<(8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator ^=( ap_private<_AP_W, _AP_S>& op, unsigned char op2) { return op.operator ^=(ap_private<(8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator >>=( ap_private<_AP_W, _AP_S>& op, unsigned char op2) { op = op.operator>>(op2); return op; } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator <<=( ap_private<_AP_W, _AP_S>& op, unsigned char op2) { op = op.operator<<(op2); return op; } template <int _AP_W, bool _AP_S> inline bool operator >(const ap_private<_AP_W, _AP_S>& op, unsigned char op2) { return op.operator >(ap_private<(8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator >(unsigned char op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(8), (false)>(op2).operator >(op); } template <int _AP_W, bool _AP_S> inline bool operator <(const ap_private<_AP_W, _AP_S>& op, unsigned char op2) { return op.operator <(ap_private<(8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator <(unsigned char op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(8), (false)>(op2).operator <(op); } template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_private<_AP_W, _AP_S>& op, unsigned char op2) { return op.operator >=(ap_private<(8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator >=(unsigned char op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(8), (false)>(op2).operator >=(op); } template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_private<_AP_W, _AP_S>& op, unsigned char op2) { return op.operator <=(ap_private<(8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator <=(unsigned char op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(8), (false)>(op2).operator <=(op); } template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_private<_AP_W, _AP_S>& op, unsigned char op2) { return op.operator ==(ap_private<(8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator ==(unsigned char op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(8), (false)>(op2).operator ==(op); } template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_private<_AP_W, _AP_S>& op, unsigned char op2) { return op.operator !=(ap_private<(8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator !=(unsigned char op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(8), (false)>(op2).operator !=(op); }
template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(short) * 8), (true)>::template RType<_AP_W, _AP_S>::mult operator *(short i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(short) * 8), (true)>(i_op).operator *(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(short) * 8), (true)>::mult operator *(const ap_private<_AP_W, _AP_S>& op, short i_op) { return op.operator *(ap_private<(sizeof(short) * 8), (true)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(short) * 8), (true)>::template RType<_AP_W, _AP_S>::plus operator +(short i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(short) * 8), (true)>(i_op).operator +(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(short) * 8), (true)>::plus operator +(const ap_private<_AP_W, _AP_S>& op, short i_op) { return op.operator +(ap_private<(sizeof(short) * 8), (true)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(short) * 8), (true)>::template RType<_AP_W, _AP_S>::minus operator -(short i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(short) * 8), (true)>(i_op).operator -(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(short) * 8), (true)>::minus operator -(const ap_private<_AP_W, _AP_S>& op, short i_op) { return op.operator -(ap_private<(sizeof(short) * 8), (true)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(short) * 8), (true)>::template RType<_AP_W, _AP_S>::div operator /(short i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(short) * 8), (true)>(i_op).operator /(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(short) * 8), (true)>::div operator /(const ap_private<_AP_W, _AP_S>& op, short i_op) { return op.operator /(ap_private<(sizeof(short) * 8), (true)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(short) * 8), (true)>::template RType<_AP_W, _AP_S>::mod operator %(short i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(short) * 8), (true)>(i_op).operator %(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(short) * 8), (true)>::mod operator %(const ap_private<_AP_W, _AP_S>& op, short i_op) { return op.operator %(ap_private<(sizeof(short) * 8), (true)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(short) * 8), (true)>::template RType<_AP_W, _AP_S>::logic operator &(short i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(short) * 8), (true)>(i_op).operator &(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(short) * 8), (true)>::logic operator &(const ap_private<_AP_W, _AP_S>& op, short i_op) { return op.operator &(ap_private<(sizeof(short) * 8), (true)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(short) * 8), (true)>::template RType<_AP_W, _AP_S>::logic operator |(short i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(short) * 8), (true)>(i_op).operator |(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(short) * 8), (true)>::logic operator |(const ap_private<_AP_W, _AP_S>& op, short i_op) { return op.operator |(ap_private<(sizeof(short) * 8), (true)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(short) * 8), (true)>::template RType<_AP_W, _AP_S>::logic operator ^(short i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(short) * 8), (true)>(i_op).operator ^(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(short) * 8), (true)>::logic operator ^(const ap_private<_AP_W, _AP_S>& op, short i_op) { return op.operator ^(ap_private<(sizeof(short) * 8), (true)>(i_op)); } template <int _AP_W, bool _AP_S> short operator >>(short i_op, const ap_private<_AP_W, _AP_S, false>& op) { return i_op >>(op.get_VAL()); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(short) * 8), (true)>::arg1 operator >>(const ap_private<_AP_W, _AP_S>& op, short i_op) { return op.operator >>(i_op); } template <int _AP_W, bool _AP_S> short operator <<(short i_op, const ap_private<_AP_W, _AP_S, false>& op) { return i_op <<(op.get_VAL()); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(short) * 8), (true)>::arg1 operator <<(const ap_private<_AP_W, _AP_S>& op, short i_op) { return op.operator <<(i_op); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator +=( ap_private<_AP_W, _AP_S>& op, short op2) { return op.operator +=(ap_private<(sizeof(short) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator -=( ap_private<_AP_W, _AP_S>& op, short op2) { return op.operator -=(ap_private<(sizeof(short) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator *=( ap_private<_AP_W, _AP_S>& op, short op2) { return op.operator *=(ap_private<(sizeof(short) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator /=( ap_private<_AP_W, _AP_S>& op, short op2) { return op.operator /=(ap_private<(sizeof(short) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator %=( ap_private<_AP_W, _AP_S>& op, short op2) { return op.operator %=(ap_private<(sizeof(short) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator &=( ap_private<_AP_W, _AP_S>& op, short op2) { return op.operator &=(ap_private<(sizeof(short) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator |=( ap_private<_AP_W, _AP_S>& op, short op2) { return op.operator |=(ap_private<(sizeof(short) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator ^=( ap_private<_AP_W, _AP_S>& op, short op2) { return op.operator ^=(ap_private<(sizeof(short) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator >>=( ap_private<_AP_W, _AP_S>& op, short op2) { op = op.operator>>(op2); return op; } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator <<=( ap_private<_AP_W, _AP_S>& op, short op2) { op = op.operator<<(op2); return op; } template <int _AP_W, bool _AP_S> inline bool operator >(const ap_private<_AP_W, _AP_S>& op, short op2) { return op.operator >(ap_private<(sizeof(short) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator >(short op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(sizeof(short) * 8), (true)>(op2).operator >(op); } template <int _AP_W, bool _AP_S> inline bool operator <(const ap_private<_AP_W, _AP_S>& op, short op2) { return op.operator <(ap_private<(sizeof(short) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator <(short op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(sizeof(short) * 8), (true)>(op2).operator <(op); } template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_private<_AP_W, _AP_S>& op, short op2) { return op.operator >=(ap_private<(sizeof(short) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator >=(short op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(sizeof(short) * 8), (true)>(op2).operator >=(op); } template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_private<_AP_W, _AP_S>& op, short op2) { return op.operator <=(ap_private<(sizeof(short) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator <=(short op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(sizeof(short) * 8), (true)>(op2).operator <=(op); } template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_private<_AP_W, _AP_S>& op, short op2) { return op.operator ==(ap_private<(sizeof(short) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator ==(short op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(sizeof(short) * 8), (true)>(op2).operator ==(op); } template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_private<_AP_W, _AP_S>& op, short op2) { return op.operator !=(ap_private<(sizeof(short) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator !=(short op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(sizeof(short) * 8), (true)>(op2).operator !=(op); }
template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned short) * 8), (false)>::template RType<_AP_W, _AP_S>::mult operator *(unsigned short i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned short) * 8), (false)>(i_op).operator *(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(unsigned short) * 8), (false)>::mult operator *(const ap_private<_AP_W, _AP_S>& op, unsigned short i_op) { return op.operator *(ap_private<(sizeof(unsigned short) * 8), (false)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned short) * 8), (false)>::template RType<_AP_W, _AP_S>::plus operator +(unsigned short i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned short) * 8), (false)>(i_op).operator +(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(unsigned short) * 8), (false)>::plus operator +(const ap_private<_AP_W, _AP_S>& op, unsigned short i_op) { return op.operator +(ap_private<(sizeof(unsigned short) * 8), (false)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned short) * 8), (false)>::template RType<_AP_W, _AP_S>::minus operator -(unsigned short i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned short) * 8), (false)>(i_op).operator -(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(unsigned short) * 8), (false)>::minus operator -(const ap_private<_AP_W, _AP_S>& op, unsigned short i_op) { return op.operator -(ap_private<(sizeof(unsigned short) * 8), (false)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned short) * 8), (false)>::template RType<_AP_W, _AP_S>::div operator /(unsigned short i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned short) * 8), (false)>(i_op).operator /(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(unsigned short) * 8), (false)>::div operator /(const ap_private<_AP_W, _AP_S>& op, unsigned short i_op) { return op.operator /(ap_private<(sizeof(unsigned short) * 8), (false)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned short) * 8), (false)>::template RType<_AP_W, _AP_S>::mod operator %(unsigned short i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned short) * 8), (false)>(i_op).operator %(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(unsigned short) * 8), (false)>::mod operator %(const ap_private<_AP_W, _AP_S>& op, unsigned short i_op) { return op.operator %(ap_private<(sizeof(unsigned short) * 8), (false)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned short) * 8), (false)>::template RType<_AP_W, _AP_S>::logic operator &(unsigned short i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned short) * 8), (false)>(i_op).operator &(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(unsigned short) * 8), (false)>::logic operator &(const ap_private<_AP_W, _AP_S>& op, unsigned short i_op) { return op.operator &(ap_private<(sizeof(unsigned short) * 8), (false)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned short) * 8), (false)>::template RType<_AP_W, _AP_S>::logic operator |(unsigned short i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned short) * 8), (false)>(i_op).operator |(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(unsigned short) * 8), (false)>::logic operator |(const ap_private<_AP_W, _AP_S>& op, unsigned short i_op) { return op.operator |(ap_private<(sizeof(unsigned short) * 8), (false)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned short) * 8), (false)>::template RType<_AP_W, _AP_S>::logic operator ^(unsigned short i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned short) * 8), (false)>(i_op).operator ^(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(unsigned short) * 8), (false)>::logic operator ^(const ap_private<_AP_W, _AP_S>& op, unsigned short i_op) { return op.operator ^(ap_private<(sizeof(unsigned short) * 8), (false)>(i_op)); } template <int _AP_W, bool _AP_S> unsigned short operator >>(unsigned short i_op, const ap_private<_AP_W, _AP_S, false>& op) { return i_op >>(op.get_VAL()); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(unsigned short) * 8), (false)>::arg1 operator >>(const ap_private<_AP_W, _AP_S>& op, unsigned short i_op) { return op.operator >>(i_op); } template <int _AP_W, bool _AP_S> unsigned short operator <<(unsigned short i_op, const ap_private<_AP_W, _AP_S, false>& op) { return i_op <<(op.get_VAL()); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(unsigned short) * 8), (false)>::arg1 operator <<(const ap_private<_AP_W, _AP_S>& op, unsigned short i_op) { return op.operator <<(i_op); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator +=( ap_private<_AP_W, _AP_S>& op, unsigned short op2) { return op.operator +=(ap_private<(sizeof(unsigned short) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator -=( ap_private<_AP_W, _AP_S>& op, unsigned short op2) { return op.operator -=(ap_private<(sizeof(unsigned short) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator *=( ap_private<_AP_W, _AP_S>& op, unsigned short op2) { return op.operator *=(ap_private<(sizeof(unsigned short) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator /=( ap_private<_AP_W, _AP_S>& op, unsigned short op2) { return op.operator /=(ap_private<(sizeof(unsigned short) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator %=( ap_private<_AP_W, _AP_S>& op, unsigned short op2) { return op.operator %=(ap_private<(sizeof(unsigned short) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator &=( ap_private<_AP_W, _AP_S>& op, unsigned short op2) { return op.operator &=(ap_private<(sizeof(unsigned short) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator |=( ap_private<_AP_W, _AP_S>& op, unsigned short op2) { return op.operator |=(ap_private<(sizeof(unsigned short) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator ^=( ap_private<_AP_W, _AP_S>& op, unsigned short op2) { return op.operator ^=(ap_private<(sizeof(unsigned short) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator >>=( ap_private<_AP_W, _AP_S>& op, unsigned short op2) { op = op.operator>>(op2); return op; } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator <<=( ap_private<_AP_W, _AP_S>& op, unsigned short op2) { op = op.operator<<(op2); return op; } template <int _AP_W, bool _AP_S> inline bool operator >(const ap_private<_AP_W, _AP_S>& op, unsigned short op2) { return op.operator >(ap_private<(sizeof(unsigned short) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator >(unsigned short op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(sizeof(unsigned short) * 8), (false)>(op2).operator >(op); } template <int _AP_W, bool _AP_S> inline bool operator <(const ap_private<_AP_W, _AP_S>& op, unsigned short op2) { return op.operator <(ap_private<(sizeof(unsigned short) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator <(unsigned short op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(sizeof(unsigned short) * 8), (false)>(op2).operator <(op); } template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_private<_AP_W, _AP_S>& op, unsigned short op2) { return op.operator >=(ap_private<(sizeof(unsigned short) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator >=(unsigned short op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(sizeof(unsigned short) * 8), (false)>(op2).operator >=(op); } template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_private<_AP_W, _AP_S>& op, unsigned short op2) { return op.operator <=(ap_private<(sizeof(unsigned short) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator <=(unsigned short op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(sizeof(unsigned short) * 8), (false)>(op2).operator <=(op); } template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_private<_AP_W, _AP_S>& op, unsigned short op2) { return op.operator ==(ap_private<(sizeof(unsigned short) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator ==(unsigned short op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(sizeof(unsigned short) * 8), (false)>(op2).operator ==(op); } template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_private<_AP_W, _AP_S>& op, unsigned short op2) { return op.operator !=(ap_private<(sizeof(unsigned short) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator !=(unsigned short op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(sizeof(unsigned short) * 8), (false)>(op2).operator !=(op); }
template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(int) * 8), (true)>::template RType<_AP_W, _AP_S>::mult operator *(int i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(int) * 8), (true)>(i_op).operator *(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(int) * 8), (true)>::mult operator *(const ap_private<_AP_W, _AP_S>& op, int i_op) { return op.operator *(ap_private<(sizeof(int) * 8), (true)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(int) * 8), (true)>::template RType<_AP_W, _AP_S>::plus operator +(int i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(int) * 8), (true)>(i_op).operator +(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(int) * 8), (true)>::plus operator +(const ap_private<_AP_W, _AP_S>& op, int i_op) { return op.operator +(ap_private<(sizeof(int) * 8), (true)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(int) * 8), (true)>::template RType<_AP_W, _AP_S>::minus operator -(int i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(int) * 8), (true)>(i_op).operator -(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(int) * 8), (true)>::minus operator -(const ap_private<_AP_W, _AP_S>& op, int i_op) { return op.operator -(ap_private<(sizeof(int) * 8), (true)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(int) * 8), (true)>::template RType<_AP_W, _AP_S>::div operator /(int i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(int) * 8), (true)>(i_op).operator /(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(int) * 8), (true)>::div operator /(const ap_private<_AP_W, _AP_S>& op, int i_op) { return op.operator /(ap_private<(sizeof(int) * 8), (true)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(int) * 8), (true)>::template RType<_AP_W, _AP_S>::mod operator %(int i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(int) * 8), (true)>(i_op).operator %(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(int) * 8), (true)>::mod operator %(const ap_private<_AP_W, _AP_S>& op, int i_op) { return op.operator %(ap_private<(sizeof(int) * 8), (true)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(int) * 8), (true)>::template RType<_AP_W, _AP_S>::logic operator &(int i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(int) * 8), (true)>(i_op).operator &(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(int) * 8), (true)>::logic operator &(const ap_private<_AP_W, _AP_S>& op, int i_op) { return op.operator &(ap_private<(sizeof(int) * 8), (true)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(int) * 8), (true)>::template RType<_AP_W, _AP_S>::logic operator |(int i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(int) * 8), (true)>(i_op).operator |(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(int) * 8), (true)>::logic operator |(const ap_private<_AP_W, _AP_S>& op, int i_op) { return op.operator |(ap_private<(sizeof(int) * 8), (true)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(int) * 8), (true)>::template RType<_AP_W, _AP_S>::logic operator ^(int i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(int) * 8), (true)>(i_op).operator ^(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(int) * 8), (true)>::logic operator ^(const ap_private<_AP_W, _AP_S>& op, int i_op) { return op.operator ^(ap_private<(sizeof(int) * 8), (true)>(i_op)); } template <int _AP_W, bool _AP_S> int operator >>(int i_op, const ap_private<_AP_W, _AP_S, false>& op) { return i_op >>(op.get_VAL()); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(int) * 8), (true)>::arg1 operator >>(const ap_private<_AP_W, _AP_S>& op, int i_op) { return op.operator >>(i_op); } template <int _AP_W, bool _AP_S> int operator <<(int i_op, const ap_private<_AP_W, _AP_S, false>& op) { return i_op <<(op.get_VAL()); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(int) * 8), (true)>::arg1 operator <<(const ap_private<_AP_W, _AP_S>& op, int i_op) { return op.operator <<(i_op); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator +=( ap_private<_AP_W, _AP_S>& op, int op2) { return op.operator +=(ap_private<(sizeof(int) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator -=( ap_private<_AP_W, _AP_S>& op, int op2) { return op.operator -=(ap_private<(sizeof(int) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator *=( ap_private<_AP_W, _AP_S>& op, int op2) { return op.operator *=(ap_private<(sizeof(int) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator /=( ap_private<_AP_W, _AP_S>& op, int op2) { return op.operator /=(ap_private<(sizeof(int) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator %=( ap_private<_AP_W, _AP_S>& op, int op2) { return op.operator %=(ap_private<(sizeof(int) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator &=( ap_private<_AP_W, _AP_S>& op, int op2) { return op.operator &=(ap_private<(sizeof(int) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator |=( ap_private<_AP_W, _AP_S>& op, int op2) { return op.operator |=(ap_private<(sizeof(int) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator ^=( ap_private<_AP_W, _AP_S>& op, int op2) { return op.operator ^=(ap_private<(sizeof(int) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator >>=( ap_private<_AP_W, _AP_S>& op, int op2) { op = op.operator>>(op2); return op; } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator <<=( ap_private<_AP_W, _AP_S>& op, int op2) { op = op.operator<<(op2); return op; } template <int _AP_W, bool _AP_S> inline bool operator >(const ap_private<_AP_W, _AP_S>& op, int op2) { return op.operator >(ap_private<(sizeof(int) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator >(int op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(sizeof(int) * 8), (true)>(op2).operator >(op); } template <int _AP_W, bool _AP_S> inline bool operator <(const ap_private<_AP_W, _AP_S>& op, int op2) { return op.operator <(ap_private<(sizeof(int) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator <(int op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(sizeof(int) * 8), (true)>(op2).operator <(op); } template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_private<_AP_W, _AP_S>& op, int op2) { return op.operator >=(ap_private<(sizeof(int) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator >=(int op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(sizeof(int) * 8), (true)>(op2).operator >=(op); } template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_private<_AP_W, _AP_S>& op, int op2) { return op.operator <=(ap_private<(sizeof(int) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator <=(int op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(sizeof(int) * 8), (true)>(op2).operator <=(op); } template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_private<_AP_W, _AP_S>& op, int op2) { return op.operator ==(ap_private<(sizeof(int) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator ==(int op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(sizeof(int) * 8), (true)>(op2).operator ==(op); } template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_private<_AP_W, _AP_S>& op, int op2) { return op.operator !=(ap_private<(sizeof(int) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator !=(int op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(sizeof(int) * 8), (true)>(op2).operator !=(op); }
template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned int) * 8), (false)>::template RType<_AP_W, _AP_S>::mult operator *(unsigned int i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned int) * 8), (false)>(i_op).operator *(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(unsigned int) * 8), (false)>::mult operator *(const ap_private<_AP_W, _AP_S>& op, unsigned int i_op) { return op.operator *(ap_private<(sizeof(unsigned int) * 8), (false)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned int) * 8), (false)>::template RType<_AP_W, _AP_S>::plus operator +(unsigned int i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned int) * 8), (false)>(i_op).operator +(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(unsigned int) * 8), (false)>::plus operator +(const ap_private<_AP_W, _AP_S>& op, unsigned int i_op) { return op.operator +(ap_private<(sizeof(unsigned int) * 8), (false)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned int) * 8), (false)>::template RType<_AP_W, _AP_S>::minus operator -(unsigned int i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned int) * 8), (false)>(i_op).operator -(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(unsigned int) * 8), (false)>::minus operator -(const ap_private<_AP_W, _AP_S>& op, unsigned int i_op) { return op.operator -(ap_private<(sizeof(unsigned int) * 8), (false)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned int) * 8), (false)>::template RType<_AP_W, _AP_S>::div operator /(unsigned int i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned int) * 8), (false)>(i_op).operator /(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(unsigned int) * 8), (false)>::div operator /(const ap_private<_AP_W, _AP_S>& op, unsigned int i_op) { return op.operator /(ap_private<(sizeof(unsigned int) * 8), (false)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned int) * 8), (false)>::template RType<_AP_W, _AP_S>::mod operator %(unsigned int i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned int) * 8), (false)>(i_op).operator %(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(unsigned int) * 8), (false)>::mod operator %(const ap_private<_AP_W, _AP_S>& op, unsigned int i_op) { return op.operator %(ap_private<(sizeof(unsigned int) * 8), (false)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned int) * 8), (false)>::template RType<_AP_W, _AP_S>::logic operator &(unsigned int i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned int) * 8), (false)>(i_op).operator &(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(unsigned int) * 8), (false)>::logic operator &(const ap_private<_AP_W, _AP_S>& op, unsigned int i_op) { return op.operator &(ap_private<(sizeof(unsigned int) * 8), (false)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned int) * 8), (false)>::template RType<_AP_W, _AP_S>::logic operator |(unsigned int i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned int) * 8), (false)>(i_op).operator |(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(unsigned int) * 8), (false)>::logic operator |(const ap_private<_AP_W, _AP_S>& op, unsigned int i_op) { return op.operator |(ap_private<(sizeof(unsigned int) * 8), (false)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned int) * 8), (false)>::template RType<_AP_W, _AP_S>::logic operator ^(unsigned int i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned int) * 8), (false)>(i_op).operator ^(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(unsigned int) * 8), (false)>::logic operator ^(const ap_private<_AP_W, _AP_S>& op, unsigned int i_op) { return op.operator ^(ap_private<(sizeof(unsigned int) * 8), (false)>(i_op)); } template <int _AP_W, bool _AP_S> unsigned int operator >>(unsigned int i_op, const ap_private<_AP_W, _AP_S, false>& op) { return i_op >>(op.get_VAL()); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(unsigned int) * 8), (false)>::arg1 operator >>(const ap_private<_AP_W, _AP_S>& op, unsigned int i_op) { return op.operator >>(i_op); } template <int _AP_W, bool _AP_S> unsigned int operator <<(unsigned int i_op, const ap_private<_AP_W, _AP_S, false>& op) { return i_op <<(op.get_VAL()); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(unsigned int) * 8), (false)>::arg1 operator <<(const ap_private<_AP_W, _AP_S>& op, unsigned int i_op) { return op.operator <<(i_op); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator +=( ap_private<_AP_W, _AP_S>& op, unsigned int op2) { return op.operator +=(ap_private<(sizeof(unsigned int) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator -=( ap_private<_AP_W, _AP_S>& op, unsigned int op2) { return op.operator -=(ap_private<(sizeof(unsigned int) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator *=( ap_private<_AP_W, _AP_S>& op, unsigned int op2) { return op.operator *=(ap_private<(sizeof(unsigned int) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator /=( ap_private<_AP_W, _AP_S>& op, unsigned int op2) { return op.operator /=(ap_private<(sizeof(unsigned int) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator %=( ap_private<_AP_W, _AP_S>& op, unsigned int op2) { return op.operator %=(ap_private<(sizeof(unsigned int) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator &=( ap_private<_AP_W, _AP_S>& op, unsigned int op2) { return op.operator &=(ap_private<(sizeof(unsigned int) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator |=( ap_private<_AP_W, _AP_S>& op, unsigned int op2) { return op.operator |=(ap_private<(sizeof(unsigned int) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator ^=( ap_private<_AP_W, _AP_S>& op, unsigned int op2) { return op.operator ^=(ap_private<(sizeof(unsigned int) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator >>=( ap_private<_AP_W, _AP_S>& op, unsigned int op2) { op = op.operator>>(op2); return op; } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator <<=( ap_private<_AP_W, _AP_S>& op, unsigned int op2) { op = op.operator<<(op2); return op; } template <int _AP_W, bool _AP_S> inline bool operator >(const ap_private<_AP_W, _AP_S>& op, unsigned int op2) { return op.operator >(ap_private<(sizeof(unsigned int) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator >(unsigned int op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(sizeof(unsigned int) * 8), (false)>(op2).operator >(op); } template <int _AP_W, bool _AP_S> inline bool operator <(const ap_private<_AP_W, _AP_S>& op, unsigned int op2) { return op.operator <(ap_private<(sizeof(unsigned int) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator <(unsigned int op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(sizeof(unsigned int) * 8), (false)>(op2).operator <(op); } template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_private<_AP_W, _AP_S>& op, unsigned int op2) { return op.operator >=(ap_private<(sizeof(unsigned int) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator >=(unsigned int op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(sizeof(unsigned int) * 8), (false)>(op2).operator >=(op); } template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_private<_AP_W, _AP_S>& op, unsigned int op2) { return op.operator <=(ap_private<(sizeof(unsigned int) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator <=(unsigned int op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(sizeof(unsigned int) * 8), (false)>(op2).operator <=(op); } template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_private<_AP_W, _AP_S>& op, unsigned int op2) { return op.operator ==(ap_private<(sizeof(unsigned int) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator ==(unsigned int op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(sizeof(unsigned int) * 8), (false)>(op2).operator ==(op); } template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_private<_AP_W, _AP_S>& op, unsigned int op2) { return op.operator !=(ap_private<(sizeof(unsigned int) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator !=(unsigned int op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(sizeof(unsigned int) * 8), (false)>(op2).operator !=(op); }
template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(long) * 8), (true)>::template RType<_AP_W, _AP_S>::mult operator *(long i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(long) * 8), (true)>(i_op).operator *(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(long) * 8), (true)>::mult operator *(const ap_private<_AP_W, _AP_S>& op, long i_op) { return op.operator *(ap_private<(sizeof(long) * 8), (true)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(long) * 8), (true)>::template RType<_AP_W, _AP_S>::plus operator +(long i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(long) * 8), (true)>(i_op).operator +(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(long) * 8), (true)>::plus operator +(const ap_private<_AP_W, _AP_S>& op, long i_op) { return op.operator +(ap_private<(sizeof(long) * 8), (true)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(long) * 8), (true)>::template RType<_AP_W, _AP_S>::minus operator -(long i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(long) * 8), (true)>(i_op).operator -(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(long) * 8), (true)>::minus operator -(const ap_private<_AP_W, _AP_S>& op, long i_op) { return op.operator -(ap_private<(sizeof(long) * 8), (true)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(long) * 8), (true)>::template RType<_AP_W, _AP_S>::div operator /(long i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(long) * 8), (true)>(i_op).operator /(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(long) * 8), (true)>::div operator /(const ap_private<_AP_W, _AP_S>& op, long i_op) { return op.operator /(ap_private<(sizeof(long) * 8), (true)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(long) * 8), (true)>::template RType<_AP_W, _AP_S>::mod operator %(long i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(long) * 8), (true)>(i_op).operator %(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(long) * 8), (true)>::mod operator %(const ap_private<_AP_W, _AP_S>& op, long i_op) { return op.operator %(ap_private<(sizeof(long) * 8), (true)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(long) * 8), (true)>::template RType<_AP_W, _AP_S>::logic operator &(long i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(long) * 8), (true)>(i_op).operator &(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(long) * 8), (true)>::logic operator &(const ap_private<_AP_W, _AP_S>& op, long i_op) { return op.operator &(ap_private<(sizeof(long) * 8), (true)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(long) * 8), (true)>::template RType<_AP_W, _AP_S>::logic operator |(long i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(long) * 8), (true)>(i_op).operator |(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(long) * 8), (true)>::logic operator |(const ap_private<_AP_W, _AP_S>& op, long i_op) { return op.operator |(ap_private<(sizeof(long) * 8), (true)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(long) * 8), (true)>::template RType<_AP_W, _AP_S>::logic operator ^(long i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(long) * 8), (true)>(i_op).operator ^(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(long) * 8), (true)>::logic operator ^(const ap_private<_AP_W, _AP_S>& op, long i_op) { return op.operator ^(ap_private<(sizeof(long) * 8), (true)>(i_op)); } template <int _AP_W, bool _AP_S> long operator >>(long i_op, const ap_private<_AP_W, _AP_S, false>& op) { return i_op >>(op.get_VAL()); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(long) * 8), (true)>::arg1 operator >>(const ap_private<_AP_W, _AP_S>& op, long i_op) { return op.operator >>(i_op); } template <int _AP_W, bool _AP_S> long operator <<(long i_op, const ap_private<_AP_W, _AP_S, false>& op) { return i_op <<(op.get_VAL()); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(long) * 8), (true)>::arg1 operator <<(const ap_private<_AP_W, _AP_S>& op, long i_op) { return op.operator <<(i_op); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator +=( ap_private<_AP_W, _AP_S>& op, long op2) { return op.operator +=(ap_private<(sizeof(long) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator -=( ap_private<_AP_W, _AP_S>& op, long op2) { return op.operator -=(ap_private<(sizeof(long) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator *=( ap_private<_AP_W, _AP_S>& op, long op2) { return op.operator *=(ap_private<(sizeof(long) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator /=( ap_private<_AP_W, _AP_S>& op, long op2) { return op.operator /=(ap_private<(sizeof(long) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator %=( ap_private<_AP_W, _AP_S>& op, long op2) { return op.operator %=(ap_private<(sizeof(long) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator &=( ap_private<_AP_W, _AP_S>& op, long op2) { return op.operator &=(ap_private<(sizeof(long) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator |=( ap_private<_AP_W, _AP_S>& op, long op2) { return op.operator |=(ap_private<(sizeof(long) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator ^=( ap_private<_AP_W, _AP_S>& op, long op2) { return op.operator ^=(ap_private<(sizeof(long) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator >>=( ap_private<_AP_W, _AP_S>& op, long op2) { op = op.operator>>(op2); return op; } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator <<=( ap_private<_AP_W, _AP_S>& op, long op2) { op = op.operator<<(op2); return op; } template <int _AP_W, bool _AP_S> inline bool operator >(const ap_private<_AP_W, _AP_S>& op, long op2) { return op.operator >(ap_private<(sizeof(long) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator >(long op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(sizeof(long) * 8), (true)>(op2).operator >(op); } template <int _AP_W, bool _AP_S> inline bool operator <(const ap_private<_AP_W, _AP_S>& op, long op2) { return op.operator <(ap_private<(sizeof(long) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator <(long op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(sizeof(long) * 8), (true)>(op2).operator <(op); } template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_private<_AP_W, _AP_S>& op, long op2) { return op.operator >=(ap_private<(sizeof(long) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator >=(long op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(sizeof(long) * 8), (true)>(op2).operator >=(op); } template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_private<_AP_W, _AP_S>& op, long op2) { return op.operator <=(ap_private<(sizeof(long) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator <=(long op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(sizeof(long) * 8), (true)>(op2).operator <=(op); } template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_private<_AP_W, _AP_S>& op, long op2) { return op.operator ==(ap_private<(sizeof(long) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator ==(long op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(sizeof(long) * 8), (true)>(op2).operator ==(op); } template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_private<_AP_W, _AP_S>& op, long op2) { return op.operator !=(ap_private<(sizeof(long) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator !=(long op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(sizeof(long) * 8), (true)>(op2).operator !=(op); }
template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned long) * 8), (false)>::template RType<_AP_W, _AP_S>::mult operator *(unsigned long i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned long) * 8), (false)>(i_op).operator *(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(unsigned long) * 8), (false)>::mult operator *(const ap_private<_AP_W, _AP_S>& op, unsigned long i_op) { return op.operator *(ap_private<(sizeof(unsigned long) * 8), (false)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned long) * 8), (false)>::template RType<_AP_W, _AP_S>::plus operator +(unsigned long i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned long) * 8), (false)>(i_op).operator +(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(unsigned long) * 8), (false)>::plus operator +(const ap_private<_AP_W, _AP_S>& op, unsigned long i_op) { return op.operator +(ap_private<(sizeof(unsigned long) * 8), (false)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned long) * 8), (false)>::template RType<_AP_W, _AP_S>::minus operator -(unsigned long i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned long) * 8), (false)>(i_op).operator -(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(unsigned long) * 8), (false)>::minus operator -(const ap_private<_AP_W, _AP_S>& op, unsigned long i_op) { return op.operator -(ap_private<(sizeof(unsigned long) * 8), (false)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned long) * 8), (false)>::template RType<_AP_W, _AP_S>::div operator /(unsigned long i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned long) * 8), (false)>(i_op).operator /(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(unsigned long) * 8), (false)>::div operator /(const ap_private<_AP_W, _AP_S>& op, unsigned long i_op) { return op.operator /(ap_private<(sizeof(unsigned long) * 8), (false)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned long) * 8), (false)>::template RType<_AP_W, _AP_S>::mod operator %(unsigned long i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned long) * 8), (false)>(i_op).operator %(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(unsigned long) * 8), (false)>::mod operator %(const ap_private<_AP_W, _AP_S>& op, unsigned long i_op) { return op.operator %(ap_private<(sizeof(unsigned long) * 8), (false)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned long) * 8), (false)>::template RType<_AP_W, _AP_S>::logic operator &(unsigned long i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned long) * 8), (false)>(i_op).operator &(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(unsigned long) * 8), (false)>::logic operator &(const ap_private<_AP_W, _AP_S>& op, unsigned long i_op) { return op.operator &(ap_private<(sizeof(unsigned long) * 8), (false)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned long) * 8), (false)>::template RType<_AP_W, _AP_S>::logic operator |(unsigned long i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned long) * 8), (false)>(i_op).operator |(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(unsigned long) * 8), (false)>::logic operator |(const ap_private<_AP_W, _AP_S>& op, unsigned long i_op) { return op.operator |(ap_private<(sizeof(unsigned long) * 8), (false)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned long) * 8), (false)>::template RType<_AP_W, _AP_S>::logic operator ^(unsigned long i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned long) * 8), (false)>(i_op).operator ^(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(unsigned long) * 8), (false)>::logic operator ^(const ap_private<_AP_W, _AP_S>& op, unsigned long i_op) { return op.operator ^(ap_private<(sizeof(unsigned long) * 8), (false)>(i_op)); } template <int _AP_W, bool _AP_S> unsigned long operator >>(unsigned long i_op, const ap_private<_AP_W, _AP_S, false>& op) { return i_op >>(op.get_VAL()); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(unsigned long) * 8), (false)>::arg1 operator >>(const ap_private<_AP_W, _AP_S>& op, unsigned long i_op) { return op.operator >>(i_op); } template <int _AP_W, bool _AP_S> unsigned long operator <<(unsigned long i_op, const ap_private<_AP_W, _AP_S, false>& op) { return i_op <<(op.get_VAL()); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(unsigned long) * 8), (false)>::arg1 operator <<(const ap_private<_AP_W, _AP_S>& op, unsigned long i_op) { return op.operator <<(i_op); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator +=( ap_private<_AP_W, _AP_S>& op, unsigned long op2) { return op.operator +=(ap_private<(sizeof(unsigned long) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator -=( ap_private<_AP_W, _AP_S>& op, unsigned long op2) { return op.operator -=(ap_private<(sizeof(unsigned long) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator *=( ap_private<_AP_W, _AP_S>& op, unsigned long op2) { return op.operator *=(ap_private<(sizeof(unsigned long) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator /=( ap_private<_AP_W, _AP_S>& op, unsigned long op2) { return op.operator /=(ap_private<(sizeof(unsigned long) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator %=( ap_private<_AP_W, _AP_S>& op, unsigned long op2) { return op.operator %=(ap_private<(sizeof(unsigned long) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator &=( ap_private<_AP_W, _AP_S>& op, unsigned long op2) { return op.operator &=(ap_private<(sizeof(unsigned long) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator |=( ap_private<_AP_W, _AP_S>& op, unsigned long op2) { return op.operator |=(ap_private<(sizeof(unsigned long) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator ^=( ap_private<_AP_W, _AP_S>& op, unsigned long op2) { return op.operator ^=(ap_private<(sizeof(unsigned long) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator >>=( ap_private<_AP_W, _AP_S>& op, unsigned long op2) { op = op.operator>>(op2); return op; } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator <<=( ap_private<_AP_W, _AP_S>& op, unsigned long op2) { op = op.operator<<(op2); return op; } template <int _AP_W, bool _AP_S> inline bool operator >(const ap_private<_AP_W, _AP_S>& op, unsigned long op2) { return op.operator >(ap_private<(sizeof(unsigned long) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator >(unsigned long op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(sizeof(unsigned long) * 8), (false)>(op2).operator >(op); } template <int _AP_W, bool _AP_S> inline bool operator <(const ap_private<_AP_W, _AP_S>& op, unsigned long op2) { return op.operator <(ap_private<(sizeof(unsigned long) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator <(unsigned long op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(sizeof(unsigned long) * 8), (false)>(op2).operator <(op); } template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_private<_AP_W, _AP_S>& op, unsigned long op2) { return op.operator >=(ap_private<(sizeof(unsigned long) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator >=(unsigned long op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(sizeof(unsigned long) * 8), (false)>(op2).operator >=(op); } template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_private<_AP_W, _AP_S>& op, unsigned long op2) { return op.operator <=(ap_private<(sizeof(unsigned long) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator <=(unsigned long op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(sizeof(unsigned long) * 8), (false)>(op2).operator <=(op); } template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_private<_AP_W, _AP_S>& op, unsigned long op2) { return op.operator ==(ap_private<(sizeof(unsigned long) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator ==(unsigned long op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(sizeof(unsigned long) * 8), (false)>(op2).operator ==(op); } template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_private<_AP_W, _AP_S>& op, unsigned long op2) { return op.operator !=(ap_private<(sizeof(unsigned long) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator !=(unsigned long op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(sizeof(unsigned long) * 8), (false)>(op2).operator !=(op); }
template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(ap_slong) * 8), (true)>::template RType<_AP_W, _AP_S>::mult operator *(ap_slong i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(ap_slong) * 8), (true)>(i_op).operator *(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(ap_slong) * 8), (true)>::mult operator *(const ap_private<_AP_W, _AP_S>& op, ap_slong i_op) { return op.operator *(ap_private<(sizeof(ap_slong) * 8), (true)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(ap_slong) * 8), (true)>::template RType<_AP_W, _AP_S>::plus operator +(ap_slong i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(ap_slong) * 8), (true)>(i_op).operator +(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(ap_slong) * 8), (true)>::plus operator +(const ap_private<_AP_W, _AP_S>& op, ap_slong i_op) { return op.operator +(ap_private<(sizeof(ap_slong) * 8), (true)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(ap_slong) * 8), (true)>::template RType<_AP_W, _AP_S>::minus operator -(ap_slong i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(ap_slong) * 8), (true)>(i_op).operator -(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(ap_slong) * 8), (true)>::minus operator -(const ap_private<_AP_W, _AP_S>& op, ap_slong i_op) { return op.operator -(ap_private<(sizeof(ap_slong) * 8), (true)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(ap_slong) * 8), (true)>::template RType<_AP_W, _AP_S>::div operator /(ap_slong i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(ap_slong) * 8), (true)>(i_op).operator /(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(ap_slong) * 8), (true)>::div operator /(const ap_private<_AP_W, _AP_S>& op, ap_slong i_op) { return op.operator /(ap_private<(sizeof(ap_slong) * 8), (true)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(ap_slong) * 8), (true)>::template RType<_AP_W, _AP_S>::mod operator %(ap_slong i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(ap_slong) * 8), (true)>(i_op).operator %(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(ap_slong) * 8), (true)>::mod operator %(const ap_private<_AP_W, _AP_S>& op, ap_slong i_op) { return op.operator %(ap_private<(sizeof(ap_slong) * 8), (true)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(ap_slong) * 8), (true)>::template RType<_AP_W, _AP_S>::logic operator &(ap_slong i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(ap_slong) * 8), (true)>(i_op).operator &(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(ap_slong) * 8), (true)>::logic operator &(const ap_private<_AP_W, _AP_S>& op, ap_slong i_op) { return op.operator &(ap_private<(sizeof(ap_slong) * 8), (true)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(ap_slong) * 8), (true)>::template RType<_AP_W, _AP_S>::logic operator |(ap_slong i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(ap_slong) * 8), (true)>(i_op).operator |(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(ap_slong) * 8), (true)>::logic operator |(const ap_private<_AP_W, _AP_S>& op, ap_slong i_op) { return op.operator |(ap_private<(sizeof(ap_slong) * 8), (true)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(ap_slong) * 8), (true)>::template RType<_AP_W, _AP_S>::logic operator ^(ap_slong i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(ap_slong) * 8), (true)>(i_op).operator ^(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(ap_slong) * 8), (true)>::logic operator ^(const ap_private<_AP_W, _AP_S>& op, ap_slong i_op) { return op.operator ^(ap_private<(sizeof(ap_slong) * 8), (true)>(i_op)); } template <int _AP_W, bool _AP_S> ap_slong operator >>(ap_slong i_op, const ap_private<_AP_W, _AP_S, false>& op) { return i_op >>(op.get_VAL()); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(ap_slong) * 8), (true)>::arg1 operator >>(const ap_private<_AP_W, _AP_S>& op, ap_slong i_op) { return op.operator >>(i_op); } template <int _AP_W, bool _AP_S> ap_slong operator <<(ap_slong i_op, const ap_private<_AP_W, _AP_S, false>& op) { return i_op <<(op.get_VAL()); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(ap_slong) * 8), (true)>::arg1 operator <<(const ap_private<_AP_W, _AP_S>& op, ap_slong i_op) { return op.operator <<(i_op); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator +=( ap_private<_AP_W, _AP_S>& op, ap_slong op2) { return op.operator +=(ap_private<(sizeof(ap_slong) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator -=( ap_private<_AP_W, _AP_S>& op, ap_slong op2) { return op.operator -=(ap_private<(sizeof(ap_slong) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator *=( ap_private<_AP_W, _AP_S>& op, ap_slong op2) { return op.operator *=(ap_private<(sizeof(ap_slong) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator /=( ap_private<_AP_W, _AP_S>& op, ap_slong op2) { return op.operator /=(ap_private<(sizeof(ap_slong) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator %=( ap_private<_AP_W, _AP_S>& op, ap_slong op2) { return op.operator %=(ap_private<(sizeof(ap_slong) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator &=( ap_private<_AP_W, _AP_S>& op, ap_slong op2) { return op.operator &=(ap_private<(sizeof(ap_slong) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator |=( ap_private<_AP_W, _AP_S>& op, ap_slong op2) { return op.operator |=(ap_private<(sizeof(ap_slong) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator ^=( ap_private<_AP_W, _AP_S>& op, ap_slong op2) { return op.operator ^=(ap_private<(sizeof(ap_slong) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator >>=( ap_private<_AP_W, _AP_S>& op, ap_slong op2) { op = op.operator>>(op2); return op; } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator <<=( ap_private<_AP_W, _AP_S>& op, ap_slong op2) { op = op.operator<<(op2); return op; } template <int _AP_W, bool _AP_S> inline bool operator >(const ap_private<_AP_W, _AP_S>& op, ap_slong op2) { return op.operator >(ap_private<(sizeof(ap_slong) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator >(ap_slong op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(sizeof(ap_slong) * 8), (true)>(op2).operator >(op); } template <int _AP_W, bool _AP_S> inline bool operator <(const ap_private<_AP_W, _AP_S>& op, ap_slong op2) { return op.operator <(ap_private<(sizeof(ap_slong) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator <(ap_slong op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(sizeof(ap_slong) * 8), (true)>(op2).operator <(op); } template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_private<_AP_W, _AP_S>& op, ap_slong op2) { return op.operator >=(ap_private<(sizeof(ap_slong) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator >=(ap_slong op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(sizeof(ap_slong) * 8), (true)>(op2).operator >=(op); } template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_private<_AP_W, _AP_S>& op, ap_slong op2) { return op.operator <=(ap_private<(sizeof(ap_slong) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator <=(ap_slong op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(sizeof(ap_slong) * 8), (true)>(op2).operator <=(op); } template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_private<_AP_W, _AP_S>& op, ap_slong op2) { return op.operator ==(ap_private<(sizeof(ap_slong) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator ==(ap_slong op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(sizeof(ap_slong) * 8), (true)>(op2).operator ==(op); } template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_private<_AP_W, _AP_S>& op, ap_slong op2) { return op.operator !=(ap_private<(sizeof(ap_slong) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator !=(ap_slong op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(sizeof(ap_slong) * 8), (true)>(op2).operator !=(op); }
template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(ap_ulong) * 8), (false)>::template RType<_AP_W, _AP_S>::mult operator *(ap_ulong i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(ap_ulong) * 8), (false)>(i_op).operator *(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(ap_ulong) * 8), (false)>::mult operator *(const ap_private<_AP_W, _AP_S>& op, ap_ulong i_op) { return op.operator *(ap_private<(sizeof(ap_ulong) * 8), (false)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(ap_ulong) * 8), (false)>::template RType<_AP_W, _AP_S>::plus operator +(ap_ulong i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(ap_ulong) * 8), (false)>(i_op).operator +(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(ap_ulong) * 8), (false)>::plus operator +(const ap_private<_AP_W, _AP_S>& op, ap_ulong i_op) { return op.operator +(ap_private<(sizeof(ap_ulong) * 8), (false)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(ap_ulong) * 8), (false)>::template RType<_AP_W, _AP_S>::minus operator -(ap_ulong i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(ap_ulong) * 8), (false)>(i_op).operator -(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(ap_ulong) * 8), (false)>::minus operator -(const ap_private<_AP_W, _AP_S>& op, ap_ulong i_op) { return op.operator -(ap_private<(sizeof(ap_ulong) * 8), (false)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(ap_ulong) * 8), (false)>::template RType<_AP_W, _AP_S>::div operator /(ap_ulong i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(ap_ulong) * 8), (false)>(i_op).operator /(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(ap_ulong) * 8), (false)>::div operator /(const ap_private<_AP_W, _AP_S>& op, ap_ulong i_op) { return op.operator /(ap_private<(sizeof(ap_ulong) * 8), (false)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(ap_ulong) * 8), (false)>::template RType<_AP_W, _AP_S>::mod operator %(ap_ulong i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(ap_ulong) * 8), (false)>(i_op).operator %(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(ap_ulong) * 8), (false)>::mod operator %(const ap_private<_AP_W, _AP_S>& op, ap_ulong i_op) { return op.operator %(ap_private<(sizeof(ap_ulong) * 8), (false)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(ap_ulong) * 8), (false)>::template RType<_AP_W, _AP_S>::logic operator &(ap_ulong i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(ap_ulong) * 8), (false)>(i_op).operator &(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(ap_ulong) * 8), (false)>::logic operator &(const ap_private<_AP_W, _AP_S>& op, ap_ulong i_op) { return op.operator &(ap_private<(sizeof(ap_ulong) * 8), (false)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(ap_ulong) * 8), (false)>::template RType<_AP_W, _AP_S>::logic operator |(ap_ulong i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(ap_ulong) * 8), (false)>(i_op).operator |(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(ap_ulong) * 8), (false)>::logic operator |(const ap_private<_AP_W, _AP_S>& op, ap_ulong i_op) { return op.operator |(ap_private<(sizeof(ap_ulong) * 8), (false)>(i_op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(ap_ulong) * 8), (false)>::template RType<_AP_W, _AP_S>::logic operator ^(ap_ulong i_op, const ap_private<_AP_W, _AP_S>& op) { return ap_private<(sizeof(ap_ulong) * 8), (false)>(i_op).operator ^(op); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(ap_ulong) * 8), (false)>::logic operator ^(const ap_private<_AP_W, _AP_S>& op, ap_ulong i_op) { return op.operator ^(ap_private<(sizeof(ap_ulong) * 8), (false)>(i_op)); } template <int _AP_W, bool _AP_S> ap_ulong operator >>(ap_ulong i_op, const ap_private<_AP_W, _AP_S, false>& op) { return i_op >>(op.get_VAL()); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(ap_ulong) * 8), (false)>::arg1 operator >>(const ap_private<_AP_W, _AP_S>& op, ap_ulong i_op) { return op.operator >>(i_op); } template <int _AP_W, bool _AP_S> ap_ulong operator <<(ap_ulong i_op, const ap_private<_AP_W, _AP_S, false>& op) { return i_op <<(op.get_VAL()); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, _AP_S>::template RType<(sizeof(ap_ulong) * 8), (false)>::arg1 operator <<(const ap_private<_AP_W, _AP_S>& op, ap_ulong i_op) { return op.operator <<(i_op); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator +=( ap_private<_AP_W, _AP_S>& op, ap_ulong op2) { return op.operator +=(ap_private<(sizeof(ap_ulong) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator -=( ap_private<_AP_W, _AP_S>& op, ap_ulong op2) { return op.operator -=(ap_private<(sizeof(ap_ulong) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator *=( ap_private<_AP_W, _AP_S>& op, ap_ulong op2) { return op.operator *=(ap_private<(sizeof(ap_ulong) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator /=( ap_private<_AP_W, _AP_S>& op, ap_ulong op2) { return op.operator /=(ap_private<(sizeof(ap_ulong) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator %=( ap_private<_AP_W, _AP_S>& op, ap_ulong op2) { return op.operator %=(ap_private<(sizeof(ap_ulong) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator &=( ap_private<_AP_W, _AP_S>& op, ap_ulong op2) { return op.operator &=(ap_private<(sizeof(ap_ulong) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator |=( ap_private<_AP_W, _AP_S>& op, ap_ulong op2) { return op.operator |=(ap_private<(sizeof(ap_ulong) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator ^=( ap_private<_AP_W, _AP_S>& op, ap_ulong op2) { return op.operator ^=(ap_private<(sizeof(ap_ulong) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator >>=( ap_private<_AP_W, _AP_S>& op, ap_ulong op2) { op = op.operator>>(op2); return op; } template <int _AP_W, bool _AP_S> inline ap_private<_AP_W, _AP_S>& operator <<=( ap_private<_AP_W, _AP_S>& op, ap_ulong op2) { op = op.operator<<(op2); return op; } template <int _AP_W, bool _AP_S> inline bool operator >(const ap_private<_AP_W, _AP_S>& op, ap_ulong op2) { return op.operator >(ap_private<(sizeof(ap_ulong) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator >(ap_ulong op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(sizeof(ap_ulong) * 8), (false)>(op2).operator >(op); } template <int _AP_W, bool _AP_S> inline bool operator <(const ap_private<_AP_W, _AP_S>& op, ap_ulong op2) { return op.operator <(ap_private<(sizeof(ap_ulong) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator <(ap_ulong op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(sizeof(ap_ulong) * 8), (false)>(op2).operator <(op); } template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_private<_AP_W, _AP_S>& op, ap_ulong op2) { return op.operator >=(ap_private<(sizeof(ap_ulong) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator >=(ap_ulong op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(sizeof(ap_ulong) * 8), (false)>(op2).operator >=(op); } template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_private<_AP_W, _AP_S>& op, ap_ulong op2) { return op.operator <=(ap_private<(sizeof(ap_ulong) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator <=(ap_ulong op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(sizeof(ap_ulong) * 8), (false)>(op2).operator <=(op); } template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_private<_AP_W, _AP_S>& op, ap_ulong op2) { return op.operator ==(ap_private<(sizeof(ap_ulong) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator ==(ap_ulong op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(sizeof(ap_ulong) * 8), (false)>(op2).operator ==(op); } template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_private<_AP_W, _AP_S>& op, ap_ulong op2) { return op.operator !=(ap_private<(sizeof(ap_ulong) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator !=(ap_ulong op2, const ap_private<_AP_W, _AP_S, false>& op) { return ap_private<(sizeof(ap_ulong) * 8), (false)>(op2).operator !=(op); }
# 7246 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_private<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::plus operator +(const _private_range_ref<_AP_W1, _AP_S1>& op1, const ap_private<_AP_W2, _AP_S2>& op2) { return ap_private<_AP_W1, false>(op1).operator +(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_private<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_private<_AP_W1, _AP_S1>& op1, const _private_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator +(ap_private<_AP_W2, false>(op2)); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_private<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::minus operator -(const _private_range_ref<_AP_W1, _AP_S1>& op1, const ap_private<_AP_W2, _AP_S2>& op2) { return ap_private<_AP_W1, false>(op1).operator -(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_private<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_private<_AP_W1, _AP_S1>& op1, const _private_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator -(ap_private<_AP_W2, false>(op2)); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_private<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mult operator *(const _private_range_ref<_AP_W1, _AP_S1>& op1, const ap_private<_AP_W2, _AP_S2>& op2) { return ap_private<_AP_W1, false>(op1).operator *(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_private<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_private<_AP_W1, _AP_S1>& op1, const _private_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator *(ap_private<_AP_W2, false>(op2)); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_private<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::div operator /(const _private_range_ref<_AP_W1, _AP_S1>& op1, const ap_private<_AP_W2, _AP_S2>& op2) { return ap_private<_AP_W1, false>(op1).operator /(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_private<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_private<_AP_W1, _AP_S1>& op1, const _private_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator /(ap_private<_AP_W2, false>(op2)); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_private<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mod operator %(const _private_range_ref<_AP_W1, _AP_S1>& op1, const ap_private<_AP_W2, _AP_S2>& op2) { return ap_private<_AP_W1, false>(op1).operator %(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_private<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_private<_AP_W1, _AP_S1>& op1, const _private_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator %(ap_private<_AP_W2, false>(op2)); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_private<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator &(const _private_range_ref<_AP_W1, _AP_S1>& op1, const ap_private<_AP_W2, _AP_S2>& op2) { return ap_private<_AP_W1, false>(op1).operator &(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_private<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_private<_AP_W1, _AP_S1>& op1, const _private_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator &(ap_private<_AP_W2, false>(op2)); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_private<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator |(const _private_range_ref<_AP_W1, _AP_S1>& op1, const ap_private<_AP_W2, _AP_S2>& op2) { return ap_private<_AP_W1, false>(op1).operator |(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_private<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_private<_AP_W1, _AP_S1>& op1, const _private_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator |(ap_private<_AP_W2, false>(op2)); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_private<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator ^(const _private_range_ref<_AP_W1, _AP_S1>& op1, const ap_private<_AP_W2, _AP_S2>& op2) { return ap_private<_AP_W1, false>(op1).operator ^(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_private<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_private<_AP_W1, _AP_S1>& op1, const _private_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator ^(ap_private<_AP_W2, false>(op2)); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_private<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const _private_range_ref<_AP_W1, _AP_S1>& op1, const ap_private<_AP_W2, _AP_S2>& op2) { return ap_private<_AP_W1, false>(op1).operator >>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_private<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_private<_AP_W1, _AP_S1>& op1, const _private_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator >>(ap_private<_AP_W2, false>(op2)); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_private<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const _private_range_ref<_AP_W1, _AP_S1>& op1, const ap_private<_AP_W2, _AP_S2>& op2) { return ap_private<_AP_W1, false>(op1).operator <<(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_private<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_private<_AP_W1, _AP_S1>& op1, const _private_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator <<(ap_private<_AP_W2, false>(op2)); }


template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_private<_AP_W1, _AP_S1>& operator +=( ap_private<_AP_W1, _AP_S1>& op1, const _private_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator +=(ap_private<_AP_W2, false>(op2)); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline _private_range_ref<_AP_W1, _AP_S1>& operator +=( _private_range_ref<_AP_W1, _AP_S1>& op1, ap_private<_AP_W2, _AP_S2>& op2) { ap_private<_AP_W1, false> tmp(op1); tmp.operator +=(op2); op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_private<_AP_W1, _AP_S1>& operator -=( ap_private<_AP_W1, _AP_S1>& op1, const _private_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator -=(ap_private<_AP_W2, false>(op2)); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline _private_range_ref<_AP_W1, _AP_S1>& operator -=( _private_range_ref<_AP_W1, _AP_S1>& op1, ap_private<_AP_W2, _AP_S2>& op2) { ap_private<_AP_W1, false> tmp(op1); tmp.operator -=(op2); op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_private<_AP_W1, _AP_S1>& operator *=( ap_private<_AP_W1, _AP_S1>& op1, const _private_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator *=(ap_private<_AP_W2, false>(op2)); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline _private_range_ref<_AP_W1, _AP_S1>& operator *=( _private_range_ref<_AP_W1, _AP_S1>& op1, ap_private<_AP_W2, _AP_S2>& op2) { ap_private<_AP_W1, false> tmp(op1); tmp.operator *=(op2); op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_private<_AP_W1, _AP_S1>& operator /=( ap_private<_AP_W1, _AP_S1>& op1, const _private_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator /=(ap_private<_AP_W2, false>(op2)); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline _private_range_ref<_AP_W1, _AP_S1>& operator /=( _private_range_ref<_AP_W1, _AP_S1>& op1, ap_private<_AP_W2, _AP_S2>& op2) { ap_private<_AP_W1, false> tmp(op1); tmp.operator /=(op2); op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_private<_AP_W1, _AP_S1>& operator %=( ap_private<_AP_W1, _AP_S1>& op1, const _private_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator %=(ap_private<_AP_W2, false>(op2)); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline _private_range_ref<_AP_W1, _AP_S1>& operator %=( _private_range_ref<_AP_W1, _AP_S1>& op1, ap_private<_AP_W2, _AP_S2>& op2) { ap_private<_AP_W1, false> tmp(op1); tmp.operator %=(op2); op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_private<_AP_W1, _AP_S1>& operator &=( ap_private<_AP_W1, _AP_S1>& op1, const _private_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator &=(ap_private<_AP_W2, false>(op2)); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline _private_range_ref<_AP_W1, _AP_S1>& operator &=( _private_range_ref<_AP_W1, _AP_S1>& op1, ap_private<_AP_W2, _AP_S2>& op2) { ap_private<_AP_W1, false> tmp(op1); tmp.operator &=(op2); op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_private<_AP_W1, _AP_S1>& operator |=( ap_private<_AP_W1, _AP_S1>& op1, const _private_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator |=(ap_private<_AP_W2, false>(op2)); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline _private_range_ref<_AP_W1, _AP_S1>& operator |=( _private_range_ref<_AP_W1, _AP_S1>& op1, ap_private<_AP_W2, _AP_S2>& op2) { ap_private<_AP_W1, false> tmp(op1); tmp.operator |=(op2); op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_private<_AP_W1, _AP_S1>& operator ^=( ap_private<_AP_W1, _AP_S1>& op1, const _private_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator ^=(ap_private<_AP_W2, false>(op2)); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline _private_range_ref<_AP_W1, _AP_S1>& operator ^=( _private_range_ref<_AP_W1, _AP_S1>& op1, ap_private<_AP_W2, _AP_S2>& op2) { ap_private<_AP_W1, false> tmp(op1); tmp.operator ^=(op2); op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_private<_AP_W1, _AP_S1>& operator >>=( ap_private<_AP_W1, _AP_S1>& op1, const _private_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator >>=(ap_private<_AP_W2, false>(op2)); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline _private_range_ref<_AP_W1, _AP_S1>& operator >>=( _private_range_ref<_AP_W1, _AP_S1>& op1, ap_private<_AP_W2, _AP_S2>& op2) { ap_private<_AP_W1, false> tmp(op1); tmp.operator >>=(op2); op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_private<_AP_W1, _AP_S1>& operator <<=( ap_private<_AP_W1, _AP_S1>& op1, const _private_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator <<=(ap_private<_AP_W2, false>(op2)); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline _private_range_ref<_AP_W1, _AP_S1>& operator <<=( _private_range_ref<_AP_W1, _AP_S1>& op1, ap_private<_AP_W2, _AP_S2>& op2) { ap_private<_AP_W1, false> tmp(op1); tmp.operator <<=(op2); op1 = tmp; return op1; }


template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline bool operator >(const _private_range_ref<_AP_W1, _AP_S1>& op1, const ap_private<_AP_W2, _AP_S2>& op2) { return ap_private<_AP_W1, false>(op1).operator >(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline bool operator >(const ap_private<_AP_W1, _AP_S1>& op1, const _private_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator >(op2.operator ap_private<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline bool operator <(const _private_range_ref<_AP_W1, _AP_S1>& op1, const ap_private<_AP_W2, _AP_S2>& op2) { return ap_private<_AP_W1, false>(op1).operator <(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline bool operator <(const ap_private<_AP_W1, _AP_S1>& op1, const _private_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator <(op2.operator ap_private<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline bool operator >=(const _private_range_ref<_AP_W1, _AP_S1>& op1, const ap_private<_AP_W2, _AP_S2>& op2) { return ap_private<_AP_W1, false>(op1).operator >=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline bool operator >=(const ap_private<_AP_W1, _AP_S1>& op1, const _private_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator >=(op2.operator ap_private<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline bool operator <=(const _private_range_ref<_AP_W1, _AP_S1>& op1, const ap_private<_AP_W2, _AP_S2>& op2) { return ap_private<_AP_W1, false>(op1).operator <=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline bool operator <=(const ap_private<_AP_W1, _AP_S1>& op1, const _private_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator <=(op2.operator ap_private<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline bool operator ==(const _private_range_ref<_AP_W1, _AP_S1>& op1, const ap_private<_AP_W2, _AP_S2>& op2) { return ap_private<_AP_W1, false>(op1).operator ==(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline bool operator ==(const ap_private<_AP_W1, _AP_S1>& op1, const _private_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator ==(op2.operator ap_private<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline bool operator !=(const _private_range_ref<_AP_W1, _AP_S1>& op1, const ap_private<_AP_W2, _AP_S2>& op2) { return ap_private<_AP_W1, false>(op1).operator !=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline bool operator !=(const ap_private<_AP_W1, _AP_S1>& op1, const _private_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator !=(op2.operator ap_private<_AP_W2, false>()); }
# 7321 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_private<_AP_W1, _AP_S1>& operator +=( ap_private<_AP_W1, _AP_S1>& op1, _private_bit_ref<_AP_W2, _AP_S2>& op2) { return op1.operator +=(ap_private<1, false>(op2)); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline _private_bit_ref<_AP_W1, _AP_S1>& operator +=( _private_bit_ref<_AP_W1, _AP_S1>& op1, ap_private<_AP_W2, _AP_S2>& op2) { ap_private<1, false> tmp(op1); tmp.operator +=(op2); op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_private<_AP_W1, _AP_S1>& operator -=( ap_private<_AP_W1, _AP_S1>& op1, _private_bit_ref<_AP_W2, _AP_S2>& op2) { return op1.operator -=(ap_private<1, false>(op2)); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline _private_bit_ref<_AP_W1, _AP_S1>& operator -=( _private_bit_ref<_AP_W1, _AP_S1>& op1, ap_private<_AP_W2, _AP_S2>& op2) { ap_private<1, false> tmp(op1); tmp.operator -=(op2); op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_private<_AP_W1, _AP_S1>& operator *=( ap_private<_AP_W1, _AP_S1>& op1, _private_bit_ref<_AP_W2, _AP_S2>& op2) { return op1.operator *=(ap_private<1, false>(op2)); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline _private_bit_ref<_AP_W1, _AP_S1>& operator *=( _private_bit_ref<_AP_W1, _AP_S1>& op1, ap_private<_AP_W2, _AP_S2>& op2) { ap_private<1, false> tmp(op1); tmp.operator *=(op2); op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_private<_AP_W1, _AP_S1>& operator /=( ap_private<_AP_W1, _AP_S1>& op1, _private_bit_ref<_AP_W2, _AP_S2>& op2) { return op1.operator /=(ap_private<1, false>(op2)); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline _private_bit_ref<_AP_W1, _AP_S1>& operator /=( _private_bit_ref<_AP_W1, _AP_S1>& op1, ap_private<_AP_W2, _AP_S2>& op2) { ap_private<1, false> tmp(op1); tmp.operator /=(op2); op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_private<_AP_W1, _AP_S1>& operator %=( ap_private<_AP_W1, _AP_S1>& op1, _private_bit_ref<_AP_W2, _AP_S2>& op2) { return op1.operator %=(ap_private<1, false>(op2)); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline _private_bit_ref<_AP_W1, _AP_S1>& operator %=( _private_bit_ref<_AP_W1, _AP_S1>& op1, ap_private<_AP_W2, _AP_S2>& op2) { ap_private<1, false> tmp(op1); tmp.operator %=(op2); op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_private<_AP_W1, _AP_S1>& operator &=( ap_private<_AP_W1, _AP_S1>& op1, _private_bit_ref<_AP_W2, _AP_S2>& op2) { return op1.operator &=(ap_private<1, false>(op2)); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline _private_bit_ref<_AP_W1, _AP_S1>& operator &=( _private_bit_ref<_AP_W1, _AP_S1>& op1, ap_private<_AP_W2, _AP_S2>& op2) { ap_private<1, false> tmp(op1); tmp.operator &=(op2); op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_private<_AP_W1, _AP_S1>& operator |=( ap_private<_AP_W1, _AP_S1>& op1, _private_bit_ref<_AP_W2, _AP_S2>& op2) { return op1.operator |=(ap_private<1, false>(op2)); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline _private_bit_ref<_AP_W1, _AP_S1>& operator |=( _private_bit_ref<_AP_W1, _AP_S1>& op1, ap_private<_AP_W2, _AP_S2>& op2) { ap_private<1, false> tmp(op1); tmp.operator |=(op2); op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_private<_AP_W1, _AP_S1>& operator ^=( ap_private<_AP_W1, _AP_S1>& op1, _private_bit_ref<_AP_W2, _AP_S2>& op2) { return op1.operator ^=(ap_private<1, false>(op2)); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline _private_bit_ref<_AP_W1, _AP_S1>& operator ^=( _private_bit_ref<_AP_W1, _AP_S1>& op1, ap_private<_AP_W2, _AP_S2>& op2) { ap_private<1, false> tmp(op1); tmp.operator ^=(op2); op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_private<_AP_W1, _AP_S1>& operator >>=( ap_private<_AP_W1, _AP_S1>& op1, _private_bit_ref<_AP_W2, _AP_S2>& op2) { return op1.operator >>=(ap_private<1, false>(op2)); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline _private_bit_ref<_AP_W1, _AP_S1>& operator >>=( _private_bit_ref<_AP_W1, _AP_S1>& op1, ap_private<_AP_W2, _AP_S2>& op2) { ap_private<1, false> tmp(op1); tmp.operator >>=(op2); op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_private<_AP_W1, _AP_S1>& operator <<=( ap_private<_AP_W1, _AP_S1>& op1, _private_bit_ref<_AP_W2, _AP_S2>& op2) { return op1.operator <<=(ap_private<1, false>(op2)); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline _private_bit_ref<_AP_W1, _AP_S1>& operator <<=( _private_bit_ref<_AP_W1, _AP_S1>& op1, ap_private<_AP_W2, _AP_S2>& op2) { ap_private<1, false> tmp(op1); tmp.operator <<=(op2); op1 = tmp; return op1; }


template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_private<1, false>::template RType<_AP_W2, _AP_S2>::plus operator +(const _private_bit_ref<_AP_W1, _AP_S1>& op1, const ap_private<_AP_W2, _AP_S2>& op2) { return ap_private<1, false>(op1).operator +(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_private<_AP_W1, _AP_S1>::template RType<1, false>::plus operator +(const ap_private<_AP_W1, _AP_S1>& op1, const _private_bit_ref<_AP_W2, _AP_S2>& op2) { return op1.operator +(ap_private<1, false>(op2)); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_private<1, false>::template RType<_AP_W2, _AP_S2>::minus operator -(const _private_bit_ref<_AP_W1, _AP_S1>& op1, const ap_private<_AP_W2, _AP_S2>& op2) { return ap_private<1, false>(op1).operator -(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_private<_AP_W1, _AP_S1>::template RType<1, false>::minus operator -(const ap_private<_AP_W1, _AP_S1>& op1, const _private_bit_ref<_AP_W2, _AP_S2>& op2) { return op1.operator -(ap_private<1, false>(op2)); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_private<1, false>::template RType<_AP_W2, _AP_S2>::mult operator *(const _private_bit_ref<_AP_W1, _AP_S1>& op1, const ap_private<_AP_W2, _AP_S2>& op2) { return ap_private<1, false>(op1).operator *(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_private<_AP_W1, _AP_S1>::template RType<1, false>::mult operator *(const ap_private<_AP_W1, _AP_S1>& op1, const _private_bit_ref<_AP_W2, _AP_S2>& op2) { return op1.operator *(ap_private<1, false>(op2)); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_private<1, false>::template RType<_AP_W2, _AP_S2>::div operator /(const _private_bit_ref<_AP_W1, _AP_S1>& op1, const ap_private<_AP_W2, _AP_S2>& op2) { return ap_private<1, false>(op1).operator /(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_private<_AP_W1, _AP_S1>::template RType<1, false>::div operator /(const ap_private<_AP_W1, _AP_S1>& op1, const _private_bit_ref<_AP_W2, _AP_S2>& op2) { return op1.operator /(ap_private<1, false>(op2)); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_private<1, false>::template RType<_AP_W2, _AP_S2>::mod operator %(const _private_bit_ref<_AP_W1, _AP_S1>& op1, const ap_private<_AP_W2, _AP_S2>& op2) { return ap_private<1, false>(op1).operator %(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_private<_AP_W1, _AP_S1>::template RType<1, false>::mod operator %(const ap_private<_AP_W1, _AP_S1>& op1, const _private_bit_ref<_AP_W2, _AP_S2>& op2) { return op1.operator %(ap_private<1, false>(op2)); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_private<1, false>::template RType<_AP_W2, _AP_S2>::logic operator &(const _private_bit_ref<_AP_W1, _AP_S1>& op1, const ap_private<_AP_W2, _AP_S2>& op2) { return ap_private<1, false>(op1).operator &(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_private<_AP_W1, _AP_S1>::template RType<1, false>::logic operator &(const ap_private<_AP_W1, _AP_S1>& op1, const _private_bit_ref<_AP_W2, _AP_S2>& op2) { return op1.operator &(ap_private<1, false>(op2)); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_private<1, false>::template RType<_AP_W2, _AP_S2>::logic operator |(const _private_bit_ref<_AP_W1, _AP_S1>& op1, const ap_private<_AP_W2, _AP_S2>& op2) { return ap_private<1, false>(op1).operator |(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_private<_AP_W1, _AP_S1>::template RType<1, false>::logic operator |(const ap_private<_AP_W1, _AP_S1>& op1, const _private_bit_ref<_AP_W2, _AP_S2>& op2) { return op1.operator |(ap_private<1, false>(op2)); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_private<1, false>::template RType<_AP_W2, _AP_S2>::logic operator ^(const _private_bit_ref<_AP_W1, _AP_S1>& op1, const ap_private<_AP_W2, _AP_S2>& op2) { return ap_private<1, false>(op1).operator ^(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_private<_AP_W1, _AP_S1>::template RType<1, false>::logic operator ^(const ap_private<_AP_W1, _AP_S1>& op1, const _private_bit_ref<_AP_W2, _AP_S2>& op2) { return op1.operator ^(ap_private<1, false>(op2)); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_private<1, false>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const _private_bit_ref<_AP_W1, _AP_S1>& op1, const ap_private<_AP_W2, _AP_S2>& op2) { return ap_private<1, false>(op1).operator >>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_private<_AP_W1, _AP_S1>::template RType<1, false>::arg1 operator >>(const ap_private<_AP_W1, _AP_S1>& op1, const _private_bit_ref<_AP_W2, _AP_S2>& op2) { return op1.operator >>(ap_private<1, false>(op2)); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_private<1, false>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const _private_bit_ref<_AP_W1, _AP_S1>& op1, const ap_private<_AP_W2, _AP_S2>& op2) { return ap_private<1, false>(op1).operator <<(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_private<_AP_W1, _AP_S1>::template RType<1, false>::arg1 operator <<(const ap_private<_AP_W1, _AP_S1>& op1, const _private_bit_ref<_AP_W2, _AP_S2>& op2) { return op1.operator <<(ap_private<1, false>(op2)); }


template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline bool operator >(const _private_bit_ref<_AP_W1, _AP_S1>& op1, const ap_private<_AP_W2, _AP_S2>& op2) { return ap_private<_AP_W1, false>(op1).operator >(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline bool operator >(const ap_private<_AP_W1, _AP_S1>& op1, const _private_bit_ref<_AP_W2, _AP_S2>& op2) { return op1.operator >(ap_private<1, false>(op2)); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline bool operator <(const _private_bit_ref<_AP_W1, _AP_S1>& op1, const ap_private<_AP_W2, _AP_S2>& op2) { return ap_private<_AP_W1, false>(op1).operator <(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline bool operator <(const ap_private<_AP_W1, _AP_S1>& op1, const _private_bit_ref<_AP_W2, _AP_S2>& op2) { return op1.operator <(ap_private<1, false>(op2)); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline bool operator <=(const _private_bit_ref<_AP_W1, _AP_S1>& op1, const ap_private<_AP_W2, _AP_S2>& op2) { return ap_private<_AP_W1, false>(op1).operator <=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline bool operator <=(const ap_private<_AP_W1, _AP_S1>& op1, const _private_bit_ref<_AP_W2, _AP_S2>& op2) { return op1.operator <=(ap_private<1, false>(op2)); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline bool operator >=(const _private_bit_ref<_AP_W1, _AP_S1>& op1, const ap_private<_AP_W2, _AP_S2>& op2) { return ap_private<_AP_W1, false>(op1).operator >=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline bool operator >=(const ap_private<_AP_W1, _AP_S1>& op1, const _private_bit_ref<_AP_W2, _AP_S2>& op2) { return op1.operator >=(ap_private<1, false>(op2)); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline bool operator ==(const _private_bit_ref<_AP_W1, _AP_S1>& op1, const ap_private<_AP_W2, _AP_S2>& op2) { return ap_private<_AP_W1, false>(op1).operator ==(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline bool operator ==(const ap_private<_AP_W1, _AP_S1>& op1, const _private_bit_ref<_AP_W2, _AP_S2>& op2) { return op1.operator ==(ap_private<1, false>(op2)); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline bool operator !=(const _private_bit_ref<_AP_W1, _AP_S1>& op1, const ap_private<_AP_W2, _AP_S2>& op2) { return ap_private<_AP_W1, false>(op1).operator !=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline bool operator !=(const ap_private<_AP_W1, _AP_S1>& op1, const _private_bit_ref<_AP_W2, _AP_S2>& op2) { return op1.operator !=(ap_private<1, false>(op2)); }
# 7386 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
template <int _AP_W, bool _AP_S> inline bool operator >(const _private_range_ref<_AP_W, _AP_S>& op, bool op2) { return (ap_private<_AP_W, false>(op)) . operator >(ap_private<(1), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator >(bool op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(1), (false)>(op2).operator >( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator >(const _private_bit_ref<_AP_W, _AP_S>& op, bool op2) { return (bool(op))> op2; } template <int _AP_W, bool _AP_S> inline bool operator >(bool op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 >(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator <(const _private_range_ref<_AP_W, _AP_S>& op, bool op2) { return (ap_private<_AP_W, false>(op)) . operator <(ap_private<(1), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator <(bool op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(1), (false)>(op2).operator <( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator <(const _private_bit_ref<_AP_W, _AP_S>& op, bool op2) { return (bool(op))< op2; } template <int _AP_W, bool _AP_S> inline bool operator <(bool op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 <(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator >=(const _private_range_ref<_AP_W, _AP_S>& op, bool op2) { return (ap_private<_AP_W, false>(op)) . operator >=(ap_private<(1), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator >=(bool op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(1), (false)>(op2).operator >=( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator >=(const _private_bit_ref<_AP_W, _AP_S>& op, bool op2) { return (bool(op))>= op2; } template <int _AP_W, bool _AP_S> inline bool operator >=(bool op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 >=(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator <=(const _private_range_ref<_AP_W, _AP_S>& op, bool op2) { return (ap_private<_AP_W, false>(op)) . operator <=(ap_private<(1), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator <=(bool op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(1), (false)>(op2).operator <=( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator <=(const _private_bit_ref<_AP_W, _AP_S>& op, bool op2) { return (bool(op))<= op2; } template <int _AP_W, bool _AP_S> inline bool operator <=(bool op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 <=(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator ==(const _private_range_ref<_AP_W, _AP_S>& op, bool op2) { return (ap_private<_AP_W, false>(op)) . operator ==(ap_private<(1), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator ==(bool op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(1), (false)>(op2).operator ==( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator ==(const _private_bit_ref<_AP_W, _AP_S>& op, bool op2) { return (bool(op))== op2; } template <int _AP_W, bool _AP_S> inline bool operator ==(bool op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 ==(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator !=(const _private_range_ref<_AP_W, _AP_S>& op, bool op2) { return (ap_private<_AP_W, false>(op)) . operator !=(ap_private<(1), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator !=(bool op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(1), (false)>(op2).operator !=( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator !=(const _private_bit_ref<_AP_W, _AP_S>& op, bool op2) { return (bool(op))!= op2; } template <int _AP_W, bool _AP_S> inline bool operator !=(bool op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 !=(bool(op)); }
template <int _AP_W, bool _AP_S> inline bool operator >(const _private_range_ref<_AP_W, _AP_S>& op, char op2) { return (ap_private<_AP_W, false>(op)) . operator >(ap_private<(8), (CHAR_IS_SIGNED)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator >(char op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(8), (CHAR_IS_SIGNED)>(op2).operator >( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator >(const _private_bit_ref<_AP_W, _AP_S>& op, char op2) { return (bool(op))> op2; } template <int _AP_W, bool _AP_S> inline bool operator >(char op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 >(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator <(const _private_range_ref<_AP_W, _AP_S>& op, char op2) { return (ap_private<_AP_W, false>(op)) . operator <(ap_private<(8), (CHAR_IS_SIGNED)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator <(char op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(8), (CHAR_IS_SIGNED)>(op2).operator <( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator <(const _private_bit_ref<_AP_W, _AP_S>& op, char op2) { return (bool(op))< op2; } template <int _AP_W, bool _AP_S> inline bool operator <(char op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 <(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator >=(const _private_range_ref<_AP_W, _AP_S>& op, char op2) { return (ap_private<_AP_W, false>(op)) . operator >=(ap_private<(8), (CHAR_IS_SIGNED)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator >=(char op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(8), (CHAR_IS_SIGNED)>(op2).operator >=( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator >=(const _private_bit_ref<_AP_W, _AP_S>& op, char op2) { return (bool(op))>= op2; } template <int _AP_W, bool _AP_S> inline bool operator >=(char op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 >=(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator <=(const _private_range_ref<_AP_W, _AP_S>& op, char op2) { return (ap_private<_AP_W, false>(op)) . operator <=(ap_private<(8), (CHAR_IS_SIGNED)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator <=(char op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(8), (CHAR_IS_SIGNED)>(op2).operator <=( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator <=(const _private_bit_ref<_AP_W, _AP_S>& op, char op2) { return (bool(op))<= op2; } template <int _AP_W, bool _AP_S> inline bool operator <=(char op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 <=(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator ==(const _private_range_ref<_AP_W, _AP_S>& op, char op2) { return (ap_private<_AP_W, false>(op)) . operator ==(ap_private<(8), (CHAR_IS_SIGNED)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator ==(char op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(8), (CHAR_IS_SIGNED)>(op2).operator ==( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator ==(const _private_bit_ref<_AP_W, _AP_S>& op, char op2) { return (bool(op))== op2; } template <int _AP_W, bool _AP_S> inline bool operator ==(char op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 ==(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator !=(const _private_range_ref<_AP_W, _AP_S>& op, char op2) { return (ap_private<_AP_W, false>(op)) . operator !=(ap_private<(8), (CHAR_IS_SIGNED)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator !=(char op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(8), (CHAR_IS_SIGNED)>(op2).operator !=( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator !=(const _private_bit_ref<_AP_W, _AP_S>& op, char op2) { return (bool(op))!= op2; } template <int _AP_W, bool _AP_S> inline bool operator !=(char op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 !=(bool(op)); }
template <int _AP_W, bool _AP_S> inline bool operator >(const _private_range_ref<_AP_W, _AP_S>& op, signed char op2) { return (ap_private<_AP_W, false>(op)) . operator >(ap_private<(8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator >(signed char op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(8), (true)>(op2).operator >( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator >(const _private_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return (bool(op))> op2; } template <int _AP_W, bool _AP_S> inline bool operator >(signed char op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 >(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator <(const _private_range_ref<_AP_W, _AP_S>& op, signed char op2) { return (ap_private<_AP_W, false>(op)) . operator <(ap_private<(8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator <(signed char op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(8), (true)>(op2).operator <( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator <(const _private_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return (bool(op))< op2; } template <int _AP_W, bool _AP_S> inline bool operator <(signed char op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 <(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator >=(const _private_range_ref<_AP_W, _AP_S>& op, signed char op2) { return (ap_private<_AP_W, false>(op)) . operator >=(ap_private<(8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator >=(signed char op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(8), (true)>(op2).operator >=( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator >=(const _private_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return (bool(op))>= op2; } template <int _AP_W, bool _AP_S> inline bool operator >=(signed char op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 >=(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator <=(const _private_range_ref<_AP_W, _AP_S>& op, signed char op2) { return (ap_private<_AP_W, false>(op)) . operator <=(ap_private<(8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator <=(signed char op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(8), (true)>(op2).operator <=( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator <=(const _private_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return (bool(op))<= op2; } template <int _AP_W, bool _AP_S> inline bool operator <=(signed char op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 <=(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator ==(const _private_range_ref<_AP_W, _AP_S>& op, signed char op2) { return (ap_private<_AP_W, false>(op)) . operator ==(ap_private<(8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator ==(signed char op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(8), (true)>(op2).operator ==( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator ==(const _private_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return (bool(op))== op2; } template <int _AP_W, bool _AP_S> inline bool operator ==(signed char op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 ==(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator !=(const _private_range_ref<_AP_W, _AP_S>& op, signed char op2) { return (ap_private<_AP_W, false>(op)) . operator !=(ap_private<(8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator !=(signed char op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(8), (true)>(op2).operator !=( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator !=(const _private_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return (bool(op))!= op2; } template <int _AP_W, bool _AP_S> inline bool operator !=(signed char op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 !=(bool(op)); }
template <int _AP_W, bool _AP_S> inline bool operator >(const _private_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return (ap_private<_AP_W, false>(op)) . operator >(ap_private<(8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator >(unsigned char op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(8), (false)>(op2).operator >( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator >(const _private_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return (bool(op))> op2; } template <int _AP_W, bool _AP_S> inline bool operator >(unsigned char op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 >(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator <(const _private_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return (ap_private<_AP_W, false>(op)) . operator <(ap_private<(8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator <(unsigned char op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(8), (false)>(op2).operator <( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator <(const _private_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return (bool(op))< op2; } template <int _AP_W, bool _AP_S> inline bool operator <(unsigned char op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 <(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator >=(const _private_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return (ap_private<_AP_W, false>(op)) . operator >=(ap_private<(8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator >=(unsigned char op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(8), (false)>(op2).operator >=( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator >=(const _private_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return (bool(op))>= op2; } template <int _AP_W, bool _AP_S> inline bool operator >=(unsigned char op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 >=(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator <=(const _private_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return (ap_private<_AP_W, false>(op)) . operator <=(ap_private<(8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator <=(unsigned char op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(8), (false)>(op2).operator <=( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator <=(const _private_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return (bool(op))<= op2; } template <int _AP_W, bool _AP_S> inline bool operator <=(unsigned char op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 <=(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator ==(const _private_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return (ap_private<_AP_W, false>(op)) . operator ==(ap_private<(8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator ==(unsigned char op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(8), (false)>(op2).operator ==( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator ==(const _private_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return (bool(op))== op2; } template <int _AP_W, bool _AP_S> inline bool operator ==(unsigned char op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 ==(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator !=(const _private_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return (ap_private<_AP_W, false>(op)) . operator !=(ap_private<(8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator !=(unsigned char op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(8), (false)>(op2).operator !=( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator !=(const _private_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return (bool(op))!= op2; } template <int _AP_W, bool _AP_S> inline bool operator !=(unsigned char op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 !=(bool(op)); }
template <int _AP_W, bool _AP_S> inline bool operator >(const _private_range_ref<_AP_W, _AP_S>& op, short op2) { return (ap_private<_AP_W, false>(op)) . operator >(ap_private<(sizeof(short) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator >(short op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(short) * 8), (true)>(op2).operator >( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator >(const _private_bit_ref<_AP_W, _AP_S>& op, short op2) { return (bool(op))> op2; } template <int _AP_W, bool _AP_S> inline bool operator >(short op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 >(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator <(const _private_range_ref<_AP_W, _AP_S>& op, short op2) { return (ap_private<_AP_W, false>(op)) . operator <(ap_private<(sizeof(short) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator <(short op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(short) * 8), (true)>(op2).operator <( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator <(const _private_bit_ref<_AP_W, _AP_S>& op, short op2) { return (bool(op))< op2; } template <int _AP_W, bool _AP_S> inline bool operator <(short op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 <(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator >=(const _private_range_ref<_AP_W, _AP_S>& op, short op2) { return (ap_private<_AP_W, false>(op)) . operator >=(ap_private<(sizeof(short) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator >=(short op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(short) * 8), (true)>(op2).operator >=( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator >=(const _private_bit_ref<_AP_W, _AP_S>& op, short op2) { return (bool(op))>= op2; } template <int _AP_W, bool _AP_S> inline bool operator >=(short op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 >=(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator <=(const _private_range_ref<_AP_W, _AP_S>& op, short op2) { return (ap_private<_AP_W, false>(op)) . operator <=(ap_private<(sizeof(short) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator <=(short op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(short) * 8), (true)>(op2).operator <=( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator <=(const _private_bit_ref<_AP_W, _AP_S>& op, short op2) { return (bool(op))<= op2; } template <int _AP_W, bool _AP_S> inline bool operator <=(short op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 <=(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator ==(const _private_range_ref<_AP_W, _AP_S>& op, short op2) { return (ap_private<_AP_W, false>(op)) . operator ==(ap_private<(sizeof(short) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator ==(short op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(short) * 8), (true)>(op2).operator ==( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator ==(const _private_bit_ref<_AP_W, _AP_S>& op, short op2) { return (bool(op))== op2; } template <int _AP_W, bool _AP_S> inline bool operator ==(short op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 ==(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator !=(const _private_range_ref<_AP_W, _AP_S>& op, short op2) { return (ap_private<_AP_W, false>(op)) . operator !=(ap_private<(sizeof(short) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator !=(short op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(short) * 8), (true)>(op2).operator !=( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator !=(const _private_bit_ref<_AP_W, _AP_S>& op, short op2) { return (bool(op))!= op2; } template <int _AP_W, bool _AP_S> inline bool operator !=(short op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 !=(bool(op)); }
template <int _AP_W, bool _AP_S> inline bool operator >(const _private_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return (ap_private<_AP_W, false>(op)) . operator >(ap_private<(sizeof(unsigned short) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator >(unsigned short op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned short) * 8), (false)>(op2).operator >( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator >(const _private_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return (bool(op))> op2; } template <int _AP_W, bool _AP_S> inline bool operator >(unsigned short op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 >(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator <(const _private_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return (ap_private<_AP_W, false>(op)) . operator <(ap_private<(sizeof(unsigned short) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator <(unsigned short op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned short) * 8), (false)>(op2).operator <( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator <(const _private_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return (bool(op))< op2; } template <int _AP_W, bool _AP_S> inline bool operator <(unsigned short op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 <(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator >=(const _private_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return (ap_private<_AP_W, false>(op)) . operator >=(ap_private<(sizeof(unsigned short) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator >=(unsigned short op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned short) * 8), (false)>(op2).operator >=( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator >=(const _private_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return (bool(op))>= op2; } template <int _AP_W, bool _AP_S> inline bool operator >=(unsigned short op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 >=(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator <=(const _private_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return (ap_private<_AP_W, false>(op)) . operator <=(ap_private<(sizeof(unsigned short) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator <=(unsigned short op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned short) * 8), (false)>(op2).operator <=( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator <=(const _private_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return (bool(op))<= op2; } template <int _AP_W, bool _AP_S> inline bool operator <=(unsigned short op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 <=(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator ==(const _private_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return (ap_private<_AP_W, false>(op)) . operator ==(ap_private<(sizeof(unsigned short) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator ==(unsigned short op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned short) * 8), (false)>(op2).operator ==( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator ==(const _private_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return (bool(op))== op2; } template <int _AP_W, bool _AP_S> inline bool operator ==(unsigned short op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 ==(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator !=(const _private_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return (ap_private<_AP_W, false>(op)) . operator !=(ap_private<(sizeof(unsigned short) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator !=(unsigned short op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned short) * 8), (false)>(op2).operator !=( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator !=(const _private_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return (bool(op))!= op2; } template <int _AP_W, bool _AP_S> inline bool operator !=(unsigned short op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 !=(bool(op)); }
template <int _AP_W, bool _AP_S> inline bool operator >(const _private_range_ref<_AP_W, _AP_S>& op, int op2) { return (ap_private<_AP_W, false>(op)) . operator >(ap_private<(sizeof(int) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator >(int op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(int) * 8), (true)>(op2).operator >( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator >(const _private_bit_ref<_AP_W, _AP_S>& op, int op2) { return (bool(op))> op2; } template <int _AP_W, bool _AP_S> inline bool operator >(int op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 >(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator <(const _private_range_ref<_AP_W, _AP_S>& op, int op2) { return (ap_private<_AP_W, false>(op)) . operator <(ap_private<(sizeof(int) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator <(int op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(int) * 8), (true)>(op2).operator <( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator <(const _private_bit_ref<_AP_W, _AP_S>& op, int op2) { return (bool(op))< op2; } template <int _AP_W, bool _AP_S> inline bool operator <(int op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 <(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator >=(const _private_range_ref<_AP_W, _AP_S>& op, int op2) { return (ap_private<_AP_W, false>(op)) . operator >=(ap_private<(sizeof(int) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator >=(int op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(int) * 8), (true)>(op2).operator >=( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator >=(const _private_bit_ref<_AP_W, _AP_S>& op, int op2) { return (bool(op))>= op2; } template <int _AP_W, bool _AP_S> inline bool operator >=(int op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 >=(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator <=(const _private_range_ref<_AP_W, _AP_S>& op, int op2) { return (ap_private<_AP_W, false>(op)) . operator <=(ap_private<(sizeof(int) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator <=(int op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(int) * 8), (true)>(op2).operator <=( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator <=(const _private_bit_ref<_AP_W, _AP_S>& op, int op2) { return (bool(op))<= op2; } template <int _AP_W, bool _AP_S> inline bool operator <=(int op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 <=(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator ==(const _private_range_ref<_AP_W, _AP_S>& op, int op2) { return (ap_private<_AP_W, false>(op)) . operator ==(ap_private<(sizeof(int) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator ==(int op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(int) * 8), (true)>(op2).operator ==( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator ==(const _private_bit_ref<_AP_W, _AP_S>& op, int op2) { return (bool(op))== op2; } template <int _AP_W, bool _AP_S> inline bool operator ==(int op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 ==(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator !=(const _private_range_ref<_AP_W, _AP_S>& op, int op2) { return (ap_private<_AP_W, false>(op)) . operator !=(ap_private<(sizeof(int) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator !=(int op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(int) * 8), (true)>(op2).operator !=( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator !=(const _private_bit_ref<_AP_W, _AP_S>& op, int op2) { return (bool(op))!= op2; } template <int _AP_W, bool _AP_S> inline bool operator !=(int op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 !=(bool(op)); }
template <int _AP_W, bool _AP_S> inline bool operator >(const _private_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return (ap_private<_AP_W, false>(op)) . operator >(ap_private<(sizeof(unsigned int) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator >(unsigned int op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned int) * 8), (false)>(op2).operator >( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator >(const _private_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return (bool(op))> op2; } template <int _AP_W, bool _AP_S> inline bool operator >(unsigned int op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 >(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator <(const _private_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return (ap_private<_AP_W, false>(op)) . operator <(ap_private<(sizeof(unsigned int) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator <(unsigned int op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned int) * 8), (false)>(op2).operator <( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator <(const _private_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return (bool(op))< op2; } template <int _AP_W, bool _AP_S> inline bool operator <(unsigned int op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 <(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator >=(const _private_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return (ap_private<_AP_W, false>(op)) . operator >=(ap_private<(sizeof(unsigned int) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator >=(unsigned int op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned int) * 8), (false)>(op2).operator >=( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator >=(const _private_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return (bool(op))>= op2; } template <int _AP_W, bool _AP_S> inline bool operator >=(unsigned int op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 >=(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator <=(const _private_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return (ap_private<_AP_W, false>(op)) . operator <=(ap_private<(sizeof(unsigned int) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator <=(unsigned int op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned int) * 8), (false)>(op2).operator <=( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator <=(const _private_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return (bool(op))<= op2; } template <int _AP_W, bool _AP_S> inline bool operator <=(unsigned int op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 <=(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator ==(const _private_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return (ap_private<_AP_W, false>(op)) . operator ==(ap_private<(sizeof(unsigned int) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator ==(unsigned int op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned int) * 8), (false)>(op2).operator ==( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator ==(const _private_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return (bool(op))== op2; } template <int _AP_W, bool _AP_S> inline bool operator ==(unsigned int op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 ==(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator !=(const _private_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return (ap_private<_AP_W, false>(op)) . operator !=(ap_private<(sizeof(unsigned int) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator !=(unsigned int op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned int) * 8), (false)>(op2).operator !=( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator !=(const _private_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return (bool(op))!= op2; } template <int _AP_W, bool _AP_S> inline bool operator !=(unsigned int op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 !=(bool(op)); }
template <int _AP_W, bool _AP_S> inline bool operator >(const _private_range_ref<_AP_W, _AP_S>& op, long op2) { return (ap_private<_AP_W, false>(op)) . operator >(ap_private<(sizeof(long) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator >(long op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(long) * 8), (true)>(op2).operator >( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator >(const _private_bit_ref<_AP_W, _AP_S>& op, long op2) { return (bool(op))> op2; } template <int _AP_W, bool _AP_S> inline bool operator >(long op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 >(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator <(const _private_range_ref<_AP_W, _AP_S>& op, long op2) { return (ap_private<_AP_W, false>(op)) . operator <(ap_private<(sizeof(long) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator <(long op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(long) * 8), (true)>(op2).operator <( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator <(const _private_bit_ref<_AP_W, _AP_S>& op, long op2) { return (bool(op))< op2; } template <int _AP_W, bool _AP_S> inline bool operator <(long op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 <(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator >=(const _private_range_ref<_AP_W, _AP_S>& op, long op2) { return (ap_private<_AP_W, false>(op)) . operator >=(ap_private<(sizeof(long) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator >=(long op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(long) * 8), (true)>(op2).operator >=( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator >=(const _private_bit_ref<_AP_W, _AP_S>& op, long op2) { return (bool(op))>= op2; } template <int _AP_W, bool _AP_S> inline bool operator >=(long op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 >=(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator <=(const _private_range_ref<_AP_W, _AP_S>& op, long op2) { return (ap_private<_AP_W, false>(op)) . operator <=(ap_private<(sizeof(long) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator <=(long op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(long) * 8), (true)>(op2).operator <=( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator <=(const _private_bit_ref<_AP_W, _AP_S>& op, long op2) { return (bool(op))<= op2; } template <int _AP_W, bool _AP_S> inline bool operator <=(long op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 <=(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator ==(const _private_range_ref<_AP_W, _AP_S>& op, long op2) { return (ap_private<_AP_W, false>(op)) . operator ==(ap_private<(sizeof(long) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator ==(long op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(long) * 8), (true)>(op2).operator ==( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator ==(const _private_bit_ref<_AP_W, _AP_S>& op, long op2) { return (bool(op))== op2; } template <int _AP_W, bool _AP_S> inline bool operator ==(long op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 ==(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator !=(const _private_range_ref<_AP_W, _AP_S>& op, long op2) { return (ap_private<_AP_W, false>(op)) . operator !=(ap_private<(sizeof(long) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator !=(long op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(long) * 8), (true)>(op2).operator !=( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator !=(const _private_bit_ref<_AP_W, _AP_S>& op, long op2) { return (bool(op))!= op2; } template <int _AP_W, bool _AP_S> inline bool operator !=(long op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 !=(bool(op)); }
template <int _AP_W, bool _AP_S> inline bool operator >(const _private_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return (ap_private<_AP_W, false>(op)) . operator >(ap_private<(sizeof(unsigned long) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator >(unsigned long op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned long) * 8), (false)>(op2).operator >( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator >(const _private_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return (bool(op))> op2; } template <int _AP_W, bool _AP_S> inline bool operator >(unsigned long op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 >(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator <(const _private_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return (ap_private<_AP_W, false>(op)) . operator <(ap_private<(sizeof(unsigned long) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator <(unsigned long op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned long) * 8), (false)>(op2).operator <( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator <(const _private_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return (bool(op))< op2; } template <int _AP_W, bool _AP_S> inline bool operator <(unsigned long op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 <(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator >=(const _private_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return (ap_private<_AP_W, false>(op)) . operator >=(ap_private<(sizeof(unsigned long) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator >=(unsigned long op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned long) * 8), (false)>(op2).operator >=( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator >=(const _private_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return (bool(op))>= op2; } template <int _AP_W, bool _AP_S> inline bool operator >=(unsigned long op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 >=(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator <=(const _private_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return (ap_private<_AP_W, false>(op)) . operator <=(ap_private<(sizeof(unsigned long) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator <=(unsigned long op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned long) * 8), (false)>(op2).operator <=( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator <=(const _private_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return (bool(op))<= op2; } template <int _AP_W, bool _AP_S> inline bool operator <=(unsigned long op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 <=(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator ==(const _private_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return (ap_private<_AP_W, false>(op)) . operator ==(ap_private<(sizeof(unsigned long) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator ==(unsigned long op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned long) * 8), (false)>(op2).operator ==( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator ==(const _private_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return (bool(op))== op2; } template <int _AP_W, bool _AP_S> inline bool operator ==(unsigned long op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 ==(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator !=(const _private_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return (ap_private<_AP_W, false>(op)) . operator !=(ap_private<(sizeof(unsigned long) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator !=(unsigned long op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned long) * 8), (false)>(op2).operator !=( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator !=(const _private_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return (bool(op))!= op2; } template <int _AP_W, bool _AP_S> inline bool operator !=(unsigned long op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 !=(bool(op)); }
template <int _AP_W, bool _AP_S> inline bool operator >(const _private_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return (ap_private<_AP_W, false>(op)) . operator >(ap_private<(sizeof(ap_slong) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator >(ap_slong op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(ap_slong) * 8), (true)>(op2).operator >( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator >(const _private_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return (bool(op))> op2; } template <int _AP_W, bool _AP_S> inline bool operator >(ap_slong op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 >(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator <(const _private_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return (ap_private<_AP_W, false>(op)) . operator <(ap_private<(sizeof(ap_slong) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator <(ap_slong op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(ap_slong) * 8), (true)>(op2).operator <( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator <(const _private_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return (bool(op))< op2; } template <int _AP_W, bool _AP_S> inline bool operator <(ap_slong op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 <(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator >=(const _private_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return (ap_private<_AP_W, false>(op)) . operator >=(ap_private<(sizeof(ap_slong) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator >=(ap_slong op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(ap_slong) * 8), (true)>(op2).operator >=( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator >=(const _private_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return (bool(op))>= op2; } template <int _AP_W, bool _AP_S> inline bool operator >=(ap_slong op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 >=(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator <=(const _private_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return (ap_private<_AP_W, false>(op)) . operator <=(ap_private<(sizeof(ap_slong) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator <=(ap_slong op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(ap_slong) * 8), (true)>(op2).operator <=( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator <=(const _private_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return (bool(op))<= op2; } template <int _AP_W, bool _AP_S> inline bool operator <=(ap_slong op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 <=(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator ==(const _private_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return (ap_private<_AP_W, false>(op)) . operator ==(ap_private<(sizeof(ap_slong) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator ==(ap_slong op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(ap_slong) * 8), (true)>(op2).operator ==( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator ==(const _private_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return (bool(op))== op2; } template <int _AP_W, bool _AP_S> inline bool operator ==(ap_slong op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 ==(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator !=(const _private_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return (ap_private<_AP_W, false>(op)) . operator !=(ap_private<(sizeof(ap_slong) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator !=(ap_slong op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(ap_slong) * 8), (true)>(op2).operator !=( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator !=(const _private_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return (bool(op))!= op2; } template <int _AP_W, bool _AP_S> inline bool operator !=(ap_slong op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 !=(bool(op)); }
template <int _AP_W, bool _AP_S> inline bool operator >(const _private_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return (ap_private<_AP_W, false>(op)) . operator >(ap_private<(sizeof(ap_ulong) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator >(ap_ulong op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(ap_ulong) * 8), (false)>(op2).operator >( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator >(const _private_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return (bool(op))> op2; } template <int _AP_W, bool _AP_S> inline bool operator >(ap_ulong op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 >(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator <(const _private_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return (ap_private<_AP_W, false>(op)) . operator <(ap_private<(sizeof(ap_ulong) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator <(ap_ulong op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(ap_ulong) * 8), (false)>(op2).operator <( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator <(const _private_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return (bool(op))< op2; } template <int _AP_W, bool _AP_S> inline bool operator <(ap_ulong op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 <(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator >=(const _private_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return (ap_private<_AP_W, false>(op)) . operator >=(ap_private<(sizeof(ap_ulong) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator >=(ap_ulong op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(ap_ulong) * 8), (false)>(op2).operator >=( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator >=(const _private_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return (bool(op))>= op2; } template <int _AP_W, bool _AP_S> inline bool operator >=(ap_ulong op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 >=(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator <=(const _private_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return (ap_private<_AP_W, false>(op)) . operator <=(ap_private<(sizeof(ap_ulong) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator <=(ap_ulong op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(ap_ulong) * 8), (false)>(op2).operator <=( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator <=(const _private_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return (bool(op))<= op2; } template <int _AP_W, bool _AP_S> inline bool operator <=(ap_ulong op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 <=(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator ==(const _private_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return (ap_private<_AP_W, false>(op)) . operator ==(ap_private<(sizeof(ap_ulong) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator ==(ap_ulong op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(ap_ulong) * 8), (false)>(op2).operator ==( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator ==(const _private_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return (bool(op))== op2; } template <int _AP_W, bool _AP_S> inline bool operator ==(ap_ulong op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 ==(bool(op)); } template <int _AP_W, bool _AP_S> inline bool operator !=(const _private_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return (ap_private<_AP_W, false>(op)) . operator !=(ap_private<(sizeof(ap_ulong) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline bool operator !=(ap_ulong op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(ap_ulong) * 8), (false)>(op2).operator !=( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline bool operator !=(const _private_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return (bool(op))!= op2; } template <int _AP_W, bool _AP_S> inline bool operator !=(ap_ulong op2, const _private_bit_ref<_AP_W, _AP_S>& op) { return op2 !=(bool(op)); }
# 7432 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(1), (false)>::plus operator +(const _private_range_ref<_AP_W, _AP_S>& op, bool op2) { return (ap_private<_AP_W, false>(op)) . operator +(ap_private<(1), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(1), (false)>::template RType<_AP_W, false>::plus operator +(bool op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(1), (false)>(op2).operator +( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(1), (false)>::minus operator -(const _private_range_ref<_AP_W, _AP_S>& op, bool op2) { return (ap_private<_AP_W, false>(op)) . operator -(ap_private<(1), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(1), (false)>::template RType<_AP_W, false>::minus operator -(bool op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(1), (false)>(op2).operator -( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(1), (false)>::mult operator *(const _private_range_ref<_AP_W, _AP_S>& op, bool op2) { return (ap_private<_AP_W, false>(op)) . operator *(ap_private<(1), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(1), (false)>::template RType<_AP_W, false>::mult operator *(bool op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(1), (false)>(op2).operator *( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(1), (false)>::div operator /(const _private_range_ref<_AP_W, _AP_S>& op, bool op2) { return (ap_private<_AP_W, false>(op)) . operator /(ap_private<(1), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(1), (false)>::template RType<_AP_W, false>::div operator /(bool op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(1), (false)>(op2).operator /( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(1), (false)>::mod operator %(const _private_range_ref<_AP_W, _AP_S>& op, bool op2) { return (ap_private<_AP_W, false>(op)) . operator %(ap_private<(1), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(1), (false)>::template RType<_AP_W, false>::mod operator %(bool op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(1), (false)>(op2).operator %( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(1), (false)>::logic operator &(const _private_range_ref<_AP_W, _AP_S>& op, bool op2) { return (ap_private<_AP_W, false>(op)) . operator &(ap_private<(1), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(1), (false)>::template RType<_AP_W, false>::logic operator &(bool op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(1), (false)>(op2).operator &( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(1), (false)>::logic operator |(const _private_range_ref<_AP_W, _AP_S>& op, bool op2) { return (ap_private<_AP_W, false>(op)) . operator |(ap_private<(1), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(1), (false)>::template RType<_AP_W, false>::logic operator |(bool op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(1), (false)>(op2).operator |( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(1), (false)>::logic operator ^(const _private_range_ref<_AP_W, _AP_S>& op, bool op2) { return (ap_private<_AP_W, false>(op)) . operator ^(ap_private<(1), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(1), (false)>::template RType<_AP_W, false>::logic operator ^(bool op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(1), (false)>(op2).operator ^( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(1), (false)>::arg1 operator >>(const _private_range_ref<_AP_W, _AP_S>& op, bool op2) { return (ap_private<_AP_W, false>(op)) . operator >>(ap_private<(1), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(1), (false)>::template RType<_AP_W, false>::arg1 operator >>(bool op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(1), (false)>(op2).operator >>( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(1), (false)>::arg1 operator <<(const _private_range_ref<_AP_W, _AP_S>& op, bool op2) { return (ap_private<_AP_W, false>(op)) . operator <<(ap_private<(1), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(1), (false)>::template RType<_AP_W, false>::arg1 operator <<(bool op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(1), (false)>(op2).operator <<( ap_private<_AP_W, false>(op)); }
template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::plus operator +(const _private_range_ref<_AP_W, _AP_S>& op, char op2) { return (ap_private<_AP_W, false>(op)) . operator +(ap_private<(8), (CHAR_IS_SIGNED)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::plus operator +(char op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(8), (CHAR_IS_SIGNED)>(op2).operator +( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::minus operator -(const _private_range_ref<_AP_W, _AP_S>& op, char op2) { return (ap_private<_AP_W, false>(op)) . operator -(ap_private<(8), (CHAR_IS_SIGNED)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::minus operator -(char op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(8), (CHAR_IS_SIGNED)>(op2).operator -( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::mult operator *(const _private_range_ref<_AP_W, _AP_S>& op, char op2) { return (ap_private<_AP_W, false>(op)) . operator *(ap_private<(8), (CHAR_IS_SIGNED)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::mult operator *(char op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(8), (CHAR_IS_SIGNED)>(op2).operator *( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::div operator /(const _private_range_ref<_AP_W, _AP_S>& op, char op2) { return (ap_private<_AP_W, false>(op)) . operator /(ap_private<(8), (CHAR_IS_SIGNED)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::div operator /(char op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(8), (CHAR_IS_SIGNED)>(op2).operator /( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::mod operator %(const _private_range_ref<_AP_W, _AP_S>& op, char op2) { return (ap_private<_AP_W, false>(op)) . operator %(ap_private<(8), (CHAR_IS_SIGNED)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::mod operator %(char op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(8), (CHAR_IS_SIGNED)>(op2).operator %( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator &(const _private_range_ref<_AP_W, _AP_S>& op, char op2) { return (ap_private<_AP_W, false>(op)) . operator &(ap_private<(8), (CHAR_IS_SIGNED)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator &(char op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(8), (CHAR_IS_SIGNED)>(op2).operator &( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator |(const _private_range_ref<_AP_W, _AP_S>& op, char op2) { return (ap_private<_AP_W, false>(op)) . operator |(ap_private<(8), (CHAR_IS_SIGNED)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator |(char op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(8), (CHAR_IS_SIGNED)>(op2).operator |( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator ^(const _private_range_ref<_AP_W, _AP_S>& op, char op2) { return (ap_private<_AP_W, false>(op)) . operator ^(ap_private<(8), (CHAR_IS_SIGNED)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator ^(char op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(8), (CHAR_IS_SIGNED)>(op2).operator ^( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::arg1 operator >>(const _private_range_ref<_AP_W, _AP_S>& op, char op2) { return (ap_private<_AP_W, false>(op)) . operator >>(ap_private<(8), (CHAR_IS_SIGNED)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::arg1 operator >>(char op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(8), (CHAR_IS_SIGNED)>(op2).operator >>( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::arg1 operator <<(const _private_range_ref<_AP_W, _AP_S>& op, char op2) { return (ap_private<_AP_W, false>(op)) . operator <<(ap_private<(8), (CHAR_IS_SIGNED)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::arg1 operator <<(char op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(8), (CHAR_IS_SIGNED)>(op2).operator <<( ap_private<_AP_W, false>(op)); }
template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(8), (true)>::plus operator +(const _private_range_ref<_AP_W, _AP_S>& op, signed char op2) { return (ap_private<_AP_W, false>(op)) . operator +(ap_private<(8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (true)>::template RType<_AP_W, false>::plus operator +(signed char op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(8), (true)>(op2).operator +( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(8), (true)>::minus operator -(const _private_range_ref<_AP_W, _AP_S>& op, signed char op2) { return (ap_private<_AP_W, false>(op)) . operator -(ap_private<(8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (true)>::template RType<_AP_W, false>::minus operator -(signed char op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(8), (true)>(op2).operator -( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(8), (true)>::mult operator *(const _private_range_ref<_AP_W, _AP_S>& op, signed char op2) { return (ap_private<_AP_W, false>(op)) . operator *(ap_private<(8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (true)>::template RType<_AP_W, false>::mult operator *(signed char op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(8), (true)>(op2).operator *( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(8), (true)>::div operator /(const _private_range_ref<_AP_W, _AP_S>& op, signed char op2) { return (ap_private<_AP_W, false>(op)) . operator /(ap_private<(8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (true)>::template RType<_AP_W, false>::div operator /(signed char op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(8), (true)>(op2).operator /( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(8), (true)>::mod operator %(const _private_range_ref<_AP_W, _AP_S>& op, signed char op2) { return (ap_private<_AP_W, false>(op)) . operator %(ap_private<(8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (true)>::template RType<_AP_W, false>::mod operator %(signed char op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(8), (true)>(op2).operator %( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(8), (true)>::logic operator &(const _private_range_ref<_AP_W, _AP_S>& op, signed char op2) { return (ap_private<_AP_W, false>(op)) . operator &(ap_private<(8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (true)>::template RType<_AP_W, false>::logic operator &(signed char op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(8), (true)>(op2).operator &( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(8), (true)>::logic operator |(const _private_range_ref<_AP_W, _AP_S>& op, signed char op2) { return (ap_private<_AP_W, false>(op)) . operator |(ap_private<(8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (true)>::template RType<_AP_W, false>::logic operator |(signed char op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(8), (true)>(op2).operator |( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(8), (true)>::logic operator ^(const _private_range_ref<_AP_W, _AP_S>& op, signed char op2) { return (ap_private<_AP_W, false>(op)) . operator ^(ap_private<(8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (true)>::template RType<_AP_W, false>::logic operator ^(signed char op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(8), (true)>(op2).operator ^( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(8), (true)>::arg1 operator >>(const _private_range_ref<_AP_W, _AP_S>& op, signed char op2) { return (ap_private<_AP_W, false>(op)) . operator >>(ap_private<(8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (true)>::template RType<_AP_W, false>::arg1 operator >>(signed char op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(8), (true)>(op2).operator >>( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(8), (true)>::arg1 operator <<(const _private_range_ref<_AP_W, _AP_S>& op, signed char op2) { return (ap_private<_AP_W, false>(op)) . operator <<(ap_private<(8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (true)>::template RType<_AP_W, false>::arg1 operator <<(signed char op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(8), (true)>(op2).operator <<( ap_private<_AP_W, false>(op)); }
template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(8), (false)>::plus operator +(const _private_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return (ap_private<_AP_W, false>(op)) . operator +(ap_private<(8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (false)>::template RType<_AP_W, false>::plus operator +(unsigned char op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(8), (false)>(op2).operator +( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(8), (false)>::minus operator -(const _private_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return (ap_private<_AP_W, false>(op)) . operator -(ap_private<(8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (false)>::template RType<_AP_W, false>::minus operator -(unsigned char op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(8), (false)>(op2).operator -( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(8), (false)>::mult operator *(const _private_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return (ap_private<_AP_W, false>(op)) . operator *(ap_private<(8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (false)>::template RType<_AP_W, false>::mult operator *(unsigned char op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(8), (false)>(op2).operator *( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(8), (false)>::div operator /(const _private_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return (ap_private<_AP_W, false>(op)) . operator /(ap_private<(8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (false)>::template RType<_AP_W, false>::div operator /(unsigned char op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(8), (false)>(op2).operator /( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(8), (false)>::mod operator %(const _private_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return (ap_private<_AP_W, false>(op)) . operator %(ap_private<(8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (false)>::template RType<_AP_W, false>::mod operator %(unsigned char op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(8), (false)>(op2).operator %( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(8), (false)>::logic operator &(const _private_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return (ap_private<_AP_W, false>(op)) . operator &(ap_private<(8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (false)>::template RType<_AP_W, false>::logic operator &(unsigned char op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(8), (false)>(op2).operator &( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(8), (false)>::logic operator |(const _private_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return (ap_private<_AP_W, false>(op)) . operator |(ap_private<(8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (false)>::template RType<_AP_W, false>::logic operator |(unsigned char op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(8), (false)>(op2).operator |( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(8), (false)>::logic operator ^(const _private_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return (ap_private<_AP_W, false>(op)) . operator ^(ap_private<(8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned char op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(8), (false)>(op2).operator ^( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(8), (false)>::arg1 operator >>(const _private_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return (ap_private<_AP_W, false>(op)) . operator >>(ap_private<(8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned char op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(8), (false)>(op2).operator >>( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(8), (false)>::arg1 operator <<(const _private_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return (ap_private<_AP_W, false>(op)) . operator <<(ap_private<(8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(8), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned char op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(8), (false)>(op2).operator <<( ap_private<_AP_W, false>(op)); }
template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(short) * 8), (true)>::plus operator +(const _private_range_ref<_AP_W, _AP_S>& op, short op2) { return (ap_private<_AP_W, false>(op)) . operator +(ap_private<(sizeof(short) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(short) * 8), (true)>::template RType<_AP_W, false>::plus operator +(short op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(short) * 8), (true)>(op2).operator +( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(short) * 8), (true)>::minus operator -(const _private_range_ref<_AP_W, _AP_S>& op, short op2) { return (ap_private<_AP_W, false>(op)) . operator -(ap_private<(sizeof(short) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(short) * 8), (true)>::template RType<_AP_W, false>::minus operator -(short op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(short) * 8), (true)>(op2).operator -( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(short) * 8), (true)>::mult operator *(const _private_range_ref<_AP_W, _AP_S>& op, short op2) { return (ap_private<_AP_W, false>(op)) . operator *(ap_private<(sizeof(short) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(short) * 8), (true)>::template RType<_AP_W, false>::mult operator *(short op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(short) * 8), (true)>(op2).operator *( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(short) * 8), (true)>::div operator /(const _private_range_ref<_AP_W, _AP_S>& op, short op2) { return (ap_private<_AP_W, false>(op)) . operator /(ap_private<(sizeof(short) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(short) * 8), (true)>::template RType<_AP_W, false>::div operator /(short op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(short) * 8), (true)>(op2).operator /( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(short) * 8), (true)>::mod operator %(const _private_range_ref<_AP_W, _AP_S>& op, short op2) { return (ap_private<_AP_W, false>(op)) . operator %(ap_private<(sizeof(short) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(short) * 8), (true)>::template RType<_AP_W, false>::mod operator %(short op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(short) * 8), (true)>(op2).operator %( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(short) * 8), (true)>::logic operator &(const _private_range_ref<_AP_W, _AP_S>& op, short op2) { return (ap_private<_AP_W, false>(op)) . operator &(ap_private<(sizeof(short) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(short) * 8), (true)>::template RType<_AP_W, false>::logic operator &(short op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(short) * 8), (true)>(op2).operator &( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(short) * 8), (true)>::logic operator |(const _private_range_ref<_AP_W, _AP_S>& op, short op2) { return (ap_private<_AP_W, false>(op)) . operator |(ap_private<(sizeof(short) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(short) * 8), (true)>::template RType<_AP_W, false>::logic operator |(short op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(short) * 8), (true)>(op2).operator |( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(short) * 8), (true)>::logic operator ^(const _private_range_ref<_AP_W, _AP_S>& op, short op2) { return (ap_private<_AP_W, false>(op)) . operator ^(ap_private<(sizeof(short) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(short) * 8), (true)>::template RType<_AP_W, false>::logic operator ^(short op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(short) * 8), (true)>(op2).operator ^( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(short) * 8), (true)>::arg1 operator >>(const _private_range_ref<_AP_W, _AP_S>& op, short op2) { return (ap_private<_AP_W, false>(op)) . operator >>(ap_private<(sizeof(short) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(short) * 8), (true)>::template RType<_AP_W, false>::arg1 operator >>(short op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(short) * 8), (true)>(op2).operator >>( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(short) * 8), (true)>::arg1 operator <<(const _private_range_ref<_AP_W, _AP_S>& op, short op2) { return (ap_private<_AP_W, false>(op)) . operator <<(ap_private<(sizeof(short) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(short) * 8), (true)>::template RType<_AP_W, false>::arg1 operator <<(short op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(short) * 8), (true)>(op2).operator <<( ap_private<_AP_W, false>(op)); }
template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(unsigned short) * 8), (false)>::plus operator +(const _private_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return (ap_private<_AP_W, false>(op)) . operator +(ap_private<(sizeof(unsigned short) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned short) * 8), (false)>::template RType<_AP_W, false>::plus operator +(unsigned short op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned short) * 8), (false)>(op2).operator +( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(unsigned short) * 8), (false)>::minus operator -(const _private_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return (ap_private<_AP_W, false>(op)) . operator -(ap_private<(sizeof(unsigned short) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned short) * 8), (false)>::template RType<_AP_W, false>::minus operator -(unsigned short op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned short) * 8), (false)>(op2).operator -( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(unsigned short) * 8), (false)>::mult operator *(const _private_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return (ap_private<_AP_W, false>(op)) . operator *(ap_private<(sizeof(unsigned short) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned short) * 8), (false)>::template RType<_AP_W, false>::mult operator *(unsigned short op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned short) * 8), (false)>(op2).operator *( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(unsigned short) * 8), (false)>::div operator /(const _private_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return (ap_private<_AP_W, false>(op)) . operator /(ap_private<(sizeof(unsigned short) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned short) * 8), (false)>::template RType<_AP_W, false>::div operator /(unsigned short op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned short) * 8), (false)>(op2).operator /( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(unsigned short) * 8), (false)>::mod operator %(const _private_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return (ap_private<_AP_W, false>(op)) . operator %(ap_private<(sizeof(unsigned short) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned short) * 8), (false)>::template RType<_AP_W, false>::mod operator %(unsigned short op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned short) * 8), (false)>(op2).operator %( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(unsigned short) * 8), (false)>::logic operator &(const _private_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return (ap_private<_AP_W, false>(op)) . operator &(ap_private<(sizeof(unsigned short) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned short) * 8), (false)>::template RType<_AP_W, false>::logic operator &(unsigned short op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned short) * 8), (false)>(op2).operator &( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(unsigned short) * 8), (false)>::logic operator |(const _private_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return (ap_private<_AP_W, false>(op)) . operator |(ap_private<(sizeof(unsigned short) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned short) * 8), (false)>::template RType<_AP_W, false>::logic operator |(unsigned short op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned short) * 8), (false)>(op2).operator |( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(unsigned short) * 8), (false)>::logic operator ^(const _private_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return (ap_private<_AP_W, false>(op)) . operator ^(ap_private<(sizeof(unsigned short) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned short) * 8), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned short op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned short) * 8), (false)>(op2).operator ^( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(unsigned short) * 8), (false)>::arg1 operator >>(const _private_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return (ap_private<_AP_W, false>(op)) . operator >>(ap_private<(sizeof(unsigned short) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned short) * 8), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned short op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned short) * 8), (false)>(op2).operator >>( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(unsigned short) * 8), (false)>::arg1 operator <<(const _private_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return (ap_private<_AP_W, false>(op)) . operator <<(ap_private<(sizeof(unsigned short) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned short) * 8), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned short op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned short) * 8), (false)>(op2).operator <<( ap_private<_AP_W, false>(op)); }
template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(int) * 8), (true)>::plus operator +(const _private_range_ref<_AP_W, _AP_S>& op, int op2) { return (ap_private<_AP_W, false>(op)) . operator +(ap_private<(sizeof(int) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(int) * 8), (true)>::template RType<_AP_W, false>::plus operator +(int op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(int) * 8), (true)>(op2).operator +( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(int) * 8), (true)>::minus operator -(const _private_range_ref<_AP_W, _AP_S>& op, int op2) { return (ap_private<_AP_W, false>(op)) . operator -(ap_private<(sizeof(int) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(int) * 8), (true)>::template RType<_AP_W, false>::minus operator -(int op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(int) * 8), (true)>(op2).operator -( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(int) * 8), (true)>::mult operator *(const _private_range_ref<_AP_W, _AP_S>& op, int op2) { return (ap_private<_AP_W, false>(op)) . operator *(ap_private<(sizeof(int) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(int) * 8), (true)>::template RType<_AP_W, false>::mult operator *(int op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(int) * 8), (true)>(op2).operator *( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(int) * 8), (true)>::div operator /(const _private_range_ref<_AP_W, _AP_S>& op, int op2) { return (ap_private<_AP_W, false>(op)) . operator /(ap_private<(sizeof(int) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(int) * 8), (true)>::template RType<_AP_W, false>::div operator /(int op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(int) * 8), (true)>(op2).operator /( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(int) * 8), (true)>::mod operator %(const _private_range_ref<_AP_W, _AP_S>& op, int op2) { return (ap_private<_AP_W, false>(op)) . operator %(ap_private<(sizeof(int) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(int) * 8), (true)>::template RType<_AP_W, false>::mod operator %(int op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(int) * 8), (true)>(op2).operator %( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(int) * 8), (true)>::logic operator &(const _private_range_ref<_AP_W, _AP_S>& op, int op2) { return (ap_private<_AP_W, false>(op)) . operator &(ap_private<(sizeof(int) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(int) * 8), (true)>::template RType<_AP_W, false>::logic operator &(int op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(int) * 8), (true)>(op2).operator &( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(int) * 8), (true)>::logic operator |(const _private_range_ref<_AP_W, _AP_S>& op, int op2) { return (ap_private<_AP_W, false>(op)) . operator |(ap_private<(sizeof(int) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(int) * 8), (true)>::template RType<_AP_W, false>::logic operator |(int op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(int) * 8), (true)>(op2).operator |( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(int) * 8), (true)>::logic operator ^(const _private_range_ref<_AP_W, _AP_S>& op, int op2) { return (ap_private<_AP_W, false>(op)) . operator ^(ap_private<(sizeof(int) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(int) * 8), (true)>::template RType<_AP_W, false>::logic operator ^(int op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(int) * 8), (true)>(op2).operator ^( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(int) * 8), (true)>::arg1 operator >>(const _private_range_ref<_AP_W, _AP_S>& op, int op2) { return (ap_private<_AP_W, false>(op)) . operator >>(ap_private<(sizeof(int) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(int) * 8), (true)>::template RType<_AP_W, false>::arg1 operator >>(int op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(int) * 8), (true)>(op2).operator >>( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(int) * 8), (true)>::arg1 operator <<(const _private_range_ref<_AP_W, _AP_S>& op, int op2) { return (ap_private<_AP_W, false>(op)) . operator <<(ap_private<(sizeof(int) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(int) * 8), (true)>::template RType<_AP_W, false>::arg1 operator <<(int op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(int) * 8), (true)>(op2).operator <<( ap_private<_AP_W, false>(op)); }
template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(unsigned int) * 8), (false)>::plus operator +(const _private_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return (ap_private<_AP_W, false>(op)) . operator +(ap_private<(sizeof(unsigned int) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned int) * 8), (false)>::template RType<_AP_W, false>::plus operator +(unsigned int op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned int) * 8), (false)>(op2).operator +( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(unsigned int) * 8), (false)>::minus operator -(const _private_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return (ap_private<_AP_W, false>(op)) . operator -(ap_private<(sizeof(unsigned int) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned int) * 8), (false)>::template RType<_AP_W, false>::minus operator -(unsigned int op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned int) * 8), (false)>(op2).operator -( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(unsigned int) * 8), (false)>::mult operator *(const _private_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return (ap_private<_AP_W, false>(op)) . operator *(ap_private<(sizeof(unsigned int) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned int) * 8), (false)>::template RType<_AP_W, false>::mult operator *(unsigned int op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned int) * 8), (false)>(op2).operator *( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(unsigned int) * 8), (false)>::div operator /(const _private_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return (ap_private<_AP_W, false>(op)) . operator /(ap_private<(sizeof(unsigned int) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned int) * 8), (false)>::template RType<_AP_W, false>::div operator /(unsigned int op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned int) * 8), (false)>(op2).operator /( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(unsigned int) * 8), (false)>::mod operator %(const _private_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return (ap_private<_AP_W, false>(op)) . operator %(ap_private<(sizeof(unsigned int) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned int) * 8), (false)>::template RType<_AP_W, false>::mod operator %(unsigned int op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned int) * 8), (false)>(op2).operator %( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(unsigned int) * 8), (false)>::logic operator &(const _private_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return (ap_private<_AP_W, false>(op)) . operator &(ap_private<(sizeof(unsigned int) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned int) * 8), (false)>::template RType<_AP_W, false>::logic operator &(unsigned int op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned int) * 8), (false)>(op2).operator &( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(unsigned int) * 8), (false)>::logic operator |(const _private_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return (ap_private<_AP_W, false>(op)) . operator |(ap_private<(sizeof(unsigned int) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned int) * 8), (false)>::template RType<_AP_W, false>::logic operator |(unsigned int op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned int) * 8), (false)>(op2).operator |( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(unsigned int) * 8), (false)>::logic operator ^(const _private_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return (ap_private<_AP_W, false>(op)) . operator ^(ap_private<(sizeof(unsigned int) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned int) * 8), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned int op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned int) * 8), (false)>(op2).operator ^( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(unsigned int) * 8), (false)>::arg1 operator >>(const _private_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return (ap_private<_AP_W, false>(op)) . operator >>(ap_private<(sizeof(unsigned int) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned int) * 8), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned int op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned int) * 8), (false)>(op2).operator >>( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(unsigned int) * 8), (false)>::arg1 operator <<(const _private_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return (ap_private<_AP_W, false>(op)) . operator <<(ap_private<(sizeof(unsigned int) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned int) * 8), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned int op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned int) * 8), (false)>(op2).operator <<( ap_private<_AP_W, false>(op)); }
template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(long) * 8), (true)>::plus operator +(const _private_range_ref<_AP_W, _AP_S>& op, long op2) { return (ap_private<_AP_W, false>(op)) . operator +(ap_private<(sizeof(long) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(long) * 8), (true)>::template RType<_AP_W, false>::plus operator +(long op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(long) * 8), (true)>(op2).operator +( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(long) * 8), (true)>::minus operator -(const _private_range_ref<_AP_W, _AP_S>& op, long op2) { return (ap_private<_AP_W, false>(op)) . operator -(ap_private<(sizeof(long) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(long) * 8), (true)>::template RType<_AP_W, false>::minus operator -(long op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(long) * 8), (true)>(op2).operator -( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(long) * 8), (true)>::mult operator *(const _private_range_ref<_AP_W, _AP_S>& op, long op2) { return (ap_private<_AP_W, false>(op)) . operator *(ap_private<(sizeof(long) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(long) * 8), (true)>::template RType<_AP_W, false>::mult operator *(long op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(long) * 8), (true)>(op2).operator *( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(long) * 8), (true)>::div operator /(const _private_range_ref<_AP_W, _AP_S>& op, long op2) { return (ap_private<_AP_W, false>(op)) . operator /(ap_private<(sizeof(long) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(long) * 8), (true)>::template RType<_AP_W, false>::div operator /(long op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(long) * 8), (true)>(op2).operator /( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(long) * 8), (true)>::mod operator %(const _private_range_ref<_AP_W, _AP_S>& op, long op2) { return (ap_private<_AP_W, false>(op)) . operator %(ap_private<(sizeof(long) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(long) * 8), (true)>::template RType<_AP_W, false>::mod operator %(long op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(long) * 8), (true)>(op2).operator %( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(long) * 8), (true)>::logic operator &(const _private_range_ref<_AP_W, _AP_S>& op, long op2) { return (ap_private<_AP_W, false>(op)) . operator &(ap_private<(sizeof(long) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(long) * 8), (true)>::template RType<_AP_W, false>::logic operator &(long op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(long) * 8), (true)>(op2).operator &( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(long) * 8), (true)>::logic operator |(const _private_range_ref<_AP_W, _AP_S>& op, long op2) { return (ap_private<_AP_W, false>(op)) . operator |(ap_private<(sizeof(long) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(long) * 8), (true)>::template RType<_AP_W, false>::logic operator |(long op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(long) * 8), (true)>(op2).operator |( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(long) * 8), (true)>::logic operator ^(const _private_range_ref<_AP_W, _AP_S>& op, long op2) { return (ap_private<_AP_W, false>(op)) . operator ^(ap_private<(sizeof(long) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(long) * 8), (true)>::template RType<_AP_W, false>::logic operator ^(long op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(long) * 8), (true)>(op2).operator ^( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(long) * 8), (true)>::arg1 operator >>(const _private_range_ref<_AP_W, _AP_S>& op, long op2) { return (ap_private<_AP_W, false>(op)) . operator >>(ap_private<(sizeof(long) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(long) * 8), (true)>::template RType<_AP_W, false>::arg1 operator >>(long op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(long) * 8), (true)>(op2).operator >>( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(long) * 8), (true)>::arg1 operator <<(const _private_range_ref<_AP_W, _AP_S>& op, long op2) { return (ap_private<_AP_W, false>(op)) . operator <<(ap_private<(sizeof(long) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(long) * 8), (true)>::template RType<_AP_W, false>::arg1 operator <<(long op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(long) * 8), (true)>(op2).operator <<( ap_private<_AP_W, false>(op)); }
template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(unsigned long) * 8), (false)>::plus operator +(const _private_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return (ap_private<_AP_W, false>(op)) . operator +(ap_private<(sizeof(unsigned long) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned long) * 8), (false)>::template RType<_AP_W, false>::plus operator +(unsigned long op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned long) * 8), (false)>(op2).operator +( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(unsigned long) * 8), (false)>::minus operator -(const _private_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return (ap_private<_AP_W, false>(op)) . operator -(ap_private<(sizeof(unsigned long) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned long) * 8), (false)>::template RType<_AP_W, false>::minus operator -(unsigned long op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned long) * 8), (false)>(op2).operator -( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(unsigned long) * 8), (false)>::mult operator *(const _private_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return (ap_private<_AP_W, false>(op)) . operator *(ap_private<(sizeof(unsigned long) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned long) * 8), (false)>::template RType<_AP_W, false>::mult operator *(unsigned long op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned long) * 8), (false)>(op2).operator *( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(unsigned long) * 8), (false)>::div operator /(const _private_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return (ap_private<_AP_W, false>(op)) . operator /(ap_private<(sizeof(unsigned long) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned long) * 8), (false)>::template RType<_AP_W, false>::div operator /(unsigned long op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned long) * 8), (false)>(op2).operator /( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(unsigned long) * 8), (false)>::mod operator %(const _private_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return (ap_private<_AP_W, false>(op)) . operator %(ap_private<(sizeof(unsigned long) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned long) * 8), (false)>::template RType<_AP_W, false>::mod operator %(unsigned long op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned long) * 8), (false)>(op2).operator %( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(unsigned long) * 8), (false)>::logic operator &(const _private_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return (ap_private<_AP_W, false>(op)) . operator &(ap_private<(sizeof(unsigned long) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned long) * 8), (false)>::template RType<_AP_W, false>::logic operator &(unsigned long op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned long) * 8), (false)>(op2).operator &( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(unsigned long) * 8), (false)>::logic operator |(const _private_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return (ap_private<_AP_W, false>(op)) . operator |(ap_private<(sizeof(unsigned long) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned long) * 8), (false)>::template RType<_AP_W, false>::logic operator |(unsigned long op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned long) * 8), (false)>(op2).operator |( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(unsigned long) * 8), (false)>::logic operator ^(const _private_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return (ap_private<_AP_W, false>(op)) . operator ^(ap_private<(sizeof(unsigned long) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned long) * 8), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned long op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned long) * 8), (false)>(op2).operator ^( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(unsigned long) * 8), (false)>::arg1 operator >>(const _private_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return (ap_private<_AP_W, false>(op)) . operator >>(ap_private<(sizeof(unsigned long) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned long) * 8), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned long op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned long) * 8), (false)>(op2).operator >>( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(unsigned long) * 8), (false)>::arg1 operator <<(const _private_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return (ap_private<_AP_W, false>(op)) . operator <<(ap_private<(sizeof(unsigned long) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(unsigned long) * 8), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned long op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(unsigned long) * 8), (false)>(op2).operator <<( ap_private<_AP_W, false>(op)); }
template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(ap_slong) * 8), (true)>::plus operator +(const _private_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return (ap_private<_AP_W, false>(op)) . operator +(ap_private<(sizeof(ap_slong) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(ap_slong) * 8), (true)>::template RType<_AP_W, false>::plus operator +(ap_slong op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(ap_slong) * 8), (true)>(op2).operator +( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(ap_slong) * 8), (true)>::minus operator -(const _private_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return (ap_private<_AP_W, false>(op)) . operator -(ap_private<(sizeof(ap_slong) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(ap_slong) * 8), (true)>::template RType<_AP_W, false>::minus operator -(ap_slong op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(ap_slong) * 8), (true)>(op2).operator -( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(ap_slong) * 8), (true)>::mult operator *(const _private_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return (ap_private<_AP_W, false>(op)) . operator *(ap_private<(sizeof(ap_slong) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(ap_slong) * 8), (true)>::template RType<_AP_W, false>::mult operator *(ap_slong op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(ap_slong) * 8), (true)>(op2).operator *( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(ap_slong) * 8), (true)>::div operator /(const _private_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return (ap_private<_AP_W, false>(op)) . operator /(ap_private<(sizeof(ap_slong) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(ap_slong) * 8), (true)>::template RType<_AP_W, false>::div operator /(ap_slong op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(ap_slong) * 8), (true)>(op2).operator /( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(ap_slong) * 8), (true)>::mod operator %(const _private_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return (ap_private<_AP_W, false>(op)) . operator %(ap_private<(sizeof(ap_slong) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(ap_slong) * 8), (true)>::template RType<_AP_W, false>::mod operator %(ap_slong op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(ap_slong) * 8), (true)>(op2).operator %( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(ap_slong) * 8), (true)>::logic operator &(const _private_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return (ap_private<_AP_W, false>(op)) . operator &(ap_private<(sizeof(ap_slong) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(ap_slong) * 8), (true)>::template RType<_AP_W, false>::logic operator &(ap_slong op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(ap_slong) * 8), (true)>(op2).operator &( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(ap_slong) * 8), (true)>::logic operator |(const _private_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return (ap_private<_AP_W, false>(op)) . operator |(ap_private<(sizeof(ap_slong) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(ap_slong) * 8), (true)>::template RType<_AP_W, false>::logic operator |(ap_slong op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(ap_slong) * 8), (true)>(op2).operator |( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(ap_slong) * 8), (true)>::logic operator ^(const _private_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return (ap_private<_AP_W, false>(op)) . operator ^(ap_private<(sizeof(ap_slong) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(ap_slong) * 8), (true)>::template RType<_AP_W, false>::logic operator ^(ap_slong op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(ap_slong) * 8), (true)>(op2).operator ^( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(ap_slong) * 8), (true)>::arg1 operator >>(const _private_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return (ap_private<_AP_W, false>(op)) . operator >>(ap_private<(sizeof(ap_slong) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(ap_slong) * 8), (true)>::template RType<_AP_W, false>::arg1 operator >>(ap_slong op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(ap_slong) * 8), (true)>(op2).operator >>( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(ap_slong) * 8), (true)>::arg1 operator <<(const _private_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return (ap_private<_AP_W, false>(op)) . operator <<(ap_private<(sizeof(ap_slong) * 8), (true)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(ap_slong) * 8), (true)>::template RType<_AP_W, false>::arg1 operator <<(ap_slong op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(ap_slong) * 8), (true)>(op2).operator <<( ap_private<_AP_W, false>(op)); }
template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(ap_ulong) * 8), (false)>::plus operator +(const _private_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return (ap_private<_AP_W, false>(op)) . operator +(ap_private<(sizeof(ap_ulong) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(ap_ulong) * 8), (false)>::template RType<_AP_W, false>::plus operator +(ap_ulong op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(ap_ulong) * 8), (false)>(op2).operator +( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(ap_ulong) * 8), (false)>::minus operator -(const _private_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return (ap_private<_AP_W, false>(op)) . operator -(ap_private<(sizeof(ap_ulong) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(ap_ulong) * 8), (false)>::template RType<_AP_W, false>::minus operator -(ap_ulong op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(ap_ulong) * 8), (false)>(op2).operator -( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(ap_ulong) * 8), (false)>::mult operator *(const _private_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return (ap_private<_AP_W, false>(op)) . operator *(ap_private<(sizeof(ap_ulong) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(ap_ulong) * 8), (false)>::template RType<_AP_W, false>::mult operator *(ap_ulong op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(ap_ulong) * 8), (false)>(op2).operator *( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(ap_ulong) * 8), (false)>::div operator /(const _private_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return (ap_private<_AP_W, false>(op)) . operator /(ap_private<(sizeof(ap_ulong) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(ap_ulong) * 8), (false)>::template RType<_AP_W, false>::div operator /(ap_ulong op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(ap_ulong) * 8), (false)>(op2).operator /( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(ap_ulong) * 8), (false)>::mod operator %(const _private_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return (ap_private<_AP_W, false>(op)) . operator %(ap_private<(sizeof(ap_ulong) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(ap_ulong) * 8), (false)>::template RType<_AP_W, false>::mod operator %(ap_ulong op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(ap_ulong) * 8), (false)>(op2).operator %( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(ap_ulong) * 8), (false)>::logic operator &(const _private_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return (ap_private<_AP_W, false>(op)) . operator &(ap_private<(sizeof(ap_ulong) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(ap_ulong) * 8), (false)>::template RType<_AP_W, false>::logic operator &(ap_ulong op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(ap_ulong) * 8), (false)>(op2).operator &( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(ap_ulong) * 8), (false)>::logic operator |(const _private_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return (ap_private<_AP_W, false>(op)) . operator |(ap_private<(sizeof(ap_ulong) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(ap_ulong) * 8), (false)>::template RType<_AP_W, false>::logic operator |(ap_ulong op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(ap_ulong) * 8), (false)>(op2).operator |( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(ap_ulong) * 8), (false)>::logic operator ^(const _private_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return (ap_private<_AP_W, false>(op)) . operator ^(ap_private<(sizeof(ap_ulong) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(ap_ulong) * 8), (false)>::template RType<_AP_W, false>::logic operator ^(ap_ulong op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(ap_ulong) * 8), (false)>(op2).operator ^( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(ap_ulong) * 8), (false)>::arg1 operator >>(const _private_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return (ap_private<_AP_W, false>(op)) . operator >>(ap_private<(sizeof(ap_ulong) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(ap_ulong) * 8), (false)>::template RType<_AP_W, false>::arg1 operator >>(ap_ulong op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(ap_ulong) * 8), (false)>(op2).operator >>( ap_private<_AP_W, false>(op)); } template <int _AP_W, bool _AP_S> inline typename ap_private<_AP_W, false>::template RType<(sizeof(ap_ulong) * 8), (false)>::arg1 operator <<(const _private_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return (ap_private<_AP_W, false>(op)) . operator <<(ap_private<(sizeof(ap_ulong) * 8), (false)>(op2)); } template <int _AP_W, bool _AP_S> inline typename ap_private<(sizeof(ap_ulong) * 8), (false)>::template RType<_AP_W, false>::arg1 operator <<(ap_ulong op2, const _private_range_ref<_AP_W, _AP_S>& op) { return ap_private<(sizeof(ap_ulong) * 8), (false)>(op2).operator <<( ap_private<_AP_W, false>(op)); }
# 7457 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline typename ap_private<_AP_W, false>::template RType<_AP_W2, false>::plus operator +(const _private_range_ref<_AP_W, _AP_S>& lhs, const _private_range_ref<_AP_W2, _AP_S2>& rhs) { return ap_private<_AP_W, false>(lhs).operator +( ap_private<_AP_W2, false>(rhs)); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline typename ap_private<_AP_W, false>::template RType<_AP_W2, false>::minus operator -(const _private_range_ref<_AP_W, _AP_S>& lhs, const _private_range_ref<_AP_W2, _AP_S2>& rhs) { return ap_private<_AP_W, false>(lhs).operator -( ap_private<_AP_W2, false>(rhs)); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline typename ap_private<_AP_W, false>::template RType<_AP_W2, false>::mult operator *(const _private_range_ref<_AP_W, _AP_S>& lhs, const _private_range_ref<_AP_W2, _AP_S2>& rhs) { return ap_private<_AP_W, false>(lhs).operator *( ap_private<_AP_W2, false>(rhs)); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline typename ap_private<_AP_W, false>::template RType<_AP_W2, false>::div operator /(const _private_range_ref<_AP_W, _AP_S>& lhs, const _private_range_ref<_AP_W2, _AP_S2>& rhs) { return ap_private<_AP_W, false>(lhs).operator /( ap_private<_AP_W2, false>(rhs)); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline typename ap_private<_AP_W, false>::template RType<_AP_W2, false>::mod operator %(const _private_range_ref<_AP_W, _AP_S>& lhs, const _private_range_ref<_AP_W2, _AP_S2>& rhs) { return ap_private<_AP_W, false>(lhs).operator %( ap_private<_AP_W2, false>(rhs)); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline typename ap_private<_AP_W, false>::template RType<_AP_W2, false>::logic operator &(const _private_range_ref<_AP_W, _AP_S>& lhs, const _private_range_ref<_AP_W2, _AP_S2>& rhs) { return ap_private<_AP_W, false>(lhs).operator &( ap_private<_AP_W2, false>(rhs)); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline typename ap_private<_AP_W, false>::template RType<_AP_W2, false>::logic operator |(const _private_range_ref<_AP_W, _AP_S>& lhs, const _private_range_ref<_AP_W2, _AP_S2>& rhs) { return ap_private<_AP_W, false>(lhs).operator |( ap_private<_AP_W2, false>(rhs)); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline typename ap_private<_AP_W, false>::template RType<_AP_W2, false>::logic operator ^(const _private_range_ref<_AP_W, _AP_S>& lhs, const _private_range_ref<_AP_W2, _AP_S2>& rhs) { return ap_private<_AP_W, false>(lhs).operator ^( ap_private<_AP_W2, false>(rhs)); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline typename ap_private<_AP_W, false>::template RType<_AP_W2, false>::arg1 operator >>(const _private_range_ref<_AP_W, _AP_S>& lhs, const _private_range_ref<_AP_W2, _AP_S2>& rhs) { return ap_private<_AP_W, false>(lhs).operator >>( ap_private<_AP_W2, false>(rhs)); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline typename ap_private<_AP_W, false>::template RType<_AP_W2, false>::arg1 operator <<(const _private_range_ref<_AP_W, _AP_S>& lhs, const _private_range_ref<_AP_W2, _AP_S2>& rhs) { return ap_private<_AP_W, false>(lhs).operator <<( ap_private<_AP_W2, false>(rhs)); }
# 7491 "C:/Xilinx/Vitis/2024.2/include/etc/ap_private.h"
#pragma GCC diagnostic pop
# 659 "C:/Xilinx/Vitis/2024.2/include/etc/ap_common.h" 2


template <typename _Tp1, typename _Tp2, typename _Tp3>
inline _Tp1 _AP_ROOT_op_concat(const _Tp1& Ret, const _Tp2& X, const _Tp3& Y) {
  _Tp1 r = (X).operator,(Y);
  return r;
}



template <typename _Tp1, typename _Tp2, typename _Tp3>
                    inline _Tp1& _AP_ROOT_op_set_bit(_Tp1& Val, const _Tp2& Bit, const _Tp3& Repl) {
  (Val).set_bit((Bit), (Repl));
  return Val;
}



template <typename _Tp1, typename _Tp2, typename _Tp3, typename _Tp4>
                    inline _Tp1& _AP_ROOT_op_set_range(_Tp1& Val, const _Tp2& Lo, const _Tp3& Hi,
                                   const _Tp4& Repl) {
  (Val).range((Hi), (Lo)) = Repl;
  return (Val);
}
# 710 "C:/Xilinx/Vitis/2024.2/include/etc/ap_common.h"
inline ap_ulong doubleToRawBits(double pf) {
  union {
    ap_ulong __L;
    double __D;
  } LD;
  LD.__D = pf;
  return LD.__L;
}

inline unsigned int floatToRawBits(float pf) {
  union {
    unsigned int __L;
    float __D;
  } LD;
  LD.__D = pf;
  return LD.__L;
}

inline unsigned short halfToRawBits(half pf) {
# 737 "C:/Xilinx/Vitis/2024.2/include/etc/ap_common.h"
  return pf.get_bits();

}


inline double rawBitsToDouble(ap_ulong pi) {
  union {
    ap_ulong __L;
    double __D;
  } LD;
  LD.__L = pi;
  return LD.__D;
}


inline float rawBitsToFloat(unsigned long pi) {
  union {
    unsigned int __L;
    float __D;
  } LD;
  LD.__L = pi;
  return LD.__D;
}


inline half rawBitsToHalf(unsigned short pi) {
# 772 "C:/Xilinx/Vitis/2024.2/include/etc/ap_common.h"
  half __D;
  __D.set_bits(pi);
  return __D;

}
# 10 "C:/Xilinx/Vitis/2024.2/include/ap_fixed.h" 2
# 1 "C:/Xilinx/Vitis/2024.2/include/etc/ap_fixed_base.h" 1
# 16 "C:/Xilinx/Vitis/2024.2/include/etc/ap_fixed_base.h"
# 1 "C:/Xilinx/Vitis/2024.2/include/ap_int.h" 1
# 11 "C:/Xilinx/Vitis/2024.2/include/ap_int.h"
# 1 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h" 1
# 21 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h"
#pragma GCC diagnostic push



#pragma GCC diagnostic ignored "-Wpragmas"




#pragma GCC diagnostic ignored "-Wint-in-bool-context"
# 40 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h"
#pragma GCC diagnostic ignored "-Wunused-parameter"
# 56 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h"
template <int _AP_N, bool _AP_S>
struct retval;


template <int _AP_N>
struct retval<_AP_N, true> {
  typedef ap_slong Type;
};

template <int _AP_N>
struct retval<_AP_N, false> {
  typedef ap_ulong Type;
};


template <>
struct retval<1, true> {
  typedef signed char Type;
};

template <>
struct retval<1, false> {
  typedef unsigned char Type;
};


template <>
struct retval<2, true> {
  typedef short Type;
};

template <>
struct retval<2, false> {
  typedef unsigned short Type;
};


template <>
struct retval<3, true> {
  typedef long Type;
};

template <>
struct retval<3, false> {
  typedef unsigned long Type;
};

template <>
struct retval<4, true> {
  typedef long Type;
};

template <>
struct retval<4, false> {
  typedef unsigned long Type;
};




template <int _AP_W2, bool _AP_S2>
struct _ap_int_factory;
template <int _AP_W2>
struct _ap_int_factory<_AP_W2,true> { typedef ap_int<_AP_W2> type; };
template <int _AP_W2>
struct _ap_int_factory<_AP_W2,false> { typedef ap_uint<_AP_W2> type; };

template <int _AP_W, bool _AP_S>
struct ap_int_base : public ssdm_int_sim<_AP_W, _AP_S> {
 static_assert(_AP_W > 0, "ap_int_base bitwidth must be positive");

 private:
                inline int countLeadingOnes() const {




    return 0;

  }

 public:
  typedef ssdm_int_sim<_AP_W, _AP_S> Base;







  typedef typename retval<(((_AP_W + 7) / 8) > (8) ? ((_AP_W + 7) / 8) : (8)), _AP_S>::Type RetType;

  static const int width = _AP_W;
  static const bool sign_flag = _AP_S;

  template <int _AP_W2, bool _AP_S2>
  struct RType {
    enum {
      mult_w = _AP_W + _AP_W2,
      mult_s = _AP_S || _AP_S2,
      plus_w =
          ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))) + 1,
      plus_s = _AP_S || _AP_S2,
      minus_w =
          ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))) + 1,
      minus_s = true,
      div_w = _AP_W + _AP_S2,
      div_s = _AP_S || _AP_S2,
      mod_w = ((_AP_W) < (_AP_W2 + (!_AP_S2 && _AP_S)) ? (_AP_W) : (_AP_W2 + (!_AP_S2 && _AP_S))),
      mod_s = _AP_S,
      logic_w = ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))),
      logic_s = _AP_S || _AP_S2
    };


    typedef ap_int_base<mult_w, mult_s> mult_base;
    typedef ap_int_base<plus_w, plus_s> plus_base;
    typedef ap_int_base<minus_w, minus_s> minus_base;
    typedef ap_int_base<logic_w, logic_s> logic_base;
    typedef ap_int_base<div_w, div_s> div_base;
    typedef ap_int_base<mod_w, mod_s> mod_base;
    typedef ap_int_base<_AP_W, _AP_S> arg1_base;

    typedef typename _ap_int_factory<mult_w, mult_s>::type mult;
    typedef typename _ap_int_factory<plus_w, plus_s>::type plus;
    typedef typename _ap_int_factory<minus_w, minus_s>::type minus;
    typedef typename _ap_int_factory<logic_w, logic_s>::type logic;
    typedef typename _ap_int_factory<div_w, div_s>::type div;
    typedef typename _ap_int_factory<mod_w, mod_s>::type mod;
    typedef typename _ap_int_factory<_AP_W, _AP_S>::type arg1;
    typedef bool reduce;
  };





  inline ap_int_base() = default;


  template <int _AP_W2, bool _AP_S2>
                inline ap_int_base(const ap_int_base<_AP_W2, _AP_S2>& op):Base(op.V) {
    Base::V = op.V;
  }


  template <int _AP_W2, bool _AP_S2>
  inline ap_int_base(const volatile ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }
# 220 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h"
  inline ap_int_base(const bool op):Base(op) { Base::V = op; }
  inline ap_int_base(const char op):Base(op) { Base::V = op; }
  inline ap_int_base(const signed char op):Base(op) { Base::V = op; }
  inline ap_int_base(const unsigned char op):Base(op) { Base::V = op; }
  inline ap_int_base(const short op):Base(op) { Base::V = op; }
  inline ap_int_base(const unsigned short op):Base(op) { Base::V = op; }
  inline ap_int_base(const int op):Base(op) { Base::V = op; }
  inline ap_int_base(const unsigned int op):Base(op) { Base::V = op; }
  inline ap_int_base(const long op):Base(op) { Base::V = op; }
  inline ap_int_base(const unsigned long op):Base(op) { Base::V = op; }
  inline ap_int_base(const ap_slong op):Base(op) { Base::V = op; }
  inline ap_int_base(const ap_ulong op):Base(op) { Base::V = op; }




  inline ap_int_base(half op) {
    ap_int_base<_AP_W, _AP_S> t((float)op);
    Base::V = t.V;
  }


  inline ap_int_base(float op) {
    const int BITS = 23 + 8 + 1;
    ap_int_base<BITS, false> reg;
    reg.V = floatToRawBits(op);
    bool is_neg = (reg.V).get_bit((BITS - 1));

    ap_int_base<8 + 1, true> exp = 0;
    exp.V = (reg.V).range((BITS - 2), (23));
    exp = exp - ((1 << (8 - 1)) - 1);

    ap_int_base<23 + 2, true> man;
    man.V = (reg.V).range((23 - 1), (0));

    do { if ((exp == ((unsigned char)(((1 << (8 - 1)) - 1) + 1)) && man.V != 0)) { fprintf((__acrt_iob_func(2)), "WARNING: " "assign NaN to ap integer value"); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);


    man.V = _AP_ROOT_op_set_bit(man.V, 23, 1);


    if ((reg.V & 0x7ffffffful) == 0) {
      Base::V = 0;
    } else {
      int sh_amt = 23 - exp.V;
      if (sh_amt == 0) {
        Base::V = man.V;
      } else if (sh_amt > 0) {
        if (sh_amt < 23 + 2) {
          ap_int_base<23 + 2, true> man_shift;
          man_shift.V = (man.V >> sh_amt);






          Base::V = man_shift.V;
        } else {



            Base::V = 0;
        }
      } else {
        sh_amt = -sh_amt;
        if (sh_amt < _AP_W) {
          Base::V = man.V;
          Base::V <<= sh_amt;
        } else {



          Base::V = 0;
        }
      }
    }
    if (is_neg) *this = -(*this);
  }


  inline ap_int_base(double op) {
    const int BITS = 52 + 11 + 1;
    ap_int_base<BITS, false> reg;
    reg.V = doubleToRawBits(op);
    bool is_neg = (reg.V).get_bit((BITS - 1));

    ap_int_base<11 + 1, true> exp, bias = ((1 << (11 - 1)) - 1);
    exp.V = (reg.V).range((BITS - 2), (52));
    exp = exp - bias;

    ap_int_base<52 + 2, true> man;
    man.V = (reg.V).range((52 - 1), (0));

    do { if ((exp == ((unsigned char)(((1 << (11 - 1)) - 1) + 1)) && man.V != 0)) { fprintf((__acrt_iob_func(2)), "WARNING: " "assign NaN to ap integer value"); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);


    man.V = _AP_ROOT_op_set_bit(man.V, 52, 1);


    if ((reg.V & 0x7fffffffffffffffull) == 0) {
      Base::V = 0;
    } else {
      int sh_amt = 52 - exp.V;
      if (sh_amt == 0) {
        Base::V = man.V;
      } else if (sh_amt > 0) {
        if (sh_amt < 52 + 2) {
          ap_int_base<23 + 2, true> man_shift;
          man_shift.V = (man.V >> sh_amt);






          Base::V = man_shift.V;
        } else {



           Base::V = 0;
        }
      } else {
        sh_amt = -sh_amt;
        if (sh_amt < _AP_W) {
          Base::V = man.V;
          Base::V <<= sh_amt;
        } else {



          Base::V = 0;
        }
      }
    }
    if (is_neg) *this = -(*this);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline ap_int_base(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    op.checkOverflowCsimFix(_AP_W, _AP_S);
    Base::V = op.to_ap_int_base().V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline ap_int_base(const ap_range_ref<_AP_W2, _AP_S2>& ref) {
    Base::V = (ref.get()).V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline ap_int_base(const ap_bit_ref<_AP_W2, _AP_S2>& ref) {
    Base::V = ref.operator bool();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline ap_int_base(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref) {
    const ap_int_base<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>::_AP_WR,
                      false>
        tmp = ref.get();
    Base::V = tmp.V;
  }




  inline ap_int_base(const char* s, signed char rd = 0) {
    (void) ((!!((0 != s) && ("ap_int<> is being initialized with a NULL pointer which is not a valid C string"))) || (_assert("(0 != s) && (\"ap_int<> is being initialized with a NULL pointer which is not a valid C string\")","C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h",390),0));
    if (rd == 0)
      rd = guess_radix(s);
    unsigned int length = strlen(s);
    do { if ((length == 0)) { fprintf((__acrt_iob_func(2)), "WARNING: " "ap_int<> is being initialized with an empty C string, which can result in undefined behavior during simulation/synthesis"); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);
    Base::V.fromString(s, length, rd);
  }
# 413 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline ap_int_base(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    Base::V = (val.get()).V;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline ap_int_base(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    Base::V = val.operator bool();
  }

  inline ap_int_base read() volatile {

    ap_int_base ret;
    ret.V = Base::V;
    return ret;
  }

  inline void write(const ap_int_base<_AP_W, _AP_S>& op2) volatile {

    *((volatile typename Base::DataType *)(&(Base::V))) = op2.V;
  }


  template <int _AP_W2, bool _AP_S2>
  inline void operator=(
      const volatile ap_int_base<_AP_W2, _AP_S2>& op2) volatile {
    *((volatile typename Base::DataType *)(&(Base::V))) = op2.V;
  }

  inline void operator=(
      const volatile ap_int_base<_AP_W, _AP_S>& op2) volatile {
    *((volatile typename Base::DataType *)(&(Base::V))) = op2.V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline void operator=(const ap_int_base<_AP_W2, _AP_S2>& op2) volatile {
    *((volatile typename Base::DataType *)(&(Base::V))) = op2.V;
  }

  inline void operator=(const ap_int_base<_AP_W, _AP_S>& op2) volatile {
    *((volatile typename Base::DataType *)(&(Base::V))) = op2.V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline ap_int_base& operator=(
      const volatile ap_int_base<_AP_W2, _AP_S2>& op2) {
    Base::V = op2.V;
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
                inline ap_int_base& operator=(const ap_int_base<_AP_W2, _AP_S2>& op2) {
    Base::V = op2.V;
    return *this;
  }

  inline ap_int_base& operator=(const volatile ap_int_base<_AP_W, _AP_S>& op2) {
    Base::V = op2.V;
    return *this;
  }


  ap_int_base& operator=(const ap_int_base<_AP_W, _AP_S>& op2) = default;
# 493 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h"
  inline ap_int_base& operator=(bool op) { Base::V = op; return *this; }
  inline ap_int_base& operator=(char op) { Base::V = op; return *this; }
  inline ap_int_base& operator=(signed char op) { Base::V = op; return *this; }
  inline ap_int_base& operator=(unsigned char op) { Base::V = op; return *this; }
  inline ap_int_base& operator=(short op) { Base::V = op; return *this; }
  inline ap_int_base& operator=(unsigned short op) { Base::V = op; return *this; }
  inline ap_int_base& operator=(int op) { Base::V = op; return *this; }
  inline ap_int_base& operator=(unsigned int op) { Base::V = op; return *this; }
  inline ap_int_base& operator=(long op) { Base::V = op; return *this; }
  inline ap_int_base& operator=(unsigned long op) { Base::V = op; return *this; }
  inline ap_int_base& operator=(ap_slong op) { Base::V = op; return *this; }
  inline ap_int_base& operator=(ap_ulong op) { Base::V = op; return *this; }



  template <int _AP_W2, bool _AP_S2>
  inline ap_int_base& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& op2) {
    Base::V = (bool)op2;
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline ap_int_base& operator=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    Base::V = (ap_int_base<_AP_W2, false>(op2)).V;
    return *this;
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline ap_int_base& operator=(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op2) {
    Base::V = op2.get().V;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline ap_int_base& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = op.to_ap_int_base().V;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline ap_int_base& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = (bool)op;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline ap_int_base& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = ((const ap_int_base<_AP_W2, false>)(op)).V;
    return *this;
  }





                inline operator RetType() const { return (RetType)(Base::V); }




                inline bool to_bool() const { return (bool)(Base::V); }
                inline char to_char() const { return (char)(Base::V); }
                inline signed char to_schar() const { return (signed char)(Base::V); }
                inline unsigned char to_uchar() const { return (unsigned char)(Base::V); }
                inline short to_short() const { return (short)(Base::V); }
                inline unsigned short to_ushort() const { return (unsigned short)(Base::V); }
                inline int to_int() const { return (int)(Base::V); }
                inline unsigned to_uint() const { return (unsigned)(Base::V); }
                inline long to_long() const { return (long)(Base::V); }
                inline unsigned long to_ulong() const { return (unsigned long)(Base::V); }
                inline ap_slong to_int64() const { return (ap_slong)(Base::V); }
                inline ap_ulong to_uint64() const { return (ap_ulong)(Base::V); }
  inline half to_half() const { return (float)(Base::V); }
                inline float to_float() const { return (float)(Base::V); }
                inline double to_double() const { return (double)(Base::V); }
# 598 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h"
  inline int length() const volatile { return _AP_W; }
                inline int length() const { return _AP_W; }


                inline bool iszero() const { return Base::V == 0; }


                inline bool is_zero() const { return Base::V == 0; }


                      inline bool sign() const {
    if (_AP_S &&
        (Base::V).get_bit((_AP_W - 1)))
      return true;
    else
      return false;
  }


  inline void clear(int i) {
    (void) ((!!((i >= 0 && i < _AP_W) && ("position out of range"))) || (_assert("(i >= 0 && i < _AP_W) && (\"position out of range\")","C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h",618),0));
    Base::V = _AP_ROOT_op_set_bit(Base::V, i, 0);
  }


  inline void invert(int i) {
    (void) ((!!((i >= 0 && i < _AP_W) && ("position out of range"))) || (_assert("(i >= 0 && i < _AP_W) && (\"position out of range\")","C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h",624),0));
    bool val = (Base::V).get_bit((i));
    if (val)
      Base::V = _AP_ROOT_op_set_bit(Base::V, i, 0);
    else
      Base::V = _AP_ROOT_op_set_bit(Base::V, i, 1);
  }

  inline bool test(int i) const {
    (void) ((!!((i >= 0 && i < _AP_W) && ("position out of range"))) || (_assert("(i >= 0 && i < _AP_W) && (\"position out of range\")","C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h",633),0));
    return (Base::V).get_bit((i));
  }


                inline ap_int_base& get() { return *this; }


  inline void set(int i) {
    (void) ((!!((i >= 0 && i < _AP_W) && ("position out of range"))) || (_assert("(i >= 0 && i < _AP_W) && (\"position out of range\")","C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h",642),0));
    Base::V = _AP_ROOT_op_set_bit(Base::V, i, 1);
  }


  inline void set(int i, bool v) {
    (void) ((!!((i >= 0 && i < _AP_W) && ("position out of range"))) || (_assert("(i >= 0 && i < _AP_W) && (\"position out of range\")","C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h",648),0));
    Base::V = _AP_ROOT_op_set_bit(Base::V, i, v);
  }



  inline ap_int_base& lrotate(int n) {
    (void) ((!!((n >= 0 && n < _AP_W) && ("shift value out of range"))) || (_assert("(n >= 0 && n < _AP_W) && (\"shift value out of range\")","C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h",655),0));






    Base::V.lrotate(n);

    return *this;
  }



  inline ap_int_base& rrotate(int n) {
    (void) ((!!((n >= 0 && n < _AP_W) && ("shift value out of range"))) || (_assert("(n >= 0 && n < _AP_W) && (\"shift value out of range\")","C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h",670),0));






    Base::V.rrotate(n);

    return *this;
  }



  inline ap_int_base& reverse() {
    Base::V = (Base::V).range((0), (_AP_W - 1));
    return *this;
  }


  inline void set_bit(int i, bool v) {
    Base::V = _AP_ROOT_op_set_bit(Base::V, i, v);
  }


  inline bool get_bit(int i) const {
    return (bool)(Base::V).get_bit((i));
  }


  inline void b_not() { Base::V = ~Base::V; }

  template<typename T>
                inline void checkOverflowBaseC(T val) {
# 769 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h"
    (void)val;

    return;
  }

                inline bool checkOverflowCsim(int _ap_w2, bool _ap_s2,
          bool print = true) const {
# 819 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h"
      (void)_ap_w2;
      (void)_ap_s2;
      (void)print;

      return 0;
  }
# 853 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h"
  template <int _AP_W2, bool _AP_S2> inline ap_int_base& operator *=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V *= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline ap_int_base& operator +=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V += op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline ap_int_base& operator -=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V -= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline ap_int_base& operator /=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V /= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline ap_int_base& operator %=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V %= op2.V; return *this; }
# 871 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h"
  template <int _AP_W2, bool _AP_S2> inline ap_int_base& operator &=(const ap_int_base<_AP_W2, _AP_S2>& op2) { do { if (((_AP_W != _AP_W2))) { fprintf((__acrt_iob_func(2)), "WARNING: " "Bitsize mismatch for ap_[u]int" "&=" "ap_[u]int."); fprintf((__acrt_iob_func(2)), "\n"); } } while (0); Base::V &= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline ap_int_base& operator |=(const ap_int_base<_AP_W2, _AP_S2>& op2) { do { if (((_AP_W != _AP_W2))) { fprintf((__acrt_iob_func(2)), "WARNING: " "Bitsize mismatch for ap_[u]int" "|=" "ap_[u]int."); fprintf((__acrt_iob_func(2)), "\n"); } } while (0); Base::V |= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline ap_int_base& operator ^=(const ap_int_base<_AP_W2, _AP_S2>& op2) { do { if (((_AP_W != _AP_W2))) { fprintf((__acrt_iob_func(2)), "WARNING: " "Bitsize mismatch for ap_[u]int" "^=" "ap_[u]int."); fprintf((__acrt_iob_func(2)), "\n"); } } while (0); Base::V ^= op2.V; return *this; }





  inline ap_int_base& operator++() {
    operator+=((ap_int_base<1, false>)1);
    return *this;
  }
  inline ap_int_base& operator--() {
    operator-=((ap_int_base<1, false>)1);
    return *this;
  }




  inline const typename RType<_AP_W,_AP_S>::arg1 operator++(int) {
    ap_int_base t = *this;
    operator+=((ap_int_base<1, false>)1);
    return t;
  }
  inline const typename RType<_AP_W,_AP_S>::arg1 operator--(int) {
    ap_int_base t = *this;
    operator-=((ap_int_base<1, false>)1);
    return t;
  }




                inline typename RType<_AP_W,_AP_S>::arg1 operator+() const { return *this; }


                inline typename RType<1, false>::minus operator-() const {
    return ap_int_base<1, false>(0) - *this;
  }




                inline bool operator!() const { return Base::V == 0; }





                inline typename RType<_AP_W,_AP_S>::arg1 operator~() const {
    ap_int_base<_AP_W, _AP_S> r(0);
    r.V = ~Base::V;
    return r;
  }




  template <int _AP_W2>
                      inline typename RType<_AP_W,_AP_S>::arg1 operator<<(const ap_int_base<_AP_W2, true>& op2) const {
    bool isNeg = (op2.V).get_bit((_AP_W2 - 1));
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator>>(sh);
    } else
      return operator<<(sh);
  }

  template <int _AP_W2>
                      inline typename RType<_AP_W,_AP_S>::arg1 operator<<(const ap_int_base<_AP_W2, false>& op2) const {
    ap_int_base r(0);
    r.V = Base::V << op2.to_uint();
    return r;
  }

  template <int _AP_W2>
                      inline typename RType<_AP_W,_AP_S>::arg1 operator>>(const ap_int_base<_AP_W2, true>& op2) const {
    bool isNeg = (op2.V).get_bit((_AP_W2 - 1));
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator<<(sh);
    }
    return operator>>(sh);
  }

  template <int _AP_W2>
                      inline typename RType<_AP_W,_AP_S>::arg1 operator>>(const ap_int_base<_AP_W2, false>& op2) const {
    ap_int_base r(0);
    r.V = Base::V >> op2.to_uint();
    return r;
  }
# 982 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h"
  template <int _AP_W2>
                      inline ap_int_base& operator<<=(const ap_int_base<_AP_W2, true>& op2) {
    bool isNeg = (op2.V).get_bit((_AP_W2 - 1));
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator>>=(sh);
    } else
      return operator<<=(sh);
  }

  template <int _AP_W2>
                      inline ap_int_base& operator<<=(const ap_int_base<_AP_W2, false>& op2) {
    Base::V <<= op2.to_uint();
    return *this;
  }

  template <int _AP_W2>
                      inline ap_int_base& operator>>=(const ap_int_base<_AP_W2, true>& op2) {
    bool isNeg = (op2.V).get_bit((_AP_W2 - 1));
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator<<=(sh);
    }
    return operator>>=(sh);
  }

  template <int _AP_W2>
                      inline ap_int_base& operator>>=(const ap_int_base<_AP_W2, false>& op2) {
    Base::V >>= op2.to_uint();
    return *this;
  }
# 1031 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h"
  template <int _AP_W2, bool _AP_S2>
                inline bool operator==(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V == op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
                inline bool operator!=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return !(Base::V == op2.V);
  }
  template <int _AP_W2, bool _AP_S2>
                inline bool operator<(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V < op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
                inline bool operator>=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V >= op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
                inline bool operator>(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V > op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
                inline bool operator<=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V <= op2.V;
  }




  inline ap_range_ref<_AP_W, _AP_S> range(int Hi, int Lo) {
    do { if ((Hi >= _AP_W)) { fprintf((__acrt_iob_func(2)), "ERROR: " "Hi(%d)out of bound(%d) in range()", Hi, _AP_W); fprintf((__acrt_iob_func(2)), "\n"); abort(); } } while (0);
    do { if ((Lo >= _AP_W)) { fprintf((__acrt_iob_func(2)), "ERROR: " "Lo(%d)out of bound(%d) in range()", Lo, _AP_W); fprintf((__acrt_iob_func(2)), "\n"); abort(); } } while (0);
    return ap_range_ref<_AP_W, _AP_S>(this, Hi, Lo);
  }


  inline ap_range_ref<_AP_W, _AP_S> range(int Hi, int Lo) const {
    do { if ((Hi >= _AP_W)) { fprintf((__acrt_iob_func(2)), "ERROR: " "Hi(%d)out of bound(%d) in range()", Hi, _AP_W); fprintf((__acrt_iob_func(2)), "\n"); abort(); } } while (0);
    do { if ((Lo >= _AP_W)) { fprintf((__acrt_iob_func(2)), "ERROR: " "Lo(%d)out of bound(%d) in range()", Lo, _AP_W); fprintf((__acrt_iob_func(2)), "\n"); abort(); } } while (0);
    return ap_range_ref<_AP_W, _AP_S>(const_cast<ap_int_base*>(this), Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline ap_range_ref<_AP_W, _AP_S> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline ap_range_ref<_AP_W, _AP_S> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline ap_range_ref<_AP_W, _AP_S> range() {
    return this->range(_AP_W - 1, 0);
  }

  inline ap_range_ref<_AP_W, _AP_S> range() const {
    return this->range(_AP_W - 1, 0);
  }

  inline ap_range_ref<_AP_W, _AP_S> operator()(int Hi, int Lo) {
    return this->range(Hi, Lo);
  }

  inline ap_range_ref<_AP_W, _AP_S> operator()(int Hi, int Lo) const {
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline ap_range_ref<_AP_W, _AP_S> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline ap_range_ref<_AP_W, _AP_S> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }
# 1140 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h"
  inline ap_bit_ref<_AP_W, _AP_S> operator[](int index) {
    (void) ((!!((index >= 0) && ("Attempting to read bit with negative index"))) || (_assert("(index >= 0) && (\"Attempting to read bit with negative index\")","C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h",1141),0));
    (void) ((!!((index < _AP_W) && ("Attempting to read bit beyond MSB"))) || (_assert("(index < _AP_W) && (\"Attempting to read bit beyond MSB\")","C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h",1142),0));
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index);
    return bvh;
  }

  template <int _AP_W2, bool _AP_S2>
  inline ap_bit_ref<_AP_W, _AP_S> operator[](
      const ap_int_base<_AP_W2, _AP_S2>& index) {
    (void) ((!!((index >= 0) && ("Attempting to read bit with negative index"))) || (_assert("(index >= 0) && (\"Attempting to read bit with negative index\")","C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h",1150),0));
    (void) ((!!((index < _AP_W) && ("Attempting to read bit beyond MSB"))) || (_assert("(index < _AP_W) && (\"Attempting to read bit beyond MSB\")","C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h",1151),0));
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index.to_int());
    return bvh;
  }

  inline bool operator[](int index) const {
    (void) ((!!((index >= 0) && ("Attempting to read bit with negative index"))) || (_assert("(index >= 0) && (\"Attempting to read bit with negative index\")","C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h",1157),0));
    (void) ((!!((index < _AP_W) && ("Attempting to read bit beyond MSB"))) || (_assert("(index < _AP_W) && (\"Attempting to read bit beyond MSB\")","C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h",1158),0));
    ap_bit_ref<_AP_W, _AP_S> br(this, index);
    return br.to_bool();
  }
  template <int _AP_W2, bool _AP_S2>
  inline bool operator[](const ap_int_base<_AP_W2, _AP_S2>& index) const {
    (void) ((!!((index < _AP_W) && ("Attempting to read bit beyond MSB"))) || (_assert("(index < _AP_W) && (\"Attempting to read bit beyond MSB\")","C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h",1164),0));
    ap_bit_ref<_AP_W, _AP_S> br(this, index.to_int());
    return br.to_bool();
  }

  inline ap_bit_ref<_AP_W, _AP_S> bit(int index) {
    (void) ((!!((index >= 0) && ("Attempting to read bit with negative index"))) || (_assert("(index >= 0) && (\"Attempting to read bit with negative index\")","C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h",1170),0));
    (void) ((!!((index < _AP_W) && ("Attempting to read bit beyond MSB"))) || (_assert("(index < _AP_W) && (\"Attempting to read bit beyond MSB\")","C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h",1171),0));
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index);
    return bvh;
  }
  template <int _AP_W2, bool _AP_S2>
  inline ap_bit_ref<_AP_W, _AP_S> bit(
      const ap_int_base<_AP_W2, _AP_S2>& index) {
    (void) ((!!((index >= 0) && ("Attempting to read bit with negative index"))) || (_assert("(index >= 0) && (\"Attempting to read bit with negative index\")","C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h",1178),0));
    (void) ((!!((index < _AP_W) && ("Attempting to read bit beyond MSB"))) || (_assert("(index < _AP_W) && (\"Attempting to read bit beyond MSB\")","C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h",1179),0));
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index.to_int());
    return bvh;
  }

  inline bool bit(int index) const {
    (void) ((!!((index >= 0) && ("Attempting to read bit with negative index"))) || (_assert("(index >= 0) && (\"Attempting to read bit with negative index\")","C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h",1185),0));
    (void) ((!!((index < _AP_W) && ("Attempting to read bit beyond MSB"))) || (_assert("(index < _AP_W) && (\"Attempting to read bit beyond MSB\")","C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h",1186),0));
    ap_bit_ref<_AP_W, _AP_S> br(this, index);
    return br.to_bool();
  }

  template <int _AP_W2, bool _AP_S2>
  inline bool bit(const ap_int_base<_AP_W2, _AP_S2>& index) const {
    return bit(index.to_int());
  }
# 1207 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h"
                inline int countLeadingZeros() const {



    return (Base::V).countLeadingZeros();

  }

  template <int _AP_W2, bool _AP_S2>
  inline ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  concat(const ap_int_base<_AP_W2, _AP_S2>& a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  concat(ap_int_base<_AP_W2, _AP_S2>& a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline
              ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline
              ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this), a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, a2);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(*this,
                                                                         a2);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline ap_concat_ref<
      _AP_W, ap_int_base, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                &a2) const {
    return ap_concat_ref<
        _AP_W, ap_int_base, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline ap_concat_ref<
      _AP_W, ap_int_base, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        _AP_W, ap_int_base, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this,
                                                                       a2);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline
              ap_concat_ref<_AP_W, ap_int_base, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &a2) const {
    return ap_concat_ref<
        _AP_W, ap_int_base, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline
              ap_concat_ref<_AP_W, ap_int_base, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(
          af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        _AP_W, ap_int_base, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this, a2);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator&(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this & a2.get();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator|(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this | a2.get();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator^(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this ^ a2.get();
  }

  template <int _AP_W3>
  inline void set(const ap_int_base<_AP_W3, false>& val) {
    Base::V = val.V;
  }





  inline bool and_reduce() const { return (Base::V).and_reduce(); }
  inline bool nand_reduce() const { return (Base::V).nand_reduce(); }
  inline bool or_reduce() const { return (Base::V).or_reduce(); }
  inline bool nor_reduce() const { return !((Base::V).or_reduce()); }
  inline bool xor_reduce() const { return (Base::V).xor_reduce(); }
  inline bool xnor_reduce() const {
    return !((Base::V).xor_reduce());
  }





  std::string to_string(signed char rd = 2, bool sign = _AP_S) const {


    if (rd == 2) sign = false;
    return (Base::V).to_string(rd, sign);
  }







};




template <int _AP_W, bool _AP_S>
inline std::ostream& operator<<(std::ostream& os,
                                const ap_int_base<_AP_W, _AP_S>& x) {
  std::ios_base::fmtflags ff = std::cout.flags();
  if (ff & std::cout.hex) {
    os << x.to_string(16);
  } else if (ff & std::cout.oct) {
    os << x.to_string(8);
  } else {
    os << x.to_string(10);
  }
  return os;
}



template <int _AP_W, bool _AP_S>
inline std::istream& operator>>(std::istream& in,
                                ap_int_base<_AP_W, _AP_S>& op) {
  std::string str;
  in >> str;
  const std::ios_base::fmtflags basefield = in.flags() & std::ios_base::basefield;
  unsigned radix = (basefield == std::ios_base::dec) ? 0 : (
                     (basefield == std::ios_base::oct) ? 8 : (
                       (basefield == std::ios_base::hex) ? 16 : 0));
  op = ap_int_base<_AP_W, _AP_S>(str.c_str(), radix);
  return in;
}
# 1477 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::mult_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::mult_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::mult_base ret(0); ret.V = lhs.V * rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::plus_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::plus_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::plus_base ret(0); ret.V = lhs.V + rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::minus_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::minus_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::minus_base ret(0); ret.V = lhs.V - rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base ret(0); ret.V = lhs.V & rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base ret(0); ret.V = lhs.V | rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base ret(0); ret.V = lhs.V ^ rhs.V; return ret; }
# 1496 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::div_base ret(0); ret.V = op.V / op2.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::mod_base ret(0); ret.V = op.V % op2.V; return ret; }
# 1524 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h"
template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline PTR_TYPE* operator +(PTR_TYPE* i_op, const ap_int_base<_AP_W, _AP_S>& op) { ap_slong op2 = op.to_int64(); return i_op + op2; } template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline PTR_TYPE* operator +(const ap_int_base<_AP_W, _AP_S>& op, PTR_TYPE* i_op) { ap_slong op2 = op.to_int64(); return op2 + i_op; }
template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline PTR_TYPE* operator -(PTR_TYPE* i_op, const ap_int_base<_AP_W, _AP_S>& op) { ap_slong op2 = op.to_int64(); return i_op - op2; } template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline PTR_TYPE* operator -(const ap_int_base<_AP_W, _AP_S>& op, PTR_TYPE* i_op) { ap_slong op2 = op.to_int64(); return op2 - i_op; }
# 1553 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline float operator *(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline float operator *(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline float operator /(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline float operator /(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline float operator +(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline float operator +(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline float operator -(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline float operator -(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
template <int _AP_W, bool _AP_S> inline double operator *(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline double operator *(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline double operator /(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline double operator /(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline double operator +(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline double operator +(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline double operator -(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline double operator -(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
# 1578 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline half operator *(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline half operator *(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline half operator /(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline half operator /(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline half operator +(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline half operator +(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline half operator -(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline half operator -(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
# 1610 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mult operator *(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op * ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::plus operator +(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op + ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::minus operator -(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op - ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::div operator /(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op / ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mod operator %(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op % ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator &(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op & ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator |(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op | ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator ^(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op ^ ap_int_base<1, false>(i_op); }
template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mult operator *(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op * ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::plus operator +(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op + ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::minus operator -(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op - ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::div operator /(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op / ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mod operator %(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op % ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator &(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op & ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator |(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op | ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator ^(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op ^ ap_int_base<8, CHAR_IS_SIGNED>(i_op); }
template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mult operator *(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op * ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::plus operator +(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op + ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::minus operator -(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op - ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::div operator /(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op / ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mod operator %(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op % ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator &(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op & ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator |(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op | ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator ^(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op ^ ap_int_base<8, true>(i_op); }
template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mult operator *(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op * ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::plus operator +(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op + ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::minus operator -(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op - ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::div operator /(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op / ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mod operator %(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op % ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator &(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op & ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator |(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op | ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator ^(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op ^ ap_int_base<8, false>(i_op); }
template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mult operator *(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op * ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::plus operator +(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op + ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::minus operator -(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op - ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::div operator /(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op / ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mod operator %(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op % ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator &(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op & ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator |(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op | ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator ^(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op ^ ap_int_base<_AP_SIZE_short, true>(i_op); }
template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mult operator *(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op * ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::plus operator +(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op + ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::minus operator -(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op - ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::div operator /(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op / ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mod operator %(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op % ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator &(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op & ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator |(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op | ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator ^(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op ^ ap_int_base<_AP_SIZE_short, false>(i_op); }
template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mult operator *(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op * ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::plus operator +(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op + ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::minus operator -(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op - ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::div operator /(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op / ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mod operator %(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op % ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator &(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op & ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator |(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op | ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator ^(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op ^ ap_int_base<_AP_SIZE_int, true>(i_op); }
template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mult operator *(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op * ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::plus operator +(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op + ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::minus operator -(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op - ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::div operator /(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op / ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mod operator %(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op % ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator &(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op & ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator |(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op | ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator ^(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op ^ ap_int_base<_AP_SIZE_int, false>(i_op); }
template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mult operator *(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op * ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::plus operator +(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op + ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::minus operator -(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op - ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::div operator /(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op / ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mod operator %(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op % ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator &(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op & ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator |(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op | ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator ^(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op ^ ap_int_base<_AP_SIZE_long, true>(i_op); }
template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mult operator *(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op * ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::plus operator +(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op + ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::minus operator -(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op - ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::div operator /(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op / ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mod operator %(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op % ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator &(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op & ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator |(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op | ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator ^(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op ^ ap_int_base<_AP_SIZE_long, false>(i_op); }
template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mult operator *(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op * ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::plus operator +(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op + ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::minus operator -(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op - ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::div operator /(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op / ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mod operator %(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op % ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator &(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op & ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator |(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op | ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator ^(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op ^ ap_int_base<_AP_SIZE_ap_slong, true>(i_op); }
template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mult operator *(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op * ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::plus operator +(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op + ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::minus operator -(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op - ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::div operator /(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op / ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mod operator %(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op % ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator &(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op & ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator |(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op | ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator ^(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op ^ ap_int_base<_AP_SIZE_ap_slong, false>(i_op); }
# 1649 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, char op2) { ap_int_base<_AP_W, _AP_S> r(0); if (CHAR_IS_SIGNED) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, char op2) { ap_int_base<_AP_W, _AP_S> r(0); if (CHAR_IS_SIGNED) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, short op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, short op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, int op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, int op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, long op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, long op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
# 1673 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, bool op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, bool op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V >> op2; return r; }
# 1704 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op += ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op -= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op *= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op /= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op %= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op &= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op |= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op ^= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op >>= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op <<= ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op += ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op -= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op *= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op /= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op %= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op &= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op |= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op ^= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op >>= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op <<= ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op += ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op -= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op *= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op /= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op %= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op &= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op |= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op ^= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op >>= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op <<= ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op += ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op -= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op *= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op /= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op %= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op &= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op |= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op ^= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op >>= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op <<= ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op += ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op -= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op *= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op /= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op %= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op &= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op |= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op ^= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op >>= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op <<= ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op += ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op -= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op *= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op /= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op %= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op &= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op |= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op ^= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op >>= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op <<= ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op += ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op -= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op *= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op /= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op %= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op &= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op |= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op ^= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op >>= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op <<= ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op += ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op -= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op *= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op /= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op %= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op &= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op |= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op ^= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op >>= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op <<= ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op += ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op -= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op *= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op /= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op %= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op &= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op |= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op ^= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op >>= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op <<= ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op += ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op -= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op *= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op /= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op %= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op &= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op |= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op ^= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op >>= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op <<= ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op += ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op -= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op *= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op /= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op %= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op &= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op |= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op ^= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op >>= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op <<= ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op += ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op -= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op *= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op /= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op %= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op &= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op |= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op ^= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op >>= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op <<= ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1737 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline half& operator +=( half& op2, ap_int_base<_AP_W, _AP_S>& op) { half op_rt = op.to_half(); return op2 += op_rt; } template <int _AP_W, bool _AP_S> inline half& operator -=( half& op2, ap_int_base<_AP_W, _AP_S>& op) { half op_rt = op.to_half(); return op2 -= op_rt; } template <int _AP_W, bool _AP_S> inline half& operator *=( half& op2, ap_int_base<_AP_W, _AP_S>& op) { half op_rt = op.to_half(); return op2 *= op_rt; } template <int _AP_W, bool _AP_S> inline half& operator /=( half& op2, ap_int_base<_AP_W, _AP_S>& op) { half op_rt = op.to_half(); return op2 /= op_rt; }
template <int _AP_W, bool _AP_S> inline float& operator +=( float& op2, ap_int_base<_AP_W, _AP_S>& op) { float op_rt = op.to_float(); return op2 += op_rt; } template <int _AP_W, bool _AP_S> inline float& operator -=( float& op2, ap_int_base<_AP_W, _AP_S>& op) { float op_rt = op.to_float(); return op2 -= op_rt; } template <int _AP_W, bool _AP_S> inline float& operator *=( float& op2, ap_int_base<_AP_W, _AP_S>& op) { float op_rt = op.to_float(); return op2 *= op_rt; } template <int _AP_W, bool _AP_S> inline float& operator /=( float& op2, ap_int_base<_AP_W, _AP_S>& op) { float op_rt = op.to_float(); return op2 /= op_rt; }
template <int _AP_W, bool _AP_S> inline double& operator +=( double& op2, ap_int_base<_AP_W, _AP_S>& op) { double op_rt = op.to_double(); return op2 += op_rt; } template <int _AP_W, bool _AP_S> inline double& operator -=( double& op2, ap_int_base<_AP_W, _AP_S>& op) { double op_rt = op.to_double(); return op2 -= op_rt; } template <int _AP_W, bool _AP_S> inline double& operator *=( double& op2, ap_int_base<_AP_W, _AP_S>& op) { double op_rt = op.to_double(); return op2 *= op_rt; } template <int _AP_W, bool _AP_S> inline double& operator /=( double& op2, ap_int_base<_AP_W, _AP_S>& op) { double op_rt = op.to_double(); return op2 /= op_rt; }
# 1765 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline bool operator >(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline bool operator >(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline bool operator <(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator >=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op <= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator ==(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator !=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op != ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline bool operator >(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) > op; } template <int _AP_W, bool _AP_S> inline bool operator >(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) < op; } template <int _AP_W, bool _AP_S> inline bool operator <(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline bool operator >=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op <= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline bool operator ==(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) == op; } template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline bool operator !=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) != op; } template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op != ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline bool operator >(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline bool operator >(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline bool operator <(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator >=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op <= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator ==(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator !=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op != ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline bool operator >(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator >=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op <= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator ==(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator !=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op != ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline bool operator >(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline bool operator >(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline bool operator <(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator >=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op <= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator ==(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator !=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op != ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline bool operator >(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator >=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op <= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator ==(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator !=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op != ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline bool operator >(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline bool operator >(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline bool operator <(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator >=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op <= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator ==(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator !=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op != ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline bool operator >(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator >=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op <= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator ==(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator !=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op != ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline bool operator >(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline bool operator >(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline bool operator <(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator >=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op <= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator ==(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator !=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op != ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline bool operator >(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator >=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op <= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator ==(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator !=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op != ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline bool operator >(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline bool operator >(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline bool operator <(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator >=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator ==(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator !=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op != ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline bool operator >(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline bool operator >(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline bool operator <(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator >=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator ==(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator !=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op != ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1802 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h"
  template <int _AP_W, bool _AP_S> inline bool operator >(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() > op2 ; } template <int _AP_W, bool _AP_S> inline bool operator >(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 > op2.to_double() ; } template <int _AP_W, bool _AP_S> inline bool operator >(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() > op2 ; } template <int _AP_W, bool _AP_S> inline bool operator >(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 > op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline bool operator <(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() < op2 ; } template <int _AP_W, bool _AP_S> inline bool operator <(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 < op2.to_double() ; } template <int _AP_W, bool _AP_S> inline bool operator <(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() < op2 ; } template <int _AP_W, bool _AP_S> inline bool operator <(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 < op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() >= op2 ; } template <int _AP_W, bool _AP_S> inline bool operator >=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 >= op2.to_double() ; } template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() >= op2 ; } template <int _AP_W, bool _AP_S> inline bool operator >=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 >= op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() <= op2 ; } template <int _AP_W, bool _AP_S> inline bool operator <=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 <= op2.to_double() ; } template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() <= op2 ; } template <int _AP_W, bool _AP_S> inline bool operator <=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 <= op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() == op2 ; } template <int _AP_W, bool _AP_S> inline bool operator ==(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 == op2.to_double() ; } template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() == op2 ; } template <int _AP_W, bool _AP_S> inline bool operator ==(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 == op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() != op2 ; } template <int _AP_W, bool _AP_S> inline bool operator !=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 != op2.to_double() ; } template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() != op2 ; } template <int _AP_W, bool _AP_S> inline bool operator !=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 != op2.to_double() ; }
# 1832 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) + op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 + ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) - op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 - ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) * op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 * ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) / op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 / ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) % op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 % ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) & op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 & ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) | op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 | ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) ^ op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 ^ ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) >> op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 >> ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) << op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 << ap_int_base<_AP_W2, false>(op2); }
# 1863 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_int_base<_AP_W1, _AP_S1>& operator +=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 += ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_range_ref<_AP_W1, _AP_S1>& operator +=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp += op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_int_base<_AP_W1, _AP_S1>& operator -=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 -= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_range_ref<_AP_W1, _AP_S1>& operator -=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp -= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_int_base<_AP_W1, _AP_S1>& operator *=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 *= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_range_ref<_AP_W1, _AP_S1>& operator *=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp *= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_int_base<_AP_W1, _AP_S1>& operator /=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 /= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_range_ref<_AP_W1, _AP_S1>& operator /=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp /= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_int_base<_AP_W1, _AP_S1>& operator %=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 %= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_range_ref<_AP_W1, _AP_S1>& operator %=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp %= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_int_base<_AP_W1, _AP_S1>& operator >>=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 >>= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_range_ref<_AP_W1, _AP_S1>& operator >>=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp >>= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_int_base<_AP_W1, _AP_S1>& operator <<=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 <<= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_range_ref<_AP_W1, _AP_S1>& operator <<=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp <<= op2; op1 = tmp; return op1; }
# 1895 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_int_base<_AP_W1, _AP_S1>& operator &=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W2, false> tmp(op2); op1.V &= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_range_ref<_AP_W1, _AP_S1>& operator &=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.V &= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_int_base<_AP_W1, _AP_S1>& operator |=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W2, false> tmp(op2); op1.V |= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_range_ref<_AP_W1, _AP_S1>& operator |=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.V |= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_int_base<_AP_W1, _AP_S1>& operator ^=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W2, false> tmp(op2); op1.V ^= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_range_ref<_AP_W1, _AP_S1>& operator ^=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.V ^= op2.V; op1 = tmp; return op1; }
# 1914 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline bool operator ==(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator ==(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline bool operator ==(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator ==(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline bool operator !=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator !=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline bool operator !=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator !=(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline bool operator >(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator >(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline bool operator >(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator >(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline bool operator >=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator >=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline bool operator >=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator >=(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline bool operator <(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator <(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline bool operator <(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator <(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline bool operator <=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator <=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline bool operator <=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator <=(op2.operator ap_int_base<_AP_W2, false>()); }
# 1941 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::plus operator +(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 + ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) + op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::minus operator -(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 - ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) - op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::mult operator *(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 * ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) * op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::div operator /(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 / ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) / op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::mod operator %(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 % ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) % op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator &(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 & ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) & op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator |(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 | ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) | op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator ^(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 ^ ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) ^ op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::arg1 operator >>(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >> ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) >> op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::arg1 operator <<(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 << ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) << op2; }
# 1972 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_int_base<_AP_W1, _AP_S1>& operator +=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 += ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_bit_ref<_AP_W1, _AP_S1>& operator +=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp += op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_int_base<_AP_W1, _AP_S1>& operator -=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 -= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_bit_ref<_AP_W1, _AP_S1>& operator -=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp -= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_int_base<_AP_W1, _AP_S1>& operator *=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 *= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_bit_ref<_AP_W1, _AP_S1>& operator *=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp *= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_int_base<_AP_W1, _AP_S1>& operator /=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 /= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_bit_ref<_AP_W1, _AP_S1>& operator /=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp /= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_int_base<_AP_W1, _AP_S1>& operator %=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 %= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_bit_ref<_AP_W1, _AP_S1>& operator %=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp %= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_int_base<_AP_W1, _AP_S1>& operator >>=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >>= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_bit_ref<_AP_W1, _AP_S1>& operator >>=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp >>= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_int_base<_AP_W1, _AP_S1>& operator <<=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 <<= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_bit_ref<_AP_W1, _AP_S1>& operator <<=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp <<= op2; op1 = tmp; return op1; }
# 2004 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_int_base<_AP_W1, _AP_S1>& operator &=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op2); op1.V &= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_bit_ref<_AP_W1, _AP_S1>& operator &=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.V &= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_int_base<_AP_W1, _AP_S1>& operator |=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op2); op1.V |= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_bit_ref<_AP_W1, _AP_S1>& operator |=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.V |= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_int_base<_AP_W1, _AP_S1>& operator ^=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op2); op1.V ^= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline ap_bit_ref<_AP_W1, _AP_S1>& operator ^=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.V ^= op2.V; op1 = tmp; return op1; }
# 2023 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline bool operator ==(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 == ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline bool operator ==(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) == op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline bool operator !=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 != ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline bool operator !=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) != op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline bool operator >(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 > ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline bool operator >(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) > op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline bool operator >=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline bool operator >=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) >= op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline bool operator <(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 < ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline bool operator <(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) < op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline bool operator <=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 <= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline bool operator <=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) <= op2; }
# 2130 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_base.h"
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline bool operator ==( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 == op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline bool operator ==( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() == op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline bool operator !=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 != op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline bool operator !=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() != op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline bool operator >( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 > op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline bool operator >( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() > op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline bool operator >=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 >= op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline bool operator >=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() >= op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline bool operator <( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 < op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline bool operator <( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() < op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline bool operator <=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 <= op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline bool operator <=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() <= op2; }





#pragma GCC diagnostic pop
# 12 "C:/Xilinx/Vitis/2024.2/include/ap_int.h" 2
# 1 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_ref.h" 1
# 27 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_ref.h"
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2>
struct ap_concat_ref {
  enum {
    _AP_WR = _AP_W1 + _AP_W2,
  };

  _AP_T1& mbv1;
  _AP_T2& mbv2;

  inline ap_concat_ref(const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& ref)
      : mbv1(ref.mbv1), mbv2(ref.mbv2) {}

  inline ap_concat_ref(_AP_T1& bv1, _AP_T2& bv2) : mbv1(bv1), mbv2(bv2) {}

  template <int _AP_W3, bool _AP_S3>
  inline ap_concat_ref& operator=(const ap_int_base<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> vval(val);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W1, false> Part1;
    Part1.V = (vval.V).range((W_ref1 + W_ref2 - 1), (W_ref2));
    mbv1.set(Part1);
    ap_int_base<_AP_W2, false> Part2;
    Part2.V = (vval.V).range((W_ref2 - 1), (0));
    mbv2.set(Part2);
    return *this;
  }
# 70 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_ref.h"
  inline ap_concat_ref& operator=(bool val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline ap_concat_ref& operator=(char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline ap_concat_ref& operator=(signed char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline ap_concat_ref& operator=(unsigned char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline ap_concat_ref& operator=(short val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline ap_concat_ref& operator=(unsigned short val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline ap_concat_ref& operator=(int val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline ap_concat_ref& operator=(unsigned int val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline ap_concat_ref& operator=(long val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline ap_concat_ref& operator=(unsigned long val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline ap_concat_ref& operator=(ap_slong val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline ap_concat_ref& operator=(ap_ulong val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline ap_concat_ref& operator=(half val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline ap_concat_ref& operator=(float val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline ap_concat_ref& operator=(double val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }





  inline ap_concat_ref& operator=(
      const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, typename _AP_T3, int _AP_W4, typename _AP_T4>
  inline ap_concat_ref& operator=(
      const ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, bool _AP_S3>
  inline ap_concat_ref& operator=(const ap_bit_ref<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }
  template <int _AP_W3, bool _AP_S3>
  inline ap_concat_ref& operator=(const ap_range_ref<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline ap_concat_ref& operator=(
      const af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>& val) {
    return operator=((const ap_int_base<_AP_W3, false>)(val));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline ap_concat_ref& operator=(
      const ap_fixed_base<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&
          val) {
    return operator=(val.to_ap_int_base());
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline ap_concat_ref& operator=(
      const af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>& val) {
    return operator=((ap_ulong)(bool)(val));
  }

  inline operator ap_int_base<_AP_WR, false>() const { return get(); }

  inline operator ap_ulong() const { return get().to_uint64(); }

  template <int _AP_W3, bool _AP_S3>
  inline ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                       ap_range_ref<_AP_W3, _AP_S3> >
  operator,(const ap_range_ref<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_range_ref<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_range_ref<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(*this, a2);
  }

  template <int _AP_W3, bool _AP_S3>
  inline
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(volatile ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(const ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(const volatile ap_int_base<_AP_W3, _AP_S3> &a2) {

    ap_int_base<_AP_W3, _AP_S3> op(a2);
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(op));
  }

  template <int _AP_W3, bool _AP_S3>
  inline ap_concat_ref<_AP_WR, ap_concat_ref, 1, ap_bit_ref<_AP_W3, _AP_S3> >
  operator,(const ap_bit_ref<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, 1, ap_bit_ref<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_bit_ref<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, typename _AP_T3, int _AP_W4, typename _AP_T4>
  inline ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3 + _AP_W4,
                       ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> >
  operator,(const ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3 + _AP_W4,
                         ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> >(
        *this, const_cast<ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4>&>(a2));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline ap_concat_ref<
      _AP_WR, ap_concat_ref, _AP_W3,
      af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >
  operator,(
      const af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> &a2) {
    return ap_concat_ref<
        _AP_WR, ap_concat_ref, _AP_W3,
        af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >(
        *this,
        const_cast<
            af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&>(a2));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline
      ap_concat_ref<_AP_WR, ap_concat_ref, 1,
                    af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >
      operator,(const af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>
                    &a2) {
    return ap_concat_ref<
        _AP_WR, ap_concat_ref, 1,
        af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >(
        *this,
        const_cast<af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&>(
            a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator&(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() & a2;
  }

  template <int _AP_W3, bool _AP_S3>
  inline ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator|(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() | a2;
  }

  template <int _AP_W3, bool _AP_S3>
  inline ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator^(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() ^ a2;
  }
# 258 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_ref.h"
  inline ap_int_base<_AP_WR, false> get() const {
    ap_int_base<_AP_WR, false> tmpVal(0);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W2, false> v2(mbv2);
    ap_int_base<_AP_W1, false> v1(mbv1);
    tmpVal.V = _AP_ROOT_op_set_range(tmpVal.V, 0, W_ref2 - 1, v2.V);
    tmpVal.V =
        _AP_ROOT_op_set_range(tmpVal.V, W_ref2, W_ref1 + W_ref2 - 1, v1.V);
    return tmpVal;
  }

  template <int _AP_W3>
  inline void set(const ap_int_base<_AP_W3, false>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> vval(val);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W1, false> tmpVal1;
    tmpVal1.V = (vval.V).range((W_ref1 + W_ref2 - 1), (W_ref2));
    mbv1.set(tmpVal1);
    ap_int_base<_AP_W2, false> tmpVal2;
    tmpVal2.V = (vval.V).range((W_ref2 - 1), (0));
    mbv2.set(tmpVal2);
  }

  inline int length() const { return mbv1.length() + mbv2.length(); }
};




template <int _AP_W, bool _AP_S>
struct ap_range_ref {



  typedef ap_int_base<_AP_W, _AP_S> ref_type;
  ref_type& d_bv;
  int l_index;
  int h_index;

 public:
  inline ap_range_ref(const ap_range_ref<_AP_W, _AP_S>& ref)
      : d_bv(ref.d_bv), l_index(ref.l_index), h_index(ref.h_index) {}

  inline ap_range_ref(ref_type* bv, int h, int l)
      : d_bv(*bv), l_index(l), h_index(h) {}

  inline ap_range_ref(const ref_type* bv, int h, int l)
      : d_bv(*const_cast<ref_type*>(bv)), l_index(l), h_index(h) {}

  inline operator ap_int_base<_AP_W, false>() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = (d_bv.V).range((h_index), (l_index));
    return ret;
  }

  inline operator ap_ulong() const { return to_uint64(); }
# 339 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_ref.h"
  inline ap_range_ref& operator=(bool val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = _AP_ROOT_op_set_range(d_bv.V, l_index, h_index, tmp.V); return *this; }
  inline ap_range_ref& operator=(char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = _AP_ROOT_op_set_range(d_bv.V, l_index, h_index, tmp.V); return *this; }
  inline ap_range_ref& operator=(signed char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = _AP_ROOT_op_set_range(d_bv.V, l_index, h_index, tmp.V); return *this; }
  inline ap_range_ref& operator=(unsigned char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = _AP_ROOT_op_set_range(d_bv.V, l_index, h_index, tmp.V); return *this; }
  inline ap_range_ref& operator=(short val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = _AP_ROOT_op_set_range(d_bv.V, l_index, h_index, tmp.V); return *this; }
  inline ap_range_ref& operator=(unsigned short val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = _AP_ROOT_op_set_range(d_bv.V, l_index, h_index, tmp.V); return *this; }
  inline ap_range_ref& operator=(int val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = _AP_ROOT_op_set_range(d_bv.V, l_index, h_index, tmp.V); return *this; }
  inline ap_range_ref& operator=(unsigned int val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = _AP_ROOT_op_set_range(d_bv.V, l_index, h_index, tmp.V); return *this; }
  inline ap_range_ref& operator=(long val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = _AP_ROOT_op_set_range(d_bv.V, l_index, h_index, tmp.V); return *this; }
  inline ap_range_ref& operator=(unsigned long val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = _AP_ROOT_op_set_range(d_bv.V, l_index, h_index, tmp.V); return *this; }
  inline ap_range_ref& operator=(ap_slong val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = _AP_ROOT_op_set_range(d_bv.V, l_index, h_index, tmp.V); return *this; }
  inline ap_range_ref& operator=(ap_ulong val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = _AP_ROOT_op_set_range(d_bv.V, l_index, h_index, tmp.V); return *this; }
  inline ap_range_ref& operator=(half val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = _AP_ROOT_op_set_range(d_bv.V, l_index, h_index, tmp.V); return *this; }
  inline ap_range_ref& operator=(float val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = _AP_ROOT_op_set_range(d_bv.V, l_index, h_index, tmp.V); return *this; }
  inline ap_range_ref& operator=(double val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = _AP_ROOT_op_set_range(d_bv.V, l_index, h_index, tmp.V); return *this; }




  inline ap_range_ref& operator=(const char* val) {
    const ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = _AP_ROOT_op_set_range(d_bv.V, l_index, h_index, tmp.V);
    return *this;
  }


  template <int _AP_W2, bool _AP_S2>
  inline ap_range_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = _AP_ROOT_op_set_range(d_bv.V, l_index, h_index, tmp.V);
    return *this;
  }




  inline ap_range_ref& operator=(const ap_range_ref& val) {
    return operator=((const ap_int_base<_AP_W, false>)val);
  }


  template <int _AP_W2, bool _AP_S2>
  inline ap_range_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }


  template <int _AP_W2, bool _AP_S2>
  inline ap_range_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(bool)(val));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline ap_range_ref& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          val) {
    return operator=(val.to_ap_int_base());
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline ap_range_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline ap_range_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((ap_ulong)(bool)(val));
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline ap_range_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& val) {
    return operator=((const ap_int_base<_AP_W2 + _AP_W3, false>)(val));
  }


  template <int _AP_W2, bool _AP_S2>
  inline
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  inline
  ap_concat_ref<_AP_W, ap_range_ref, _AP_W, ap_int_base<_AP_W, _AP_S> >
  operator,(ap_int_base<_AP_W, _AP_S>& a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W,
                         ap_int_base<_AP_W, _AP_S> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(const volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline ap_concat_ref<_AP_W, ap_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline ap_concat_ref<_AP_W, ap_range_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline ap_concat_ref<
      _AP_W, ap_range_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> a2) {
    return ap_concat_ref<
        _AP_W, ap_range_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline
      ap_concat_ref<_AP_W, ap_range_ref, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &a2) {
    return ap_concat_ref<
        _AP_W, ap_range_ref, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline bool operator==(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop == hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline bool operator!=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline bool operator<(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop < hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline bool operator<=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop <= hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline bool operator>(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<=(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline bool operator>=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline ap_range_ref<_AP_W, _AP_S>& operator|=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V |= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline ap_range_ref<_AP_W, _AP_S>& operator|=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V |= op2.V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline ap_range_ref<_AP_W, _AP_S>& operator&=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V &= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline ap_range_ref<_AP_W, _AP_S>& operator&=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V &= op2.V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline ap_range_ref<_AP_W, _AP_S>& operator^=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V ^= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline ap_range_ref<_AP_W, _AP_S>& operator^=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V ^= op2.V;
    return *this;
  };



  inline ap_int_base<_AP_W, false> operator~() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = (d_bv.V).range((h_index), (l_index));
    return (~ret);
  }

  inline ap_int_base<_AP_W, false> operator!() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = (d_bv.V).range((h_index), (l_index));
    return (!ret);
  }

  inline ap_int_base<_AP_W, false> operator+() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = (d_bv.V).range((h_index), (l_index));
    return ret;
  }

  inline ap_int_base<_AP_W, false> operator-() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = (d_bv.V).range((h_index), (l_index));
    return (-ret);
  }


  inline ap_int_base<_AP_W, false> get() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = (d_bv.V).range((h_index), (l_index));
    return ret;
  }

  template <int _AP_W2>
  inline void set(const ap_int_base<_AP_W2, false>& val) {
    d_bv.V = _AP_ROOT_op_set_range(d_bv.V, l_index, h_index, val.V);
  }

  inline int length() const {
    return h_index >= l_index ? h_index - l_index + 1 : l_index - h_index + 1;
  }

  inline int to_int() const {
    return (int)((d_bv.V).range((h_index), (l_index)));
  }

  inline unsigned to_uint() const {
    ap_int_base<_AP_W, false> t;
    t.V = d_bv.V;
    return (unsigned)((t.V).range((h_index), (l_index)));
  }

  inline long to_long() const {
    return (long)((d_bv.V).range((h_index), (l_index)));
  }

  inline unsigned long to_ulong() const {
    ap_int_base<_AP_W, false> t;
    t.V = d_bv.V;
    return (unsigned long)((t.V).range((h_index), (l_index)));
  }

  inline ap_slong to_int64() const {
    return (ap_slong)((d_bv.V).range((h_index), (l_index)));
  }

  inline ap_ulong to_uint64() const {
    ap_int_base<_AP_W, false> t;
    t.V = d_bv.V;
    return (ap_ulong)((t.V).range((h_index), (l_index)));
  }

  inline bool and_reduce() const {
    bool ret = true;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    for (unsigned i = low; i != high+1; ++i) {



      ret &= (d_bv.V).get_bit((i));
    }
    return ret;
  }

  inline bool or_reduce() const {
    bool ret = false;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    for (unsigned i = low; i != high+1; ++i) {



      ret |= (d_bv.V).get_bit((i));
    }
    return ret;
  }

  inline bool xor_reduce() const {
    bool ret = false;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    for (unsigned i = low; i != high+1; ++i) {



      ret ^= (d_bv.V).get_bit((i));
    }
    return ret;
  }

  std::string to_string(signed char radix = 2) const {
    ap_int_base<_AP_W, false> ret;
    ret.V = (d_bv.V).range((h_index), (l_index));
    return ret.to_string(radix);
  }







};




template <int _AP_W, bool _AP_S>
inline std::ostream& operator<<(std::ostream& os,
                                const ap_range_ref<_AP_W, _AP_S>& x) {
  std::ios_base::fmtflags ff = std::cout.flags();
  if (ff & std::cout.hex) {
    os << x.to_string(16);
  } else if (ff & std::cout.oct) {
    os << x.to_string(8);
  } else {
    os << x.to_string(10);
  }
  return os;
}



template <int _AP_W, bool _AP_S>
inline std::istream& operator>>(std::istream& in,
                                ap_range_ref<_AP_W, _AP_S>& op) {
  std::string str;
  in >> str;
  op = ap_int_base<_AP_W, _AP_S>(str.c_str());
  return in;
}






template <int _AP_W, bool _AP_S>
struct ap_bit_ref {



  typedef ap_int_base<_AP_W, _AP_S> ref_type;
  ref_type& d_bv;
  int d_index;

 public:

  inline ap_bit_ref(const ap_bit_ref<_AP_W, _AP_S>& ref)
      : d_bv(ref.d_bv), d_index(ref.d_index) {}

  inline ap_bit_ref(ref_type* bv, int index = 0) : d_bv(*bv), d_index(index) {}

  inline ap_bit_ref(const ref_type* bv, int index = 0)
      : d_bv(*const_cast<ref_type*>(bv)), d_index(index) {}

  inline operator bool() const { return (d_bv.V).get_bit((d_index)); }
  inline bool to_bool() const { return (d_bv.V).get_bit((d_index)); }
# 798 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_ref.h"
  inline ap_bit_ref& operator=(bool val) { d_bv.V = _AP_ROOT_op_set_bit(d_bv.V, d_index, val); return *this; }
  inline ap_bit_ref& operator=(char val) { d_bv.V = _AP_ROOT_op_set_bit(d_bv.V, d_index, val); return *this; }
  inline ap_bit_ref& operator=(signed char val) { d_bv.V = _AP_ROOT_op_set_bit(d_bv.V, d_index, val); return *this; }
  inline ap_bit_ref& operator=(unsigned char val) { d_bv.V = _AP_ROOT_op_set_bit(d_bv.V, d_index, val); return *this; }
  inline ap_bit_ref& operator=(short val) { d_bv.V = _AP_ROOT_op_set_bit(d_bv.V, d_index, val); return *this; }
  inline ap_bit_ref& operator=(unsigned short val) { d_bv.V = _AP_ROOT_op_set_bit(d_bv.V, d_index, val); return *this; }
  inline ap_bit_ref& operator=(int val) { d_bv.V = _AP_ROOT_op_set_bit(d_bv.V, d_index, val); return *this; }
  inline ap_bit_ref& operator=(unsigned int val) { d_bv.V = _AP_ROOT_op_set_bit(d_bv.V, d_index, val); return *this; }
  inline ap_bit_ref& operator=(long val) { d_bv.V = _AP_ROOT_op_set_bit(d_bv.V, d_index, val); return *this; }
  inline ap_bit_ref& operator=(unsigned long val) { d_bv.V = _AP_ROOT_op_set_bit(d_bv.V, d_index, val); return *this; }
  inline ap_bit_ref& operator=(ap_slong val) { d_bv.V = _AP_ROOT_op_set_bit(d_bv.V, d_index, val); return *this; }
  inline ap_bit_ref& operator=(ap_ulong val) { d_bv.V = _AP_ROOT_op_set_bit(d_bv.V, d_index, val); return *this; }
# 820 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_ref.h"
  inline ap_bit_ref& operator=(half val) { bool tmp_val = val; d_bv.V = _AP_ROOT_op_set_bit(d_bv.V, d_index,tmp_val); return *this; }
  inline ap_bit_ref& operator=(float val) { bool tmp_val = val; d_bv.V = _AP_ROOT_op_set_bit(d_bv.V, d_index,tmp_val); return *this; }
  inline ap_bit_ref& operator=(double val) { bool tmp_val = val; d_bv.V = _AP_ROOT_op_set_bit(d_bv.V, d_index,tmp_val); return *this; }




  template <int _AP_W2, bool _AP_S2>
  inline ap_bit_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(val.V != 0));
  }

  template <int _AP_W2, bool _AP_S2>
  inline ap_bit_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_int_base<_AP_W2, false>)val);
  }



  inline ap_bit_ref& operator=(const ap_bit_ref& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, bool _AP_S2>
  inline ap_bit_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline ap_bit_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline ap_bit_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline ap_bit_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=((const ap_int_base<_AP_W2 + _AP_W3, false>)val);
  }

  template <int _AP_W2, bool _AP_S2>
  inline ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    ap_int_base<_AP_W2, _AP_S2> op(a2);
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(op));
  }

  template <int _AP_W2, bool _AP_S2>
  inline ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    ap_int_base<_AP_W2, _AP_S2> op(a2);
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(op));
  }

  template <int _AP_W2, bool _AP_S2>
  inline ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline ap_concat_ref<1, ap_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> > operator,(
      const ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline ap_concat_ref<1, ap_bit_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline ap_concat_ref<
      1, ap_bit_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        1, ap_bit_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline ap_concat_ref<1, ap_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                    _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                      _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline bool operator==(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    return get() == op.get();
  }

  template <int _AP_W2, bool _AP_S2>
  inline bool operator!=(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    return get() != op.get();
  }

  inline bool get() const { return (d_bv.V).get_bit((d_index)); }

  inline bool get() { return (d_bv.V).get_bit((d_index)); }

  template <int _AP_W3>
  inline void set(const ap_int_base<_AP_W3, false>& val) {
    operator=(val);
  }

  inline bool operator~() const {
    bool bit = (d_bv.V).get_bit((d_index));
    return bit ? false : true;
  }

  inline int length() const { return 1; }

  template <typename _RT>
  inline ap_bit_ref& operator&=(const _RT& r) {
    operator=(get() & ap_int_base<1, false>(r));
    return *this;
  }

  template <typename _RT>
  inline ap_bit_ref& operator|=(const _RT& r) {
    operator=(get() | ap_int_base<1, false>(r));
    return *this;
  }

  template <typename _RT>
  inline ap_bit_ref& operator^=(const _RT& r) {
    operator=(get() ^ ap_int_base<1, false>(r));
    return *this;
  }


  std::string to_string() const { return get() ? "1" : "0"; }




};
# 1036 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline bool operator >(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline bool operator <(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline bool operator >=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline bool operator <=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline bool operator >(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline bool operator <(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline bool operator >=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline bool operator <=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline bool operator >(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline bool operator <(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline bool operator >=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline bool operator <=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline bool operator >(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline bool operator <(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline bool operator >=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline bool operator <=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline bool operator >(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline bool operator <(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline bool operator >=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline bool operator <=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline bool operator >(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline bool operator <(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline bool operator >=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline bool operator <=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline bool operator >(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline bool operator <(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline bool operator >=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline bool operator <=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline bool operator >(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline bool operator <(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline bool operator >=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline bool operator <=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline bool operator >(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline bool operator <(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline bool operator >=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline bool operator <=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline bool operator >(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline bool operator <(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline bool operator >=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline bool operator <=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline bool operator >(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline bool operator <(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline bool operator >=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline bool operator <=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline bool operator >(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline bool operator <(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline bool operator >=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline bool operator <=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); }






template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline bool operator ==(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline bool operator !=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline bool operator ==(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline bool operator !=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline bool operator ==(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline bool operator !=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline bool operator ==(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline bool operator !=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline bool operator ==(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline bool operator !=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline bool operator ==(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline bool operator !=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline bool operator ==(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline bool operator !=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline bool operator ==(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline bool operator !=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline bool operator ==(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline bool operator !=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline bool operator ==(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline bool operator !=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline bool operator ==(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline bool operator !=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline bool operator ==(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline bool operator !=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1095 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::plus operator +(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::minus operator -(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::mult operator *(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::div operator /(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::mod operator %(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::plus operator +(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::minus operator -(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::mult operator *(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::div operator /(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::mod operator %(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::plus operator +(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::minus operator -(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::mult operator *(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::div operator /(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::mod operator %(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::plus operator +(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::minus operator -(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::mult operator *(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::div operator /(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::mod operator %(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::plus operator +(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::minus operator -(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::mult operator *(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::div operator /(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::mod operator %(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::plus operator +(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::minus operator -(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::mult operator *(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::div operator /(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::mod operator %(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::plus operator +(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::minus operator -(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::mult operator *(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::div operator /(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::mod operator %(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::plus operator +(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::minus operator -(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::mult operator *(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::div operator /(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::mod operator %(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::plus operator +(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::minus operator -(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::mult operator *(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::div operator /(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::mod operator %(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::plus operator +(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::minus operator -(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::mult operator *(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::div operator /(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::mod operator %(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::plus operator +(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::minus operator -(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::mult operator *(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::div operator /(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::mod operator %(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::plus operator +(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::minus operator -(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::mult operator *(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::div operator /(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::mod operator %(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
# 1118 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator &(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator |(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator ^(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::arg1 operator >>(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::arg1 operator <<(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator &(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator |(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator ^(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::arg1 operator >>(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::arg1 operator <<(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator &(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator |(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator ^(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::arg1 operator >>(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::arg1 operator <<(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator &(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator |(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator &(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator |(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator ^(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::arg1 operator >>(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::arg1 operator <<(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator &(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator |(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator &(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator |(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator ^(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::arg1 operator >>(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::arg1 operator <<(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator &(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator |(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator &(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator |(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator ^(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::arg1 operator >>(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::arg1 operator <<(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator &(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator |(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator &(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator |(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator ^(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::arg1 operator >>(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::arg1 operator <<(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator &(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator |(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator ^(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::arg1 operator >>(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::arg1 operator <<(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
# 1146 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_ref.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())+( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())-( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())*( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::div operator /(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())/( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())%( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())&( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())|( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())^( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())>>( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())<<( rhs.operator ap_int_base<_AP_W2, false>()); }
# 1195 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_ref.h"
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::plus operator +( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() + rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::minus operator -( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() - rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::mult operator *( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() * rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::div operator /( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() / rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::mod operator %( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() % rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator &( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() & rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator |( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() | rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator ^( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() ^ rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::arg1 operator >>( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() >> rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::arg1 operator <<( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() << rhs.get(); }
# 1342 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W + 1, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); ret <<= 1; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W + 1, false> operator,( bool op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 1; ret >>= 1; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W + 1, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); ret <<= 1; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W + 1, false> operator,( bool op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline ap_int_base<1 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + 1, false> val(op2); val[1] = op1; return val; } template <int _AP_W, bool _AP_S> inline ap_int_base<1 + 1, false> operator,( bool op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<1 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline ap_int_base<_AP_W + _AP_W2 + 1, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, bool op2) { ap_int_base<1 + _AP_W + _AP_W2, false> val(op2); ap_int_base<1 + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 1; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline ap_int_base<_AP_W + _AP_W2 + 1, false> operator,( bool op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<1 + _AP_W + _AP_W2, false> val(op1); ap_int_base<1 + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_int_base<_AP_W + 1, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= 1; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_int_base<_AP_W + 1, false> operator,( bool op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_int_base<1 + 1, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, bool op2) { ap_int_base<1 + 1, false> val(op2); val[1] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_int_base<1 + 1, false> operator,( bool op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<1 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W + 8, false> operator,( char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W + 8, false> operator,( char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline ap_int_base<8 + 1, false> operator,( char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, char op2) { ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> val(op2); ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> ret(op1); if (CHAR_IS_SIGNED) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> val(op1); ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_int_base<_AP_W + 8, false> operator,( char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, char op2) { ap_int_base<8 + 1, CHAR_IS_SIGNED> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_int_base<1 + 8, false> operator,( char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, CHAR_IS_SIGNED> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W + 8, false> operator,( signed char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W + 8, false> operator,( signed char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline ap_int_base<8 + 1, false> operator,( signed char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, signed char op2) { ap_int_base<8 + _AP_W + _AP_W2, true> val(op2); ap_int_base<8 + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( signed char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, true> val(op1); ap_int_base<8 + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_int_base<_AP_W + 8, false> operator,( signed char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, signed char op2) { ap_int_base<8 + 1, true> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_int_base<1 + 8, false> operator,( signed char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline ap_int_base<8 + 1, false> operator,( unsigned char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned char op2) { ap_int_base<8 + _AP_W + _AP_W2, false> val(op2); ap_int_base<8 + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( unsigned char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, false> val(op1); ap_int_base<8 + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_int_base<1 + 8, false> operator,( unsigned char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_short; ret >>= _AP_SIZE_short; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_SIZE_short + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_SIZE_short + 1, false> operator,( short op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( short op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_int_base<1 + _AP_SIZE_short, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, short op2) { ap_int_base<_AP_SIZE_short + 1, true> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_int_base<1 + _AP_SIZE_short, false> operator,( short op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_short; ret >>= _AP_SIZE_short; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_SIZE_short + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_SIZE_short + 1, false> operator,( unsigned short op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_int_base<1 + _AP_SIZE_short, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_int_base<1 + _AP_SIZE_short, false> operator,( unsigned short op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_int; ret >>= _AP_SIZE_int; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_SIZE_int + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_SIZE_int + 1, false> operator,( int op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( int op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_int_base<1 + _AP_SIZE_int, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, int op2) { ap_int_base<_AP_SIZE_int + 1, true> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_int_base<1 + _AP_SIZE_int, false> operator,( int op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_int; ret >>= _AP_SIZE_int; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_SIZE_int + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_SIZE_int + 1, false> operator,( unsigned int op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_int_base<1 + _AP_SIZE_int, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_int_base<1 + _AP_SIZE_int, false> operator,( unsigned int op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_long; ret >>= _AP_SIZE_long; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_SIZE_long + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_SIZE_long + 1, false> operator,( long op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( long op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_int_base<1 + _AP_SIZE_long, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, long op2) { ap_int_base<_AP_SIZE_long + 1, true> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_int_base<1 + _AP_SIZE_long, false> operator,( long op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_long; ret >>= _AP_SIZE_long; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_SIZE_long + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_SIZE_long + 1, false> operator,( unsigned long op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_int_base<1 + _AP_SIZE_long, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_int_base<1 + _AP_SIZE_long, false> operator,( unsigned long op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_ap_slong; ret >>= _AP_SIZE_ap_slong; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( ap_slong op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, true> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_ap_slong; ret >>= _AP_SIZE_ap_slong; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, bool _AP_S> inline ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( ap_ulong op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
# 1366 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_ref.h"
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_slong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_ulong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }

template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_slong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_ulong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
# 13 "C:/Xilinx/Vitis/2024.2/include/ap_int.h" 2




template <int _AP_W>
struct ap_int : ap_int_base<_AP_W, true> {
  static_assert(_AP_W > 0, "ap_int bitwidth must be positive");

  typedef ap_int_base<_AP_W, true> Base;

  inline ap_int() = default;
  template <int _AP_W2>
                inline ap_int(const ap_int<_AP_W2>& op): Base((ap_int_base<_AP_W2, true>)op){



    op.checkOverflowCsim(_AP_W, true);

    Base::V = op.V;
  }

  template <int _AP_W2>
  inline ap_int(const volatile ap_int<_AP_W2>& op) {
    const_cast<const ap_int<_AP_W2>& >(op).checkOverflowCsim(_AP_W, true);
    Base::V = op.V;
  }

  template <int _AP_W2>
                inline ap_int(const ap_uint<_AP_W2>& op): Base((ap_int_base<_AP_W2, false>)op){



    op.checkOverflowCsim(_AP_W, true);

    Base::V = op.V;
  }

  template <int _AP_W2>
  inline ap_int(const volatile ap_uint<_AP_W2>& op) {
    const_cast<const ap_uint<_AP_W2>& >(op).checkOverflowCsim(_AP_W, true);
    Base::V = op.V;
  }
# 66 "C:/Xilinx/Vitis/2024.2/include/ap_int.h"
  template <int _AP_W2, bool _AP_S2>
  inline ap_int(const ap_range_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, bool _AP_S2>
  inline ap_int(const ap_bit_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline ap_int(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref)
      : Base(ref) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline ap_int(const ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline ap_int(const ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline ap_int(
      const volatile ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline ap_int(
      const volatile ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, bool _AP_S2>
                inline ap_int(const ap_int_base<_AP_W2, _AP_S2>& op):Base(op) {

  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                inline ap_int(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                inline ap_int(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline ap_int(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}







  inline ap_int(bool val):Base(val){ this->checkOverflowBaseC(val); }
  inline ap_int(char val):Base(val){ this->checkOverflowBaseC(val); }
  inline ap_int(signed char val):Base(val){ this->checkOverflowBaseC(val); }
  inline ap_int(unsigned char val):Base(val){ this->checkOverflowBaseC(val); }
  inline ap_int(short val):Base(val){ this->checkOverflowBaseC(val); }
  inline ap_int(unsigned short val):Base(val){ this->checkOverflowBaseC(val); }
  inline ap_int(int val):Base(val){ this->checkOverflowBaseC(val); }
  inline ap_int(unsigned int val):Base(val){ this->checkOverflowBaseC(val); }
  inline ap_int(long val):Base(val){ this->checkOverflowBaseC(val); }
  inline ap_int(unsigned long val):Base(val){ this->checkOverflowBaseC(val); }
  inline ap_int(ap_slong val):Base(val){ this->checkOverflowBaseC(val); }
  inline ap_int(ap_ulong val):Base(val){ this->checkOverflowBaseC(val); }

                ap_int(double val) : Base(val) {}
                ap_int(float val) : Base(val) {}
  ap_int(half val) : Base(val) {}


  inline ap_int(const char* s) : Base(s) {}

  inline ap_int(const char* s, signed char rd) : Base(s, rd) {}




  ap_int &operator=(const ap_int<_AP_W> &op2) = default;
# 163 "C:/Xilinx/Vitis/2024.2/include/ap_int.h"
  inline ap_int& operator=(const volatile ap_int<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline void operator=(const ap_int<_AP_W>& op2) volatile {
    *((volatile typename Base::Base::DataType *)(&(Base::V))) = op2.V;
  }

  inline void operator=(const volatile ap_int<_AP_W>& op2) volatile {
    *((volatile typename Base::Base::DataType *)(&(Base::V))) = op2.V;
  }

};




template <int _AP_W>
struct ap_uint : ap_int_base<_AP_W, false> {
  static_assert(_AP_W > 0, "ap_uint bitwidth must be positive");

  typedef ap_int_base<_AP_W, false> Base;

  inline ap_uint() = default;
  template <int _AP_W2>
                inline ap_uint(const ap_uint<_AP_W2>& op):Base((ap_int_base<_AP_W2, false>)op) {
    op.checkOverflowCsim(_AP_W, false);

  }

  template <int _AP_W2>
                inline ap_uint(const ap_int<_AP_W2>& op):Base((ap_int_base<_AP_W2, true>)op) {
    op.checkOverflowCsim(_AP_W, false);

  }

  template <int _AP_W2>
  inline ap_uint(const volatile ap_uint<_AP_W2>& op) {
    const_cast<const ap_uint<_AP_W2>& >(op).checkOverflowCsim(_AP_W, false);
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline ap_uint(const volatile ap_int<_AP_W2>& op) {
    const_cast<const ap_int<_AP_W2>& >(op).checkOverflowCsim(_AP_W, false);
    Base::V = op.V;
  }
# 223 "C:/Xilinx/Vitis/2024.2/include/ap_int.h"
  template <int _AP_W2, bool _AP_S2>
  inline ap_uint(const ap_range_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, bool _AP_S2>
  inline ap_uint(const ap_bit_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline ap_uint(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref)
      : Base(ref) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline ap_uint(const ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline ap_uint(const ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline ap_uint(
      const volatile ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline ap_uint(
      const volatile ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, bool _AP_S2>
                inline ap_uint(const ap_int_base<_AP_W2, _AP_S2>& op):Base(op) {

  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline ap_uint(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline ap_uint(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline ap_uint(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}






  inline ap_uint(bool val):Base(val) { this->checkOverflowBaseC(val); }
  inline ap_uint(char val):Base(val) { this->checkOverflowBaseC(val); }
  inline ap_uint(signed char val):Base(val) { this->checkOverflowBaseC(val); }
  inline ap_uint(unsigned char val):Base(val) { this->checkOverflowBaseC(val); }
  inline ap_uint(short val):Base(val) { this->checkOverflowBaseC(val); }
  inline ap_uint(unsigned short val):Base(val) { this->checkOverflowBaseC(val); }
  inline ap_uint(int val):Base(val) { this->checkOverflowBaseC(val); }
  inline ap_uint(unsigned int val):Base(val) { this->checkOverflowBaseC(val); }
  inline ap_uint(long val):Base(val) { this->checkOverflowBaseC(val); }
  inline ap_uint(unsigned long val):Base(val) { this->checkOverflowBaseC(val); }
  inline ap_uint(ap_slong val):Base(val) { this->checkOverflowBaseC(val); }
  inline ap_uint(ap_ulong val):Base(val) { this->checkOverflowBaseC(val); }

                ap_uint(double val) : Base(val) {}
                ap_uint(float val) : Base(val) {}
  ap_uint(half val) : Base(val) {}


  inline ap_uint(const char* s) : Base(s) {}

  inline ap_uint(const char* s, signed char rd) : Base(s, rd) {}





  ap_uint &operator=(const ap_uint<_AP_W> &op2) = default;
# 321 "C:/Xilinx/Vitis/2024.2/include/ap_int.h"
  inline ap_uint& operator=(const volatile ap_uint<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline void operator=(const ap_uint<_AP_W>& op2) volatile {
    *((volatile typename Base::Base::DataType *)(&(Base::V))) = op2.V;
  }

  inline void operator=(const volatile ap_uint<_AP_W>& op2) volatile {
    *((volatile typename Base::Base::DataType *)(&(Base::V))) = op2.V;
  }

};
# 356 "C:/Xilinx/Vitis/2024.2/include/ap_int.h"
# 1 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_special.h" 1








# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cstdio" 1 3
# 40 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cstdio" 3
# 10 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_special.h" 2
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cstdlib" 1 3
# 40 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cstdlib" 3
# 11 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_special.h" 2
# 20 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_special.h"
namespace std {
template<typename _Tp> class complex;
}







namespace std {
# 48 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_special.h"
template <int _AP_W>
class complex<ap_int<_AP_W> > {
 public:
  typedef ap_int<_AP_W> _Tp;
  typedef _Tp value_type;




          complex() = default;


          complex(const _Tp &__r, const _Tp &__i = _Tp(0))
      : _M_real(__r), _M_imag(__i) {}


  template <typename _Up>
          complex(const complex<_Up> &__z) : _M_real(__z.real()), _M_imag(__z.imag()) {}


          const _Tp& real() const { return _M_real; }
  const _Tp& imag() const { return _M_imag; }







          void real(_Tp __val) { _M_real = __val; }

          void imag(_Tp __val) { _M_imag = __val; }



          complex<_Tp> &operator=(const _Tp __t) {
    _M_real = __t;
    _M_imag = _Tp(0);
    return *this;
  }



          complex<_Tp> &operator+=(const _Tp &__t) {
    _M_real += __t;
    return *this;
  }



          complex<_Tp> &operator-=(const _Tp &__t) {
    _M_real -= __t;
    return *this;
  }



          complex<_Tp> &operator*=(const _Tp &__t) {
    _M_real *= __t;
    _M_imag *= __t;
    return *this;
  }



          complex<_Tp> &operator/=(const _Tp &__t) {
    _M_real /= __t;
    _M_imag /= __t;
    return *this;
  }


  template <typename _Up>
          complex<_Tp> &operator=(const complex<_Up> &__z) {
    _M_real = __z.real();
    _M_imag = __z.imag();
    return *this;
  }



  template <typename _Up>
          complex<_Tp> &operator+=(const complex<_Up> &__z) {
    _M_real += __z.real();
    _M_imag += __z.imag();
    return *this;
  }



  template <typename _Up>
          complex<_Tp> &operator-=(const complex<_Up> &__z) {
    _M_real -= __z.real();
    _M_imag -= __z.imag();
    return *this;
  }



  template <typename _Up>
          complex<_Tp> &operator*=(const complex<_Up> &__z) {
    const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
    _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
    _M_real = __r;
    return *this;
  }



  template <typename _Up>
          complex<_Tp> &operator/=(const complex<_Up> &__z) {
    complex<_Tp> cj (__z.real(), -__z.imag());
    complex<_Tp> a = (*this) * cj;
    complex<_Tp> b = cj * __z;
    _M_real = a.real() / b.real();
    _M_imag = a.imag() / b.real();
    return *this;
  }

 private:
  _Tp _M_real;
  _Tp _M_imag;

};
# 181 "C:/Xilinx/Vitis/2024.2/include/etc/ap_int_special.h"
template <int _AP_W>
inline bool operator==(const complex<ap_int<_AP_W> > &__x, const ap_int<_AP_W> &__y) {
  return __x.real() == __y &&
         __x.imag() == 0;
}


template <int _AP_W>
inline bool operator==(const ap_int<_AP_W> &__x, const complex<ap_int<_AP_W> > &__y) {
  return __x == __y.real() &&
         0 == __y.imag();
}


template <int _AP_W>
inline bool operator!=(const complex<ap_int<_AP_W> > &__x, const ap_int<_AP_W> &__y) {
  return __x.real() != __y ||
         __x.imag() != 0;
}


template <int _AP_W>
inline bool operator!=(const ap_int<_AP_W> &__x, const complex<ap_int<_AP_W> > &__y) {
  return __x != __y.real() ||
         0 != __y.imag();
}

}
# 357 "C:/Xilinx/Vitis/2024.2/include/ap_int.h" 2
# 17 "C:/Xilinx/Vitis/2024.2/include/etc/ap_fixed_base.h" 2
# 32 "C:/Xilinx/Vitis/2024.2/include/etc/ap_fixed_base.h"
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cfenv" 1 3
# 33 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cfenv" 3








# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/fenv.h" 1 3
# 33 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/fenv.h" 3



# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/fenv.h" 1 3
# 84 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/fenv.h" 3
typedef unsigned short fexcept_t;





typedef struct
{
  unsigned short __control_word;
  unsigned short __unused0;
  unsigned short __status_word;
  unsigned short __unused1;
  unsigned short __tag_word;
  unsigned short __unused2;
  unsigned int __ip_offset;
  unsigned short __ip_selector;
  unsigned short __opcode;
  unsigned int __data_offset;
  unsigned short __data_selector;
  unsigned short __unused3;
  unsigned int __mxcsr;
} fenv_t;
# 124 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/x86_64-w64-mingw32/include/fenv.h" 3
extern "C" {





extern int __attribute__((__cdecl__)) feclearexcept (int);
extern int __attribute__((__cdecl__)) fegetexceptflag (fexcept_t * flagp, int excepts);
extern int __attribute__((__cdecl__)) feraiseexcept (int excepts );
extern int __attribute__((__cdecl__)) fesetexceptflag (const fexcept_t *, int);
extern int __attribute__((__cdecl__)) fetestexcept (int excepts);



extern int __attribute__((__cdecl__)) fegetround (void);
extern int __attribute__((__cdecl__)) fesetround (int mode);



extern int __attribute__((__cdecl__)) fegetenv(fenv_t * envp);
extern int __attribute__((__cdecl__)) fesetenv(const fenv_t * );
extern int __attribute__((__cdecl__)) feupdateenv(const fenv_t *);
extern int __attribute__((__cdecl__)) feholdexcept(fenv_t *);


}
# 37 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/fenv.h" 2 3
# 55 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/fenv.h" 3
namespace std
{

  using ::fenv_t;
  using ::fexcept_t;


  using ::feclearexcept;
  using ::fegetexceptflag;
  using ::feraiseexcept;
  using ::fesetexceptflag;
  using ::fetestexcept;

  using ::fegetround;
  using ::fesetround;

  using ::fegetenv;
  using ::feholdexcept;
  using ::fesetenv;
  using ::feupdateenv;
}
# 42 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cfenv" 2 3
# 58 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cfenv" 3
namespace std
{

  using ::fenv_t;
  using ::fexcept_t;


  using ::feclearexcept;
  using ::fegetexceptflag;
  using ::feraiseexcept;
  using ::fesetexceptflag;
  using ::fetestexcept;

  using ::fegetround;
  using ::fesetround;

  using ::fegetenv;
  using ::feholdexcept;
  using ::fesetenv;
  using ::feupdateenv;
}
# 33 "C:/Xilinx/Vitis/2024.2/include/etc/ap_fixed_base.h" 2
# 53 "C:/Xilinx/Vitis/2024.2/include/etc/ap_fixed_base.h"
template <typename _Tp1, typename _Tp2>
                    inline bool _AP_ctype_op_get_bit(_Tp1& var, const _Tp2& index) {
  return !!(var & (1ull << (index)));
}
template <typename _Tp1, typename _Tp2, typename _Tp3>
                    inline _Tp1 _AP_ctype_op_set_bit(_Tp1& var, const _Tp2& index, const _Tp3& x) {
  var |= (((x) ? 1ull : 0ull) << (index));
  return var;
}
template <typename _Tp1, typename _Tp2, typename _Tp3>
                    inline _Tp1 _AP_ctype_op_get_range(_Tp1& var, const _Tp2& low,
                                   const _Tp3& high) {
  _Tp1 r = var;
  ap_ulong mask = -1ll;
  mask >>= (sizeof(_Tp1) * 8 - ((high) - (low) + 1));
  r >>= (low);
  r &= mask;
  return r;
}
template <typename _Tp1, typename _Tp2, typename _Tp3, typename _Tp4>
                    inline _Tp1 _AP_ctype_op_set_range(_Tp1& var, const _Tp2& low, const _Tp3& high,
                                   const _Tp4& x) {
  ap_ulong mask = -1ll;
  mask >>= (_AP_SIZE_ap_slong - ((high) - (low) + 1));
  var &= ~(mask << (low));
  var |= ((mask & x) << (low));
  return var;
}






template <int _AP_W2, int _AP_I2, bool _AP_S2>
struct _ap_fixed_factory;
template <int _AP_W2, int _AP_I2>
struct _ap_fixed_factory<_AP_W2, _AP_I2, true> {
  typedef ap_fixed<_AP_W2, _AP_I2> type;
};
template <int _AP_W2, int _AP_I2>
struct _ap_fixed_factory<_AP_W2, _AP_I2, false> {
  typedef ap_ufixed<_AP_W2, _AP_I2> type;
};
# 108 "C:/Xilinx/Vitis/2024.2/include/etc/ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct ap_fixed_base : ssdm_int_sim<_AP_W, _AP_S> {
 static_assert(_AP_W > 0, "ap_fixed_base bitwidth must be positive");

 public:
  typedef ssdm_int_sim<_AP_W, _AP_S> Base;
  static const int width = _AP_W;
  static const int iwidth = _AP_I;
  static const ap_q_mode qmode = _AP_Q;
  static const ap_o_mode omode = _AP_O;


  template <int _AP_W2, int _AP_I2, bool _AP_S2>
  struct RType {
    enum {
      _AP_F = _AP_W - _AP_I,
      F2 = _AP_W2 - _AP_I2,
      mult_w = _AP_W + _AP_W2,
      mult_i = _AP_I + _AP_I2,
      mult_s = _AP_S || _AP_S2,
      plus_w = ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) +
               1 + ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      plus_i =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1,
      plus_s = _AP_S || _AP_S2,
      minus_w =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1 +
          ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      minus_i =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1,
      minus_s = true,

      div_w = _AP_S2 + _AP_W + ((F2) > (0) ? (F2) : (0)),



      div_i = _AP_S2 + _AP_I + F2,
      div_s = _AP_S || _AP_S2,
      logic_w =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) +
          ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      logic_i = ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))),
      logic_s = _AP_S || _AP_S2
    };

    typedef ap_fixed_base<_AP_W, _AP_I, _AP_S> lhs;
    typedef ap_fixed_base<_AP_W2, _AP_I2, _AP_S2> rhs;

    typedef ap_fixed_base<mult_w, mult_i, mult_s> mult_base;
    typedef ap_fixed_base<plus_w, plus_i, plus_s> plus_base;
    typedef ap_fixed_base<minus_w, minus_i, minus_s> minus_base;
    typedef ap_fixed_base<logic_w, logic_i, logic_s> logic_base;
    typedef ap_fixed_base<div_w, div_i, div_s> div_base;
    typedef ap_fixed_base<_AP_W, _AP_I, _AP_S> arg1_base;

    typedef typename _ap_fixed_factory<mult_w, mult_i, mult_s>::type mult;
    typedef typename _ap_fixed_factory<plus_w, plus_i, plus_s>::type plus;
    typedef typename _ap_fixed_factory<minus_w, minus_i, minus_s>::type minus;
    typedef typename _ap_fixed_factory<logic_w, logic_i, logic_s>::type logic;
    typedef typename _ap_fixed_factory<div_w, div_i, div_s>::type div;
    typedef typename _ap_fixed_factory<_AP_W, _AP_I, _AP_S>::type arg1;
  };

 private:


  void fromString(const std::string& val, unsigned char radix) {
    do { if ((!(radix == 2 || radix == 8 || radix == 10 || radix == 16))) { fprintf((__acrt_iob_func(2)), "ERROR: " "ap_fixed_base::fromString(%s, %d)", val.c_str(), radix); fprintf((__acrt_iob_func(2)), "\n"); abort(); } } while (0);


    Base::V = 0;
    int startPos = 0;
    int endPos = val.length();
    int decPos = val.find(".");
    if (decPos == -1) decPos = endPos;


    bool isNegative = false;
    if (val[0] == '-') {
      isNegative = true;
      ++startPos;
    } else if (val[0] == '+')
      ++startPos;
# 200 "C:/Xilinx/Vitis/2024.2/include/etc/ap_fixed_base.h"
    ap_fixed_base<((_AP_I) > (4) ? (_AP_I) : (4)) + 4, ((_AP_I) > (4) ? (_AP_I) : (4)) + 4, false>
        integer_bits = 0;


    unsigned shift = (radix == 16 ? 4 : radix == 8 ? 3 : radix == 2 ? 1 : 0);




    bool sticky_int = false;


    for (int i = startPos; i < decPos; i++) {

      char cdigit = val[i];
      if (cdigit == '\0') continue;
      unsigned digit = ap_private_ops::decode_digit(cdigit, radix);

      sticky_int |= integer_bits[((_AP_I) > (4) ? (_AP_I) : (4)) + 4 - 1] |
                    integer_bits[((_AP_I) > (4) ? (_AP_I) : (4)) + 4 - 2] |
                    integer_bits[((_AP_I) > (4) ? (_AP_I) : (4)) + 4 - 3] |
                    integer_bits[((_AP_I) > (4) ? (_AP_I) : (4)) + 4 - 4];

      if (shift)
        integer_bits <<= shift;
      else
        integer_bits *= radix;


      integer_bits += digit;


    }
    integer_bits[((_AP_I) > (4) ? (_AP_I) : (4)) + 4 - 3] =
        integer_bits[((_AP_I) > (4) ? (_AP_I) : (4)) + 4 - 3] | sticky_int;

    ap_fixed_base<((_AP_W - _AP_I) > (0) ? (_AP_W - _AP_I) : (0)) + 4 + 4, 4, false> fractional_bits = 0;
    bool sticky = false;


    for (int i = endPos - 1; i >= decPos + 1; i--) {

      char cdigit = val[i];
      if (cdigit == '\0') continue;
      unsigned digit = ap_private_ops::decode_digit(cdigit, radix);

      fractional_bits += digit;

      sticky |= fractional_bits[0] | fractional_bits[1] | fractional_bits[2] |
                fractional_bits[3];

      if (shift)
        fractional_bits >>= shift;
      else
        fractional_bits /= radix;



    }




    fractional_bits[0] = fractional_bits[0] | sticky;

    if (isNegative)
      *this = -(integer_bits + fractional_bits);
    else
      *this = integer_bits + fractional_bits;


  }


                      inline void report() {







    if (!_AP_S && _AP_O == AP_WRAP_SM) {
      fprintf((__acrt_iob_func(2)), "ap_ufxied<...> cannot support AP_WRAP_SM.\n");
      exit(1);
    }
    if (_AP_W > ((1024 + 1023) / 1024) * 1024) {
      fprintf((__acrt_iob_func(2)),
              "[E] ap_%sfixed<%d, ...>: Bitwidth exceeds the "
              "default max value %d. Please use macro "
              "AP_INT_MAX_W to set a larger max value.\n",
              _AP_S ? "" : "u", _AP_W, ((1024 + 1023) / 1024) * 1024);
      exit(1);
    }

  }






                      inline void overflow_adjust(bool underflow, bool overflow, bool lD,
                              bool sign) {
    if (!underflow && !overflow) return;
    if (_AP_O == AP_WRAP) {
      if (_AP_N == 0) return;
      if (_AP_S) {


        Base::V = _AP_ROOT_op_set_bit(Base::V, _AP_W - 1, sign);
        if (_AP_N > 1) {

          ap_int_base<_AP_W, false> mask(-1);
          if (sign) mask.V = 0;
          Base::V =
              _AP_ROOT_op_set_range(Base::V, _AP_W - _AP_N, _AP_W - 2, mask.V);
        }
      } else {

        ap_int_base<_AP_W, false> mask(-1);
        Base::V =
            _AP_ROOT_op_set_range(Base::V, _AP_W - _AP_N, _AP_W - 1, mask.V);
      }
    } else if (_AP_O == AP_SAT_ZERO) {
      Base::V = 0;
    } else if (_AP_O == AP_WRAP_SM && _AP_S) {
      bool Ro = (Base::V).get_bit((_AP_W - 1));
      if (_AP_N == 0) {
        if (lD != Ro) {
          Base::V = ~Base::V;
          Base::V = _AP_ROOT_op_set_bit(Base::V, _AP_W - 1, lD);
        }
      } else {
        if (_AP_N == 1 && sign != Ro) {
          Base::V = ~Base::V;
        } else if (_AP_N > 1) {
          bool lNo = (Base::V).get_bit((_AP_W - _AP_N));
          if (lNo == sign) Base::V = ~Base::V;
          ap_int_base<_AP_W, false> mask(-1);
          if (sign) mask.V = 0;
          Base::V =
              _AP_ROOT_op_set_range(Base::V, _AP_W - _AP_N, _AP_W - 2, mask.V);
        }
        Base::V = _AP_ROOT_op_set_bit(Base::V, _AP_W - 1, sign);
      }
    } else {
      if (_AP_S) {
        if (overflow) {
          Base::V = 1;
          Base::V <<= _AP_W - 1;
          Base::V = ~Base::V;
        } else if (underflow) {
          Base::V = 1;
          Base::V <<= _AP_W - 1;
          if (_AP_O == AP_SAT_SYM) Base::V |= 1;
        }
      } else {
        if (overflow)
          Base::V = ~(ap_int_base<_AP_W, false>(0).V);
        else if (underflow)
          Base::V = 0;
      }
    }
  }

                      inline bool quantization_adjust(bool qb, bool r, bool s) {
    bool carry = (bool)(Base::V).get_bit((_AP_W - 1));
    if (_AP_Q == AP_TRN) return false;
    if (_AP_Q == AP_RND_ZERO)
      qb &= s || r;
    else if (_AP_Q == AP_RND_MIN_INF)
      qb &= r;
    else if (_AP_Q == AP_RND_INF)
      qb &= !s || r;
    else if (_AP_Q == AP_RND_CONV)
      qb &= (Base::V).get_bit((0)) || r;
    else if (_AP_Q == AP_TRN_ZERO)
      qb = s && (qb || r);
    Base::V += qb;
    return carry && (!(bool)(Base::V).get_bit((_AP_W - 1)));
  }


                      inline int countLeadingOnes() const {




    return 0;

  }

 public:



  inline ap_fixed_base() = default;


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline ap_fixed_base(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op):Base(op.V) {

    operator=(op);



    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline ap_fixed_base(
      const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(op);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
                      inline ap_fixed_base(const ap_int_base<_AP_W2, _AP_S2>& op):Base(op.V) {
    ap_fixed_base<_AP_W2, _AP_W2, _AP_S2> tmp(0);
    tmp.V = op.V;

    operator=(tmp);



    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline ap_fixed_base(const volatile ap_int_base<_AP_W2, _AP_S2>& op) {
    ap_fixed_base<_AP_W2, _AP_W2, _AP_S2> tmp;
    tmp.V = op.V;
    operator=(tmp);
    report();
  }



  inline ap_fixed_base(const char* s, signed char rd = 0) {
    (void) ((!!((0 != s) && ("ap_fixed<> is being initialized with a NULL pointer which is not a valid C string"))) || (_assert("(0 != s) && (\"ap_fixed<> is being initialized with a NULL pointer which is not a valid C string\")","C:/Xilinx/Vitis/2024.2/include/etc/ap_fixed_base.h",443),0));
    unsigned char radix = rd;
    std::string str = ap_private_ops::parseString(s, radix);
    do { if ((str.empty())) { fprintf((__acrt_iob_func(2)), "WARNING: " "ap_fixed<> is being initialized with an empty C string, which can result in undefined behavior during simulation/synthesis"); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);
    do { if ((radix == 0)) { fprintf((__acrt_iob_func(2)), "ERROR: " "ap_fixed_base(const char* \"%s\", %d), str=%s, radix = %d", s, rd, str.c_str(), radix); fprintf((__acrt_iob_func(2)), "\n"); abort(); } } while (0);

    fromString(str, radix);
  }
# 474 "C:/Xilinx/Vitis/2024.2/include/etc/ap_fixed_base.h"
  template <int _AP_W2, bool _AP_S2>
  inline ap_fixed_base(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    *this = ((bool)op);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline ap_fixed_base(const ap_range_ref<_AP_W2, _AP_S2>& op) {
    *this = (ap_int_base<_AP_W2, false>(op));
    report();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline ap_fixed_base(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op) {
    *this = (ap_int_base<_AP_W2 + _AP_W3, false>(op));
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline ap_fixed_base(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    *this = (bool(op));
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline ap_fixed_base(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    *this = (ap_int_base<_AP_W2, false>(op));
    report();
  }
# 528 "C:/Xilinx/Vitis/2024.2/include/etc/ap_fixed_base.h"
  inline ap_fixed_base(const bool x) { ap_fixed_base<(1), (1), (false)> tmp; tmp.V = x; *this = tmp; }
  inline ap_fixed_base(const char x) { ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)> tmp; tmp.V = x; *this = tmp; }
  inline ap_fixed_base(const signed char x) { ap_fixed_base<(8), (8), (true)> tmp; tmp.V = x; *this = tmp; }
  inline ap_fixed_base(const unsigned char x) { ap_fixed_base<(8), (8), (false)> tmp; tmp.V = x; *this = tmp; }
  inline ap_fixed_base(const short x) { ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)> tmp; tmp.V = x; *this = tmp; }
  inline ap_fixed_base(const unsigned short x) { ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)> tmp; tmp.V = x; *this = tmp; }
  inline ap_fixed_base(const int x) { ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)> tmp; tmp.V = x; *this = tmp; }
  inline ap_fixed_base(const unsigned int x) { ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)> tmp; tmp.V = x; *this = tmp; }
  inline ap_fixed_base(const long x) { ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)> tmp; tmp.V = x; *this = tmp; }
  inline ap_fixed_base(const unsigned long x) { ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)> tmp; tmp.V = x; *this = tmp; }
  inline ap_fixed_base(const ap_slong x) { ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)> tmp; tmp.V = x; *this = tmp; }
  inline ap_fixed_base(const ap_ulong x) { ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)> tmp; tmp.V = x; *this = tmp; }







                  ap_fixed_base(double d) {
    ap_int_base<64, false> ireg;
    ireg.V = doubleToRawBits(d);
    bool isneg = (ireg.V).get_bit((63));

    ap_int_base<11 + 1, true> exp, bias = ((1 << (11 - 1)) - 1);
    ap_int_base<11, false> exp_tmp;
    exp_tmp.V = (ireg.V).range((52 + 11 - 1), (52));
    exp = exp_tmp - bias;
    ap_int_base<52 + 2, true> man;
    man.V = (ireg.V).range((52 - 1), (0));


    do { if ((exp == ((1 << (11 - 1)) - 1) + 1 && man.V != 0)) { fprintf((__acrt_iob_func(2)), "WARNING: " "assign NaN to fixed point value"); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);

    man.V = _AP_ROOT_op_set_bit(man.V, 52, 1);
    if (isneg) man = -man;
    if ((ireg.V & 0x7fffffffffffffffLL) == 0) {
      Base::V = 0;
    } else {
      int _AP_W2 = 52 + 2, _AP_I2 = exp.V + 2, _AP_F = _AP_W - _AP_I,
          F2 = _AP_W2 - _AP_I2;
      bool _AP_S2 = true,
           QUAN_INC = F2 > _AP_F &&
                      !(_AP_Q == AP_TRN || (_AP_Q == AP_TRN_ZERO && !_AP_S2));
      bool carry = false;

      unsigned sh_amt = (F2 > _AP_F) ? F2 - _AP_F : _AP_F - F2;
      if (F2 == _AP_F)
        Base::V = man.V;
      else if (F2 > _AP_F) {
        if (sh_amt < 52 + 2)
          Base::V = man.V >> sh_amt;
        else {
          Base::V = isneg ? -1 : 0;
        }
        if ((_AP_Q != AP_TRN) && !((_AP_Q == AP_TRN_ZERO) && !_AP_S2)) {
          bool qb = (F2 - _AP_F > _AP_W2) ? isneg : (bool)(man.V).get_bit((F2 - _AP_F - 1));

          bool r =
              (F2 > _AP_F + 1)
                  ? (man.V).range(((F2 - _AP_F - 2 < _AP_W2) ? (F2 - _AP_F - 2) : (_AP_W2 - 1)), (0)) != 0


                  : false;
          carry = quantization_adjust(qb, r, isneg);
        }
      } else {
        Base::V = man.V;
        if (sh_amt < _AP_W)
          Base::V = Base::V << sh_amt;
        else
          Base::V = 0;
      }

      if ((_AP_O != AP_WRAP || _AP_N != 0) &&
          ((!_AP_S && _AP_S2) ||
           _AP_I - _AP_S <
               _AP_I2 - _AP_S2 +
                   (QUAN_INC ||
                    (_AP_S2 && (_AP_O == AP_SAT_SYM))))) {
        bool deleted_zeros = _AP_S2 ? true : !carry, deleted_ones = true;
        bool neg_src = isneg;
        bool lD = false;
        int pos1 = F2 - _AP_F + _AP_W;
        int pos2 = F2 - _AP_F + _AP_W + 1;
        bool newsignbit = (Base::V).get_bit((_AP_W - 1));
        if (pos1 < _AP_W2 && pos1 >= 0)

          lD = (man.V >> pos1) & 1;
        if (pos1 < _AP_W2) {
          bool Range1_all_ones = true;
          bool Range1_all_zeros = true;
          bool Range2_all_ones = true;
          ap_int_base<52 + 2, false> Range2;
          ap_int_base<52 + 2, false> all_ones(-1);

          if (pos2 >= 0 && pos2 < _AP_W2) {


            Range2.V = man.V;
            Range2.V >>= pos2;
            Range2_all_ones = Range2 == (all_ones >> pos2);
          } else if (pos2 < 0)
            Range2_all_ones = false;
          if (pos1 >= 0 && pos2 < _AP_W2) {
            Range1_all_ones = Range2_all_ones && lD;
            Range1_all_zeros = !Range2.V && !lD;
          } else if (pos2 == _AP_W2) {
            Range1_all_ones = lD;
            Range1_all_zeros = !lD;
          } else if (pos1 < 0) {
            Range1_all_zeros = !man.V;
            Range1_all_ones = false;
          }

          deleted_zeros =
              deleted_zeros && (carry ? Range1_all_ones : Range1_all_zeros);
          deleted_ones =
              carry ? Range2_all_ones && (pos1 < 0 || !lD) : Range1_all_ones;
          neg_src = isneg && !(carry && Range1_all_ones);
        } else
          neg_src = isneg && newsignbit;
        bool neg_trg = _AP_S && newsignbit;
        bool overflow = (neg_trg || !deleted_zeros) && !isneg;
        bool underflow = (!neg_trg || !deleted_ones) && neg_src;
        if ((_AP_O == AP_SAT_SYM) && _AP_S2 && _AP_S)
          underflow |=
              neg_src &&
              (_AP_W > 1 ? (Base::V).range((_AP_W - 2), (0)) == 0
                         : true);
        overflow_adjust(underflow, overflow, lD, neg_src);
      }
    }
    report();
  }


  inline ap_fixed_base(float d) { *this = ap_fixed_base(double(d)); }


  inline ap_fixed_base(half d) { *this = ap_fixed_base(double(d)); }
# 802 "C:/Xilinx/Vitis/2024.2/include/etc/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline ap_fixed_base& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {

    const int _AP_F = _AP_W - _AP_I;
    const int F2 = _AP_W2 - _AP_I2;
    const int QUAN_INC =
          F2 > _AP_F && !(_AP_Q == AP_TRN || (_AP_Q == AP_TRN_ZERO && !_AP_S2));

    if (!op) Base::V = 0;
    bool carry = false;
    bool signbit = (op.V).get_bit((_AP_W2 - 1));
    bool isneg = signbit && _AP_S2;
    if (F2 == _AP_F)
      Base::V = op.V;
    else if (F2 > _AP_F) {
      unsigned int sh_amt = F2 - _AP_F;

      if (sh_amt < _AP_W2) {
        Base::V = op.V >> sh_amt;
      } else {
        Base::V = isneg ? -1 : 0;
      }
      if (_AP_Q != AP_TRN && !(_AP_Q == AP_TRN_ZERO && !_AP_S2)) {

        bool qb = (F2 - _AP_F > _AP_W2) ? _AP_S2 && signbit : (op.V).get_bit((F2 - _AP_F - 1));
        enum { hi = ((F2 - _AP_F - 2) < _AP_W2) ? (F2 - _AP_F - 2) : (_AP_W2 - 1) };

        bool r = (F2 > _AP_F + 1) ? ((op.V).range((hi), (0)) != 0) : false;
        carry = quantization_adjust(qb, r, isneg);
      }
    } else {
      unsigned sh_amt = _AP_F - F2;

      if (sh_amt < _AP_W) {
        if (_AP_W > _AP_W2) {

          Base::V = op.V;
          Base::V <<= sh_amt;
        } else {

          Base::V = op.V << sh_amt;
        }
      } else {
        Base::V = 0;
      }
    }

    if ((_AP_O != AP_WRAP || _AP_N != 0) &&
        ((!_AP_S && _AP_S2) ||
         _AP_I - _AP_S <
             _AP_I2 - _AP_S2 +
                 (QUAN_INC || (_AP_S2 && _AP_O == AP_SAT_SYM)))) {
      bool deleted_zeros = _AP_S2 ? true : !carry;
      bool deleted_ones = true;
      bool neg_src = isneg;
      bool newsignbit = (Base::V).get_bit((_AP_W - 1));
      enum { pos1 = F2 - _AP_F + _AP_W, pos2 = F2 - _AP_F + _AP_W + 1 };
      bool lD = (pos1 < _AP_W2 && pos1 >= 0) ? (op.V).get_bit((pos1))
                                             : false;
      if (pos1 < _AP_W2) {
        bool Range1_all_ones = true;
        bool Range1_all_zeros = true;
        bool Range2_all_ones = true;
        ap_int_base<_AP_W2, false> all_ones(-1);

        if (pos2 < _AP_W2 && pos2 >= 0) {
          ap_int_base<_AP_W2, false> Range2(0);
          Range2.V = (op.V).range((_AP_W2 - 1), (pos2));
          Range2_all_ones = Range2 == (all_ones >> pos2);
        } else if (pos2 < 0) {
          Range2_all_ones = false;
        }

        if (pos1 >= 0 && pos2 < _AP_W2) {
          ap_int_base<_AP_W2, false> Range1(0);
          Range1.V = (op.V).range((_AP_W2 - 1), (pos1));
          Range1_all_ones = Range1 == (all_ones >> pos1);
          Range1_all_zeros = !Range1.V;
        } else if (pos2 == _AP_W2) {
          Range1_all_ones = lD;
          Range1_all_zeros = !lD;
        } else if (pos1 < 0) {
          Range1_all_zeros = !op.V;
          Range1_all_ones = false;
        }

        deleted_zeros =
            deleted_zeros && (carry ? Range1_all_ones : Range1_all_zeros);
        deleted_ones =
            carry ? Range2_all_ones && (pos1 < 0 || !lD) : Range1_all_ones;
        neg_src = isneg && !(carry && Range1_all_ones);
      } else
        neg_src = isneg && newsignbit;
      bool neg_trg = _AP_S && newsignbit;
      bool overflow = (neg_trg || !deleted_zeros) && !isneg;
      bool underflow = (!neg_trg || !deleted_ones) && neg_src;
      if ((_AP_O == AP_SAT_SYM) && _AP_S2 && _AP_S)
        underflow |=
            neg_src &&
            (_AP_W > 1 ? (Base::V).range((_AP_W - 2), (0)) == 0
                       : true);

      overflow_adjust(underflow, overflow, lD, neg_src);
    }
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline ap_fixed_base& operator=(
      const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(const_cast<const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(op));
    return *this;
  }


                      inline ap_fixed_base& setBits(ap_ulong bv) {

    Base::V = bv;
    return *this;
  }


  static inline ap_fixed_base bitsToFixed(ap_ulong bv) {

    ap_fixed_base t;



    t.V.set_bits(bv);

    return t;
  }

                      inline void checkOverflowCsimFix(int _ap_w2, bool _ap_s2) const {
# 974 "C:/Xilinx/Vitis/2024.2/include/etc/ap_fixed_base.h"
      (void)_ap_w2;
      (void)_ap_s2;

      return;
  }





                      inline ap_int_base<((_AP_I) > (1) ? (_AP_I) : (1)), _AP_S> to_ap_int_base(
      bool Cnative = true) const {
    ap_int_base<((_AP_I) > (1) ? (_AP_I) : (1)), _AP_S> ret(0);
    if (_AP_I == 0) {
      ret.V = 0;
    } else if (_AP_I > 0 && _AP_I <= _AP_W) {
      ret.V = (Base::V).range((_AP_W - 1), (_AP_W - _AP_I));
    } else if (_AP_I > _AP_W) {
      ret.V = (Base::V).range((_AP_W - 1), (0));
      ret.V <<= (_AP_I - _AP_W);
    }
# 1003 "C:/Xilinx/Vitis/2024.2/include/etc/ap_fixed_base.h"
    if (Cnative && _AP_I < _AP_W) {

      if (_AP_S && (Base::V).get_bit((_AP_W - 1)) && (_AP_I < _AP_W) &&
          ((Base::V).range((_AP_I < 0 ? _AP_W - 1 : _AP_W - _AP_I - 1), (0)) != (unsigned long)0))


        ret = ret + 1;
    } else {

    }
    return ret;
  };

 public:
  template <int _AP_W2, bool _AP_S2>
                      inline operator ap_int_base<_AP_W2, _AP_S2>() const {
    return ap_int_base<_AP_W2, _AP_S2>(to_ap_int_base());
  }


                      inline char to_char() const { return to_ap_int_base().to_char(); }

                      inline int to_int() const { return to_ap_int_base().to_int(); }

                      inline unsigned to_uint() const { return to_ap_int_base().to_uint(); }

                      inline ap_slong to_int64() const { return to_ap_int_base().to_int64(); }

                      inline ap_ulong to_uint64() const { return to_ap_int_base().to_uint64(); }

                      inline ap_int<_AP_I> to_ap_int() const { return ap_int<_AP_I>(to_ap_int_base()); }



  inline double to_double() const {

    do { if ((std::fegetround() != 0x0000)) { fprintf((__acrt_iob_func(2)), "WARNING: " "Only FE_TONEAREST is supported"); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);


    enum { BITS = 52 + 11 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && (Base::V).get_bit((_AP_W - 1));
    ap_int_base<_AP_W, false> tmp(0);
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1 << (11 - 1)) - 1);
    int lsb_index = _AP_W - l - 1 - 52;

    bool a = (lsb_index >=2) ?
        ((tmp.V).range((lsb_index - 2), (0)) != 0) : 0;

    a |= (lsb_index >=0) ? (tmp.V).get_bit((lsb_index)) : 0;

    ap_ulong m = 0;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (ap_ulong)(tmp.V >> (lsb_index - 1))
                           : (ap_ulong)(tmp.V << (1 - lsb_index));
    } else {
      m = (ap_ulong)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;


    if (_AP_ctype_op_get_bit(m, 52 + 1)) {
      e += 1;
    }

    m = _AP_ctype_op_set_bit(m, BITS - 1, s);

    m = _AP_ctype_op_set_range(m, 52, 52 + 11 - 1, e);


    return rawBitsToDouble(m);
  }



  inline float to_float() const {

    do { if ((std::fegetround() != 0x0000)) { fprintf((__acrt_iob_func(2)), "WARNING: " "Only FE_TONEAREST is supported"); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);


    enum { BITS = 23 + 8 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && (Base::V).get_bit((_AP_W - 1));
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1 << (8 - 1)) - 1);
    int lsb_index = _AP_W - l - 1 - 23;

    bool a = (lsb_index >=2) ?
        ((tmp.V).range((lsb_index - 2), (0)) != 0) : 0;

    a |= (lsb_index >=0) ? (tmp.V).get_bit((lsb_index)) : 0;

    unsigned long m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (unsigned long)(tmp.V >> (lsb_index - 1))
                           : (unsigned long)(tmp.V << (1 - lsb_index));
    } else {
      m = (unsigned long)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;

    if (_AP_ctype_op_get_bit(m, 23 + 1)) {
      e += 1;
    }

    m = _AP_ctype_op_set_bit(m, BITS - 1, s);
    m = _AP_ctype_op_set_range(m, 23, 23 + 8 - 1, e);

    return rawBitsToFloat(m);
  }



  inline half to_half() const {

    do { if ((std::fegetround() != 0x0000)) { fprintf((__acrt_iob_func(2)), "WARNING: " "Only FE_TONEAREST is supported"); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);


    enum { BITS = 10 + 5 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && (Base::V).get_bit((_AP_W - 1));
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1 << (5 - 1)) - 1);
    int lsb_index = _AP_W - l - 1 - 10;

    bool a = (lsb_index >=2) ?
        ((tmp.V).range((lsb_index - 2), (0)) != 0) : 0;

    a |= (lsb_index >=0) ? (tmp.V).get_bit((lsb_index)) : 0;

    unsigned short m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (unsigned short)(tmp.V >> (lsb_index - 1))
                           : (unsigned short)(tmp.V << (1 - lsb_index));
    } else {
      m = (unsigned short)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;

    if (_AP_ctype_op_get_bit(m, 10 + 1)) {
      e += 1;
    }

    m = _AP_ctype_op_set_bit(m, BITS - 1, s);
    m = _AP_ctype_op_set_range(m, 10, 10 + 5 - 1, e);

    return rawBitsToHalf(m);
  }


  inline operator long double() const { return (long double)to_double(); }

  inline operator double() const { return to_double(); }

  inline operator float() const { return to_float(); }

  inline operator half() const { return to_half(); }

                      inline operator bool() const { return (bool)Base::V != 0; }

                      inline operator char() const { return (char)to_int(); }

                      inline operator signed char() const { return (signed char)to_int(); }

                      inline operator unsigned char() const { return (unsigned char)to_uint(); }

                      inline operator short() const { return (short)to_int(); }

                      inline operator unsigned short() const { return (unsigned short)to_uint(); }

                      inline operator int() const { return to_int(); }

                      inline operator unsigned int() const { return to_uint(); }



                      inline operator long() const { return (long)to_int64(); }

                      inline operator unsigned long() const { return (unsigned long)to_uint64(); }






                      inline operator ap_ulong() const { return to_uint64(); }

                      inline operator ap_slong() const { return to_int64(); }

                      inline int length() const { return _AP_W; };




                      inline ap_ulong bits_to_uint64() const {
    return (Base::V).to_uint64();
  }





                      inline int countLeadingZeros() const {
# 1262 "C:/Xilinx/Vitis/2024.2/include/etc/ap_fixed_base.h"
    return Base::V.countLeadingZeros();

  }



  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline typename RType<_AP_W2, _AP_I2, _AP_S2>::mult operator*(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2)
      const {
    typename RType<_AP_W2, _AP_I2, _AP_S2>::mult_base r(0), t(0);
    r.V = Base::V;
    t.V = op2.V;
    r.V *= op2.V;
    return r;
  }



  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline typename RType<_AP_W2, _AP_I2, _AP_S2>::div operator/(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2)
      const {
    typename RType<_AP_W2, _AP_I2, _AP_S2>::div_base r;

    enum {F2 = _AP_W2-_AP_I2,
              _W1=((_AP_W + ((F2) > (0) ? (F2) : (0)) + ((_AP_S2 && !_AP_S) ? 1 : 0)) > (_AP_W2 + ((_AP_S && !_AP_S2) ? 1 : 0)) ? (_AP_W + ((F2) > (0) ? (F2) : (0)) + ((_AP_S2 && !_AP_S) ? 1 : 0)) : (_AP_W2 + ((_AP_S && !_AP_S2) ? 1 : 0)))};
    ap_int_base<_W1,_AP_S||_AP_S2> dividend,divisior;
    ap_int_base<_W1,_AP_S> tmp1;
    ap_int_base<_W1,_AP_S2> tmp2;
    tmp1.V = Base::V;
    tmp1.V <<= ((F2) > (0) ? (F2) : (0));
    tmp2.V = op2.V;
    dividend = tmp1;
    divisior = tmp2;
    r.V = ((_AP_S||_AP_S2) ? dividend.V.sdiv(divisior.V): dividend.V.udiv(divisior.V));
# 1335 "C:/Xilinx/Vitis/2024.2/include/etc/ap_fixed_base.h"
    return r;
  }
# 1350 "C:/Xilinx/Vitis/2024.2/include/etc/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline typename RType<_AP_W2, _AP_I2, _AP_S2>::plus operator +( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>::plus_base ret(0), lhs(*this), rhs(op2); ret.V = lhs.V + rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline typename RType<_AP_W2, _AP_I2, _AP_S2>::minus operator -( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>::minus_base ret(0), lhs(*this), rhs(op2); ret.V = lhs.V - rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator &( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>::logic_base ret(0), lhs(*this), rhs(op2); ret.V = lhs.V & rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator |( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>::logic_base ret(0), lhs(*this), rhs(op2); ret.V = lhs.V | rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator ^( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>::logic_base ret(0), lhs(*this), rhs(op2); ret.V = lhs.V ^ rhs.V; return ret; }
# 1368 "C:/Xilinx/Vitis/2024.2/include/etc/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline ap_fixed_base& operator *=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator *(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline ap_fixed_base& operator /=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator /(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline ap_fixed_base& operator +=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator +(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline ap_fixed_base& operator -=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator -(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline ap_fixed_base& operator &=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator &(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline ap_fixed_base& operator |=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator |(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline ap_fixed_base& operator ^=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator ^(op2); return *this; }





  inline ap_fixed_base& operator++() {
    operator+=(ap_fixed_base<_AP_W - _AP_I + 1, 1, false>(1));
    return *this;
  }


  inline ap_fixed_base& operator--() {
    operator-=(ap_fixed_base<_AP_W - _AP_I + 1, 1, false>(1));
    return *this;
  }


  inline const ap_fixed_base operator++(int) {
    ap_fixed_base r(*this);
    operator++();
    return r;
  }


  inline const ap_fixed_base operator--(int) {
    ap_fixed_base r(*this);
    operator--();
    return r;
  }



  inline typename _ap_fixed_factory<_AP_W, _AP_I, _AP_S>::type operator+() { return *this; }

                      inline typename _ap_fixed_factory<_AP_W + 1, _AP_I + 1, true>::type operator-() const {
    ap_fixed_base<_AP_W + 1, _AP_I + 1, true> r(*this);
    r.V = -r.V;
    return r;
  }

                      inline ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> getNeg() {
    ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> r(*this);
    r.V = -r.V;
    return r;
  }



                      inline bool operator!() const { return Base::V == (unsigned long)0; }




                      inline ap_fixed_base<_AP_W, _AP_I, _AP_S> operator~() const {
    ap_fixed_base<_AP_W, _AP_I, _AP_S> r(0);
    r.V = ~Base::V;
    return r;
  }




  template <int _AP_SHIFT>
                      inline ap_fixed_base<_AP_W, _AP_I + _AP_SHIFT, _AP_S> lshift() const {
    ap_fixed_base<_AP_W, _AP_I + _AP_SHIFT, _AP_S> r(0);
    r.V = Base::V;
    return r;
  }

  template <int _AP_SHIFT>
                      inline ap_fixed_base<_AP_W, _AP_I - _AP_SHIFT, _AP_S> rshift() const {
    ap_fixed_base<_AP_W, _AP_I - _AP_SHIFT, _AP_S> r(0);
    r.V = Base::V;
    return r;
  }





                      inline ap_fixed_base operator<<(unsigned int sh) const {
    ap_fixed_base r(0);
    r.V = Base::V << sh;
# 1486 "C:/Xilinx/Vitis/2024.2/include/etc/ap_fixed_base.h"
    return r;
  }

                      inline ap_fixed_base operator>>(unsigned int sh) const {
    ap_fixed_base r(0);
    r.V = Base::V >> sh;
# 1508 "C:/Xilinx/Vitis/2024.2/include/etc/ap_fixed_base.h"
    return r;
  }


                      inline ap_fixed_base operator<<(int sh) const {
    ap_fixed_base r(0);
    bool isNeg = sh < 0;
    unsigned int ush = isNeg ? -sh : sh;
    if (isNeg) {
      return operator>>(ush);
    } else {
      return operator<<(ush);
    }
  }

                      inline ap_fixed_base operator>>(int sh) const {
    bool isNeg = sh < 0;
    unsigned int ush = isNeg ? -sh : sh;
    if (isNeg) {
      return operator<<(ush);
    } else {
      return operator>>(ush);
    }
  }


  template <int _AP_W2>
                      inline ap_fixed_base operator<<(const ap_int_base<_AP_W2, true>& op2) const {


    int sh = op2.to_int();
    return operator<<(sh);
  }

  template <int _AP_W2>
                      inline ap_fixed_base operator>>(const ap_int_base<_AP_W2, true>& op2) const {
    int sh = op2.to_int();
    return operator>>(sh);
  }


  template <int _AP_W2>
                      inline ap_fixed_base operator<<(const ap_int_base<_AP_W2, false>& op2) const {
    unsigned int sh = op2.to_uint();
    return operator<<(sh);
  }

  template <int _AP_W2>
                      inline ap_fixed_base operator>>(const ap_int_base<_AP_W2, false>& op2) const {
    unsigned int sh = op2.to_uint();
    return operator>>(sh);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline ap_fixed_base operator<<(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          op2) {
    return operator<<(op2.to_ap_int_base());
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline ap_fixed_base operator>>(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          op2) {
    return operator>>(op2.to_ap_int_base());
  }





                      inline ap_fixed_base& operator<<=(const int sh) {
    *this = operator<<(sh);
    return *this;
  }

                      inline ap_fixed_base& operator<<=(const unsigned int sh) {
    *this = operator<<(sh);
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
                      inline ap_fixed_base& operator<<=(const ap_int_base<_AP_W2, _AP_S2>& sh) {
    *this = operator<<(sh.to_int());
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline ap_fixed_base& operator<<=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          sh) {
    *this = operator<<(sh.to_int());
    return *this;
  }


                      inline ap_fixed_base& operator>>=(const int sh) {
    *this = operator>>(sh);
    return *this;
  }

                      inline ap_fixed_base& operator>>=(const unsigned int sh) {
    *this = operator>>(sh);
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
                      inline ap_fixed_base& operator>>=(const ap_int_base<_AP_W2, _AP_S2>& sh) {
    *this = operator>>(sh.to_int());
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline ap_fixed_base& operator>>=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          sh) {
    *this = operator>>(sh.to_int());
    return *this;
  }
# 1652 "C:/Xilinx/Vitis/2024.2/include/etc/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline bool operator >(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V > op2.V; else if (_AP_F > F2) return Base::V > ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V > op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline bool operator <(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V < op2.V; else if (_AP_F > F2) return Base::V < ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V < op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline bool operator >=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V >= op2.V; else if (_AP_F > F2) return Base::V >= ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V >= op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline bool operator <=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V <= op2.V; else if (_AP_F > F2) return Base::V <= ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V <= op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline bool operator ==(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V == op2.V; else if (_AP_F > F2) return Base::V == ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V == op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline bool operator !=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V != op2.V; else if (_AP_F > F2) return Base::V != ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V != op2.V; return false; }





  inline bool operator >(double d) const { return to_double() > d; }
  inline bool operator <(double d) const { return to_double() < d; }
  inline bool operator >=(double d) const { return to_double() >= d; }
  inline bool operator <=(double d) const { return to_double() <= d; }
  inline bool operator ==(double d) const { return to_double() == d; }
  inline bool operator !=(double d) const { return to_double() != d; }


  inline af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator[](
      unsigned index) {
    do { if ((index >= _AP_W)) { fprintf((__acrt_iob_func(2)), "WARNING: " "Attempting to read bit beyond MSB"); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, index);
  }

  template <int _AP_W2, bool _AP_S2>
  inline af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator[](
      const ap_int_base<_AP_W2, _AP_S2>& index) {
    do { if ((index < 0)) { fprintf((__acrt_iob_func(2)), "WARNING: " "Attempting to read bit with negative index"); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);
    do { if ((index >= _AP_W)) { fprintf((__acrt_iob_func(2)), "WARNING: " "Attempting to read bit beyond MSB"); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this,
                                                                index.to_int());
  }

                      inline bool operator[](unsigned index) const {
    do { if ((index >= _AP_W)) { fprintf((__acrt_iob_func(2)), "WARNING: " "Attempting to read bit beyond MSB"); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);
    return (const_cast<ap_fixed_base*>(this)->V).get_bit((index));
  }

  inline af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> bit(
      unsigned index) {
    do { if ((index >= _AP_W)) { fprintf((__acrt_iob_func(2)), "WARNING: " "Attempting to read bit beyond MSB"); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, index);
  }

  template <int _AP_W2, bool _AP_S2>
  inline af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> bit(
      const ap_int_base<_AP_W2, _AP_S2>& index) {
    do { if ((index < 0)) { fprintf((__acrt_iob_func(2)), "WARNING: " "Attempting to read bit with negative index"); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);
    do { if ((index >= _AP_W)) { fprintf((__acrt_iob_func(2)), "WARNING: " "Attempting to read bit beyond MSB"); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this,
                                                                index.to_int());
  }

                      inline bool bit(unsigned index) const {
    do { if ((index >= _AP_W)) { fprintf((__acrt_iob_func(2)), "WARNING: " "Attempting to read bit beyond MSB"); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);
    return (const_cast<ap_fixed_base*>(this)->V).get_bit((index));
  }

  template <int _AP_W2>
  inline af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> get_bit(
      const ap_int_base<_AP_W2, true>& index) {
    do { if ((index < _AP_I - _AP_W)) { fprintf((__acrt_iob_func(2)), "WARNING: " "Attempting to read bit with negative index"); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);

    do { if ((index >= _AP_I)) { fprintf((__acrt_iob_func(2)), "WARNING: " "Attempting to read bit beyond MSB"); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(
        this, index.to_int() + _AP_W - _AP_I);
  }

                      inline bool get_bit(int index) const {
    do { if ((index >= _AP_I)) { fprintf((__acrt_iob_func(2)), "WARNING: " "Attempting to read bit beyond MSB"); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);
    do { if ((index < _AP_I - _AP_W)) { fprintf((__acrt_iob_func(2)), "WARNING: " "Attempting to read bit beyond MSB"); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);
    return (const_cast<ap_fixed_base*>(this)->V).get_bit((index + _AP_W - _AP_I));

  }
# 1738 "C:/Xilinx/Vitis/2024.2/include/etc/ap_fixed_base.h"
  template <int _AP_W2>
                      inline bool get_bit(const ap_int_base<_AP_W2, true>& index) const {
    do { if ((index >= _AP_I)) { fprintf((__acrt_iob_func(2)), "WARNING: " "Attempting to read bit beyond MSB"); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);
    do { if ((index < _AP_I - _AP_W)) { fprintf((__acrt_iob_func(2)), "WARNING: " "Attempting to read bit beyond MSB"); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);
    return (const_cast<ap_fixed_base*>(this)->V).get_bit((index.to_int() + _AP_W - _AP_I));

  }

  inline af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(int Hi,
                                                                      int Lo) {
    do { if (((Hi >= _AP_W) || (Lo >= _AP_W))) { fprintf((__acrt_iob_func(2)), "WARNING: " "Out of bounds in range()"); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);
    return af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, Hi, Lo);
  }


  inline af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      int Hi, int Lo) const {
    do { if (((Hi >= _AP_W) || (Lo >= _AP_W))) { fprintf((__acrt_iob_func(2)), "WARNING: " "Out of bounds in range()"); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);
    return af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(
        const_cast<ap_fixed_base*>(this), Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range() {
    return this->range(_AP_W - 1, 0);
  }

  inline af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range() const {
    return this->range(_AP_W - 1, 0);
  }

  inline af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      int Hi, int Lo) {
    return this->range(Hi, Lo);
  }

  inline af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      int Hi, int Lo) const {
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

                      inline bool is_zero() const { return Base::V == (unsigned long)0; }

                      inline bool is_neg() const {
    if (_AP_S && (Base::V).get_bit((_AP_W - 1))) return true;
    return false;
  }

                      inline int wl() const { return _AP_W; }

                      inline int iwl() const { return _AP_I; }

                      inline ap_q_mode q_mode() const { return _AP_Q; }

                      inline ap_o_mode o_mode() const { return _AP_O; }

                      inline int n_bits() const { return _AP_N; }
# 1838 "C:/Xilinx/Vitis/2024.2/include/etc/ap_fixed_base.h"
  std::string to_string(unsigned char radix = 2, bool sign = _AP_S) const {




    std::string str;
    str.clear();
    char step = 0;
    bool isNeg = sign && (Base::V < 0);


    ap_fixed_base<_AP_W + 1, _AP_I + 1> tmp(*this);
    if (isNeg) {
      tmp = -tmp;
      str += '-';
    }
    std::string prefix;
    switch (radix) {
      case 2:
        prefix = "0b";
        step = 1;
        break;
      case 8:
        prefix = "0o";
        step = 3;
        break;
      case 16:
        prefix = "0x";
        step = 4;
        break;
      default:
        break;
    }

    if (_AP_I > 0) {




      ap_int_base<((_AP_I + 1) > (1) ? (_AP_I + 1) : (1)), false> int_part;




      int_part.V = (tmp.V).range((_AP_W), (_AP_W - _AP_I));

      str += int_part.to_string(radix, false);
    } else {
      str += prefix;
      str += '0';
    }

    ap_fixed_base<((_AP_W - _AP_I) > (1) ? (_AP_W - _AP_I) : (1)), 0, false> frac_part = tmp;

    if (radix == 10) {
      if (frac_part != 0) {
        str += ".";
        while (frac_part != 0) {
          char digit = (frac_part * radix).to_char();
          str += static_cast<char>(digit + '0');
          frac_part *= radix;
        }
      }
    } else {
      if (frac_part != 0) {
        str += ".";
        for (signed i = _AP_W - _AP_I - 1; i >= 0; i -= step) {
          char digit = frac_part.range(i, ((0) > (i - step + 1) ? (0) : (i - step + 1))).to_char();


          int offset = ((0) < (i - step + 1) ? (0) : (i - step + 1));
          digit <<= -offset;
          str += digit < 10 ? static_cast<char>(digit + '0')
                            : static_cast<char>(digit - 10 + 'a');
        }
        if (radix == 16)
          str += "p0";
      }
    }
    return str;
  }
# 1927 "C:/Xilinx/Vitis/2024.2/include/etc/ap_fixed_base.h"
};

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline void b_not(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) {
  ret.V = ~op.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline void b_and(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V & op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline void b_or(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V | op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline void b_xor(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V ^ op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
                    inline void neg(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
  ap_fixed_base<_AP_W2 + !_AP_S2, _AP_I2 + !_AP_S2, true, _AP_Q2, _AP_O2,
                _AP_N2>
      t(0);
  t.V = -op.V;
  ret = t;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
                    inline void lshift(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op,
    int i) {
  enum {
    F2 = _AP_W2 - _AP_I2,
    _AP_I3 = ((_AP_I) > (_AP_I2) ? (_AP_I) : (_AP_I2)),
    _AP_W3 = _AP_I3 + F2,
  };

  ap_fixed_base<_AP_W3, _AP_I3, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> t(0);
  t.V = op.V;
  t.V <<= i;

  ret = t;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
                    inline void rshift(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op,
    int i) {
  enum {
    F = _AP_W - _AP_I,
    F2 = _AP_W2 - _AP_I2,
    F3 = ((F) > (F2) ? (F) : (F2)),
    _AP_W3 = _AP_I2 + F3,
    sh = F - F2,
  };

  ap_fixed_base<_AP_W3, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> t(0);
  t.V = op.V;
  if (sh >= 0)
    t.V <<= (int) sh;
  t.V >>= i;

  ret = t;
}
# 2029 "C:/Xilinx/Vitis/2024.2/include/etc/ap_fixed_base.h"
inline std::string scientificFormat(std::string& input) {
  if (input.length() == 0) return input;

  size_t decPosition = input.find('.');
  if (decPosition == std::string::npos) decPosition = input.length();

  size_t firstNonZeroPos = 0;
  for (; input[firstNonZeroPos] > '9' || input[firstNonZeroPos] < '1';
       firstNonZeroPos++)
    ;

  int exp;
  if (firstNonZeroPos > decPosition)
    exp = decPosition - firstNonZeroPos;
  else
    exp = decPosition - firstNonZeroPos - 1;
  std::string expString = "";
  if (exp == 0)
    ;
  else if (exp < 0) {
    expString += "e-";
    exp = -exp;
  } else
    expString += "e+";

  if (exp < 10 && exp > 0) {
    expString += '0';
    expString += (char)('0' + exp);
  } else if (exp != 0) {
    std::string tmp;

    std::ostringstream oss;
    oss << exp;

    tmp = oss.str();
    expString += tmp;
  }

  int lastNonZeroPos = (int)(input.length() - 1);
  for (; lastNonZeroPos >= 0; --lastNonZeroPos)
    if (input[lastNonZeroPos] <= '9' && input[lastNonZeroPos] > '0') break;

  std::string ans = "";
  ans += input[firstNonZeroPos];
  if (firstNonZeroPos != (size_t)lastNonZeroPos) {
    ans += '.';
    for (int i = firstNonZeroPos + 1; i <= lastNonZeroPos; i++)
      if (input[i] != '.') ans += input[i];
  }

  ans += expString;
  return ans;
}

inline std::string reduceToPrecision(std::string& input, int precision) {
  bool isZero = true;
  size_t inputLen = input.length();
  for (size_t i = 0; i < inputLen && isZero; i++)
    if (input[i] != '.' && input[i] != '0') isZero = false;
  if (isZero) return "0";


  int FirstNonZeroPos = 0;
  int LastNonZeroPos = (int)inputLen - 1;
  int truncBitPosition = 0;
  size_t decPosition = input.find('.');
  for (; input[FirstNonZeroPos] < '1' || input[FirstNonZeroPos] > '9';
       FirstNonZeroPos++)
    ;

  for (; input[LastNonZeroPos] < '1' || input[LastNonZeroPos] > '9';
       LastNonZeroPos--)
    ;

  if (decPosition == std::string::npos) decPosition = inputLen;

  if ((int)decPosition > LastNonZeroPos) {
    if (LastNonZeroPos - FirstNonZeroPos + 1 <= precision) return input;
    truncBitPosition = FirstNonZeroPos + precision;
  } else if ((int)decPosition < FirstNonZeroPos) {
    if (LastNonZeroPos - FirstNonZeroPos + 1 <= precision) {
      if (FirstNonZeroPos - decPosition - 1 < 4) {
        return input;
      } else {
        if (input[0] == '-') {
          std::string tmp = input.substr(1, inputLen - 1);
          return std::string("-") + scientificFormat(tmp);
        } else
          return scientificFormat(input);
      }
    }
    truncBitPosition = FirstNonZeroPos + precision;
  } else {
    if (LastNonZeroPos - FirstNonZeroPos <= precision) return input;
    truncBitPosition = FirstNonZeroPos + precision + 1;
  }



  std::string ans = "";
  std::string dupInput = "0";
  if (input[0] == '-') {
    ans += '-';
    dupInput += input.substr(1, inputLen - 1);
  } else {
    dupInput += input.substr(0, inputLen);
    ++truncBitPosition;
  }


  bool carry = dupInput[truncBitPosition] > '4';
  for (int i = truncBitPosition - 1; i >= 0 && carry; i--) {
    if (dupInput[i] == '.') continue;
    if (dupInput[i] == '9')
      dupInput[i] = '0';
    else {
      ++dupInput[i];
      carry = false;
    }
  }


  if (dupInput[0] == '1')
    FirstNonZeroPos = 0;
  else {
    FirstNonZeroPos = 0;
    while (dupInput[FirstNonZeroPos] < '1' || dupInput[FirstNonZeroPos] > '9')
      ++FirstNonZeroPos;
  }

  unsigned it = FirstNonZeroPos;
  int NValidNumber = 0;
  while (it < dupInput.length()) {
    if (dupInput[it] == '.') {
      ++it;
      continue;
    }
    ++NValidNumber;
    if (NValidNumber > precision) dupInput[it] = '0';
    ++it;
  }


  decPosition = dupInput.find('.');
  if (decPosition == std::string::npos)
    truncBitPosition = (int)dupInput.length();
  else
    for (truncBitPosition = (int)(dupInput.length() - 1); truncBitPosition >= 0;
         --truncBitPosition) {
      if (dupInput[truncBitPosition] == '.') break;
      if (dupInput[truncBitPosition] != '0') {
        truncBitPosition++;
        break;
      }
    }

  if (dupInput[0] == '1')
    dupInput = dupInput.substr(0, truncBitPosition);
  else
    dupInput = dupInput.substr(1, truncBitPosition - 1);

  decPosition = dupInput.find('.');
  if (decPosition != std::string::npos) {
    size_t it = 0;
    for (it = decPosition + 1; dupInput[it] == '0'; it++)
      ;
    if (it - decPosition - 1 < 4) {
      ans += dupInput;
      return ans;
    } else {
      ans += scientificFormat(dupInput);
      return ans;
    }
  } else if ((int)(dupInput.length()) <= precision) {
    ans += dupInput;
    return ans;
  }

  ans += scientificFormat(dupInput);
  return ans;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline void print(
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& x) {
  if (_AP_I > 0) {
    ap_int_base<_AP_I, _AP_S> p1;
    p1.V = x.V >> (_AP_W - _AP_I);
    print(p1.V);
  } else {
    printf("0");
  }
  printf(".");
  if (_AP_I < _AP_W) {
    ap_int_base<_AP_W - _AP_I, false> p2;
    p2.V = (x.V).range((_AP_W - _AP_I), (0));
    print(p2.V, false);
  }
}
# 2240 "C:/Xilinx/Vitis/2024.2/include/etc/ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline std::ostream& operator<<(
    std::ostream& out,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& x) {

  unsigned width = out.width();
  unsigned precision = out.precision();
  char fill = out.fill();
  std::string str = x.to_string(10, _AP_S);
  str = reduceToPrecision(str, precision);
  if (width > str.length()) {
    for (unsigned i = 0; i < width - str.length(); ++i)
      out << fill;
  }
  out << str;
  return out;
}





template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline std::istream& operator>>(
    std::istream& in,
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& x) {
  double d;
  in >> d;
  x = ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(d);
  return in;
}
# 2373 "C:/Xilinx/Vitis/2024.2/include/etc/ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator +(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::plus operator +( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator -(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::minus operator -( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator *(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::mult operator *( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator /(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::div operator /( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator &(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator &( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator |(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator |( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ^(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator ^( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >>(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <<(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator +=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator -=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator *=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator /=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator &=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator |=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ^=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >>=(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <<=(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ==(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator !=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator +(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::plus operator +( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator -(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::minus operator -( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator *(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::mult operator *( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator /(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::div operator /( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator &(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator &( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator |(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator |( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator ^( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >>(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <<(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >>=(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <<=(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator +(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::plus operator +( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator -(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::minus operator -( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator *(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::mult operator *( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator /(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::div operator /( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator &(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator &( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator |(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator |( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator ^( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >>(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <<(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >>=(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <<=(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator +(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::plus operator +( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator -(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::minus operator -( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator *(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::mult operator *( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator /(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::div operator /( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator &(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator &( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator |(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator |( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator ^( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >>(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <<(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >>=(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <<=(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::plus operator +( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::minus operator -( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::mult operator *( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::div operator /( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator &( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator |( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator ^( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::plus operator +( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::minus operator -( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::mult operator *( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::div operator /( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator &( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator |( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator ^( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::plus operator +( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::minus operator -( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::mult operator *( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::div operator /( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator &( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator |( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator ^( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::plus operator +( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::minus operator -( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::mult operator *( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::div operator /( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator &( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator |( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator ^( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::plus operator +( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::minus operator -( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::mult operator *( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::div operator /( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator &( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator |( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator ^( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::plus operator +( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::minus operator -( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::mult operator *( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::div operator /( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator &( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator |( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator ^( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::plus operator +( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::minus operator -( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::mult operator *( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::div operator /( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator &( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator |( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator ^( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::plus operator +( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::minus operator -( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::mult operator *( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::div operator /( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator &( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator |( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator ^( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator !=(op); }
# 2461 "C:/Xilinx/Vitis/2024.2/include/etc/ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::plus operator +( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator +(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::minus operator -( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator -(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::mult operator *( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator *(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::div operator /( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator /(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator &( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator &(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator |( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator |(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator ^( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ^(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }



template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator +=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline ap_int_base<_AP_W2, _AP_S2>& operator +=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator +=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator -=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline ap_int_base<_AP_W2, _AP_S2>& operator -=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator -=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator *=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline ap_int_base<_AP_W2, _AP_S2>& operator *=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator *=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator /=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline ap_int_base<_AP_W2, _AP_S2>& operator /=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator /=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator &=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline ap_int_base<_AP_W2, _AP_S2>& operator &=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator &=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator |=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline ap_int_base<_AP_W2, _AP_S2>& operator |=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator |=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ^=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline ap_int_base<_AP_W2, _AP_S2>& operator ^=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator ^=(op.to_ap_int_base()); }



template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ==(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator ==(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator !=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator >(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline bool operator >( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator >(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator >=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator >=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator <(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline bool operator <( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator <(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator <=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator <=(op); }




template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline bool operator==(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator==(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline bool operator!=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator!=(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline bool operator>(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator<(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline bool operator>=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator<=(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline bool operator<(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator>(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline bool operator<=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator>=(op1);
}
# 11 "C:/Xilinx/Vitis/2024.2/include/ap_fixed.h" 2
# 1 "C:/Xilinx/Vitis/2024.2/include/etc/ap_fixed_ref.h" 1
# 25 "C:/Xilinx/Vitis/2024.2/include/etc/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_bit_ref {



  typedef ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> ref_type;
  ref_type& d_bv;
  int d_index;

 public:
  inline af_bit_ref(
      const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ref)
      : d_bv(ref.d_bv), d_index(ref.d_index) {

    do { if ((d_index < 0)) { fprintf((__acrt_iob_func(2)), "WARNING: " "Index of bit vector  (%d) cannot be negative.", d_index); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);

    do { if ((d_index >= _AP_W)) { fprintf((__acrt_iob_func(2)), "WARNING: " "Index of bit vector (%d) out of range (%d).", d_index, _AP_W); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);


  }

  inline af_bit_ref(ref_type* bv, int index = 0) : d_bv(*bv), d_index(index) {}

  inline af_bit_ref(const ref_type* bv, int index = 0)
      : d_bv(*const_cast<ref_type*>(bv)), d_index(index) {}


  inline operator bool() const { return (d_bv.V).get_bit((d_index)); }



  inline af_bit_ref& operator=(bool val) {
    d_bv.V = _AP_ROOT_op_set_bit(d_bv.V, d_index, val);
    return *this;
  }



  inline af_bit_ref& operator=(const af_bit_ref& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline af_bit_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, bool _AP_S2>
  inline af_bit_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, bool _AP_S2>
  inline af_bit_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    return operator=(val != 0);
  }

  template <int _AP_W2, bool _AP_S2>
  inline af_bit_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=(ap_int_base<_AP_W2, false>(val));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline af_bit_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=(ap_int_base<_AP_W2, false>(val));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline af_bit_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=(ap_int_base<_AP_W2 + _AP_W3, false>(val));
  }




  template <int _AP_W2, int _AP_S2>
  inline ap_concat_ref<1, af_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, op);
  }

  template <int _AP_W2, int _AP_S2>
  inline ap_concat_ref<1, af_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> > operator,(
      const ap_bit_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(*this,
                                                                        op);
  }

  template <int _AP_W2, int _AP_S2>
  inline ap_concat_ref<1, af_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >(
        *this, op);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline ap_concat_ref<1, af_bit_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(*this,
                                                                         op);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline ap_concat_ref<
      1, af_bit_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<
        1, af_bit_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this,
                                                                       op);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline ap_concat_ref<1, af_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                    _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<1, af_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                      _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }




  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline bool operator==(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    return get() == op.get();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline bool operator!=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    return get() != op.get();
  }


  inline bool operator~() const {
    bool bit = (d_bv.V).get_bit((d_index));
    return bit ? false : true;
  }

  inline bool get() const { return (d_bv.V).get_bit((d_index)); }

  inline int length() const { return 1; }


  std::string to_string() const { return get() ? "1" : "0"; }




};




template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline std::ostream& operator<<(
    std::ostream& os,
    const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& x) {
  os << x.to_string();
  return os;
}




template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_range_ref {



  typedef ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> ref_type;
  ref_type& d_bv;
  int l_index;
  int h_index;

 public:

  inline af_range_ref(
      const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ref)
      : d_bv(ref.d_bv), l_index(ref.l_index), h_index(ref.h_index) {}




  inline af_range_ref(ref_type* bv, int h, int l)
      : d_bv(*bv), l_index(l), h_index(h) {

    do { if ((h < 0 || l < 0)) { fprintf((__acrt_iob_func(2)), "WARNING: " "Higher bound(%d) and lower(%d) bound cannot be negative.", h, l); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);


    do { if ((h >= _AP_W || l >= _AP_W)) { fprintf((__acrt_iob_func(2)), "WARNING: " "Higher bound(%d) or lower(%d) bound out of range.", h, l); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);

    do { if ((h < l)) { fprintf((__acrt_iob_func(2)), "WARNING: " "The bits selected will be returned in reverse order."); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);

  }

  inline af_range_ref(const ref_type* bv, int h, int l)
      : d_bv(*const_cast<ref_type*>(bv)), l_index(l), h_index(h) {

    do { if ((h < 0 || l < 0)) { fprintf((__acrt_iob_func(2)), "WARNING: " "Higher bound(%d) and lower(%d) bound cannot be negative.", h, l); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);


    do { if ((h >= _AP_W || l >= _AP_W)) { fprintf((__acrt_iob_func(2)), "WARNING: " "Higher bound(%d) or lower(%d) bound out of range.", h, l); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);

    do { if ((h < l)) { fprintf((__acrt_iob_func(2)), "WARNING: " "The bits selected will be returned in reverse order."); fprintf((__acrt_iob_func(2)), "\n"); } } while (0);

  }
# 266 "C:/Xilinx/Vitis/2024.2/include/etc/ap_fixed_ref.h"
  inline af_range_ref& operator=(const bool val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = _AP_ROOT_op_set_range(d_bv.V, l_index, h_index, loc.V); return *this; }
  inline af_range_ref& operator=(const char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = _AP_ROOT_op_set_range(d_bv.V, l_index, h_index, loc.V); return *this; }
  inline af_range_ref& operator=(const signed char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = _AP_ROOT_op_set_range(d_bv.V, l_index, h_index, loc.V); return *this; }
  inline af_range_ref& operator=(const unsigned char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = _AP_ROOT_op_set_range(d_bv.V, l_index, h_index, loc.V); return *this; }
  inline af_range_ref& operator=(const short val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = _AP_ROOT_op_set_range(d_bv.V, l_index, h_index, loc.V); return *this; }
  inline af_range_ref& operator=(const unsigned short val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = _AP_ROOT_op_set_range(d_bv.V, l_index, h_index, loc.V); return *this; }
  inline af_range_ref& operator=(const int val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = _AP_ROOT_op_set_range(d_bv.V, l_index, h_index, loc.V); return *this; }
  inline af_range_ref& operator=(const unsigned int val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = _AP_ROOT_op_set_range(d_bv.V, l_index, h_index, loc.V); return *this; }
  inline af_range_ref& operator=(const long val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = _AP_ROOT_op_set_range(d_bv.V, l_index, h_index, loc.V); return *this; }
  inline af_range_ref& operator=(const unsigned long val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = _AP_ROOT_op_set_range(d_bv.V, l_index, h_index, loc.V); return *this; }
  inline af_range_ref& operator=(const ap_slong val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = _AP_ROOT_op_set_range(d_bv.V, l_index, h_index, loc.V); return *this; }
  inline af_range_ref& operator=(const ap_ulong val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = _AP_ROOT_op_set_range(d_bv.V, l_index, h_index, loc.V); return *this; }
  inline af_range_ref& operator=(const half val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = _AP_ROOT_op_set_range(d_bv.V, l_index, h_index, loc.V); return *this; }
  inline af_range_ref& operator=(const float val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = _AP_ROOT_op_set_range(d_bv.V, l_index, h_index, loc.V); return *this; }
  inline af_range_ref& operator=(const double val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = _AP_ROOT_op_set_range(d_bv.V, l_index, h_index, loc.V); return *this; }



  inline af_range_ref& operator=(const char* val) {
    const ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = _AP_ROOT_op_set_range(d_bv.V, l_index, h_index, tmp.V);
    return *this;
  }



  template <int _AP_W3, bool _AP_S3>
  inline af_range_ref& operator=(const ap_int_base<_AP_W3, _AP_S3>& val) {
    d_bv.V = _AP_ROOT_op_set_range(d_bv.V, l_index, h_index, val.V);
    return *this;
  }


  template <int _AP_W2, bool _AP_S2>
  inline af_range_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    const ap_int_base<_AP_W2, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, bool _AP_S2>
  inline af_range_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    const ap_int_base<1, false> tmp((bool)val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline af_range_ref& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          val) {
    d_bv.V = _AP_ROOT_op_set_range(d_bv.V, l_index, h_index, val.V);
    return *this;
  }




  inline af_range_ref& operator=(const af_range_ref& val) {
    ap_int_base<_AP_W, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline af_range_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    ap_int_base<_AP_W2, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline af_range_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    ap_int_base<1, false> tmp((bool)val);
    return operator=(tmp);
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline af_range_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    const ap_int_base<_AP_W2 + _AP_W3, false> tmp(val);
    return operator=(tmp);
  }




  template <int _AP_W2, bool _AP_S2>
  inline bool operator==(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop == rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline bool operator!=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline bool operator<(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop < rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline bool operator>(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop > rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline bool operator<=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator>(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline bool operator>=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<(op2));
  }




  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline bool operator==(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop == rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline bool operator!=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline bool operator<(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop < rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline bool operator>(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop > rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline bool operator<=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator>(op2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline bool operator>=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator<(op2));
  }





  template <int _AP_W2, int _AP_S2>
  inline
      ap_concat_ref<_AP_W, af_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(ap_int_base<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, op);
  }


  template <int _AP_W2, int _AP_S2>
  inline ap_concat_ref<_AP_W, af_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(op));
  }


  template <int _AP_W2, int _AP_S2>
  inline ap_concat_ref<_AP_W, af_range_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(op));
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline ap_concat_ref<_AP_W, af_range_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(op));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline
      ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                    af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &op) {
    return ap_concat_ref<
        _AP_W, af_range_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline
      ap_concat_ref<_AP_W, af_range_ref, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(
          const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<
        _AP_W, af_range_ref, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }


  inline operator ap_ulong() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = (d_bv.V).range((h_index), (l_index));
    return ret.to_uint64();
  }

  inline operator ap_int_base<_AP_W, false>() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = (d_bv.V).range((h_index), (l_index));
    return ret;
  }

  inline ap_int_base<_AP_W, false> to_ap_int_base() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = (d_bv.V).range((h_index), (l_index));
    return ret;
  }


  inline char to_char() const {
    return (char)((d_bv.V).range((h_index), (l_index)));
  }

  inline int to_int() const {
    return (int)((d_bv.V).range((h_index), (l_index)));
  }

  inline unsigned to_uint() const {
    return (unsigned)((d_bv.V).range((h_index), (l_index)));
  }

  inline long to_long() const {
    return (long)((d_bv.V).range((h_index), (l_index)));
  }

  inline unsigned long to_ulong() const {
    return (unsigned long)((d_bv.V).range((h_index), (l_index)));
  }

  inline ap_slong to_int64() const {
    return (ap_slong)((d_bv.V).range((h_index), (l_index)));
  }

  inline ap_ulong to_uint64() const {
    return (ap_ulong)((d_bv.V).range((h_index), (l_index)));
  }



  inline ap_int_base<_AP_W, false> operator~() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = (d_bv.V).range((h_index), (l_index));
    return (~ret);
  }

  inline ap_int_base<_AP_W, false> operator!() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = (d_bv.V).range((h_index), (l_index));
    return (!ret);
  }

  inline ap_int_base<_AP_W, false> operator+() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = (d_bv.V).range((h_index), (l_index));
    return ret;
  }

  inline ap_int_base<_AP_W, false> operator-() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = (d_bv.V).range((h_index), (l_index));
    return (-ret);
  }


  inline ap_int_base<_AP_W, false> get() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = (d_bv.V).range((h_index), (l_index));
    return ret;
  }

  template <int _AP_W2>
  inline void set(const ap_int_base<_AP_W2, false>& val) {
    d_bv.V = _AP_ROOT_op_set_range(d_bv.V, l_index, h_index, val.V);
  }

  inline int length() const {
    return h_index >= l_index ? h_index - l_index + 1 : l_index - h_index + 1;
  }


  std::string to_string(signed char rd = 2) const {
    ap_int_base<_AP_W, false> ret;
    ret.V = (d_bv.V).range((h_index), (l_index));
    return ret.to_string(rd);
  }







};




template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline std::ostream& operator<<(
    std::ostream& os,
    const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& x) {
  os << x.to_string();
  return os;
}
# 679 "C:/Xilinx/Vitis/2024.2/include/etc/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator >=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator <=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator ==( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline bool operator !=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
# 725 "C:/Xilinx/Vitis/2024.2/include/etc/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline bool operator >( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline bool operator >( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline bool operator <( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline bool operator <( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != ap_int_base<1, false>(op); }
# 12 "C:/Xilinx/Vitis/2024.2/include/ap_fixed.h" 2





template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
struct ap_fixed : ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> {
  static_assert(_AP_W > 0, "ap_fixed bitwidth must be positive");

  typedef ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> Base;


  inline ap_fixed() = default;


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline ap_fixed(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                      _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline ap_fixed(const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                               _AP_O2, _AP_N2>& op)
      : Base(op) {}
# 68 "C:/Xilinx/Vitis/2024.2/include/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
                      inline ap_fixed(const ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline ap_fixed(const volatile ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}
# 103 "C:/Xilinx/Vitis/2024.2/include/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline ap_fixed(const ap_bit_ref<_AP_W2, _AP_S2>& op) : Base(op) {}


  template <int _AP_W2, bool _AP_S2>
  inline ap_fixed(const ap_range_ref<_AP_W2, _AP_S2>& op) : Base(op) {}


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline ap_fixed(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline ap_fixed(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline ap_fixed(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}





                      inline ap_fixed(bool v) : Base(v) {}
                      inline ap_fixed(char v) : Base(v) {}
                      inline ap_fixed(signed char v) : Base(v) {}
                      inline ap_fixed(unsigned char v) : Base(v) {}
                      inline ap_fixed(short v) : Base(v) {}
                      inline ap_fixed(unsigned short v) : Base(v) {}
                      inline ap_fixed(int v) : Base(v) {}
                      inline ap_fixed(unsigned int v) : Base(v) {}
                      inline ap_fixed(long v) : Base(v) {}
                      inline ap_fixed(unsigned long v) : Base(v) {}
                      inline ap_fixed(ap_slong v) : Base(v) {}
                      inline ap_fixed(ap_ulong v) : Base(v) {}
  inline ap_fixed(half v) : Base(v) {}
  inline ap_fixed(float v) : Base(v) {}
  inline ap_fixed(double v) : Base(v) {}


  inline ap_fixed(const char* s) : Base(s) {}

  inline ap_fixed(const char* s, signed char rd) : Base(s, rd) {}







  ap_fixed &
  operator=(const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &op) = default;
# 170 "C:/Xilinx/Vitis/2024.2/include/ap_fixed.h"
  inline void operator=(
      const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }

  inline ap_fixed& operator=(
      const volatile ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline void operator=(
      const volatile ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }
};





template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
struct ap_ufixed : ap_fixed_base<_AP_W, _AP_I, false, _AP_Q, _AP_O, _AP_N> {
  static_assert(_AP_W > 0, "ap_ufixed bitwidth must be positive");

  typedef ap_fixed_base<_AP_W, _AP_I, false, _AP_Q, _AP_O, _AP_N> Base;


  inline ap_ufixed() = default;


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline ap_ufixed(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                       _AP_O2, _AP_N2>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline ap_ufixed(const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                                _AP_O2, _AP_N2>& op)
      : Base(op) {}
# 241 "C:/Xilinx/Vitis/2024.2/include/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
                      inline ap_ufixed(const ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline ap_ufixed(const volatile ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}
# 273 "C:/Xilinx/Vitis/2024.2/include/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline ap_ufixed(const ap_bit_ref<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline ap_ufixed(const ap_range_ref<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline ap_ufixed(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline ap_ufixed(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline ap_ufixed(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}




                      inline ap_ufixed(bool v) : Base(v) {}
                      inline ap_ufixed(char v) : Base(v) {}
                      inline ap_ufixed(signed char v) : Base(v) {}
                      inline ap_ufixed(unsigned char v) : Base(v) {}
                      inline ap_ufixed(short v) : Base(v) {}
                      inline ap_ufixed(unsigned short v) : Base(v) {}
                      inline ap_ufixed(int v) : Base(v) {}
                      inline ap_ufixed(unsigned int v) : Base(v) {}
                      inline ap_ufixed(long v) : Base(v) {}
                      inline ap_ufixed(unsigned long v) : Base(v) {}
                      inline ap_ufixed(ap_slong v) : Base(v) {}
                      inline ap_ufixed(ap_ulong v) : Base(v) {}
  inline ap_ufixed(half v) : Base(v) {}
  inline ap_ufixed(float v) : Base(v) {}
  inline ap_ufixed(double v) : Base(v) {}


  inline ap_ufixed(const char* s) : Base(s) {}

  inline ap_ufixed(const char* s, signed char rd) : Base(s, rd) {}



  ap_ufixed &
  operator=(const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &op) = default;
# 331 "C:/Xilinx/Vitis/2024.2/include/ap_fixed.h"
  inline void operator=(
      const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }

  inline ap_ufixed& operator=(
      const volatile ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline void operator=(const volatile ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O,
                                                 _AP_N>& op) volatile {
    Base::V = op.V;
  }
};
# 369 "C:/Xilinx/Vitis/2024.2/include/ap_fixed.h"
# 1 "C:/Xilinx/Vitis/2024.2/include/etc/ap_fixed_special.h" 1








# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cstdio" 1 3
# 40 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cstdio" 3
# 10 "C:/Xilinx/Vitis/2024.2/include/etc/ap_fixed_special.h" 2
# 1 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cstdlib" 1 3
# 40 "C:/Xilinx/Vitis/2024.2/tps/mingw/10.0.0/win64.o/nt/include/c++/9.5.0/cstdlib" 3
# 11 "C:/Xilinx/Vitis/2024.2/include/etc/ap_fixed_special.h" 2
# 20 "C:/Xilinx/Vitis/2024.2/include/etc/ap_fixed_special.h"
namespace std {
template<typename _Tp> class complex;
}







namespace std {
# 48 "C:/Xilinx/Vitis/2024.2/include/etc/ap_fixed_special.h"
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
class complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > {
 public:
  typedef ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> _Tp;
  typedef _Tp value_type;




          complex() = default;


          complex(const _Tp &__r, const _Tp &__i = _Tp(0))
      : _M_real(__r), _M_imag(__i) {}


  template <typename _Up>
          complex(const complex<_Up> &__z) : _M_real(__z.real()), _M_imag(__z.imag()) {}


  const _Tp& real() const { return _M_real; }
  const _Tp& imag() const { return _M_imag; }







          void real(_Tp __val) { _M_real = __val; }

          void imag(_Tp __val) { _M_imag = __val; }



          complex<_Tp> &operator=(const _Tp __t) {
    _M_real = __t;
    _M_imag = _Tp(0);
    return *this;
  }



          complex<_Tp> &operator+=(const _Tp &__t) {
    _M_real += __t;
    return *this;
  }



          complex<_Tp> &operator-=(const _Tp &__t) {
    _M_real -= __t;
    return *this;
  }



          complex<_Tp> &operator*=(const _Tp &__t) {
    _M_real *= __t;
    _M_imag *= __t;
    return *this;
  }



          complex<_Tp> &operator/=(const _Tp &__t) {
    _M_real /= __t;
    _M_imag /= __t;
    return *this;
  }


  template <typename _Up>
          complex<_Tp> &operator=(const complex<_Up> &__z) {
    auto tmp1 = __z;
    complex<_Tp> tmp2 = {tmp1.real(), tmp1.imag()};
    *this = tmp2;
    return *this;
  }



  template <typename _Up>
          complex<_Tp> &operator+=(const complex<_Up> &__z) {
    _M_real += __z.real();
    _M_imag += __z.imag();
    return *this;
  }



  template <typename _Up>
          complex<_Tp> &operator-=(const complex<_Up> &__z) {
    _M_real -= __z.real();
    _M_imag -= __z.imag();
    return *this;
  }



  template <typename _Up>
          complex<_Tp> &operator*=(const complex<_Up> &__z) {
    const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
    _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
    _M_real = __r;
    return *this;
  }



  template <typename _Up>
          complex<_Tp> &operator/=(const complex<_Up> &__z) {
    complex<_Tp> cj (__z.real(), -__z.imag());
    complex<_Tp> a = (*this) * cj;
    complex<_Tp> b = cj * __z;
    _M_real = a.real() / b.real();
    _M_imag = a.imag() / b.real();
    return *this;
  }

 private:
  _Tp _M_real;
  _Tp _M_imag;

};
# 190 "C:/Xilinx/Vitis/2024.2/include/etc/ap_fixed_special.h"
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
class complex<ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > {
 public:
  typedef ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> _Tp;
  typedef _Tp value_type;




          complex() = default;


          complex(const _Tp &__r, const _Tp &__i = _Tp(0))
      : _M_real(__r), _M_imag(__i) {}


  template <typename _Up>
          complex(const complex<_Up> &__z) : _M_real(__z.real()), _M_imag(__z.imag()) {}


  const _Tp& real() const { return _M_real; }
  const _Tp& imag() const { return _M_imag; }







          void real(_Tp __val) { _M_real = __val; }

          void imag(_Tp __val) { _M_imag = __val; }



          complex<_Tp> &operator=(const _Tp __t) {
    _M_real = __t;
    _M_imag = _Tp(0);
    return *this;
  }



          complex<_Tp> &operator+=(const _Tp &__t) {
    _M_real += __t;
    return *this;
  }



          complex<_Tp> &operator-=(const _Tp &__t) {
    _M_real -= __t;
    return *this;
  }



          complex<_Tp> &operator*=(const _Tp &__t) {
    _M_real *= __t;
    _M_imag *= __t;
    return *this;
  }



          complex<_Tp> &operator/=(const _Tp &__t) {
    _M_real /= __t;
    _M_imag /= __t;
    return *this;
  }


  template <typename _Up>
          complex<_Tp> &operator=(const complex<_Up> &__z) {
    auto tmp1 = __z;
    complex<_Tp> tmp2 = {tmp1.real(), tmp1.imag()};
    *this = tmp2;
    return *this;
  }



  template <typename _Up>
          complex<_Tp> &operator+=(const complex<_Up> &__z) {
    _M_real += __z.real();
    _M_imag += __z.imag();
    return *this;
  }



  template <typename _Up>
          complex<_Tp> &operator-=(const complex<_Up> &__z) {
    _M_real -= __z.real();
    _M_imag -= __z.imag();
    return *this;
  }



  template <typename _Up>
          complex<_Tp> &operator*=(const complex<_Up> &__z) {
    const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
    _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
    _M_real = __r;
    return *this;
  }



  template <typename _Up>
          complex<_Tp> &operator/=(const complex<_Up> &__z) {
    complex<_Tp> cj (__z.real(), -__z.imag());
    complex<_Tp> a = (*this) * cj;
    complex<_Tp> b = cj * __z;
    _M_real = a.real() / b.real();
    _M_imag = a.imag() / b.real();
    return *this;
  }

 private:
  _Tp _M_real;
  _Tp _M_imag;

};
# 323 "C:/Xilinx/Vitis/2024.2/include/etc/ap_fixed_special.h"
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator==(
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() == __y &&
         __x.imag() == 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator==(
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x == __y.real() &&
         0 == __y.imag();
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator!=(
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() != __y ||
         __x.imag() != 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator!=(
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x != __y.real() ||
         0 != __y.imag();
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator==(
    const complex<ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() == __y &&
         __x.imag() == 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator==(
    const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x == __y.real() &&
         0 == __y.imag();
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator!=(
    const complex<ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() != __y ||
         __x.imag() != 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator!=(
    const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x != __y.real() ||
         0 != __y.imag();
}

}
# 370 "C:/Xilinx/Vitis/2024.2/include/ap_fixed.h" 2
# 3 "D:/Proyectos/tfg_hardware_accelerator/src/forward_fw.hpp" 2
# 1 "C:/Xilinx/Vitis/2024.2/include/ap_int.h" 1
# 4 "D:/Proyectos/tfg_hardware_accelerator/src/forward_fw.hpp" 2





# 1 "d:/Proyectos/tfg_hardware_accelerator/data/mnist_train_data.hpp" 1






static constexpr int NUM_IMAGES = 5000;
static constexpr int N_INPUT = 64;

static const uint8_t mnist_images_train[NUM_IMAGES][N_INPUT] = {
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 139, 124, 0, 0, 0, 0, 21, 167, 186, 154, 46, 0, 0, 0, 127, 132, 14, 64, 100, 0, 0, 15, 139, 0, 0, 94, 69, 0, 0, 21, 127, 21, 105, 115, 4, 0, 0, 7, 162, 163, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 159, 24, 0, 0, 0, 26, 149, 247, 186, 70, 0, 0, 0, 161, 139, 134, 95, 70, 0, 0, 74, 115, 0, 0, 79, 68, 0, 0, 101, 131, 35, 85, 152, 18, 0, 0, 3, 122, 173, 78, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 95, 3, 0, 0, 0, 4, 111, 202, 211, 26, 0, 0, 0, 31, 219, 65, 171, 26, 0, 0, 0, 115, 193, 74, 205, 6, 0, 0, 0, 153, 165, 180, 111, 0, 0, 0, 0, 105, 230, 106, 2, 0, 0, 0, 0, 7, 41, 4, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 126, 101, 0, 0, 0, 0, 0, 89, 234, 225, 24, 0, 0, 0, 77, 203, 76, 179, 74, 0, 0, 0, 211, 106, 22, 166, 17, 0, 0, 0, 225, 145, 177, 119, 0, 0, 0, 0, 133, 167, 66, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 117, 125, 19, 0, 0, 0, 109, 226, 225, 219, 92, 0, 0, 14, 222, 116, 41, 138, 92, 0, 0, 80, 126, 0, 0, 114, 92, 0, 0, 102, 101, 0, 29, 181, 49, 0, 0, 56, 236, 196, 194, 78, 0, 0, 0, 2, 62, 63, 29, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 80, 76, 32, 0, 0, 0, 0, 152, 252, 196, 236, 40, 0, 0, 14, 228, 156, 14, 98, 115, 0, 0, 52, 165, 0, 0, 5, 156, 0, 0, 37, 209, 55, 0, 31, 151, 0, 0, 0, 75, 171, 186, 179, 17, 0, 0, 0, 0, 8, 59, 31, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 102, 61, 0, 0, 0, 0, 36, 201, 252, 242, 37, 0, 0, 0, 135, 229, 221, 179, 111, 0, 0, 61, 247, 103, 10, 94, 124, 0, 0, 142, 120, 69, 66, 172, 33, 0, 0, 87, 206, 171, 126, 19, 0, 0, 0, 2, 62, 54, 6, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 102, 129, 30, 0, 0, 0, 35, 120, 15, 54, 115, 74, 0, 0, 106, 10, 0, 0, 0, 111, 26, 0, 99, 17, 0, 0, 0, 88, 63, 0, 30, 122, 8, 0, 0, 107, 35, 0, 0, 30, 106, 106, 111, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 123, 60, 0, 0, 0, 0, 73, 231, 240, 200, 5, 0, 0, 0, 85, 225, 103, 228, 22, 0, 0, 0, 180, 120, 35, 220, 27, 0, 0, 0, 186, 77, 73, 200, 10, 0, 0, 0, 100, 226, 218, 110, 0, 0, 0, 0, 1, 43, 29, 4, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 100, 93, 0, 0, 0, 0, 0, 93, 251, 242, 8, 0, 0, 0, 42, 176, 120, 208, 8, 0, 0, 0, 172, 45, 0, 135, 21, 0, 0, 20, 142, 0, 58, 160, 1, 0, 0, 0, 176, 194, 135, 21, 0, 0, 0, 0, 15, 42, 5, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 123, 126, 7, 0, 0, 0, 30, 188, 196, 172, 15, 0, 0, 0, 86, 230, 41, 174, 14, 0, 0, 0, 171, 79, 19, 166, 0, 0, 0, 8, 166, 17, 111, 146, 0, 0, 0, 2, 175, 243, 149, 16, 0, 0, 0, 0, 11, 53, 12, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 143, 133, 19, 0, 0, 0, 0, 173, 135, 116, 173, 19, 0, 0, 6, 168, 22, 2, 78, 103, 0, 0, 26, 148, 0, 0, 23, 131, 0, 0, 4, 174, 5, 3, 112, 72, 0, 0, 0, 125, 125, 144, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 177, 89, 0, 0, 0, 0, 39, 215, 184, 224, 0, 0, 0, 0, 131, 201, 47, 210, 0, 0, 0, 0, 218, 74, 3, 150, 0, 0, 0, 0, 216, 63, 113, 147, 0, 0, 0, 0, 159, 189, 129, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 108, 37, 21, 0, 0, 0, 70, 91, 55, 74, 121, 77, 0, 0, 118, 20, 0, 0, 3, 143, 15, 0, 77, 74, 0, 0, 0, 129, 50, 0, 9, 154, 85, 15, 28, 150, 25, 0, 0, 11, 79, 123, 108, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 42, 4, 0, 0, 0, 9, 129, 218, 210, 176, 105, 6, 0, 75, 242, 145, 31, 30, 213, 52, 0, 114, 116, 2, 0, 37, 182, 20, 0, 105, 113, 30, 73, 182, 68, 0, 0, 6, 114, 160, 126, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 132, 101, 0, 0, 0, 0, 44, 181, 50, 76, 28, 0, 0, 0, 118, 126, 2, 33, 77, 0, 0, 0, 133, 0, 0, 62, 67, 0, 0, 0, 127, 12, 9, 121, 15, 0, 0, 0, 55, 141, 127, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 164, 45, 0, 0, 0, 26, 146, 249, 227, 134, 0, 0, 0, 161, 189, 92, 88, 142, 0, 0, 86, 147, 3, 15, 140, 84, 0, 0, 131, 137, 49, 149, 172, 8, 0, 0, 28, 181, 185, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 112, 188, 147, 41, 10, 0, 10, 204, 179, 74, 80, 157, 62, 0, 86, 165, 17, 0, 0, 178, 62, 0, 125, 122, 0, 0, 15, 191, 21, 0, 73, 213, 84, 40, 146, 130, 3, 0, 2, 146, 187, 159, 87, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 14, 14, 0, 0, 0, 0, 95, 155, 125, 113, 149, 26, 0, 29, 151, 21, 0, 0, 155, 41, 0, 120, 31, 0, 0, 54, 99, 0, 0, 113, 42, 10, 82, 152, 9, 0, 0, 11, 110, 115, 56, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 157, 60, 0, 0, 0, 0, 17, 197, 206, 164, 0, 0, 0, 0, 95, 235, 84, 199, 0, 0, 0, 0, 179, 106, 11, 182, 1, 0, 0, 0, 199, 79, 103, 138, 0, 0, 0, 0, 130, 189, 156, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 37, 7, 0, 0, 0, 0, 0, 0, 204, 111, 0, 0, 0, 0, 54, 112, 76, 196, 15, 0, 0, 0, 166, 125, 0, 126, 58, 0, 0, 0, 196, 33, 0, 136, 56, 0, 0, 0, 198, 70, 96, 190, 10, 0, 0, 0, 42, 118, 93, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 113, 71, 1, 0, 0, 5, 155, 169, 124, 147, 72, 0, 0, 67, 107, 4, 8, 58, 137, 0, 0, 138, 19, 0, 0, 17, 140, 0, 0, 133, 63, 0, 0, 88, 83, 0, 0, 24, 176, 171, 155, 130, 2, 0, 0, 0, 14, 45, 22, 1, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 178, 114, 33, 0, 0, 0, 4, 186, 96, 94, 176, 70, 0, 0, 49, 130, 0, 0, 33, 157, 0, 0, 105, 54, 0, 0, 5, 190, 15, 0, 86, 147, 35, 29, 129, 108, 0, 0, 6, 109, 169, 167, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 105, 24, 0, 0, 0, 0, 31, 126, 16, 105, 0, 0, 0, 0, 80, 35, 0, 83, 6, 0, 0, 0, 77, 0, 0, 51, 39, 0, 0, 0, 83, 0, 0, 63, 11, 0, 0, 0, 55, 115, 103, 47, 0, 0, 0, 0, 0, 29, 26, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 97, 71, 1, 0, 0, 0, 0, 48, 230, 128, 109, 0, 0, 0, 0, 80, 180, 18, 140, 0, 0, 0, 0, 155, 75, 0, 125, 8, 0, 0, 0, 135, 38, 0, 120, 27, 0, 0, 0, 61, 129, 116, 132, 0, 0, 0, 0, 1, 23, 42, 5, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 126, 77, 0, 0, 0, 0, 0, 150, 158, 185, 174, 19, 0, 0, 8, 179, 17, 22, 119, 138, 7, 0, 82, 103, 0, 0, 0, 185, 47, 0, 103, 107, 0, 0, 26, 170, 25, 0, 9, 131, 164, 156, 152, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 13, 8, 0, 0, 0, 0, 0, 60, 72, 43, 0, 0, 0, 0, 26, 113, 0, 77, 0, 0, 0, 0, 63, 105, 0, 94, 0, 0, 0, 0, 88, 94, 3, 91, 0, 0, 0, 0, 51, 126, 85, 102, 0, 0, 0, 0, 0, 63, 80, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 128, 143, 3, 0, 0, 0, 72, 147, 35, 121, 19, 0, 0, 0, 154, 46, 96, 139, 6, 0, 0, 6, 144, 0, 6, 153, 0, 0, 0, 9, 154, 11, 12, 127, 0, 0, 0, 0, 71, 140, 124, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 36, 87, 95, 4, 0, 0, 41, 135, 132, 3, 19, 84, 0, 0, 76, 18, 2, 0, 0, 85, 3, 0, 75, 10, 0, 0, 0, 89, 10, 0, 40, 67, 0, 0, 0, 101, 0, 0, 0, 88, 110, 101, 117, 35, 0, 0, 0, 0, 28, 63, 27, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 126, 99, 7, 0, 0, 0, 1, 163, 114, 110, 170, 54, 0, 0, 64, 129, 3, 0, 41, 173, 11, 0, 126, 29, 0, 0, 0, 141, 56, 0, 90, 116, 16, 7, 41, 151, 22, 0, 0, 75, 144, 149, 131, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 67, 77, 81, 57, 0, 0, 47, 90, 28, 23, 6, 133, 39, 0, 96, 0, 0, 0, 18, 103, 22, 0, 61, 67, 68, 71, 67, 20, 0, 0, 0, 2, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 143, 126, 98, 10, 0, 0, 0, 174, 131, 30, 160, 117, 0, 0, 41, 224, 46, 0, 52, 191, 11, 0, 78, 176, 5, 0, 33, 200, 13, 0, 61, 231, 119, 53, 131, 125, 3, 0, 0, 75, 152, 153, 116, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 145, 143, 170, 34, 0, 0, 0, 117, 230, 43, 145, 112, 0, 0, 5, 200, 137, 0, 77, 142, 0, 0, 16, 229, 49, 1, 104, 117, 0, 0, 16, 229, 106, 119, 224, 65, 0, 0, 5, 136, 189, 130, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 110, 83, 20, 0, 0, 0, 0, 116, 45, 117, 175, 72, 0, 0, 3, 143, 3, 0, 54, 115, 0, 0, 15, 171, 0, 0, 150, 38, 0, 0, 4, 189, 89, 106, 168, 0, 0, 0, 0, 42, 118, 114, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 180, 119, 1, 0, 0, 0, 16, 169, 118, 206, 77, 0, 0, 0, 122, 191, 5, 118, 143, 0, 0, 29, 201, 37, 1, 121, 104, 0, 0, 76, 183, 60, 137, 205, 25, 0, 0, 19, 152, 188, 116, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 154, 49, 0, 0, 0, 0, 52, 186, 101, 193, 0, 0, 0, 0, 140, 119, 3, 161, 14, 0, 0, 0, 140, 20, 3, 140, 0, 0, 0, 0, 168, 107, 126, 186, 0, 0, 0, 0, 63, 175, 154, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 139, 79, 0, 0, 0, 0, 38, 173, 132, 145, 8, 0, 0, 0, 163, 136, 0, 73, 69, 0, 0, 0, 168, 9, 0, 76, 36, 0, 0, 0, 136, 0, 60, 138, 2, 0, 0, 0, 104, 147, 104, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 137, 54, 0, 0, 0, 0, 15, 152, 168, 233, 56, 0, 0, 0, 110, 150, 8, 54, 134, 0, 0, 21, 180, 21, 0, 34, 130, 0, 0, 58, 119, 0, 36, 147, 56, 0, 0, 7, 158, 158, 130, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 163, 163, 31, 0, 0, 0, 9, 160, 148, 159, 145, 0, 0, 0, 122, 223, 21, 42, 155, 0, 0, 44, 238, 88, 35, 163, 112, 0, 0, 77, 211, 114, 215, 205, 16, 0, 0, 10, 144, 173, 77, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 176, 145, 5, 0, 0, 0, 56, 207, 164, 214, 87, 0, 0, 4, 198, 225, 18, 128, 131, 0, 0, 93, 230, 61, 18, 164, 95, 0, 0, 122, 236, 163, 190, 211, 19, 0, 0, 9, 131, 170, 95, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 124, 168, 94, 1, 0, 0, 0, 161, 169, 56, 180, 110, 0, 0, 35, 205, 38, 0, 43, 193, 12, 0, 110, 130, 0, 0, 23, 201, 15, 0, 89, 180, 60, 53, 141, 124, 2, 0, 1, 106, 172, 170, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 141, 74, 0, 0, 0, 0, 99, 183, 72, 169, 118, 0, 0, 17, 207, 71, 0, 20, 187, 33, 0, 113, 110, 0, 0, 17, 175, 20, 0, 79, 163, 59, 63, 160, 93, 0, 0, 1, 81, 109, 105, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 87, 185, 127, 0, 0, 0, 40, 225, 217, 83, 98, 0, 0, 0, 72, 158, 115, 0, 6, 89, 0, 0, 76, 177, 21, 0, 18, 206, 17, 0, 18, 213, 137, 18, 45, 183, 8, 0, 0, 27, 119, 180, 182, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 106, 0, 0, 0, 0, 0, 39, 208, 222, 98, 0, 0, 0, 0, 152, 146, 131, 208, 3, 40, 0, 0, 229, 43, 36, 207, 12, 0, 0, 0, 231, 113, 169, 159, 0, 12, 0, 0, 93, 143, 93, 9, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 129, 23, 0, 0, 0, 15, 142, 108, 46, 152, 25, 0, 0, 134, 142, 0, 0, 145, 47, 0, 61, 150, 13, 2, 78, 125, 2, 0, 119, 95, 38, 124, 140, 16, 0, 0, 22, 124, 125, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 122, 119, 67, 0, 0, 0, 0, 177, 160, 59, 158, 77, 0, 0, 14, 229, 64, 0, 51, 147, 0, 0, 49, 183, 0, 0, 69, 139, 0, 0, 43, 217, 32, 8, 152, 91, 0, 0, 0, 146, 194, 177, 123, 0, 0, 0, 0, 4, 38, 25, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 51, 0, 0, 0, 23, 190, 142, 169, 203, 82, 0, 0, 100, 153, 113, 9, 71, 169, 0, 0, 189, 101, 0, 0, 88, 162, 0, 0, 129, 190, 98, 109, 209, 71, 0, 0, 1, 96, 143, 132, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 133, 156, 99, 15, 0, 0, 0, 79, 149, 26, 134, 196, 18, 0, 0, 122, 96, 0, 8, 127, 133, 2, 0, 113, 105, 0, 0, 4, 235, 56, 0, 48, 207, 117, 65, 95, 211, 37, 0, 0, 41, 116, 146, 113, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 102, 140, 17, 0, 0, 0, 22, 153, 96, 41, 163, 0, 0, 1, 149, 126, 0, 2, 178, 0, 0, 109, 89, 0, 20, 143, 80, 0, 0, 165, 32, 65, 167, 115, 1, 0, 0, 112, 153, 102, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 54, 25, 0, 0, 0, 0, 54, 173, 75, 38, 173, 48, 0, 12, 144, 50, 0, 0, 148, 45, 0, 118, 49, 0, 20, 122, 79, 0, 0, 111, 130, 113, 128, 77, 0, 0, 0, 1, 28, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 90, 9, 0, 0, 0, 22, 149, 199, 227, 138, 0, 0, 7, 144, 179, 20, 84, 170, 0, 0, 78, 173, 17, 51, 195, 60, 0, 0, 152, 135, 121, 203, 145, 0, 0, 0, 56, 122, 94, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 127, 157, 138, 9, 0, 0, 0, 163, 99, 25, 90, 2, 0, 0, 14, 158, 6, 4, 102, 81, 0, 0, 60, 90, 0, 0, 16, 143, 0, 0, 54, 98, 0, 21, 118, 62, 0, 0, 6, 134, 157, 136, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 158, 127, 32, 0, 0, 0, 6, 191, 149, 85, 195, 31, 0, 0, 56, 211, 35, 0, 92, 121, 0, 0, 124, 128, 0, 0, 1, 208, 40, 0, 74, 200, 69, 54, 87, 191, 28, 0, 1, 99, 163, 170, 131, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 11, 0, 0, 0, 0, 39, 157, 164, 63, 0, 3, 0, 43, 171, 33, 136, 51, 0, 0, 16, 169, 49, 93, 160, 0, 0, 0, 47, 182, 128, 132, 31, 0, 0, 0, 1, 56, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 61, 171, 114, 0, 0, 0, 0, 46, 145, 65, 156, 16, 0, 0, 0, 43, 210, 27, 159, 25, 0, 0, 0, 174, 161, 34, 207, 5, 0, 0, 0, 182, 113, 161, 182, 0, 0, 0, 0, 53, 170, 151, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 28, 28, 46, 0, 0, 0, 35, 174, 166, 186, 162, 0, 0, 2, 159, 151, 2, 40, 164, 0, 0, 90, 135, 3, 18, 162, 58, 0, 0, 167, 80, 72, 174, 134, 0, 0, 0, 84, 181, 132, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 73, 1, 0, 0, 0, 0, 59, 232, 192, 110, 0, 0, 0, 0, 126, 185, 21, 146, 3, 0, 0, 0, 181, 112, 0, 106, 15, 0, 0, 0, 133, 132, 3, 126, 15, 0, 0, 0, 7, 105, 185, 165, 1, 0, 0, 0, 0, 1, 54, 18, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 130, 8, 0, 0, 0, 0, 0, 189, 230, 183, 154, 8, 0, 0, 16, 233, 78, 18, 92, 68, 0, 0, 4, 176, 5, 0, 0, 136, 0, 0, 0, 172, 127, 74, 92, 152, 0, 0, 0, 19, 109, 170, 150, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 135, 27, 0, 0, 0, 0, 43, 179, 179, 95, 0, 0, 0, 31, 175, 59, 75, 107, 0, 0, 12, 183, 71, 39, 187, 19, 0, 0, 95, 115, 47, 171, 91, 0, 0, 0, 79, 171, 127, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 113, 53, 2, 0, 0, 0, 0, 99, 149, 143, 162, 4, 0, 0, 0, 172, 63, 1, 128, 61, 0, 0, 0, 162, 6, 0, 60, 77, 0, 0, 0, 174, 43, 41, 161, 28, 0, 0, 0, 42, 152, 142, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 82, 128, 49, 0, 0, 0, 0, 48, 198, 211, 17, 0, 0, 0, 75, 180, 56, 169, 14, 0, 0, 45, 178, 28, 66, 181, 26, 0, 0, 129, 69, 48, 167, 60, 5, 0, 0, 77, 177, 130, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 99, 159, 0, 0, 0, 0, 17, 151, 209, 191, 51, 0, 0, 0, 131, 157, 31, 83, 82, 0, 0, 32, 169, 7, 10, 166, 37, 0, 0, 78, 139, 15, 131, 142, 0, 0, 0, 9, 150, 167, 68, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 177, 93, 0, 0, 0, 0, 15, 181, 147, 181, 31, 0, 0, 0, 105, 220, 19, 153, 82, 0, 0, 0, 199, 126, 50, 206, 53, 0, 0, 0, 181, 172, 210, 160, 1, 0, 0, 0, 44, 139, 85, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 94, 25, 0, 0, 0, 0, 17, 188, 170, 142, 4, 0, 0, 0, 81, 171, 18, 122, 49, 0, 0, 0, 143, 30, 0, 58, 63, 0, 0, 0, 154, 15, 17, 133, 11, 0, 0, 0, 125, 144, 127, 34, 0, 0, 0, 0, 13, 57, 9, 0, 0, 0 },
    { 0, 0, 0, 0, 35, 4, 0, 0, 0, 0, 0, 29, 192, 76, 0, 0, 0, 0, 13, 126, 39, 130, 0, 0, 0, 0, 110, 102, 6, 141, 0, 0, 0, 0, 169, 18, 69, 154, 0, 0, 0, 0, 173, 66, 168, 75, 0, 0, 0, 0, 59, 121, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 151, 203, 171, 19, 0, 0, 31, 167, 139, 139, 131, 4, 0, 8, 195, 67, 75, 175, 8, 0, 0, 79, 191, 131, 175, 59, 0, 0, 0, 19, 95, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 112, 102, 18, 0, 0, 0, 0, 172, 94, 80, 166, 2, 0, 0, 0, 159, 15, 0, 148, 32, 0, 0, 0, 171, 61, 0, 110, 42, 0, 0, 0, 126, 139, 0, 127, 50, 0, 0, 0, 17, 148, 181, 139, 0, 0, 0, 0, 0, 8, 57, 10, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 181, 46, 0, 0, 0, 9, 122, 190, 182, 82, 0, 0, 0, 103, 199, 26, 93, 103, 0, 0, 24, 196, 35, 0, 121, 75, 0, 0, 87, 118, 8, 95, 196, 15, 0, 0, 26, 170, 177, 97, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 174, 50, 0, 0, 0, 4, 119, 164, 147, 111, 0, 0, 0, 102, 199, 16, 136, 63, 0, 0, 51, 187, 28, 4, 168, 27, 0, 0, 135, 87, 0, 81, 190, 0, 0, 0, 38, 149, 161, 126, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 120, 119, 43, 0, 0, 0, 0, 152, 106, 20, 157, 48, 0, 0, 0, 180, 56, 0, 81, 104, 0, 0, 0, 196, 31, 31, 179, 37, 0, 0, 0, 178, 60, 166, 142, 0, 0, 0, 0, 56, 154, 106, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 65, 41, 19, 0, 0, 0, 20, 142, 183, 184, 123, 0, 0, 8, 171, 160, 13, 81, 97, 0, 0, 137, 97, 0, 1, 134, 46, 0, 0, 180, 24, 0, 82, 172, 5, 0, 0, 36, 150, 139, 88, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 95, 152, 57, 0, 0, 0, 0, 120, 190, 195, 92, 0, 0, 0, 21, 200, 72, 180, 40, 0, 0, 1, 147, 193, 147, 121, 0, 0, 0, 22, 246, 216, 182, 32, 0, 0, 0, 72, 188, 156, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 97, 42, 0, 0, 0, 2, 121, 140, 41, 197, 51, 0, 0, 87, 198, 10, 1, 181, 36, 0, 19, 210, 55, 0, 93, 130, 0, 0, 87, 138, 10, 92, 184, 25, 0, 0, 66, 184, 163, 77, 8, 0, 0, 0, 0, 4, 1, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 172, 119, 0, 0, 0, 13, 125, 199, 98, 185, 0, 0, 0, 143, 211, 39, 34, 157, 0, 0, 99, 194, 30, 8, 156, 76, 0, 0, 181, 89, 31, 139, 197, 11, 0, 0, 96, 189, 171, 81, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 146, 122, 0, 0, 0, 0, 75, 205, 120, 178, 0, 0, 0, 85, 209, 60, 77, 129, 0, 0, 57, 207, 58, 51, 195, 24, 0, 0, 169, 84, 63, 191, 104, 0, 0, 0, 121, 189, 150, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 101, 7, 0, 0, 0, 0, 8, 179, 199, 170, 0, 0, 0, 0, 56, 212, 78, 216, 0, 0, 0, 0, 126, 155, 84, 208, 0, 0, 0, 0, 122, 188, 194, 139, 0, 0, 0, 0, 26, 142, 107, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 160, 110, 0, 0, 0, 4, 116, 199, 88, 183, 0, 0, 0, 126, 207, 35, 36, 178, 0, 0, 90, 199, 30, 8, 140, 87, 0, 0, 176, 102, 36, 119, 195, 11, 0, 0, 84, 183, 157, 60, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 124, 157, 11, 0, 0, 0, 19, 158, 120, 108, 88, 0, 0, 1, 142, 166, 3, 19, 162, 0, 0, 93, 147, 8, 0, 82, 125, 0, 0, 181, 41, 13, 97, 172, 25, 0, 0, 81, 149, 139, 61, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 132, 165, 145, 26, 0, 0, 2, 173, 66, 3, 41, 120, 0, 0, 55, 93, 2, 0, 5, 121, 0, 0, 123, 1, 0, 4, 124, 75, 0, 0, 102, 60, 15, 122, 170, 5, 0, 0, 7, 135, 189, 119, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 76, 2, 0, 0, 0, 0, 29, 158, 104, 125, 58, 0, 0, 0, 115, 80, 0, 7, 113, 0, 0, 0, 129, 1, 0, 71, 41, 0, 0, 5, 121, 0, 36, 111, 0, 0, 0, 0, 138, 143, 113, 11, 0, 0, 0, 0, 13, 53, 5, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 35, 4, 0, 0, 0, 0, 0, 95, 223, 31, 0, 0, 0, 8, 123, 163, 107, 103, 0, 0, 0, 107, 223, 23, 83, 119, 0, 0, 43, 207, 47, 67, 203, 27, 0, 0, 135, 159, 115, 195, 87, 0, 0, 0, 47, 127, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 155, 63, 0, 0, 0, 4, 95, 227, 227, 19, 0, 0, 0, 99, 227, 75, 163, 0, 0, 0, 35, 223, 79, 12, 183, 0, 0, 0, 95, 147, 47, 151, 167, 0, 0, 0, 51, 187, 179, 67, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79, 161, 133, 0, 0, 0, 27, 161, 191, 180, 101, 0, 0, 0, 170, 203, 35, 174, 37, 0, 0, 111, 175, 14, 72, 195, 3, 0, 0, 188, 80, 36, 185, 112, 0, 0, 0, 66, 155, 152, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 166, 101, 2, 0, 0, 0, 5, 154, 104, 121, 86, 0, 0, 0, 93, 167, 1, 27, 116, 0, 0, 0, 208, 54, 4, 126, 89, 0, 0, 17, 187, 39, 150, 156, 8, 0, 0, 8, 162, 151, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 107, 122, 17, 0, 0, 0, 0, 49, 137, 93, 72, 0, 0, 0, 21, 161, 27, 87, 72, 0, 0, 0, 152, 77, 15, 159, 16, 0, 0, 29, 138, 9, 145, 126, 0, 0, 0, 69, 115, 142, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 175, 33, 0, 0, 0, 0, 17, 242, 200, 205, 160, 14, 0, 0, 52, 202, 23, 42, 142, 129, 0, 0, 39, 215, 29, 0, 0, 185, 34, 0, 6, 202, 153, 38, 22, 189, 55, 0, 0, 16, 100, 179, 188, 94, 7, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 128, 98, 0, 0, 0, 3, 85, 153, 56, 167, 0, 0, 0, 105, 141, 9, 65, 96, 0, 0, 54, 116, 1, 107, 140, 0, 0, 0, 142, 63, 123, 123, 18, 0, 0, 0, 118, 125, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 140, 109, 0, 0, 0, 0, 84, 146, 61, 129, 0, 0, 0, 50, 173, 17, 125, 47, 0, 0, 14, 169, 44, 143, 101, 0, 0, 0, 106, 106, 126, 104, 3, 0, 0, 0, 97, 146, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 159, 48, 0, 0, 0, 0, 84, 149, 162, 68, 0, 0, 0, 64, 180, 15, 161, 52, 0, 0, 6, 177, 45, 14, 199, 22, 0, 0, 56, 140, 23, 133, 171, 1, 0, 0, 38, 179, 163, 81, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 1, 28, 0, 0, 0, 0, 0, 0, 48, 159, 0, 0, 0, 0, 0, 34, 163, 175, 0, 0, 0, 0, 13, 151, 49, 160, 0, 0, 0, 0, 138, 71, 140, 101, 0, 0, 0, 33, 166, 141, 108, 8, 0, 0, 0, 41, 101, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 154, 167, 24, 0, 0, 0, 37, 189, 89, 159, 61, 0, 0, 0, 165, 157, 0, 167, 39, 0, 0, 49, 164, 9, 88, 210, 1, 0, 0, 93, 105, 73, 203, 93, 0, 0, 0, 21, 176, 139, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 116, 49, 0, 0, 0, 0, 63, 205, 78, 142, 0, 0, 0, 0, 115, 96, 0, 148, 0, 0, 0, 0, 144, 56, 3, 130, 0, 0, 0, 0, 126, 71, 75, 108, 0, 0, 0, 0, 44, 173, 159, 20, 0, 0, 0, 0, 0, 37, 24, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 152, 13, 0, 0, 0, 0, 50, 152, 121, 41, 0, 0, 0, 15, 153, 25, 131, 12, 0, 0, 0, 137, 83, 57, 139, 0, 0, 0, 18, 137, 17, 159, 49, 0, 0, 0, 95, 48, 131, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 111, 73, 0, 0, 0, 0, 47, 151, 56, 122, 0, 0, 0, 51, 150, 20, 15, 115, 0, 0, 9, 150, 24, 24, 144, 31, 0, 0, 56, 66, 24, 161, 92, 0, 0, 0, 83, 93, 146, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 154, 17, 0, 0, 0, 0, 66, 160, 144, 26, 0, 0, 0, 30, 182, 25, 143, 28, 0, 0, 0, 178, 87, 84, 192, 1, 0, 0, 33, 148, 63, 173, 63, 0, 0, 0, 38, 166, 126, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 106, 27, 0, 0, 0, 0, 0, 151, 65, 116, 148, 7, 0, 0, 13, 127, 0, 2, 85, 101, 0, 0, 2, 123, 0, 0, 0, 121, 50, 0, 0, 135, 3, 0, 0, 110, 29, 0, 0, 74, 120, 79, 114, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 149, 35, 0, 0, 0, 0, 63, 166, 151, 94, 0, 0, 0, 57, 172, 23, 123, 70, 0, 0, 17, 169, 27, 110, 154, 1, 0, 0, 89, 92, 107, 139, 16, 0, 0, 0, 72, 161, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 104, 86, 0, 0, 0, 0, 38, 171, 36, 130, 10, 0, 0, 0, 91, 121, 0, 109, 14, 0, 0, 0, 136, 70, 1, 122, 2, 0, 0, 0, 112, 74, 45, 136, 0, 0, 0, 0, 40, 158, 150, 26, 0, 0, 0, 0, 0, 37, 25, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 76, 124, 35, 0, 0, 0, 67, 180, 90, 86, 19, 0, 0, 81, 163, 30, 19, 88, 0, 0, 30, 102, 79, 3, 97, 5, 0, 0, 95, 5, 8, 102, 76, 0, 0, 0, 53, 127, 115, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 107, 123, 16, 0, 0, 0, 0, 114, 102, 211, 180, 1, 0, 0, 0, 157, 7, 76, 227, 31, 0, 0, 6, 192, 12, 0, 137, 81, 0, 0, 3, 224, 117, 14, 141, 23, 0, 0, 0, 36, 157, 151, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 122, 94, 25, 0, 0, 0, 0, 152, 74, 28, 110, 71, 0, 0, 52, 100, 0, 0, 2, 135, 17, 0, 120, 19, 24, 0, 0, 144, 57, 0, 91, 129, 119, 5, 46, 182, 18, 0, 0, 17, 61, 139, 132, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 55, 168, 42, 0, 0, 0, 36, 159, 90, 86, 22, 0, 0, 54, 156, 72, 2, 66, 0, 0, 35, 118, 11, 6, 103, 18, 0, 0, 95, 14, 37, 125, 79, 0, 0, 0, 84, 160, 120, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 48, 110, 105, 2, 0, 0, 20, 203, 190, 102, 144, 109, 0, 0, 133, 161, 17, 0, 33, 174, 0, 0, 147, 96, 4, 0, 34, 152, 0, 0, 107, 90, 0, 6, 117, 98, 0, 0, 11, 159, 191, 174, 109, 0, 0, 0, 0, 7, 47, 15, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 65, 86, 9, 0, 0, 0, 0, 113, 123, 41, 79, 0, 0, 0, 0, 130, 13, 0, 65, 3, 0, 0, 0, 82, 0, 0, 14, 53, 0, 0, 1, 73, 0, 0, 1, 80, 0, 0, 0, 69, 62, 62, 89, 18, 0, 0, 0, 3, 37, 43, 8, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 14, 0, 0, 0, 0, 7, 85, 164, 162, 102, 0, 0, 0, 124, 150, 19, 0, 93, 0, 0, 72, 111, 24, 0, 49, 55, 0, 31, 125, 0, 0, 51, 132, 0, 0, 31, 51, 0, 28, 69, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 115, 75, 6, 0, 0, 0, 0, 125, 164, 189, 151, 0, 0, 0, 0, 167, 72, 73, 219, 5, 0, 0, 0, 158, 55, 7, 197, 29, 0, 0, 0, 140, 86, 18, 205, 24, 0, 0, 0, 40, 178, 182, 96, 0, 0, 0, 0, 0, 25, 27, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 100, 170, 122, 2, 0, 0, 0, 119, 202, 48, 93, 94, 0, 0, 25, 178, 48, 0, 30, 149, 0, 0, 130, 49, 0, 0, 44, 125, 0, 0, 141, 52, 0, 28, 154, 53, 0, 0, 18, 151, 162, 142, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 108, 102, 35, 0, 0, 0, 71, 194, 33, 1, 112, 0, 0, 1, 155, 55, 0, 0, 110, 0, 0, 48, 83, 0, 0, 66, 72, 0, 0, 56, 89, 0, 58, 134, 8, 0, 0, 2, 114, 140, 96, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 151, 73, 0, 0, 0, 10, 111, 145, 87, 154, 0, 0, 0, 122, 130, 5, 2, 121, 0, 0, 58, 94, 0, 0, 24, 109, 0, 0, 143, 7, 0, 56, 147, 23, 0, 0, 77, 108, 103, 104, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 85, 74, 7, 54, 0, 0, 3, 150, 34, 0, 0, 112, 19, 0, 53, 91, 0, 0, 0, 93, 15, 0, 92, 21, 0, 0, 18, 93, 0, 0, 70, 44, 0, 27, 126, 25, 0, 0, 5, 103, 98, 89, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 148, 67, 0, 0, 0, 7, 136, 145, 96, 101, 0, 0, 0, 91, 185, 9, 29, 104, 0, 0, 15, 196, 26, 2, 112, 39, 0, 0, 54, 126, 14, 121, 126, 0, 0, 0, 16, 166, 152, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 139, 74, 0, 0, 0, 0, 64, 133, 114, 123, 0, 0, 0, 0, 123, 45, 26, 138, 7, 0, 0, 0, 134, 0, 0, 43, 80, 0, 0, 0, 133, 23, 0, 39, 75, 0, 0, 0, 33, 121, 111, 107, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 111, 26, 0, 0, 0, 0, 81, 159, 131, 99, 0, 0, 0, 0, 69, 114, 42, 62, 0, 0, 0, 40, 145, 0, 118, 0, 0, 0, 0, 131, 42, 77, 92, 0, 0, 0, 90, 129, 131, 65, 0, 0, 0, 0, 33, 63, 38, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 110, 160, 62, 0, 0, 0, 0, 69, 197, 45, 106, 27, 0, 0, 0, 155, 98, 0, 22, 90, 0, 0, 0, 171, 10, 0, 32, 113, 0, 0, 0, 169, 30, 62, 176, 53, 0, 0, 0, 62, 166, 144, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 93, 21, 0, 0, 0, 0, 0, 96, 5, 74, 0, 0, 0, 0, 19, 72, 0, 64, 0, 0, 0, 0, 57, 46, 9, 78, 0, 0, 0, 0, 64, 38, 84, 55, 0, 0, 0, 0, 30, 118, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 169, 183, 16, 0, 0, 0, 44, 214, 203, 218, 103, 0, 0, 0, 141, 196, 43, 202, 63, 0, 0, 29, 218, 47, 132, 237, 0, 0, 0, 83, 226, 154, 244, 158, 0, 0, 0, 44, 183, 175, 73, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 166, 40, 0, 0, 0, 18, 144, 243, 235, 72, 0, 0, 0, 120, 244, 91, 177, 37, 0, 0, 3, 221, 105, 118, 222, 1, 0, 0, 19, 251, 187, 239, 141, 0, 0, 0, 1, 125, 168, 91, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 134, 143, 110, 3, 0, 0, 93, 229, 251, 166, 159, 0, 0, 17, 228, 195, 99, 126, 96, 0, 0, 120, 196, 55, 118, 212, 22, 0, 0, 112, 250, 238, 250, 129, 0, 0, 0, 58, 182, 161, 91, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 177, 133, 0, 0, 0, 0, 41, 204, 96, 184, 3, 0, 0, 0, 119, 203, 11, 174, 4, 0, 0, 0, 182, 106, 79, 155, 0, 0, 0, 0, 198, 139, 203, 84, 0, 0, 0, 0, 100, 175, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 125, 96, 0, 0, 0, 0, 1, 72, 147, 212, 31, 0, 0, 0, 78, 180, 126, 199, 15, 0, 0, 16, 193, 30, 37, 196, 0, 0, 0, 53, 152, 15, 155, 131, 0, 0, 0, 10, 159, 180, 73, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 77, 121, 38, 0, 0, 0, 58, 168, 223, 160, 74, 0, 0, 31, 155, 113, 62, 38, 118, 0, 0, 139, 17, 3, 0, 5, 154, 0, 0, 140, 7, 0, 0, 79, 98, 0, 0, 53, 157, 122, 137, 80, 0, 0, 0, 0, 23, 36, 11, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 89, 21, 25, 1, 0, 0, 18, 146, 88, 6, 219, 58, 0, 0, 121, 187, 6, 56, 161, 15, 0, 27, 208, 41, 95, 159, 4, 0, 0, 57, 184, 141, 181, 43, 0, 0, 0, 5, 106, 84, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 99, 155, 3, 0, 0, 0, 1, 124, 248, 238, 36, 0, 0, 0, 93, 233, 129, 175, 12, 0, 0, 18, 244, 121, 115, 196, 0, 0, 0, 26, 238, 127, 224, 114, 0, 0, 0, 0, 153, 189, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 166, 49, 0, 0, 0, 4, 123, 247, 248, 61, 0, 0, 0, 107, 232, 96, 179, 41, 0, 0, 18, 229, 95, 98, 193, 0, 0, 0, 54, 242, 182, 221, 102, 0, 0, 0, 11, 176, 181, 79, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 100, 46, 58, 0, 0, 0, 112, 230, 144, 26, 207, 32, 0, 23, 228, 123, 3, 0, 202, 47, 0, 100, 235, 120, 49, 98, 173, 10, 0, 40, 244, 252, 239, 222, 52, 0, 0, 0, 36, 77, 45, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 157, 92, 0, 0, 0, 0, 83, 215, 246, 244, 89, 0, 0, 11, 220, 245, 105, 157, 189, 0, 0, 134, 248, 117, 46, 183, 189, 0, 0, 189, 237, 166, 230, 252, 124, 0, 0, 44, 139, 151, 109, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 99, 122, 19, 0, 0, 0, 110, 222, 214, 133, 132, 0, 0, 1, 171, 147, 27, 8, 156, 0, 0, 6, 154, 4, 0, 41, 137, 0, 0, 39, 106, 0, 39, 161, 44, 0, 0, 22, 195, 172, 139, 66, 0, 0, 0, 0, 34, 24, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 113, 185, 42, 0, 0, 0, 45, 189, 248, 248, 120, 0, 0, 6, 189, 253, 125, 212, 115, 0, 0, 77, 244, 100, 86, 238, 68, 0, 0, 121, 238, 135, 227, 233, 12, 0, 0, 25, 168, 189, 154, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 61, 81, 48, 0, 0, 0, 0, 150, 184, 206, 243, 61, 0, 0, 20, 234, 93, 60, 223, 132, 0, 0, 56, 202, 13, 0, 139, 100, 0, 0, 56, 218, 44, 65, 176, 16, 0, 0, 12, 198, 238, 127, 34, 0, 0, 0, 0, 28, 51, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134, 83, 0, 0, 0, 0, 7, 123, 252, 223, 0, 0, 0, 0, 113, 243, 232, 231, 0, 0, 0, 2, 235, 169, 155, 206, 0, 0, 0, 7, 240, 175, 234, 167, 0, 0, 0, 0, 103, 188, 120, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 105, 16, 0, 0, 0, 0, 70, 157, 181, 213, 81, 0, 0, 7, 157, 33, 10, 60, 174, 7, 0, 61, 101, 0, 0, 8, 152, 4, 0, 75, 112, 0, 2, 102, 73, 0, 0, 17, 179, 153, 139, 73, 0, 0, 0, 0, 24, 47, 10, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 109, 0, 0, 0, 0, 9, 131, 252, 218, 0, 0, 0, 0, 95, 244, 230, 223, 0, 0, 0, 1, 216, 219, 176, 218, 1, 0, 0, 20, 252, 237, 247, 139, 0, 0, 0, 0, 136, 167, 57, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 47, 14, 0, 0, 0, 20, 128, 197, 173, 138, 0, 0, 0, 156, 175, 24, 110, 132, 0, 0, 98, 162, 10, 42, 193, 33, 0, 0, 174, 96, 75, 196, 136, 0, 0, 0, 67, 151, 129, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 35, 0, 0, 0, 2, 57, 165, 210, 146, 0, 0, 0, 110, 185, 116, 229, 39, 0, 0, 83, 132, 13, 168, 124, 0, 0, 0, 146, 151, 161, 143, 18, 0, 0, 0, 8, 68, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 55, 44, 0, 0, 0, 1, 70, 201, 221, 167, 0, 0, 0, 99, 207, 87, 144, 96, 0, 0, 64, 197, 34, 23, 188, 13, 0, 0, 165, 108, 59, 160, 133, 0, 0, 0, 71, 162, 151, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 182, 93, 7, 0, 0, 0, 0, 137, 61, 122, 103, 0, 0, 0, 0, 150, 59, 15, 138, 0, 0, 0, 0, 126, 116, 0, 121, 23, 0, 0, 0, 63, 159, 0, 120, 30, 0, 0, 0, 1, 87, 160, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79, 161, 3, 0, 0, 0, 5, 120, 182, 197, 108, 0, 0, 0, 88, 201, 38, 106, 151, 0, 0, 54, 183, 38, 35, 178, 81, 0, 0, 153, 111, 60, 192, 164, 2, 0, 0, 75, 188, 172, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 79, 2, 0, 0, 45, 166, 215, 238, 224, 48, 0, 0, 185, 175, 40, 171, 120, 11, 0, 62, 162, 3, 44, 214, 27, 0, 0, 121, 135, 39, 168, 175, 0, 0, 0, 29, 171, 201, 116, 20, 0, 0, 0, 0, 7, 15, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 13, 22, 7, 0, 0, 37, 171, 228, 205, 220, 43, 0, 0, 162, 170, 62, 203, 149, 1, 0, 109, 228, 45, 113, 225, 101, 0, 0, 109, 236, 131, 228, 189, 8, 0, 0, 8, 102, 106, 42, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 80, 125, 25, 0, 0, 0, 108, 215, 251, 251, 90, 6, 0, 10, 236, 235, 216, 251, 165, 15, 0, 77, 210, 72, 83, 251, 48, 0, 0, 125, 170, 50, 171, 200, 10, 0, 0, 20, 170, 198, 102, 10, 0, 0, 0, 0, 6, 11, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 98, 3, 0, 0, 0, 31, 174, 149, 133, 207, 38, 0, 7, 168, 150, 38, 112, 119, 3, 0, 84, 133, 7, 175, 154, 35, 0, 0, 84, 140, 81, 228, 140, 3, 0, 0, 10, 91, 105, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 126, 81, 0, 0, 0, 0, 0, 163, 133, 146, 186, 11, 0, 0, 7, 202, 30, 7, 137, 76, 0, 0, 10, 176, 3, 0, 98, 113, 0, 0, 0, 201, 47, 67, 174, 44, 0, 0, 0, 107, 183, 133, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 157, 21, 0, 0, 0, 0, 0, 48, 240, 51, 0, 0, 0, 0, 5, 150, 227, 65, 0, 0, 0, 0, 73, 207, 189, 67, 0, 0, 0, 0, 51, 201, 202, 44, 0, 0, 0, 0, 29, 157, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 108, 176, 51, 0, 0, 0, 47, 180, 171, 219, 127, 0, 0, 11, 182, 194, 9, 171, 90, 0, 0, 111, 159, 12, 81, 220, 22, 0, 0, 152, 158, 150, 220, 128, 0, 0, 0, 42, 143, 103, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 114, 125, 107, 2, 0, 0, 0, 123, 94, 22, 33, 104, 0, 0, 0, 147, 14, 0, 0, 104, 0, 0, 47, 97, 0, 0, 4, 113, 0, 0, 45, 104, 0, 8, 100, 55, 0, 0, 0, 125, 155, 147, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 119, 112, 54, 0, 0, 0, 6, 162, 50, 41, 160, 47, 0, 0, 34, 138, 0, 0, 53, 119, 0, 0, 38, 138, 0, 0, 29, 128, 0, 0, 21, 166, 7, 4, 121, 55, 0, 0, 0, 118, 173, 169, 95, 0, 0, 0, 0, 0, 40, 39, 1, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 61, 0, 0, 0, 23, 119, 204, 152, 179, 0, 0, 26, 184, 194, 44, 121, 105, 0, 0, 180, 109, 1, 102, 234, 16, 0, 0, 149, 143, 121, 196, 92, 0, 0, 0, 7, 91, 92, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 108, 33, 0, 0, 0, 0, 103, 245, 220, 222, 6, 0, 0, 0, 157, 157, 90, 245, 36, 0, 0, 0, 164, 94, 3, 185, 50, 0, 0, 0, 148, 111, 26, 178, 9, 0, 0, 0, 60, 185, 182, 74, 0, 0, 0, 0, 0, 37, 26, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 118, 68, 6, 0, 0, 0, 146, 116, 3, 39, 96, 5, 0, 41, 150, 10, 0, 0, 115, 27, 0, 108, 45, 0, 0, 0, 143, 17, 0, 104, 54, 0, 14, 99, 103, 0, 0, 7, 126, 128, 147, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 128, 147, 70, 0, 0, 0, 0, 181, 27, 19, 145, 34, 0, 0, 13, 173, 0, 0, 38, 111, 0, 0, 8, 182, 4, 0, 4, 162, 0, 0, 0, 189, 96, 0, 68, 129, 0, 0, 0, 22, 123, 159, 150, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 89, 50, 3, 0, 0, 0, 0, 31, 106, 145, 115, 0, 0, 0, 0, 0, 114, 15, 117, 0, 0, 0, 0, 7, 116, 2, 121, 0, 0, 0, 0, 49, 135, 54, 126, 0, 0, 0, 0, 24, 157, 154, 29, 0, 0, 0, 0, 0, 32, 18, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 129, 123, 0, 0, 0, 0, 34, 184, 114, 168, 38, 0, 0, 0, 150, 122, 0, 103, 60, 0, 0, 28, 160, 3, 5, 151, 10, 0, 0, 43, 144, 3, 112, 127, 0, 0, 0, 0, 138, 165, 68, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 97, 19, 0, 0, 0, 0, 51, 197, 208, 167, 15, 0, 0, 0, 140, 99, 29, 65, 83, 0, 0, 0, 144, 8, 0, 69, 72, 0, 0, 3, 156, 0, 16, 148, 9, 0, 0, 0, 100, 141, 165, 81, 0, 0, 0, 0, 0, 34, 21, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 147, 67, 0, 0, 0, 20, 138, 72, 4, 109, 0, 0, 2, 157, 113, 0, 0, 111, 0, 0, 36, 119, 0, 0, 74, 67, 0, 0, 48, 122, 1, 71, 128, 3, 0, 0, 2, 125, 145, 90, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 33, 67, 9, 0, 0, 0, 78, 161, 144, 166, 59, 0, 0, 0, 151, 38, 45, 82, 68, 0, 0, 46, 103, 0, 0, 74, 59, 0, 0, 71, 79, 0, 1, 124, 19, 0, 0, 6, 130, 145, 150, 104, 0, 0, 0, 0, 2, 28, 35, 2, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 117, 99, 4, 0, 0, 0, 3, 130, 228, 180, 116, 0, 0, 0, 123, 185, 45, 5, 160, 11, 0, 90, 120, 7, 0, 7, 141, 0, 0, 126, 44, 0, 11, 105, 101, 0, 0, 47, 176, 169, 162, 89, 0, 0, 0, 0, 32, 57, 10, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 70, 2, 0, 0, 0, 122, 190, 203, 177, 96, 0, 0, 65, 204, 169, 36, 49, 184, 0, 0, 190, 93, 0, 0, 56, 183, 0, 0, 157, 163, 96, 115, 198, 100, 0, 0, 16, 140, 161, 94, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 25, 25, 5, 0, 0, 0, 98, 228, 188, 230, 175, 8, 0, 6, 206, 137, 9, 62, 230, 42, 0, 90, 183, 8, 70, 188, 130, 4, 0, 115, 205, 135, 241, 170, 10, 0, 0, 10, 160, 175, 55, 0, 0, 0, 0, 0, 3, 6, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 86, 126, 120, 41, 0, 0, 12, 187, 128, 38, 60, 87, 2, 0, 73, 131, 3, 53, 171, 0, 0, 0, 90, 83, 0, 16, 159, 0, 0, 0, 34, 172, 17, 38, 172, 0, 0, 0, 0, 78, 173, 192, 108, 0, 0, 0, 0, 0, 25, 48, 7, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 122, 154, 33, 0, 0, 2, 159, 213, 89, 111, 101, 0, 0, 39, 205, 75, 0, 102, 70, 0, 0, 99, 106, 0, 6, 158, 21, 0, 0, 89, 146, 29, 105, 191, 2, 0, 0, 2, 127, 181, 127, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 56, 163, 155, 0, 0, 0, 0, 91, 235, 144, 217, 16, 0, 0, 10, 207, 117, 0, 131, 55, 0, 0, 51, 162, 2, 0, 125, 67, 0, 0, 45, 195, 41, 79, 199, 24, 0, 0, 2, 127, 189, 160, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 53, 23, 0, 0, 0, 0, 47, 226, 249, 235, 69, 0, 0, 0, 135, 192, 84, 142, 86, 0, 0, 0, 208, 67, 66, 212, 22, 0, 0, 2, 211, 79, 206, 121, 0, 0, 0, 0, 165, 204, 53, 0, 0, 0, 0, 0, 17, 19, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 84, 112, 109, 33, 0, 0, 0, 159, 217, 137, 134, 159, 4, 0, 26, 215, 55, 0, 2, 172, 24, 0, 89, 109, 0, 0, 47, 145, 2, 0, 76, 127, 0, 34, 184, 53, 0, 0, 4, 164, 204, 164, 62, 0, 0, 0, 0, 12, 47, 10, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 68, 141, 32, 0, 0, 0, 2, 169, 166, 151, 181, 116, 3, 0, 62, 160, 9, 0, 10, 195, 39, 0, 95, 106, 0, 0, 17, 157, 7, 0, 66, 170, 60, 56, 145, 89, 0, 0, 0, 73, 144, 135, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 18, 50, 36, 0, 0, 0, 15, 173, 197, 195, 221, 66, 0, 0, 120, 133, 16, 11, 50, 153, 0, 0, 187, 40, 0, 0, 9, 169, 0, 0, 116, 117, 21, 13, 113, 108, 0, 0, 3, 122, 175, 166, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 139, 160, 68, 0, 0, 0, 0, 127, 210, 28, 151, 25, 0, 0, 0, 176, 115, 0, 68, 102, 0, 0, 0, 201, 66, 0, 17, 167, 0, 0, 0, 200, 95, 8, 79, 119, 0, 0, 0, 62, 166, 170, 132, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 64, 143, 123, 13, 0, 0, 0, 123, 145, 3, 34, 120, 0, 0, 2, 168, 19, 0, 0, 123, 0, 0, 59, 103, 0, 0, 36, 114, 0, 0, 42, 135, 8, 41, 157, 28, 0, 0, 0, 93, 165, 145, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 163, 137, 9, 0, 0, 0, 129, 181, 30, 77, 126, 0, 0, 51, 179, 31, 0, 5, 164, 0, 0, 161, 42, 0, 0, 16, 179, 0, 0, 136, 82, 1, 21, 126, 101, 0, 0, 10, 160, 181, 177, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 125, 153, 5, 0, 0, 0, 71, 186, 96, 109, 111, 0, 0, 20, 198, 80, 0, 1, 178, 0, 0, 143, 78, 0, 0, 71, 116, 0, 0, 130, 114, 29, 68, 172, 24, 0, 0, 10, 135, 153, 129, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87, 147, 30, 0, 0, 0, 0, 65, 103, 49, 154, 0, 0, 0, 0, 107, 25, 0, 116, 0, 0, 0, 0, 100, 0, 4, 116, 0, 0, 0, 0, 125, 4, 74, 114, 0, 0, 0, 0, 74, 147, 97, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 29, 0, 0, 0, 0, 41, 147, 144, 154, 125, 24, 0, 15, 168, 82, 0, 1, 131, 37, 0, 112, 42, 0, 0, 46, 119, 0, 0, 117, 41, 35, 115, 158, 21, 0, 0, 16, 123, 114, 41, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 134, 109, 67, 1, 0, 0, 0, 142, 58, 5, 68, 124, 2, 0, 0, 150, 11, 0, 0, 135, 29, 0, 4, 151, 0, 0, 0, 126, 22, 0, 4, 166, 11, 3, 71, 105, 0, 0, 0, 67, 149, 141, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 106, 144, 80, 0, 0, 0, 60, 186, 72, 5, 133, 29, 0, 19, 187, 70, 0, 0, 146, 30, 0, 114, 75, 0, 0, 75, 108, 0, 0, 126, 56, 5, 88, 169, 15, 0, 0, 21, 148, 157, 87, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 86, 23, 0, 0, 0, 0, 117, 223, 199, 233, 55, 0, 0, 26, 228, 122, 15, 107, 201, 29, 0, 100, 160, 3, 6, 94, 179, 18, 0, 80, 229, 166, 186, 203, 48, 0, 0, 0, 37, 67, 52, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 168, 69, 0, 0, 0, 0, 69, 229, 149, 172, 6, 0, 0, 15, 197, 169, 18, 112, 72, 0, 0, 99, 148, 6, 1, 128, 113, 0, 0, 106, 66, 5, 100, 211, 41, 0, 0, 20, 169, 179, 142, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 24, 36, 0, 0, 0, 0, 0, 39, 204, 179, 0, 0, 0, 0, 129, 189, 76, 171, 23, 0, 0, 18, 230, 67, 0, 108, 65, 0, 0, 101, 119, 0, 0, 110, 115, 0, 0, 103, 136, 65, 85, 191, 94, 0, 0, 9, 110, 126, 122, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 107, 91, 5, 0, 0, 0, 89, 201, 70, 87, 117, 0, 0, 0, 184, 107, 0, 25, 171, 0, 0, 49, 137, 1, 0, 54, 122, 0, 0, 65, 120, 0, 7, 144, 47, 0, 0, 6, 144, 128, 168, 81, 0, 0, 0, 0, 9, 52, 27, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 116, 90, 64, 83, 86, 1, 0, 95, 68, 3, 6, 0, 121, 33, 0, 102, 21, 0, 0, 0, 130, 34, 0, 22, 111, 36, 10, 71, 83, 0, 0, 0, 12, 55, 74, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 165, 62, 0, 0, 0, 0, 65, 213, 205, 150, 0, 0, 0, 0, 179, 182, 27, 158, 0, 0, 0, 20, 212, 33, 3, 167, 11, 0, 0, 12, 189, 83, 129, 206, 12, 0, 0, 0, 51, 140, 154, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 188, 115, 0, 0, 0, 0, 71, 228, 60, 171, 12, 0, 0, 1, 193, 143, 0, 144, 51, 0, 0, 50, 202, 18, 8, 163, 77, 0, 0, 73, 190, 81, 164, 213, 28, 0, 0, 12, 152, 172, 79, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 85, 17, 0, 0, 0, 0, 3, 94, 61, 69, 0, 0, 0, 0, 41, 102, 42, 87, 0, 0, 0, 0, 92, 73, 50, 89, 0, 0, 0, 0, 102, 72, 82, 58, 0, 0, 0, 0, 14, 106, 87, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 147, 107, 0, 0, 0, 0, 19, 182, 189, 231, 8, 0, 0, 0, 140, 196, 35, 203, 49, 0, 0, 28, 206, 28, 28, 214, 27, 0, 0, 59, 152, 21, 130, 235, 8, 0, 0, 12, 168, 189, 175, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 135, 185, 103, 52, 4, 0, 0, 52, 105, 25, 87, 110, 122, 17, 0, 119, 21, 0, 10, 59, 131, 14, 0, 41, 137, 114, 129, 118, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 146, 139, 46, 0, 0, 0, 25, 213, 155, 135, 232, 34, 0, 0, 70, 135, 4, 8, 151, 99, 0, 0, 112, 145, 0, 0, 88, 123, 0, 0, 39, 218, 115, 83, 197, 58, 0, 0, 0, 72, 172, 169, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79, 161, 77, 0, 0, 0, 0, 91, 235, 168, 207, 73, 0, 0, 0, 203, 157, 3, 154, 126, 0, 0, 14, 224, 38, 70, 238, 42, 0, 0, 38, 179, 68, 209, 200, 0, 0, 0, 0, 140, 189, 129, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 66, 112, 35, 0, 0, 0, 67, 183, 159, 98, 61, 0, 0, 31, 177, 77, 122, 133, 24, 0, 0, 139, 17, 0, 0, 85, 161, 0, 0, 139, 65, 75, 131, 188, 90, 0, 0, 7, 106, 107, 33, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 21, 35, 0, 0, 0, 18, 120, 203, 191, 231, 46, 0, 0, 147, 208, 61, 32, 208, 31, 0, 63, 197, 33, 59, 188, 42, 0, 0, 122, 128, 65, 214, 139, 0, 0, 0, 48, 95, 95, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 99, 188, 150, 5, 0, 0, 0, 45, 229, 251, 251, 110, 0, 0, 3, 159, 248, 226, 239, 182, 0, 0, 98, 239, 107, 88, 219, 140, 0, 0, 115, 237, 137, 220, 220, 50, 0, 0, 68, 165, 147, 102, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 160, 130, 0, 0, 0, 0, 80, 221, 249, 237, 0, 0, 0, 8, 214, 228, 126, 239, 24, 0, 0, 48, 179, 22, 69, 245, 30, 0, 0, 30, 193, 59, 128, 216, 0, 0, 0, 0, 107, 189, 124, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 60, 131, 9, 0, 0, 13, 153, 245, 237, 239, 130, 0, 0, 84, 238, 155, 54, 92, 189, 0, 0, 185, 114, 7, 7, 111, 173, 0, 0, 139, 231, 185, 194, 210, 74, 0, 0, 0, 44, 88, 53, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 171, 168, 7, 0, 0, 0, 120, 189, 253, 253, 92, 0, 0, 80, 251, 243, 225, 253, 140, 0, 0, 141, 193, 30, 13, 174, 122, 0, 0, 119, 240, 182, 162, 230, 109, 0, 0, 0, 91, 138, 178, 111, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 65, 140, 168, 52, 0, 0, 0, 63, 233, 229, 185, 186, 19, 0, 0, 196, 238, 84, 28, 245, 55, 0, 98, 245, 105, 10, 161, 161, 7, 0, 126, 238, 142, 172, 231, 45, 0, 0, 17, 140, 147, 136, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 100, 16, 0, 0, 0, 35, 126, 209, 217, 119, 0, 0, 28, 201, 175, 41, 78, 171, 0, 0, 158, 119, 3, 0, 59, 177, 0, 0, 165, 188, 129, 123, 187, 86, 0, 0, 0, 30, 50, 50, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 109, 124, 61, 0, 0, 0, 6, 159, 18, 2, 117, 25, 0, 0, 26, 133, 0, 0, 71, 86, 0, 0, 0, 122, 0, 0, 129, 73, 0, 0, 0, 149, 42, 80, 159, 2, 0, 0, 0, 57, 164, 116, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 168, 61, 0, 0, 0, 0, 0, 93, 81, 118, 0, 0, 0, 0, 37, 126, 19, 105, 0, 0, 0, 0, 121, 44, 42, 111, 0, 0, 0, 0, 119, 20, 89, 68, 0, 0, 0, 0, 60, 122, 75, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 81, 53, 0, 0, 0, 0, 70, 215, 252, 250, 98, 0, 0, 44, 223, 221, 151, 214, 148, 0, 0, 150, 226, 54, 51, 233, 153, 0, 0, 59, 238, 195, 157, 252, 85, 0, 0, 0, 40, 119, 140, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 116, 91, 0, 0, 0, 0, 6, 148, 217, 155, 57, 0, 0, 0, 76, 205, 115, 65, 111, 0, 0, 0, 195, 78, 0, 69, 73, 0, 0, 0, 207, 36, 21, 145, 10, 0, 0, 0, 177, 166, 153, 45, 0, 0, 0, 0, 31, 61, 11, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131, 90, 0, 0, 0, 0, 16, 146, 71, 162, 43, 0, 0, 0, 102, 146, 0, 89, 93, 0, 0, 0, 182, 42, 0, 99, 48, 0, 0, 9, 190, 13, 74, 119, 1, 0, 0, 3, 138, 152, 77, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 78, 178, 145, 3, 0, 0, 0, 167, 167, 144, 240, 85, 0, 0, 34, 183, 26, 5, 152, 91, 0, 0, 135, 65, 0, 5, 152, 41, 0, 0, 146, 75, 22, 126, 190, 5, 0, 0, 39, 169, 184, 137, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 110, 163, 96, 1, 0, 0, 0, 116, 178, 29, 131, 91, 0, 0, 16, 203, 59, 0, 15, 149, 0, 0, 54, 144, 0, 0, 85, 141, 0, 0, 54, 144, 31, 106, 194, 35, 0, 0, 25, 163, 174, 100, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 107, 72, 0, 0, 0, 0, 38, 188, 250, 180, 0, 0, 0, 0, 172, 139, 177, 158, 0, 0, 0, 7, 189, 15, 25, 201, 0, 0, 0, 11, 175, 1, 23, 186, 0, 0, 0, 0, 141, 176, 168, 70, 0, 0, 0, 0, 4, 41, 23, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 151, 111, 8, 0, 0, 0, 0, 127, 99, 115, 151, 0, 0, 0, 0, 131, 119, 8, 159, 35, 0, 0, 0, 179, 8, 0, 67, 123, 0, 0, 0, 187, 31, 35, 139, 91, 0, 0, 0, 67, 163, 147, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 107, 143, 0, 0, 0, 0, 3, 100, 252, 224, 45, 0, 0, 0, 78, 218, 117, 126, 150, 3, 0, 23, 213, 77, 0, 6, 146, 4, 0, 83, 149, 1, 39, 120, 61, 0, 0, 26, 162, 169, 122, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 116, 60, 0, 0, 0, 0, 1, 149, 167, 176, 53, 0, 0, 0, 40, 194, 17, 63, 71, 0, 0, 0, 134, 136, 3, 127, 27, 0, 0, 0, 180, 99, 89, 177, 0, 0, 0, 0, 141, 226, 153, 21, 0, 0, 0, 0, 19, 62, 10, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 125, 115, 50, 0, 0, 0, 2, 194, 143, 144, 241, 71, 0, 0, 67, 188, 21, 13, 121, 169, 0, 0, 172, 59, 0, 0, 87, 173, 0, 0, 132, 150, 69, 69, 164, 75, 0, 0, 3, 89, 137, 111, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 155, 143, 18, 0, 0, 0, 46, 171, 82, 180, 122, 0, 0, 0, 99, 79, 0, 107, 136, 0, 0, 35, 33, 0, 22, 194, 31, 0, 0, 146, 37, 26, 155, 136, 0, 0, 0, 81, 175, 163, 84, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 52, 91, 64, 9, 0, 0, 0, 120, 248, 231, 186, 117, 0, 0, 3, 212, 159, 63, 15, 169, 0, 0, 39, 198, 35, 0, 70, 124, 0, 0, 85, 193, 14, 53, 185, 45, 0, 0, 1, 146, 204, 180, 51, 0, 0, 0, 0, 5, 27, 15, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 125, 100, 0, 0, 0, 0, 21, 176, 134, 172, 0, 0, 0, 0, 81, 214, 43, 158, 0, 0, 0, 0, 142, 118, 118, 116, 0, 0, 0, 0, 109, 189, 186, 63, 0, 0, 0, 0, 17, 130, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 108, 94, 24, 0, 0, 0, 0, 189, 230, 240, 243, 65, 0, 0, 41, 201, 76, 146, 129, 161, 2, 0, 123, 90, 0, 0, 0, 207, 53, 0, 99, 155, 53, 24, 75, 161, 15, 0, 2, 94, 144, 138, 106, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 137, 30, 0, 0, 0, 0, 67, 95, 124, 159, 0, 0, 0, 0, 106, 29, 119, 154, 0, 0, 0, 0, 133, 0, 0, 124, 0, 0, 0, 0, 137, 2, 47, 127, 0, 0, 0, 0, 92, 147, 119, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 116, 76, 0, 0, 0, 0, 54, 198, 207, 206, 4, 0, 0, 6, 190, 97, 70, 136, 31, 0, 0, 56, 153, 0, 4, 152, 10, 0, 0, 59, 153, 0, 66, 193, 0, 0, 0, 5, 184, 187, 173, 59, 0, 0, 0, 0, 24, 62, 20, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 96, 136, 25, 0, 0, 0, 0, 162, 196, 181, 222, 45, 0, 0, 17, 216, 58, 14, 137, 172, 10, 0, 92, 122, 0, 0, 1, 153, 18, 0, 90, 131, 13, 43, 125, 91, 0, 0, 8, 158, 182, 129, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 144, 133, 31, 0, 0, 0, 0, 176, 162, 203, 230, 40, 0, 0, 41, 208, 29, 31, 183, 160, 5, 0, 115, 119, 0, 0, 13, 223, 56, 0, 115, 149, 28, 39, 73, 187, 24, 0, 18, 162, 189, 166, 126, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 159, 26, 0, 0, 0, 0, 64, 219, 202, 188, 1, 0, 0, 10, 207, 146, 36, 207, 35, 0, 0, 100, 127, 2, 0, 132, 99, 0, 0, 113, 124, 15, 13, 141, 68, 0, 0, 8, 128, 175, 149, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 95, 135, 18, 0, 0, 0, 0, 70, 176, 162, 157, 0, 0, 0, 0, 113, 149, 79, 202, 0, 0, 0, 0, 106, 161, 57, 200, 0, 0, 0, 0, 74, 217, 93, 182, 0, 0, 0, 0, 1, 82, 159, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 103, 132, 51, 0, 0, 0, 0, 191, 158, 109, 161, 45, 0, 0, 49, 160, 9, 0, 32, 134, 6, 0, 68, 111, 0, 0, 29, 155, 3, 0, 11, 182, 76, 63, 169, 82, 0, 0, 0, 53, 140, 169, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 124, 82, 22, 0, 0, 0, 0, 69, 114, 17, 105, 2, 0, 0, 0, 100, 60, 0, 34, 49, 0, 0, 0, 108, 33, 0, 0, 86, 0, 0, 0, 107, 53, 0, 15, 85, 0, 0, 0, 13, 89, 100, 82, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 113, 52, 0, 0, 0, 0, 45, 201, 149, 231, 89, 0, 0, 0, 176, 135, 6, 130, 196, 15, 0, 70, 139, 5, 0, 2, 173, 38, 0, 97, 89, 0, 0, 32, 105, 3, 0, 27, 176, 160, 131, 82, 2, 0, 0, 0, 24, 43, 12, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 122, 1, 0, 0, 0, 0, 70, 238, 235, 142, 2, 0, 0, 0, 169, 191, 87, 155, 65, 0, 0, 6, 204, 20, 0, 89, 81, 0, 0, 5, 206, 35, 47, 175, 24, 0, 0, 0, 80, 170, 136, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 142, 160, 3, 0, 0, 0, 81, 209, 118, 158, 94, 0, 0, 17, 219, 108, 0, 87, 130, 0, 0, 103, 126, 0, 23, 174, 78, 0, 0, 91, 151, 75, 180, 141, 15, 0, 0, 5, 154, 160, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 145, 83, 5, 0, 0, 0, 6, 156, 45, 98, 137, 0, 0, 0, 66, 67, 0, 0, 119, 27, 0, 0, 82, 14, 0, 0, 60, 75, 0, 0, 48, 84, 2, 7, 132, 28, 0, 0, 0, 80, 144, 152, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 155, 148, 161, 40, 0, 0, 0, 110, 49, 4, 116, 131, 114, 11, 0, 95, 78, 0, 1, 33, 171, 38, 0, 22, 153, 143, 146, 146, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 100, 140, 49, 0, 0, 0, 66, 207, 131, 48, 153, 15, 0, 20, 216, 166, 1, 0, 153, 40, 0, 124, 130, 0, 4, 63, 188, 33, 0, 92, 211, 152, 169, 187, 57, 0, 0, 1, 94, 127, 37, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 74, 107, 126, 18, 0, 0, 49, 181, 99, 52, 164, 63, 0, 0, 188, 113, 0, 0, 142, 39, 0, 71, 123, 0, 4, 94, 100, 0, 0, 117, 83, 34, 136, 150, 5, 0, 0, 28, 152, 141, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 91, 215, 47, 0, 0, 0, 0, 35, 179, 67, 163, 131, 0, 0, 0, 91, 95, 0, 19, 119, 103, 0, 0, 63, 119, 0, 0, 16, 167, 28, 0, 31, 231, 135, 123, 167, 139, 4, 0, 0, 67, 115, 127, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 21, 18, 0, 0, 0, 12, 119, 170, 125, 174, 17, 0, 0, 141, 171, 6, 6, 159, 6, 0, 33, 212, 34, 0, 78, 128, 0, 0, 97, 186, 82, 134, 157, 18, 0, 0, 32, 130, 95, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 1, 20, 38, 0, 0, 0, 0, 2, 62, 36, 124, 50, 0, 0, 0, 85, 97, 0, 10, 105, 0, 0, 1, 125, 15, 0, 43, 88, 0, 0, 66, 90, 0, 7, 134, 8, 0, 0, 82, 86, 15, 111, 122, 0, 0, 0, 9, 108, 117, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 127, 141, 64, 0, 0, 0, 70, 218, 124, 115, 153, 0, 0, 4, 192, 153, 3, 86, 127, 0, 0, 94, 194, 19, 9, 182, 44, 0, 0, 152, 143, 58, 141, 169, 2, 0, 0, 67, 185, 165, 70, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87, 170, 22, 0, 0, 0, 0, 91, 169, 93, 137, 0, 0, 0, 63, 213, 27, 79, 105, 0, 0, 1, 187, 158, 56, 196, 4, 0, 0, 13, 235, 176, 202, 113, 0, 0, 0, 0, 99, 172, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 124, 97, 0, 0, 0, 0, 32, 119, 6, 96, 0, 0, 0, 0, 99, 78, 0, 97, 0, 0, 0, 0, 119, 12, 4, 86, 0, 0, 0, 0, 122, 16, 51, 91, 0, 0, 0, 0, 41, 106, 99, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 85, 76, 0, 0, 0, 2, 95, 189, 56, 119, 0, 0, 0, 79, 201, 45, 40, 130, 0, 0, 1, 202, 62, 15, 139, 33, 0, 0, 13, 188, 39, 154, 125, 0, 0, 0, 4, 162, 157, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 103, 155, 115, 4, 0, 0, 75, 195, 103, 4, 175, 59, 0, 8, 203, 119, 0, 0, 179, 63, 0, 107, 131, 0, 0, 59, 163, 8, 0, 119, 159, 71, 131, 179, 43, 0, 0, 23, 155, 147, 79, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 84, 174, 147, 86, 2, 0, 0, 133, 209, 27, 38, 160, 21, 0, 15, 220, 89, 0, 21, 177, 11, 0, 67, 174, 8, 4, 135, 103, 0, 0, 86, 153, 34, 156, 188, 23, 0, 0, 28, 173, 169, 71, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 103, 92, 39, 0, 0, 0, 10, 143, 139, 116, 157, 0, 0, 0, 96, 186, 4, 33, 144, 0, 0, 0, 190, 68, 10, 158, 41, 0, 0, 3, 196, 19, 115, 149, 0, 0, 0, 21, 216, 205, 100, 6, 0, 0, 0, 0, 43, 45, 0, 0, 0, 0 },
    { 0, 0, 0, 27, 1, 0, 0, 0, 0, 0, 8, 157, 91, 85, 0, 0, 0, 0, 121, 156, 3, 105, 74, 0, 0, 4, 212, 71, 0, 14, 139, 0, 0, 42, 163, 0, 0, 22, 170, 0, 0, 13, 207, 94, 102, 171, 73, 0, 0, 0, 53, 118, 79, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 93, 85, 0, 0, 0, 0, 76, 209, 205, 245, 151, 0, 0, 17, 211, 115, 24, 75, 179, 0, 0, 121, 132, 0, 40, 159, 103, 0, 0, 168, 163, 100, 185, 107, 4, 0, 0, 40, 125, 95, 65, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 120, 64, 0, 0, 0, 0, 0, 125, 104, 117, 50, 0, 0, 0, 5, 121, 0, 49, 147, 3, 0, 0, 12, 81, 0, 0, 112, 26, 0, 0, 6, 104, 0, 29, 160, 7, 0, 0, 0, 60, 116, 132, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122, 97, 0, 0, 0, 6, 65, 103, 173, 187, 0, 0, 0, 126, 204, 50, 101, 154, 0, 0, 92, 175, 28, 24, 176, 80, 0, 0, 153, 144, 116, 190, 151, 2, 0, 0, 34, 135, 135, 63, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 83, 70, 70, 0, 0, 0, 0, 196, 214, 109, 90, 136, 9, 0, 10, 192, 95, 30, 0, 153, 74, 0, 52, 138, 0, 0, 0, 142, 86, 0, 29, 178, 13, 2, 48, 164, 15, 0, 0, 108, 178, 170, 134, 12, 0, 0, 0, 0, 14, 5, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 150, 149, 1, 0, 0, 0, 14, 161, 16, 80, 20, 0, 0, 0, 46, 109, 0, 95, 12, 0, 0, 0, 124, 28, 23, 132, 0, 0, 0, 0, 114, 23, 161, 77, 0, 0, 0, 0, 98, 164, 65, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 103, 174, 103, 0, 0, 0, 56, 194, 155, 176, 48, 0, 0, 1, 194, 181, 14, 138, 73, 0, 0, 99, 187, 19, 26, 185, 90, 0, 0, 137, 164, 114, 201, 191, 16, 0, 0, 53, 179, 162, 47, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 93, 37, 0, 0, 0, 15, 134, 161, 106, 173, 24, 0, 0, 138, 175, 6, 7, 181, 20, 0, 59, 175, 15, 63, 170, 51, 0, 0, 113, 153, 121, 179, 72, 0, 0, 0, 14, 90, 68, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 94, 0, 0, 0, 0, 0, 80, 238, 182, 76, 0, 0, 0, 33, 204, 104, 52, 112, 0, 0, 0, 161, 90, 4, 126, 52, 0, 0, 0, 178, 41, 106, 147, 1, 0, 0, 0, 201, 203, 92, 4, 0, 0, 0, 0, 31, 61, 4, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 125, 163, 9, 0, 0, 0, 15, 138, 160, 101, 67, 0, 0, 0, 122, 124, 34, 81, 77, 0, 0, 20, 149, 4, 3, 134, 18, 0, 0, 73, 97, 0, 96, 145, 0, 0, 0, 23, 158, 148, 76, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 80, 80, 8, 0, 0, 0, 0, 125, 251, 251, 131, 0, 0, 0, 0, 151, 249, 198, 203, 0, 0, 0, 0, 199, 102, 45, 223, 0, 0, 0, 0, 210, 108, 122, 195, 0, 0, 0, 0, 90, 228, 209, 62, 0, 0, 0, 0, 2, 40, 28, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 126, 77, 0, 0, 0, 0, 40, 193, 56, 139, 5, 0, 0, 0, 127, 141, 0, 143, 29, 0, 0, 0, 151, 43, 59, 219, 6, 0, 0, 0, 131, 66, 196, 170, 0, 0, 0, 0, 82, 224, 124, 15, 0, 0, 0, 0, 1, 37, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 139, 82, 0, 0, 0, 0, 0, 159, 88, 235, 124, 0, 0, 0, 2, 159, 6, 75, 186, 0, 0, 0, 2, 202, 29, 0, 160, 16, 0, 0, 0, 155, 172, 37, 162, 19, 0, 0, 0, 6, 93, 180, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 150, 177, 36, 0, 0, 0, 44, 216, 173, 44, 155, 0, 0, 0, 174, 168, 74, 22, 158, 0, 0, 104, 152, 100, 2, 124, 78, 0, 0, 157, 51, 31, 116, 170, 6, 0, 0, 39, 167, 163, 85, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 122, 90, 0, 0, 0, 0, 80, 111, 20, 79, 98, 2, 0, 0, 110, 9, 0, 0, 104, 8, 0, 34, 50, 0, 0, 0, 64, 1, 0, 70, 37, 0, 0, 39, 56, 0, 0, 23, 155, 135, 95, 82, 0, 0, 0, 0, 16, 47, 3, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 145, 98, 0, 0, 0, 0, 10, 148, 171, 140, 0, 0, 0, 0, 82, 167, 27, 173, 0, 0, 0, 0, 165, 54, 32, 167, 0, 0, 0, 0, 172, 19, 133, 119, 0, 0, 0, 0, 112, 165, 76, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 109, 51, 0, 0, 0, 0, 11, 158, 176, 169, 32, 0, 0, 0, 103, 159, 16, 99, 54, 0, 0, 20, 177, 21, 5, 143, 28, 0, 0, 55, 101, 1, 108, 146, 0, 0, 0, 40, 183, 171, 79, 2, 0, 0, 0, 0, 40, 28, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 170, 157, 30, 0, 0, 0, 54, 200, 54, 80, 135, 0, 0, 3, 192, 128, 0, 68, 130, 0, 0, 97, 123, 1, 22, 164, 68, 0, 0, 151, 73, 47, 181, 166, 1, 0, 0, 52, 178, 156, 56, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 120, 86, 0, 0, 0, 0, 73, 205, 83, 187, 26, 0, 0, 0, 159, 122, 0, 109, 62, 0, 0, 0, 206, 32, 6, 161, 20, 0, 0, 0, 203, 19, 109, 175, 0, 0, 0, 0, 127, 206, 157, 22, 0, 0, 0, 0, 6, 42, 9, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 161, 164, 18, 0, 0, 0, 50, 209, 86, 88, 134, 0, 0, 6, 179, 147, 21, 35, 152, 0, 0, 109, 108, 0, 0, 106, 88, 0, 0, 147, 53, 0, 77, 180, 19, 0, 0, 76, 149, 146, 136, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 158, 79, 0, 0, 0, 0, 45, 151, 33, 116, 28, 0, 0, 0, 139, 73, 0, 20, 105, 0, 0, 14, 147, 1, 0, 9, 114, 0, 0, 25, 131, 0, 7, 111, 50, 0, 0, 0, 111, 148, 139, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 110, 0, 0, 0, 0, 36, 173, 180, 189, 63, 0, 0, 0, 133, 213, 14, 39, 135, 0, 0, 5, 187, 57, 5, 130, 61, 0, 0, 30, 128, 0, 112, 157, 0, 0, 0, 21, 189, 169, 88, 6, 0, 0, 0, 0, 45, 36, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 169, 125, 0, 0, 0, 0, 12, 168, 193, 60, 0, 0, 0, 0, 68, 202, 125, 165, 0, 0, 0, 0, 112, 151, 11, 186, 7, 0, 0, 0, 108, 183, 119, 181, 0, 0, 0, 0, 30, 161, 120, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 73, 187, 203, 140, 42, 0, 0, 70, 140, 107, 46, 16, 121, 0, 0, 126, 1, 0, 0, 24, 143, 0, 0, 99, 118, 127, 120, 139, 45, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 16, 11, 0, 0, 0, 0, 0, 12, 146, 56, 0, 0, 0, 0, 0, 171, 150, 130, 166, 74, 0, 0, 32, 195, 28, 0, 14, 178, 23, 0, 120, 85, 0, 0, 0, 193, 62, 0, 113, 135, 12, 0, 35, 181, 25, 0, 7, 113, 117, 102, 119, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 108, 99, 54, 0, 0, 0, 1, 177, 194, 116, 146, 78, 0, 0, 56, 190, 53, 0, 5, 144, 9, 0, 114, 23, 0, 0, 0, 162, 47, 0, 48, 136, 85, 56, 90, 164, 10, 0, 0, 36, 89, 131, 119, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 120, 92, 65, 0, 0, 0, 0, 127, 27, 0, 80, 54, 0, 0, 25, 87, 0, 0, 81, 92, 0, 0, 87, 26, 0, 2, 141, 34, 0, 0, 80, 25, 0, 122, 129, 0, 0, 0, 1, 98, 123, 74, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 91, 174, 136, 40, 0, 0, 0, 78, 112, 121, 96, 104, 59, 0, 0, 67, 127, 77, 10, 1, 142, 33, 0, 0, 61, 109, 101, 106, 125, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 171, 74, 0, 0, 0, 0, 16, 161, 55, 158, 6, 0, 0, 0, 96, 160, 0, 116, 44, 0, 0, 0, 182, 36, 0, 112, 25, 0, 0, 0, 173, 21, 38, 161, 2, 0, 0, 0, 81, 153, 146, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 84, 158, 245, 184, 13, 0, 0, 32, 201, 83, 94, 142, 99, 0, 0, 140, 81, 0, 0, 76, 174, 0, 0, 145, 145, 76, 152, 172, 53, 0, 0, 11, 67, 67, 29, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 108, 28, 0, 0, 0, 0, 0, 83, 216, 170, 172, 30, 0, 0, 0, 165, 84, 13, 123, 107, 0, 0, 0, 185, 25, 0, 111, 85, 0, 0, 0, 200, 72, 100, 195, 16, 0, 0, 0, 99, 185, 115, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 52, 107, 83, 73, 10, 0, 5, 74, 203, 93, 71, 165, 8, 0, 11, 211, 86, 122, 184, 58, 0, 0, 7, 230, 217, 132, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 101, 101, 29, 0, 0, 0, 0, 141, 215, 143, 168, 0, 0, 0, 0, 173, 111, 46, 194, 0, 0, 0, 0, 167, 40, 52, 199, 0, 0, 0, 0, 168, 43, 97, 167, 0, 0, 0, 0, 74, 182, 203, 74, 0, 0, 0, 0, 0, 35, 35, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 71, 184, 150, 175, 34, 0, 0, 1, 105, 87, 42, 59, 127, 0, 0, 116, 4, 0, 0, 30, 153, 0, 0, 126, 42, 29, 51, 114, 72, 0, 0, 14, 73, 59, 54, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 68, 2, 0, 0, 0, 0, 80, 103, 48, 108, 42, 0, 0, 0, 130, 15, 0, 4, 113, 0, 0, 10, 107, 0, 0, 25, 83, 0, 0, 6, 114, 0, 51, 124, 17, 0, 0, 0, 79, 131, 77, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 141, 79, 0, 0, 0, 0, 84, 115, 3, 109, 42, 0, 0, 0, 138, 29, 0, 34, 98, 0, 0, 0, 126, 0, 0, 50, 95, 0, 0, 0, 133, 1, 25, 146, 25, 0, 0, 0, 91, 134, 134, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 118, 65, 0, 0, 0, 0, 64, 197, 213, 240, 95, 0, 0, 30, 222, 203, 43, 148, 187, 0, 0, 160, 189, 53, 84, 172, 176, 0, 0, 154, 242, 226, 252, 213, 69, 0, 0, 13, 73, 44, 38, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 127, 61, 45, 0, 0, 0, 0, 205, 162, 81, 133, 72, 0, 0, 9, 188, 27, 0, 11, 138, 0, 0, 28, 128, 0, 0, 8, 134, 0, 0, 3, 171, 43, 0, 49, 102, 0, 0, 0, 44, 129, 151, 139, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 130, 18, 0, 0, 0, 0, 35, 162, 51, 115, 0, 0, 0, 0, 114, 113, 0, 69, 39, 0, 0, 0, 161, 33, 0, 36, 76, 0, 0, 0, 173, 43, 26, 135, 18, 0, 0, 0, 63, 168, 130, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 32, 2, 0, 0, 0, 0, 68, 181, 182, 196, 58, 0, 0, 33, 203, 85, 8, 50, 181, 20, 0, 126, 44, 0, 0, 20, 177, 28, 0, 93, 122, 131, 145, 160, 86, 2, 0, 0, 32, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 3, 0, 0, 0, 0, 32, 143, 199, 172, 33, 0, 0, 14, 155, 73, 16, 88, 160, 24, 0, 113, 66, 0, 0, 15, 169, 40, 0, 81, 142, 100, 78, 88, 76, 2, 0, 0, 38, 37, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 147, 35, 0, 0, 0, 0, 7, 191, 168, 171, 0, 0, 0, 0, 9, 185, 69, 169, 0, 0, 0, 0, 79, 178, 92, 157, 0, 0, 0, 0, 96, 173, 164, 107, 0, 0, 0, 0, 9, 135, 126, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 98, 105, 3, 0, 0, 0, 52, 189, 196, 249, 34, 0, 0, 1, 190, 136, 31, 209, 31, 0, 0, 45, 150, 3, 0, 189, 20, 0, 0, 63, 119, 0, 42, 200, 7, 0, 0, 7, 161, 189, 161, 56, 0, 0, 0, 0, 8, 49, 24, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 160, 117, 0, 0, 0, 0, 33, 183, 223, 207, 102, 0, 0, 6, 177, 183, 54, 54, 172, 0, 0, 116, 150, 8, 54, 169, 120, 0, 0, 163, 201, 171, 231, 178, 10, 0, 0, 34, 148, 139, 47, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 112, 97, 33, 0, 0, 0, 11, 159, 207, 121, 137, 0, 0, 0, 127, 183, 22, 16, 133, 0, 0, 53, 160, 12, 0, 108, 63, 0, 0, 129, 60, 0, 60, 165, 3, 0, 0, 110, 196, 176, 121, 16, 0, 0, 0, 13, 63, 40, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 141, 123, 1, 0, 0, 0, 2, 132, 128, 123, 120, 0, 0, 0, 77, 186, 7, 40, 159, 0, 0, 6, 209, 55, 6, 134, 73, 0, 0, 50, 168, 27, 138, 172, 4, 0, 0, 30, 176, 175, 67, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 33, 24, 0, 0, 0, 0, 1, 141, 162, 145, 131, 31, 0, 0, 57, 140, 5, 0, 37, 153, 10, 0, 104, 87, 0, 0, 2, 164, 47, 0, 36, 165, 130, 127, 135, 97, 4, 0, 0, 2, 12, 11, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 89, 99, 0, 0, 0, 0, 0, 73, 136, 126, 48, 0, 0, 0, 38, 160, 12, 88, 47, 0, 0, 0, 149, 57, 13, 136, 0, 0, 0, 0, 142, 3, 109, 94, 0, 0, 0, 0, 155, 158, 81, 0, 0, 0, 0, 0, 22, 56, 2, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 55, 95, 29, 0, 0, 0, 0, 139, 201, 53, 149, 3, 0, 0, 0, 167, 61, 0, 98, 41, 0, 0, 0, 167, 29, 0, 92, 65, 0, 0, 0, 146, 60, 3, 134, 20, 0, 0, 0, 37, 140, 175, 122, 0, 0, 0, 0, 0, 22, 52, 6, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 160, 91, 0, 0, 0, 0, 94, 158, 62, 121, 1, 0, 0, 64, 160, 6, 2, 115, 0, 0, 18, 157, 16, 1, 89, 47, 0, 0, 78, 90, 1, 78, 129, 1, 0, 0, 31, 149, 148, 74, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 99, 114, 0, 0, 0, 0, 71, 203, 111, 178, 24, 0, 0, 0, 180, 92, 0, 86, 80, 0, 0, 16, 152, 1, 0, 63, 98, 0, 0, 16, 187, 58, 44, 149, 31, 0, 0, 0, 80, 165, 145, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 136, 1, 0, 0, 0, 0, 58, 164, 155, 23, 0, 0, 0, 19, 163, 25, 133, 7, 0, 0, 0, 122, 106, 73, 128, 0, 0, 0, 0, 145, 78, 154, 42, 0, 0, 0, 0, 76, 172, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 6, 45, 13, 0, 0, 0, 0, 28, 144, 121, 119, 4, 0, 0, 0, 156, 45, 0, 61, 78, 0, 0, 44, 117, 0, 0, 11, 131, 6, 0, 124, 27, 0, 19, 117, 173, 22, 0, 69, 154, 127, 196, 238, 50, 0, 0, 0, 14, 48, 81, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 81, 46, 2, 0, 0, 1, 109, 168, 104, 181, 61, 0, 0, 83, 182, 15, 0, 166, 41, 0, 62, 174, 20, 5, 97, 108, 1, 0, 126, 77, 28, 112, 130, 10, 0, 0, 69, 179, 155, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 6, 16, 16, 0, 0, 0, 0, 0, 107, 127, 108, 85, 0, 0, 0, 19, 185, 37, 15, 172, 90, 0, 0, 76, 111, 0, 0, 57, 191, 16, 0, 80, 114, 0, 5, 69, 191, 16, 0, 30, 215, 153, 184, 236, 86, 0, 0, 0, 57, 124, 81, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 70, 3, 0, 0, 0, 0, 74, 202, 171, 132, 0, 0, 0, 67, 166, 33, 10, 120, 0, 0, 35, 158, 23, 0, 34, 75, 0, 0, 131, 42, 0, 26, 131, 6, 0, 0, 146, 36, 73, 122, 32, 0, 0, 0, 24, 31, 32, 8, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 64, 7, 0, 0, 0, 0, 49, 204, 125, 157, 30, 0, 0, 0, 150, 122, 0, 93, 86, 0, 0, 0, 197, 46, 4, 134, 69, 0, 0, 0, 201, 29, 101, 183, 8, 0, 0, 0, 124, 170, 104, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 151, 163, 51, 0, 0, 0, 52, 196, 106, 36, 212, 50, 0, 7, 188, 133, 0, 0, 205, 60, 0, 108, 134, 5, 4, 100, 127, 5, 0, 124, 131, 57, 140, 164, 14, 0, 0, 35, 144, 138, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 112, 0, 0, 0, 0, 0, 37, 169, 143, 73, 0, 0, 0, 12, 146, 37, 17, 105, 0, 0, 0, 147, 76, 0, 107, 20, 0, 0, 10, 141, 2, 71, 111, 0, 0, 0, 4, 142, 115, 74, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 85, 53, 0, 0, 0, 3, 101, 134, 73, 188, 33, 0, 0, 86, 150, 6, 4, 139, 13, 0, 33, 151, 8, 32, 149, 42, 0, 0, 117, 66, 33, 150, 71, 0, 0, 0, 76, 176, 127, 7, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 113, 162, 134, 10, 0, 0, 40, 239, 153, 76, 152, 139, 3, 0, 122, 219, 155, 166, 91, 207, 19, 0, 122, 251, 158, 3, 44, 212, 22, 0, 47, 229, 61, 56, 159, 165, 10, 0, 0, 100, 181, 189, 171, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 160, 9, 0, 0, 0, 0, 56, 153, 110, 81, 0, 0, 0, 27, 161, 20, 52, 64, 0, 0, 0, 156, 76, 4, 124, 4, 0, 0, 0, 165, 20, 103, 80, 0, 0, 0, 0, 138, 166, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 149, 91, 3, 0, 0, 0, 0, 173, 87, 165, 157, 0, 0, 0, 19, 137, 1, 35, 207, 52, 0, 0, 27, 150, 1, 0, 19, 109, 19, 0, 5, 191, 95, 2, 4, 149, 36, 0, 0, 24, 130, 172, 175, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 124, 101, 1, 0, 0, 0, 18, 150, 100, 147, 125, 0, 0, 0, 136, 147, 0, 8, 161, 0, 0, 86, 137, 6, 16, 112, 87, 0, 0, 160, 67, 66, 140, 103, 2, 0, 0, 73, 138, 81, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 164, 130, 13, 0, 0, 0, 12, 159, 93, 112, 109, 0, 0, 0, 112, 128, 0, 16, 107, 0, 0, 24, 133, 0, 2, 117, 20, 0, 0, 97, 59, 10, 124, 107, 0, 0, 0, 39, 159, 137, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 122, 99, 2, 0, 0, 0, 72, 186, 130, 139, 128, 0, 0, 3, 194, 77, 0, 13, 172, 3, 0, 76, 127, 0, 0, 62, 120, 0, 0, 110, 81, 0, 39, 165, 32, 0, 0, 34, 199, 187, 145, 37, 0, 0, 0, 0, 27, 49, 7, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 168, 140, 0, 0, 0, 0, 66, 183, 45, 159, 41, 0, 0, 0, 155, 86, 0, 72, 97, 0, 0, 7, 179, 6, 0, 118, 34, 0, 0, 13, 185, 11, 87, 163, 0, 0, 0, 0, 94, 169, 109, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 110, 0, 0, 0, 0, 0, 81, 183, 183, 0, 0, 0, 0, 59, 180, 23, 123, 3, 0, 0, 2, 178, 39, 6, 150, 0, 0, 0, 19, 141, 0, 104, 136, 0, 0, 0, 1, 120, 134, 92, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 156, 45, 0, 0, 0, 9, 119, 148, 133, 108, 0, 0, 0, 105, 171, 5, 87, 63, 0, 0, 6, 157, 9, 23, 174, 8, 0, 0, 21, 137, 48, 171, 118, 0, 0, 0, 7, 154, 172, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 116, 126, 63, 0, 0, 0, 21, 186, 161, 28, 210, 55, 0, 0, 144, 182, 26, 0, 193, 59, 0, 73, 175, 19, 0, 63, 147, 5, 0, 126, 77, 10, 108, 182, 35, 0, 0, 84, 210, 175, 84, 7, 0, 0, 0, 3, 48, 8, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 113, 186, 33, 0, 0, 0, 16, 161, 150, 153, 57, 0, 0, 0, 110, 199, 14, 147, 32, 0, 0, 15, 207, 43, 81, 195, 1, 0, 0, 40, 175, 42, 190, 104, 0, 0, 0, 3, 149, 173, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 183, 88, 0, 0, 0, 0, 0, 110, 184, 203, 0, 0, 0, 0, 38, 199, 37, 191, 0, 0, 0, 0, 150, 146, 50, 187, 0, 0, 0, 0, 210, 112, 172, 121, 0, 0, 0, 0, 169, 181, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146, 120, 0, 0, 0, 0, 0, 74, 243, 213, 1, 0, 0, 0, 25, 198, 110, 223, 3, 0, 0, 0, 169, 169, 55, 234, 3, 0, 0, 2, 243, 112, 157, 186, 0, 0, 0, 1, 147, 173, 123, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 51, 190, 30, 0, 0, 0, 0, 41, 199, 133, 69, 0, 0, 0, 23, 174, 83, 131, 63, 0, 5, 5, 176, 176, 30, 163, 13, 0, 0, 28, 236, 102, 153, 113, 0, 0, 0, 12, 120, 119, 53, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 165, 182, 31, 0, 0, 0, 27, 179, 59, 52, 126, 0, 0, 0, 161, 170, 0, 39, 155, 0, 0, 29, 217, 37, 23, 163, 54, 0, 0, 29, 193, 65, 191, 152, 0, 0, 0, 5, 150, 164, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 166, 13, 0, 0, 0, 0, 74, 238, 238, 31, 0, 0, 0, 68, 211, 82, 200, 49, 0, 0, 14, 204, 83, 22, 207, 35, 0, 0, 63, 200, 20, 128, 206, 5, 0, 0, 24, 167, 188, 111, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 164, 118, 14, 0, 0, 0, 0, 184, 199, 226, 185, 3, 0, 0, 0, 229, 57, 57, 219, 47, 0, 0, 0, 217, 37, 4, 174, 50, 0, 0, 0, 237, 143, 127, 209, 13, 0, 0, 0, 93, 188, 161, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 82, 0, 0, 0, 0, 1, 110, 219, 193, 0, 0, 0, 0, 46, 205, 65, 195, 0, 0, 0, 0, 174, 84, 49, 181, 0, 0, 0, 4, 189, 18, 136, 92, 0, 0, 0, 0, 121, 160, 111, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 150, 88, 0, 0, 0, 0, 31, 183, 164, 227, 32, 0, 0, 0, 157, 161, 9, 168, 118, 0, 0, 85, 153, 2, 14, 161, 115, 0, 0, 110, 102, 14, 155, 195, 17, 0, 0, 35, 157, 167, 87, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 140, 175, 11, 0, 0, 0, 16, 173, 96, 161, 83, 0, 0, 0, 120, 198, 14, 137, 81, 0, 0, 12, 199, 55, 21, 191, 14, 0, 0, 77, 174, 65, 166, 152, 0, 0, 0, 74, 169, 186, 102, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 45, 47, 8, 0, 0, 0, 0, 173, 187, 183, 200, 85, 0, 0, 40, 178, 20, 7, 34, 191, 23, 0, 108, 91, 0, 0, 0, 180, 49, 0, 95, 145, 15, 10, 85, 133, 5, 0, 3, 134, 171, 147, 88, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 141, 90, 0, 0, 0, 0, 1, 105, 195, 217, 48, 0, 0, 0, 76, 213, 36, 130, 97, 0, 0, 6, 221, 96, 0, 141, 62, 0, 0, 63, 197, 19, 58, 195, 14, 0, 0, 16, 159, 189, 123, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 126, 30, 0, 0, 0, 0, 6, 192, 163, 0, 0, 0, 0, 3, 115, 153, 162, 0, 0, 0, 0, 89, 172, 84, 172, 0, 0, 0, 0, 137, 28, 141, 82, 0, 0, 0, 0, 135, 151, 69, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 117, 0, 0, 0, 0, 0, 58, 209, 222, 9, 0, 0, 0, 36, 186, 50, 145, 13, 0, 0, 1, 182, 68, 41, 209, 2, 0, 0, 25, 197, 17, 163, 150, 0, 0, 0, 1, 109, 162, 74, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 107, 127, 95, 8, 0, 0, 8, 191, 99, 71, 135, 159, 8, 0, 63, 139, 0, 0, 4, 175, 32, 0, 127, 63, 0, 0, 11, 163, 12, 0, 91, 119, 0, 4, 107, 95, 0, 0, 0, 155, 195, 199, 147, 4, 0, 0, 0, 8, 51, 31, 4, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 139, 104, 0, 0, 0, 0, 69, 189, 116, 170, 57, 0, 0, 14, 153, 45, 1, 64, 111, 0, 0, 124, 34, 0, 1, 127, 69, 0, 0, 144, 27, 5, 116, 175, 8, 0, 0, 34, 154, 161, 86, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 72, 166, 211, 160, 97, 0, 0, 42, 145, 63, 44, 3, 163, 42, 0, 126, 25, 0, 0, 0, 125, 34, 0, 102, 80, 6, 14, 93, 78, 0, 0, 2, 88, 124, 106, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 96, 102, 2, 0, 0, 0, 59, 193, 140, 124, 129, 0, 0, 0, 154, 210, 1, 48, 149, 0, 0, 6, 220, 108, 7, 145, 58, 0, 0, 29, 220, 31, 85, 174, 4, 0, 0, 4, 184, 236, 119, 15, 0, 0, 0, 0, 25, 63, 5, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 7, 132, 205, 168, 100, 4, 0, 17, 126, 99, 23, 3, 155, 49, 0, 116, 47, 0, 0, 5, 118, 7, 0, 98, 102, 20, 39, 116, 42, 0, 0, 1, 70, 109, 73, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 61, 86, 69, 12, 0, 0, 0, 142, 114, 134, 181, 7, 0, 0, 19, 158, 4, 2, 126, 53, 0, 0, 73, 83, 0, 0, 68, 81, 0, 0, 72, 104, 0, 6, 131, 30, 0, 0, 9, 166, 153, 155, 90, 0, 0, 0, 0, 14, 47, 13, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 165, 89, 0, 0, 0, 0, 112, 155, 38, 189, 3, 0, 0, 25, 190, 27, 0, 167, 21, 0, 0, 43, 153, 0, 2, 176, 10, 0, 0, 11, 206, 42, 71, 189, 0, 0, 0, 0, 83, 159, 133, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 168, 73, 0, 0, 0, 0, 6, 155, 36, 143, 0, 0, 0, 0, 77, 133, 0, 127, 0, 0, 0, 0, 151, 34, 12, 116, 0, 0, 0, 0, 152, 5, 102, 83, 0, 0, 0, 0, 106, 147, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 137, 30, 0, 0, 0, 0, 0, 56, 143, 124, 0, 0, 0, 0, 16, 153, 41, 126, 0, 0, 0, 0, 102, 101, 39, 122, 0, 0, 0, 0, 153, 60, 105, 87, 0, 0, 0, 0, 75, 145, 82, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 116, 93, 1, 0, 0, 0, 24, 202, 170, 140, 124, 0, 0, 0, 117, 184, 76, 25, 158, 1, 0, 52, 144, 1, 0, 37, 132, 0, 0, 71, 117, 0, 8, 149, 56, 0, 0, 16, 201, 165, 161, 73, 0, 0, 0, 0, 40, 63, 17, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 155, 42, 0, 0, 0, 0, 12, 86, 87, 135, 0, 0, 0, 0, 91, 136, 55, 143, 0, 0, 0, 0, 142, 93, 112, 115, 0, 0, 0, 0, 125, 154, 172, 52, 0, 0, 0, 0, 29, 156, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 34, 9, 0, 0, 0, 0, 0, 0, 126, 104, 0, 0, 0, 0, 0, 117, 39, 145, 0, 0, 0, 0, 42, 152, 0, 127, 0, 0, 0, 0, 103, 128, 19, 123, 0, 0, 0, 0, 82, 182, 153, 84, 0, 0, 0, 0, 1, 78, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 154, 76, 0, 0, 0, 2, 81, 166, 158, 122, 0, 0, 0, 104, 224, 50, 126, 109, 0, 0, 77, 208, 65, 99, 214, 20, 0, 0, 174, 177, 138, 207, 105, 0, 0, 0, 81, 161, 106, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 8, 0, 0, 0, 0, 0, 51, 243, 219, 168, 133, 27, 0, 0, 113, 145, 64, 61, 149, 164, 11, 0, 121, 91, 0, 0, 0, 223, 62, 0, 57, 203, 115, 107, 147, 157, 21, 0, 0, 37, 96, 99, 50, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 97, 99, 18, 0, 0, 0, 1, 150, 227, 151, 204, 56, 0, 0, 89, 180, 61, 0, 96, 175, 0, 0, 187, 53, 0, 0, 105, 177, 0, 0, 129, 161, 103, 124, 217, 119, 0, 0, 7, 100, 139, 128, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 106, 173, 66, 0, 0, 0, 0, 113, 192, 71, 200, 13, 0, 0, 0, 159, 84, 0, 140, 58, 0, 0, 0, 165, 45, 0, 140, 58, 0, 0, 0, 168, 95, 50, 192, 10, 0, 0, 0, 84, 169, 157, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 105, 7, 0, 0, 1, 87, 188, 189, 199, 67, 0, 0, 38, 187, 105, 15, 38, 164, 0, 0, 146, 43, 0, 0, 53, 140, 0, 0, 128, 108, 39, 96, 166, 35, 0, 0, 4, 86, 122, 91, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 51, 28, 1, 1, 0, 0, 0, 85, 173, 152, 185, 126, 0, 0, 5, 187, 74, 64, 38, 180, 0, 0, 103, 109, 0, 11, 120, 110, 0, 0, 157, 58, 57, 156, 166, 11, 0, 0, 51, 161, 132, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 34, 2, 0, 0, 0, 0, 17, 122, 249, 209, 39, 0, 0, 49, 174, 126, 78, 100, 135, 0, 0, 172, 68, 0, 0, 11, 188, 0, 0, 103, 195, 99, 57, 148, 97, 0, 0, 0, 31, 96, 136, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 85, 145, 13, 0, 0, 0, 0, 174, 218, 147, 164, 7, 0, 0, 16, 212, 105, 0, 120, 86, 0, 0, 53, 173, 1, 0, 36, 173, 3, 0, 28, 174, 9, 0, 61, 153, 3, 0, 0, 72, 147, 155, 148, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 67, 168, 130, 0, 0, 0, 0, 149, 198, 198, 250, 97, 3, 0, 23, 204, 47, 75, 152, 219, 44, 0, 89, 106, 0, 2, 65, 185, 15, 0, 105, 137, 65, 151, 198, 59, 0, 0, 18, 180, 166, 88, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 15, 40, 5, 0, 0, 0, 0, 0, 40, 220, 110, 0, 0, 0, 0, 30, 138, 117, 200, 40, 0, 0, 3, 169, 154, 1, 150, 98, 0, 0, 25, 220, 40, 44, 215, 25, 0, 0, 17, 221, 174, 197, 195, 0, 0, 0, 0, 42, 117, 100, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 88, 126, 118, 23, 0, 0, 17, 212, 211, 229, 184, 177, 10, 0, 88, 140, 30, 54, 10, 150, 14, 0, 108, 21, 0, 7, 90, 162, 6, 0, 77, 60, 26, 149, 208, 45, 0, 0, 23, 218, 230, 140, 32, 0, 0, 0, 0, 45, 46, 3, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 62, 14, 0, 0, 0, 144, 151, 132, 87, 137, 0, 0, 25, 181, 124, 3, 0, 133, 20, 0, 106, 49, 32, 0, 0, 107, 27, 0, 127, 22, 0, 0, 6, 108, 1, 0, 47, 141, 67, 71, 97, 15, 0, 0, 0, 64, 102, 24, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 25, 0, 0, 0, 0, 72, 179, 232, 246, 114, 4, 0, 16, 208, 229, 183, 135, 144, 17, 0, 119, 69, 21, 6, 31, 174, 25, 0, 126, 145, 108, 127, 189, 93, 3, 0, 19, 142, 132, 89, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 114, 96, 55, 0, 0, 0, 0, 96, 203, 20, 159, 0, 0, 0, 0, 183, 104, 2, 156, 3, 0, 0, 14, 179, 7, 39, 207, 1, 0, 0, 7, 154, 10, 162, 186, 0, 0, 0, 0, 70, 150, 111, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 39, 6, 0, 0, 0, 0, 0, 45, 218, 66, 46, 2, 0, 0, 0, 135, 176, 0, 103, 64, 0, 0, 1, 229, 126, 0, 90, 136, 0, 0, 50, 216, 38, 20, 177, 134, 0, 0, 31, 196, 109, 188, 215, 36, 0, 0, 0, 56, 82, 62, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 74, 36, 1, 0, 0, 0, 13, 141, 95, 164, 184, 46, 0, 0, 92, 79, 0, 7, 74, 180, 31, 0, 123, 89, 0, 0, 20, 175, 30, 0, 48, 206, 118, 108, 157, 57, 0, 0, 0, 13, 43, 35, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 148, 148, 33, 0, 0, 0, 19, 178, 46, 81, 155, 29, 0, 0, 84, 92, 0, 0, 56, 134, 0, 0, 91, 81, 0, 0, 0, 166, 32, 0, 34, 166, 30, 1, 42, 159, 13, 0, 0, 49, 137, 144, 119, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 58, 125, 126, 18, 0, 0, 11, 171, 222, 135, 112, 162, 0, 0, 95, 172, 46, 0, 0, 158, 0, 0, 123, 10, 0, 0, 43, 173, 0, 0, 145, 81, 76, 101, 182, 88, 0, 0, 53, 147, 137, 94, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 97, 10, 0, 0, 0, 0, 47, 212, 231, 173, 0, 0, 0, 0, 139, 153, 53, 185, 25, 0, 0, 0, 154, 31, 0, 109, 55, 0, 0, 0, 138, 35, 91, 152, 5, 0, 0, 0, 95, 198, 63, 7, 0, 0, 0, 0, 11, 52, 14, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 79, 0, 0, 0, 0, 10, 114, 251, 182, 0, 0, 0, 0, 118, 220, 184, 226, 50, 0, 0, 12, 158, 29, 0, 75, 94, 0, 0, 43, 98, 0, 6, 118, 35, 0, 0, 23, 186, 163, 113, 27, 0, 0, 0, 0, 41, 52, 4, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 82, 39, 0, 0, 0, 0, 122, 208, 195, 236, 79, 0, 0, 13, 206, 61, 88, 154, 177, 35, 0, 60, 103, 0, 0, 0, 186, 63, 0, 97, 132, 18, 13, 30, 147, 21, 0, 23, 140, 130, 82, 36, 0, 0, 0, 0, 0, 3, 8, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 51, 9, 0, 0, 0, 0, 63, 193, 250, 124, 0, 0, 0, 8, 170, 90, 163, 201, 25, 0, 0, 92, 49, 0, 0, 64, 81, 0, 0, 95, 0, 0, 0, 61, 74, 0, 0, 40, 36, 88, 98, 129, 3, 0, 0, 0, 12, 70, 69, 13, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 206, 243, 196, 75, 0, 0, 45, 168, 119, 123, 61, 158, 0, 0, 140, 10, 3, 2, 0, 118, 0, 0, 148, 3, 0, 1, 48, 133, 0, 0, 63, 144, 123, 100, 97, 0, 0, 0, 0, 10, 16, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 101, 77, 28, 0, 0, 0, 14, 224, 186, 189, 224, 84, 0, 0, 45, 193, 17, 17, 73, 189, 12, 0, 66, 168, 0, 0, 0, 210, 20, 0, 42, 196, 17, 0, 77, 203, 17, 0, 7, 161, 238, 217, 161, 21, 0, 0, 0, 6, 52, 52, 7, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 109, 33, 0, 0, 0, 0, 66, 224, 125, 155, 37, 0, 0, 0, 130, 112, 0, 58, 88, 0, 0, 2, 173, 6, 1, 118, 82, 0, 0, 3, 160, 16, 120, 201, 13, 0, 0, 0, 104, 171, 110, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 124, 175, 81, 0, 0, 0, 64, 188, 192, 155, 21, 0, 0, 14, 199, 103, 12, 144, 29, 0, 0, 109, 79, 0, 0, 43, 104, 0, 0, 166, 104, 89, 131, 189, 62, 0, 0, 39, 134, 127, 83, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 108, 133, 0, 0, 0, 0, 38, 184, 252, 243, 115, 0, 0, 16, 182, 160, 94, 69, 137, 0, 0, 116, 47, 0, 0, 26, 125, 0, 0, 147, 46, 55, 61, 143, 51, 0, 0, 96, 189, 183, 129, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 56, 12, 0, 0, 0, 0, 72, 231, 249, 212, 1, 0, 0, 0, 176, 252, 182, 196, 10, 0, 0, 10, 221, 161, 21, 189, 7, 0, 0, 0, 168, 42, 101, 180, 0, 0, 0, 0, 128, 168, 189, 54, 0, 0, 0, 0, 17, 112, 42, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87, 143, 91, 103, 19, 0, 0, 27, 119, 0, 0, 4, 131, 0, 0, 83, 55, 0, 0, 0, 147, 24, 0, 111, 12, 0, 0, 15, 131, 0, 0, 75, 71, 0, 23, 123, 47, 0, 0, 0, 131, 147, 115, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 47, 159, 30, 0, 0, 0, 0, 86, 223, 201, 110, 0, 0, 0, 0, 138, 72, 77, 172, 67, 0, 0, 16, 147, 0, 0, 18, 129, 0, 0, 30, 165, 44, 87, 139, 70, 0, 0, 0, 158, 183, 116, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 85, 125, 60, 0, 0, 0, 13, 199, 183, 116, 238, 77, 0, 0, 90, 202, 36, 9, 83, 211, 32, 0, 126, 128, 0, 0, 20, 235, 46, 0, 79, 204, 56, 8, 132, 162, 9, 0, 1, 87, 172, 194, 166, 16, 0, 0, 0, 0, 8, 25, 6, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 190, 145, 0, 0, 0, 0, 92, 217, 144, 135, 115, 1, 0, 5, 179, 69, 2, 0, 128, 40, 0, 40, 98, 0, 0, 7, 153, 12, 0, 55, 88, 30, 72, 150, 73, 0, 0, 9, 177, 183, 142, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 148, 23, 0, 0, 0, 0, 35, 207, 248, 118, 0, 0, 0, 0, 108, 145, 132, 206, 0, 0, 0, 0, 163, 39, 10, 157, 15, 0, 0, 0, 148, 46, 57, 201, 6, 0, 0, 0, 67, 154, 162, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 63, 95, 9, 0, 0, 0, 0, 105, 67, 81, 123, 2, 0, 0, 0, 110, 3, 0, 52, 57, 0, 0, 0, 107, 0, 0, 20, 82, 0, 0, 0, 115, 5, 0, 83, 25, 0, 0, 0, 62, 130, 117, 75, 0, 0, 0, 0, 0, 19, 28, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 165, 164, 86, 0, 0, 0, 0, 155, 149, 67, 160, 32, 0, 0, 8, 175, 20, 0, 66, 112, 0, 0, 86, 106, 0, 0, 43, 139, 0, 0, 140, 66, 0, 0, 70, 120, 0, 0, 44, 160, 170, 157, 139, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 145, 178, 107, 1, 0, 0, 0, 85, 197, 102, 102, 74, 0, 0, 3, 176, 77, 0, 41, 123, 0, 0, 47, 136, 0, 0, 88, 111, 0, 0, 116, 61, 0, 1, 136, 62, 0, 0, 60, 166, 162, 142, 127, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 163, 59, 0, 0, 0, 0, 13, 162, 163, 179, 0, 0, 0, 0, 117, 123, 29, 185, 13, 0, 0, 0, 140, 5, 0, 98, 63, 0, 0, 0, 122, 0, 0, 113, 54, 0, 0, 0, 120, 137, 111, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 67, 142, 30, 0, 0, 0, 0, 156, 103, 32, 140, 0, 0, 0, 0, 217, 78, 0, 97, 42, 0, 0, 0, 169, 50, 0, 21, 82, 0, 0, 0, 143, 80, 0, 55, 75, 0, 0, 0, 11, 103, 142, 127, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 179, 135, 4, 0, 0, 0, 71, 215, 79, 159, 103, 0, 0, 0, 179, 135, 0, 11, 179, 8, 0, 23, 199, 19, 0, 28, 163, 4, 0, 63, 151, 55, 71, 131, 67, 0, 0, 19, 175, 159, 83, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 123, 104, 25, 0, 0, 0, 81, 163, 35, 36, 160, 0, 0, 22, 147, 31, 0, 10, 154, 0, 0, 153, 17, 0, 32, 159, 50, 0, 0, 159, 24, 45, 154, 100, 0, 0, 0, 36, 142, 131, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 85, 82, 12, 0, 0, 0, 0, 13, 77, 24, 115, 0, 0, 0, 0, 79, 88, 0, 85, 15, 0, 0, 0, 93, 18, 0, 75, 31, 0, 0, 0, 101, 30, 5, 111, 2, 0, 0, 0, 33, 112, 102, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 112, 125, 21, 0, 0, 0, 27, 138, 36, 15, 115, 10, 0, 5, 145, 70, 0, 0, 110, 50, 0, 104, 59, 6, 0, 0, 95, 24, 0, 117, 11, 0, 21, 58, 65, 0, 0, 22, 102, 105, 87, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 77, 104, 38, 0, 0, 0, 0, 150, 194, 112, 194, 41, 0, 0, 13, 209, 95, 0, 95, 120, 0, 0, 50, 123, 0, 0, 41, 159, 0, 0, 29, 147, 8, 2, 99, 131, 0, 0, 0, 98, 172, 198, 173, 20, 0, 0, 0, 0, 22, 58, 15, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 106, 63, 6, 0, 0, 0, 4, 112, 52, 125, 166, 10, 0, 0, 60, 94, 13, 0, 73, 120, 0, 0, 105, 0, 0, 0, 0, 159, 0, 0, 105, 121, 58, 40, 91, 125, 0, 0, 0, 34, 91, 116, 77, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 47, 112, 54, 0, 0, 0, 26, 195, 135, 92, 186, 98, 0, 0, 107, 105, 19, 0, 45, 176, 0, 0, 167, 28, 0, 0, 13, 171, 0, 0, 157, 115, 60, 60, 119, 89, 0, 0, 18, 91, 122, 99, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 88, 110, 55, 0, 0, 0, 0, 23, 166, 134, 170, 38, 0, 0, 0, 150, 169, 0, 142, 56, 0, 0, 36, 179, 15, 0, 146, 24, 0, 0, 56, 160, 5, 52, 179, 3, 0, 0, 15, 151, 213, 170, 49, 0, 0, 0, 0, 1, 40, 7, 0, 0, 0 },
    { 0, 0, 0, 14, 46, 5, 0, 0, 0, 0, 0, 46, 124, 131, 16, 0, 0, 0, 33, 148, 117, 45, 89, 0, 0, 22, 178, 104, 0, 0, 149, 18, 0, 113, 118, 0, 0, 0, 163, 40, 0, 60, 181, 66, 53, 88, 153, 18, 0, 0, 47, 96, 80, 49, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 3, 26, 0, 0, 0, 0, 0, 0, 66, 113, 0, 0, 0, 0, 0, 15, 173, 140, 108, 0, 0, 0, 0, 92, 136, 12, 118, 15, 0, 0, 0, 154, 34, 0, 113, 57, 0, 0, 0, 164, 67, 35, 154, 22, 0, 0, 0, 27, 97, 98, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 110, 83, 0, 0, 0, 0, 34, 129, 78, 169, 0, 0, 0, 0, 121, 65, 8, 138, 0, 0, 0, 0, 131, 0, 13, 145, 0, 0, 0, 0, 136, 1, 78, 130, 0, 0, 0, 0, 115, 122, 77, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 147, 131, 39, 0, 0, 0, 0, 51, 231, 179, 199, 35, 0, 0, 0, 179, 207, 39, 87, 127, 0, 0, 51, 175, 11, 0, 103, 131, 0, 0, 59, 139, 31, 127, 227, 47, 0, 0, 4, 147, 187, 127, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 137, 107, 0, 0, 0, 0, 33, 167, 32, 120, 0, 0, 0, 0, 121, 116, 1, 129, 16, 0, 0, 0, 163, 13, 0, 85, 65, 0, 0, 0, 157, 1, 17, 132, 10, 0, 0, 0, 112, 155, 136, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87, 158, 53, 0, 0, 0, 0, 0, 78, 85, 158, 0, 0, 0, 0, 70, 154, 8, 97, 25, 0, 0, 9, 167, 28, 0, 89, 47, 0, 0, 40, 119, 0, 11, 140, 8, 0, 0, 16, 147, 137, 117, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 79, 117, 46, 0, 0, 0, 0, 97, 233, 116, 168, 118, 0, 0, 0, 195, 157, 0, 8, 176, 0, 0, 52, 224, 37, 0, 25, 155, 0, 0, 56, 199, 10, 1, 93, 82, 0, 0, 4, 191, 206, 187, 111, 1, 0, 0, 0, 28, 63, 14, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 120, 118, 0, 0, 0, 0, 4, 137, 163, 181, 38, 0, 0, 0, 75, 212, 21, 147, 56, 0, 0, 0, 205, 97, 44, 211, 21, 0, 0, 20, 214, 63, 179, 141, 0, 0, 0, 8, 150, 169, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 160, 118, 0, 0, 0, 0, 93, 222, 78, 160, 31, 0, 0, 0, 179, 166, 0, 75, 110, 0, 0, 12, 244, 66, 0, 102, 89, 0, 0, 6, 234, 76, 87, 203, 21, 0, 0, 0, 123, 188, 166, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 150, 0, 0, 0, 0, 0, 77, 219, 143, 0, 0, 0, 0, 48, 166, 41, 163, 0, 0, 0, 0, 158, 72, 7, 158, 0, 0, 0, 0, 170, 11, 112, 132, 0, 0, 0, 0, 138, 153, 72, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 148, 179, 16, 0, 0, 0, 20, 177, 105, 127, 96, 0, 0, 0, 162, 176, 4, 72, 144, 0, 0, 37, 205, 23, 0, 116, 74, 0, 0, 50, 196, 66, 116, 192, 16, 0, 0, 0, 114, 168, 105, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 140, 160, 51, 0, 0, 0, 2, 198, 157, 146, 191, 74, 0, 0, 26, 180, 9, 0, 44, 150, 0, 0, 56, 148, 0, 0, 43, 132, 0, 0, 20, 198, 70, 71, 169, 59, 0, 0, 0, 90, 180, 160, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 99, 86, 12, 0, 0, 0, 0, 134, 133, 42, 135, 4, 0, 0, 0, 168, 109, 0, 88, 50, 0, 0, 0, 137, 27, 0, 23, 72, 0, 0, 0, 148, 55, 0, 81, 56, 0, 0, 0, 37, 152, 144, 125, 0, 0, 0, 0, 0, 19, 42, 7, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 82, 16, 0, 0, 0, 0, 49, 178, 114, 140, 45, 0, 0, 0, 105, 84, 0, 70, 92, 0, 0, 0, 109, 3, 0, 99, 34, 0, 0, 0, 125, 0, 33, 129, 1, 0, 0, 0, 85, 92, 98, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 137, 54, 0, 0, 0, 12, 96, 209, 224, 66, 0, 0, 0, 142, 224, 65, 116, 102, 0, 0, 68, 186, 28, 43, 191, 43, 0, 13, 170, 155, 119, 200, 132, 1, 0, 0, 51, 145, 117, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 161, 24, 0, 0, 0, 0, 66, 231, 194, 207, 10, 0, 0, 0, 182, 193, 35, 217, 42, 0, 0, 35, 252, 84, 7, 182, 84, 0, 0, 38, 252, 117, 107, 228, 35, 0, 0, 0, 119, 178, 143, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 15, 21, 0, 0, 0, 0, 0, 14, 151, 49, 0, 0, 0, 0, 0, 133, 136, 105, 0, 0, 0, 0, 10, 191, 72, 144, 0, 0, 0, 0, 80, 212, 112, 157, 0, 0, 0, 0, 77, 224, 203, 98, 0, 0, 0, 0, 0, 80, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 123, 108, 1, 0, 0, 0, 4, 121, 211, 231, 8, 0, 0, 0, 75, 221, 84, 211, 8, 0, 0, 2, 204, 69, 111, 179, 0, 0, 0, 9, 191, 51, 201, 69, 0, 0, 0, 1, 186, 216, 46, 0, 0, 0, 0, 0, 21, 32, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 170, 113, 1, 0, 0, 0, 17, 174, 85, 120, 99, 0, 0, 0, 112, 155, 0, 37, 137, 0, 0, 16, 171, 13, 1, 112, 94, 0, 0, 40, 137, 6, 97, 180, 10, 0, 0, 6, 157, 172, 120, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 172, 136, 16, 0, 0, 0, 35, 148, 91, 123, 86, 0, 0, 0, 176, 149, 0, 119, 75, 0, 0, 51, 183, 10, 22, 205, 50, 0, 0, 86, 162, 92, 172, 142, 3, 0, 0, 44, 168, 143, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 90, 129, 170, 23, 0, 0, 0, 124, 252, 252, 239, 18, 0, 0, 29, 243, 219, 219, 252, 30, 0, 0, 69, 252, 176, 177, 252, 68, 0, 0, 28, 252, 244, 244, 252, 56, 0, 0, 0, 61, 150, 150, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 81, 5, 0, 0, 0, 86, 192, 251, 247, 118, 0, 0, 36, 232, 174, 89, 112, 211, 28, 0, 126, 156, 5, 0, 81, 172, 3, 0, 125, 174, 58, 88, 193, 122, 0, 0, 18, 154, 188, 144, 72, 0, 0, 0, 0, 2, 10, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 66, 175, 138, 46, 0, 0, 0, 119, 1, 6, 46, 178, 36, 0, 0, 136, 16, 0, 0, 47, 113, 0, 0, 92, 50, 0, 0, 26, 136, 0, 0, 47, 138, 21, 70, 161, 58, 0, 0, 0, 110, 173, 125, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 145, 172, 115, 5, 0, 0, 73, 190, 38, 17, 81, 129, 0, 0, 126, 91, 0, 0, 0, 141, 0, 0, 72, 128, 0, 0, 6, 171, 20, 0, 25, 202, 74, 59, 136, 107, 0, 0, 0, 51, 134, 150, 102, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 151, 130, 12, 0, 0, 0, 0, 168, 77, 79, 82, 0, 0, 0, 61, 182, 9, 54, 100, 0, 0, 0, 164, 66, 2, 123, 42, 0, 0, 0, 160, 11, 87, 147, 1, 0, 0, 0, 149, 153, 84, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 144, 41, 0, 0, 0, 0, 0, 24, 180, 196, 6, 0, 0, 0, 14, 159, 87, 180, 24, 0, 0, 0, 145, 153, 15, 195, 20, 0, 0, 0, 194, 91, 142, 164, 0, 0, 0, 0, 99, 187, 113, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 145, 154, 77, 0, 0, 0, 0, 98, 191, 215, 207, 91, 0, 0, 42, 217, 112, 77, 56, 203, 24, 0, 119, 126, 0, 0, 7, 245, 55, 0, 73, 193, 70, 49, 140, 157, 12, 0, 0, 105, 147, 143, 98, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 138, 155, 1, 0, 0, 0, 16, 158, 165, 228, 95, 0, 0, 0, 102, 164, 176, 106, 112, 0, 0, 3, 162, 136, 21, 117, 47, 0, 0, 18, 158, 123, 93, 168, 1, 0, 0, 3, 145, 181, 85, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 86, 79, 10, 0, 0, 41, 100, 240, 209, 224, 177, 10, 0, 110, 177, 205, 82, 95, 177, 6, 0, 124, 164, 8, 1, 90, 135, 0, 0, 76, 210, 50, 79, 201, 100, 0, 0, 0, 162, 251, 199, 111, 0, 0, 0, 0, 19, 62, 17, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 103, 0, 0, 0, 0, 17, 129, 183, 155, 152, 31, 0, 0, 133, 156, 130, 20, 145, 61, 0, 51, 114, 113, 2, 21, 140, 9, 0, 108, 81, 78, 48, 152, 39, 0, 0, 39, 173, 159, 116, 21, 0, 0, 0, 0, 16, 4, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 85, 88, 0, 0, 0, 0, 55, 137, 99, 153, 99, 0, 0, 26, 146, 29, 0, 1, 143, 0, 0, 123, 9, 0, 0, 3, 144, 0, 0, 113, 2, 0, 4, 100, 77, 0, 0, 39, 120, 106, 132, 74, 0, 0, 0, 0, 0, 6, 2, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 47, 112, 80, 0, 0, 0, 11, 163, 244, 203, 162, 103, 0, 0, 86, 224, 97, 42, 3, 176, 6, 0, 107, 142, 2, 0, 49, 178, 12, 0, 69, 136, 1, 0, 118, 97, 0, 0, 0, 121, 180, 210, 175, 0, 0, 0, 0, 1, 41, 59, 12, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 99, 88, 0, 0, 0, 0, 48, 186, 243, 141, 89, 0, 0, 3, 146, 190, 114, 10, 127, 0, 0, 109, 61, 119, 0, 37, 91, 0, 0, 124, 6, 31, 11, 128, 24, 0, 0, 63, 146, 144, 135, 46, 0, 0, 0, 0, 29, 54, 8, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 124, 132, 60, 0, 0, 0, 0, 184, 152, 42, 153, 22, 0, 0, 25, 227, 48, 0, 55, 113, 0, 0, 30, 173, 1, 0, 75, 159, 0, 0, 2, 164, 32, 76, 211, 57, 0, 0, 0, 42, 155, 172, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 59, 2, 0, 0, 0, 0, 153, 237, 217, 169, 30, 0, 0, 75, 140, 79, 47, 85, 137, 0, 0, 150, 4, 0, 0, 42, 164, 0, 0, 105, 131, 119, 150, 182, 73, 0, 0, 0, 47, 66, 29, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 126, 28, 0, 0, 0, 0, 47, 165, 168, 16, 0, 0, 0, 38, 162, 33, 79, 70, 0, 0, 5, 156, 42, 4, 112, 54, 0, 0, 46, 110, 9, 119, 141, 4, 0, 0, 36, 168, 139, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 43, 0, 0, 0, 3, 0, 0, 75, 185, 0, 0, 0, 0, 0, 60, 115, 157, 0, 0, 0, 0, 46, 144, 7, 156, 0, 0, 0, 11, 171, 32, 105, 144, 0, 0, 0, 67, 138, 95, 155, 28, 0, 0, 0, 29, 119, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 72, 0, 0, 0, 0, 0, 71, 234, 214, 1, 0, 0, 0, 15, 172, 90, 177, 34, 0, 0, 0, 100, 179, 22, 156, 11, 0, 0, 0, 143, 139, 134, 92, 0, 0, 0, 0, 140, 215, 54, 0, 0, 0, 0, 0, 20, 41, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 117, 0, 0, 0, 0, 0, 93, 168, 144, 0, 0, 0, 0, 73, 157, 2, 139, 10, 0, 0, 6, 172, 20, 5, 169, 7, 0, 0, 15, 121, 5, 106, 131, 0, 0, 0, 4, 146, 136, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 145, 83, 24, 0, 0, 0, 13, 205, 79, 79, 141, 75, 0, 0, 89, 112, 8, 0, 10, 160, 3, 0, 110, 58, 0, 0, 0, 165, 50, 0, 60, 161, 63, 52, 110, 155, 18, 0, 0, 53, 105, 114, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 91, 9, 0, 0, 0, 7, 143, 176, 109, 146, 22, 0, 0, 118, 210, 27, 0, 160, 35, 0, 26, 207, 43, 0, 79, 98, 0, 0, 108, 167, 5, 105, 133, 5, 0, 0, 60, 173, 145, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 102, 149, 30, 0, 0, 0, 0, 129, 239, 198, 172, 0, 0, 0, 2, 224, 146, 74, 235, 2, 0, 0, 33, 208, 25, 85, 253, 26, 0, 0, 16, 207, 90, 207, 222, 7, 0, 0, 0, 94, 158, 129, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 88, 34, 7, 0, 0, 0, 50, 171, 63, 128, 82, 0, 0, 0, 151, 102, 0, 88, 57, 0, 0, 0, 172, 28, 20, 140, 0, 0, 0, 0, 154, 4, 124, 98, 0, 0, 0, 0, 167, 188, 70, 1, 0, 0, 0, 0, 25, 35, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 149, 26, 0, 0, 0, 12, 136, 70, 31, 105, 0, 0, 0, 111, 120, 0, 34, 97, 0, 0, 23, 135, 2, 8, 123, 37, 0, 0, 97, 64, 16, 132, 114, 0, 0, 0, 65, 154, 119, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 125, 81, 0, 0, 0, 1, 86, 153, 154, 28, 0, 0, 0, 86, 151, 13, 49, 85, 0, 0, 37, 136, 6, 0, 88, 60, 0, 0, 126, 34, 7, 104, 145, 3, 0, 0, 58, 161, 142, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 45, 154, 129, 4, 0, 0, 3, 231, 174, 12, 63, 111, 0, 0, 34, 227, 51, 0, 0, 160, 2, 0, 35, 217, 60, 0, 11, 158, 1, 0, 2, 197, 138, 14, 120, 68, 0, 0, 0, 34, 148, 156, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 129, 148, 57, 0, 0, 0, 36, 158, 59, 1, 137, 0, 0, 2, 173, 90, 0, 10, 139, 0, 0, 87, 90, 0, 31, 152, 43, 0, 0, 146, 27, 53, 165, 84, 0, 0, 0, 53, 152, 99, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 154, 71, 0, 0, 0, 7, 124, 154, 81, 156, 11, 0, 0, 110, 211, 10, 0, 143, 24, 0, 43, 148, 87, 0, 66, 121, 1, 0, 117, 65, 6, 91, 161, 17, 0, 0, 60, 166, 153, 70, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 50, 22, 0, 0, 0, 32, 176, 219, 247, 241, 77, 0, 0, 136, 185, 82, 75, 116, 175, 0, 0, 164, 81, 0, 0, 80, 178, 0, 0, 115, 188, 81, 123, 215, 85, 0, 0, 3, 96, 164, 140, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 66, 44, 0, 0, 0, 0, 8, 187, 190, 172, 181, 111, 1, 0, 66, 184, 26, 0, 19, 194, 45, 0, 123, 82, 0, 12, 96, 175, 11, 0, 65, 204, 176, 191, 186, 40, 0, 0, 0, 43, 56, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 150, 163, 65, 0, 0, 0, 0, 187, 245, 252, 213, 2, 0, 0, 1, 222, 186, 179, 251, 8, 0, 0, 9, 252, 219, 99, 229, 6, 0, 0, 3, 206, 251, 239, 201, 0, 0, 0, 0, 55, 162, 138, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 76, 7, 0, 0, 0, 0, 55, 151, 63, 169, 3, 0, 0, 0, 152, 111, 0, 99, 45, 0, 0, 1, 140, 3, 0, 16, 97, 0, 0, 0, 129, 14, 0, 14, 56, 0, 0, 0, 47, 124, 56, 94, 0, 0, 0, 0, 0, 19, 41, 17, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 200, 179, 134, 115, 34, 0, 0, 125, 131, 52, 80, 128, 160, 25, 0, 79, 156, 13, 0, 8, 179, 62, 0, 13, 180, 183, 117, 139, 147, 22, 0, 0, 0, 15, 85, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 74, 89, 10, 0, 0, 0, 117, 214, 142, 146, 171, 22, 0, 45, 216, 85, 0, 0, 176, 60, 0, 122, 110, 0, 0, 21, 203, 38, 0, 95, 161, 41, 62, 160, 113, 0, 0, 1, 121, 169, 177, 118, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 169, 108, 33, 0, 0, 0, 3, 227, 148, 138, 221, 36, 0, 0, 42, 190, 18, 4, 115, 105, 0, 0, 58, 147, 0, 0, 47, 150, 0, 0, 37, 198, 53, 67, 176, 91, 0, 0, 0, 112, 186, 166, 107, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 103, 120, 53, 0, 0, 0, 18, 198, 80, 100, 237, 33, 0, 0, 85, 134, 0, 53, 135, 127, 0, 0, 94, 86, 0, 0, 15, 202, 14, 0, 35, 169, 18, 0, 85, 154, 1, 0, 0, 80, 168, 187, 163, 12, 0, 0, 0, 0, 15, 49, 6, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 169, 190, 159, 80, 0, 0, 34, 186, 122, 58, 55, 171, 32, 0, 120, 81, 0, 0, 41, 173, 22, 0, 54, 198, 140, 141, 188, 65, 0, 0, 0, 15, 42, 38, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 66, 182, 175, 22, 0, 0, 1, 146, 221, 84, 100, 129, 0, 0, 45, 242, 105, 0, 49, 140, 0, 0, 140, 133, 0, 7, 147, 105, 0, 0, 119, 166, 105, 154, 210, 36, 0, 0, 8, 151, 189, 140, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 74, 99, 37, 0, 0, 0, 0, 120, 148, 39, 113, 0, 0, 0, 0, 155, 62, 0, 114, 22, 0, 0, 0, 135, 17, 8, 169, 11, 0, 0, 0, 135, 38, 125, 158, 0, 0, 0, 0, 52, 168, 115, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 176, 155, 0, 0, 0, 0, 53, 203, 86, 157, 35, 0, 0, 3, 192, 145, 0, 129, 53, 0, 0, 50, 182, 12, 24, 196, 13, 0, 0, 45, 202, 71, 144, 194, 0, 0, 0, 0, 100, 181, 154, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 121, 172, 41, 0, 0, 0, 0, 104, 234, 142, 216, 33, 0, 0, 3, 202, 163, 4, 126, 85, 0, 0, 18, 225, 39, 2, 129, 95, 0, 0, 11, 216, 111, 120, 229, 43, 0, 0, 0, 79, 171, 165, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 91, 25, 0, 0, 0, 0, 53, 179, 185, 211, 3, 0, 0, 0, 122, 100, 1, 135, 51, 0, 0, 36, 127, 0, 0, 109, 57, 0, 0, 63, 106, 0, 12, 143, 2, 0, 0, 39, 185, 153, 126, 38, 0, 0, 0, 0, 33, 63, 12, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 158, 182, 94, 0, 0, 0, 146, 193, 46, 36, 195, 13, 0, 17, 232, 76, 0, 46, 175, 4, 0, 79, 174, 2, 19, 172, 113, 0, 0, 44, 219, 90, 166, 209, 13, 0, 0, 0, 113, 169, 140, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 81, 145, 115, 8, 0, 0, 16, 212, 181, 67, 134, 146, 0, 0, 81, 179, 26, 0, 11, 181, 31, 0, 117, 134, 5, 0, 27, 201, 35, 0, 54, 227, 170, 132, 199, 143, 2, 0, 0, 38, 91, 104, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 37, 20, 0, 0, 0, 0, 0, 66, 219, 78, 0, 0, 0, 0, 49, 176, 123, 158, 0, 0, 0, 0, 150, 70, 6, 123, 45, 0, 0, 30, 131, 0, 0, 17, 115, 0, 0, 20, 171, 69, 70, 132, 105, 0, 0, 0, 43, 93, 106, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 114, 106, 0, 0, 0, 0, 55, 193, 96, 113, 25, 0, 0, 0, 117, 125, 0, 95, 9, 0, 0, 0, 126, 33, 2, 125, 0, 0, 0, 0, 133, 54, 68, 120, 0, 0, 0, 0, 61, 178, 140, 21, 0, 0, 0, 0, 1, 40, 14, 0, 0, 0 },
    { 0, 0, 0, 0, 35, 20, 0, 0, 0, 0, 3, 72, 219, 114, 0, 0, 0, 0, 156, 228, 125, 209, 48, 0, 0, 54, 232, 88, 0, 126, 117, 0, 0, 122, 138, 0, 0, 105, 135, 0, 0, 87, 222, 148, 156, 221, 64, 0, 0, 1, 88, 125, 120, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 2, 44, 3, 0, 0, 0, 0, 0, 84, 94, 20, 1, 0, 0, 0, 94, 114, 0, 28, 74, 0, 0, 11, 135, 16, 0, 0, 110, 17, 0, 98, 27, 0, 0, 0, 106, 16, 0, 91, 59, 18, 47, 83, 67, 0, 0, 1, 68, 99, 52, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 79, 144, 93, 0, 0, 0, 32, 206, 203, 145, 212, 121, 5, 0, 105, 190, 30, 1, 42, 233, 49, 0, 121, 140, 0, 1, 74, 212, 32, 0, 67, 230, 166, 145, 225, 96, 2, 0, 0, 82, 143, 141, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 75, 94, 22, 0, 0, 0, 31, 210, 226, 219, 229, 57, 0, 0, 119, 199, 61, 43, 181, 123, 0, 0, 171, 127, 1, 1, 127, 143, 0, 0, 88, 232, 138, 130, 232, 87, 0, 0, 1, 106, 191, 171, 105, 1, 0, 0, 0, 0, 11, 5, 0, 0, 0 },
    { 0, 0, 0, 10, 26, 0, 0, 0, 0, 0, 0, 37, 103, 71, 0, 0, 0, 0, 7, 0, 0, 61, 60, 0, 0, 1, 80, 0, 0, 2, 89, 0, 0, 24, 86, 0, 0, 66, 33, 0, 0, 13, 116, 18, 34, 91, 0, 0, 0, 0, 36, 106, 59, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 99, 67, 10, 0, 0, 0, 0, 125, 72, 68, 142, 66, 0, 0, 16, 156, 17, 0, 13, 172, 34, 0, 121, 37, 0, 0, 30, 157, 34, 0, 107, 121, 100, 134, 146, 59, 0, 0, 1, 39, 39, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98, 158, 75, 2, 0, 0, 0, 26, 231, 47, 127, 151, 1, 0, 0, 17, 193, 14, 24, 201, 56, 0, 0, 13, 151, 0, 0, 50, 155, 0, 0, 4, 179, 24, 28, 101, 120, 0, 0, 0, 89, 169, 145, 87, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 92, 90, 88, 3, 0, 0, 0, 106, 24, 0, 76, 127, 0, 0, 0, 116, 6, 0, 0, 94, 53, 0, 0, 73, 52, 0, 0, 0, 140, 26, 0, 23, 113, 0, 0, 3, 123, 23, 0, 0, 76, 118, 107, 100, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 220, 231, 187, 39, 0, 0, 56, 189, 80, 65, 94, 167, 8, 0, 126, 96, 0, 0, 0, 189, 62, 0, 109, 104, 0, 0, 47, 178, 25, 0, 15, 116, 87, 76, 108, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 152, 20, 0, 0, 0, 0, 11, 165, 110, 167, 5, 0, 0, 0, 78, 173, 0, 135, 8, 0, 0, 0, 131, 95, 29, 179, 3, 0, 0, 0, 112, 125, 124, 134, 0, 0, 0, 0, 35, 161, 132, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 57, 93, 29, 0, 0, 0, 0, 114, 253, 198, 198, 32, 0, 0, 11, 181, 170, 92, 81, 127, 0, 0, 96, 103, 0, 0, 0, 181, 26, 0, 116, 86, 0, 0, 0, 199, 55, 0, 55, 159, 23, 13, 93, 142, 10, 0, 2, 38, 15, 10, 38, 11, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 118, 176, 226, 188, 16, 0, 0, 90, 214, 186, 206, 203, 125, 0, 0, 185, 92, 22, 20, 113, 172, 0, 0, 90, 220, 195, 170, 208, 52, 0, 0, 0, 17, 50, 45, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 135, 37, 1, 0, 0, 0, 0, 129, 66, 79, 126, 19, 0, 0, 0, 134, 0, 0, 36, 109, 0, 0, 5, 100, 0, 0, 18, 104, 0, 0, 8, 107, 0, 18, 117, 33, 0, 0, 0, 90, 122, 109, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 126, 13, 0, 0, 0, 0, 66, 203, 194, 225, 44, 0, 0, 1, 177, 122, 29, 153, 149, 0, 0, 74, 167, 12, 11, 143, 149, 0, 0, 47, 180, 83, 178, 207, 44, 0, 0, 2, 124, 165, 69, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 115, 192, 195, 146, 57, 0, 0, 58, 202, 103, 42, 78, 147, 0, 0, 143, 8, 0, 0, 4, 156, 0, 0, 150, 13, 0, 1, 91, 97, 0, 0, 31, 38, 0, 43, 78, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 118, 133, 29, 0, 0, 0, 0, 63, 145, 49, 153, 0, 0, 0, 0, 102, 112, 0, 163, 12, 0, 0, 0, 159, 51, 55, 203, 4, 0, 0, 0, 142, 75, 164, 115, 0, 0, 0, 0, 36, 155, 75, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 73, 40, 0, 0, 0, 0, 2, 200, 206, 208, 156, 7, 0, 0, 59, 160, 22, 33, 143, 116, 1, 0, 126, 46, 0, 0, 1, 197, 45, 0, 126, 28, 0, 0, 15, 200, 30, 0, 78, 124, 49, 60, 139, 50, 0, 0, 2, 12, 12, 12, 10, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 128, 72, 0, 0, 0, 0, 1, 126, 112, 134, 18, 0, 0, 0, 46, 207, 16, 81, 26, 0, 0, 0, 138, 132, 0, 125, 25, 0, 0, 0, 156, 103, 39, 160, 5, 0, 0, 0, 54, 160, 137, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 75, 101, 18, 0, 0, 0, 3, 173, 218, 241, 163, 8, 0, 0, 57, 133, 51, 69, 122, 94, 0, 0, 96, 71, 0, 0, 1, 178, 32, 0, 52, 145, 5, 0, 0, 161, 32, 0, 0, 121, 167, 119, 168, 88, 0, 0, 0, 3, 33, 61, 58, 1, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 104, 45, 0, 0, 0, 0, 0, 93, 23, 111, 0, 0, 0, 0, 32, 101, 21, 101, 0, 0, 0, 0, 47, 114, 69, 115, 0, 0, 0, 0, 30, 105, 124, 70, 0, 0, 0, 0, 0, 85, 103, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 146, 120, 8, 0, 0, 0, 8, 180, 62, 125, 170, 3, 0, 0, 72, 100, 0, 0, 114, 79, 0, 0, 104, 58, 0, 0, 6, 182, 23, 0, 70, 131, 8, 0, 48, 154, 12, 0, 1, 108, 158, 144, 106, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 121, 153, 35, 0, 0, 0, 1, 181, 115, 70, 180, 73, 0, 0, 26, 169, 8, 0, 45, 166, 2, 0, 97, 109, 0, 0, 11, 194, 5, 0, 67, 175, 34, 25, 117, 128, 1, 0, 0, 70, 144, 149, 90, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 70, 115, 54, 0, 0, 0, 0, 111, 237, 217, 241, 128, 0, 0, 4, 220, 185, 28, 144, 163, 0, 0, 71, 235, 61, 5, 139, 174, 0, 0, 72, 244, 139, 144, 238, 81, 0, 0, 5, 144, 199, 203, 94, 4, 0, 0, 0, 1, 12, 23, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 182, 88, 0, 0, 0, 0, 125, 124, 24, 118, 47, 0, 0, 8, 150, 5, 0, 21, 138, 0, 0, 44, 115, 0, 0, 0, 141, 0, 0, 10, 162, 12, 0, 37, 127, 0, 0, 0, 69, 145, 120, 120, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 78, 154, 41, 0, 0, 0, 15, 141, 116, 55, 141, 3, 0, 0, 43, 131, 0, 0, 82, 39, 0, 0, 21, 155, 0, 0, 49, 110, 0, 0, 3, 181, 25, 47, 156, 79, 0, 0, 0, 98, 164, 173, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 123, 167, 28, 0, 0, 0, 4, 182, 136, 115, 176, 9, 0, 0, 52, 139, 2, 0, 88, 97, 0, 0, 99, 67, 0, 0, 0, 164, 12, 0, 69, 133, 2, 0, 17, 153, 11, 0, 1, 133, 134, 91, 126, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 126, 84, 21, 0, 0, 0, 19, 242, 187, 124, 193, 35, 0, 0, 65, 184, 13, 0, 111, 130, 0, 0, 51, 188, 7, 0, 92, 166, 0, 0, 4, 206, 89, 7, 145, 137, 0, 0, 0, 33, 167, 198, 171, 13, 0, 0, 0, 0, 12, 35, 4, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 93, 95, 66, 0, 0, 0, 0, 115, 191, 41, 105, 111, 0, 0, 45, 167, 61, 10, 12, 205, 23, 0, 125, 48, 0, 0, 42, 185, 17, 0, 115, 75, 0, 29, 164, 51, 0, 0, 20, 159, 130, 124, 34, 0, 0, 0, 0, 19, 42, 2, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 115, 19, 0, 0, 0, 0, 105, 176, 224, 183, 7, 0, 0, 6, 173, 32, 96, 164, 56, 0, 0, 59, 89, 0, 0, 144, 38, 0, 0, 49, 111, 0, 71, 174, 0, 0, 0, 4, 186, 216, 160, 29, 0, 0, 0, 0, 24, 61, 7, 0, 0, 0 },
    { 0, 0, 0, 0, 19, 18, 0, 0, 0, 0, 0, 0, 124, 43, 0, 0, 0, 0, 0, 53, 57, 84, 0, 0, 0, 0, 5, 106, 7, 128, 0, 0, 0, 0, 80, 93, 34, 122, 0, 0, 0, 0, 115, 75, 136, 65, 0, 0, 0, 0, 52, 117, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 95, 59, 71, 1, 0, 0, 23, 197, 94, 88, 151, 121, 0, 0, 91, 152, 3, 0, 19, 192, 7, 0, 114, 72, 0, 0, 36, 166, 1, 0, 91, 96, 0, 63, 177, 120, 0, 0, 10, 198, 204, 143, 56, 0, 0, 0, 0, 19, 34, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98, 159, 99, 0, 0, 0, 0, 53, 170, 82, 127, 71, 0, 0, 0, 156, 100, 0, 47, 93, 0, 0, 6, 162, 0, 1, 141, 53, 0, 0, 9, 162, 7, 110, 181, 3, 0, 0, 0, 152, 163, 94, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 89, 168, 65, 0, 0, 0, 32, 172, 122, 104, 118, 0, 0, 0, 160, 137, 1, 71, 83, 0, 0, 93, 109, 0, 16, 169, 22, 0, 0, 152, 26, 8, 143, 166, 0, 0, 0, 74, 167, 167, 74, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 119, 87, 0, 0, 0, 0, 0, 39, 195, 171, 107, 0, 0, 0, 0, 79, 151, 27, 171, 12, 0, 0, 0, 139, 99, 0, 143, 16, 0, 0, 0, 159, 67, 51, 151, 0, 0, 0, 0, 91, 147, 115, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 147, 85, 0, 0, 0, 0, 28, 178, 118, 195, 5, 0, 0, 0, 133, 127, 0, 132, 30, 0, 0, 12, 156, 6, 28, 183, 5, 0, 0, 36, 127, 26, 165, 137, 0, 0, 0, 9, 173, 181, 80, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 111, 123, 28, 0, 0, 0, 94, 186, 141, 224, 173, 0, 0, 24, 189, 53, 17, 57, 168, 0, 0, 145, 43, 0, 2, 91, 132, 0, 0, 172, 13, 3, 116, 204, 31, 0, 0, 62, 223, 216, 139, 32, 0, 0, 0, 0, 40, 33, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 44, 92, 76, 0, 0, 0, 37, 145, 93, 23, 60, 58, 0, 0, 90, 31, 0, 0, 5, 100, 0, 0, 111, 13, 0, 0, 0, 114, 0, 0, 62, 63, 0, 0, 49, 80, 0, 0, 0, 100, 121, 115, 101, 1, 0, 0, 0, 0, 34, 20, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 126, 42, 5, 0, 0, 0, 76, 216, 54, 121, 135, 0, 0, 15, 197, 92, 0, 68, 138, 0, 0, 90, 115, 1, 4, 163, 66, 0, 0, 83, 136, 52, 145, 202, 9, 0, 0, 5, 142, 169, 103, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 89, 123, 61, 0, 0, 0, 0, 119, 145, 32, 187, 11, 0, 0, 0, 172, 58, 0, 99, 75, 0, 0, 0, 181, 21, 0, 86, 96, 0, 0, 0, 185, 34, 7, 148, 47, 0, 0, 0, 94, 161, 149, 100, 0, 0, 0, 0, 0, 21, 18, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 160, 189, 45, 0, 0, 0, 76, 200, 92, 101, 140, 0, 0, 1, 193, 98, 0, 80, 136, 0, 0, 41, 146, 0, 36, 198, 38, 0, 0, 50, 150, 60, 194, 166, 0, 0, 0, 3, 153, 189, 87, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 75, 132, 42, 0, 0, 0, 6, 168, 182, 95, 203, 84, 0, 0, 57, 175, 21, 10, 119, 167, 0, 0, 162, 26, 0, 4, 91, 138, 0, 0, 160, 71, 91, 163, 232, 65, 0, 0, 77, 109, 138, 102, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 100, 35, 0, 0, 0, 0, 38, 178, 141, 202, 40, 0, 0, 0, 136, 90, 0, 127, 54, 0, 0, 0, 136, 4, 0, 127, 12, 0, 0, 0, 139, 8, 45, 146, 0, 0, 0, 0, 154, 144, 119, 22, 0, 0, 0, 0, 18, 47, 3, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 0, 98, 164, 111, 52, 0, 0, 0, 21, 173, 145, 162, 164, 70, 0, 0, 117, 42, 11, 0, 0, 132, 0, 0, 129, 0, 0, 3, 75, 113, 0, 0, 59, 0, 19, 100, 79, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 123, 171, 15, 0, 0, 0, 46, 182, 102, 115, 129, 0, 0, 7, 176, 106, 0, 29, 158, 0, 0, 110, 78, 0, 0, 107, 99, 0, 0, 143, 44, 6, 109, 180, 17, 0, 0, 42, 158, 176, 116, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 69, 1, 0, 0, 0, 26, 131, 157, 226, 105, 0, 0, 25, 172, 129, 6, 94, 174, 0, 0, 160, 85, 0, 51, 178, 108, 0, 0, 133, 213, 177, 149, 105, 6, 0, 0, 1, 23, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 119, 114, 40, 0, 0, 0, 118, 196, 46, 62, 132, 0, 0, 66, 205, 43, 0, 4, 119, 3, 0, 125, 137, 0, 0, 73, 140, 2, 0, 110, 162, 6, 73, 205, 48, 0, 0, 7, 152, 182, 190, 76, 0, 0, 0, 0, 2, 10, 17, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 135, 27, 0, 0, 0, 0, 0, 82, 162, 59, 0, 0, 0, 0, 0, 134, 79, 129, 0, 0, 0, 0, 37, 174, 71, 135, 0, 0, 0, 0, 38, 160, 136, 91, 0, 0, 0, 0, 4, 100, 115, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 146, 84, 0, 0, 0, 57, 181, 116, 79, 175, 0, 0, 27, 185, 97, 0, 15, 156, 0, 0, 153, 35, 0, 33, 177, 61, 0, 0, 161, 17, 67, 193, 143, 2, 0, 0, 61, 173, 143, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 106, 154, 25, 0, 0, 0, 59, 171, 129, 197, 24, 0, 0, 24, 177, 72, 3, 100, 96, 0, 0, 112, 70, 0, 8, 133, 58, 0, 0, 128, 47, 17, 129, 148, 0, 0, 0, 33, 178, 163, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 118, 91, 0, 0, 0, 0, 68, 178, 163, 164, 71, 0, 0, 0, 183, 89, 4, 27, 123, 0, 0, 53, 180, 7, 0, 42, 120, 0, 0, 98, 130, 1, 5, 134, 78, 0, 0, 22, 171, 175, 100, 97, 1, 0, 0, 0, 9, 39, 41, 1, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 127, 163, 11, 0, 0, 0, 59, 191, 115, 159, 139, 0, 0, 8, 187, 87, 0, 8, 147, 0, 0, 87, 79, 0, 11, 127, 119, 0, 0, 95, 75, 63, 171, 187, 11, 0, 0, 15, 175, 167, 71, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 95, 126, 89, 2, 0, 0, 10, 223, 234, 84, 148, 92, 0, 0, 16, 241, 136, 0, 60, 150, 0, 0, 16, 195, 23, 1, 109, 102, 0, 0, 45, 205, 15, 66, 196, 29, 0, 0, 2, 177, 219, 173, 53, 0, 0, 0, 0, 20, 61, 11, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 102, 100, 2, 0, 0, 0, 101, 190, 140, 193, 151, 12, 0, 13, 166, 41, 4, 17, 215, 45, 0, 94, 56, 0, 0, 42, 168, 17, 0, 100, 64, 3, 94, 169, 41, 0, 0, 38, 213, 202, 99, 5, 0, 0, 0, 0, 25, 16, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 17, 0, 0, 0, 0, 22, 136, 205, 223, 177, 20, 0, 0, 152, 154, 29, 96, 145, 8, 0, 56, 127, 1, 22, 169, 52, 0, 0, 98, 147, 93, 180, 161, 3, 0, 0, 5, 96, 110, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 76, 73, 0, 0, 0, 0, 57, 86, 0, 93, 0, 0, 0, 0, 67, 0, 0, 81, 0, 0, 0, 0, 60, 0, 0, 95, 0, 0, 0, 0, 67, 0, 21, 101, 0, 0, 0, 0, 94, 101, 86, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 71, 25, 0, 0, 0, 0, 42, 187, 205, 188, 117, 0, 0, 2, 193, 205, 52, 42, 182, 0, 0, 96, 162, 9, 20, 148, 123, 0, 0, 166, 82, 68, 176, 185, 25, 0, 0, 105, 189, 149, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 67, 0, 0, 0, 11, 88, 201, 223, 189, 0, 0, 17, 166, 229, 105, 67, 186, 0, 0, 164, 193, 39, 52, 179, 85, 0, 0, 142, 230, 188, 215, 141, 3, 0, 0, 5, 89, 92, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 77, 86, 12, 0, 0, 0, 60, 197, 250, 187, 150, 0, 0, 33, 207, 132, 199, 108, 185, 0, 0, 148, 74, 20, 8, 150, 95, 0, 0, 180, 0, 15, 147, 189, 12, 0, 0, 110, 189, 177, 61, 1, 0, 0, 0, 4, 27, 9, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 92, 7, 0, 0, 0, 0, 0, 101, 165, 4, 0, 0, 0, 0, 8, 184, 55, 0, 0, 0, 0, 3, 142, 83, 0, 0, 0, 0, 0, 59, 208, 11, 0, 0, 0, 0, 0, 133, 129, 0, 0, 0, 0, 0, 0, 29, 29, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 55, 0, 0, 0, 0, 0, 0, 108, 104, 0, 0, 0, 0, 0, 0, 71, 153, 0, 0, 0, 0, 0, 0, 63, 168, 2, 0, 0, 0, 0, 0, 31, 223, 38, 0, 0, 0, 0, 0, 0, 156, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 28, 0, 0, 0, 0, 0, 0, 68, 79, 0, 0, 0, 0, 0, 0, 55, 97, 0, 0, 0, 0, 0, 0, 34, 120, 0, 0, 0, 0, 0, 0, 10, 129, 0, 0, 0, 0, 0, 0, 0, 111, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 8, 0, 0, 0, 0, 0, 0, 84, 57, 0, 0, 0, 0, 0, 0, 70, 90, 0, 0, 0, 0, 0, 0, 70, 82, 0, 0, 0, 0, 0, 0, 70, 76, 0, 0, 0, 0, 0, 0, 38, 96, 0, 0, 0, 0, 0, 0, 2, 18, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 6, 0, 0, 0, 0, 0, 102, 184, 2, 0, 0, 0, 0, 9, 189, 72, 0, 0, 0, 0, 1, 128, 95, 0, 0, 0, 0, 0, 59, 195, 9, 0, 0, 0, 0, 0, 129, 101, 0, 0, 0, 0, 0, 0, 28, 17, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 27, 3, 0, 0, 0, 0, 0, 0, 164, 44, 0, 0, 0, 0, 0, 68, 203, 21, 0, 0, 0, 3, 102, 119, 167, 21, 0, 0, 0, 0, 0, 0, 142, 27, 0, 0, 0, 1, 87, 134, 157, 118, 16, 0, 0, 9, 89, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 6, 165, 1, 0, 0, 0, 0, 0, 32, 158, 0, 0, 0, 0, 0, 0, 67, 112, 0, 0, 0, 0, 0, 0, 70, 99, 0, 0, 0, 0, 0, 0, 95, 60, 0, 0, 0, 0, 0, 0, 21, 8, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 145, 0, 0, 0, 0, 0, 0, 131, 139, 0, 0, 0, 0, 0, 21, 182, 35, 0, 0, 0, 0, 2, 147, 66, 0, 0, 0, 0, 0, 55, 179, 3, 0, 0, 0, 0, 0, 95, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 23, 24, 20, 0, 0, 0, 0, 0, 4, 160, 75, 0, 0, 0, 0, 0, 43, 159, 13, 0, 0, 0, 0, 0, 123, 94, 10, 0, 0, 0, 0, 0, 155, 25, 23, 0, 0, 0, 0, 41, 139, 0, 0, 0, 0, 0, 0, 13, 24, 0, 0, 0, 0 },
    { 0, 0, 0, 4, 16, 0, 0, 0, 0, 0, 4, 106, 116, 0, 0, 0, 0, 0, 73, 185, 102, 0, 0, 0, 0, 0, 2, 61, 93, 0, 0, 0, 0, 0, 0, 77, 67, 36, 0, 0, 0, 0, 1, 127, 170, 173, 0, 0, 0, 0, 12, 104, 82, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 32, 0, 0, 0, 0, 0, 0, 34, 99, 0, 0, 0, 0, 0, 0, 23, 114, 0, 0, 0, 0, 0, 0, 44, 101, 0, 0, 0, 0, 0, 0, 82, 67, 0, 0, 0, 0, 0, 0, 77, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 92, 0, 0, 0, 0, 0, 2, 204, 106, 0, 0, 0, 0, 0, 35, 190, 20, 0, 0, 0, 0, 3, 149, 59, 0, 0, 0, 0, 0, 45, 201, 7, 0, 0, 0, 0, 0, 103, 134, 0, 0, 0, 0, 0, 0, 27, 33, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 71, 0, 0, 0, 0, 0, 0, 167, 135, 0, 0, 0, 0, 0, 5, 227, 98, 0, 0, 0, 0, 0, 88, 194, 21, 0, 0, 0, 0, 21, 193, 77, 0, 0, 0, 0, 0, 88, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 55, 0, 0, 0, 0, 0, 0, 142, 108, 0, 0, 0, 0, 0, 0, 164, 41, 0, 0, 0, 0, 0, 43, 124, 0, 0, 0, 0, 0, 5, 118, 37, 0, 0, 0, 0, 0, 83, 92, 0, 0, 0, 0, 0, 0, 23, 5, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 45, 0, 0, 0, 0, 0, 0, 62, 87, 0, 0, 0, 0, 0, 0, 62, 87, 0, 0, 0, 0, 0, 0, 77, 68, 0, 0, 0, 0, 0, 0, 79, 65, 0, 0, 0, 0, 0, 0, 39, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 127, 16, 0, 0, 0, 0, 0, 0, 96, 54, 0, 0, 0, 0, 0, 0, 40, 111, 0, 0, 0, 0, 0, 0, 13, 162, 0, 0, 0, 0, 0, 0, 0, 105, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 141, 0, 0, 0, 0, 0, 2, 205, 85, 0, 0, 0, 0, 0, 59, 183, 6, 0, 0, 0, 0, 19, 176, 82, 0, 0, 0, 0, 0, 43, 230, 25, 0, 0, 0, 0, 0, 56, 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 1, 0, 0, 0, 0, 0, 3, 149, 0, 0, 0, 0, 0, 0, 29, 145, 0, 0, 0, 0, 0, 0, 36, 129, 0, 0, 0, 0, 0, 0, 49, 110, 0, 0, 0, 0, 0, 0, 27, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 125, 0, 0, 0, 0, 0, 0, 192, 94, 0, 0, 0, 0, 0, 50, 221, 39, 0, 0, 0, 0, 14, 157, 128, 0, 0, 0, 0, 0, 113, 215, 24, 0, 0, 0, 0, 0, 153, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 0, 0, 0, 0, 0, 0, 0, 120, 0, 0, 0, 0, 0, 0, 10, 124, 0, 0, 0, 0, 0, 0, 61, 52, 0, 0, 0, 0, 0, 0, 79, 31, 0, 0, 0, 0, 0, 0, 109, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 141, 21, 0, 0, 0, 0, 0, 24, 197, 9, 0, 0, 0, 0, 0, 76, 186, 0, 0, 0, 0, 0, 0, 122, 153, 0, 0, 0, 0, 0, 0, 109, 162, 0, 0, 0, 0, 0, 0, 69, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 146, 31, 0, 0, 0, 0, 0, 0, 177, 201, 10, 0, 0, 0, 0, 0, 46, 206, 121, 1, 0, 0, 0, 0, 0, 28, 236, 103, 0, 0, 0, 0, 0, 0, 154, 198, 9, 0, 0, 0, 0, 0, 32, 166, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 120, 0, 0, 0, 0, 0, 0, 1, 173, 1, 0, 0, 0, 0, 0, 6, 140, 0, 0, 0, 0, 0, 0, 73, 93, 0, 0, 0, 0, 0, 0, 145, 46, 0, 0, 0, 0, 0, 11, 144, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 11, 0, 0, 0, 0, 0, 0, 150, 10, 0, 0, 0, 0, 0, 12, 150, 0, 0, 0, 0, 0, 0, 44, 94, 0, 0, 0, 0, 0, 0, 82, 65, 0, 0, 0, 0, 0, 0, 61, 71, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 86, 0, 0, 0, 0, 0, 11, 204, 122, 0, 0, 0, 0, 0, 27, 238, 48, 0, 0, 0, 0, 0, 88, 170, 5, 0, 0, 0, 0, 11, 183, 86, 0, 0, 0, 0, 0, 103, 211, 1, 0, 0, 0, 0, 0, 27, 44, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 15, 0, 0, 0, 0, 0, 0, 85, 78, 0, 0, 0, 0, 0, 0, 51, 115, 0, 0, 0, 0, 0, 0, 51, 119, 0, 0, 0, 0, 0, 0, 49, 140, 0, 0, 0, 0, 0, 0, 8, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 26, 0, 0, 0, 0, 0, 0, 147, 94, 0, 0, 0, 0, 0, 0, 119, 105, 0, 0, 0, 0, 0, 0, 84, 140, 0, 0, 0, 0, 0, 0, 59, 210, 21, 0, 0, 0, 0, 0, 12, 117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 20, 0, 0, 0, 0, 0, 102, 201, 4, 0, 0, 0, 0, 8, 204, 109, 0, 0, 0, 11, 10, 131, 104, 3, 0, 0, 0, 8, 65, 206, 8, 0, 0, 0, 0, 0, 129, 118, 0, 0, 0, 0, 0, 0, 26, 16, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 131, 0, 0, 0, 0, 0, 0, 181, 119, 0, 0, 0, 0, 0, 37, 199, 32, 0, 0, 0, 0, 15, 170, 74, 0, 0, 0, 0, 0, 99, 183, 6, 0, 0, 0, 0, 0, 140, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131, 52, 0, 0, 0, 0, 0, 2, 239, 53, 0, 0, 0, 0, 0, 13, 211, 23, 0, 0, 0, 0, 0, 88, 139, 0, 0, 0, 0, 0, 0, 132, 123, 0, 0, 0, 0, 0, 0, 122, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139, 42, 0, 0, 0, 0, 0, 19, 214, 35, 0, 0, 0, 0, 0, 56, 189, 0, 0, 0, 0, 0, 0, 91, 140, 0, 0, 0, 0, 0, 0, 147, 73, 0, 0, 0, 0, 0, 0, 135, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 130, 3, 0, 0, 0, 57, 137, 110, 203, 38, 0, 0, 29, 137, 45, 113, 123, 0, 0, 0, 12, 0, 0, 149, 7, 0, 0, 0, 0, 0, 32, 131, 25, 0, 0, 0, 20, 142, 151, 114, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 123, 2, 0, 0, 0, 0, 0, 8, 195, 7, 0, 0, 0, 0, 0, 67, 166, 1, 0, 0, 0, 0, 0, 123, 88, 0, 0, 0, 0, 0, 6, 189, 33, 0, 0, 0, 0, 0, 6, 147, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 113, 35, 0, 0, 0, 0, 0, 0, 150, 90, 0, 0, 0, 0, 0, 0, 125, 135, 0, 0, 0, 0, 0, 0, 85, 150, 0, 0, 0, 0, 0, 0, 17, 196, 36, 0, 0, 0, 0, 0, 0, 127, 132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 124, 33, 0, 0, 0, 0, 0, 3, 233, 98, 0, 0, 0, 0, 0, 51, 214, 33, 0, 0, 0, 0, 0, 98, 165, 2, 0, 0, 0, 0, 0, 137, 109, 0, 0, 0, 0, 0, 0, 132, 43, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 124, 45, 0, 0, 0, 0, 0, 4, 195, 30, 0, 0, 0, 0, 0, 28, 164, 0, 0, 0, 0, 0, 0, 110, 83, 0, 0, 0, 0, 0, 12, 179, 18, 0, 0, 0, 0, 0, 59, 130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 5, 102, 0, 0, 0, 0, 0, 0, 23, 83, 0, 0, 0, 0, 0, 0, 68, 37, 0, 0, 0, 0, 0, 0, 102, 6, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 26, 0, 0, 0, 0, 0, 0, 111, 7, 0, 0, 0, 0, 0, 3, 130, 0, 0, 0, 0, 0, 0, 46, 88, 0, 0, 0, 0, 0, 0, 95, 60, 0, 0, 0, 0, 0, 0, 65, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 54, 0, 0, 0, 0, 0, 1, 183, 36, 0, 0, 0, 0, 0, 36, 158, 4, 0, 0, 0, 0, 0, 109, 76, 0, 0, 0, 0, 0, 0, 172, 20, 0, 0, 0, 0, 0, 0, 128, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 67, 0, 0, 0, 0, 0, 0, 152, 58, 0, 0, 0, 0, 0, 13, 160, 4, 0, 0, 0, 0, 0, 119, 64, 0, 0, 0, 0, 0, 29, 173, 3, 0, 0, 0, 0, 0, 76, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 0, 0, 0, 0, 0, 0, 0, 135, 0, 0, 0, 0, 0, 0, 15, 137, 0, 0, 0, 0, 0, 0, 45, 101, 0, 0, 0, 0, 0, 0, 45, 79, 0, 0, 0, 0, 0, 0, 33, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 129, 0, 0, 0, 0, 0, 0, 161, 125, 0, 0, 0, 0, 0, 15, 210, 54, 0, 0, 0, 0, 0, 107, 116, 0, 0, 0, 0, 0, 22, 194, 34, 0, 0, 0, 0, 0, 83, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 130, 0, 0, 0, 0, 0, 0, 133, 138, 0, 0, 0, 0, 0, 2, 200, 55, 0, 0, 0, 0, 0, 105, 138, 0, 0, 0, 0, 0, 27, 195, 42, 0, 0, 0, 0, 0, 84, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 138, 0, 0, 0, 0, 0, 0, 129, 180, 0, 0, 0, 0, 0, 12, 198, 95, 0, 0, 0, 0, 2, 126, 143, 1, 0, 0, 0, 0, 60, 222, 32, 0, 0, 0, 0, 0, 81, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 100, 0, 0, 0, 0, 0, 0, 161, 133, 0, 0, 0, 0, 0, 15, 222, 63, 0, 0, 0, 0, 14, 163, 120, 2, 0, 0, 0, 0, 117, 227, 21, 0, 0, 0, 0, 0, 142, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 122, 0, 0, 0, 0, 0, 0, 189, 143, 0, 0, 0, 0, 0, 17, 236, 87, 0, 0, 0, 0, 2, 126, 172, 11, 0, 0, 0, 0, 44, 223, 77, 0, 0, 0, 0, 0, 81, 137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87, 0, 0, 0, 0, 0, 0, 0, 131, 22, 0, 0, 0, 0, 0, 0, 89, 74, 0, 0, 0, 0, 0, 0, 72, 100, 0, 0, 0, 0, 0, 0, 37, 152, 0, 0, 0, 0, 0, 0, 26, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 51, 0, 0, 0, 0, 0, 0, 33, 107, 0, 0, 0, 0, 0, 0, 33, 117, 0, 0, 0, 0, 0, 0, 34, 105, 0, 0, 0, 0, 0, 0, 63, 81, 0, 0, 0, 0, 0, 15, 130, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 87, 0, 0, 0, 0, 0, 0, 126, 115, 0, 0, 0, 0, 0, 0, 126, 105, 0, 0, 0, 0, 0, 0, 126, 126, 0, 0, 0, 0, 0, 0, 126, 126, 0, 0, 0, 0, 0, 0, 52, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87, 42, 0, 0, 0, 0, 0, 0, 149, 45, 0, 0, 0, 0, 0, 0, 149, 45, 0, 0, 0, 0, 0, 0, 144, 45, 0, 0, 0, 0, 0, 0, 88, 93, 0, 0, 0, 0, 0, 0, 2, 117, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 105, 0, 0, 0, 0, 0, 0, 144, 132, 0, 0, 0, 0, 0, 14, 200, 45, 0, 0, 0, 0, 0, 132, 87, 0, 0, 0, 0, 0, 69, 181, 7, 0, 0, 0, 0, 0, 130, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 75, 0, 0, 0, 0, 0, 0, 45, 102, 0, 0, 0, 0, 0, 0, 42, 102, 0, 0, 0, 0, 0, 0, 36, 98, 0, 0, 0, 0, 0, 0, 23, 111, 0, 0, 0, 0, 0, 0, 20, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 58, 0, 0, 0, 0, 0, 0, 116, 77, 0, 0, 0, 0, 0, 0, 117, 77, 0, 0, 0, 0, 0, 0, 93, 110, 0, 0, 0, 0, 0, 0, 38, 183, 10, 0, 0, 0, 0, 0, 0, 101, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 7, 0, 0, 0, 0, 0, 1, 158, 5, 0, 0, 0, 0, 0, 40, 116, 0, 0, 0, 0, 0, 0, 83, 76, 0, 0, 0, 0, 0, 0, 83, 47, 0, 0, 0, 0, 0, 0, 38, 79, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0 },
    { 0, 0, 0, 0, 10, 13, 0, 0, 0, 0, 0, 0, 76, 74, 0, 0, 0, 0, 0, 0, 170, 80, 0, 0, 0, 0, 0, 30, 242, 80, 0, 0, 0, 0, 0, 106, 195, 21, 0, 0, 0, 0, 14, 186, 110, 0, 0, 0, 0, 0, 26, 116, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 122, 0, 0, 0, 0, 0, 0, 153, 128, 0, 0, 0, 0, 0, 3, 180, 52, 0, 0, 0, 0, 0, 103, 107, 0, 0, 0, 0, 0, 64, 180, 13, 0, 0, 0, 0, 0, 122, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 106, 0, 0, 0, 0, 0, 0, 147, 125, 0, 0, 0, 0, 0, 8, 208, 50, 0, 0, 0, 0, 15, 159, 82, 0, 0, 0, 0, 0, 94, 192, 6, 0, 0, 0, 0, 0, 119, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 127, 21, 0, 0, 0, 0, 0, 27, 152, 2, 0, 0, 0, 0, 0, 35, 107, 0, 0, 0, 0, 0, 0, 101, 95, 0, 0, 0, 0, 0, 0, 131, 99, 0, 0, 0, 0, 0, 0, 100, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 2, 119, 0, 0, 0, 0, 0, 0, 22, 117, 0, 0, 0, 0, 0, 0, 37, 96, 0, 0, 0, 0, 0, 0, 22, 100, 0, 0, 0, 0, 0, 0, 13, 65, 0, 0, 0, 0, 0, 0, 2, 16, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 68, 0, 0, 0, 0, 0, 0, 167, 119, 0, 0, 0, 0, 0, 10, 191, 35, 0, 0, 0, 0, 0, 102, 99, 0, 0, 0, 0, 0, 18, 181, 23, 0, 0, 0, 0, 0, 141, 112, 0, 0, 0, 0, 0, 0, 47, 14, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 74, 0, 0, 0, 0, 0, 0, 108, 57, 0, 0, 0, 0, 0, 0, 127, 5, 0, 0, 0, 0, 0, 47, 83, 0, 0, 0, 0, 0, 0, 117, 20, 0, 0, 0, 0, 0, 1, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 68, 0, 0, 0, 0, 0, 0, 132, 72, 1, 0, 0, 0, 0, 0, 164, 1, 0, 0, 0, 0, 0, 0, 159, 2, 0, 0, 0, 0, 0, 0, 101, 72, 0, 0, 0, 0, 0, 0, 3, 154, 53, 0, 0, 0, 0, 0, 0, 18, 17, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 72, 0, 0, 0, 0, 0, 0, 111, 157, 0, 0, 0, 0, 0, 2, 180, 50, 0, 0, 0, 0, 0, 118, 62, 0, 0, 0, 0, 0, 59, 160, 0, 0, 0, 0, 0, 0, 144, 31, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 78, 0, 0, 0, 0, 0, 0, 26, 116, 0, 0, 0, 0, 0, 0, 23, 105, 0, 0, 0, 0, 0, 0, 26, 101, 0, 0, 0, 0, 0, 0, 42, 90, 0, 0, 0, 0, 0, 0, 24, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 35, 0, 0, 0, 0, 0, 35, 187, 19, 0, 0, 0, 0, 4, 159, 123, 0, 0, 0, 0, 8, 131, 67, 0, 0, 0, 0, 0, 115, 131, 0, 0, 0, 0, 0, 75, 119, 0, 0, 0, 0, 0, 0, 23, 19, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 113, 3, 0, 0, 0, 0, 5, 185, 176, 1, 0, 0, 0, 0, 55, 205, 61, 0, 0, 0, 0, 8, 175, 67, 0, 0, 0, 0, 0, 12, 200, 20, 0, 0, 0, 0, 0, 63, 221, 10, 0, 0, 0, 0, 0, 15, 60, 10, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 89, 0, 0, 0, 0, 0, 0, 112, 170, 0, 0, 0, 0, 0, 3, 194, 87, 0, 0, 0, 0, 3, 132, 89, 0, 0, 0, 0, 0, 70, 197, 6, 0, 0, 0, 0, 0, 161, 41, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 8, 0, 0, 0, 0, 0, 113, 204, 9, 0, 0, 0, 0, 35, 217, 76, 0, 0, 0, 0, 13, 168, 55, 0, 0, 0, 0, 0, 77, 169, 1, 0, 0, 0, 0, 0, 123, 47, 0, 0, 0, 0, 0, 0, 23, 7, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 83, 0, 0, 0, 0, 0, 0, 153, 48, 0, 0, 0, 0, 0, 35, 131, 2, 0, 0, 0, 0, 0, 123, 29, 0, 0, 0, 0, 0, 3, 161, 0, 0, 0, 0, 0, 0, 14, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 4, 0, 0, 0, 0, 25, 151, 67, 0, 0, 0, 0, 4, 162, 132, 0, 0, 0, 0, 23, 161, 73, 1, 0, 0, 0, 0, 133, 125, 0, 0, 0, 0, 0, 53, 88, 0, 0, 0, 0, 0, 0, 18, 5, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 72, 0, 0, 0, 0, 0, 41, 189, 33, 0, 0, 0, 0, 3, 170, 106, 0, 0, 0, 0, 11, 147, 88, 0, 0, 0, 0, 3, 161, 177, 4, 0, 0, 0, 0, 5, 142, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 82, 0, 0, 0, 0, 0, 0, 137, 38, 0, 0, 0, 0, 0, 19, 143, 1, 0, 0, 0, 0, 0, 112, 41, 0, 0, 0, 0, 0, 0, 145, 4, 0, 0, 0, 0, 0, 32, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 36, 15, 0, 0, 0, 0, 0, 0, 178, 60, 0, 0, 0, 0, 0, 91, 195, 9, 0, 0, 0, 0, 0, 85, 162, 0, 0, 0, 0, 0, 0, 19, 135, 0, 0, 0, 0, 0, 26, 91, 151, 8, 0, 0, 0, 0, 104, 127, 65, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 110, 12, 0, 0, 0, 0, 0, 159, 126, 0, 0, 0, 0, 0, 3, 182, 22, 0, 0, 0, 0, 0, 98, 67, 0, 0, 0, 0, 0, 67, 155, 0, 0, 0, 0, 0, 0, 149, 66, 0, 0, 0, 0, 0, 0, 33, 1, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 92, 17, 0, 0, 0, 0, 0, 55, 224, 34, 0, 0, 0, 0, 0, 93, 168, 2, 0, 0, 0, 0, 0, 109, 158, 0, 0, 0, 0, 0, 0, 109, 161, 0, 0, 0, 0, 0, 0, 58, 167, 5, 0, 0, 0, 0, 0, 3, 21, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 127, 0, 0, 0, 0, 0, 0, 0, 159, 0, 0, 0, 0, 0, 0, 12, 159, 0, 0, 0, 0, 0, 0, 63, 119, 0, 0, 0, 0, 0, 0, 83, 95, 0, 0, 0, 0, 0, 0, 35, 151, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 84, 2, 0, 0, 0, 0, 0, 117, 163, 0, 0, 0, 0, 0, 4, 203, 66, 0, 0, 0, 0, 0, 92, 117, 0, 0, 0, 0, 0, 30, 187, 21, 0, 0, 0, 0, 0, 137, 87, 0, 0, 0, 0, 0, 0, 26, 4, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 54, 0, 0, 0, 0, 0, 85, 172, 11, 0, 0, 0, 0, 19, 187, 51, 0, 0, 0, 0, 12, 164, 38, 0, 0, 0, 0, 0, 110, 140, 2, 0, 0, 0, 0, 4, 153, 7, 0, 0, 0, 0, 0, 1, 25, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 46, 0, 0, 0, 0, 0, 105, 165, 0, 0, 0, 0, 0, 8, 186, 54, 0, 0, 0, 0, 0, 118, 94, 0, 0, 0, 0, 0, 66, 186, 11, 0, 0, 0, 0, 0, 122, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 21, 0, 0, 0, 0, 0, 0, 103, 23, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 29, 71, 0, 0, 0, 0, 0, 0, 70, 24, 0, 0, 0, 0, 0, 0, 82, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 81, 20, 3, 0, 0, 0, 0, 130, 200, 17, 0, 0, 0, 0, 31, 200, 47, 0, 0, 0, 0, 3, 151, 84, 0, 0, 0, 0, 0, 39, 190, 14, 0, 0, 0, 0, 0, 119, 115, 0, 0, 0, 0, 0, 0, 29, 26, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 18, 0, 0, 0, 0, 0, 0, 87, 93, 0, 0, 0, 0, 0, 0, 80, 76, 0, 0, 0, 0, 0, 0, 68, 71, 0, 0, 0, 0, 0, 0, 51, 99, 0, 0, 0, 0, 0, 0, 4, 146, 2, 0, 0, 0, 0, 0, 0, 38, 2, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 73, 0, 0, 0, 0, 0, 57, 152, 1, 0, 0, 0, 0, 7, 157, 44, 0, 0, 0, 0, 3, 131, 37, 0, 0, 0, 0, 0, 82, 134, 0, 0, 0, 0, 0, 0, 105, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 53, 0, 0, 0, 0, 0, 0, 53, 117, 0, 0, 0, 0, 0, 0, 62, 99, 0, 0, 0, 0, 0, 0, 45, 116, 0, 0, 0, 0, 0, 0, 27, 146, 0, 0, 0, 0, 0, 0, 4, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 5, 0, 0, 0, 0, 0, 0, 172, 22, 0, 0, 0, 0, 0, 4, 152, 2, 0, 0, 0, 0, 0, 69, 79, 0, 0, 0, 0, 0, 0, 133, 15, 0, 0, 0, 0, 0, 24, 118, 0, 0, 0, 0, 0, 0, 7, 25, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 91, 6, 0, 0, 0, 0, 1, 180, 185, 2, 0, 0, 0, 0, 45, 234, 79, 0, 0, 0, 0, 12, 143, 141, 1, 0, 0, 0, 0, 68, 239, 43, 0, 0, 0, 0, 0, 149, 146, 0, 0, 0, 0, 0, 0, 36, 24, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 59, 0, 0, 0, 0, 0, 0, 154, 15, 0, 0, 0, 0, 0, 25, 129, 0, 0, 0, 0, 0, 0, 64, 83, 0, 0, 0, 0, 0, 0, 107, 79, 0, 0, 0, 0, 0, 0, 115, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 99, 0, 0, 0, 0, 0, 0, 7, 160, 0, 0, 0, 0, 0, 0, 18, 160, 0, 0, 0, 0, 0, 0, 35, 150, 0, 0, 0, 0, 0, 0, 51, 129, 0, 0, 0, 0, 0, 0, 43, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 112, 9, 0, 0, 0, 0, 4, 198, 200, 0, 0, 0, 0, 0, 32, 241, 95, 0, 0, 0, 0, 1, 128, 136, 1, 0, 0, 0, 0, 37, 209, 34, 0, 0, 0, 0, 0, 150, 127, 0, 0, 0, 0, 0, 0, 31, 18, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 114, 0, 0, 0, 0, 0, 1, 176, 96, 0, 0, 0, 0, 0, 44, 178, 10, 0, 0, 0, 0, 6, 158, 68, 0, 0, 0, 0, 0, 60, 235, 19, 0, 0, 0, 0, 0, 68, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 95, 0, 0, 0, 0, 0, 0, 47, 131, 0, 0, 0, 0, 0, 0, 86, 98, 0, 0, 0, 0, 0, 0, 99, 70, 0, 0, 0, 0, 0, 0, 85, 95, 0, 0, 0, 0, 0, 0, 24, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 34, 0, 0, 0, 0, 2, 120, 177, 9, 0, 0, 0, 0, 47, 204, 37, 0, 0, 0, 0, 12, 175, 81, 0, 0, 0, 0, 0, 70, 216, 4, 0, 0, 0, 0, 0, 185, 77, 0, 0, 0, 0, 0, 0, 42, 6, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 3, 0, 0, 0, 0, 0, 0, 78, 60, 0, 0, 0, 0, 0, 0, 31, 78, 0, 0, 0, 0, 0, 0, 10, 123, 0, 0, 0, 0, 0, 0, 2, 129, 0, 0, 0, 0, 0, 0, 0, 78, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 119, 7, 0, 0, 0, 0, 0, 112, 152, 0, 0, 0, 0, 0, 6, 192, 51, 0, 0, 0, 0, 2, 114, 106, 0, 0, 0, 0, 0, 71, 181, 9, 0, 0, 0, 0, 0, 120, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 120, 0, 0, 0, 0, 0, 1, 228, 74, 0, 0, 0, 0, 0, 49, 201, 18, 0, 0, 0, 0, 4, 166, 94, 0, 0, 0, 0, 0, 76, 220, 19, 0, 0, 0, 0, 0, 135, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 131, 0, 0, 0, 0, 0, 0, 164, 127, 0, 0, 0, 0, 0, 42, 205, 39, 0, 0, 0, 0, 7, 167, 68, 0, 0, 0, 0, 0, 94, 187, 4, 0, 0, 0, 0, 0, 150, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 16, 0, 0, 0, 0, 0, 0, 113, 75, 0, 0, 0, 0, 0, 0, 82, 117, 0, 0, 0, 0, 0, 0, 88, 125, 0, 0, 0, 0, 0, 0, 66, 115, 0, 0, 0, 0, 0, 0, 36, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 136, 0, 0, 0, 0, 0, 0, 176, 126, 0, 0, 0, 0, 0, 38, 217, 46, 0, 0, 0, 0, 23, 193, 72, 0, 0, 0, 0, 0, 118, 191, 2, 0, 0, 0, 0, 0, 131, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 104, 0, 0, 0, 0, 0, 0, 189, 81, 0, 0, 0, 0, 0, 44, 174, 11, 0, 0, 0, 0, 4, 160, 65, 0, 0, 0, 0, 0, 66, 202, 6, 0, 0, 0, 0, 0, 101, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 86, 0, 0, 0, 0, 0, 112, 201, 23, 0, 0, 0, 0, 32, 219, 88, 0, 0, 0, 0, 30, 196, 111, 0, 0, 0, 0, 0, 148, 220, 19, 0, 0, 0, 0, 4, 170, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 117, 0, 0, 0, 0, 0, 2, 185, 84, 0, 0, 0, 0, 0, 53, 199, 18, 0, 0, 0, 0, 13, 179, 80, 0, 0, 0, 0, 0, 81, 221, 9, 0, 0, 0, 0, 0, 116, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 128, 0, 0, 0, 0, 0, 0, 202, 83, 0, 0, 0, 0, 0, 36, 187, 15, 0, 0, 0, 0, 10, 163, 78, 0, 0, 0, 0, 0, 107, 186, 4, 0, 0, 0, 0, 0, 127, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 0, 0, 0, 0, 0, 0, 0, 166, 6, 0, 0, 0, 0, 0, 2, 167, 3, 0, 0, 0, 0, 0, 35, 109, 0, 0, 0, 0, 0, 0, 75, 96, 0, 0, 0, 0, 0, 0, 102, 40, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 132, 0, 0, 0, 0, 0, 0, 10, 159, 45, 0, 0, 0, 0, 0, 0, 83, 129, 0, 0, 0, 0, 0, 0, 3, 184, 20, 0, 0, 0, 0, 0, 12, 219, 71, 0, 0, 0, 0, 0, 0, 151, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 112, 0, 0, 0, 0, 0, 0, 146, 112, 0, 0, 0, 0, 0, 14, 181, 25, 0, 0, 0, 0, 1, 134, 82, 0, 0, 0, 0, 0, 53, 197, 9, 0, 0, 0, 0, 0, 130, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 128, 0, 0, 0, 0, 0, 0, 148, 131, 0, 0, 0, 0, 0, 10, 200, 43, 0, 0, 0, 0, 0, 122, 90, 0, 0, 0, 0, 0, 57, 190, 10, 0, 0, 0, 0, 0, 124, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 121, 13, 0, 0, 0, 0, 0, 95, 180, 0, 0, 0, 0, 0, 1, 188, 81, 0, 0, 0, 0, 0, 93, 127, 0, 0, 0, 0, 0, 60, 197, 22, 0, 0, 0, 0, 5, 160, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 123, 0, 0, 0, 0, 0, 0, 139, 129, 0, 0, 0, 0, 0, 26, 187, 29, 0, 0, 0, 0, 5, 151, 61, 0, 0, 0, 0, 0, 77, 196, 1, 0, 0, 0, 0, 0, 152, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 138, 9, 0, 0, 0, 0, 0, 64, 192, 7, 0, 0, 0, 0, 0, 97, 183, 0, 0, 0, 0, 0, 0, 151, 141, 0, 0, 0, 0, 0, 7, 192, 79, 0, 0, 0, 0, 0, 20, 161, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 82, 0, 0, 0, 0, 0, 0, 92, 89, 0, 0, 0, 0, 0, 2, 136, 14, 0, 0, 0, 0, 0, 81, 58, 0, 0, 0, 0, 0, 32, 133, 2, 0, 0, 0, 0, 0, 104, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98, 25, 0, 0, 0, 0, 0, 100, 150, 0, 0, 0, 0, 0, 19, 183, 37, 0, 0, 0, 0, 2, 144, 60, 0, 0, 0, 0, 0, 74, 171, 1, 0, 0, 0, 0, 0, 134, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 156, 10, 0, 0, 0, 0, 0, 172, 191, 2, 0, 0, 0, 0, 37, 234, 88, 0, 0, 0, 0, 25, 187, 138, 4, 0, 0, 0, 0, 142, 240, 34, 0, 0, 0, 0, 25, 182, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 98, 0, 0, 0, 0, 0, 0, 121, 93, 0, 0, 0, 0, 0, 16, 146, 10, 0, 0, 0, 0, 1, 132, 37, 0, 0, 0, 0, 0, 64, 149, 0, 0, 0, 0, 0, 0, 115, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 69, 0, 0, 0, 0, 0, 0, 0, 123, 15, 0, 0, 0, 0, 0, 0, 103, 41, 0, 0, 0, 0, 0, 0, 44, 84, 0, 0, 0, 0, 0, 0, 21, 116, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 130, 8, 0, 0, 0, 0, 5, 139, 122, 0, 0, 0, 0, 0, 0, 40, 113, 0, 0, 0, 0, 0, 0, 49, 113, 0, 0, 0, 0, 0, 1, 52, 113, 0, 0, 0, 0, 0, 30, 155, 150, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 84, 0, 0, 0, 0, 0, 0, 91, 97, 0, 0, 0, 0, 0, 3, 139, 17, 0, 0, 0, 0, 0, 99, 39, 0, 0, 0, 0, 0, 44, 135, 0, 0, 0, 0, 0, 0, 106, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 99, 0, 0, 0, 0, 0, 0, 16, 90, 0, 0, 0, 0, 0, 0, 0, 102, 0, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 0, 0, 0, 0, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 23, 0, 0, 0, 0, 0, 92, 140, 0, 0, 0, 0, 0, 14, 163, 28, 0, 0, 0, 0, 11, 137, 28, 0, 0, 0, 0, 0, 101, 125, 0, 0, 0, 0, 0, 11, 111, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 14, 0, 0, 0, 0, 0, 24, 201, 21, 0, 0, 0, 0, 0, 51, 148, 0, 0, 0, 0, 0, 0, 96, 70, 0, 0, 0, 0, 0, 0, 149, 21, 0, 0, 0, 0, 0, 0, 139, 10, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 56, 0, 0, 0, 0, 0, 0, 94, 82, 0, 0, 0, 0, 0, 2, 129, 14, 0, 0, 0, 0, 0, 91, 36, 0, 0, 0, 0, 0, 24, 122, 0, 0, 0, 0, 0, 0, 107, 43, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 51, 0, 0, 0, 0, 0, 0, 37, 109, 0, 0, 0, 0, 0, 0, 113, 62, 0, 0, 0, 0, 0, 35, 96, 0, 0, 0, 0, 0, 3, 116, 17, 0, 0, 0, 0, 0, 74, 73, 0, 0, 0, 0, 0, 0, 20, 6, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 33, 0, 0, 0, 0, 0, 0, 176, 73, 0, 0, 0, 0, 0, 8, 193, 26, 0, 0, 0, 0, 0, 64, 118, 0, 0, 0, 0, 0, 0, 113, 70, 0, 0, 0, 0, 0, 0, 155, 26, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 118, 0, 0, 2, 2, 0, 0, 92, 155, 0, 0, 0, 0, 0, 4, 182, 63, 0, 0, 0, 0, 0, 107, 94, 0, 0, 0, 0, 0, 38, 184, 6, 0, 0, 0, 0, 0, 106, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 72, 0, 0, 0, 0, 0, 0, 48, 123, 0, 0, 0, 0, 0, 0, 54, 102, 0, 0, 0, 0, 0, 0, 94, 73, 0, 0, 0, 0, 0, 0, 120, 57, 0, 0, 0, 0, 0, 0, 49, 142, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 5, 0, 0, 0, 0, 0, 12, 139, 0, 0, 0, 0, 0, 0, 12, 139, 0, 0, 0, 0, 0, 0, 27, 139, 0, 0, 0, 0, 0, 0, 58, 118, 0, 0, 0, 0, 0, 0, 76, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 81, 0, 0, 0, 0, 0, 0, 122, 32, 0, 0, 0, 0, 0, 4, 138, 0, 0, 0, 0, 0, 0, 90, 50, 0, 0, 0, 0, 0, 2, 126, 1, 0, 0, 0, 0, 0, 22, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 86, 0, 0, 0, 0, 0, 94, 203, 27, 0, 0, 0, 0, 14, 201, 82, 0, 0, 0, 0, 25, 172, 70, 0, 0, 0, 0, 1, 150, 162, 0, 0, 0, 0, 0, 58, 141, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 4, 0, 0, 0, 0, 0, 0, 91, 31, 0, 0, 0, 0, 0, 0, 75, 11, 0, 0, 0, 0, 0, 6, 80, 0, 0, 0, 0, 0, 1, 77, 20, 0, 0, 0, 0, 0, 70, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 48, 0, 0, 0, 0, 0, 0, 160, 93, 0, 0, 0, 0, 0, 3, 175, 35, 0, 0, 0, 0, 0, 35, 91, 0, 0, 0, 0, 0, 0, 108, 14, 0, 0, 0, 0, 0, 65, 94, 0, 0, 0, 0, 0, 0, 27, 17, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 105, 0, 0, 0, 0, 0, 0, 48, 146, 0, 0, 0, 0, 0, 0, 89, 125, 0, 0, 0, 0, 0, 0, 111, 80, 0, 0, 0, 0, 0, 0, 135, 67, 0, 0, 0, 0, 0, 0, 94, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 83, 0, 0, 0, 0, 0, 0, 125, 112, 0, 0, 0, 0, 0, 5, 151, 23, 0, 0, 0, 0, 0, 94, 76, 0, 0, 0, 0, 0, 38, 160, 10, 0, 0, 0, 0, 2, 134, 38, 0, 0, 0, 0, 0, 2, 34, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 57, 0, 0, 0, 0, 0, 0, 104, 115, 0, 0, 0, 0, 0, 1, 132, 31, 0, 0, 0, 0, 0, 68, 82, 0, 0, 0, 0, 0, 13, 137, 7, 0, 0, 0, 0, 0, 67, 111, 0, 0, 0, 0, 0, 0, 15, 31, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 140, 0, 0, 0, 0, 0, 0, 101, 158, 0, 0, 0, 0, 0, 5, 189, 65, 0, 0, 0, 0, 7, 142, 74, 0, 0, 0, 0, 0, 102, 166, 0, 0, 0, 0, 0, 26, 145, 15, 6, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 89, 0, 0, 0, 0, 0, 0, 4, 174, 0, 0, 0, 0, 0, 0, 24, 154, 0, 0, 0, 0, 0, 0, 83, 72, 0, 0, 0, 0, 0, 0, 121, 20, 0, 0, 0, 0, 0, 17, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 76, 9, 0, 0, 0, 0, 0, 60, 145, 0, 0, 0, 0, 0, 8, 140, 31, 0, 0, 0, 0, 26, 146, 31, 0, 0, 0, 0, 0, 136, 86, 0, 0, 0, 0, 0, 18, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0, 0, 0, 0, 59, 107, 0, 0, 0, 0, 0, 0, 120, 29, 0, 0, 0, 0, 0, 70, 57, 0, 0, 0, 0, 0, 31, 119, 0, 0, 0, 0, 0, 0, 91, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 8, 121, 0, 0, 0, 0, 0, 0, 33, 124, 0, 0, 0, 0, 0, 0, 78, 73, 0, 0, 0, 0, 0, 0, 122, 38, 0, 0, 0, 0, 0, 0, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 62, 0, 0, 0, 0, 0, 0, 148, 122, 0, 0, 0, 0, 0, 71, 223, 46, 0, 0, 0, 32, 134, 98, 135, 0, 0, 0, 0, 28, 32, 69, 85, 0, 0, 0, 0, 0, 0, 100, 57, 0, 0, 0, 0, 0, 0, 19, 11, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 10, 0, 0, 0, 0, 0, 43, 109, 0, 0, 0, 0, 0, 2, 129, 35, 0, 0, 0, 0, 6, 120, 34, 0, 0, 0, 0, 0, 75, 103, 0, 0, 0, 0, 0, 0, 89, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 29, 0, 0, 0, 0, 0, 16, 221, 51, 0, 0, 0, 0, 0, 82, 160, 4, 0, 0, 0, 0, 0, 117, 136, 0, 0, 0, 0, 0, 0, 133, 97, 0, 0, 0, 0, 0, 0, 109, 87, 0, 0, 0, 0, 0, 0, 23, 25, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 113, 0, 0, 0, 0, 0, 11, 230, 122, 0, 0, 0, 0, 0, 85, 213, 36, 0, 0, 0, 0, 16, 187, 96, 0, 0, 0, 0, 0, 52, 238, 23, 0, 0, 0, 0, 0, 54, 168, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 23, 0, 0, 0, 0, 0, 0, 117, 98, 0, 0, 0, 0, 0, 0, 117, 137, 0, 0, 0, 0, 0, 0, 99, 153, 0, 0, 0, 0, 0, 0, 68, 153, 0, 0, 0, 0, 0, 0, 7, 147, 4, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 47, 0, 0, 0, 0, 0, 0, 242, 63, 0, 0, 0, 0, 0, 42, 217, 31, 0, 0, 0, 0, 3, 147, 133, 0, 0, 0, 0, 0, 54, 238, 59, 0, 0, 0, 0, 0, 79, 147, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 3, 0, 0, 0, 0, 0, 0, 204, 27, 0, 0, 0, 0, 0, 16, 181, 10, 0, 0, 0, 0, 0, 59, 111, 0, 0, 0, 0, 0, 0, 114, 66, 0, 0, 0, 0, 0, 0, 132, 44, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 86, 0, 0, 0, 0, 0, 0, 206, 138, 0, 0, 0, 0, 0, 63, 239, 67, 0, 0, 0, 0, 20, 206, 117, 0, 0, 0, 0, 0, 91, 227, 23, 0, 0, 0, 0, 0, 111, 135, 0, 0, 0, 0, 0, 0, 27, 20, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 94, 10, 0, 0, 0, 0, 0, 27, 190, 9, 0, 0, 0, 0, 0, 64, 178, 2, 0, 0, 0, 0, 0, 85, 153, 0, 0, 0, 0, 0, 0, 101, 110, 0, 0, 0, 0, 0, 0, 70, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 74, 0, 0, 0, 0, 0, 0, 13, 150, 0, 0, 0, 0, 0, 0, 24, 139, 0, 0, 0, 0, 0, 0, 24, 125, 0, 0, 0, 0, 0, 0, 37, 125, 0, 0, 0, 0, 0, 0, 29, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0, 0, 0, 0, 0, 127, 0, 0, 0, 0, 0, 0, 2, 101, 0, 0, 0, 0, 0, 0, 29, 84, 0, 0, 0, 0, 0, 0, 33, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 110, 18, 0, 0, 0, 0, 0, 65, 252, 82, 0, 0, 0, 0, 0, 88, 252, 76, 0, 0, 0, 0, 0, 147, 228, 41, 0, 0, 0, 0, 0, 173, 198, 13, 0, 10, 0, 0, 0, 115, 171, 0, 0, 0, 0, 0, 0, 5, 35, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 116, 0, 0, 0, 0, 0, 0, 18, 156, 0, 0, 0, 0, 0, 0, 58, 158, 0, 0, 0, 0, 0, 0, 53, 158, 0, 0, 0, 0, 0, 0, 67, 152, 0, 0, 0, 0, 0, 0, 42, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 159, 88, 0, 0, 0, 0, 0, 50, 252, 120, 0, 0, 0, 0, 0, 136, 252, 111, 0, 0, 0, 0, 12, 186, 216, 75, 10, 5, 0, 0, 72, 245, 167, 0, 0, 0, 0, 0, 59, 173, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 143, 59, 0, 0, 0, 0, 0, 23, 251, 127, 0, 0, 0, 0, 0, 75, 255, 99, 0, 0, 0, 0, 8, 171, 179, 15, 0, 0, 0, 0, 79, 247, 135, 0, 0, 0, 0, 0, 87, 179, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 163, 100, 0, 0, 0, 0, 0, 45, 252, 166, 0, 0, 0, 0, 0, 116, 252, 110, 0, 0, 0, 0, 29, 195, 250, 96, 0, 0, 0, 0, 58, 205, 154, 23, 0, 0, 0, 0, 66, 178, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 163, 32, 0, 0, 0, 0, 0, 78, 244, 59, 0, 0, 0, 0, 0, 124, 228, 40, 0, 0, 0, 0, 9, 191, 210, 24, 0, 0, 0, 0, 28, 215, 185, 13, 0, 0, 0, 0, 63, 170, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 61, 0, 0, 0, 0, 0, 4, 201, 93, 0, 0, 0, 0, 0, 51, 191, 15, 0, 0, 0, 0, 0, 144, 80, 0, 0, 0, 0, 0, 2, 175, 24, 0, 0, 0, 0, 0, 69, 183, 0, 0, 0, 0, 0, 0, 18, 30, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 86, 0, 0, 0, 0, 0, 15, 244, 121, 0, 0, 0, 0, 0, 98, 238, 62, 0, 0, 0, 0, 35, 217, 143, 2, 0, 0, 0, 0, 120, 251, 42, 0, 0, 0, 0, 0, 70, 143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 75, 0, 0, 0, 0, 0, 0, 48, 100, 0, 0, 0, 0, 0, 0, 48, 105, 0, 0, 0, 0, 0, 0, 48, 141, 0, 0, 0, 0, 0, 0, 48, 169, 0, 0, 0, 0, 0, 0, 7, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 149, 0, 0, 0, 0, 0, 2, 218, 202, 0, 0, 0, 0, 0, 68, 252, 149, 0, 0, 0, 0, 11, 181, 211, 39, 0, 0, 0, 0, 88, 242, 123, 0, 0, 0, 0, 0, 77, 174, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 145, 53, 0, 0, 0, 0, 0, 36, 247, 114, 0, 0, 0, 0, 0, 113, 238, 55, 0, 0, 0, 0, 33, 212, 136, 0, 0, 0, 0, 0, 98, 251, 57, 0, 0, 0, 0, 0, 89, 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 42, 0, 0, 0, 0, 0, 74, 252, 187, 0, 0, 0, 0, 2, 106, 253, 168, 0, 0, 0, 0, 2, 128, 236, 69, 0, 0, 0, 0, 42, 226, 182, 8, 0, 0, 0, 0, 74, 243, 58, 0, 0, 0, 0, 0, 6, 54, 10, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 49, 0, 0, 0, 0, 0, 0, 59, 140, 0, 0, 0, 0, 0, 0, 57, 178, 0, 0, 0, 0, 0, 0, 87, 148, 0, 0, 0, 0, 0, 0, 87, 123, 0, 0, 0, 0, 0, 0, 37, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 34, 2, 0, 0, 0, 0, 0, 29, 171, 5, 0, 0, 0, 0, 0, 136, 160, 0, 0, 0, 0, 0, 30, 226, 121, 0, 0, 0, 0, 32, 202, 157, 12, 0, 0, 0, 0, 118, 235, 22, 0, 0, 0, 0, 0, 67, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 104, 9, 0, 0, 0, 0, 0, 145, 185, 4, 0, 0, 0, 0, 34, 223, 68, 0, 0, 0, 0, 16, 184, 104, 0, 0, 0, 0, 0, 97, 207, 13, 0, 0, 0, 0, 0, 162, 143, 0, 0, 0, 0, 0, 0, 27, 29, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 82, 0, 0, 0, 0, 0, 0, 186, 94, 0, 0, 0, 0, 0, 49, 203, 19, 0, 0, 0, 0, 0, 100, 136, 1, 0, 0, 0, 0, 13, 182, 58, 0, 0, 0, 0, 0, 57, 182, 3, 0, 0, 0, 0, 0, 9, 36, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 55, 0, 0, 0, 0, 0, 0, 83, 155, 0, 0, 0, 0, 0, 0, 99, 151, 0, 0, 0, 0, 0, 0, 127, 123, 0, 0, 0, 0, 0, 0, 131, 111, 0, 0, 0, 0, 0, 0, 55, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 7, 0, 0, 0, 0, 0, 0, 102, 51, 0, 0, 0, 0, 0, 0, 68, 84, 0, 0, 0, 0, 0, 0, 20, 123, 0, 0, 0, 0, 0, 0, 1, 142, 4, 0, 0, 0, 0, 0, 0, 93, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 0, 0, 0, 0, 0, 0, 0, 174, 0, 0, 0, 0, 0, 0, 2, 155, 0, 0, 0, 0, 0, 0, 63, 94, 0, 0, 0, 0, 0, 0, 126, 43, 0, 0, 0, 0, 0, 5, 150, 0, 0, 0, 0, 0, 0, 1, 24, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 59, 0, 0, 0, 0, 0, 0, 86, 99, 0, 0, 0, 0, 5, 6, 143, 22, 0, 0, 0, 0, 0, 46, 86, 0, 0, 0, 0, 0, 0, 117, 19, 0, 0, 0, 0, 0, 59, 108, 0, 0, 0, 0, 0, 0, 23, 16, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 135, 12, 0, 0, 0, 0, 0, 0, 167, 87, 0, 0, 0, 0, 0, 0, 131, 127, 0, 0, 0, 0, 0, 0, 95, 151, 0, 0, 0, 0, 0, 0, 95, 191, 4, 0, 0, 0, 0, 0, 67, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 66, 0, 0, 0, 0, 0, 0, 141, 89, 0, 0, 0, 0, 0, 6, 164, 24, 0, 0, 0, 0, 0, 113, 66, 0, 0, 0, 0, 0, 26, 157, 6, 0, 0, 0, 0, 0, 115, 60, 0, 0, 0, 0, 0, 0, 25, 4, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 51, 0, 0, 0, 0, 0, 1, 189, 63, 0, 0, 0, 0, 0, 30, 163, 5, 0, 0, 0, 0, 0, 100, 80, 0, 0, 0, 0, 0, 4, 155, 20, 0, 0, 0, 0, 0, 15, 162, 2, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 104, 4, 0, 0, 0, 0, 10, 193, 149, 0, 0, 0, 0, 0, 35, 247, 109, 0, 0, 0, 0, 20, 182, 146, 13, 0, 0, 0, 0, 84, 232, 21, 0, 0, 0, 0, 0, 162, 70, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 5, 67, 0, 0, 0, 0, 0, 0, 79, 127, 0, 0, 0, 0, 0, 1, 165, 46, 0, 0, 0, 0, 0, 72, 97, 0, 0, 0, 0, 0, 12, 136, 13, 0, 0, 0, 0, 0, 75, 87, 0, 0, 0, 0, 0, 0, 19, 16, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 110, 10, 0, 0, 0, 0, 0, 116, 159, 0, 0, 0, 0, 0, 5, 183, 43, 0, 0, 0, 0, 1, 100, 93, 0, 0, 0, 0, 0, 71, 172, 9, 0, 0, 0, 0, 0, 113, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 83, 0, 0, 0, 0, 0, 0, 42, 178, 6, 0, 0, 0, 0, 0, 50, 178, 6, 0, 0, 0, 0, 0, 94, 167, 0, 0, 0, 0, 0, 0, 59, 145, 0, 0, 0, 0, 0, 0, 42, 177, 13, 0, 0, 0, 0, 0, 10, 33, 1, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 21, 0, 0, 0, 0, 0, 74, 190, 27, 6, 0, 0, 0, 54, 210, 81, 0, 16, 0, 0, 75, 220, 43, 0, 0, 0, 0, 35, 215, 122, 0, 0, 0, 0, 0, 13, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 17, 0, 0, 0, 0, 0, 0, 88, 63, 0, 0, 0, 0, 0, 0, 80, 69, 0, 0, 0, 0, 0, 0, 53, 101, 0, 0, 0, 0, 0, 0, 17, 139, 0, 0, 0, 0, 0, 0, 0, 131, 2, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 79, 0, 0, 0, 0, 0, 0, 88, 82, 0, 0, 0, 0, 0, 0, 71, 82, 0, 0, 0, 0, 0, 0, 47, 130, 0, 0, 0, 0, 0, 0, 32, 170, 2, 0, 0, 0, 0, 0, 19, 118, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 118, 15, 0, 0, 0, 0, 0, 125, 147, 0, 0, 0, 0, 0, 11, 202, 50, 0, 0, 0, 0, 0, 99, 157, 0, 0, 0, 0, 0, 34, 197, 56, 0, 0, 0, 0, 0, 108, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 0, 0, 13, 0, 0, 0, 64, 191, 0, 0, 8, 0, 0, 1, 184, 115, 0, 0, 0, 0, 0, 110, 148, 4, 0, 0, 0, 0, 65, 200, 22, 0, 0, 0, 0, 0, 120, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 108, 49, 0, 0, 0, 0, 0, 105, 158, 0, 0, 0, 0, 0, 7, 196, 84, 0, 0, 0, 0, 14, 137, 126, 0, 0, 0, 0, 0, 116, 207, 15, 0, 0, 0, 0, 0, 143, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 19, 0, 0, 0, 0, 0, 0, 180, 44, 0, 0, 0, 0, 0, 1, 168, 12, 0, 0, 0, 0, 0, 50, 131, 0, 0, 0, 0, 0, 0, 77, 87, 0, 0, 0, 0, 0, 0, 124, 24, 0, 0, 0, 0, 0, 0, 35, 3, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 63, 0, 0, 0, 0, 0, 0, 136, 120, 0, 0, 0, 0, 0, 2, 182, 48, 0, 0, 0, 0, 0, 62, 113, 0, 0, 0, 0, 0, 1, 144, 31, 0, 0, 0, 0, 0, 40, 153, 0, 0, 0, 0, 0, 0, 11, 27, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 104, 0, 0, 0, 0, 0, 0, 7, 136, 1, 0, 0, 0, 0, 0, 41, 98, 0, 0, 0, 0, 0, 0, 83, 92, 0, 0, 0, 0, 0, 0, 92, 66, 0, 0, 0, 0, 0, 0, 43, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 40, 0, 0, 0, 0, 0, 0, 162, 48, 0, 0, 0, 0, 0, 15, 153, 0, 0, 0, 0, 0, 0, 89, 60, 0, 0, 0, 0, 0, 9, 144, 1, 0, 0, 0, 0, 0, 90, 120, 0, 0, 0, 0, 0, 0, 31, 23, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 62, 0, 0, 0, 0, 0, 0, 32, 38, 0, 0, 0, 0, 0, 0, 32, 78, 0, 0, 0, 0, 0, 0, 32, 120, 0, 0, 0, 0, 0, 0, 32, 120, 0, 0, 0, 0, 0, 0, 14, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 89, 46, 0, 0, 0, 0, 0, 0, 169, 31, 0, 0, 0, 0, 0, 30, 151, 0, 0, 0, 0, 0, 0, 88, 74, 0, 0, 0, 0, 0, 0, 141, 34, 0, 0, 0, 0, 0, 0, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 65, 0, 0, 0, 0, 0, 0, 115, 37, 0, 0, 0, 0, 0, 5, 117, 0, 0, 0, 0, 0, 0, 91, 42, 0, 0, 0, 0, 0, 11, 134, 2, 0, 0, 0, 0, 0, 61, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 106, 0, 0, 0, 0, 0, 0, 21, 189, 71, 0, 0, 0, 0, 0, 0, 119, 146, 2, 0, 0, 0, 0, 0, 41, 220, 31, 0, 0, 0, 0, 0, 7, 205, 41, 0, 0, 0, 0, 0, 0, 139, 119, 0, 0, 0, 0, 0, 0, 21, 37, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 55, 0, 0, 0, 0, 0, 0, 167, 97, 0, 0, 0, 0, 0, 0, 197, 30, 0, 0, 0, 0, 0, 56, 123, 0, 0, 0, 0, 0, 0, 132, 51, 0, 0, 0, 0, 0, 13, 167, 0, 0, 0, 0, 0, 0, 1, 31, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 62, 0, 0, 0, 0, 0, 0, 146, 116, 0, 0, 0, 0, 0, 0, 196, 56, 0, 0, 0, 0, 0, 67, 129, 0, 0, 0, 0, 0, 3, 141, 49, 0, 0, 0, 0, 0, 10, 170, 0, 0, 0, 0, 0, 0, 1, 37, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87, 10, 0, 0, 0, 0, 0, 0, 110, 73, 0, 0, 0, 0, 0, 0, 105, 124, 0, 0, 0, 0, 0, 0, 48, 162, 0, 0, 0, 0, 0, 0, 15, 197, 14, 0, 0, 0, 0, 0, 0, 139, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 71, 0, 0, 0, 0, 0, 0, 133, 44, 0, 0, 0, 0, 0, 6, 137, 1, 0, 0, 0, 0, 0, 64, 72, 0, 0, 0, 0, 0, 0, 119, 18, 0, 0, 0, 0, 0, 0, 110, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 15, 0, 0, 0, 0, 0, 0, 140, 6, 0, 0, 0, 0, 0, 20, 125, 0, 0, 0, 0, 0, 0, 78, 52, 0, 0, 0, 0, 0, 0, 129, 13, 0, 0, 0, 0, 0, 11, 131, 0, 0, 0, 0, 0, 0, 4, 33, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 72, 0, 0, 0, 0, 0, 0, 3, 151, 0, 0, 0, 0, 0, 0, 7, 144, 0, 0, 0, 0, 0, 0, 42, 114, 0, 0, 0, 0, 0, 0, 44, 124, 0, 0, 0, 0, 0, 0, 4, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 49, 0, 0, 0, 0, 0, 0, 131, 74, 0, 0, 0, 0, 0, 7, 187, 24, 0, 0, 0, 0, 0, 61, 79, 0, 0, 0, 0, 0, 0, 112, 27, 0, 0, 0, 0, 0, 4, 153, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 30, 0, 0, 0, 0, 0, 0, 69, 118, 0, 0, 0, 0, 0, 0, 69, 133, 0, 0, 0, 0, 0, 0, 54, 162, 0, 0, 0, 0, 0, 0, 37, 176, 2, 0, 0, 0, 0, 0, 9, 134, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 48, 0, 0, 0, 0, 0, 0, 52, 38, 0, 0, 0, 0, 0, 0, 45, 52, 0, 0, 0, 0, 0, 0, 22, 60, 0, 0, 0, 0, 0, 0, 10, 73, 0, 0, 0, 0, 0, 0, 1, 95, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 94, 43, 0, 0, 0, 0, 0, 0, 193, 61, 0, 0, 0, 0, 0, 22, 147, 2, 0, 0, 0, 0, 0, 98, 68, 0, 0, 0, 0, 0, 4, 145, 16, 0, 0, 0, 0, 0, 74, 138, 0, 0, 0, 0, 0, 0, 24, 23, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 41, 0, 0, 0, 0, 0, 0, 173, 41, 0, 0, 0, 0, 0, 41, 163, 4, 0, 0, 0, 0, 0, 143, 64, 0, 0, 0, 0, 0, 3, 178, 16, 0, 0, 0, 0, 0, 0, 145, 2, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0, 0, 0, 0, 0, 85, 23, 0, 0, 0, 0, 0, 0, 47, 58, 0, 0, 0, 0, 0, 0, 1, 115, 0, 0, 0, 0, 0, 0, 0, 109, 0, 0, 0, 0, 0, 0, 0, 97, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 50, 0, 0, 0, 0, 0, 0, 139, 57, 0, 0, 0, 0, 0, 17, 160, 12, 0, 0, 0, 0, 0, 94, 93, 0, 0, 0, 0, 0, 0, 146, 18, 0, 0, 0, 0, 0, 49, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 89, 0, 0, 0, 0, 0, 0, 160, 46, 0, 0, 0, 0, 0, 20, 163, 4, 0, 0, 0, 0, 0, 92, 91, 0, 0, 0, 0, 0, 6, 151, 21, 0, 0, 0, 0, 0, 21, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 73, 0, 0, 0, 0, 0, 0, 98, 72, 0, 0, 0, 0, 0, 2, 129, 10, 0, 0, 0, 0, 0, 106, 33, 0, 0, 0, 0, 0, 35, 129, 0, 0, 0, 0, 0, 0, 118, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 75, 0, 0, 0, 0, 0, 0, 27, 173, 0, 0, 0, 0, 0, 0, 45, 175, 0, 0, 0, 0, 0, 0, 41, 175, 0, 0, 0, 0, 0, 0, 30, 161, 0, 0, 0, 0, 0, 0, 53, 121, 0, 0, 0, 0, 0, 0, 13, 21, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 60, 0, 0, 0, 0, 0, 0, 65, 90, 0, 0, 0, 0, 0, 0, 79, 90, 0, 0, 0, 0, 0, 0, 91, 90, 0, 0, 0, 0, 0, 0, 91, 90, 0, 0, 0, 0, 0, 0, 62, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 67, 0, 0, 0, 0, 0, 0, 165, 74, 0, 0, 0, 0, 0, 16, 150, 8, 0, 0, 0, 0, 1, 122, 41, 0, 0, 0, 0, 0, 17, 168, 0, 0, 0, 0, 0, 0, 103, 119, 0, 0, 0, 0, 0, 0, 33, 18, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 11, 0, 0, 0, 0, 0, 0, 99, 86, 0, 0, 0, 0, 0, 0, 71, 125, 0, 0, 0, 0, 0, 0, 62, 141, 0, 0, 0, 0, 0, 0, 35, 157, 0, 0, 0, 0, 0, 0, 7, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 99, 17, 0, 0, 0, 0, 0, 38, 246, 69, 0, 0, 0, 0, 0, 93, 238, 48, 0, 0, 0, 0, 0, 150, 165, 2, 0, 0, 0, 0, 0, 161, 169, 3, 0, 0, 0, 0, 0, 137, 104, 0, 0, 0, 0, 0, 0, 21, 18, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 176, 70, 0, 0, 0, 0, 0, 66, 239, 65, 0, 0, 0, 0, 0, 131, 196, 14, 0, 0, 0, 0, 9, 184, 129, 0, 0, 0, 0, 0, 64, 245, 85, 0, 0, 0, 0, 0, 42, 176, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 112, 31, 0, 0, 0, 0, 0, 146, 147, 0, 0, 0, 0, 0, 37, 194, 28, 0, 0, 0, 0, 42, 193, 49, 0, 0, 0, 0, 0, 147, 152, 0, 0, 0, 0, 0, 0, 146, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 24, 0, 0, 0, 0, 0, 0, 214, 102, 0, 0, 0, 0, 0, 17, 221, 56, 0, 0, 0, 0, 0, 88, 190, 12, 0, 0, 0, 0, 0, 134, 126, 0, 0, 0, 0, 0, 0, 160, 44, 0, 0, 0, 0, 0, 0, 32, 3, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 75, 0, 0, 0, 0, 0, 21, 227, 180, 0, 0, 0, 0, 0, 88, 247, 115, 0, 0, 0, 0, 21, 206, 130, 7, 0, 0, 0, 0, 55, 236, 57, 0, 0, 0, 0, 0, 65, 203, 7, 0, 0, 0, 0, 0, 8, 39, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108, 6, 0, 0, 0, 0, 0, 25, 165, 2, 0, 0, 0, 0, 0, 34, 139, 0, 0, 0, 0, 0, 0, 69, 122, 0, 0, 0, 0, 0, 0, 87, 99, 0, 0, 0, 0, 0, 0, 69, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 151, 10, 0, 0, 0, 0, 0, 177, 160, 0, 0, 0, 0, 0, 54, 223, 48, 0, 0, 0, 0, 8, 160, 84, 0, 0, 0, 0, 0, 78, 219, 6, 0, 0, 0, 0, 0, 127, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 94, 1, 0, 0, 0, 0, 0, 0, 119, 0, 0, 0, 0, 0, 0, 7, 119, 0, 0, 0, 0, 0, 0, 50, 83, 0, 0, 0, 0, 0, 0, 67, 64, 0, 0, 0, 0, 0, 0, 58, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 22, 0, 0, 0, 0, 0, 0, 70, 114, 0, 0, 0, 0, 0, 0, 47, 126, 0, 0, 0, 0, 0, 0, 62, 122, 0, 0, 0, 0, 0, 0, 86, 89, 0, 0, 0, 0, 0, 0, 108, 23, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 107, 4, 0, 0, 0, 0, 0, 5, 194, 12, 0, 0, 0, 0, 0, 16, 173, 2, 0, 0, 0, 0, 0, 62, 133, 0, 0, 0, 0, 0, 0, 99, 112, 0, 0, 0, 0, 0, 0, 84, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 71, 0, 0, 0, 0, 0, 0, 166, 43, 0, 0, 0, 0, 0, 11, 158, 6, 0, 0, 0, 0, 0, 78, 139, 0, 0, 0, 0, 0, 0, 140, 87, 0, 0, 0, 0, 0, 0, 127, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 170, 59, 0, 0, 0, 0, 0, 20, 245, 115, 0, 0, 0, 0, 0, 52, 243, 78, 0, 0, 0, 0, 0, 142, 169, 3, 0, 0, 0, 0, 15, 197, 140, 0, 0, 0, 0, 0, 14, 142, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 57, 7, 0, 0, 0, 0, 0, 0, 113, 113, 0, 0, 0, 0, 0, 0, 87, 153, 0, 0, 0, 0, 0, 0, 94, 124, 0, 0, 0, 0, 0, 0, 105, 109, 0, 0, 0, 0, 0, 0, 109, 56, 0, 0, 0, 0, 0, 0, 27, 5, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 56, 0, 0, 0, 0, 0, 0, 16, 86, 0, 0, 0, 0, 0, 0, 7, 102, 0, 0, 0, 0, 0, 0, 3, 115, 0, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 123, 0, 0, 0, 0, 0, 0, 66, 146, 0, 0, 0, 0, 0, 0, 95, 139, 0, 0, 0, 0, 0, 0, 137, 98, 0, 0, 0, 0, 0, 0, 169, 95, 0, 0, 0, 0, 0, 0, 112, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 91, 31, 0, 0, 0, 0, 0, 21, 238, 140, 0, 0, 0, 0, 0, 59, 235, 80, 0, 0, 0, 0, 23, 175, 200, 15, 0, 0, 0, 0, 98, 252, 112, 0, 0, 0, 0, 0, 109, 168, 0, 0, 0, 0, 0, 0, 29, 14, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 139, 18, 0, 0, 0, 0, 0, 27, 214, 48, 0, 0, 0, 0, 0, 0, 166, 119, 0, 0, 0, 0, 0, 0, 55, 240, 58, 0, 0, 0, 0, 0, 8, 232, 83, 0, 0, 0, 0, 0, 0, 138, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 137, 0, 0, 0, 0, 0, 1, 191, 143, 0, 0, 0, 0, 0, 45, 224, 56, 0, 0, 0, 0, 7, 168, 119, 0, 0, 0, 0, 0, 59, 217, 29, 0, 0, 0, 0, 0, 94, 155, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 68, 0, 0, 0, 0, 0, 0, 150, 123, 0, 0, 0, 0, 0, 15, 206, 37, 0, 0, 0, 0, 0, 95, 124, 0, 0, 0, 0, 0, 14, 174, 37, 0, 0, 0, 0, 0, 87, 151, 0, 0, 0, 0, 0, 0, 19, 26, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 68, 0, 0, 0, 0, 0, 0, 170, 47, 0, 0, 0, 0, 0, 29, 167, 6, 0, 0, 0, 0, 0, 107, 83, 0, 0, 0, 0, 0, 0, 162, 22, 0, 0, 0, 0, 0, 0, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 16, 0, 0, 0, 0, 0, 0, 140, 19, 0, 0, 0, 0, 0, 2, 135, 3, 0, 0, 0, 0, 0, 71, 81, 0, 0, 0, 0, 0, 1, 155, 15, 0, 0, 0, 0, 0, 29, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 52, 0, 0, 0, 0, 0, 0, 132, 126, 0, 0, 0, 0, 0, 0, 159, 122, 0, 0, 0, 0, 0, 0, 81, 118, 0, 0, 0, 0, 0, 0, 87, 127, 0, 0, 0, 0, 0, 0, 90, 131, 0, 0, 0, 0, 0, 0, 6, 22, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 0, 0, 0, 0, 0, 0, 6, 154, 0, 0, 0, 0, 0, 0, 27, 145, 0, 0, 0, 0, 0, 0, 80, 102, 0, 0, 0, 0, 0, 0, 123, 42, 0, 0, 0, 0, 0, 10, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 0, 0, 0, 0, 0, 0, 98, 122, 0, 0, 0, 0, 0, 10, 160, 25, 0, 0, 0, 0, 0, 120, 45, 0, 0, 0, 0, 0, 2, 152, 0, 0, 0, 0, 0, 0, 19, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79, 96, 0, 0, 0, 0, 0, 0, 173, 58, 0, 0, 0, 0, 0, 10, 171, 10, 0, 0, 0, 0, 0, 99, 99, 0, 0, 0, 0, 0, 0, 163, 31, 0, 0, 0, 0, 0, 18, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 67, 0, 0, 0, 0, 0, 0, 183, 50, 0, 0, 0, 0, 0, 27, 180, 12, 0, 0, 0, 0, 1, 150, 63, 0, 0, 0, 0, 0, 50, 195, 2, 0, 0, 0, 0, 0, 66, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 102, 0, 0, 0, 0, 0, 17, 87, 98, 0, 0, 0, 0, 0, 0, 0, 94, 0, 0, 0, 0, 0, 0, 8, 90, 0, 0, 0, 0, 0, 0, 40, 59, 0, 0, 0, 0, 0, 36, 125, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 4, 0, 0, 0, 0, 0, 1, 164, 12, 0, 0, 0, 0, 0, 7, 168, 2, 0, 0, 0, 0, 0, 52, 107, 0, 0, 0, 0, 0, 0, 90, 98, 0, 0, 0, 0, 0, 0, 79, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 15, 0, 0, 0, 0, 0, 0, 186, 26, 0, 0, 0, 0, 0, 25, 168, 2, 0, 0, 0, 0, 0, 88, 97, 0, 0, 0, 0, 0, 0, 134, 40, 0, 0, 0, 0, 5, 0, 92, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 25, 179, 0, 0, 0, 0, 0, 0, 81, 144, 0, 0, 0, 0, 0, 0, 101, 111, 0, 0, 0, 0, 0, 0, 101, 63, 0, 0, 0, 0, 0, 0, 99, 32, 0, 0, 0, 0, 0, 0, 23, 2, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 23, 0, 0, 0, 0, 0, 5, 196, 23, 0, 0, 0, 0, 0, 54, 163, 0, 0, 0, 0, 0, 0, 135, 71, 0, 0, 0, 0, 0, 9, 179, 26, 0, 0, 0, 0, 0, 16, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 95, 0, 0, 0, 0, 0, 0, 19, 139, 1, 0, 0, 0, 0, 0, 16, 157, 0, 0, 0, 0, 0, 0, 28, 152, 0, 0, 0, 0, 0, 0, 47, 155, 0, 0, 0, 0, 0, 0, 31, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 78, 0, 0, 0, 0, 0, 0, 140, 164, 0, 0, 0, 0, 0, 9, 221, 77, 0, 0, 0, 0, 0, 119, 143, 2, 0, 0, 0, 0, 20, 200, 55, 0, 0, 0, 0, 0, 67, 172, 0, 0, 0, 0, 0, 0, 12, 19, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 83, 0, 0, 0, 0, 0, 0, 131, 94, 0, 0, 0, 0, 0, 1, 182, 30, 0, 0, 0, 0, 0, 80, 111, 0, 0, 0, 0, 0, 0, 148, 30, 0, 0, 0, 0, 0, 2, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 52, 0, 0, 0, 0, 0, 0, 17, 87, 0, 0, 0, 0, 0, 0, 24, 90, 0, 0, 0, 0, 0, 0, 57, 54, 0, 0, 0, 0, 0, 0, 92, 25, 0, 0, 0, 0, 0, 0, 56, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 72, 0, 0, 0, 0, 0, 0, 22, 189, 2, 0, 0, 0, 0, 0, 20, 185, 0, 0, 0, 0, 0, 0, 67, 127, 0, 0, 0, 0, 0, 0, 114, 65, 0, 0, 0, 0, 0, 0, 111, 53, 0, 0, 0, 0, 0, 0, 25, 15, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 12, 0, 0, 0, 0, 0, 0, 114, 0, 0, 0, 0, 0, 0, 0, 117, 0, 0, 0, 0, 0, 0, 13, 104, 0, 0, 0, 0, 0, 0, 41, 89, 0, 0, 0, 0, 0, 0, 87, 17, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 143, 63, 0, 0, 0, 0, 0, 31, 207, 159, 0, 0, 0, 0, 0, 0, 111, 239, 47, 0, 0, 0, 0, 0, 111, 255, 63, 0, 0, 0, 0, 0, 159, 223, 31, 0, 0, 0, 0, 0, 127, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 80, 0, 0, 0, 0, 0, 0, 46, 107, 0, 0, 0, 0, 0, 0, 74, 107, 0, 0, 0, 0, 0, 0, 86, 91, 0, 0, 0, 0, 0, 0, 99, 90, 0, 0, 0, 0, 0, 0, 42, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 103, 19, 0, 0, 0, 0, 0, 7, 214, 32, 0, 0, 0, 0, 0, 22, 150, 0, 0, 0, 0, 0, 0, 76, 93, 0, 0, 0, 0, 0, 0, 105, 70, 0, 0, 0, 0, 0, 0, 104, 43, 0, 0, 0, 0, 0, 0, 24, 8, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 42, 0, 0, 0, 0, 0, 0, 58, 138, 0, 0, 0, 0, 0, 0, 58, 150, 0, 0, 0, 0, 0, 0, 72, 109, 0, 0, 0, 0, 0, 0, 83, 87, 0, 0, 0, 0, 0, 0, 45, 143, 3, 0, 0, 0, 0, 0, 0, 44, 3, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 63, 0, 0, 0, 0, 0, 0, 57, 104, 0, 0, 0, 0, 0, 0, 36, 104, 0, 0, 0, 0, 0, 0, 23, 117, 0, 0, 0, 0, 0, 0, 4, 139, 0, 0, 0, 0, 0, 0, 3, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 69, 0, 0, 0, 0, 0, 0, 164, 50, 0, 0, 0, 0, 0, 7, 171, 10, 0, 0, 0, 0, 0, 55, 117, 0, 0, 0, 0, 0, 0, 115, 59, 0, 0, 0, 0, 0, 2, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 68, 0, 0, 0, 0, 0, 0, 0, 98, 58, 0, 0, 0, 0, 0, 0, 21, 128, 0, 0, 0, 0, 0, 0, 0, 140, 0, 0, 0, 0, 0, 0, 0, 140, 0, 0, 0, 0, 0, 0, 16, 91, 0, 0, 0, 0, 0, 0, 6, 13, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 71, 0, 0, 0, 0, 0, 0, 58, 104, 0, 0, 0, 0, 0, 0, 63, 109, 0, 0, 0, 0, 0, 0, 45, 120, 0, 0, 0, 0, 0, 0, 40, 120, 0, 0, 0, 0, 0, 0, 9, 111, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 116, 0, 0, 0, 0, 0, 0, 0, 133, 24, 0, 0, 0, 0, 0, 0, 98, 66, 0, 0, 0, 0, 0, 0, 59, 101, 0, 0, 0, 0, 0, 0, 22, 154, 0, 0, 0, 0, 0, 0, 0, 115, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 30, 0, 0, 0, 0, 0, 0, 39, 48, 0, 0, 0, 0, 0, 0, 59, 57, 0, 0, 0, 0, 0, 0, 66, 68, 0, 0, 0, 0, 0, 0, 58, 68, 0, 0, 0, 0, 0, 0, 38, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 73, 0, 0, 0, 0, 0, 0, 84, 183, 0, 0, 0, 0, 0, 0, 123, 145, 0, 0, 0, 0, 0, 0, 114, 120, 0, 0, 0, 0, 0, 0, 102, 127, 0, 0, 0, 0, 0, 0, 78, 149, 0, 0, 0, 0, 0, 0, 12, 25, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 127, 0, 0, 0, 0, 0, 0, 143, 138, 0, 0, 0, 0, 0, 21, 195, 32, 0, 0, 0, 0, 3, 153, 76, 0, 0, 0, 0, 0, 59, 202, 7, 0, 0, 0, 0, 0, 91, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 20, 0, 0, 0, 0, 0, 0, 34, 143, 0, 0, 0, 0, 0, 0, 16, 168, 0, 0, 0, 0, 0, 0, 20, 152, 0, 0, 0, 0, 0, 0, 37, 133, 0, 0, 0, 0, 0, 0, 3, 99, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 85, 51, 0, 0, 0, 0, 0, 125, 221, 15, 0, 0, 0, 0, 19, 212, 104, 0, 0, 0, 0, 33, 193, 97, 0, 0, 0, 0, 0, 152, 216, 9, 0, 0, 0, 0, 7, 213, 59, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 41, 0, 0, 0, 0, 0, 0, 117, 1, 0, 0, 0, 0, 0, 30, 98, 0, 0, 0, 0, 0, 0, 107, 13, 0, 0, 0, 0, 0, 0, 119, 0, 0, 0, 0, 0, 0, 0, 79, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 95, 0, 0, 0, 0, 0, 0, 77, 133, 0, 0, 0, 0, 0, 0, 91, 133, 0, 0, 0, 0, 0, 0, 111, 133, 0, 0, 0, 0, 0, 0, 85, 141, 0, 0, 0, 0, 0, 0, 33, 126, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 34, 0, 0, 0, 0, 0, 0, 20, 114, 0, 0, 0, 0, 0, 0, 16, 122, 0, 0, 0, 0, 0, 0, 20, 130, 0, 0, 0, 0, 0, 0, 6, 145, 0, 0, 0, 0, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 36, 0, 0, 0, 0, 0, 23, 207, 21, 0, 0, 0, 0, 0, 67, 175, 6, 0, 0, 0, 0, 0, 143, 102, 0, 0, 0, 0, 0, 12, 196, 37, 0, 0, 0, 0, 0, 32, 149, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 112, 0, 0, 0, 0, 0, 52, 180, 26, 0, 0, 0, 0, 8, 199, 78, 0, 0, 0, 0, 6, 148, 130, 2, 0, 0, 0, 0, 115, 200, 14, 0, 0, 0, 0, 19, 156, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 23, 122, 0, 0, 0, 0, 0, 0, 157, 104, 0, 0, 0, 0, 0, 21, 186, 25, 0, 0, 0, 0, 0, 126, 77, 0, 0, 0, 0, 0, 48, 187, 8, 0, 0, 0, 0, 0, 114, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 19, 31, 0, 0, 0, 0, 0, 99, 147, 130, 0, 0, 0, 0, 0, 9, 1, 118, 0, 0, 0, 0, 0, 0, 0, 97, 0, 0, 0, 0, 0, 0, 0, 89, 0, 0, 0, 0, 1, 29, 46, 168, 131, 149, 37, 0, 4, 122, 100, 49, 17, 8, 3, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 45, 0, 0, 0, 0, 0, 70, 183, 4, 0, 0, 0, 0, 7, 197, 93, 0, 0, 0, 0, 15, 159, 103, 0, 0, 0, 0, 0, 134, 184, 8, 0, 0, 0, 0, 0, 156, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 134, 19, 0, 0, 0, 0, 42, 183, 51, 0, 0, 0, 0, 2, 180, 139, 0, 0, 0, 0, 19, 172, 103, 2, 0, 0, 0, 3, 166, 172, 6, 0, 0, 0, 0, 56, 126, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 3, 0, 0, 0, 9, 50, 147, 191, 11, 0, 0, 0, 85, 175, 235, 108, 0, 0, 0, 0, 0, 78, 132, 0, 0, 0, 0, 0, 12, 160, 40, 0, 0, 0, 0, 0, 104, 158, 0, 0, 0, 0, 0, 0, 75, 45, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 122, 0, 0, 0, 0, 0, 0, 137, 145, 0, 0, 0, 0, 0, 17, 190, 45, 0, 0, 0, 0, 20, 153, 88, 0, 0, 0, 0, 0, 129, 233, 43, 0, 0, 0, 0, 0, 105, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 149, 29, 0, 0, 0, 0, 0, 0, 127, 112, 0, 0, 0, 0, 0, 0, 76, 135, 0, 0, 0, 0, 0, 0, 60, 166, 0, 0, 0, 0, 0, 0, 33, 232, 77, 0, 0, 0, 0, 0, 16, 168, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 144, 7, 0, 0, 0, 0, 0, 132, 92, 0, 0, 0, 0, 0, 26, 153, 7, 0, 0, 0, 0, 17, 171, 62, 0, 0, 0, 0, 0, 82, 214, 13, 0, 0, 0, 0, 0, 101, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 57, 0, 0, 0, 0, 0, 0, 25, 129, 0, 0, 0, 0, 0, 7, 100, 110, 0, 0, 0, 0, 0, 4, 6, 117, 0, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0, 0, 0, 0, 0, 107, 6, 0, 0, 0, 0, 0, 0, 21, 3, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 63, 0, 0, 0, 0, 0, 2, 91, 175, 0, 0, 0, 0, 0, 2, 60, 159, 0, 0, 0, 0, 0, 0, 88, 102, 0, 0, 0, 0, 0, 0, 138, 63, 0, 0, 0, 0, 0, 0, 159, 5, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 88, 0, 0, 0, 0, 0, 0, 151, 59, 0, 0, 0, 0, 0, 24, 144, 4, 0, 0, 0, 0, 1, 148, 24, 0, 0, 0, 0, 0, 53, 155, 0, 0, 0, 0, 0, 0, 51, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 120, 12, 0, 0, 0, 0, 0, 131, 125, 0, 0, 0, 0, 0, 4, 198, 38, 0, 0, 0, 0, 0, 105, 108, 0, 0, 0, 0, 0, 53, 198, 14, 0, 0, 0, 0, 0, 99, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 143, 0, 0, 0, 0, 0, 0, 174, 132, 0, 0, 0, 0, 0, 36, 198, 26, 0, 0, 0, 0, 18, 178, 57, 0, 0, 0, 0, 0, 131, 166, 1, 0, 0, 0, 0, 0, 149, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 117, 8, 0, 0, 1, 1, 0, 97, 181, 0, 0, 0, 0, 0, 20, 207, 67, 0, 0, 0, 0, 8, 154, 86, 0, 0, 0, 0, 0, 83, 196, 6, 0, 0, 0, 0, 0, 136, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 41, 72, 0, 0, 0, 0, 0, 0, 101, 45, 0, 0, 0, 0, 0, 3, 145, 13, 0, 0, 0, 0, 0, 64, 80, 0, 0, 0, 0, 0, 0, 152, 21, 0, 0, 0, 0, 0, 0, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 84, 64, 0, 0, 0, 0, 0, 94, 201, 3, 0, 0, 0, 0, 13, 204, 110, 0, 0, 0, 0, 27, 178, 100, 1, 0, 0, 0, 0, 146, 195, 8, 0, 0, 0, 0, 3, 158, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 85, 0, 0, 0, 0, 0, 0, 146, 111, 0, 0, 0, 0, 0, 32, 167, 16, 0, 0, 0, 0, 0, 132, 59, 0, 0, 0, 0, 0, 0, 149, 10, 0, 0, 0, 0, 0, 0, 139, 30, 0, 0, 0, 0, 0, 0, 25, 18, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 61, 0, 0, 0, 0, 0, 0, 194, 131, 0, 0, 0, 0, 0, 12, 201, 60, 0, 0, 0, 0, 0, 84, 106, 0, 0, 0, 0, 0, 10, 164, 30, 0, 0, 0, 0, 0, 125, 131, 0, 0, 0, 0, 0, 0, 37, 17, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101, 2, 0, 0, 0, 0, 0, 0, 161, 3, 0, 0, 0, 0, 0, 14, 163, 1, 0, 0, 0, 0, 0, 70, 95, 0, 0, 0, 0, 0, 0, 129, 33, 0, 0, 0, 0, 0, 2, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 139, 9, 0, 0, 0, 0, 0, 154, 147, 0, 0, 0, 0, 0, 23, 211, 49, 0, 0, 0, 0, 2, 139, 103, 0, 0, 0, 0, 0, 45, 216, 20, 0, 4, 6, 0, 0, 86, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 75, 0, 0, 0, 0, 0, 0, 30, 129, 0, 0, 0, 0, 0, 0, 32, 132, 0, 0, 0, 0, 0, 0, 24, 125, 0, 0, 0, 0, 0, 0, 13, 154, 0, 0, 0, 0, 0, 0, 0, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 99, 0, 0, 0, 0, 0, 0, 165, 76, 0, 0, 0, 0, 0, 30, 172, 13, 0, 0, 0, 0, 3, 159, 39, 0, 0, 0, 0, 0, 59, 184, 0, 0, 0, 0, 0, 0, 101, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 113, 183, 0, 0, 0, 0, 0, 11, 189, 58, 0, 0, 0, 0, 1, 154, 56, 0, 0, 0, 0, 0, 31, 147, 2, 0, 0, 0, 0, 0, 110, 80, 0, 0, 0, 0, 0, 0, 36, 15, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 17, 0, 0, 0, 0, 0, 0, 92, 61, 0, 0, 0, 0, 0, 0, 57, 98, 0, 0, 0, 0, 0, 0, 40, 123, 0, 0, 0, 0, 0, 0, 31, 126, 0, 0, 0, 0, 0, 0, 23, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 107, 122, 0, 0, 0, 0, 0, 2, 174, 28, 0, 0, 0, 0, 0, 49, 126, 0, 0, 0, 0, 0, 0, 130, 37, 0, 0, 0, 0, 0, 34, 181, 0, 0, 0, 0, 0, 0, 102, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 103, 0, 0, 0, 0, 0, 0, 170, 96, 0, 0, 0, 0, 0, 3, 204, 34, 0, 0, 0, 0, 0, 76, 131, 0, 0, 0, 0, 0, 0, 155, 55, 0, 0, 0, 0, 0, 25, 147, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 81, 0, 0, 0, 0, 0, 0, 18, 148, 0, 0, 0, 0, 0, 0, 24, 150, 0, 0, 0, 0, 0, 0, 24, 149, 0, 0, 0, 0, 0, 0, 30, 130, 0, 0, 0, 0, 0, 0, 22, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 104, 0, 0, 0, 0, 0, 0, 183, 102, 0, 0, 0, 0, 0, 20, 209, 33, 0, 0, 0, 0, 0, 123, 117, 0, 0, 0, 0, 0, 10, 184, 50, 0, 0, 0, 0, 0, 40, 142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 93, 0, 0, 0, 0, 0, 0, 3, 160, 24, 0, 0, 0, 0, 0, 0, 110, 92, 0, 0, 0, 0, 0, 0, 68, 161, 0, 0, 0, 0, 0, 0, 34, 175, 3, 0, 0, 0, 0, 0, 11, 127, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 111, 0, 0, 0, 0, 0, 0, 102, 127, 0, 0, 0, 0, 0, 1, 173, 48, 0, 0, 0, 0, 0, 93, 88, 0, 0, 0, 0, 0, 12, 173, 8, 0, 0, 0, 0, 0, 56, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 91, 0, 0, 0, 0, 0, 0, 163, 92, 0, 0, 0, 0, 0, 14, 193, 29, 0, 0, 0, 0, 0, 122, 78, 0, 0, 0, 0, 0, 38, 192, 8, 0, 0, 0, 0, 0, 101, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 12, 0, 0, 0, 0, 0, 0, 107, 43, 0, 0, 0, 0, 0, 0, 99, 67, 0, 0, 0, 0, 0, 0, 53, 95, 0, 0, 0, 0, 0, 0, 17, 120, 0, 0, 0, 0, 0, 0, 1, 119, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 58, 0, 0, 0, 0, 0, 0, 148, 10, 0, 0, 0, 0, 0, 33, 113, 0, 0, 0, 0, 0, 0, 111, 25, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 104, 0, 0, 0, 0, 0, 0, 150, 115, 0, 0, 0, 0, 0, 2, 191, 43, 0, 0, 0, 0, 0, 107, 111, 0, 0, 0, 0, 0, 40, 194, 17, 0, 0, 0, 0, 0, 116, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 70, 0, 0, 0, 0, 0, 0, 36, 111, 0, 0, 0, 0, 0, 0, 28, 128, 0, 0, 0, 0, 0, 0, 38, 139, 0, 0, 0, 0, 0, 0, 21, 146, 0, 0, 0, 0, 0, 0, 10, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 0, 0, 0, 0, 0, 0, 35, 117, 0, 0, 0, 0, 0, 0, 48, 117, 0, 0, 0, 0, 0, 0, 52, 95, 0, 0, 0, 0, 0, 0, 52, 85, 0, 0, 0, 0, 0, 0, 17, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 113, 0, 0, 0, 0, 0, 0, 136, 139, 0, 0, 0, 0, 0, 5, 204, 61, 0, 0, 0, 5, 0, 111, 125, 0, 0, 0, 0, 0, 38, 208, 29, 0, 0, 0, 0, 0, 114, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 114, 0, 0, 0, 0, 0, 0, 134, 134, 0, 0, 0, 0, 0, 6, 205, 63, 0, 0, 0, 0, 0, 124, 103, 0, 0, 0, 0, 0, 23, 197, 17, 0, 0, 0, 0, 0, 60, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 74, 0, 0, 0, 0, 0, 0, 185, 75, 0, 0, 0, 0, 0, 26, 192, 16, 0, 0, 0, 0, 0, 111, 93, 0, 0, 0, 0, 0, 18, 191, 28, 0, 0, 0, 0, 0, 62, 182, 0, 0, 0, 0, 0, 0, 11, 36, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 8, 0, 0, 0, 0, 0, 0, 104, 77, 0, 0, 0, 0, 0, 0, 77, 59, 0, 0, 0, 0, 0, 0, 62, 98, 0, 0, 0, 0, 0, 0, 51, 99, 0, 0, 0, 0, 0, 0, 52, 90, 0, 0, 0, 0, 0, 0, 8, 17, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 24, 0, 0, 0, 0, 0, 0, 126, 85, 0, 0, 0, 0, 0, 0, 125, 123, 0, 0, 0, 0, 0, 0, 111, 148, 0, 0, 0, 0, 0, 0, 74, 148, 0, 0, 0, 0, 0, 0, 19, 176, 15, 0, 0, 0, 0, 0, 0, 42, 11, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 27, 0, 0, 0, 0, 0, 0, 79, 107, 0, 0, 0, 0, 0, 0, 63, 127, 0, 0, 0, 0, 0, 0, 32, 127, 0, 0, 0, 0, 0, 0, 8, 139, 4, 0, 0, 0, 0, 0, 0, 127, 71, 0, 0, 0, 0, 0, 0, 19, 31, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 6, 0, 0, 0, 0, 0, 3, 158, 0, 0, 0, 0, 0, 0, 37, 160, 0, 0, 0, 0, 0, 0, 64, 122, 0, 0, 0, 0, 0, 0, 66, 105, 0, 0, 0, 0, 0, 0, 50, 111, 0, 0, 0, 0, 0, 0, 5, 27, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 83, 2, 0, 0, 0, 0, 0, 95, 239, 49, 0, 0, 0, 0, 0, 113, 208, 22, 0, 0, 0, 0, 0, 142, 111, 0, 0, 0, 0, 0, 0, 150, 95, 0, 0, 0, 0, 0, 0, 55, 137, 2, 0, 0, 0, 0, 0, 0, 44, 2, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 22, 0, 0, 0, 0, 0, 0, 73, 61, 0, 0, 0, 0, 0, 0, 50, 78, 0, 0, 0, 0, 0, 0, 17, 131, 0, 0, 0, 0, 0, 0, 3, 134, 0, 0, 0, 0, 0, 0, 0, 95, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 133, 2, 0, 0, 0, 0, 3, 192, 69, 0, 0, 0, 0, 0, 58, 170, 7, 0, 0, 0, 0, 2, 159, 64, 0, 0, 0, 0, 0, 37, 198, 4, 0, 0, 0, 0, 0, 22, 144, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 15, 0, 0, 0, 0, 0, 0, 148, 37, 0, 0, 0, 0, 0, 1, 149, 5, 0, 0, 0, 0, 0, 66, 79, 0, 0, 0, 0, 0, 0, 118, 14, 0, 0, 0, 0, 0, 22, 108, 0, 0, 0, 0, 0, 0, 12, 27, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 44, 0, 0, 0, 0, 0, 6, 189, 17, 0, 0, 0, 0, 0, 33, 157, 0, 0, 0, 0, 0, 0, 84, 133, 0, 0, 0, 0, 0, 0, 112, 94, 0, 0, 0, 0, 0, 0, 84, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 22, 0, 0, 0, 0, 0, 31, 247, 92, 0, 0, 0, 0, 0, 57, 210, 29, 0, 0, 0, 0, 1, 132, 100, 0, 0, 0, 0, 0, 39, 208, 49, 0, 0, 0, 0, 0, 121, 136, 0, 0, 0, 0, 0, 0, 24, 19, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 42, 0, 0, 0, 0, 0, 75, 140, 1, 0, 0, 0, 2, 11, 164, 30, 0, 0, 0, 0, 10, 135, 40, 0, 0, 0, 0, 0, 98, 148, 0, 0, 0, 0, 0, 0, 119, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 85, 38, 0, 0, 0, 0, 0, 101, 241, 39, 0, 0, 0, 0, 18, 229, 168, 1, 0, 0, 0, 4, 146, 161, 17, 0, 0, 0, 1, 109, 181, 42, 0, 0, 0, 0, 0, 195, 135, 2, 0, 0, 0, 0, 0, 35, 19, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 79, 0, 0, 0, 0, 0, 0, 98, 47, 0, 0, 0, 0, 0, 0, 117, 18, 0, 0, 0, 0, 0, 0, 112, 48, 0, 0, 0, 0, 0, 0, 70, 73, 0, 0, 0, 0, 0, 0, 4, 119, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 40, 0, 0, 0, 0, 0, 0, 189, 142, 0, 0, 0, 0, 0, 24, 222, 62, 0, 0, 0, 0, 0, 123, 116, 2, 0, 0, 0, 0, 0, 43, 21, 0, 0, 0, 0, 0, 142, 100, 2, 0, 0, 0, 0, 0, 64, 57, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 69, 0, 0, 0, 0, 0, 35, 247, 143, 0, 0, 0, 0, 0, 66, 252, 117, 0, 0, 0, 0, 14, 191, 181, 28, 0, 0, 0, 0, 43, 215, 38, 0, 0, 0, 0, 0, 108, 169, 0, 0, 0, 0, 0, 0, 25, 35, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 141, 1, 0, 0, 0, 0, 0, 154, 203, 0, 0, 0, 0, 0, 55, 239, 98, 0, 0, 0, 0, 74, 224, 99, 0, 0, 0, 0, 2, 196, 158, 0, 0, 0, 0, 0, 3, 144, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 116, 0, 0, 0, 0, 0, 0, 124, 156, 0, 0, 0, 0, 0, 0, 7, 135, 0, 0, 0, 0, 0, 0, 9, 142, 0, 0, 0, 0, 0, 0, 38, 119, 0, 0, 0, 0, 0, 0, 104, 163, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 85, 0, 0, 0, 0, 0, 0, 164, 53, 0, 0, 0, 0, 0, 6, 166, 5, 0, 0, 0, 0, 0, 65, 115, 0, 0, 0, 0, 0, 0, 126, 48, 0, 0, 0, 0, 0, 1, 116, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 7, 0, 0, 0, 0, 0, 25, 191, 15, 0, 0, 0, 0, 20, 142, 123, 0, 0, 0, 0, 0, 18, 145, 72, 0, 0, 0, 0, 0, 0, 87, 81, 0, 0, 0, 0, 0, 0, 63, 97, 0, 0, 0, 0, 0, 0, 7, 25, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 105, 0, 0, 0, 0, 0, 0, 62, 161, 0, 0, 0, 0, 0, 0, 136, 162, 0, 0, 0, 0, 0, 0, 122, 162, 0, 0, 0, 0, 0, 0, 129, 148, 0, 0, 0, 0, 0, 0, 96, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 99, 0, 0, 0, 0, 0, 12, 228, 60, 0, 0, 0, 0, 0, 31, 201, 21, 0, 0, 0, 0, 0, 120, 106, 0, 0, 0, 0, 0, 12, 195, 111, 0, 0, 0, 0, 0, 11, 135, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 32, 0, 0, 0, 0, 0, 9, 220, 77, 0, 0, 0, 0, 0, 54, 224, 35, 0, 0, 0, 0, 0, 155, 168, 4, 0, 0, 0, 0, 12, 199, 90, 0, 0, 0, 0, 0, 24, 177, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 45, 0, 0, 0, 0, 0, 15, 180, 10, 0, 0, 0, 0, 0, 63, 147, 0, 0, 0, 0, 0, 0, 105, 105, 0, 0, 0, 0, 0, 0, 133, 55, 0, 0, 0, 0, 0, 0, 131, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 7, 0, 0, 0, 0, 0, 0, 136, 2, 0, 0, 0, 0, 0, 6, 122, 0, 0, 0, 0, 0, 0, 31, 108, 0, 0, 0, 0, 0, 0, 60, 59, 0, 0, 0, 0, 0, 0, 55, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 70, 0, 0, 0, 0, 0, 0, 118, 171, 0, 0, 0, 0, 0, 4, 208, 97, 0, 0, 0, 0, 0, 105, 143, 3, 0, 0, 0, 0, 26, 200, 38, 0, 0, 0, 0, 0, 73, 153, 0, 0, 0, 0, 0, 0, 14, 34, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 96, 0, 0, 0, 0, 0, 0, 2, 140, 13, 0, 0, 0, 0, 0, 0, 82, 72, 0, 0, 0, 0, 0, 0, 9, 143, 0, 0, 0, 0, 0, 0, 0, 158, 2, 0, 0, 0, 0, 0, 0, 96, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 104, 5, 0, 0, 0, 0, 0, 80, 101, 0, 0, 0, 0, 0, 0, 91, 98, 0, 0, 0, 0, 0, 0, 122, 47, 0, 0, 0, 0, 0, 0, 116, 59, 0, 0, 0, 0, 0, 0, 69, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 52, 0, 0, 0, 0, 0, 0, 133, 117, 0, 0, 0, 0, 0, 19, 188, 41, 0, 0, 0, 0, 0, 105, 75, 0, 0, 0, 0, 0, 7, 180, 19, 0, 0, 0, 0, 0, 29, 128, 0, 0, 0, 0, 0, 0, 3, 23, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 105, 0, 0, 0, 0, 0, 0, 181, 75, 0, 0, 0, 0, 0, 13, 203, 29, 0, 0, 0, 0, 0, 88, 131, 0, 0, 0, 0, 0, 1, 142, 69, 0, 0, 0, 0, 0, 13, 141, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 0, 0, 0, 0, 0, 0, 0, 123, 0, 0, 0, 0, 0, 0, 7, 118, 0, 0, 0, 0, 0, 0, 58, 66, 0, 0, 0, 0, 0, 0, 79, 27, 0, 0, 0, 0, 0, 0, 69, 1, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 52, 0, 0, 0, 0, 0, 0, 146, 35, 0, 0, 0, 0, 0, 8, 150, 0, 0, 0, 0, 0, 0, 90, 75, 0, 0, 0, 0, 0, 10, 158, 12, 0, 0, 0, 0, 0, 65, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 70, 0, 0, 0, 0, 0, 0, 21, 106, 0, 0, 0, 0, 0, 0, 32, 106, 0, 0, 0, 0, 0, 0, 72, 92, 0, 0, 0, 0, 0, 0, 85, 58, 0, 0, 0, 0, 0, 0, 70, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 110, 0, 0, 0, 0, 0, 0, 117, 108, 0, 0, 0, 0, 0, 9, 165, 20, 0, 0, 0, 0, 7, 134, 50, 0, 0, 0, 0, 0, 91, 164, 0, 0, 0, 0, 0, 0, 132, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 56, 0, 0, 0, 0, 0, 5, 147, 9, 0, 0, 0, 0, 0, 50, 108, 0, 0, 0, 0, 0, 0, 124, 41, 0, 0, 0, 0, 0, 0, 134, 14, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 59, 0, 0, 0, 0, 0, 0, 100, 93, 0, 0, 0, 0, 0, 0, 128, 23, 0, 0, 0, 0, 0, 56, 76, 0, 0, 0, 0, 0, 3, 127, 7, 0, 0, 0, 0, 0, 44, 91, 0, 0, 0, 0, 0, 0, 9, 11, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 9, 0, 0, 0, 0, 0, 0, 117, 33, 0, 0, 0, 0, 0, 0, 110, 47, 0, 0, 0, 0, 0, 0, 83, 64, 0, 0, 0, 0, 0, 0, 54, 93, 0, 0, 0, 0, 0, 0, 7, 128, 9, 0, 0, 0, 0, 0, 0, 24, 3, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 70, 0, 0, 0, 0, 0, 0, 64, 155, 0, 0, 0, 0, 0, 0, 77, 182, 5, 0, 0, 0, 0, 0, 77, 157, 0, 0, 0, 0, 0, 0, 77, 145, 0, 0, 0, 0, 0, 0, 48, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 85, 0, 0, 0, 0, 0, 36, 173, 17, 0, 0, 0, 0, 4, 158, 109, 0, 0, 0, 0, 15, 145, 60, 0, 0, 0, 0, 4, 143, 112, 0, 0, 0, 0, 0, 76, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 108, 4, 0, 0, 0, 0, 0, 65, 148, 0, 0, 0, 0, 0, 0, 140, 58, 0, 0, 0, 0, 0, 92, 77, 0, 0, 0, 0, 0, 31, 170, 1, 0, 0, 0, 0, 0, 94, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 23, 72, 0, 0, 0, 0, 3, 0, 125, 88, 0, 0, 0, 0, 0, 0, 145, 19, 0, 0, 0, 0, 0, 60, 88, 0, 0, 0, 0, 0, 8, 136, 10, 0, 0, 0, 0, 0, 92, 101, 0, 0, 0, 0, 0, 0, 22, 14, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 0, 0, 0, 0, 0, 0, 2, 148, 0, 0, 0, 0, 0, 0, 40, 129, 10, 0, 0, 0, 0, 0, 108, 145, 18, 0, 0, 0, 0, 0, 164, 89, 0, 0, 0, 0, 0, 0, 113, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 85, 4, 0, 0, 0, 0, 0, 3, 164, 158, 0, 0, 0, 0, 0, 0, 29, 194, 44, 0, 0, 0, 0, 0, 0, 54, 182, 15, 0, 0, 0, 0, 0, 0, 183, 113, 0, 0, 0, 0, 0, 0, 45, 196, 0, 0, 0, 0, 0, 0, 4, 43, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 95, 7, 0, 0, 0, 0, 0, 38, 252, 89, 0, 0, 0, 0, 0, 57, 221, 36, 0, 0, 0, 0, 0, 111, 181, 0, 0, 0, 0, 0, 2, 165, 152, 0, 0, 0, 0, 0, 1, 148, 76, 0, 0, 0, 0, 0, 0, 18, 5, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 127, 2, 0, 0, 0, 0, 0, 87, 139, 0, 0, 0, 0, 0, 3, 151, 35, 0, 0, 0, 0, 2, 120, 54, 0, 0, 0, 0, 0, 69, 150, 0, 0, 0, 0, 0, 0, 106, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 8, 0, 0, 0, 0, 0, 113, 151, 1, 0, 0, 0, 0, 4, 184, 39, 0, 0, 0, 0, 3, 126, 70, 0, 0, 0, 0, 0, 56, 172, 2, 0, 0, 0, 0, 0, 142, 54, 0, 0, 0, 0, 0, 0, 29, 2, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 118, 0, 0, 0, 0, 0, 0, 138, 107, 0, 0, 0, 0, 0, 16, 180, 22, 0, 0, 0, 0, 9, 148, 49, 0, 0, 0, 0, 0, 80, 176, 0, 0, 0, 0, 0, 0, 133, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 40, 0, 0, 0, 0, 0, 0, 5, 123, 0, 0, 0, 0, 0, 0, 0, 122, 0, 0, 0, 0, 0, 0, 16, 96, 0, 0, 0, 0, 0, 0, 25, 95, 0, 0, 0, 0, 0, 0, 40, 51, 0, 0, 0, 0, 0, 0, 10, 5, 0, 0, 0 },
    { 0, 0, 0, 2, 14, 0, 0, 0, 0, 0, 0, 29, 98, 0, 0, 0, 0, 0, 0, 59, 92, 0, 0, 0, 0, 0, 0, 59, 111, 0, 0, 0, 0, 0, 0, 59, 119, 0, 0, 0, 0, 0, 0, 34, 157, 2, 0, 0, 0, 0, 0, 0, 108, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 46, 97, 0, 0, 0, 0, 0, 0, 81, 44, 0, 0, 0, 0, 0, 0, 70, 55, 0, 0, 0, 0, 0, 0, 42, 63, 0, 0, 0, 0, 0, 0, 30, 63, 0, 0, 0, 0, 0, 0, 6, 30, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 84, 0, 0, 0, 0, 0, 0, 0, 123, 0, 0, 0, 0, 0, 0, 5, 141, 0, 0, 0, 0, 0, 0, 44, 111, 0, 0, 0, 0, 0, 0, 100, 53, 0, 0, 0, 0, 0, 0, 99, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 65, 7, 0, 0, 0, 0, 0, 149, 109, 0, 0, 0, 0, 0, 10, 189, 38, 0, 0, 0, 0, 0, 100, 92, 0, 0, 0, 0, 0, 13, 174, 15, 0, 0, 0, 0, 0, 38, 159, 0, 0, 0, 0, 0, 0, 5, 25, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 91, 0, 0, 0, 0, 0, 1, 199, 67, 0, 0, 0, 0, 0, 46, 176, 11, 0, 0, 0, 8, 0, 156, 50, 0, 0, 0, 0, 2, 27, 198, 9, 0, 0, 0, 0, 0, 23, 141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 111, 0, 0, 0, 0, 0, 0, 163, 90, 0, 0, 0, 0, 0, 19, 178, 18, 0, 0, 0, 0, 0, 124, 80, 0, 0, 0, 0, 0, 17, 184, 11, 0, 0, 0, 0, 0, 52, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 123, 34, 0, 0, 0, 0, 0, 3, 182, 8, 0, 0, 0, 0, 0, 39, 146, 0, 0, 0, 0, 0, 0, 102, 85, 0, 0, 0, 0, 0, 4, 161, 39, 0, 0, 0, 0, 0, 46, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 55, 0, 0, 0, 0, 0, 0, 193, 72, 0, 0, 0, 0, 0, 22, 179, 13, 0, 0, 0, 0, 1, 120, 69, 0, 0, 0, 0, 0, 34, 197, 14, 0, 0, 0, 0, 0, 95, 136, 0, 0, 0, 0, 0, 0, 25, 22, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 43, 0, 0, 0, 0, 0, 0, 47, 71, 0, 0, 0, 0, 0, 0, 28, 77, 0, 0, 0, 0, 0, 0, 44, 66, 0, 0, 0, 0, 0, 0, 71, 50, 0, 0, 0, 0, 0, 0, 53, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 66, 0, 0, 0, 0, 0, 0, 18, 95, 0, 0, 0, 0, 0, 0, 31, 98, 0, 0, 0, 0, 0, 0, 69, 84, 0, 0, 0, 0, 0, 0, 90, 46, 0, 0, 0, 0, 0, 0, 92, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 29, 0, 0, 0, 0, 0, 0, 34, 65, 0, 0, 0, 0, 0, 0, 36, 73, 0, 0, 0, 0, 0, 0, 46, 75, 0, 0, 0, 0, 0, 0, 48, 68, 0, 0, 0, 0, 0, 0, 41, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 72, 0, 0, 0, 0, 0, 0, 35, 74, 0, 0, 0, 0, 0, 0, 49, 74, 0, 0, 0, 0, 0, 0, 38, 115, 0, 0, 0, 0, 0, 0, 2, 143, 0, 0, 0, 0, 0, 0, 0, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 32, 0, 0, 0, 0, 0, 0, 189, 27, 0, 0, 0, 0, 0, 24, 174, 0, 0, 0, 0, 0, 0, 97, 108, 0, 0, 0, 0, 0, 4, 165, 43, 0, 0, 0, 0, 0, 71, 152, 0, 0, 0, 0, 0, 0, 20, 22, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79, 0, 0, 0, 0, 0, 0, 0, 78, 51, 0, 0, 0, 0, 0, 0, 48, 79, 0, 0, 0, 0, 0, 0, 41, 125, 0, 0, 0, 0, 0, 0, 0, 138, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 43, 0, 0, 0, 0, 0, 0, 154, 22, 0, 0, 0, 0, 0, 9, 159, 0, 0, 0, 0, 0, 0, 91, 87, 0, 0, 0, 0, 0, 1, 152, 20, 0, 0, 0, 0, 0, 41, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 10, 0, 0, 0, 0, 0, 0, 85, 51, 0, 0, 0, 0, 0, 0, 61, 51, 0, 0, 0, 0, 0, 0, 31, 88, 0, 0, 0, 0, 0, 0, 5, 116, 0, 0, 0, 0, 0, 0, 0, 110, 3, 0, 0, 0, 0, 0, 0, 23, 2, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 171, 35, 0, 0, 0, 0, 0, 38, 236, 47, 0, 0, 0, 0, 0, 64, 235, 47, 0, 0, 0, 0, 0, 112, 185, 17, 0, 0, 0, 0, 0, 137, 118, 0, 0, 0, 0, 0, 17, 154, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 105, 11, 0, 0, 0, 0, 0, 140, 232, 11, 0, 0, 0, 0, 18, 226, 122, 0, 0, 0, 0, 3, 149, 150, 3, 0, 0, 0, 0, 60, 234, 69, 0, 0, 0, 0, 0, 154, 168, 0, 0, 0, 0, 0, 0, 27, 26, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 78, 0, 0, 0, 0, 0, 0, 30, 172, 0, 0, 0, 0, 0, 0, 42, 181, 0, 0, 0, 0, 0, 0, 43, 166, 0, 0, 0, 0, 0, 0, 55, 141, 0, 0, 0, 0, 0, 0, 26, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 113, 22, 0, 0, 0, 0, 0, 2, 176, 34, 0, 0, 0, 0, 0, 19, 175, 5, 0, 0, 0, 0, 0, 86, 117, 0, 0, 0, 0, 0, 5, 164, 40, 0, 0, 0, 0, 0, 46, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 101, 0, 0, 0, 0, 0, 0, 168, 71, 0, 0, 0, 0, 0, 11, 210, 41, 0, 0, 0, 0, 0, 94, 135, 0, 0, 0, 0, 0, 25, 190, 42, 0, 0, 0, 0, 0, 91, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 82, 0, 0, 0, 0, 0, 0, 164, 53, 0, 0, 0, 0, 0, 24, 159, 1, 0, 0, 0, 0, 0, 117, 68, 0, 0, 0, 0, 0, 29, 177, 8, 0, 0, 0, 0, 0, 89, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 103, 0, 0, 0, 0, 0, 0, 106, 160, 0, 0, 0, 0, 0, 14, 181, 52, 0, 0, 0, 0, 6, 148, 61, 0, 0, 0, 0, 0, 68, 180, 1, 0, 0, 0, 0, 0, 75, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 0, 0, 0, 0, 0, 0, 0, 108, 0, 0, 0, 0, 0, 0, 2, 114, 0, 0, 0, 0, 0, 0, 33, 83, 0, 0, 0, 0, 0, 0, 50, 59, 0, 0, 0, 0, 0, 0, 40, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 15, 0, 0, 0, 0, 0, 65, 176, 5, 0, 0, 0, 0, 13, 168, 60, 0, 0, 0, 0, 21, 164, 38, 0, 0, 0, 0, 0, 125, 111, 0, 0, 0, 0, 0, 13, 118, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 137, 10, 0, 0, 0, 0, 0, 13, 178, 4, 0, 0, 0, 0, 0, 36, 162, 0, 0, 0, 0, 0, 0, 78, 155, 0, 0, 0, 0, 0, 0, 75, 130, 0, 0, 0, 0, 0, 0, 43, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 94, 0, 0, 0, 0, 0, 0, 6, 194, 15, 0, 0, 0, 0, 0, 43, 169, 0, 0, 0, 0, 0, 0, 99, 151, 0, 0, 0, 0, 0, 0, 105, 101, 0, 0, 0, 0, 0, 0, 13, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 73, 0, 0, 0, 0, 0, 0, 96, 165, 0, 0, 0, 1, 0, 7, 193, 74, 0, 0, 0, 3, 7, 145, 79, 0, 0, 0, 0, 0, 93, 160, 1, 0, 0, 0, 0, 0, 130, 18, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 51, 0, 0, 0, 0, 0, 0, 8, 183, 0, 0, 0, 0, 0, 0, 0, 187, 0, 0, 0, 0, 0, 0, 0, 147, 0, 0, 0, 0, 0, 0, 43, 115, 0, 0, 0, 0, 0, 0, 91, 63, 0, 0, 0, 0, 0, 0, 19, 4, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 0, 0, 0, 0, 0, 0, 2, 165, 0, 0, 0, 0, 0, 0, 7, 158, 0, 0, 0, 0, 0, 0, 60, 129, 0, 0, 0, 0, 0, 0, 85, 93, 0, 0, 0, 0, 0, 0, 56, 54, 0, 0, 0, 0, 0, 0, 2, 5, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 107, 0, 0, 0, 0, 0, 0, 118, 127, 0, 0, 0, 0, 0, 1, 169, 42, 0, 0, 0, 0, 0, 93, 93, 0, 0, 0, 0, 0, 24, 168, 14, 0, 0, 0, 0, 0, 104, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 80, 0, 0, 0, 0, 0, 46, 215, 57, 0, 0, 0, 0, 0, 100, 123, 0, 0, 0, 0, 0, 0, 120, 104, 0, 0, 0, 0, 0, 0, 153, 80, 0, 0, 0, 0, 0, 0, 134, 53, 0, 0, 0, 0, 0, 0, 20, 7, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 53, 0, 0, 0, 0, 0, 0, 146, 52, 0, 0, 0, 0, 0, 4, 138, 4, 0, 0, 0, 0, 0, 78, 59, 0, 0, 0, 0, 0, 2, 127, 3, 0, 0, 0, 0, 0, 77, 82, 0, 0, 0, 0, 0, 0, 27, 8, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 60, 0, 0, 0, 0, 0, 24, 213, 56, 0, 0, 0, 0, 0, 82, 131, 0, 0, 0, 0, 0, 0, 144, 64, 0, 0, 0, 0, 0, 1, 172, 21, 0, 0, 0, 0, 0, 0, 156, 45, 0, 0, 0, 0, 0, 0, 34, 11, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 51, 64, 0, 0, 0, 0, 0, 12, 102, 182, 1, 0, 0, 0, 0, 0, 16, 200, 13, 0, 0, 0, 0, 0, 16, 180, 1, 0, 0, 0, 0, 0, 38, 208, 21, 0, 0, 0, 0, 0, 65, 124, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 24, 0, 0, 0, 0, 0, 0, 52, 93, 0, 0, 0, 0, 0, 0, 40, 107, 0, 0, 0, 0, 0, 0, 15, 107, 0, 0, 0, 0, 0, 0, 4, 131, 0, 0, 0, 0, 0, 0, 0, 119, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 56, 0, 0, 0, 0, 0, 0, 177, 73, 0, 0, 0, 0, 0, 14, 182, 11, 0, 0, 0, 0, 0, 94, 112, 0, 0, 0, 0, 0, 1, 156, 40, 0, 0, 0, 0, 0, 4, 139, 7, 0, 0, 0, 0, 0, 0, 23, 6, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 70, 0, 0, 0, 0, 0, 0, 93, 98, 0, 0, 0, 0, 0, 2, 138, 23, 0, 0, 0, 0, 0, 101, 51, 0, 0, 0, 0, 0, 37, 133, 1, 0, 0, 0, 0, 0, 80, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 37, 0, 0, 0, 0, 0, 0, 212, 32, 0, 0, 0, 0, 0, 31, 185, 3, 0, 0, 0, 0, 0, 88, 140, 0, 0, 0, 0, 0, 0, 106, 115, 0, 0, 0, 0, 0, 0, 88, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 61, 0, 0, 0, 0, 0, 0, 98, 137, 0, 0, 0, 0, 0, 0, 183, 66, 0, 0, 0, 0, 0, 71, 121, 0, 0, 0, 0, 0, 13, 165, 25, 0, 0, 0, 0, 0, 90, 90, 0, 0, 0, 0, 0, 0, 25, 8, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 2, 113, 0, 0, 0, 0, 0, 0, 23, 89, 0, 0, 0, 0, 0, 0, 74, 23, 0, 0, 0, 0, 0, 0, 88, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 7, 0, 0, 0, 0, 6, 51, 168, 1, 0, 0, 0, 0, 15, 162, 73, 0, 0, 0, 0, 3, 135, 69, 0, 0, 0, 0, 0, 84, 153, 0, 0, 0, 0, 0, 10, 142, 8, 0, 0, 0, 0, 0, 1, 28, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 15, 0, 0, 0, 0, 0, 0, 56, 145, 0, 0, 0, 0, 0, 0, 1, 129, 0, 0, 0, 0, 0, 0, 31, 105, 0, 0, 0, 0, 0, 0, 47, 71, 0, 0, 0, 0, 0, 0, 75, 42, 0, 0, 0, 0, 0, 0, 41, 21, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 11, 0, 0, 0, 0, 0, 0, 83, 68, 0, 0, 0, 0, 0, 0, 69, 105, 0, 0, 0, 0, 0, 0, 33, 129, 0, 0, 0, 0, 0, 0, 3, 138, 0, 0, 0, 0, 0, 0, 0, 128, 2, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 3, 0, 0, 0, 0, 0, 25, 178, 5, 0, 0, 0, 0, 2, 155, 126, 0, 0, 0, 0, 7, 143, 79, 0, 0, 0, 0, 0, 105, 133, 0, 0, 0, 0, 0, 13, 137, 2, 0, 0, 0, 0, 0, 2, 28, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 5, 0, 0, 0, 0, 0, 1, 138, 0, 0, 0, 0, 0, 0, 21, 167, 0, 0, 0, 0, 0, 0, 48, 132, 0, 0, 0, 0, 0, 0, 87, 80, 0, 0, 0, 0, 0, 0, 64, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 55, 0, 0, 0, 0, 0, 0, 83, 133, 0, 0, 0, 0, 0, 2, 168, 55, 0, 0, 0, 0, 0, 110, 82, 0, 0, 0, 0, 0, 50, 160, 5, 0, 0, 0, 0, 0, 117, 23, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 57, 0, 0, 0, 0, 0, 0, 108, 115, 0, 0, 0, 0, 0, 0, 170, 44, 0, 0, 0, 0, 0, 57, 119, 0, 0, 0, 0, 0, 0, 132, 30, 0, 0, 0, 0, 0, 52, 121, 0, 0, 0, 0, 0, 0, 18, 19, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 87, 0, 0, 0, 0, 0, 0, 71, 106, 0, 0, 0, 0, 0, 0, 100, 84, 0, 0, 0, 0, 0, 0, 109, 63, 0, 0, 0, 0, 0, 0, 109, 63, 0, 0, 0, 0, 0, 0, 59, 109, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 2, 0, 0, 0, 0, 0, 121, 155, 0, 0, 0, 0, 0, 20, 197, 42, 0, 0, 0, 0, 4, 144, 67, 0, 0, 0, 0, 0, 71, 159, 0, 0, 0, 0, 0, 1, 128, 22, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 145, 102, 0, 0, 0, 0, 0, 9, 218, 64, 0, 0, 0, 0, 0, 65, 188, 12, 0, 0, 0, 0, 9, 158, 122, 0, 0, 0, 0, 0, 53, 223, 44, 0, 0, 0, 0, 0, 85, 148, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 0, 0, 0, 0, 0, 0, 10, 140, 0, 0, 0, 0, 0, 0, 59, 117, 0, 0, 0, 0, 0, 0, 70, 78, 0, 0, 0, 0, 0, 0, 84, 64, 0, 0, 0, 0, 0, 0, 130, 18, 0, 0, 0, 0, 0, 0, 36, 1, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 47, 0, 0, 0, 0, 0, 0, 135, 33, 0, 0, 0, 0, 0, 12, 117, 0, 0, 0, 0, 0, 0, 110, 25, 0, 0, 0, 0, 0, 16, 136, 0, 0, 0, 0, 0, 0, 50, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 0, 0, 0, 0, 0, 0, 0, 129, 0, 0, 0, 0, 0, 0, 0, 118, 0, 0, 0, 0, 0, 24, 46, 109, 0, 0, 2, 0, 0, 0, 78, 59, 0, 0, 24, 0, 0, 0, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 99, 0, 0, 0, 0, 0, 0, 145, 65, 0, 0, 0, 0, 0, 9, 157, 8, 0, 0, 0, 0, 0, 85, 79, 0, 0, 0, 0, 0, 0, 138, 29, 0, 0, 0, 0, 0, 0, 107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 0, 0, 0, 0, 0, 0, 15, 163, 0, 0, 0, 0, 0, 0, 18, 129, 0, 0, 0, 0, 0, 0, 58, 97, 0, 0, 0, 0, 0, 0, 65, 79, 0, 0, 0, 0, 0, 0, 58, 75, 0, 0, 0, 0, 0, 0, 8, 15, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 142, 0, 0, 0, 0, 0, 0, 216, 162, 0, 0, 0, 0, 0, 54, 222, 52, 0, 0, 0, 0, 16, 181, 137, 3, 0, 0, 0, 0, 67, 241, 62, 0, 0, 0, 0, 0, 56, 161, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 91, 104, 0, 0, 0, 0, 0, 9, 181, 26, 0, 0, 0, 0, 0, 64, 124, 0, 0, 0, 0, 0, 0, 138, 64, 0, 0, 0, 0, 0, 0, 145, 73, 0, 0, 0, 0, 0, 0, 35, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 56, 0, 0, 0, 0, 0, 0, 182, 102, 0, 0, 0, 0, 0, 45, 219, 42, 0, 0, 0, 0, 76, 197, 190, 12, 0, 0, 0, 0, 80, 74, 169, 12, 0, 0, 0, 0, 0, 0, 133, 6, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 8, 0, 0, 0, 0, 0, 0, 159, 0, 0, 0, 0, 0, 0, 27, 135, 0, 0, 0, 0, 0, 0, 107, 91, 0, 0, 0, 0, 0, 0, 151, 19, 0, 0, 0, 0, 0, 27, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 31, 0, 0, 0, 0, 0, 0, 226, 75, 0, 0, 0, 0, 0, 0, 208, 43, 0, 0, 0, 0, 0, 32, 138, 0, 0, 0, 0, 0, 0, 116, 74, 0, 0, 0, 0, 0, 53, 184, 0, 0, 0, 0, 0, 0, 18, 37, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 2, 159, 0, 0, 0, 0, 0, 0, 26, 136, 0, 0, 0, 0, 0, 0, 61, 99, 0, 0, 0, 0, 0, 0, 77, 73, 0, 0, 0, 0, 0, 0, 71, 26, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 104, 0, 0, 0, 0, 0, 0, 140, 85, 0, 0, 0, 0, 0, 0, 178, 28, 0, 0, 0, 0, 0, 136, 71, 0, 0, 0, 0, 0, 60, 161, 4, 0, 0, 0, 0, 0, 132, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 111, 0, 0, 0, 0, 0, 0, 156, 60, 0, 0, 0, 0, 0, 18, 153, 5, 0, 0, 0, 0, 0, 110, 74, 0, 0, 0, 0, 0, 15, 162, 7, 0, 0, 0, 0, 0, 100, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 133, 0, 0, 0, 0, 0, 0, 125, 146, 0, 0, 0, 0, 0, 21, 181, 32, 0, 0, 0, 0, 2, 136, 75, 0, 0, 0, 0, 0, 60, 185, 7, 0, 0, 0, 0, 0, 109, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 63, 0, 0, 0, 0, 0, 0, 189, 98, 0, 0, 0, 0, 0, 4, 181, 20, 0, 0, 0, 0, 0, 116, 89, 0, 0, 0, 0, 0, 42, 180, 10, 0, 0, 0, 0, 0, 149, 72, 0, 0, 0, 0, 0, 0, 30, 1, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 15, 0, 0, 0, 0, 0, 0, 157, 27, 0, 0, 0, 0, 0, 0, 174, 5, 0, 0, 0, 0, 0, 72, 98, 0, 0, 0, 0, 0, 1, 148, 30, 0, 0, 0, 0, 0, 20, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 71, 0, 0, 0, 0, 0, 0, 82, 108, 0, 0, 0, 0, 0, 0, 140, 125, 0, 0, 0, 0, 0, 0, 103, 139, 0, 0, 0, 0, 0, 0, 46, 157, 0, 0, 0, 0, 0, 0, 10, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 78, 0, 0, 0, 0, 0, 0, 167, 67, 0, 0, 0, 0, 0, 11, 169, 10, 0, 0, 0, 0, 0, 101, 78, 0, 0, 0, 0, 0, 4, 158, 22, 0, 0, 0, 0, 0, 10, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 76, 0, 0, 0, 0, 0, 0, 109, 57, 0, 0, 0, 0, 0, 0, 131, 5, 0, 0, 0, 0, 0, 73, 80, 0, 0, 0, 0, 0, 0, 132, 17, 0, 0, 0, 0, 0, 24, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 9, 3, 0, 0, 24, 86, 0, 0, 0, 0, 0, 0, 123, 121, 0, 0, 0, 0, 0, 0, 183, 57, 0, 0, 0, 0, 0, 65, 138, 5, 0, 0, 0, 0, 13, 139, 25, 0, 0, 0, 0, 0, 78, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 8, 0, 0, 0, 0, 0, 0, 127, 80, 0, 0, 0, 0, 0, 0, 81, 99, 0, 0, 0, 0, 0, 0, 66, 124, 0, 0, 0, 0, 0, 0, 47, 132, 0, 0, 0, 0, 0, 0, 20, 115, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 47, 0, 0, 0, 0, 0, 0, 74, 111, 0, 0, 0, 0, 0, 0, 83, 99, 0, 0, 0, 0, 0, 0, 63, 113, 0, 0, 0, 0, 0, 0, 24, 153, 0, 0, 0, 0, 0, 0, 11, 163, 7, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 112, 26, 0, 0, 0, 0, 0, 75, 244, 84, 0, 0, 0, 0, 0, 33, 199, 35, 0, 0, 0, 0, 0, 118, 96, 0, 0, 0, 0, 0, 38, 199, 12, 0, 0, 0, 0, 0, 105, 160, 0, 0, 0, 0, 0, 0, 23, 35, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 60, 0, 0, 0, 0, 0, 0, 63, 74, 0, 0, 0, 0, 0, 0, 51, 86, 0, 0, 0, 0, 0, 0, 40, 97, 0, 0, 0, 0, 0, 0, 23, 113, 0, 0, 0, 0, 0, 0, 0, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 52, 0, 0, 0, 0, 0, 0, 175, 86, 0, 0, 0, 0, 0, 13, 189, 15, 0, 0, 0, 0, 0, 128, 89, 0, 0, 0, 0, 0, 45, 196, 13, 0, 0, 0, 0, 0, 126, 108, 0, 0, 0, 0, 0, 0, 24, 25, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 69, 0, 0, 0, 0, 0, 0, 50, 133, 0, 0, 0, 0, 0, 0, 61, 147, 0, 0, 0, 0, 0, 0, 77, 118, 0, 0, 0, 0, 0, 0, 77, 150, 0, 0, 0, 0, 0, 0, 53, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 116, 0, 0, 0, 0, 0, 0, 141, 126, 0, 0, 0, 0, 0, 3, 201, 52, 0, 0, 0, 0, 5, 138, 78, 0, 0, 0, 0, 0, 92, 167, 2, 0, 0, 0, 0, 0, 129, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 28, 0, 0, 0, 0, 0, 0, 155, 27, 0, 0, 0, 0, 0, 2, 152, 3, 0, 0, 0, 0, 0, 47, 91, 0, 0, 0, 0, 0, 0, 103, 33, 0, 0, 0, 0, 0, 0, 117, 10, 0, 0, 0, 0, 0, 0, 26, 4, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 104, 0, 0, 0, 0, 0, 0, 110, 114, 0, 0, 0, 0, 0, 0, 152, 44, 0, 0, 0, 0, 0, 79, 101, 0, 0, 0, 0, 0, 30, 165, 12, 0, 0, 0, 0, 0, 101, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 85, 0, 0, 0, 0, 0, 0, 135, 149, 0, 0, 0, 0, 0, 6, 205, 53, 0, 0, 0, 0, 0, 91, 125, 0, 0, 0, 0, 0, 13, 177, 40, 0, 0, 0, 0, 0, 65, 153, 0, 0, 0, 0, 0, 0, 14, 27, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 122, 0, 0, 0, 0, 0, 0, 105, 161, 0, 0, 0, 0, 0, 9, 189, 61, 0, 0, 0, 0, 11, 151, 58, 0, 0, 0, 0, 0, 111, 216, 0, 0, 0, 0, 0, 0, 136, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 28, 140, 0, 0, 0, 0, 0, 0, 3, 121, 0, 0, 0, 0, 0, 0, 73, 44, 0, 0, 0, 0, 0, 0, 114, 0, 0, 0, 0, 0, 0, 0, 131, 36, 0, 0, 0, 0, 0, 0, 27, 4, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 43, 0, 0, 0, 0, 0, 0, 40, 121, 0, 0, 0, 0, 0, 0, 40, 115, 0, 0, 0, 0, 0, 0, 40, 130, 0, 0, 0, 0, 0, 0, 40, 115, 0, 0, 0, 0, 0, 0, 36, 97, 0, 0, 0, 0, 0, 0, 6, 16, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 112, 20, 0, 0, 0, 0, 0, 137, 154, 0, 0, 0, 0, 0, 23, 178, 25, 0, 0, 0, 0, 5, 141, 56, 0, 0, 0, 0, 0, 91, 187, 2, 0, 0, 0, 0, 0, 124, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 0, 0, 7, 118, 0, 0, 0, 0, 0, 0, 37, 101, 0, 0, 0, 0, 0, 0, 55, 77, 0, 0, 0, 0, 0, 0, 55, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 30, 0, 0, 0, 0, 0, 0, 54, 75, 0, 0, 0, 0, 0, 0, 54, 75, 0, 0, 0, 0, 0, 0, 54, 75, 0, 0, 0, 0, 0, 0, 54, 75, 0, 0, 0, 0, 0, 0, 44, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 47, 0, 0, 0, 0, 0, 0, 198, 81, 0, 0, 0, 0, 0, 4, 195, 36, 0, 0, 0, 0, 0, 103, 115, 0, 0, 0, 0, 0, 27, 195, 26, 0, 0, 0, 0, 0, 103, 120, 0, 0, 0, 0, 0, 0, 22, 18, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 112, 0, 0, 0, 0, 0, 8, 215, 164, 0, 0, 0, 0, 0, 78, 242, 73, 0, 0, 0, 0, 16, 189, 122, 0, 0, 0, 0, 0, 109, 235, 29, 0, 0, 0, 0, 0, 127, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 89, 0, 0, 0, 0, 0, 0, 23, 182, 0, 0, 0, 0, 0, 0, 27, 189, 0, 0, 0, 0, 0, 0, 35, 160, 0, 0, 0, 0, 0, 0, 71, 137, 0, 0, 0, 0, 0, 0, 53, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 94, 60, 0, 0, 0, 0, 0, 0, 182, 65, 0, 0, 0, 0, 0, 0, 175, 19, 0, 0, 0, 0, 0, 80, 105, 0, 0, 0, 0, 0, 4, 156, 31, 0, 0, 0, 0, 0, 63, 141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 29, 0, 0, 0, 0, 0, 0, 125, 15, 0, 0, 0, 0, 0, 0, 136, 0, 0, 0, 0, 0, 0, 40, 97, 0, 0, 0, 0, 0, 0, 72, 52, 0, 0, 0, 0, 0, 0, 78, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 81, 0, 0, 0, 0, 0, 0, 161, 50, 0, 0, 0, 0, 0, 10, 170, 13, 0, 0, 0, 0, 0, 110, 67, 0, 0, 0, 0, 0, 26, 172, 6, 0, 0, 0, 0, 0, 101, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 0, 0, 0, 0, 0, 0, 4, 143, 0, 0, 0, 0, 0, 0, 4, 159, 0, 0, 0, 0, 0, 0, 32, 135, 0, 0, 0, 0, 0, 0, 32, 115, 0, 0, 0, 0, 0, 0, 16, 87, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 66, 0, 0, 0, 0, 0, 0, 152, 5, 0, 0, 0, 0, 0, 24, 149, 0, 0, 0, 0, 0, 0, 105, 78, 0, 0, 0, 0, 0, 17, 170, 9, 0, 0, 0, 0, 0, 81, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 17, 98, 0, 0, 0, 0, 0, 0, 57, 60, 0, 0, 0, 0, 0, 0, 81, 40, 0, 0, 0, 0, 0, 0, 73, 46, 0, 0, 0, 0, 0, 0, 76, 23, 0, 0, 0, 0, 0, 0, 14, 8, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 61, 0, 0, 0, 0, 0, 0, 63, 88, 0, 0, 0, 0, 0, 0, 58, 113, 0, 0, 0, 0, 0, 0, 52, 149, 0, 0, 0, 0, 0, 0, 22, 166, 0, 0, 0, 0, 0, 0, 0, 134, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 75, 0, 0, 0, 0, 0, 0, 141, 113, 0, 0, 0, 0, 0, 27, 131, 0, 0, 0, 0, 0, 0, 120, 21, 0, 0, 0, 0, 0, 17, 145, 0, 0, 0, 0, 0, 0, 103, 85, 0, 0, 0, 0, 0, 0, 27, 10, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 37, 0, 0, 0, 0, 0, 23, 149, 129, 0, 0, 0, 0, 0, 89, 70, 144, 0, 0, 0, 0, 0, 0, 0, 140, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 0, 12, 113, 141, 14, 0, 0, 0, 0, 3, 33, 4, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 113, 0, 0, 0, 0, 0, 0, 72, 180, 0, 0, 0, 0, 0, 1, 186, 105, 0, 0, 0, 0, 16, 152, 134, 5, 0, 0, 0, 0, 82, 231, 20, 0, 0, 0, 0, 0, 98, 147, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 3, 0, 0, 0, 0, 0, 102, 167, 0, 0, 0, 0, 0, 25, 193, 51, 0, 0, 0, 0, 25, 181, 64, 0, 0, 0, 0, 0, 135, 157, 0, 0, 0, 0, 0, 1, 137, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 44, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 3, 71, 0, 0, 0, 0, 0, 0, 5, 51, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0 },
    { 0, 0, 0, 3, 24, 0, 0, 0, 0, 0, 0, 49, 177, 12, 0, 0, 0, 30, 186, 228, 208, 19, 0, 0, 0, 37, 215, 169, 226, 42, 0, 0, 0, 0, 52, 0, 192, 138, 0, 0, 0, 0, 27, 74, 189, 215, 106, 26, 0, 0, 34, 95, 95, 95, 95, 47, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 128, 7, 0, 0, 0, 0, 0, 100, 166, 0, 0, 0, 0, 0, 10, 199, 74, 0, 0, 0, 0, 9, 142, 101, 0, 0, 0, 0, 0, 101, 189, 7, 0, 0, 0, 0, 0, 119, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 1, 0, 0, 0, 0, 0, 3, 191, 19, 0, 0, 0, 0, 0, 17, 171, 4, 0, 0, 0, 0, 0, 64, 107, 0, 0, 0, 0, 0, 0, 90, 63, 0, 0, 0, 0, 0, 0, 75, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 98, 0, 0, 0, 0, 0, 0, 137, 101, 0, 0, 0, 0, 0, 7, 184, 24, 0, 0, 0, 0, 0, 119, 89, 0, 0, 0, 0, 0, 32, 192, 16, 0, 0, 0, 0, 0, 68, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 88, 0, 0, 0, 0, 0, 0, 78, 182, 0, 0, 0, 0, 0, 10, 190, 72, 0, 0, 0, 0, 7, 132, 88, 0, 0, 0, 0, 0, 67, 187, 6, 0, 0, 0, 0, 0, 117, 62, 0, 0, 0, 0, 0, 0, 22, 7, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 109, 0, 0, 0, 0, 0, 0, 79, 174, 0, 0, 0, 0, 0, 1, 172, 95, 0, 0, 0, 0, 4, 130, 139, 8, 0, 0, 0, 0, 85, 212, 14, 0, 0, 0, 0, 0, 142, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 32, 0, 0, 0, 0, 0, 0, 157, 36, 0, 0, 0, 0, 0, 32, 132, 0, 0, 0, 0, 0, 0, 110, 49, 0, 0, 0, 0, 0, 0, 134, 5, 0, 0, 0, 0, 0, 0, 100, 25, 0, 0, 0, 0, 0, 0, 10, 10, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 136, 13, 0, 0, 0, 0, 0, 0, 143, 95, 0, 0, 0, 0, 0, 0, 87, 163, 0, 0, 0, 0, 0, 0, 45, 181, 7, 0, 0, 0, 0, 0, 58, 163, 0, 0, 0, 0, 0, 0, 52, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 70, 109, 22, 0, 0, 0, 0, 0, 105, 198, 6, 0, 0, 0, 0, 14, 226, 105, 0, 0, 0, 0, 2, 139, 141, 2, 0, 0, 0, 0, 64, 225, 36, 0, 0, 0, 0, 0, 167, 133, 0, 0, 0, 0, 0, 0, 31, 16, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 14, 151, 174, 0, 0, 0, 0, 0, 1, 190, 89, 0, 0, 0, 0, 0, 74, 133, 1, 0, 0, 0, 0, 8, 169, 33, 0, 0, 0, 0, 0, 111, 135, 0, 0, 0, 0, 0, 0, 29, 20, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79, 16, 0, 0, 0, 0, 0, 0, 204, 35, 0, 0, 0, 0, 0, 35, 185, 5, 0, 0, 0, 0, 0, 71, 153, 0, 0, 0, 0, 0, 0, 71, 130, 0, 0, 0, 0, 0, 0, 89, 88, 0, 0, 0, 0, 0, 0, 17, 20, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 86, 0, 0, 0, 0, 3, 56, 157, 173, 0, 0, 0, 0, 0, 22, 214, 69, 0, 0, 0, 0, 0, 137, 97, 0, 0, 0, 0, 0, 31, 185, 14, 0, 0, 0, 0, 0, 102, 130, 0, 0, 0, 0, 0, 0, 22, 21, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 59, 0, 0, 0, 0, 0, 0, 119, 39, 0, 0, 0, 0, 0, 27, 97, 0, 0, 0, 0, 0, 0, 114, 12, 0, 0, 0, 0, 0, 0, 119, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 74, 0, 0, 0, 0, 0, 0, 63, 212, 23, 0, 0, 0, 0, 0, 63, 225, 36, 0, 0, 0, 0, 0, 63, 216, 27, 0, 0, 0, 0, 0, 78, 173, 0, 0, 0, 0, 0, 0, 89, 142, 0, 0, 0, 0, 0, 0, 15, 27, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 70, 0, 0, 0, 0, 0, 0, 40, 121, 0, 0, 0, 0, 0, 0, 61, 115, 0, 0, 0, 0, 0, 0, 101, 109, 0, 0, 0, 0, 0, 0, 131, 88, 0, 0, 0, 0, 0, 0, 99, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 56, 0, 0, 0, 0, 0, 74, 198, 11, 0, 0, 0, 0, 16, 207, 102, 0, 0, 0, 0, 16, 165, 97, 1, 0, 0, 0, 0, 108, 191, 5, 0, 0, 0, 0, 0, 135, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 78, 1, 0, 0, 0, 0, 0, 13, 195, 17, 0, 0, 0, 0, 0, 24, 169, 0, 0, 0, 0, 0, 0, 71, 118, 0, 0, 0, 0, 0, 0, 133, 57, 0, 0, 0, 0, 0, 11, 153, 2, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 6, 0, 0, 0, 0, 0, 5, 139, 0, 0, 0, 0, 0, 0, 23, 115, 0, 0, 0, 0, 0, 0, 79, 59, 0, 0, 0, 0, 0, 0, 90, 24, 0, 0, 0, 0, 0, 0, 61, 22, 0, 0, 0, 0, 0, 0, 4, 9, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 77, 0, 0, 0, 0, 0, 0, 130, 90, 0, 0, 0, 0, 0, 5, 157, 15, 0, 0, 0, 0, 0, 95, 66, 0, 0, 0, 0, 0, 16, 163, 6, 0, 0, 0, 0, 0, 47, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 82, 0, 0, 0, 0, 0, 0, 126, 176, 0, 0, 0, 0, 0, 0, 195, 104, 0, 0, 0, 0, 0, 103, 141, 3, 0, 0, 0, 8, 16, 194, 31, 0, 0, 0, 0, 0, 79, 164, 0, 0, 0, 0, 0, 0, 13, 31, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 43, 0, 0, 0, 0, 0, 0, 55, 108, 0, 0, 0, 0, 0, 0, 36, 94, 0, 0, 0, 0, 0, 0, 66, 73, 0, 0, 0, 0, 0, 0, 92, 45, 0, 0, 0, 0, 0, 0, 72, 61, 0, 0, 0, 0, 0, 0, 12, 11, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 120, 0, 0, 0, 0, 0, 0, 86, 173, 0, 0, 0, 0, 0, 0, 178, 116, 0, 0, 0, 0, 3, 111, 147, 3, 0, 0, 0, 0, 80, 199, 28, 0, 0, 0, 0, 0, 160, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 118, 0, 0, 0, 0, 0, 0, 164, 153, 0, 0, 0, 0, 0, 0, 164, 79, 0, 0, 0, 0, 6, 126, 106, 1, 0, 0, 0, 0, 89, 185, 7, 0, 0, 0, 0, 0, 143, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 87, 5, 0, 0, 0, 0, 0, 0, 141, 128, 0, 0, 0, 0, 0, 0, 85, 145, 0, 0, 0, 0, 0, 0, 48, 173, 2, 0, 0, 0, 0, 0, 48, 148, 0, 0, 0, 0, 0, 0, 76, 126, 0, 0, 0, 0, 0, 0, 14, 24, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 101, 0, 0, 0, 0, 0, 0, 183, 98, 0, 0, 0, 0, 0, 33, 193, 21, 0, 0, 0, 0, 0, 96, 95, 0, 0, 0, 0, 0, 26, 193, 25, 0, 0, 0, 0, 0, 82, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 58, 0, 0, 0, 0, 0, 1, 185, 28, 0, 0, 0, 0, 0, 30, 169, 5, 0, 0, 0, 0, 0, 107, 80, 0, 0, 0, 0, 0, 5, 155, 22, 0, 0, 0, 0, 0, 43, 158, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 115, 0, 0, 0, 0, 0, 0, 143, 95, 0, 0, 0, 0, 0, 17, 170, 17, 0, 0, 0, 0, 0, 124, 51, 0, 0, 0, 0, 0, 35, 209, 8, 0, 0, 0, 0, 0, 89, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 90, 0, 0, 0, 0, 0, 0, 56, 146, 0, 0, 0, 0, 0, 0, 59, 143, 0, 0, 0, 0, 0, 0, 81, 143, 0, 0, 0, 0, 0, 0, 64, 146, 0, 0, 0, 0, 0, 0, 10, 116, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 0, 0, 0, 0, 0, 0, 5, 155, 0, 0, 0, 0, 0, 0, 42, 113, 0, 0, 0, 0, 0, 0, 88, 81, 0, 0, 0, 0, 0, 0, 149, 30, 0, 0, 0, 0, 0, 0, 134, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 115, 4, 0, 0, 0, 0, 0, 147, 115, 0, 0, 0, 0, 0, 27, 179, 15, 0, 0, 0, 0, 4, 155, 51, 0, 0, 0, 0, 0, 75, 203, 0, 0, 0, 0, 0, 0, 115, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 41, 0, 0, 0, 0, 0, 96, 153, 1, 0, 0, 0, 0, 13, 171, 32, 0, 0, 0, 0, 4, 145, 49, 0, 0, 0, 0, 0, 83, 231, 5, 0, 0, 0, 0, 0, 122, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 103, 13, 0, 0, 0, 0, 0, 102, 140, 0, 0, 0, 0, 0, 17, 167, 30, 0, 0, 0, 0, 8, 145, 25, 0, 0, 0, 0, 0, 103, 194, 1, 0, 0, 0, 0, 0, 128, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 104, 0, 0, 0, 0, 0, 1, 168, 93, 0, 0, 0, 0, 0, 66, 187, 18, 0, 0, 0, 0, 4, 163, 38, 0, 0, 0, 0, 0, 54, 176, 0, 0, 0, 0, 0, 0, 110, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 89, 0, 0, 0, 0, 0, 0, 110, 112, 0, 0, 0, 0, 0, 8, 165, 26, 0, 0, 0, 0, 4, 126, 61, 0, 0, 0, 0, 0, 72, 173, 1, 0, 0, 0, 0, 0, 125, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0, 0, 0, 0, 8, 110, 0, 0, 0, 0, 0, 0, 60, 54, 0, 0, 0, 0, 0, 0, 103, 3, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 115, 0, 0, 0, 0, 0, 0, 125, 109, 0, 0, 0, 0, 0, 0, 174, 33, 0, 0, 0, 0, 0, 96, 85, 0, 0, 0, 0, 0, 54, 162, 7, 0, 0, 0, 0, 0, 121, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 111, 0, 0, 0, 0, 0, 0, 103, 110, 0, 0, 0, 0, 0, 0, 156, 50, 0, 0, 0, 0, 0, 66, 104, 0, 0, 0, 0, 0, 26, 170, 14, 0, 0, 0, 0, 0, 99, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 64, 0, 0, 0, 0, 0, 0, 179, 81, 0, 0, 0, 0, 0, 43, 176, 20, 0, 0, 0, 0, 3, 156, 48, 0, 0, 0, 0, 0, 36, 197, 4, 0, 0, 0, 0, 0, 40, 175, 0, 0, 0, 0, 0, 0, 5, 41, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 11, 0, 0, 0, 0, 0, 101, 121, 0, 0, 0, 0, 0, 15, 145, 17, 0, 0, 0, 0, 7, 130, 25, 0, 0, 0, 0, 0, 93, 114, 0, 0, 0, 0, 0, 0, 124, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 5, 0, 0, 0, 0, 0, 52, 148, 0, 0, 0, 0, 0, 0, 156, 68, 0, 0, 0, 0, 0, 82, 92, 0, 0, 0, 0, 0, 40, 167, 9, 0, 0, 0, 0, 0, 97, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 23, 0, 0, 0, 0, 0, 51, 147, 0, 0, 0, 0, 0, 0, 152, 79, 0, 0, 0, 0, 0, 73, 118, 0, 0, 0, 0, 0, 48, 165, 17, 0, 0, 0, 0, 0, 112, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 81, 0, 0, 0, 0, 0, 0, 121, 126, 0, 0, 0, 0, 0, 5, 207, 57, 0, 0, 0, 0, 0, 58, 123, 0, 0, 0, 0, 0, 4, 150, 31, 0, 0, 0, 0, 0, 88, 132, 0, 0, 0, 0, 0, 0, 25, 18, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 69, 0, 0, 0, 0, 0, 0, 117, 126, 0, 0, 0, 0, 0, 0, 89, 137, 0, 0, 0, 0, 0, 0, 64, 178, 2, 0, 0, 0, 0, 0, 43, 206, 19, 0, 0, 0, 0, 0, 8, 152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 107, 21, 0, 0, 0, 0, 0, 28, 239, 51, 0, 0, 0, 0, 0, 65, 218, 27, 0, 0, 0, 0, 0, 114, 168, 1, 0, 0, 0, 0, 0, 134, 144, 0, 0, 0, 0, 0, 0, 113, 101, 0, 0, 0, 0, 0, 0, 13, 14, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 79, 0, 0, 0, 0, 0, 0, 5, 82, 0, 0, 0, 0, 0, 0, 25, 57, 0, 0, 0, 0, 0, 0, 48, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 93, 0, 0, 0, 0, 0, 0, 117, 169, 0, 0, 0, 0, 0, 0, 99, 183, 0, 0, 0, 0, 0, 0, 87, 185, 1, 0, 0, 0, 0, 0, 97, 197, 11, 0, 0, 0, 0, 0, 58, 137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122, 74, 0, 0, 0, 0, 0, 0, 225, 75, 0, 0, 0, 0, 0, 15, 212, 26, 0, 0, 0, 0, 0, 102, 161, 0, 0, 0, 0, 0, 10, 191, 100, 0, 0, 0, 0, 0, 15, 141, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 89, 0, 0, 0, 0, 0, 0, 33, 191, 6, 0, 0, 0, 0, 0, 33, 198, 7, 0, 0, 0, 0, 0, 33, 162, 0, 0, 0, 0, 0, 0, 39, 147, 0, 0, 0, 0, 0, 0, 47, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 62, 54, 0, 0, 0, 0, 59, 201, 116, 161, 0, 0, 0, 0, 36, 75, 58, 167, 0, 0, 0, 0, 106, 131, 218, 173, 22, 3, 0, 61, 173, 131, 95, 65, 112, 19, 0, 35, 76, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 82, 100, 14, 0, 0, 0, 0, 82, 39, 94, 122, 0, 0, 0, 0, 1, 0, 58, 151, 0, 0, 0, 0, 61, 101, 165, 179, 98, 37, 0, 43, 135, 93, 181, 46, 0, 0, 0, 13, 99, 89, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 119, 168, 112, 10, 0, 0, 0, 108, 84, 90, 229, 71, 0, 0, 0, 0, 32, 195, 193, 8, 0, 0, 0, 113, 180, 60, 7, 0, 0, 0, 29, 231, 112, 103, 152, 118, 3, 0, 0, 119, 175, 127, 69, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 126, 112, 58, 28, 0, 0, 0, 119, 151, 182, 234, 238, 54, 0, 0, 0, 0, 6, 48, 192, 87, 0, 0, 0, 0, 21, 162, 175, 6, 0, 0, 0, 22, 178, 148, 23, 0, 0, 0, 0, 41, 183, 227, 200, 86, 0, 0, 0, 0, 9, 48, 41, 11, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 64, 118, 124, 23, 0, 0, 0, 62, 98, 34, 167, 105, 0, 0, 0, 0, 0, 31, 190, 34, 0, 0, 0, 0, 29, 156, 25, 0, 0, 0, 0, 0, 96, 158, 14, 4, 29, 7, 0, 0, 15, 107, 139, 124, 72, 14, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 28, 13, 0, 0, 0, 0, 0, 75, 211, 184, 47, 0, 0, 0, 0, 65, 102, 53, 175, 0, 0, 0, 0, 0, 0, 0, 140, 12, 0, 0, 0, 140, 202, 201, 215, 32, 0, 0, 15, 238, 162, 189, 227, 77, 0, 0, 4, 113, 126, 125, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 33, 1, 0, 0, 0, 0, 0, 97, 144, 89, 0, 0, 0, 0, 0, 31, 135, 63, 0, 0, 0, 0, 0, 171, 100, 97, 124, 138, 87, 0, 0, 71, 152, 139, 82, 34, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 70, 75, 72, 3, 0, 0, 39, 180, 128, 177, 240, 22, 0, 0, 8, 17, 69, 204, 120, 0, 0, 0, 24, 185, 155, 24, 17, 71, 14, 0, 102, 213, 146, 180, 197, 157, 24, 0, 0, 49, 69, 28, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 46, 83, 34, 4, 0, 0, 0, 178, 210, 190, 222, 161, 0, 0, 0, 51, 21, 7, 48, 193, 2, 0, 0, 0, 0, 18, 110, 214, 64, 0, 0, 0, 6, 153, 253, 229, 147, 0, 0, 0, 65, 237, 151, 20, 0, 0, 0, 0, 9, 49, 1, 0, 0, 0 },
    { 0, 0, 0, 77, 51, 0, 0, 0, 0, 0, 0, 57, 134, 54, 0, 0, 0, 0, 0, 0, 81, 135, 0, 0, 0, 0, 0, 0, 144, 100, 0, 0, 0, 0, 12, 117, 145, 7, 0, 0, 0, 27, 186, 242, 127, 132, 14, 0, 0, 7, 28, 2, 57, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 53, 156, 163, 154, 135, 0, 0, 0, 55, 75, 34, 167, 102, 0, 0, 0, 0, 38, 152, 37, 41, 86, 19, 0, 0, 145, 198, 117, 137, 80, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 26, 54, 25, 0, 0, 0, 39, 143, 136, 103, 188, 49, 0, 0, 14, 19, 0, 100, 176, 15, 0, 0, 0, 62, 160, 91, 31, 63, 36, 0, 16, 226, 209, 135, 138, 113, 42, 0, 0, 9, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 138, 129, 53, 0, 0, 0, 61, 169, 113, 218, 68, 0, 0, 0, 5, 41, 169, 102, 0, 0, 0, 0, 108, 146, 13, 0, 0, 0, 0, 53, 193, 88, 70, 89, 124, 22, 0, 65, 152, 138, 111, 74, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 31, 54, 26, 0, 0, 0, 0, 111, 150, 142, 227, 6, 0, 0, 0, 1, 7, 145, 206, 4, 0, 0, 4, 117, 187, 86, 17, 60, 39, 0, 40, 233, 174, 164, 181, 152, 46, 0, 0, 47, 67, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 19, 15, 0, 0, 0, 0, 0, 63, 131, 75, 0, 0, 0, 0, 51, 27, 43, 71, 0, 0, 0, 19, 0, 0, 91, 51, 0, 0, 91, 135, 83, 35, 119, 0, 0, 0, 103, 19, 12, 135, 71, 0, 0, 0, 15, 111, 91, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 7, 23, 0, 0, 0, 0, 0, 0, 42, 123, 0, 0, 0, 0, 0, 0, 0, 183, 37, 0, 0, 0, 0, 0, 0, 153, 45, 0, 0, 0, 0, 0, 8, 140, 2, 0, 0, 0, 0, 9, 123, 87, 8, 0, 0, 0, 0, 17, 112, 105, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 20, 12, 0, 0, 0, 0, 77, 167, 210, 166, 4, 0, 0, 0, 4, 21, 187, 179, 1, 0, 0, 0, 25, 142, 184, 51, 0, 0, 0, 32, 232, 125, 0, 0, 36, 15, 0, 97, 248, 179, 180, 176, 152, 30, 0, 6, 67, 75, 39, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 7, 0, 0, 0, 0, 31, 160, 210, 240, 141, 0, 0, 0, 19, 52, 110, 221, 78, 0, 0, 0, 5, 157, 129, 27, 56, 102, 55, 0, 48, 219, 185, 175, 179, 125, 40, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 14, 99, 27, 0, 0, 0, 0, 0, 93, 215, 42, 0, 0, 0, 0, 0, 68, 180, 22, 0, 0, 0, 0, 0, 3, 131, 2, 12, 0, 0, 44, 125, 149, 53, 14, 97, 0, 0, 83, 180, 210, 121, 155, 55, 0, 0, 0, 0, 10, 61, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122, 163, 155, 172, 3, 0, 0, 0, 27, 18, 77, 184, 1, 0, 0, 2, 87, 146, 133, 83, 85, 20, 0, 74, 228, 148, 149, 134, 67, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 3, 57, 21, 0, 0, 0, 0, 11, 122, 221, 161, 0, 0, 0, 0, 19, 67, 72, 200, 0, 0, 0, 0, 3, 0, 130, 156, 0, 0, 0, 61, 173, 194, 242, 110, 0, 0, 0, 111, 194, 212, 165, 213, 70, 0, 0, 7, 45, 13, 0, 27, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 159, 156, 139, 117, 23, 0, 0, 7, 4, 0, 9, 76, 130, 0, 0, 0, 0, 0, 32, 155, 52, 0, 0, 0, 17, 100, 156, 51, 0, 0, 0, 35, 195, 174, 32, 14, 9, 3, 0, 47, 108, 127, 176, 189, 135, 30, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 29, 46, 0, 0, 0, 0, 0, 53, 164, 202, 12, 0, 0, 0, 0, 14, 9, 176, 16, 0, 0, 0, 0, 0, 92, 190, 1, 0, 0, 38, 150, 182, 239, 84, 0, 0, 0, 126, 140, 189, 148, 98, 0, 0, 0, 59, 95, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 114, 149, 62, 0, 0, 0, 0, 12, 73, 40, 226, 47, 0, 0, 0, 0, 0, 7, 215, 40, 0, 0, 0, 0, 10, 156, 76, 1, 7, 4, 0, 0, 104, 244, 162, 163, 121, 41, 0, 0, 21, 53, 38, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 6, 24, 13, 0, 0, 0, 0, 50, 146, 159, 165, 27, 0, 0, 0, 20, 22, 0, 85, 122, 0, 0, 0, 7, 20, 5, 140, 93, 0, 3, 108, 138, 154, 208, 189, 5, 0, 45, 212, 123, 174, 223, 136, 0, 0, 5, 55, 75, 24, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 14, 48, 1, 0, 0, 0, 0, 0, 7, 145, 68, 0, 0, 0, 0, 1, 51, 180, 46, 0, 0, 0, 0, 71, 165, 40, 0, 0, 0, 0, 20, 98, 5, 3, 0, 0, 0, 0, 26, 125, 120, 119, 128, 51, 0, 0, 0, 23, 30, 1, 8, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 131, 146, 144, 17, 0, 0, 0, 86, 67, 9, 147, 48, 0, 0, 0, 0, 0, 65, 201, 141, 101, 14, 0, 0, 18, 164, 133, 23, 37, 5, 0, 0, 4, 64, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 4, 63, 30, 0, 0, 0, 0, 44, 133, 212, 192, 1, 0, 0, 0, 19, 17, 10, 200, 26, 0, 0, 0, 0, 0, 38, 215, 17, 0, 4, 84, 134, 152, 215, 153, 0, 0, 21, 165, 56, 149, 210, 183, 0, 0, 7, 99, 123, 72, 10, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 163, 168, 139, 22, 0, 0, 0, 9, 27, 5, 78, 67, 0, 0, 0, 0, 0, 18, 156, 50, 0, 0, 7, 151, 228, 241, 132, 0, 0, 0, 86, 251, 213, 130, 192, 32, 0, 0, 26, 25, 3, 0, 41, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 32, 60, 5, 0, 0, 0, 0, 115, 140, 175, 83, 0, 0, 0, 0, 11, 0, 91, 95, 0, 0, 0, 0, 0, 26, 188, 28, 0, 0, 37, 176, 160, 225, 103, 0, 0, 0, 127, 126, 170, 213, 116, 0, 0, 0, 52, 113, 46, 9, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 99, 52, 0, 0, 0, 0, 90, 125, 155, 72, 0, 0, 0, 0, 33, 20, 122, 6, 0, 0, 0, 0, 9, 135, 96, 110, 19, 0, 0, 0, 91, 189, 94, 70, 114, 6, 0, 20, 115, 7, 0, 0, 23, 15, 0, 9, 13, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 159, 153, 50, 0, 0, 0, 0, 46, 6, 98, 122, 0, 0, 0, 0, 0, 31, 191, 48, 0, 0, 12, 161, 189, 238, 118, 0, 0, 0, 112, 247, 228, 217, 112, 0, 0, 0, 43, 76, 16, 113, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 14, 42, 1, 0, 0, 0, 1, 97, 137, 201, 45, 0, 0, 0, 1, 47, 6, 135, 50, 0, 0, 0, 0, 0, 50, 191, 6, 0, 0, 40, 142, 157, 239, 131, 0, 0, 14, 174, 173, 200, 149, 175, 1, 0, 5, 63, 68, 14, 14, 105, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 29, 37, 0, 0, 0, 0, 0, 89, 148, 194, 27, 0, 0, 0, 0, 0, 0, 91, 75, 0, 0, 0, 0, 0, 0, 143, 39, 0, 0, 68, 171, 141, 185, 163, 0, 0, 5, 172, 89, 149, 227, 155, 1, 0, 2, 64, 119, 53, 5, 64, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 45, 52, 0, 0, 0, 0, 0, 30, 208, 207, 87, 1, 0, 0, 0, 11, 10, 5, 221, 43, 0, 0, 0, 0, 0, 36, 178, 11, 0, 0, 0, 0, 31, 182, 56, 0, 0, 0, 0, 0, 114, 231, 70, 59, 59, 29, 0, 0, 21, 82, 119, 123, 82, 22, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 96, 180, 122, 0, 0, 0, 0, 68, 65, 15, 166, 6, 0, 0, 0, 0, 0, 55, 197, 1, 0, 0, 8, 91, 104, 202, 67, 0, 0, 0, 117, 251, 236, 209, 53, 0, 0, 0, 31, 59, 8, 92, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 23, 40, 0, 0, 0, 0, 0, 41, 193, 213, 48, 0, 0, 0, 0, 70, 42, 95, 90, 0, 0, 0, 4, 7, 30, 189, 35, 0, 0, 56, 162, 162, 230, 120, 0, 0, 11, 175, 154, 190, 189, 136, 2, 0, 0, 38, 58, 13, 30, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 10, 50, 28, 0, 0, 0, 0, 0, 128, 173, 176, 23, 0, 0, 0, 0, 0, 0, 120, 109, 0, 0, 0, 0, 0, 0, 117, 71, 0, 0, 0, 21, 174, 145, 160, 31, 0, 0, 0, 58, 158, 171, 202, 78, 79, 3, 0, 0, 60, 81, 39, 83, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 26, 15, 0, 0, 0, 0, 0, 14, 203, 167, 3, 0, 0, 0, 0, 132, 108, 165, 11, 0, 0, 0, 0, 27, 63, 179, 0, 0, 0, 23, 128, 157, 227, 95, 0, 0, 0, 120, 138, 195, 197, 139, 0, 0, 0, 68, 119, 42, 10, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 2, 47, 6, 0, 0, 0, 0, 47, 154, 212, 82, 0, 0, 0, 0, 70, 61, 158, 79, 0, 0, 0, 0, 28, 117, 204, 12, 0, 2, 75, 214, 246, 241, 67, 0, 0, 40, 222, 232, 207, 204, 153, 6, 0, 13, 104, 75, 5, 31, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 103, 131, 66, 0, 0, 0, 0, 46, 177, 86, 141, 0, 0, 0, 0, 9, 104, 163, 79, 0, 0, 0, 0, 0, 100, 81, 71, 0, 0, 0, 0, 50, 205, 117, 220, 8, 0, 0, 0, 117, 114, 33, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 25, 3, 0, 0, 0, 0, 0, 23, 177, 18, 0, 0, 0, 0, 3, 184, 191, 52, 0, 0, 0, 42, 86, 135, 174, 6, 0, 0, 93, 102, 32, 223, 173, 0, 0, 0, 149, 66, 150, 116, 185, 0, 0, 0, 62, 104, 36, 2, 60, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 2, 51, 43, 0, 0, 0, 0, 0, 63, 160, 192, 63, 0, 0, 0, 0, 0, 0, 16, 200, 53, 0, 0, 0, 0, 33, 31, 138, 92, 0, 0, 0, 0, 143, 174, 102, 113, 0, 0, 0, 0, 78, 243, 218, 120, 71, 19, 0, 0, 0, 56, 81, 91, 58, 2, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 42, 49, 9, 0, 0, 0, 0, 0, 106, 149, 164, 44, 0, 0, 0, 0, 0, 0, 163, 76, 0, 0, 0, 0, 0, 12, 177, 25, 0, 0, 0, 0, 12, 156, 68, 43, 63, 36, 0, 6, 150, 230, 166, 166, 103, 33, 0, 14, 111, 81, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 11, 38, 30, 0, 0, 0, 0, 14, 96, 107, 111, 67, 0, 0, 0, 0, 0, 0, 0, 106, 0, 0, 0, 0, 0, 0, 0, 108, 0, 0, 0, 0, 76, 109, 115, 88, 0, 0, 0, 0, 109, 24, 185, 119, 1, 0, 0, 0, 83, 81, 8, 39, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 94, 73, 0, 0, 0, 0, 0, 7, 45, 128, 48, 0, 0, 0, 0, 0, 0, 28, 111, 0, 0, 0, 0, 0, 0, 0, 115, 0, 0, 0, 0, 0, 0, 57, 128, 1, 0, 0, 0, 0, 0, 1, 103, 158, 19, 0, 0, 0, 0, 0, 0, 35, 10, 0 },
    { 0, 0, 0, 0, 24, 15, 0, 0, 0, 0, 0, 13, 159, 181, 0, 0, 0, 0, 0, 0, 30, 214, 0, 0, 0, 0, 0, 0, 143, 234, 7, 0, 0, 2, 88, 175, 233, 178, 24, 0, 50, 164, 226, 166, 54, 5, 0, 0, 26, 61, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 144, 168, 29, 0, 0, 0, 0, 2, 9, 102, 66, 0, 0, 0, 0, 0, 28, 152, 23, 0, 0, 0, 85, 165, 229, 156, 0, 0, 0, 42, 150, 121, 116, 41, 0, 0, 0, 80, 145, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 97, 63, 0, 0, 0, 0, 0, 73, 13, 77, 0, 0, 0, 0, 0, 0, 0, 99, 0, 0, 0, 0, 0, 0, 49, 56, 0, 0, 0, 0, 0, 2, 131, 135, 95, 3, 0, 0, 0, 61, 89, 2, 23, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 118, 114, 74, 0, 0, 0, 0, 22, 18, 51, 94, 0, 0, 0, 25, 110, 107, 173, 106, 40, 23, 0, 45, 112, 103, 48, 59, 91, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 128, 150, 73, 0, 0, 0, 0, 4, 22, 20, 149, 52, 0, 0, 0, 0, 0, 26, 126, 64, 0, 0, 5, 109, 158, 207, 192, 65, 0, 0, 93, 118, 118, 136, 27, 0, 0, 0, 86, 126, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 63, 41, 0, 0, 0, 0, 0, 31, 82, 124, 100, 0, 0, 0, 0, 0, 14, 96, 79, 0, 0, 5, 77, 140, 211, 148, 30, 0, 10, 128, 203, 155, 50, 0, 0, 0, 14, 77, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 90, 97, 86, 14, 0, 0, 0, 14, 97, 88, 106, 166, 0, 0, 0, 0, 0, 0, 55, 152, 0, 0, 25, 140, 206, 212, 212, 27, 0, 0, 153, 217, 203, 124, 156, 13, 0, 0, 38, 37, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 84, 84, 35, 2, 0, 0, 0, 42, 51, 55, 99, 128, 0, 0, 0, 0, 0, 0, 34, 152, 0, 0, 0, 0, 0, 8, 122, 57, 19, 8, 0, 4, 93, 163, 175, 91, 50, 8, 0, 1, 70, 52, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 148, 158, 56, 0, 0, 0, 0, 56, 142, 41, 191, 3, 0, 0, 0, 0, 2, 0, 161, 21, 0, 0, 7, 127, 137, 169, 241, 31, 0, 0, 103, 103, 46, 188, 138, 76, 0, 0, 68, 185, 168, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 131, 147, 32, 0, 0, 0, 0, 5, 0, 33, 124, 0, 0, 0, 10, 28, 0, 50, 88, 0, 0, 0, 95, 134, 184, 201, 20, 0, 0, 100, 103, 64, 126, 32, 0, 0, 0, 76, 160, 123, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 137, 177, 29, 0, 0, 0, 0, 11, 43, 120, 76, 0, 0, 0, 0, 6, 45, 157, 29, 0, 0, 0, 113, 160, 212, 183, 0, 0, 0, 28, 145, 128, 98, 27, 0, 0, 0, 54, 150, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 115, 99, 5, 0, 0, 0, 0, 0, 2, 104, 27, 0, 0, 0, 0, 0, 23, 173, 11, 0, 2, 1, 0, 0, 1, 70, 102, 117, 92, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 135, 157, 92, 0, 0, 0, 0, 35, 5, 1, 147, 0, 0, 0, 0, 6, 64, 80, 92, 0, 0, 0, 69, 149, 178, 162, 2, 0, 0, 83, 166, 156, 74, 14, 0, 0, 0, 107, 134, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 110, 96, 108, 57, 0, 0, 0, 1, 0, 0, 13, 162, 0, 0, 0, 0, 0, 0, 33, 185, 37, 0, 0, 0, 11, 95, 227, 132, 9, 0, 0, 0, 131, 175, 189, 21, 0, 0, 0, 0, 148, 137, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 36, 25, 0, 0, 0, 0, 154, 206, 188, 231, 162, 0, 0, 0, 58, 22, 0, 104, 245, 7, 0, 0, 0, 92, 143, 174, 252, 63, 0, 0, 7, 242, 251, 241, 195, 130, 0, 0, 1, 79, 108, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 45, 18, 0, 0, 0, 0, 0, 0, 27, 98, 3, 0, 0, 0, 0, 0, 0, 69, 76, 0, 0, 0, 0, 0, 0, 29, 112, 0, 0, 0, 0, 119, 94, 66, 108, 0, 0, 0, 0, 95, 84, 130, 78, 0, 0, 0, 0, 0, 38, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 99, 85, 14, 0, 0, 0, 0, 7, 31, 91, 140, 0, 0, 0, 0, 0, 7, 161, 56, 0, 0, 0, 0, 0, 103, 70, 0, 0, 0, 0, 0, 0, 156, 9, 0, 0, 0, 0, 0, 0, 99, 106, 10, 0, 0, 0, 0, 0, 5, 44, 6, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 122, 185, 45, 0, 0, 0, 119, 180, 72, 102, 107, 0, 0, 0, 96, 32, 0, 122, 69, 0, 0, 10, 68, 91, 133, 227, 27, 0, 20, 145, 171, 232, 177, 88, 5, 0, 29, 142, 138, 74, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 100, 2, 0, 0, 0, 0, 0, 15, 101, 76, 0, 0, 0, 0, 0, 1, 101, 58, 0, 0, 0, 58, 135, 213, 149, 60, 0, 0, 57, 203, 185, 60, 3, 0, 0, 0, 77, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 80, 167, 164, 1, 0, 0, 0, 13, 58, 52, 217, 11, 0, 0, 0, 0, 0, 78, 205, 0, 0, 0, 2, 76, 134, 212, 159, 0, 0, 0, 71, 190, 208, 165, 192, 0, 0, 0, 126, 124, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 127, 116, 35, 0, 0, 0, 0, 0, 0, 122, 108, 0, 0, 0, 0, 0, 2, 163, 32, 0, 0, 0, 0, 1, 119, 49, 0, 0, 0, 0, 0, 55, 144, 52, 21, 0, 0, 0, 0, 66, 151, 99, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 141, 135, 141, 38, 0, 0, 0, 15, 2, 5, 169, 54, 0, 0, 0, 0, 0, 134, 62, 0, 0, 0, 0, 0, 0, 149, 61, 67, 89, 16, 0, 0, 0, 16, 84, 88, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 45, 106, 118, 16, 0, 0, 0, 51, 127, 46, 106, 85, 0, 0, 0, 4, 4, 28, 168, 33, 0, 0, 0, 15, 118, 223, 136, 0, 0, 0, 18, 174, 211, 74, 46, 0, 0, 11, 171, 109, 14, 0, 0, 0, 0, 4, 42, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 185, 164, 164, 35, 0, 0, 0, 91, 72, 29, 150, 119, 0, 0, 0, 0, 0, 31, 188, 83, 33, 13, 0, 0, 82, 204, 231, 164, 134, 33, 0, 0, 11, 39, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 2, 7, 0, 0, 0, 0, 0, 2, 144, 182, 16, 0, 0, 0, 0, 0, 6, 181, 32, 0, 0, 0, 0, 1, 71, 195, 0, 0, 0, 34, 128, 201, 232, 196, 41, 0, 29, 195, 205, 201, 66, 88, 16, 0, 4, 39, 35, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 84, 93, 3, 0, 0, 0, 0, 0, 0, 97, 0, 0, 0, 0, 0, 0, 14, 90, 0, 0, 0, 0, 0, 0, 90, 20, 0, 0, 0, 0, 0, 0, 139, 121, 96, 18, 0, 0, 0, 8, 99, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 31, 43, 0, 0, 0, 0, 0, 59, 195, 199, 79, 0, 0, 0, 0, 23, 15, 55, 191, 0, 0, 0, 0, 0, 0, 35, 195, 0, 0, 0, 0, 75, 127, 179, 143, 0, 0, 0, 0, 243, 255, 243, 75, 0, 0, 0, 0, 91, 75, 39, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 67, 42, 0, 0, 0, 0, 100, 103, 73, 166, 50, 0, 0, 0, 1, 0, 0, 167, 50, 0, 0, 0, 0, 0, 49, 127, 0, 26, 0, 0, 0, 0, 136, 131, 129, 82, 0, 0, 0, 0, 66, 66, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 85, 59, 0, 0, 0, 0, 0, 17, 136, 208, 0, 0, 0, 0, 1, 40, 159, 187, 0, 0, 0, 25, 180, 239, 140, 178, 103, 12, 0, 96, 215, 132, 5, 32, 65, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 103, 72, 0, 0, 0, 0, 0, 5, 11, 149, 0, 0, 0, 0, 0, 0, 108, 114, 0, 0, 0, 0, 3, 93, 63, 0, 0, 0, 0, 0, 98, 143, 40, 9, 0, 0, 0, 0, 152, 110, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 149, 183, 53, 0, 0, 0, 0, 45, 58, 194, 87, 0, 0, 0, 0, 0, 87, 222, 36, 0, 0, 19, 129, 204, 240, 210, 18, 0, 27, 178, 222, 235, 82, 135, 79, 0, 30, 147, 105, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 23, 5, 0, 0, 0, 0, 0, 21, 182, 46, 0, 0, 0, 0, 0, 25, 174, 77, 0, 0, 0, 0, 0, 1, 158, 31, 0, 0, 0, 5, 112, 165, 74, 0, 3, 0, 0, 37, 200, 190, 106, 64, 35, 0, 0, 0, 0, 0, 87, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 28, 12, 0, 0, 0, 0, 0, 34, 173, 165, 0, 0, 0, 0, 0, 54, 29, 195, 0, 0, 0, 0, 19, 68, 110, 191, 0, 0, 0, 0, 182, 150, 234, 161, 0, 0, 0, 12, 219, 166, 219, 144, 3, 0, 0, 1, 94, 118, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 21, 28, 10, 0, 0, 0, 0, 0, 145, 182, 175, 87, 0, 0, 0, 0, 7, 0, 108, 156, 0, 0, 0, 0, 0, 8, 187, 70, 0, 0, 0, 0, 16, 150, 70, 0, 0, 0, 0, 34, 186, 208, 97, 113, 118, 22, 0, 39, 83, 86, 71, 50, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 26, 17, 0, 0, 0, 0, 10, 115, 142, 161, 11, 0, 0, 0, 22, 39, 0, 84, 82, 0, 0, 0, 0, 0, 0, 93, 73, 0, 0, 28, 137, 139, 117, 194, 9, 0, 0, 105, 145, 181, 249, 154, 0, 0, 0, 16, 120, 100, 14, 60, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 126, 0, 0, 0, 0, 0, 0, 50, 177, 0, 0, 0, 0, 3, 28, 184, 96, 0, 0, 0, 84, 234, 242, 184, 149, 87, 0, 0, 122, 168, 81, 17, 54, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 106, 56, 0, 0, 0, 0, 0, 2, 114, 137, 0, 0, 0, 0, 0, 4, 170, 52, 0, 0, 0, 37, 154, 228, 172, 132, 80, 21, 0, 95, 159, 93, 15, 68, 76, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 49, 22, 0, 0, 0, 0, 34, 174, 176, 214, 0, 0, 0, 0, 11, 33, 151, 164, 0, 0, 0, 13, 117, 192, 187, 191, 80, 0, 0, 133, 217, 128, 12, 35, 67, 0, 0, 19, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 9, 43, 7, 0, 0, 0, 0, 6, 189, 231, 183, 93, 0, 0, 0, 0, 21, 10, 87, 241, 0, 0, 0, 0, 0, 3, 168, 178, 0, 0, 0, 0, 54, 179, 108, 15, 0, 0, 0, 36, 225, 244, 141, 135, 152, 54, 0, 7, 94, 85, 72, 72, 17, 1, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 102, 144, 124, 27, 0, 0, 0, 48, 81, 40, 123, 138, 0, 0, 0, 0, 0, 28, 174, 59, 0, 0, 0, 0, 47, 172, 26, 1, 21, 1, 0, 0, 143, 124, 89, 146, 131, 17, 0, 0, 93, 153, 85, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 142, 141, 9, 0, 0, 0, 2, 154, 11, 90, 61, 0, 0, 0, 0, 38, 0, 96, 46, 0, 0, 31, 142, 137, 61, 137, 0, 0, 0, 72, 63, 34, 210, 84, 0, 0, 0, 0, 132, 136, 100, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 7, 0, 0, 0, 0, 62, 175, 158, 157, 0, 0, 0, 2, 160, 56, 45, 165, 0, 0, 0, 1, 73, 2, 112, 100, 0, 0, 0, 0, 0, 97, 188, 31, 0, 0, 0, 0, 0, 53, 126, 120, 0, 0, 0, 0, 0, 0, 17, 89, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 134, 80, 1, 0, 0, 0, 99, 86, 37, 183, 21, 0, 0, 0, 7, 0, 0, 167, 65, 0, 0, 0, 0, 6, 77, 210, 121, 0, 0, 0, 0, 97, 240, 212, 201, 68, 0, 0, 0, 42, 109, 27, 7, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 159, 86, 0, 0, 0, 0, 2, 20, 153, 47, 0, 0, 0, 62, 229, 211, 159, 59, 46, 12, 0, 60, 98, 27, 68, 116, 85, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 126, 126, 78, 18, 0, 0, 0, 23, 31, 49, 117, 196, 7, 0, 0, 0, 0, 0, 2, 117, 31, 0, 0, 0, 0, 0, 36, 118, 2, 0, 0, 0, 4, 59, 128, 43, 0, 0, 0, 0, 163, 180, 118, 92, 52, 0, 0, 0, 19, 23, 22, 8, 0, 0 },
    { 0, 0, 0, 23, 54, 9, 0, 0, 0, 0, 60, 179, 191, 131, 0, 0, 0, 0, 34, 20, 2, 158, 27, 0, 0, 0, 0, 0, 0, 159, 29, 0, 0, 76, 191, 183, 163, 199, 12, 0, 0, 164, 79, 72, 233, 167, 65, 0, 0, 76, 67, 90, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 86, 126, 61, 0, 0, 0, 98, 182, 91, 99, 168, 0, 0, 0, 17, 22, 1, 120, 94, 0, 0, 7, 138, 206, 211, 228, 48, 0, 0, 90, 152, 139, 187, 63, 7, 0, 0, 159, 190, 147, 7, 0, 0, 0, 0, 30, 57, 11, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 4, 20, 0, 0, 0, 0, 0, 46, 169, 208, 60, 0, 0, 0, 0, 84, 45, 92, 129, 0, 0, 0, 0, 21, 65, 168, 71, 0, 0, 30, 188, 187, 234, 222, 105, 0, 0, 145, 180, 136, 176, 42, 33, 0, 0, 71, 102, 85, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 81, 144, 26, 0, 0, 0, 0, 14, 110, 119, 98, 0, 0, 0, 7, 31, 42, 156, 36, 0, 12, 139, 195, 166, 238, 209, 30, 0, 21, 181, 147, 149, 94, 81, 42, 0, 0, 3, 36, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 66, 61, 0, 0, 0, 0, 96, 125, 80, 154, 0, 0, 0, 14, 53, 6, 114, 65, 0, 0, 62, 153, 147, 231, 158, 8, 0, 0, 145, 81, 155, 73, 103, 9, 0, 0, 61, 89, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 126, 136, 105, 0, 0, 0, 0, 19, 13, 71, 130, 0, 0, 0, 0, 0, 9, 152, 36, 0, 0, 0, 0, 1, 131, 29, 0, 0, 0, 0, 0, 47, 151, 38, 93, 19, 0, 0, 0, 43, 151, 106, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 106, 121, 10, 0, 0, 0, 143, 176, 117, 212, 72, 0, 0, 0, 87, 21, 156, 191, 11, 0, 0, 0, 6, 123, 162, 28, 0, 0, 0, 0, 129, 241, 100, 107, 0, 0, 0, 2, 225, 186, 129, 39, 0, 0, 0, 0, 38, 8, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 102, 154, 88, 0, 0, 0, 0, 102, 74, 45, 141, 0, 0, 0, 7, 48, 45, 144, 51, 0, 0, 38, 179, 155, 235, 189, 5, 0, 0, 139, 96, 152, 72, 62, 8, 0, 0, 112, 130, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 33, 28, 2, 0, 0, 0, 0, 0, 166, 207, 126, 0, 0, 0, 0, 0, 33, 48, 181, 66, 0, 0, 0, 0, 0, 0, 153, 70, 0, 0, 0, 31, 4, 98, 191, 4, 0, 25, 158, 220, 194, 220, 200, 46, 0, 9, 101, 125, 87, 5, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 91, 66, 0, 0, 0, 0, 92, 144, 68, 138, 0, 0, 0, 0, 30, 9, 100, 58, 0, 0, 60, 137, 150, 179, 167, 38, 0, 0, 136, 74, 147, 110, 8, 0, 0, 0, 51, 103, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 9, 24, 0, 0, 0, 0, 0, 95, 107, 74, 0, 0, 0, 0, 93, 99, 46, 42, 0, 0, 0, 0, 86, 18, 112, 0, 0, 0, 14, 116, 132, 183, 30, 0, 0, 0, 103, 177, 148, 140, 11, 0, 0, 0, 27, 62, 17, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 4, 51, 52, 14, 0, 0, 0, 0, 10, 65, 56, 94, 46, 0, 0, 0, 0, 0, 0, 1, 82, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 6, 55, 34, 36, 97, 0, 0, 0, 53, 86, 90, 151, 91, 64, 31, 0, 6, 76, 63, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 45, 34, 2, 0, 0, 0, 0, 140, 203, 212, 25, 12, 12, 0, 0, 0, 60, 185, 50, 102, 38, 0, 0, 2, 95, 236, 197, 56, 0, 0, 0, 120, 225, 198, 34, 0, 0, 0, 0, 200, 158, 4, 0, 0, 0, 0, 0, 50, 25, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 126, 165, 150, 38, 0, 0, 0, 0, 85, 2, 60, 173, 0, 0, 0, 0, 0, 0, 1, 157, 0, 0, 0, 50, 178, 129, 160, 226, 50, 0, 0, 52, 182, 140, 187, 118, 147, 5, 0, 0, 15, 28, 5, 0, 98, 6, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 28, 71, 51, 0, 0, 0, 95, 142, 63, 93, 11, 0, 0, 0, 41, 31, 111, 15, 0, 0, 1, 108, 140, 134, 21, 0, 0, 0, 33, 147, 147, 127, 27, 0, 0, 0, 2, 89, 13, 64, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 128, 100, 22, 0, 0, 0, 0, 0, 0, 121, 114, 0, 0, 0, 0, 0, 52, 132, 19, 0, 0, 0, 0, 43, 144, 1, 0, 0, 0, 0, 0, 77, 108, 0, 27, 55, 0, 0, 0, 7, 99, 122, 112, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 114, 108, 59, 0, 0, 0, 0, 50, 11, 3, 137, 0, 0, 0, 0, 0, 0, 88, 143, 0, 0, 0, 0, 7, 102, 126, 12, 0, 0, 0, 0, 113, 152, 9, 0, 0, 0, 0, 0, 89, 134, 127, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 71, 23, 0, 0, 0, 0, 0, 0, 151, 151, 0, 0, 0, 0, 0, 0, 59, 231, 8, 0, 0, 0, 0, 39, 179, 147, 0, 0, 0, 67, 187, 235, 103, 47, 79, 0, 0, 119, 219, 231, 219, 203, 79, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 15, 40, 0, 0, 0, 0, 0, 0, 95, 130, 13, 0, 0, 0, 0, 36, 5, 65, 39, 0, 0, 0, 0, 0, 1, 96, 21, 0, 0, 43, 76, 56, 109, 143, 22, 0, 0, 93, 6, 15, 95, 28, 0, 0, 0, 16, 104, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 138, 119, 56, 0, 0, 0, 80, 150, 44, 62, 47, 0, 0, 0, 54, 16, 32, 120, 2, 0, 0, 45, 173, 172, 162, 24, 0, 0, 0, 81, 196, 142, 162, 137, 0, 0, 0, 0, 0, 0, 3, 115, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 109, 94, 8, 0, 0, 0, 10, 132, 53, 128, 142, 0, 0, 0, 0, 67, 101, 115, 163, 0, 0, 0, 0, 198, 95, 169, 226, 19, 0, 0, 0, 169, 98, 195, 151, 105, 0, 0, 0, 27, 103, 34, 5, 117, 0, 0, 0, 0, 0, 0, 0, 18, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 96, 108, 86, 107, 2, 0, 42, 142, 92, 45, 76, 60, 0, 0, 23, 47, 144, 129, 71, 50, 5, 0, 32, 196, 166, 112, 112, 118, 28, 0, 7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 108, 125, 91, 0, 0, 0, 0, 0, 0, 43, 81, 0, 0, 0, 0, 0, 34, 129, 58, 0, 0, 0, 0, 56, 138, 2, 0, 0, 0, 0, 0, 141, 73, 0, 0, 0, 0, 0, 0, 55, 153, 152, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 9, 62, 0, 0, 41, 39, 0, 83, 82, 53, 0, 0, 39, 2, 0, 46, 68, 12, 0, 0, 17, 56, 98, 145, 67, 0, 0, 0, 0, 159, 131, 89, 73, 0, 0, 0, 0, 14, 5, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 5, 18, 35, 7, 0, 0, 0, 20, 90, 33, 89, 2, 0, 0, 45, 130, 19, 112, 38, 0, 0, 0, 0, 0, 99, 111, 0, 0, 0, 1, 66, 106, 144, 7, 0, 0, 0, 55, 207, 205, 151, 80, 0, 0, 0, 16, 60, 18, 16, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 67, 192, 69, 0, 0, 0, 0, 2, 140, 177, 213, 0, 0, 0, 0, 56, 37, 191, 170, 0, 0, 0, 57, 247, 253, 228, 90, 72, 3, 0, 121, 252, 231, 252, 251, 194, 16, 0, 36, 53, 5, 22, 24, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 37, 13, 0, 0, 0, 0, 0, 37, 178, 116, 1, 0, 0, 0, 0, 36, 55, 144, 6, 0, 0, 0, 0, 0, 0, 159, 26, 0, 0, 0, 0, 97, 171, 202, 31, 0, 0, 0, 0, 191, 203, 167, 152, 42, 0, 0, 0, 26, 53, 1, 5, 89, 8, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 26, 27, 0, 0, 0, 0, 0, 33, 195, 207, 57, 0, 0, 0, 0, 96, 225, 220, 118, 0, 0, 0, 0, 51, 122, 224, 103, 0, 0, 0, 25, 229, 254, 253, 161, 55, 0, 0, 92, 254, 222, 241, 254, 184, 4, 0, 46, 93, 17, 27, 66, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 78, 160, 45, 0, 0, 0, 0, 13, 156, 220, 39, 0, 0, 0, 0, 32, 125, 130, 0, 0, 0, 0, 73, 246, 236, 218, 127, 166, 31, 0, 43, 134, 66, 229, 228, 90, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 1, 29, 26, 0, 0, 0, 0, 0, 80, 98, 135, 59, 0, 0, 0, 0, 1, 0, 80, 129, 0, 0, 0, 0, 0, 0, 155, 70, 0, 0, 0, 0, 8, 142, 75, 1, 16, 0, 0, 7, 135, 203, 151, 147, 95, 0, 0, 14, 63, 2, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 163, 119, 15, 0, 0, 0, 0, 55, 71, 227, 87, 0, 0, 0, 0, 0, 63, 235, 59, 0, 0, 0, 27, 183, 247, 187, 35, 131, 27, 0, 91, 219, 143, 215, 227, 223, 43, 0, 0, 0, 0, 4, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 103, 169, 145, 18, 0, 0, 0, 0, 58, 121, 239, 104, 0, 0, 0, 0, 23, 55, 247, 93, 0, 0, 0, 52, 248, 254, 182, 55, 100, 2, 0, 72, 247, 191, 230, 235, 235, 44, 0, 0, 6, 0, 4, 30, 30, 1, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 104, 144, 12, 0, 0, 0, 170, 189, 200, 229, 16, 0, 0, 0, 82, 114, 200, 75, 0, 0, 0, 18, 179, 189, 20, 9, 7, 0, 0, 95, 254, 222, 187, 198, 163, 24, 0, 15, 29, 3, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 7, 33, 5, 0, 0, 0, 0, 0, 118, 165, 115, 24, 0, 0, 0, 0, 76, 28, 50, 138, 0, 0, 0, 0, 0, 0, 10, 120, 0, 0, 0, 0, 106, 88, 96, 134, 3, 23, 0, 0, 206, 209, 232, 176, 128, 81, 0, 0, 57, 72, 5, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 131, 74, 0, 0, 0, 0, 0, 24, 25, 128, 0, 0, 0, 0, 0, 0, 1, 151, 0, 0, 0, 0, 0, 0, 62, 118, 0, 0, 0, 0, 0, 0, 130, 35, 25, 8, 0, 0, 0, 10, 135, 124, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 87, 35, 0, 0, 0, 0, 0, 47, 206, 167, 0, 0, 0, 0, 6, 15, 118, 169, 0, 0, 0, 67, 239, 253, 224, 216, 174, 29, 0, 88, 225, 156, 35, 43, 65, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 107, 159, 63, 0, 0, 0, 31, 220, 229, 214, 239, 0, 0, 0, 52, 167, 62, 143, 231, 0, 0, 0, 0, 1, 71, 233, 108, 0, 0, 0, 20, 148, 230, 244, 148, 54, 6, 0, 18, 137, 138, 120, 163, 131, 12, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 71, 105, 43, 0, 0, 0, 0, 0, 0, 28, 157, 6, 0, 0, 0, 0, 40, 84, 70, 0, 0, 0, 0, 97, 116, 0, 0, 0, 0, 0, 0, 127, 75, 72, 77, 0, 0, 0, 0, 28, 86, 41, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 115, 171, 123, 4, 0, 0, 0, 47, 95, 31, 207, 43, 0, 0, 0, 0, 0, 8, 187, 16, 0, 0, 0, 0, 0, 83, 115, 0, 0, 0, 0, 0, 31, 195, 159, 27, 0, 0, 0, 0, 83, 135, 107, 183, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 104, 17, 0, 0, 0, 0, 0, 81, 228, 128, 0, 0, 0, 0, 84, 174, 186, 58, 0, 0, 0, 82, 224, 193, 237, 204, 106, 24, 0, 68, 111, 42, 72, 171, 190, 19, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 4, 0, 0, 0, 0, 27, 138, 142, 200, 28, 0, 0, 0, 0, 1, 96, 113, 7, 0, 0, 0, 0, 68, 136, 5, 6, 29, 21, 0, 0, 37, 150, 153, 131, 134, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108, 89, 32, 0, 0, 0, 0, 12, 160, 155, 132, 0, 0, 0, 0, 0, 22, 88, 164, 0, 0, 0, 0, 147, 247, 254, 105, 0, 0, 0, 0, 209, 251, 209, 159, 3, 0, 0, 0, 22, 29, 17, 148, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 93, 119, 125, 26, 0, 0, 0, 0, 0, 0, 121, 28, 0, 0, 0, 0, 0, 78, 58, 0, 0, 0, 0, 0, 0, 136, 34, 42, 61, 16, 0, 0, 0, 14, 76, 53, 28, 2, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 42, 6, 0, 0, 0, 0, 0, 53, 222, 86, 0, 0, 0, 0, 0, 42, 158, 208, 0, 0, 0, 0, 5, 31, 114, 201, 0, 0, 0, 1, 197, 252, 232, 85, 0, 0, 0, 11, 253, 227, 226, 167, 16, 0, 0, 1, 66, 49, 40, 105, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 155, 163, 25, 0, 0, 0, 0, 94, 219, 222, 101, 0, 0, 0, 0, 37, 90, 197, 117, 0, 0, 0, 0, 211, 252, 248, 70, 0, 0, 0, 2, 244, 250, 233, 194, 90, 3, 0, 0, 69, 57, 35, 117, 162, 29, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 13, 39, 40, 0, 0, 0, 0, 0, 146, 225, 226, 70, 0, 0, 0, 0, 107, 114, 197, 120, 0, 0, 0, 0, 0, 52, 236, 105, 0, 0, 0, 0, 147, 245, 230, 76, 2, 0, 0, 0, 223, 235, 207, 238, 164, 45, 0, 0, 99, 50, 1, 53, 120, 61, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 64, 96, 32, 0, 0, 0, 22, 152, 142, 150, 114, 0, 0, 0, 0, 7, 1, 113, 69, 0, 0, 27, 129, 176, 203, 166, 2, 0, 26, 187, 196, 175, 137, 160, 26, 0, 12, 62, 36, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 28, 61, 3, 0, 0, 0, 0, 40, 165, 162, 120, 0, 0, 0, 0, 0, 21, 112, 101, 0, 0, 74, 157, 211, 244, 231, 9, 0, 34, 218, 188, 186, 92, 79, 10, 0, 0, 30, 26, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 132, 140, 88, 0, 0, 0, 3, 59, 3, 0, 151, 0, 0, 0, 0, 0, 0, 50, 148, 0, 0, 0, 0, 0, 47, 134, 17, 0, 0, 0, 0, 83, 147, 24, 10, 1, 0, 0, 6, 158, 130, 116, 105, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 17, 48, 1, 0, 0, 0, 0, 0, 105, 156, 68, 0, 0, 0, 0, 0, 1, 0, 131, 83, 0, 0, 0, 0, 0, 0, 24, 143, 0, 0, 0, 0, 94, 145, 76, 138, 9, 0, 0, 0, 94, 128, 132, 173, 0, 0, 0, 0, 0, 69, 105, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 28, 0, 0, 0, 0, 0, 0, 121, 183, 70, 0, 0, 0, 6, 38, 49, 168, 64, 0, 9, 121, 182, 249, 172, 177, 46, 0, 47, 220, 175, 122, 7, 35, 63, 0, 1, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 36, 89, 21, 0, 0, 0, 0, 0, 21, 114, 149, 1, 0, 0, 0, 0, 0, 0, 112, 41, 0, 0, 0, 0, 0, 0, 123, 42, 0, 0, 47, 139, 129, 115, 172, 24, 0, 0, 100, 100, 135, 166, 106, 18, 0, 0, 5, 53, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 56, 12, 0, 0, 0, 0, 0, 0, 73, 82, 0, 0, 0, 0, 0, 0, 2, 116, 0, 0, 0, 0, 0, 0, 0, 129, 0, 0, 0, 0, 0, 17, 138, 207, 126, 7, 0, 0, 0, 42, 141, 150, 77, 9, 0, 0, 0, 3, 48, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 65, 80, 88, 0, 0, 0, 0, 8, 21, 15, 123, 0, 0, 0, 0, 0, 0, 59, 126, 0, 0, 0, 0, 14, 49, 123, 26, 0, 0, 0, 0, 108, 150, 122, 0, 0, 0, 0, 0, 69, 68, 98, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 117, 94, 0, 0, 0, 0, 0, 10, 119, 103, 36, 14, 0, 17, 117, 157, 168, 119, 90, 8, 0, 82, 147, 50, 14, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 57, 6, 0, 0, 0, 0, 10, 121, 137, 121, 0, 0, 0, 0, 0, 35, 155, 69, 0, 22, 110, 137, 170, 208, 211, 12, 0, 45, 188, 171, 146, 32, 71, 9, 0, 0, 16, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 12, 138, 127, 164, 0, 0, 0, 0, 0, 3, 71, 102, 0, 0, 38, 107, 141, 160, 113, 2, 0, 0, 164, 173, 167, 146, 14, 0, 0, 0, 13, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 95, 172, 187, 62, 0, 0, 0, 10, 113, 109, 216, 101, 0, 0, 0, 0, 35, 195, 198, 20, 0, 0, 1, 124, 219, 98, 32, 21, 0, 0, 71, 249, 198, 178, 213, 100, 0, 0, 62, 181, 140, 71, 25, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 27, 34, 0, 0, 0, 0, 0, 0, 116, 210, 147, 52, 0, 0, 0, 0, 0, 4, 85, 202, 41, 0, 0, 0, 0, 0, 0, 97, 79, 0, 0, 20, 21, 22, 91, 163, 9, 0, 0, 133, 212, 213, 194, 65, 5, 0, 0, 7, 68, 109, 127, 118, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 91, 23, 0, 0, 0, 0, 0, 11, 67, 171, 0, 0, 0, 0, 0, 11, 119, 119, 0, 0, 127, 123, 195, 227, 195, 15, 0, 0, 127, 159, 167, 63, 75, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 126, 8, 0, 0, 0, 0, 20, 107, 111, 97, 0, 0, 0, 0, 0, 0, 102, 98, 0, 17, 126, 159, 234, 211, 187, 13, 0, 55, 233, 177, 169, 70, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 110, 75, 0, 0, 0, 0, 0, 5, 54, 122, 0, 0, 0, 0, 0, 0, 14, 122, 0, 0, 0, 0, 0, 0, 115, 31, 0, 0, 0, 0, 0, 3, 129, 0, 10, 24, 0, 0, 0, 2, 106, 115, 86, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 108, 101, 0, 0, 0, 0, 0, 0, 70, 128, 9, 0, 0, 62, 179, 158, 156, 105, 80, 12, 0, 16, 81, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 1, 51, 51, 0, 0, 0, 0, 24, 97, 81, 117, 41, 0, 0, 0, 11, 11, 0, 73, 38, 0, 0, 0, 0, 0, 7, 116, 1, 0, 0, 9, 63, 99, 155, 55, 0, 0, 0, 77, 29, 103, 124, 112, 45, 0, 0, 56, 68, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 56, 26, 0, 0, 0, 0, 2, 92, 80, 119, 0, 0, 2, 24, 5, 12, 137, 45, 0, 30, 113, 93, 178, 208, 153, 20, 0, 37, 134, 125, 120, 51, 73, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 152, 190, 118, 23, 0, 0, 0, 47, 9, 17, 166, 154, 0, 0, 0, 0, 0, 0, 159, 137, 0, 0, 0, 0, 14, 131, 147, 11, 0, 0, 0, 0, 110, 226, 59, 46, 15, 0, 0, 0, 115, 189, 178, 148, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 6, 46, 11, 0, 0, 0, 0, 0, 125, 182, 172, 38, 0, 0, 0, 0, 0, 0, 145, 50, 0, 0, 0, 0, 0, 46, 137, 4, 0, 0, 0, 0, 65, 161, 12, 0, 6, 1, 0, 0, 161, 151, 85, 126, 136, 14, 0, 0, 31, 92, 97, 53, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 80, 103, 56, 0, 0, 0, 11, 53, 0, 20, 99, 0, 0, 0, 0, 0, 0, 72, 64, 0, 0, 0, 0, 0, 2, 93, 1, 0, 0, 0, 0, 0, 66, 46, 0, 0, 0, 0, 0, 1, 117, 79, 72, 1, 0, 0, 0, 0, 38, 57, 14, 0, 0 },
    { 0, 0, 0, 0, 33, 56, 0, 0, 0, 0, 6, 90, 136, 191, 18, 0, 0, 0, 0, 3, 0, 149, 6, 0, 0, 0, 0, 0, 44, 151, 0, 0, 0, 4, 61, 54, 173, 40, 0, 0, 0, 106, 170, 222, 183, 107, 3, 0, 0, 74, 104, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 13, 58, 23, 0, 0, 0, 0, 0, 98, 158, 166, 31, 0, 0, 0, 0, 0, 0, 129, 84, 0, 0, 0, 0, 0, 0, 158, 68, 0, 0, 0, 0, 73, 145, 174, 14, 3, 2, 0, 29, 233, 204, 166, 167, 148, 44, 0, 50, 92, 13, 0, 15, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 75, 117, 101, 5, 0, 0, 5, 183, 93, 33, 141, 40, 0, 0, 3, 54, 0, 19, 167, 13, 0, 0, 0, 0, 35, 159, 56, 0, 0, 0, 0, 28, 168, 98, 62, 40, 0, 0, 0, 182, 166, 111, 70, 15, 0, 0, 0, 31, 3, 0, 0, 0, 0 },
    { 0, 0, 6, 51, 43, 0, 0, 0, 0, 0, 136, 187, 187, 65, 0, 0, 0, 0, 5, 0, 94, 139, 0, 0, 0, 0, 0, 0, 149, 84, 0, 0, 0, 0, 36, 119, 175, 12, 0, 0, 0, 14, 204, 199, 189, 162, 53, 23, 0, 18, 91, 6, 0, 38, 107, 24, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 97, 122, 130, 26, 0, 0, 0, 118, 45, 0, 62, 77, 0, 0, 0, 12, 0, 25, 129, 16, 0, 0, 0, 16, 97, 132, 31, 0, 0, 0, 22, 136, 98, 6, 0, 0, 0, 0, 42, 123, 111, 121, 122, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 91, 78, 97, 97, 71, 12, 0, 2, 8, 0, 0, 0, 100, 50, 0, 11, 77, 91, 92, 126, 71, 2, 0, 86, 72, 71, 86, 53, 0, 0, 0, 11, 65, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 46, 115, 31, 0, 0, 0, 0, 22, 121, 114, 145, 0, 0, 0, 0, 0, 0, 0, 137, 0, 0, 0, 0, 0, 0, 23, 141, 0, 0, 0, 65, 167, 151, 171, 65, 24, 15, 0, 123, 137, 198, 144, 133, 108, 24, 0, 11, 49, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 11, 59, 12, 0, 0, 0, 0, 0, 83, 179, 151, 19, 0, 0, 0, 0, 0, 0, 183, 83, 0, 0, 0, 0, 0, 8, 183, 35, 0, 0, 0, 0, 51, 167, 43, 0, 0, 0, 0, 23, 215, 187, 143, 35, 87, 39, 0, 4, 31, 0, 51, 119, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 107, 110, 3, 0, 0, 0, 0, 28, 60, 136, 48, 0, 0, 0, 0, 0, 0, 137, 50, 0, 0, 0, 0, 0, 0, 131, 16, 0, 0, 0, 0, 3, 39, 140, 9, 0, 0, 0, 5, 145, 123, 80, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 39, 59, 15, 0, 0, 0, 0, 55, 155, 147, 163, 4, 0, 0, 0, 31, 27, 15, 167, 16, 0, 0, 0, 0, 0, 75, 143, 0, 0, 0, 19, 127, 155, 199, 23, 0, 0, 0, 135, 247, 167, 147, 151, 23, 0, 0, 43, 35, 0, 0, 19, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 44, 49, 3, 0, 0, 0, 0, 0, 201, 238, 62, 0, 0, 0, 0, 0, 16, 143, 109, 0, 0, 3, 95, 135, 78, 188, 68, 0, 0, 99, 198, 133, 239, 248, 68, 0, 0, 135, 166, 128, 227, 136, 44, 0, 0, 30, 119, 116, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 4, 34, 19, 0, 0, 0, 0, 0, 16, 174, 191, 55, 0, 0, 0, 0, 0, 0, 66, 150, 0, 0, 0, 0, 0, 7, 149, 83, 0, 0, 0, 2, 73, 156, 56, 0, 0, 0, 0, 19, 240, 138, 86, 100, 70, 0, 0, 0, 75, 118, 103, 62, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 171, 159, 55, 0, 0, 0, 0, 19, 51, 95, 103, 0, 0, 0, 0, 0, 0, 139, 83, 0, 0, 0, 0, 0, 75, 139, 0, 0, 0, 0, 0, 75, 215, 167, 23, 0, 0, 0, 0, 151, 39, 59, 139, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 89, 166, 184, 87, 0, 0, 0, 6, 87, 23, 30, 167, 0, 0, 0, 0, 0, 0, 81, 136, 0, 0, 0, 0, 0, 87, 135, 12, 0, 0, 0, 4, 119, 150, 17, 30, 17, 0, 0, 23, 165, 176, 174, 154, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 28, 6, 0, 0, 0, 0, 46, 125, 94, 134, 95, 0, 0, 0, 7, 2, 0, 12, 120, 0, 0, 0, 4, 125, 132, 188, 182, 33, 0, 0, 49, 171, 137, 61, 43, 165, 34, 0, 1, 22, 4, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 163, 191, 95, 0, 0, 0, 0, 55, 35, 43, 167, 0, 0, 0, 0, 0, 0, 135, 111, 0, 0, 0, 0, 15, 119, 71, 0, 0, 0, 0, 11, 155, 87, 16, 51, 4, 0, 0, 11, 147, 175, 159, 115, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 134, 157, 70, 0, 0, 0, 0, 70, 22, 23, 170, 2, 0, 0, 0, 0, 0, 0, 168, 11, 0, 0, 0, 144, 184, 170, 238, 43, 0, 0, 3, 195, 33, 117, 180, 7, 0, 0, 0, 97, 174, 119, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 104, 114, 123, 54, 0, 0, 0, 81, 14, 0, 6, 124, 13, 0, 0, 0, 0, 6, 6, 99, 32, 0, 0, 0, 118, 109, 137, 197, 4, 0, 0, 16, 106, 7, 134, 180, 0, 0, 0, 8, 125, 117, 31, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 125, 132, 109, 25, 0, 0, 0, 46, 14, 0, 57, 132, 0, 0, 0, 0, 0, 0, 34, 135, 0, 0, 0, 0, 75, 114, 178, 184, 102, 21, 0, 0, 132, 24, 157, 61, 61, 10, 0, 0, 109, 116, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 75, 161, 112, 0, 0, 0, 24, 163, 109, 34, 139, 0, 0, 0, 17, 21, 0, 87, 151, 0, 0, 0, 0, 4, 63, 176, 32, 0, 0, 0, 0, 97, 229, 195, 53, 0, 0, 0, 0, 142, 62, 22, 102, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 49, 0, 0, 0, 0, 0, 6, 120, 160, 14, 0, 0, 0, 0, 0, 34, 165, 2, 0, 0, 0, 87, 244, 246, 100, 7, 121, 23, 0, 56, 161, 99, 169, 179, 145, 11, 0, 0, 0, 0, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 106, 32, 0, 0, 0, 0, 0, 4, 4, 71, 0, 0, 0, 0, 0, 99, 111, 123, 60, 55, 40, 0, 0, 39, 86, 65, 70, 66, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 59, 1, 0, 0, 0, 0, 0, 103, 229, 161, 7, 0, 0, 0, 0, 4, 76, 204, 15, 0, 0, 0, 7, 153, 235, 191, 121, 179, 61, 0, 31, 244, 239, 197, 130, 75, 12, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 15, 57, 9, 0, 0, 0, 2, 117, 177, 225, 50, 0, 0, 0, 7, 43, 3, 173, 31, 0, 0, 0, 0, 0, 31, 138, 0, 0, 0, 0, 0, 13, 161, 22, 0, 0, 0, 0, 0, 99, 198, 108, 137, 61, 0, 0, 0, 109, 118, 84, 52, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 87, 131, 9, 0, 0, 0, 0, 46, 111, 162, 17, 0, 0, 0, 0, 0, 56, 121, 0, 0, 0, 0, 0, 27, 165, 7, 0, 0, 0, 0, 0, 140, 203, 114, 19, 0, 0, 0, 0, 7, 0, 82, 150, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 33, 0, 0, 0, 0, 0, 0, 97, 173, 133, 5, 0, 0, 0, 0, 6, 29, 178, 43, 0, 0, 0, 0, 189, 252, 201, 152, 114, 64, 0, 0, 172, 130, 18, 66, 83, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 85, 79, 76, 72, 33, 0, 0, 85, 21, 0, 0, 5, 93, 0, 0, 5, 69, 76, 100, 129, 84, 0, 0, 40, 116, 78, 83, 44, 0, 0, 0, 0, 14, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 1, 35, 22, 0, 0, 0, 0, 0, 83, 159, 160, 55, 0, 0, 0, 0, 46, 6, 92, 109, 0, 0, 0, 0, 0, 0, 135, 58, 0, 0, 0, 0, 14, 72, 143, 7, 0, 0, 0, 13, 190, 225, 140, 152, 51, 0, 0, 10, 104, 22, 0, 14, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 1, 44, 9, 0, 0, 0, 0, 0, 67, 124, 102, 0, 0, 0, 0, 0, 10, 5, 110, 0, 0, 0, 11, 104, 66, 35, 121, 0, 0, 0, 87, 16, 49, 196, 66, 0, 0, 0, 37, 116, 110, 113, 140, 2, 0, 0, 0, 0, 0, 0, 43, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 91, 111, 99, 59, 0, 0, 0, 0, 7, 0, 0, 95, 0, 0, 0, 0, 0, 0, 41, 110, 0, 0, 0, 0, 6, 69, 65, 5, 0, 0, 0, 0, 77, 65, 39, 57, 1, 0, 0, 0, 111, 122, 91, 84, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 94, 1, 0, 0, 0, 0, 5, 141, 169, 68, 0, 0, 0, 0, 4, 143, 216, 74, 0, 0, 0, 0, 6, 100, 223, 65, 0, 0, 0, 0, 41, 170, 215, 161, 9, 0, 0, 0, 33, 161, 65, 45, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 48, 39, 0, 0, 0, 0, 0, 0, 215, 173, 78, 0, 0, 0, 0, 0, 0, 12, 181, 0, 0, 1, 2, 0, 4, 98, 124, 0, 0, 150, 157, 169, 172, 153, 3, 0, 0, 185, 138, 206, 162, 105, 47, 0, 0, 44, 65, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 123, 108, 6, 0, 0, 0, 0, 46, 118, 132, 137, 7, 0, 0, 0, 0, 0, 24, 205, 24, 0, 0, 0, 0, 36, 180, 102, 11, 6, 0, 0, 0, 142, 252, 189, 195, 167, 23, 0, 0, 22, 83, 60, 37, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 5, 35, 24, 0, 0, 0, 0, 0, 111, 137, 167, 85, 0, 0, 0, 0, 10, 0, 12, 161, 6, 0, 0, 0, 0, 0, 0, 125, 33, 0, 0, 28, 170, 149, 146, 208, 79, 6, 0, 70, 125, 82, 189, 124, 2, 0, 0, 11, 103, 98, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 14, 37, 0, 0, 0, 0, 0, 16, 92, 189, 30, 0, 0, 0, 0, 0, 0, 175, 60, 0, 0, 0, 0, 0, 0, 180, 41, 0, 0, 0, 0, 46, 136, 216, 95, 33, 4, 0, 0, 167, 201, 113, 120, 115, 43, 0, 0, 87, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 151, 155, 67, 0, 0, 0, 0, 91, 4, 95, 159, 0, 0, 0, 0, 0, 0, 95, 159, 0, 0, 0, 0, 87, 171, 239, 195, 47, 0, 0, 0, 151, 127, 215, 131, 71, 0, 0, 0, 107, 163, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 130, 59, 0, 0, 0, 0, 0, 7, 81, 172, 60, 0, 0, 0, 0, 0, 0, 76, 148, 0, 0, 0, 0, 0, 124, 226, 128, 122, 153, 35, 0, 0, 224, 227, 184, 151, 141, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 64, 66, 126, 69, 0, 0, 0, 0, 0, 6, 127, 21, 0, 0, 0, 0, 1, 107, 19, 0, 0, 0, 0, 0, 3, 114, 40, 39, 50, 11, 0, 0, 0, 2, 35, 27, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 94, 122, 7, 0, 0, 0, 0, 15, 111, 130, 74, 0, 0, 0, 0, 0, 5, 115, 87, 0, 0, 0, 0, 16, 147, 158, 42, 0, 0, 0, 0, 72, 184, 214, 40, 0, 0, 0, 0, 31, 142, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 124, 88, 47, 0, 0, 0, 0, 35, 58, 118, 220, 35, 0, 0, 0, 7, 13, 10, 144, 79, 0, 0, 86, 250, 250, 251, 250, 79, 0, 0, 116, 250, 241, 206, 171, 128, 11, 0, 4, 16, 13, 0, 0, 80, 32, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 139, 108, 0, 0, 0, 0, 95, 183, 155, 159, 0, 0, 0, 0, 102, 71, 152, 116, 0, 0, 0, 0, 0, 59, 177, 16, 16, 0, 0, 0, 63, 205, 203, 146, 61, 0, 0, 30, 183, 140, 38, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 17, 49, 26, 0, 0, 0, 0, 0, 63, 238, 203, 31, 0, 0, 0, 0, 0, 49, 94, 207, 28, 0, 0, 0, 0, 0, 7, 205, 59, 0, 0, 0, 0, 21, 135, 252, 189, 126, 0, 0, 0, 119, 252, 252, 252, 133, 0, 0, 0, 49, 108, 56, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 7, 63, 56, 0, 0, 0, 0, 0, 54, 253, 246, 78, 0, 0, 0, 0, 42, 112, 134, 191, 6, 0, 0, 0, 0, 5, 132, 180, 4, 0, 0, 0, 0, 154, 252, 149, 125, 181, 47, 0, 0, 176, 253, 253, 253, 248, 109, 0, 0, 37, 79, 77, 42, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 56, 25, 0, 0, 0, 0, 23, 169, 82, 141, 79, 0, 0, 0, 4, 36, 0, 66, 129, 0, 0, 0, 0, 45, 77, 154, 65, 43, 25, 0, 0, 116, 206, 126, 88, 87, 32, 0, 0, 24, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 2, 54, 22, 0, 0, 0, 0, 0, 76, 244, 192, 10, 0, 0, 0, 0, 10, 28, 104, 83, 0, 0, 0, 0, 0, 3, 134, 68, 0, 0, 36, 146, 137, 182, 158, 0, 0, 0, 137, 197, 227, 163, 128, 40, 0, 0, 72, 108, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 2, 36, 9, 0, 0, 0, 0, 0, 36, 212, 169, 51, 0, 0, 0, 0, 0, 19, 100, 221, 10, 0, 0, 0, 0, 0, 27, 216, 29, 0, 0, 0, 122, 168, 159, 238, 33, 0, 0, 13, 247, 252, 228, 172, 49, 0, 0, 0, 101, 106, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 105, 98, 3, 0, 0, 0, 0, 0, 157, 238, 78, 0, 0, 0, 0, 0, 0, 119, 171, 0, 0, 0, 0, 0, 0, 133, 168, 0, 0, 0, 0, 7, 168, 249, 164, 133, 161, 27, 0, 77, 252, 252, 240, 231, 189, 33, 0, 14, 55, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 35, 29, 0, 0, 0, 0, 0, 0, 168, 210, 63, 0, 0, 0, 0, 0, 21, 126, 245, 84, 0, 0, 0, 0, 0, 24, 242, 112, 0, 0, 0, 0, 59, 202, 224, 126, 84, 0, 0, 21, 224, 252, 252, 252, 112, 0, 0, 35, 119, 115, 59, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 101, 103, 101, 63, 0, 0, 0, 0, 0, 0, 103, 133, 0, 0, 0, 0, 0, 36, 126, 12, 0, 0, 0, 0, 33, 139, 1, 0, 0, 0, 0, 0, 111, 86, 0, 0, 0, 0, 0, 0, 52, 147, 117, 120, 52, 0, 0, 0, 0, 13, 45, 51, 27, 0 },
    { 0, 0, 0, 0, 41, 6, 0, 0, 0, 0, 0, 78, 225, 88, 0, 0, 0, 0, 77, 175, 92, 158, 0, 0, 0, 0, 32, 30, 88, 158, 0, 0, 0, 0, 95, 161, 195, 130, 0, 0, 0, 0, 191, 146, 209, 171, 26, 0, 0, 0, 63, 116, 13, 7, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 49, 160, 114, 0, 0, 0, 0, 138, 171, 74, 211, 0, 0, 0, 0, 178, 32, 97, 175, 0, 0, 0, 0, 30, 59, 205, 47, 4, 0, 0, 31, 147, 212, 201, 147, 91, 3, 0, 89, 124, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 5, 28, 0, 0, 0, 0, 0, 22, 135, 182, 83, 0, 0, 0, 0, 158, 78, 24, 176, 0, 0, 0, 0, 16, 0, 23, 182, 0, 0, 0, 20, 161, 188, 189, 145, 0, 0, 0, 53, 214, 118, 217, 164, 1, 0, 0, 0, 90, 112, 26, 34, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 47, 19, 0, 0, 0, 0, 173, 191, 120, 160, 0, 0, 0, 0, 92, 20, 2, 162, 0, 0, 0, 0, 34, 63, 110, 169, 0, 0, 0, 0, 152, 196, 229, 167, 82, 6, 0, 0, 36, 126, 32, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 135, 149, 132, 5, 0, 0, 0, 155, 90, 0, 128, 45, 0, 0, 0, 9, 0, 1, 154, 20, 0, 0, 0, 32, 96, 160, 211, 9, 0, 0, 51, 162, 129, 210, 154, 82, 0, 0, 80, 128, 147, 40, 16, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 156, 59, 0, 0, 0, 0, 0, 15, 169, 53, 0, 0, 0, 0, 14, 139, 51, 0, 0, 0, 0, 0, 125, 102, 0, 0, 0, 0, 0, 0, 140, 89, 4, 45, 34, 0, 0, 0, 41, 145, 143, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 118, 168, 103, 0, 0, 0, 0, 96, 150, 71, 194, 0, 0, 0, 0, 5, 3, 43, 184, 0, 0, 0, 0, 43, 106, 176, 131, 0, 0, 0, 43, 174, 152, 213, 156, 78, 3, 0, 45, 121, 149, 19, 2, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 90, 57, 0, 0, 0, 0, 36, 151, 64, 172, 53, 0, 0, 0, 49, 17, 0, 143, 81, 0, 0, 0, 0, 44, 114, 200, 153, 63, 0, 0, 0, 175, 130, 162, 28, 98, 20, 0, 0, 69, 102, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 17, 15, 0, 0, 0, 0, 0, 98, 158, 145, 60, 0, 0, 0, 0, 8, 1, 66, 192, 0, 0, 0, 0, 0, 0, 69, 140, 0, 0, 0, 43, 177, 159, 219, 196, 28, 0, 0, 100, 104, 39, 158, 70, 135, 17, 0, 11, 106, 111, 13, 0, 8, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 44, 0, 0, 0, 0, 0, 70, 164, 172, 30, 0, 0, 0, 0, 5, 9, 76, 126, 14, 0, 0, 0, 0, 176, 235, 229, 214, 181, 47, 0, 0, 143, 216, 111, 85, 140, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 30, 22, 0, 0, 0, 0, 25, 145, 176, 160, 2, 0, 0, 0, 11, 46, 0, 107, 38, 0, 0, 0, 0, 0, 3, 152, 10, 0, 0, 10, 113, 112, 118, 131, 0, 0, 0, 91, 96, 88, 239, 95, 0, 0, 0, 36, 69, 99, 31, 90, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 112, 55, 0, 0, 0, 0, 0, 160, 109, 149, 76, 0, 0, 0, 0, 5, 0, 74, 131, 0, 0, 0, 6, 86, 102, 145, 146, 0, 0, 0, 32, 228, 169, 190, 142, 107, 14, 0, 0, 34, 51, 2, 0, 32, 39, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 91, 15, 0, 0, 0, 0, 4, 114, 69, 175, 61, 0, 0, 0, 1, 4, 0, 141, 98, 0, 0, 0, 0, 10, 124, 118, 39, 67, 29, 0, 13, 149, 234, 139, 126, 104, 39, 0, 21, 83, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 141, 155, 87, 0, 0, 0, 7, 172, 55, 55, 178, 0, 0, 0, 1, 11, 0, 78, 158, 0, 0, 0, 19, 150, 154, 217, 135, 1, 0, 0, 63, 132, 101, 168, 144, 112, 15, 0, 15, 151, 103, 1, 0, 46, 53, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 134, 158, 76, 0, 0, 0, 0, 102, 59, 43, 180, 122, 0, 0, 0, 0, 1, 31, 60, 165, 0, 0, 0, 0, 139, 200, 218, 222, 59, 0, 0, 0, 167, 107, 145, 200, 82, 0, 0, 0, 41, 148, 103, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 36, 127, 156, 18, 0, 0, 0, 0, 61, 59, 102, 132, 0, 0, 0, 0, 0, 0, 68, 150, 0, 0, 0, 25, 158, 125, 209, 177, 113, 16, 0, 52, 177, 99, 147, 18, 84, 54, 0, 0, 51, 69, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 56, 78, 76, 11, 0, 0, 0, 73, 148, 107, 175, 103, 0, 0, 0, 56, 74, 64, 175, 61, 0, 0, 110, 170, 141, 237, 213, 61, 0, 0, 105, 181, 189, 92, 39, 165, 16, 0, 0, 37, 21, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 20, 27, 0, 0, 0, 0, 0, 108, 197, 182, 60, 0, 0, 0, 0, 37, 14, 52, 160, 0, 0, 0, 0, 14, 0, 36, 166, 0, 0, 0, 19, 165, 145, 218, 213, 64, 0, 0, 42, 159, 51, 165, 60, 140, 51, 0, 0, 96, 114, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 30, 29, 0, 0, 0, 0, 0, 80, 184, 174, 35, 0, 0, 0, 0, 69, 19, 116, 128, 0, 0, 0, 0, 0, 0, 96, 149, 0, 0, 0, 50, 184, 146, 211, 204, 9, 0, 0, 76, 144, 51, 186, 157, 115, 5, 0, 1, 92, 112, 23, 0, 10, 2, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 120, 131, 19, 0, 0, 0, 0, 42, 6, 87, 71, 0, 0, 0, 0, 0, 11, 142, 26, 0, 0, 71, 118, 160, 205, 131, 33, 0, 0, 145, 134, 147, 99, 127, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 58, 67, 4, 0, 0, 0, 0, 140, 108, 103, 46, 0, 0, 0, 0, 5, 0, 107, 32, 0, 0, 0, 6, 67, 77, 166, 115, 121, 26, 0, 56, 181, 164, 169, 125, 52, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 113, 126, 17, 0, 0, 0, 0, 27, 114, 107, 90, 0, 0, 0, 0, 0, 0, 131, 93, 0, 0, 0, 0, 4, 13, 171, 32, 0, 0, 0, 0, 107, 203, 178, 14, 0, 0, 0, 0, 30, 67, 53, 140, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 145, 159, 64, 0, 0, 0, 0, 33, 42, 46, 159, 0, 0, 0, 69, 29, 8, 136, 81, 0, 0, 74, 107, 186, 189, 149, 0, 0, 0, 125, 56, 176, 187, 175, 24, 0, 0, 82, 121, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 110, 123, 95, 3, 0, 0, 0, 66, 24, 0, 76, 74, 0, 0, 0, 0, 0, 27, 139, 23, 0, 0, 0, 0, 58, 118, 19, 0, 0, 0, 0, 79, 135, 8, 13, 0, 0, 0, 0, 134, 141, 128, 77, 0, 0, 0, 0, 10, 42, 30, 0, 0, 0 },
    { 0, 0, 1, 35, 33, 0, 0, 0, 0, 0, 58, 135, 141, 12, 0, 0, 0, 0, 18, 2, 116, 21, 0, 0, 0, 0, 0, 1, 129, 1, 0, 0, 0, 0, 48, 150, 124, 0, 0, 0, 0, 0, 148, 184, 145, 103, 13, 4, 0, 0, 96, 24, 0, 63, 85, 6, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 49, 35, 0, 0, 0, 0, 0, 7, 147, 137, 95, 5, 0, 0, 0, 0, 0, 0, 85, 121, 0, 0, 0, 0, 0, 0, 6, 134, 0, 0, 0, 0, 97, 125, 147, 125, 0, 0, 0, 0, 203, 134, 215, 177, 58, 0, 0, 0, 75, 108, 14, 2, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 86, 157, 174, 113, 0, 0, 0, 103, 131, 33, 67, 151, 0, 0, 0, 1, 12, 1, 149, 93, 0, 0, 26, 162, 172, 221, 209, 2, 0, 0, 125, 98, 131, 203, 201, 81, 0, 0, 131, 175, 101, 0, 4, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 74, 70, 37, 0, 0, 0, 0, 70, 90, 93, 143, 0, 0, 0, 0, 0, 5, 129, 58, 0, 0, 32, 133, 162, 176, 98, 0, 0, 0, 134, 135, 163, 154, 84, 0, 0, 0, 39, 49, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 10, 45, 38, 0, 0, 0, 0, 65, 174, 151, 198, 0, 0, 0, 0, 41, 58, 43, 201, 0, 0, 0, 0, 0, 0, 114, 141, 0, 0, 0, 10, 157, 195, 205, 33, 0, 0, 0, 53, 130, 184, 210, 104, 16, 0, 0, 26, 125, 60, 40, 84, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 139, 170, 162, 39, 0, 0, 0, 13, 46, 17, 167, 56, 0, 0, 0, 0, 0, 123, 196, 6, 0, 0, 8, 124, 174, 238, 63, 0, 0, 2, 101, 253, 210, 189, 201, 28, 0, 21, 155, 95, 9, 1, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 76, 107, 74, 0, 0, 0, 0, 61, 42, 1, 105, 0, 0, 0, 0, 0, 0, 16, 102, 0, 0, 0, 0, 0, 0, 95, 57, 0, 0, 0, 0, 5, 80, 172, 82, 0, 0, 0, 0, 104, 188, 16, 7, 0, 0, 0, 0, 28, 31, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 9, 19, 1, 0, 0, 0, 0, 8, 153, 174, 96, 0, 0, 0, 0, 0, 0, 56, 135, 0, 0, 0, 0, 0, 41, 180, 41, 0, 0, 21, 159, 187, 218, 85, 0, 0, 0, 131, 210, 196, 169, 160, 15, 0, 0, 56, 66, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 16, 89, 56, 0, 0, 0, 0, 0, 105, 120, 174, 62, 0, 0, 0, 0, 1, 0, 123, 118, 0, 0, 0, 0, 0, 0, 149, 75, 0, 0, 0, 0, 5, 79, 153, 9, 0, 0, 0, 109, 191, 230, 185, 114, 49, 0, 0, 23, 20, 0, 13, 35, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 56, 46, 0, 0, 0, 0, 0, 0, 102, 193, 65, 0, 0, 0, 0, 0, 0, 115, 128, 0, 0, 0, 0, 0, 70, 202, 28, 0, 2, 2, 0, 22, 201, 69, 56, 115, 184, 96, 0, 29, 228, 193, 239, 219, 125, 46, 0, 0, 17, 27, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 88, 96, 98, 43, 0, 0, 0, 36, 15, 0, 6, 118, 0, 0, 0, 0, 0, 0, 0, 101, 0, 0, 0, 61, 101, 97, 118, 132, 0, 0, 0, 93, 7, 0, 103, 157, 51, 0, 0, 16, 106, 94, 61, 0, 36, 12, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 62, 118, 44, 0, 0, 0, 0, 51, 84, 91, 95, 0, 0, 0, 0, 0, 41, 152, 22, 0, 0, 34, 149, 210, 177, 26, 4, 0, 5, 134, 157, 144, 179, 89, 4, 0, 15, 89, 27, 0, 4, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 147, 159, 87, 0, 0, 0, 0, 5, 2, 20, 199, 0, 0, 0, 0, 0, 0, 43, 180, 0, 0, 0, 0, 13, 18, 155, 62, 0, 0, 0, 84, 198, 201, 129, 4, 0, 0, 0, 56, 99, 31, 124, 135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 144, 143, 40, 0, 0, 0, 0, 20, 6, 31, 175, 52, 0, 0, 0, 0, 0, 1, 195, 79, 0, 0, 0, 0, 10, 135, 149, 8, 0, 0, 0, 0, 58, 229, 43, 15, 29, 8, 0, 0, 12, 120, 152, 126, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 151, 177, 70, 0, 0, 0, 0, 15, 27, 137, 72, 0, 0, 0, 0, 0, 38, 193, 20, 0, 0, 16, 159, 182, 200, 96, 0, 0, 0, 77, 112, 198, 227, 82, 0, 0, 0, 67, 173, 69, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 74, 111, 42, 0, 0, 0, 26, 197, 130, 215, 142, 0, 0, 0, 3, 39, 49, 217, 46, 0, 0, 0, 0, 66, 219, 84, 25, 10, 0, 0, 17, 219, 226, 164, 169, 151, 43, 0, 13, 72, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 68, 124, 74, 0, 0, 0, 5, 160, 76, 28, 155, 10, 0, 0, 8, 62, 0, 0, 139, 11, 0, 0, 0, 88, 146, 221, 146, 0, 0, 0, 0, 209, 165, 132, 145, 0, 0, 0, 0, 6, 0, 0, 130, 7, 0, 0, 0, 0, 0, 0, 12, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 62, 79, 14, 0, 0, 0, 37, 140, 75, 136, 85, 0, 0, 0, 0, 6, 38, 176, 19, 0, 0, 31, 123, 176, 237, 114, 0, 0, 0, 121, 114, 171, 95, 159, 108, 0, 0, 41, 56, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 46, 75, 26, 0, 0, 0, 0, 35, 92, 123, 97, 0, 0, 0, 0, 0, 31, 171, 41, 0, 0, 57, 148, 206, 214, 89, 0, 0, 16, 157, 161, 176, 141, 82, 0, 0, 0, 43, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 44, 25, 0, 0, 0, 0, 0, 68, 142, 133, 0, 0, 0, 0, 0, 29, 6, 146, 0, 0, 0, 0, 0, 0, 51, 152, 0, 0, 0, 0, 89, 137, 179, 56, 0, 0, 0, 0, 173, 122, 193, 48, 0, 0, 0, 0, 91, 73, 19, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 131, 127, 12, 0, 0, 0, 0, 47, 0, 191, 32, 0, 0, 0, 0, 0, 19, 171, 16, 0, 0, 0, 0, 11, 139, 59, 63, 0, 0, 0, 0, 83, 167, 59, 195, 0, 0, 0, 0, 87, 143, 95, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 114, 58, 0, 0, 0, 0, 0, 186, 93, 175, 28, 0, 0, 0, 0, 117, 20, 185, 50, 0, 0, 0, 0, 0, 42, 182, 6, 0, 0, 0, 0, 8, 168, 218, 71, 0, 0, 0, 0, 6, 98, 49, 163, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0 },
    { 0, 0, 0, 0, 30, 29, 0, 0, 0, 0, 0, 36, 189, 171, 0, 0, 0, 0, 0, 86, 53, 142, 4, 0, 0, 0, 0, 11, 32, 170, 0, 0, 0, 0, 134, 190, 244, 104, 8, 0, 0, 9, 212, 172, 166, 186, 50, 0, 0, 3, 106, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 28, 207, 194, 4, 0, 0, 0, 0, 62, 72, 179, 20, 0, 0, 0, 0, 0, 45, 197, 3, 0, 0, 46, 135, 93, 204, 79, 0, 0, 0, 157, 222, 245, 209, 52, 0, 0, 0, 33, 73, 25, 61, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 76, 162, 71, 0, 0, 0, 0, 23, 91, 65, 156, 0, 0, 0, 0, 0, 0, 93, 139, 0, 0, 0, 26, 171, 178, 212, 50, 0, 0, 0, 35, 188, 166, 173, 108, 0, 0, 0, 0, 0, 0, 85, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 143, 72, 0, 0, 0, 0, 0, 128, 149, 167, 0, 0, 0, 0, 0, 29, 76, 155, 0, 0, 0, 27, 145, 176, 221, 141, 0, 0, 0, 152, 230, 187, 82, 155, 99, 0, 0, 16, 20, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 122, 136, 23, 0, 0, 0, 0, 141, 64, 101, 115, 0, 0, 0, 0, 75, 23, 118, 93, 0, 0, 0, 0, 0, 9, 155, 15, 0, 0, 0, 0, 75, 171, 181, 149, 27, 0, 0, 0, 159, 68, 0, 25, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 11, 31, 2, 0, 0, 0, 0, 49, 166, 193, 108, 0, 0, 0, 0, 81, 81, 16, 192, 3, 0, 0, 0, 0, 0, 14, 187, 2, 0, 0, 36, 172, 199, 214, 185, 6, 0, 0, 117, 200, 212, 136, 167, 139, 11, 0, 10, 70, 26, 0, 0, 52, 15, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 11, 3, 0, 0, 0, 58, 171, 108, 117, 116, 145, 4, 0, 0, 44, 0, 0, 0, 118, 24, 0, 0, 0, 0, 0, 13, 134, 1, 0, 0, 0, 100, 123, 151, 184, 28, 0, 0, 0, 54, 129, 126, 15, 1, 0, 0, 0, 0, 19, 10, 0, 0, 0 },
    { 0, 0, 0, 9, 19, 0, 0, 0, 0, 0, 6, 133, 185, 54, 0, 0, 0, 0, 3, 44, 103, 128, 0, 0, 0, 0, 0, 0, 162, 113, 0, 0, 0, 9, 168, 200, 229, 85, 20, 2, 0, 34, 250, 230, 120, 148, 121, 30, 0, 1, 102, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 9, 60, 34, 0, 0, 0, 0, 57, 125, 133, 158, 7, 0, 0, 0, 36, 0, 0, 85, 51, 0, 0, 0, 0, 0, 0, 128, 24, 0, 3, 77, 119, 122, 95, 138, 0, 0, 25, 151, 55, 145, 215, 164, 26, 0, 2, 71, 106, 61, 2, 7, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 58, 28, 7, 0, 0, 0, 0, 53, 63, 76, 145, 0, 0, 0, 0, 0, 0, 28, 129, 0, 0, 0, 15, 108, 95, 182, 83, 5, 0, 0, 56, 173, 193, 107, 122, 118, 42, 0, 1, 63, 10, 0, 0, 10, 35, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 132, 124, 14, 0, 0, 0, 0, 1, 3, 147, 56, 0, 0, 0, 0, 0, 1, 161, 25, 60, 34, 0, 15, 153, 200, 157, 24, 81, 39, 0, 69, 185, 104, 108, 154, 18, 0, 0, 0, 0, 0, 0, 16, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 12, 9, 0, 0, 0, 0, 0, 0, 71, 121, 3, 0, 0, 0, 0, 0, 8, 192, 68, 0, 0, 0, 0, 0, 0, 133, 106, 0, 0, 0, 0, 137, 201, 215, 129, 4, 0, 0, 0, 117, 178, 189, 142, 10, 0, 0, 0, 2, 80, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 104, 162, 54, 0, 0, 0, 34, 193, 138, 208, 61, 0, 0, 0, 9, 34, 102, 211, 12, 0, 0, 97, 228, 227, 240, 82, 7, 0, 0, 189, 229, 162, 210, 223, 130, 0, 0, 34, 13, 0, 6, 24, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 112, 52, 0, 0, 0, 0, 0, 70, 58, 166, 37, 0, 0, 0, 0, 0, 0, 146, 29, 0, 0, 0, 0, 0, 7, 117, 0, 0, 0, 0, 0, 0, 81, 56, 0, 0, 0, 0, 0, 24, 155, 124, 104, 0, 0, 0, 0, 0, 0, 28, 55, 0, 0 },
    { 0, 0, 0, 23, 30, 0, 0, 0, 0, 0, 101, 167, 165, 36, 0, 0, 0, 0, 47, 6, 133, 113, 0, 0, 0, 0, 0, 0, 149, 101, 0, 0, 0, 6, 122, 153, 224, 114, 3, 0, 0, 83, 134, 173, 113, 142, 116, 2, 0, 57, 124, 58, 0, 0, 61, 24, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 102, 152, 79, 1, 0, 0, 33, 163, 100, 53, 166, 98, 0, 0, 0, 0, 0, 0, 71, 164, 0, 0, 0, 0, 48, 94, 134, 212, 14, 0, 0, 0, 216, 252, 252, 241, 75, 0, 0, 0, 48, 125, 130, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 107, 95, 8, 0, 0, 0, 0, 163, 115, 191, 12, 0, 0, 0, 0, 4, 135, 107, 0, 0, 0, 0, 0, 67, 211, 4, 0, 0, 0, 0, 0, 95, 203, 115, 131, 147, 83, 0, 0, 43, 111, 75, 47, 24, 20, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 24, 56, 38, 2, 0, 0, 0, 5, 113, 125, 122, 121, 0, 0, 0, 0, 0, 0, 0, 71, 72, 0, 0, 15, 63, 48, 19, 63, 79, 0, 0, 139, 74, 86, 135, 217, 44, 0, 0, 130, 7, 7, 126, 155, 95, 0, 0, 48, 121, 121, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 8, 49, 25, 0, 0, 0, 0, 0, 137, 221, 197, 78, 0, 0, 0, 0, 66, 7, 21, 158, 0, 0, 0, 0, 0, 0, 0, 150, 4, 0, 0, 9, 133, 154, 137, 192, 11, 0, 0, 32, 231, 172, 226, 204, 63, 0, 0, 0, 63, 113, 73, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 10, 21, 0, 0, 0, 0, 0, 34, 158, 171, 19, 0, 0, 0, 0, 10, 12, 150, 77, 0, 0, 0, 0, 0, 3, 131, 91, 0, 0, 0, 0, 115, 181, 224, 179, 44, 0, 0, 0, 142, 151, 200, 58, 0, 0, 0, 0, 12, 88, 83, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 28, 20, 0, 0, 0, 0, 0, 42, 184, 203, 94, 0, 0, 0, 0, 36, 58, 70, 201, 0, 0, 0, 0, 0, 0, 79, 218, 0, 0, 0, 16, 45, 40, 203, 156, 4, 0, 0, 131, 230, 219, 232, 143, 28, 0, 0, 25, 104, 124, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 8, 26, 0, 0, 0, 0, 0, 25, 83, 117, 0, 0, 0, 0, 0, 15, 20, 105, 0, 0, 0, 0, 0, 0, 93, 72, 14, 0, 0, 0, 48, 131, 166, 79, 19, 0, 0, 0, 110, 142, 73, 41, 0, 0, 0, 0, 77, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 25, 19, 0, 0, 0, 0, 0, 0, 109, 161, 3, 0, 0, 0, 0, 0, 3, 131, 104, 0, 0, 0, 0, 0, 0, 31, 158, 0, 0, 0, 0, 0, 24, 145, 133, 0, 0, 0, 0, 0, 30, 169, 203, 124, 73, 0, 0, 0, 0, 0, 32, 104, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 106, 132, 12, 0, 0, 0, 0, 68, 89, 119, 51, 0, 0, 0, 0, 39, 30, 129, 29, 0, 0, 0, 0, 0, 7, 124, 1, 0, 0, 0, 0, 0, 83, 83, 13, 0, 0, 0, 0, 2, 120, 114, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 12, 53, 7, 0, 0, 0, 0, 0, 77, 141, 106, 2, 0, 0, 0, 0, 0, 0, 139, 48, 0, 0, 0, 0, 0, 0, 149, 51, 0, 0, 0, 0, 35, 125, 200, 135, 11, 0, 0, 0, 134, 150, 82, 63, 77, 0, 0, 0, 69, 71, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 163, 117, 2, 0, 0, 0, 0, 36, 68, 164, 89, 0, 0, 0, 0, 0, 0, 99, 87, 0, 0, 65, 165, 168, 158, 185, 14, 0, 0, 181, 212, 191, 121, 113, 65, 0, 0, 21, 31, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 1, 35, 0, 0, 0, 0, 0, 0, 7, 116, 113, 16, 0, 0, 0, 0, 0, 0, 88, 122, 0, 0, 0, 0, 0, 0, 93, 104, 0, 0, 0, 0, 8, 96, 106, 6, 0, 0, 0, 0, 133, 142, 68, 57, 0, 0, 0, 0, 69, 108, 50, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 51, 29, 0, 0, 0, 0, 0, 0, 73, 120, 6, 0, 0, 0, 0, 0, 0, 11, 82, 0, 0, 0, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 3, 89, 183, 93, 7, 0, 0, 0, 20, 88, 111, 98, 58, 3, 0, 0, 2, 85, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 12, 19, 0, 0, 0, 0, 0, 43, 172, 156, 4, 0, 0, 0, 0, 136, 52, 235, 67, 0, 0, 0, 0, 21, 0, 189, 116, 0, 0, 0, 0, 62, 192, 239, 210, 78, 0, 0, 0, 145, 248, 239, 220, 54, 0, 0, 0, 47, 119, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 23, 28, 0, 0, 0, 0, 0, 0, 127, 156, 17, 0, 0, 0, 0, 0, 10, 118, 80, 0, 0, 0, 0, 0, 0, 87, 122, 0, 0, 0, 0, 21, 70, 162, 195, 62, 0, 0, 41, 157, 148, 206, 79, 12, 0, 0, 12, 105, 109, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 46, 55, 25, 0, 0, 0, 0, 111, 146, 140, 177, 68, 0, 0, 0, 0, 0, 0, 58, 123, 0, 0, 8, 49, 76, 99, 184, 72, 0, 32, 177, 184, 195, 142, 87, 17, 0, 0, 16, 32, 25, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 153, 113, 13, 0, 0, 0, 0, 31, 61, 124, 120, 0, 0, 0, 0, 0, 0, 50, 149, 0, 0, 0, 7, 80, 149, 218, 213, 164, 40, 0, 101, 243, 243, 125, 48, 39, 9, 0, 28, 137, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 39, 120, 41, 0, 0, 0, 0, 0, 76, 168, 174, 2, 0, 0, 0, 0, 0, 0, 82, 66, 0, 0, 0, 0, 0, 0, 68, 86, 0, 0, 82, 202, 205, 210, 223, 66, 0, 0, 70, 245, 226, 236, 124, 1, 0, 0, 0, 18, 45, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 117, 158, 160, 117, 0, 0, 0, 115, 89, 6, 78, 214, 0, 0, 0, 40, 4, 0, 167, 164, 0, 0, 0, 0, 3, 107, 171, 19, 0, 0, 0, 0, 87, 236, 113, 96, 75, 7, 0, 0, 157, 189, 148, 98, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 146, 106, 56, 0, 0, 0, 0, 72, 129, 151, 209, 42, 0, 0, 0, 0, 0, 0, 135, 89, 0, 9, 101, 175, 194, 215, 245, 85, 0, 30, 197, 246, 247, 242, 154, 12, 0, 0, 3, 12, 19, 17, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 7, 29, 5, 0, 0, 0, 0, 17, 140, 219, 171, 14, 0, 0, 0, 7, 4, 36, 165, 89, 0, 0, 0, 0, 0, 0, 126, 96, 0, 0, 62, 152, 178, 200, 238, 63, 0, 24, 208, 248, 242, 227, 113, 10, 0, 0, 2, 51, 47, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 30, 8, 0, 0, 0, 0, 0, 27, 205, 127, 4, 0, 0, 0, 0, 0, 9, 104, 89, 0, 0, 0, 6, 9, 14, 106, 121, 0, 32, 188, 237, 245, 246, 233, 41, 0, 29, 186, 226, 196, 102, 105, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 10, 107, 49, 0, 0, 0, 0, 0, 9, 113, 169, 45, 0, 0, 0, 0, 0, 0, 30, 136, 0, 0, 0, 0, 0, 0, 88, 113, 0, 0, 95, 156, 139, 156, 199, 10, 0, 0, 149, 165, 243, 179, 76, 0, 0, 0, 16, 60, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 1, 22, 1, 0, 0, 0, 0, 0, 8, 122, 98, 0, 0, 0, 5, 2, 0, 0, 106, 22, 0, 16, 117, 114, 32, 0, 70, 48, 0, 37, 115, 14, 116, 118, 151, 6, 0, 0, 53, 91, 110, 156, 136, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 39, 25, 1, 0, 0, 0, 102, 143, 126, 171, 119, 0, 0, 0, 0, 0, 0, 166, 70, 0, 0, 0, 0, 2, 118, 89, 0, 0, 0, 0, 0, 50, 186, 18, 69, 73, 0, 0, 0, 41, 165, 149, 86, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 27, 38, 13, 0, 0, 0, 0, 0, 74, 122, 125, 79, 0, 0, 0, 0, 0, 0, 13, 156, 0, 0, 0, 0, 0, 5, 133, 112, 0, 0, 0, 0, 81, 155, 51, 0, 0, 0, 0, 49, 206, 121, 122, 122, 119, 28, 0, 31, 74, 50, 27, 8, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 2, 53, 17, 0, 0, 0, 0, 12, 122, 174, 143, 0, 0, 0, 0, 11, 36, 5, 160, 0, 0, 0, 0, 0, 0, 54, 154, 0, 0, 0, 6, 90, 135, 198, 170, 52, 0, 0, 86, 128, 148, 106, 40, 61, 0, 0, 44, 91, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79, 126, 125, 0, 0, 0, 0, 75, 158, 1, 131, 12, 0, 0, 0, 39, 32, 2, 142, 8, 0, 0, 0, 0, 18, 120, 168, 1, 0, 0, 9, 116, 160, 185, 144, 31, 0, 0, 61, 106, 119, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 96, 84, 11, 0, 0, 0, 18, 32, 0, 159, 78, 0, 0, 0, 0, 0, 29, 179, 20, 0, 0, 0, 0, 39, 184, 43, 33, 49, 24, 0, 0, 153, 205, 159, 160, 117, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 26, 2, 0, 0, 0, 0, 0, 41, 181, 92, 0, 0, 0, 0, 0, 62, 26, 142, 0, 0, 0, 0, 0, 0, 85, 118, 0, 0, 0, 1, 95, 136, 199, 93, 1, 0, 0, 39, 165, 161, 65, 121, 28, 0, 0, 19, 79, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 131, 103, 30, 0, 0, 0, 0, 77, 10, 19, 130, 28, 0, 0, 0, 0, 0, 0, 50, 75, 0, 0, 5, 92, 107, 80, 132, 33, 0, 0, 71, 107, 71, 206, 177, 0, 0, 0, 34, 86, 72, 18, 82, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 129, 146, 67, 0, 0, 0, 0, 44, 54, 2, 162, 0, 0, 0, 0, 0, 0, 13, 156, 0, 0, 0, 5, 114, 139, 177, 175, 88, 27, 0, 32, 111, 128, 148, 104, 90, 26, 0, 16, 156, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 130, 94, 0, 0, 0, 0, 18, 126, 35, 130, 0, 0, 0, 0, 0, 0, 18, 145, 0, 0, 0, 10, 86, 112, 186, 179, 63, 0, 0, 92, 122, 194, 94, 74, 86, 0, 0, 27, 46, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 4, 43, 14, 0, 0, 0, 0, 16, 92, 134, 111, 0, 0, 0, 0, 0, 0, 43, 130, 0, 0, 0, 0, 4, 24, 108, 90, 0, 0, 0, 0, 107, 125, 163, 3, 0, 0, 0, 0, 136, 132, 148, 80, 0, 0, 0, 0, 80, 33, 3, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 25, 48, 4, 0, 0, 0, 0, 77, 179, 175, 100, 0, 0, 0, 0, 63, 16, 59, 142, 0, 0, 0, 0, 0, 13, 159, 51, 0, 0, 0, 0, 40, 172, 26, 0, 5, 0, 0, 5, 176, 140, 116, 156, 77, 0, 0, 6, 120, 113, 80, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 52, 78, 65, 18, 0, 0, 0, 105, 90, 68, 93, 172, 36, 0, 0, 0, 0, 0, 0, 119, 71, 0, 0, 36, 159, 137, 135, 168, 2, 0, 0, 81, 186, 212, 226, 172, 56, 0, 0, 0, 51, 49, 2, 18, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 144, 151, 12, 0, 0, 0, 13, 127, 37, 97, 57, 0, 0, 0, 0, 0, 8, 151, 13, 0, 0, 16, 86, 99, 150, 131, 0, 0, 0, 130, 110, 178, 159, 142, 69, 0, 0, 94, 128, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 128, 130, 3, 0, 0, 0, 39, 94, 0, 111, 30, 0, 0, 0, 0, 0, 0, 132, 11, 0, 0, 1, 72, 116, 115, 174, 2, 0, 0, 49, 123, 74, 192, 106, 3, 0, 0, 11, 123, 125, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 18, 50, 2, 0, 0, 0, 0, 0, 32, 101, 112, 22, 0, 0, 0, 0, 0, 0, 40, 135, 0, 0, 0, 0, 30, 106, 22, 134, 0, 0, 0, 0, 103, 59, 199, 91, 0, 0, 0, 0, 129, 80, 193, 26, 0, 0, 0, 0, 61, 76, 20, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 144, 140, 4, 0, 0, 0, 1, 117, 34, 125, 23, 0, 0, 0, 0, 6, 18, 146, 4, 0, 0, 0, 74, 130, 206, 171, 25, 0, 0, 37, 126, 114, 78, 39, 20, 0, 0, 50, 127, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 34, 15, 0, 0, 0, 0, 3, 92, 170, 128, 0, 0, 0, 0, 43, 65, 65, 151, 0, 0, 0, 0, 0, 6, 120, 99, 0, 0, 0, 0, 67, 226, 163, 11, 0, 0, 0, 0, 137, 242, 147, 26, 22, 0, 0, 0, 57, 53, 81, 118, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 121, 145, 27, 0, 0, 0, 18, 138, 65, 62, 101, 0, 0, 0, 0, 0, 14, 150, 28, 0, 0, 59, 132, 137, 188, 170, 2, 0, 40, 159, 84, 152, 115, 125, 31, 0, 6, 98, 108, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 62, 119, 80, 0, 0, 0, 0, 38, 74, 46, 144, 0, 0, 0, 0, 0, 2, 131, 55, 0, 0, 0, 0, 1, 94, 39, 0, 0, 0, 0, 0, 55, 126, 0, 0, 0, 0, 0, 0, 93, 177, 137, 74, 0, 0, 0, 0, 7, 47, 33, 6, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 144, 144, 121, 38, 0, 0, 0, 2, 25, 1, 95, 172, 0, 0, 0, 0, 0, 0, 165, 134, 0, 0, 0, 0, 7, 130, 116, 4, 0, 0, 0, 0, 126, 210, 100, 104, 96, 25, 0, 31, 179, 138, 64, 38, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 64, 0, 0, 0, 0, 5, 131, 79, 139, 0, 0, 0, 0, 1, 29, 26, 144, 0, 0, 0, 48, 118, 138, 198, 144, 53, 0, 0, 146, 94, 145, 53, 83, 68, 0, 0, 41, 47, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 6, 41, 12, 0, 0, 0, 0, 0, 104, 110, 114, 39, 0, 0, 0, 0, 5, 0, 19, 109, 0, 0, 0, 0, 4, 8, 6, 105, 0, 0, 0, 85, 89, 87, 134, 176, 94, 9, 0, 101, 25, 19, 119, 52, 61, 14, 0, 6, 91, 86, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 103, 99, 1, 0, 2, 0, 0, 72, 69, 101, 41, 0, 0, 0, 0, 0, 0, 109, 22, 0, 0, 0, 47, 90, 129, 170, 3, 0, 0, 23, 140, 144, 150, 39, 0, 0, 0, 7, 119, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 152, 120, 0, 0, 0, 0, 52, 158, 32, 108, 16, 0, 0, 0, 47, 47, 0, 124, 15, 0, 0, 0, 31, 71, 122, 157, 0, 0, 0, 64, 139, 138, 187, 97, 0, 0, 0, 73, 114, 111, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 66, 20, 0, 0, 0, 0, 0, 0, 88, 68, 0, 0, 0, 0, 0, 0, 60, 81, 0, 0, 0, 0, 0, 0, 87, 64, 0, 0, 0, 0, 69, 96, 163, 10, 0, 0, 0, 0, 107, 101, 112, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 20, 21, 0, 0, 0, 0, 0, 7, 196, 212, 130, 18, 0, 0, 0, 4, 86, 52, 247, 101, 0, 0, 0, 0, 0, 0, 245, 101, 0, 0, 0, 0, 45, 188, 253, 180, 21, 0, 0, 0, 186, 254, 195, 205, 165, 25, 0, 0, 94, 102, 9, 7, 50, 10, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 5, 39, 0, 0, 0, 0, 0, 0, 89, 191, 58, 0, 0, 0, 0, 0, 17, 68, 131, 0, 0, 0, 0, 0, 0, 99, 120, 0, 0, 0, 0, 72, 145, 223, 96, 0, 0, 0, 0, 191, 190, 149, 154, 24, 0, 0, 0, 73, 55, 0, 19, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 40, 26, 0, 0, 0, 0, 0, 9, 225, 161, 0, 0, 0, 0, 0, 0, 14, 131, 0, 0, 0, 0, 0, 43, 111, 152, 0, 0, 0, 0, 130, 158, 231, 161, 0, 0, 0, 3, 181, 148, 96, 98, 2, 0, 0, 0, 93, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 127, 157, 146, 44, 0, 0, 0, 41, 78, 2, 130, 65, 0, 0, 0, 0, 0, 33, 129, 6, 0, 0, 0, 0, 18, 145, 4, 0, 17, 1, 0, 0, 81, 124, 0, 23, 119, 3, 0, 0, 57, 152, 135, 124, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 112, 115, 124, 48, 0, 0, 0, 2, 17, 0, 58, 134, 0, 0, 0, 0, 0, 0, 122, 64, 0, 0, 0, 0, 0, 70, 87, 0, 0, 0, 0, 0, 30, 146, 6, 42, 43, 0, 0, 0, 68, 147, 114, 71, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98, 119, 108, 15, 0, 0, 0, 0, 21, 0, 142, 16, 0, 0, 0, 0, 0, 47, 116, 0, 0, 0, 0, 0, 28, 144, 9, 0, 0, 0, 0, 0, 143, 142, 110, 121, 116, 61, 0, 0, 98, 76, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 13, 31, 0, 0, 0, 0, 0, 29, 161, 186, 45, 0, 0, 0, 0, 150, 87, 81, 124, 0, 0, 0, 0, 28, 6, 81, 122, 0, 0, 0, 0, 14, 71, 183, 50, 0, 0, 0, 0, 98, 247, 221, 143, 39, 0, 0, 0, 45, 104, 9, 46, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 16, 46, 6, 0, 0, 0, 0, 61, 145, 130, 119, 0, 0, 0, 0, 52, 28, 0, 68, 76, 0, 0, 0, 15, 10, 0, 36, 110, 0, 0, 115, 108, 128, 126, 124, 47, 0, 0, 133, 59, 39, 175, 234, 54, 0, 0, 3, 81, 102, 47, 10, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 22, 40, 1, 0, 0, 0, 0, 78, 124, 122, 60, 0, 0, 0, 0, 0, 0, 10, 96, 0, 0, 0, 0, 0, 38, 74, 100, 0, 0, 0, 0, 118, 146, 195, 21, 0, 0, 0, 0, 147, 152, 93, 103, 1, 0, 0, 0, 36, 11, 0, 37, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 13, 11, 0, 0, 0, 0, 49, 163, 168, 180, 119, 0, 0, 0, 7, 10, 22, 137, 100, 0, 0, 68, 212, 236, 242, 190, 53, 0, 0, 165, 222, 139, 114, 143, 51, 0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 96, 97, 41, 0, 0, 0, 0, 158, 76, 44, 137, 0, 0, 0, 0, 47, 0, 14, 140, 0, 0, 0, 0, 0, 20, 154, 63, 0, 0, 0, 0, 10, 148, 118, 45, 0, 0, 0, 0, 108, 181, 100, 103, 33, 0, 0, 0, 19, 10, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 173, 153, 0, 0, 0, 0, 10, 117, 53, 160, 14, 0, 0, 0, 0, 0, 39, 176, 0, 0, 0, 0, 76, 156, 214, 145, 0, 0, 0, 36, 181, 189, 147, 181, 19, 0, 0, 36, 178, 85, 0, 58, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 15, 51, 4, 0, 0, 0, 0, 11, 135, 207, 79, 0, 0, 0, 0, 8, 31, 35, 159, 0, 0, 0, 0, 0, 0, 59, 155, 0, 0, 0, 0, 79, 95, 175, 71, 0, 0, 0, 31, 215, 215, 207, 167, 19, 0, 0, 8, 115, 95, 0, 35, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 67, 60, 0, 0, 0, 0, 3, 36, 54, 67, 0, 0, 0, 0, 0, 0, 77, 23, 0, 0, 0, 0, 38, 114, 72, 0, 0, 0, 0, 0, 82, 162, 38, 0, 0, 0, 0, 0, 0, 10, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 168, 97, 0, 0, 0, 0, 0, 117, 70, 156, 0, 0, 0, 0, 0, 59, 69, 148, 0, 0, 0, 0, 35, 76, 157, 54, 0, 0, 0, 0, 191, 251, 170, 8, 0, 0, 0, 0, 118, 92, 104, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 5, 45, 54, 11, 0, 0, 0, 0, 59, 207, 216, 139, 0, 0, 0, 0, 0, 0, 29, 180, 0, 0, 0, 0, 0, 0, 115, 197, 0, 0, 0, 0, 81, 175, 241, 157, 7, 0, 0, 63, 238, 229, 73, 108, 121, 1, 0, 37, 97, 15, 0, 0, 74, 13, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 16, 2, 0, 0, 0, 0, 15, 111, 175, 112, 0, 0, 0, 0, 20, 49, 11, 159, 0, 0, 0, 0, 0, 0, 55, 162, 0, 0, 0, 0, 139, 178, 235, 132, 0, 0, 0, 39, 219, 177, 108, 132, 104, 27, 0, 0, 56, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 41, 16, 0, 0, 0, 0, 0, 0, 78, 131, 65, 0, 0, 0, 0, 0, 0, 4, 135, 0, 0, 0, 0, 0, 0, 45, 160, 0, 0, 0, 4, 104, 125, 206, 148, 0, 0, 0, 72, 134, 143, 60, 75, 0, 0, 0, 29, 104, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 13, 26, 2, 0, 0, 0, 0, 38, 171, 185, 71, 0, 0, 0, 0, 0, 0, 133, 107, 0, 0, 0, 0, 0, 0, 176, 47, 0, 0, 0, 7, 170, 214, 201, 79, 0, 0, 0, 53, 212, 172, 67, 142, 122, 22, 0, 4, 51, 7, 0, 0, 62, 47, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 9, 32, 4, 0, 0, 0, 0, 0, 144, 173, 145, 20, 0, 0, 0, 0, 0, 0, 135, 144, 0, 0, 0, 0, 0, 0, 41, 185, 0, 0, 0, 0, 88, 141, 133, 203, 7, 0, 0, 0, 226, 222, 249, 237, 72, 0, 0, 0, 63, 124, 55, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 27, 46, 5, 0, 0, 0, 0, 0, 94, 178, 108, 0, 0, 0, 0, 0, 0, 22, 153, 0, 0, 0, 0, 0, 0, 54, 140, 0, 0, 0, 0, 58, 140, 209, 127, 0, 0, 0, 9, 207, 230, 179, 201, 14, 0, 0, 5, 120, 92, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131, 151, 65, 0, 0, 0, 0, 16, 147, 128, 224, 64, 0, 0, 0, 0, 156, 218, 243, 82, 0, 0, 0, 55, 172, 55, 249, 87, 89, 65, 0, 62, 203, 189, 215, 219, 225, 103, 0, 3, 132, 93, 2, 49, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 73, 4, 0, 0, 0, 0, 0, 0, 104, 110, 0, 0, 0, 0, 0, 11, 52, 156, 61, 33, 0, 30, 168, 133, 166, 134, 21, 0, 0, 27, 153, 125, 111, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 174, 155, 97, 24, 0, 0, 0, 4, 49, 47, 130, 225, 3, 0, 0, 0, 0, 1, 166, 223, 0, 0, 0, 0, 44, 182, 227, 75, 0, 0, 0, 0, 91, 243, 108, 60, 54, 0, 0, 0, 2, 81, 169, 152, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 34, 20, 0, 0, 0, 0, 2, 96, 161, 141, 61, 0, 0, 0, 28, 87, 0, 0, 129, 0, 0, 0, 0, 0, 0, 30, 88, 0, 0, 91, 118, 101, 98, 180, 52, 0, 0, 175, 154, 194, 177, 107, 60, 0, 0, 14, 82, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 127, 122, 39, 0, 0, 0, 0, 32, 44, 37, 169, 7, 0, 0, 0, 0, 0, 0, 121, 25, 0, 0, 36, 132, 156, 169, 198, 104, 18, 0, 111, 167, 69, 162, 95, 0, 0, 0, 15, 113, 132, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 32, 12, 0, 0, 0, 0, 16, 157, 115, 181, 38, 0, 0, 0, 33, 31, 7, 166, 74, 0, 0, 0, 1, 164, 188, 220, 174, 98, 10, 0, 3, 212, 165, 75, 20, 126, 53, 0, 0, 19, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 31, 37, 0, 0, 0, 0, 0, 50, 135, 166, 14, 0, 0, 0, 43, 110, 1, 93, 35, 0, 0, 0, 118, 85, 2, 146, 8, 0, 0, 0, 139, 191, 202, 140, 0, 0, 0, 30, 71, 147, 231, 92, 0, 0, 0, 31, 121, 76, 14, 56, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 34, 48, 0, 0, 0, 0, 0, 0, 62, 114, 0, 0, 0, 0, 0, 0, 72, 86, 0, 0, 0, 0, 0, 0, 113, 49, 0, 0, 0, 0, 92, 126, 154, 5, 0, 0, 0, 0, 120, 123, 111, 98, 12, 0, 0, 0, 9, 5, 0, 29, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 22, 60, 12, 0, 0, 0, 0, 0, 45, 95, 130, 33, 0, 0, 0, 0, 0, 0, 17, 116, 0, 0, 0, 0, 0, 0, 0, 103, 13, 0, 0, 6, 119, 113, 89, 124, 14, 0, 0, 10, 134, 39, 136, 174, 0, 0, 0, 0, 33, 103, 79, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 65, 0, 0, 0, 0, 0, 0, 0, 145, 26, 0, 0, 0, 0, 0, 0, 150, 40, 51, 35, 0, 28, 152, 155, 187, 109, 46, 1, 0, 40, 193, 149, 42, 0, 0, 0, 0, 0, 28, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 47, 24, 0, 0, 0, 0, 0, 54, 179, 159, 0, 0, 0, 0, 0, 2, 1, 160, 2, 0, 0, 0, 0, 0, 18, 163, 0, 0, 0, 7, 76, 83, 174, 191, 67, 0, 0, 130, 197, 230, 140, 42, 0, 0, 0, 55, 119, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 93, 0, 0, 0, 0, 0, 0, 72, 210, 89, 0, 0, 0, 0, 0, 0, 123, 112, 0, 0, 0, 0, 0, 97, 215, 119, 81, 81, 43, 0, 0, 212, 193, 162, 168, 160, 78, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 17, 13, 0, 0, 0, 0, 0, 24, 181, 179, 105, 0, 0, 0, 0, 0, 10, 8, 61, 64, 0, 0, 0, 1, 5, 11, 80, 74, 0, 0, 57, 190, 210, 248, 226, 93, 0, 0, 179, 189, 176, 95, 44, 89, 0, 0, 37, 40, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108, 134, 19, 0, 0, 0, 0, 62, 59, 12, 122, 0, 0, 0, 0, 14, 0, 0, 132, 4, 0, 0, 0, 0, 16, 105, 158, 12, 0, 0, 0, 0, 93, 190, 165, 129, 7, 0, 0, 0, 8, 32, 0, 28, 90, 1, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 23, 106, 16, 0, 0, 0, 0, 0, 25, 131, 147, 15, 0, 0, 0, 0, 0, 0, 98, 110, 0, 0, 0, 0, 0, 0, 87, 107, 0, 0, 0, 8, 127, 142, 186, 38, 0, 0, 0, 19, 229, 223, 172, 150, 6, 0, 0, 0, 11, 8, 0, 25, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 31, 146, 147, 1, 0, 0, 0, 0, 82, 179, 206, 25, 0, 0, 0, 0, 18, 120, 162, 5, 0, 0, 0, 0, 0, 73, 89, 0, 101, 3, 0, 30, 154, 206, 73, 88, 114, 0, 0, 31, 104, 69, 100, 79, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 15, 11, 0, 0, 0, 0, 0, 31, 184, 177, 87, 4, 0, 0, 0, 2, 42, 65, 116, 85, 0, 0, 0, 0, 0, 0, 5, 105, 0, 0, 45, 150, 157, 145, 186, 60, 0, 0, 164, 239, 246, 178, 162, 139, 0, 0, 21, 71, 27, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 43, 55, 3, 0, 0, 0, 0, 0, 187, 243, 149, 109, 21, 0, 0, 0, 34, 62, 67, 101, 127, 0, 0, 0, 3, 0, 0, 12, 164, 0, 0, 152, 229, 216, 143, 196, 140, 0, 0, 176, 252, 251, 243, 250, 57, 0, 0, 9, 42, 35, 3, 61, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 114, 158, 159, 90, 0, 0, 0, 94, 144, 12, 11, 142, 0, 0, 0, 1, 0, 0, 63, 96, 0, 0, 18, 158, 185, 184, 169, 8, 0, 0, 107, 129, 131, 184, 192, 0, 0, 0, 108, 165, 81, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 31, 15, 0, 0, 0, 0, 0, 9, 125, 132, 3, 0, 0, 0, 0, 0, 0, 125, 46, 0, 0, 0, 0, 3, 16, 131, 44, 0, 0, 0, 0, 129, 175, 216, 118, 3, 0, 0, 0, 124, 113, 138, 88, 3, 0, 0, 0, 7, 85, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 31, 43, 0, 0, 0, 0, 0, 12, 184, 228, 166, 23, 0, 0, 0, 0, 10, 26, 50, 129, 0, 0, 0, 0, 0, 0, 90, 112, 0, 0, 73, 155, 163, 151, 158, 0, 0, 0, 184, 200, 234, 217, 148, 0, 0, 0, 83, 117, 39, 16, 102, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 126, 189, 171, 45, 0, 0, 0, 0, 31, 61, 53, 126, 0, 0, 0, 0, 0, 4, 116, 87, 0, 17, 121, 172, 187, 199, 141, 1, 0, 62, 251, 252, 224, 170, 187, 14, 0, 15, 80, 49, 7, 0, 71, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 35, 41, 15, 0, 0, 0, 0, 19, 136, 139, 154, 4, 0, 0, 0, 0, 0, 0, 126, 39, 0, 0, 0, 8, 11, 8, 152, 14, 0, 0, 43, 160, 138, 206, 119, 0, 0, 0, 108, 60, 100, 161, 161, 96, 18, 0, 21, 113, 62, 0, 2, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 90, 126, 85, 0, 0, 0, 67, 180, 102, 66, 210, 0, 0, 0, 88, 42, 0, 96, 188, 0, 0, 0, 0, 0, 33, 188, 31, 0, 0, 0, 0, 13, 159, 90, 71, 31, 0, 0, 0, 89, 227, 187, 95, 0, 0, 0, 0, 10, 42, 12, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 216, 212, 29, 0, 0, 0, 0, 0, 124, 237, 34, 0, 0, 0, 0, 0, 180, 252, 216, 185, 200, 145, 0, 0, 28, 81, 93, 111, 91, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 99, 165, 156, 6, 0, 0, 0, 12, 105, 70, 109, 66, 0, 0, 0, 0, 0, 0, 66, 93, 0, 0, 32, 88, 88, 158, 171, 14, 0, 0, 101, 177, 157, 181, 198, 3, 0, 0, 58, 149, 85, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 140, 162, 150, 68, 0, 0, 0, 13, 96, 70, 106, 180, 0, 0, 0, 0, 0, 2, 177, 141, 0, 0, 0, 0, 6, 133, 102, 5, 0, 0, 0, 0, 80, 209, 102, 99, 77, 0, 0, 0, 56, 168, 116, 101, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 177, 168, 60, 1, 0, 0, 0, 8, 2, 16, 180, 93, 0, 0, 0, 0, 0, 0, 166, 101, 0, 0, 0, 0, 0, 79, 172, 18, 0, 0, 0, 0, 56, 220, 54, 0, 0, 0, 0, 0, 46, 153, 155, 140, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 101, 9, 0, 0, 0, 0, 3, 72, 49, 164, 45, 0, 0, 0, 0, 0, 0, 118, 109, 0, 0, 0, 0, 87, 162, 183, 68, 0, 0, 0, 0, 128, 175, 212, 61, 0, 0, 0, 0, 21, 29, 32, 134, 3, 0, 0, 0, 0, 0, 0, 21, 2, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 82, 53, 0, 0, 0, 7, 185, 195, 181, 169, 109, 0, 0, 1, 39, 13, 0, 15, 135, 0, 0, 0, 0, 0, 18, 140, 48, 0, 0, 12, 73, 96, 155, 101, 2, 0, 0, 146, 168, 101, 92, 31, 0, 0, 0, 17, 1, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 142, 108, 12, 0, 0, 0, 0, 72, 70, 121, 101, 0, 0, 0, 0, 0, 0, 122, 90, 0, 0, 0, 0, 0, 39, 153, 9, 0, 0, 0, 1, 134, 191, 152, 123, 129, 45, 0, 31, 89, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 5, 55, 21, 0, 0, 0, 0, 57, 181, 245, 95, 0, 0, 0, 0, 20, 54, 75, 173, 0, 0, 0, 0, 0, 0, 0, 120, 0, 0, 0, 6, 112, 147, 148, 164, 0, 0, 0, 72, 198, 192, 230, 159, 0, 0, 0, 31, 126, 89, 11, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 115, 146, 82, 13, 0, 0, 0, 0, 12, 55, 136, 138, 0, 0, 0, 0, 0, 0, 46, 111, 0, 0, 0, 0, 0, 11, 135, 16, 0, 0, 0, 0, 0, 102, 54, 19, 0, 0, 0, 0, 19, 160, 172, 128, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 41, 3, 0, 0, 0, 0, 32, 186, 150, 126, 0, 0, 0, 0, 0, 5, 57, 102, 0, 0, 68, 133, 111, 118, 150, 2, 0, 0, 153, 248, 213, 212, 66, 0, 0, 0, 5, 8, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 42, 92, 85, 0, 0, 0, 0, 202, 225, 215, 212, 64, 0, 0, 0, 35, 36, 25, 31, 148, 0, 0, 0, 0, 0, 32, 127, 91, 0, 0, 20, 101, 140, 213, 189, 9, 0, 0, 89, 221, 136, 70, 71, 6, 0, 0, 19, 34, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 75, 127, 107, 12, 0, 0, 0, 0, 111, 127, 103, 139, 0, 0, 0, 0, 0, 0, 8, 99, 0, 0, 79, 139, 87, 119, 143, 15, 0, 0, 179, 255, 235, 255, 131, 4, 0, 0, 47, 59, 8, 4, 47, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 58, 157, 182, 10, 0, 0, 0, 59, 151, 70, 172, 1, 0, 0, 0, 10, 15, 159, 91, 0, 0, 0, 0, 41, 167, 45, 0, 0, 0, 0, 0, 199, 222, 149, 150, 28, 0, 0, 0, 133, 29, 0, 21, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 8, 10, 0, 0, 0, 0, 0, 9, 124, 137, 22, 0, 0, 0, 0, 0, 2, 127, 70, 0, 0, 0, 0, 3, 1, 161, 36, 0, 0, 0, 34, 196, 196, 104, 0, 0, 0, 0, 26, 173, 144, 155, 126, 73, 40, 0, 0, 3, 0, 3, 37, 72, 11, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 157, 180, 106, 8, 0, 0, 0, 0, 0, 8, 173, 127, 0, 0, 0, 0, 0, 0, 177, 118, 0, 0, 0, 0, 8, 125, 155, 9, 0, 0, 0, 0, 76, 238, 80, 73, 96, 24, 0, 0, 27, 112, 121, 108, 55, 6, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 90, 126, 117, 1, 0, 0, 0, 81, 129, 79, 182, 0, 0, 0, 0, 28, 40, 171, 86, 0, 0, 0, 0, 48, 176, 46, 9, 6, 0, 0, 13, 208, 217, 110, 137, 107, 0, 0, 64, 179, 46, 0, 0, 0, 0, 0, 9, 19, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 131, 139, 147, 3, 0, 0, 0, 55, 72, 0, 141, 31, 0, 0, 0, 2, 2, 7, 170, 11, 0, 0, 14, 114, 115, 86, 150, 0, 0, 0, 50, 151, 87, 217, 91, 0, 0, 0, 3, 128, 143, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 21, 54, 12, 0, 0, 0, 0, 0, 73, 126, 135, 85, 0, 0, 0, 0, 0, 0, 3, 163, 0, 0, 0, 20, 111, 101, 40, 183, 0, 0, 0, 92, 85, 68, 234, 163, 0, 0, 0, 63, 143, 141, 154, 189, 15, 0, 0, 0, 45, 29, 0, 54, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 156, 113, 0, 0, 0, 0, 9, 149, 10, 156, 4, 0, 0, 0, 0, 53, 112, 144, 0, 0, 0, 4, 45, 105, 160, 23, 0, 0, 0, 57, 228, 184, 153, 133, 16, 0, 0, 65, 74, 0, 0, 32, 98, 7, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 139, 61, 0, 0, 0, 0, 8, 137, 95, 117, 0, 0, 0, 0, 2, 44, 155, 49, 0, 0, 0, 0, 2, 112, 82, 0, 0, 0, 0, 0, 71, 213, 98, 75, 0, 0, 0, 0, 102, 134, 25, 70, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 85, 107, 47, 0, 0, 0, 33, 177, 26, 72, 84, 0, 0, 0, 3, 43, 87, 135, 5, 0, 0, 0, 86, 145, 51, 1, 0, 0, 0, 0, 180, 62, 8, 0, 0, 0, 0, 28, 196, 127, 127, 59, 0, 0, 0, 9, 22, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 47, 3, 0, 0, 0, 0, 68, 141, 103, 165, 58, 0, 0, 0, 43, 2, 0, 90, 122, 0, 0, 0, 0, 50, 118, 210, 129, 29, 0, 0, 0, 167, 200, 84, 88, 168, 29, 0, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 105, 114, 2, 0, 0, 0, 0, 21, 3, 117, 0, 0, 0, 0, 0, 0, 82, 88, 0, 0, 0, 0, 1, 76, 85, 0, 0, 0, 0, 0, 82, 147, 41, 52, 0, 0, 0, 11, 141, 97, 74, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 122, 76, 8, 0, 0, 0, 0, 5, 64, 118, 186, 115, 0, 0, 0, 0, 0, 0, 53, 183, 0, 0, 0, 0, 0, 10, 139, 110, 73, 36, 0, 0, 96, 175, 240, 154, 86, 11, 0, 0, 100, 79, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 17, 12, 0, 0, 0, 0, 0, 21, 172, 182, 37, 0, 0, 0, 0, 87, 132, 176, 91, 0, 0, 0, 0, 15, 18, 205, 53, 0, 0, 0, 0, 11, 145, 80, 15, 21, 0, 0, 0, 113, 240, 167, 195, 138, 0, 0, 0, 60, 115, 71, 48, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 45, 125, 143, 39, 0, 0, 0, 136, 110, 1, 103, 60, 0, 0, 0, 22, 0, 76, 151, 3, 0, 0, 0, 34, 114, 83, 5, 0, 0, 0, 0, 186, 219, 132, 122, 21, 0, 0, 0, 138, 42, 2, 33, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 121, 10, 0, 0, 0, 0, 0, 28, 124, 102, 0, 0, 0, 0, 0, 0, 50, 137, 0, 0, 0, 1, 89, 91, 168, 71, 0, 0, 0, 16, 193, 219, 140, 7, 0, 0, 0, 0, 0, 6, 95, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 109, 71, 18, 0, 0, 0, 0, 8, 16, 60, 165, 34, 0, 0, 0, 0, 0, 0, 95, 67, 0, 0, 0, 25, 86, 122, 165, 67, 9, 0, 52, 167, 156, 180, 84, 0, 0, 0, 32, 109, 82, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 22, 28, 0, 0, 0, 0, 0, 0, 132, 156, 70, 0, 0, 0, 0, 0, 16, 2, 122, 50, 0, 0, 0, 0, 0, 4, 108, 84, 0, 0, 0, 0, 35, 211, 240, 66, 0, 0, 0, 0, 36, 211, 197, 103, 0, 0, 0, 0, 0, 25, 3, 83, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 62, 131, 133, 9, 0, 0, 0, 114, 141, 5, 130, 26, 0, 0, 0, 46, 23, 56, 163, 0, 0, 0, 0, 5, 93, 150, 25, 0, 0, 0, 9, 127, 233, 141, 97, 4, 0, 0, 54, 148, 46, 7, 57, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 116, 114, 4, 0, 0, 0, 38, 156, 26, 131, 23, 0, 0, 0, 38, 86, 76, 145, 0, 0, 0, 0, 1, 78, 115, 7, 0, 0, 0, 0, 92, 186, 42, 5, 0, 0, 0, 31, 179, 103, 87, 80, 0, 0, 0, 7, 18, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 8, 47, 0, 0, 0, 0, 0, 23, 183, 239, 24, 0, 0, 0, 0, 4, 63, 215, 16, 0, 0, 23, 143, 155, 175, 199, 0, 0, 0, 155, 107, 79, 223, 199, 23, 0, 0, 139, 171, 215, 67, 127, 103, 0, 0, 15, 115, 39, 0, 23, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 97, 136, 112, 0, 0, 0, 0, 36, 141, 32, 150, 0, 0, 0, 0, 10, 50, 144, 73, 0, 0, 0, 0, 8, 117, 51, 0, 0, 0, 0, 0, 125, 144, 98, 79, 2, 0, 0, 0, 157, 121, 18, 51, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 90, 117, 14, 0, 0, 0, 1, 92, 51, 164, 7, 0, 0, 0, 1, 14, 105, 123, 0, 0, 0, 0, 6, 141, 89, 4, 0, 0, 0, 0, 111, 228, 133, 42, 0, 0, 0, 14, 185, 68, 0, 0, 0, 0, 0, 8, 26, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 99, 166, 17, 0, 0, 0, 0, 93, 118, 154, 2, 0, 0, 0, 0, 90, 165, 42, 0, 0, 0, 0, 108, 156, 6, 0, 0, 0, 0, 10, 186, 103, 137, 136, 11, 0, 0, 30, 131, 48, 0, 19, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 138, 166, 41, 0, 0, 0, 0, 101, 109, 156, 153, 0, 0, 0, 0, 0, 6, 194, 116, 0, 0, 0, 0, 13, 151, 140, 12, 0, 0, 0, 4, 143, 248, 148, 95, 2, 0, 0, 21, 169, 124, 122, 154, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 143, 118, 11, 0, 0, 0, 0, 153, 95, 180, 66, 0, 0, 0, 0, 64, 144, 236, 84, 0, 0, 0, 0, 9, 145, 234, 76, 0, 0, 0, 0, 73, 187, 228, 177, 10, 0, 0, 0, 63, 166, 24, 120, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 108, 171, 65, 0, 0, 0, 0, 33, 80, 112, 135, 0, 0, 0, 0, 0, 11, 172, 123, 0, 0, 0, 38, 157, 242, 177, 170, 97, 0, 33, 199, 208, 156, 19, 91, 103, 0, 5, 67, 30, 1, 1, 112, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 11, 56, 18, 0, 0, 0, 0, 23, 175, 210, 184, 31, 0, 0, 0, 3, 33, 1, 103, 121, 0, 0, 0, 0, 0, 13, 173, 71, 0, 0, 0, 68, 126, 206, 156, 0, 0, 0, 72, 239, 240, 192, 158, 0, 0, 0, 69, 100, 23, 69, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 15, 49, 8, 0, 0, 0, 0, 0, 41, 203, 170, 27, 0, 0, 0, 0, 0, 0, 108, 124, 0, 0, 0, 0, 0, 8, 161, 91, 0, 1, 77, 187, 203, 220, 227, 13, 0, 43, 229, 190, 217, 147, 210, 39, 0, 1, 54, 74, 27, 0, 33, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 140, 151, 49, 0, 0, 0, 0, 20, 25, 33, 166, 0, 0, 0, 0, 0, 0, 29, 131, 0, 0, 0, 0, 0, 0, 110, 49, 0, 0, 0, 0, 0, 4, 165, 70, 110, 135, 23, 0, 0, 3, 96, 102, 64, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 44, 219, 43, 0, 0, 0, 0, 0, 72, 141, 116, 0, 0, 0, 0, 0, 5, 126, 88, 0, 0, 0, 0, 40, 86, 164, 13, 0, 0, 0, 11, 193, 228, 172, 62, 0, 0, 0, 11, 109, 31, 19, 99, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 1, 47, 24, 0, 0, 0, 0, 0, 90, 164, 143, 32, 0, 0, 0, 0, 118, 11, 105, 95, 0, 0, 0, 0, 98, 20, 123, 80, 0, 0, 0, 0, 7, 45, 146, 33, 0, 0, 0, 0, 112, 166, 198, 145, 59, 2, 0, 0, 59, 114, 13, 3, 85, 44, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 100, 58, 0, 0, 0, 0, 0, 0, 6, 136, 50, 111, 53, 0, 21, 117, 172, 143, 61, 5, 0, 0, 26, 130, 119, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 103, 133, 18, 0, 0, 0, 0, 25, 0, 121, 33, 0, 0, 0, 0, 0, 0, 106, 1, 0, 0, 0, 0, 0, 51, 49, 0, 0, 0, 0, 0, 29, 161, 122, 107, 26, 0, 0, 0, 118, 44, 6, 22, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 6, 120, 59, 104, 108, 38, 0, 17, 128, 184, 84, 31, 0, 0, 0, 27, 124, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 175, 97, 0, 0, 0, 0, 0, 17, 116, 237, 7, 0, 0, 0, 0, 4, 90, 242, 127, 0, 0, 95, 184, 202, 251, 162, 30, 0, 0, 173, 161, 170, 165, 22, 0, 0, 0, 20, 60, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 80, 48, 0, 48, 21, 0, 0, 2, 52, 165, 83, 100, 11, 0, 24, 109, 147, 157, 55, 0, 0, 0, 53, 186, 143, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 71, 136, 31, 0, 0, 0, 0, 54, 33, 102, 41, 0, 0, 0, 0, 25, 13, 97, 0, 0, 0, 0, 0, 0, 93, 10, 0, 0, 0, 0, 0, 2, 117, 0, 0, 0, 0, 0, 0, 0, 76, 150, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 20, 0, 0, 0, 0, 0, 0, 60, 180, 79, 0, 0, 0, 0, 41, 68, 121, 119, 0, 0, 0, 34, 156, 138, 216, 168, 124, 37, 0, 21, 144, 152, 43, 12, 30, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 79, 46, 0, 0, 0, 0, 0, 10, 63, 125, 16, 44, 48, 0, 0, 169, 182, 146, 101, 51, 4, 0, 0, 68, 81, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 143, 95, 0, 0, 0, 0, 0, 3, 41, 179, 0, 0, 0, 0, 2, 31, 78, 196, 0, 0, 0, 34, 153, 143, 243, 193, 37, 3, 0, 98, 176, 173, 90, 79, 118, 22, 0, 4, 33, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 94, 168, 111, 6, 0, 0, 0, 0, 26, 82, 219, 36, 0, 0, 0, 0, 0, 12, 206, 23, 0, 0, 0, 0, 1, 115, 140, 64, 0, 0, 0, 0, 42, 216, 236, 242, 0, 0, 0, 0, 84, 159, 64, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 37, 9, 0, 0, 0, 0, 0, 69, 224, 97, 0, 0, 0, 0, 57, 195, 177, 108, 0, 0, 0, 0, 31, 70, 200, 46, 0, 0, 0, 0, 10, 150, 88, 20, 14, 0, 0, 0, 132, 244, 185, 175, 103, 6, 0, 0, 111, 91, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 4, 0, 0, 0, 0, 0, 84, 153, 162, 144, 10, 0, 0, 0, 2, 0, 5, 187, 22, 0, 0, 0, 0, 0, 90, 136, 0, 0, 0, 0, 0, 0, 134, 208, 177, 131, 23, 0, 0, 0, 1, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 113, 99, 59, 15, 0, 0, 0, 0, 18, 57, 112, 146, 0, 0, 0, 0, 0, 0, 75, 140, 0, 0, 0, 0, 0, 29, 172, 26, 0, 0, 0, 0, 40, 168, 170, 88, 20, 0, 0, 0, 130, 74, 51, 55, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 115, 77, 0, 0, 0, 0, 0, 1, 50, 164, 0, 0, 0, 0, 59, 82, 99, 142, 0, 0, 0, 77, 85, 92, 209, 169, 49, 12, 0, 88, 145, 160, 34, 65, 112, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 162, 108, 0, 0, 0, 0, 57, 192, 107, 178, 0, 0, 0, 0, 20, 40, 81, 156, 0, 0, 0, 0, 84, 159, 232, 81, 0, 0, 0, 40, 160, 159, 241, 95, 0, 0, 0, 27, 172, 128, 39, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 110, 111, 1, 0, 0, 0, 107, 181, 76, 195, 4, 0, 0, 0, 23, 30, 84, 175, 0, 0, 0, 0, 0, 64, 154, 21, 0, 0, 0, 0, 53, 181, 78, 78, 1, 0, 0, 8, 226, 197, 97, 14, 0, 0, 0, 2, 55, 18, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 98, 164, 39, 0, 0, 0, 5, 152, 158, 120, 88, 0, 0, 0, 2, 49, 16, 140, 31, 0, 0, 0, 56, 155, 216, 94, 0, 0, 0, 23, 225, 217, 168, 125, 0, 0, 0, 88, 111, 18, 29, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 114, 28, 0, 0, 0, 0, 99, 164, 96, 144, 0, 0, 0, 0, 92, 81, 98, 139, 0, 0, 0, 0, 0, 31, 167, 23, 0, 0, 0, 0, 0, 133, 56, 0, 0, 0, 0, 0, 0, 131, 165, 109, 0, 0, 0, 0, 0, 11, 61, 25, 0, 0 },
    { 0, 0, 0, 0, 42, 16, 0, 0, 0, 0, 3, 91, 178, 121, 0, 0, 0, 0, 28, 73, 54, 140, 0, 0, 0, 0, 0, 6, 95, 135, 0, 0, 0, 0, 137, 195, 252, 119, 0, 0, 0, 0, 139, 114, 124, 162, 0, 0, 0, 0, 100, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 23, 63, 0, 0, 0, 0, 0, 34, 161, 77, 0, 0, 0, 0, 27, 163, 217, 108, 3, 0, 0, 0, 1, 4, 97, 169, 36, 0, 0, 91, 138, 138, 165, 213, 59, 0, 0, 87, 245, 217, 221, 94, 0, 0, 0, 0, 7, 53, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 23, 20, 0, 0, 0, 0, 25, 115, 188, 113, 0, 0, 0, 0, 25, 68, 45, 151, 0, 0, 0, 0, 0, 0, 85, 146, 0, 0, 0, 0, 39, 129, 214, 73, 0, 0, 0, 20, 200, 221, 174, 146, 0, 0, 0, 38, 103, 31, 1, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 128, 125, 50, 0, 0, 0, 0, 99, 36, 39, 140, 110, 0, 0, 0, 0, 0, 0, 11, 139, 0, 0, 0, 0, 4, 53, 74, 169, 3, 0, 0, 0, 63, 235, 248, 242, 83, 0, 0, 0, 10, 75, 39, 7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 8, 54, 21, 0, 0, 0, 0, 71, 156, 127, 128, 0, 0, 0, 0, 0, 0, 2, 109, 0, 0, 0, 0, 0, 0, 53, 121, 0, 0, 0, 0, 4, 39, 163, 46, 0, 0, 0, 53, 124, 197, 117, 122, 65, 3, 0, 59, 104, 26, 0, 0, 18, 8, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 32, 20, 0, 0, 0, 0, 17, 109, 179, 126, 0, 0, 0, 0, 7, 29, 67, 145, 0, 0, 0, 0, 0, 0, 132, 100, 0, 0, 0, 46, 154, 211, 168, 120, 0, 0, 0, 124, 171, 100, 8, 141, 41, 0, 0, 24, 10, 0, 0, 22, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 27, 46, 0, 0, 0, 0, 0, 0, 70, 177, 51, 0, 0, 0, 0, 0, 0, 40, 141, 0, 0, 0, 0, 0, 0, 0, 162, 9, 0, 0, 0, 0, 23, 129, 226, 168, 103, 4, 0, 0, 155, 242, 72, 6, 4, 0, 0, 0, 93, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 8, 23, 0, 0, 0, 0, 6, 103, 171, 63, 0, 0, 0, 0, 21, 83, 124, 48, 0, 0, 0, 0, 0, 4, 149, 7, 0, 0, 4, 124, 139, 216, 111, 0, 0, 0, 73, 123, 126, 180, 97, 0, 0, 0, 36, 99, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 14, 49, 3, 0, 0, 0, 0, 0, 19, 148, 85, 0, 0, 0, 0, 0, 0, 12, 107, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 5, 91, 92, 147, 122, 0, 0, 0, 53, 45, 25, 116, 17, 0, 0, 0, 11, 77, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 2, 36, 0, 0, 0, 0, 0, 46, 147, 191, 17, 0, 0, 0, 0, 43, 25, 119, 26, 0, 0, 0, 0, 20, 39, 161, 0, 0, 0, 15, 146, 128, 211, 119, 0, 0, 1, 120, 99, 130, 173, 115, 0, 0, 2, 77, 111, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 96, 68, 0, 0, 0, 0, 0, 137, 87, 219, 55, 0, 0, 0, 0, 5, 83, 179, 19, 0, 0, 0, 24, 174, 239, 106, 121, 113, 22, 0, 84, 221, 190, 169, 161, 161, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 164, 137, 25, 0, 0, 0, 0, 0, 22, 63, 178, 41, 0, 0, 0, 0, 0, 0, 205, 98, 0, 0, 0, 0, 0, 78, 212, 40, 0, 0, 0, 0, 25, 200, 175, 120, 45, 0, 0, 0, 24, 144, 175, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 31, 2, 0, 0, 0, 0, 0, 30, 158, 4, 0, 0, 0, 0, 61, 155, 162, 0, 0, 0, 0, 0, 9, 26, 151, 0, 0, 0, 0, 40, 152, 224, 109, 0, 0, 0, 29, 207, 226, 147, 152, 0, 0, 0, 59, 62, 9, 7, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 157, 11, 0, 0, 0, 23, 113, 170, 174, 2, 0, 0, 0, 79, 124, 22, 158, 2, 0, 0, 0, 12, 68, 168, 74, 0, 0, 0, 6, 172, 233, 178, 92, 0, 0, 0, 23, 150, 37, 16, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 91, 100, 13, 0, 0, 0, 0, 0, 92, 120, 149, 7, 0, 0, 0, 0, 0, 0, 171, 11, 0, 0, 0, 0, 183, 222, 230, 154, 151, 86, 0, 0, 171, 208, 100, 104, 104, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 147, 123, 44, 0, 0, 0, 0, 56, 14, 21, 128, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0, 0, 21, 85, 109, 123, 0, 0, 0, 20, 139, 81, 151, 157, 18, 0, 0, 37, 109, 114, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 44, 0, 0, 0, 0, 0, 67, 203, 18, 0, 0, 0, 0, 0, 80, 148, 1, 0, 0, 0, 0, 0, 21, 117, 15, 0, 0, 0, 0, 50, 123, 159, 56, 0, 0, 0, 0, 95, 148, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 90, 25, 0, 0, 0, 3, 172, 213, 178, 143, 0, 0, 0, 13, 126, 39, 122, 117, 0, 0, 0, 22, 182, 151, 229, 155, 14, 0, 0, 37, 163, 143, 156, 150, 134, 51, 0, 0, 38, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 63, 27, 0, 0, 0, 0, 0, 71, 155, 227, 47, 0, 0, 0, 0, 0, 23, 187, 11, 0, 0, 0, 16, 207, 247, 155, 67, 55, 31, 0, 47, 223, 135, 179, 191, 167, 63, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 47, 39, 0, 0, 0, 0, 0, 0, 74, 86, 68, 0, 0, 0, 0, 0, 0, 35, 141, 2, 0, 0, 0, 0, 27, 121, 55, 0, 0, 0, 0, 40, 106, 1, 0, 0, 0, 0, 0, 98, 69, 83, 60, 0, 0, 0, 0, 43, 119, 65, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 114, 117, 126, 64, 0, 0, 0, 0, 0, 0, 22, 132, 0, 0, 0, 0, 0, 0, 75, 113, 0, 0, 0, 0, 0, 13, 141, 20, 0, 0, 0, 0, 11, 125, 42, 0, 0, 0, 0, 0, 103, 165, 125, 116, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 81, 3, 0, 0, 0, 0, 0, 55, 74, 121, 0, 0, 0, 0, 0, 0, 0, 135, 0, 0, 0, 0, 0, 154, 207, 184, 153, 142, 67, 0, 0, 158, 157, 19, 15, 66, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 34, 38, 0, 0, 0, 0, 0, 4, 215, 221, 88, 5, 0, 0, 0, 0, 9, 17, 170, 157, 0, 0, 0, 0, 0, 12, 36, 182, 27, 0, 0, 0, 189, 215, 204, 245, 83, 0, 0, 0, 191, 157, 151, 216, 80, 0, 0, 0, 20, 90, 95, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 138, 120, 108, 0, 0, 0, 0, 1, 5, 30, 147, 0, 0, 0, 0, 0, 0, 131, 65, 0, 0, 0, 0, 3, 99, 43, 0, 0, 0, 0, 0, 91, 150, 93, 94, 0, 0, 0, 15, 142, 82, 30, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 58, 97, 24, 0, 0, 0, 6, 179, 140, 88, 187, 0, 0, 0, 3, 69, 1, 12, 197, 6, 0, 0, 68, 152, 140, 158, 206, 4, 0, 0, 141, 79, 109, 168, 156, 6, 0, 0, 23, 94, 50, 0, 18, 112, 0, 0, 0, 0, 0, 0, 0, 32, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 120, 129, 48, 0, 0, 0, 0, 9, 19, 22, 167, 1, 0, 0, 0, 0, 30, 115, 210, 98, 11, 0, 10, 136, 115, 103, 174, 57, 17, 0, 68, 104, 72, 166, 50, 0, 0, 0, 49, 134, 93, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 71, 134, 142, 8, 0, 0, 0, 30, 122, 54, 151, 45, 0, 0, 0, 0, 0, 16, 181, 19, 0, 0, 25, 169, 183, 182, 145, 0, 0, 0, 111, 178, 218, 216, 181, 115, 19, 0, 42, 107, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 11, 36, 0, 0, 0, 0, 0, 45, 175, 219, 7, 0, 0, 0, 29, 151, 55, 180, 35, 0, 0, 0, 15, 2, 35, 203, 1, 0, 0, 62, 213, 199, 193, 117, 0, 0, 0, 89, 155, 193, 240, 139, 25, 0, 0, 9, 95, 60, 20, 100, 87, 1, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 88, 110, 60, 2, 0, 0, 0, 66, 71, 60, 193, 102, 0, 0, 0, 0, 0, 0, 110, 156, 0, 0, 0, 0, 10, 73, 188, 173, 1, 0, 0, 0, 104, 245, 213, 182, 149, 26, 0, 0, 110, 147, 24, 4, 46, 5, 0, 0, 3, 2, 0, 0, 0, 0 },
    { 0, 0, 0, 54, 19, 0, 0, 0, 0, 0, 0, 79, 157, 22, 0, 0, 0, 0, 2, 68, 237, 75, 0, 0, 0, 0, 113, 224, 116, 6, 0, 0, 0, 14, 252, 205, 91, 98, 34, 0, 0, 3, 119, 182, 241, 252, 110, 0, 0, 0, 0, 0, 8, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 99, 144, 120, 21, 0, 0, 0, 0, 0, 0, 87, 104, 0, 0, 0, 0, 0, 0, 78, 133, 0, 0, 0, 0, 15, 51, 159, 51, 0, 0, 0, 27, 132, 194, 173, 153, 37, 0, 0, 39, 33, 22, 0, 9, 98, 20, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 154, 159, 57, 0, 0, 0, 0, 3, 8, 35, 129, 0, 0, 0, 0, 0, 50, 169, 182, 125, 101, 48, 0, 0, 117, 144, 101, 111, 110, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 3, 50, 5, 0, 0, 0, 0, 0, 12, 156, 163, 65, 6, 0, 0, 0, 0, 0, 6, 127, 122, 0, 0, 0, 0, 0, 1, 154, 89, 0, 0, 0, 0, 3, 119, 88, 0, 29, 25, 0, 0, 75, 189, 62, 101, 124, 34, 0, 0, 29, 99, 80, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 31, 18, 0, 0, 0, 0, 0, 64, 126, 149, 128, 4, 0, 0, 0, 0, 0, 1, 167, 23, 0, 0, 0, 0, 13, 113, 177, 45, 16, 4, 0, 0, 132, 183, 150, 153, 118, 26, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 154, 161, 70, 0, 0, 0, 0, 60, 49, 72, 209, 17, 0, 0, 5, 59, 51, 5, 158, 62, 0, 0, 105, 189, 146, 220, 238, 13, 0, 0, 54, 178, 117, 214, 221, 23, 0, 0, 0, 40, 86, 18, 76, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 14, 15, 0, 0, 0, 0, 0, 0, 152, 195, 72, 3, 0, 0, 0, 0, 42, 118, 242, 73, 0, 0, 0, 0, 23, 112, 226, 55, 0, 0, 0, 24, 220, 180, 41, 26, 135, 53, 0, 48, 251, 195, 198, 214, 182, 57, 0, 0, 71, 90, 53, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 40, 0, 0, 0, 0, 0, 55, 169, 172, 119, 0, 0, 0, 0, 0, 0, 8, 196, 26, 0, 0, 0, 0, 140, 227, 243, 222, 131, 18, 0, 0, 159, 235, 109, 54, 110, 24, 0, 0, 4, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 136, 85, 4, 0, 0, 0, 0, 24, 51, 159, 16, 0, 0, 0, 18, 218, 216, 150, 139, 59, 2, 0, 20, 137, 57, 0, 45, 134, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 16, 15, 0, 0, 0, 0, 0, 106, 202, 195, 72, 0, 0, 0, 0, 7, 11, 92, 182, 0, 0, 0, 0, 0, 12, 77, 184, 0, 0, 0, 20, 198, 217, 251, 223, 73, 12, 0, 52, 213, 212, 129, 101, 174, 65, 0, 3, 81, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 74, 8, 0, 0, 0, 0, 0, 56, 135, 131, 0, 0, 0, 0, 0, 0, 98, 100, 0, 0, 0, 0, 10, 143, 235, 191, 166, 125, 45, 0, 45, 170, 75, 69, 89, 117, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 137, 121, 33, 0, 0, 0, 0, 129, 90, 98, 128, 0, 0, 0, 0, 9, 10, 151, 84, 0, 0, 0, 0, 0, 76, 135, 0, 0, 0, 0, 0, 36, 196, 43, 15, 3, 0, 0, 0, 66, 148, 120, 143, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 154, 50, 0, 0, 0, 0, 62, 212, 134, 109, 0, 0, 0, 0, 17, 79, 143, 83, 0, 0, 0, 0, 64, 178, 239, 61, 0, 0, 0, 0, 162, 144, 205, 118, 0, 0, 0, 0, 104, 155, 9, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 2, 25, 0, 0, 0, 0, 0, 0, 63, 127, 44, 0, 0, 0, 0, 0, 0, 0, 123, 22, 0, 0, 0, 0, 0, 0, 101, 51, 0, 0, 0, 0, 0, 17, 124, 46, 0, 0, 0, 0, 35, 124, 181, 99, 0, 0, 0, 0, 42, 103, 31, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 159, 156, 45, 0, 0, 0, 82, 177, 60, 143, 159, 0, 0, 0, 53, 40, 0, 107, 160, 0, 0, 0, 0, 98, 156, 190, 147, 19, 0, 0, 0, 220, 213, 252, 222, 196, 37, 0, 0, 25, 40, 40, 36, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 10, 38, 2, 0, 0, 0, 0, 0, 111, 208, 144, 22, 0, 0, 0, 0, 47, 113, 70, 159, 0, 0, 0, 0, 0, 0, 5, 179, 7, 0, 0, 0, 69, 114, 120, 201, 1, 0, 0, 0, 161, 254, 251, 167, 0, 0, 0, 0, 43, 122, 68, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 23, 49, 3, 0, 0, 0, 0, 62, 191, 202, 97, 0, 0, 0, 0, 154, 46, 55, 184, 0, 0, 0, 0, 19, 0, 56, 174, 0, 0, 0, 0, 27, 97, 164, 134, 0, 0, 0, 3, 178, 179, 246, 72, 8, 1, 0, 4, 117, 118, 107, 102, 109, 29, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 116, 67, 3, 0, 0, 0, 0, 144, 55, 173, 81, 0, 0, 0, 0, 2, 0, 139, 106, 0, 0, 0, 18, 145, 158, 218, 93, 74, 44, 0, 36, 189, 145, 207, 172, 155, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 8, 7, 0, 0, 0, 0, 0, 117, 189, 169, 55, 0, 0, 0, 2, 103, 13, 113, 138, 0, 0, 0, 0, 1, 0, 121, 130, 0, 0, 0, 13, 129, 179, 208, 74, 0, 0, 0, 57, 194, 111, 244, 164, 151, 71, 0, 1, 50, 51, 28, 27, 17, 8, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 9, 39, 0, 0, 0, 0, 0, 31, 145, 196, 43, 0, 0, 0, 0, 124, 144, 155, 95, 1, 0, 0, 0, 85, 75, 173, 82, 1, 0, 0, 3, 110, 154, 195, 25, 0, 0, 0, 40, 212, 178, 223, 154, 99, 0, 0, 0, 70, 118, 33, 30, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 27, 22, 0, 0, 0, 0, 0, 31, 167, 160, 29, 0, 0, 0, 0, 106, 160, 119, 113, 0, 0, 0, 0, 49, 103, 130, 99, 0, 0, 0, 0, 62, 99, 169, 21, 0, 0, 0, 52, 178, 195, 169, 43, 94, 19, 0, 22, 104, 69, 83, 118, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 6, 4, 0, 0, 0, 0, 0, 108, 185, 176, 70, 0, 0, 0, 0, 132, 45, 86, 184, 0, 0, 0, 0, 0, 0, 49, 194, 0, 0, 0, 11, 133, 201, 173, 189, 0, 0, 0, 99, 173, 71, 219, 167, 66, 13, 0, 30, 26, 0, 66, 72, 72, 18, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 4, 44, 42, 1, 0, 0, 0, 0, 143, 154, 173, 69, 0, 0, 0, 0, 155, 12, 71, 178, 0, 0, 0, 0, 40, 2, 82, 159, 0, 0, 0, 0, 10, 43, 142, 103, 0, 0, 0, 0, 134, 173, 209, 38, 4, 5, 0, 0, 85, 85, 120, 94, 93, 67, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 0, 0, 111, 219, 212, 83, 0, 0, 0, 0, 118, 70, 44, 187, 48, 0, 0, 0, 0, 0, 119, 239, 166, 6, 0, 0, 0, 0, 146, 157, 170, 91, 0, 0, 0, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 76, 76, 4, 0, 0, 0, 0, 86, 129, 125, 37, 0, 0, 0, 0, 28, 45, 120, 38, 0, 0, 0, 6, 68, 68, 135, 18, 10, 17, 0, 37, 193, 202, 158, 119, 120, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 99, 91, 2, 0, 0, 0, 0, 10, 29, 164, 57, 0, 0, 0, 0, 0, 10, 177, 28, 0, 0, 0, 16, 99, 188, 142, 79, 56, 0, 0, 126, 197, 115, 157, 171, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 92, 30, 0, 0, 0, 0, 0, 0, 105, 116, 0, 0, 0, 0, 0, 0, 75, 151, 0, 0, 0, 0, 5, 11, 120, 123, 0, 0, 0, 7, 185, 180, 247, 159, 0, 0, 0, 6, 170, 166, 84, 173, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 134, 142, 27, 0, 0, 0, 0, 5, 0, 51, 103, 0, 0, 0, 0, 0, 0, 103, 56, 0, 0, 0, 0, 0, 13, 158, 0, 0, 0, 0, 0, 0, 18, 170, 138, 138, 130, 26, 0, 0, 0, 5, 38, 38, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 179, 78, 0, 0, 0, 0, 15, 151, 84, 177, 0, 0, 0, 0, 4, 56, 81, 168, 0, 0, 0, 0, 0, 6, 184, 61, 0, 0, 0, 0, 72, 149, 179, 13, 0, 0, 0, 0, 97, 115, 150, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 118, 119, 1, 0, 0, 0, 0, 108, 133, 205, 19, 0, 0, 0, 0, 61, 134, 157, 0, 0, 0, 0, 0, 0, 113, 80, 0, 0, 0, 19, 111, 124, 136, 4, 0, 0, 0, 52, 144, 104, 70, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 156, 177, 51, 0, 0, 0, 116, 114, 31, 165, 85, 0, 0, 0, 29, 2, 69, 218, 8, 0, 0, 18, 100, 81, 173, 81, 0, 0, 0, 128, 135, 236, 180, 23, 0, 0, 0, 113, 158, 80, 116, 109, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 94, 159, 87, 0, 0, 0, 0, 134, 171, 155, 205, 6, 0, 0, 0, 146, 193, 107, 142, 15, 0, 0, 0, 0, 0, 46, 171, 0, 0, 0, 9, 67, 49, 168, 91, 0, 0, 0, 22, 181, 179, 167, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 158, 76, 0, 0, 0, 0, 0, 3, 27, 168, 6, 0, 0, 0, 0, 0, 0, 118, 65, 0, 0, 0, 0, 0, 7, 169, 109, 0, 0, 0, 0, 0, 0, 63, 160, 96, 4, 0, 0, 0, 0, 0, 2, 75, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 1, 43, 4, 0, 0, 0, 0, 6, 106, 191, 91, 0, 0, 0, 0, 105, 140, 1, 138, 0, 0, 0, 0, 59, 39, 19, 147, 0, 0, 0, 0, 0, 0, 155, 98, 0, 0, 0, 74, 122, 105, 184, 25, 0, 0, 0, 26, 112, 116, 118, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 124, 127, 29, 0, 0, 0, 0, 55, 115, 56, 118, 0, 0, 0, 0, 26, 40, 101, 101, 0, 0, 0, 0, 87, 109, 122, 3, 0, 0, 0, 0, 187, 205, 131, 20, 0, 0, 0, 0, 0, 0, 52, 144, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 104, 76, 47, 25, 0, 0, 0, 203, 168, 213, 239, 24, 0, 0, 0, 107, 143, 113, 133, 33, 0, 0, 0, 0, 0, 34, 174, 2, 0, 0, 4, 108, 117, 178, 103, 0, 0, 0, 53, 243, 184, 165, 39, 0, 0, 0, 12, 54, 8, 6, 4, 0, 0 },
    { 0, 0, 0, 2, 16, 1, 0, 0, 0, 0, 38, 119, 137, 84, 0, 0, 0, 0, 57, 21, 11, 101, 0, 0, 0, 0, 0, 0, 49, 123, 0, 0, 0, 0, 70, 141, 195, 147, 56, 33, 0, 28, 199, 171, 58, 53, 113, 31, 0, 7, 47, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 58, 6, 0, 0, 0, 0, 3, 142, 169, 118, 0, 0, 0, 0, 23, 197, 200, 33, 0, 0, 19, 104, 105, 126, 146, 0, 0, 0, 132, 176, 224, 140, 78, 0, 0, 0, 49, 64, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 153, 181, 183, 106, 0, 0, 0, 6, 54, 33, 131, 207, 0, 0, 0, 0, 0, 15, 205, 96, 0, 0, 0, 0, 50, 201, 68, 5, 16, 0, 0, 0, 172, 200, 109, 163, 149, 0, 0, 0, 117, 165, 107, 54, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 7, 57, 16, 0, 0, 0, 0, 71, 141, 182, 76, 0, 0, 0, 0, 2, 0, 133, 51, 0, 0, 0, 0, 0, 9, 134, 8, 0, 0, 0, 0, 9, 132, 31, 0, 0, 0, 0, 0, 109, 153, 85, 133, 42, 0, 0, 0, 93, 95, 50, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 31, 14, 0, 0, 0, 0, 0, 12, 165, 127, 0, 0, 0, 0, 0, 34, 178, 190, 0, 0, 0, 0, 0, 9, 77, 132, 0, 0, 0, 63, 131, 56, 65, 128, 0, 0, 0, 121, 121, 201, 217, 122, 0, 0, 0, 29, 126, 91, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 102, 166, 75, 0, 0, 0, 0, 76, 125, 128, 223, 23, 0, 0, 0, 65, 189, 134, 150, 48, 0, 0, 2, 40, 0, 37, 167, 1, 0, 0, 30, 222, 128, 190, 96, 0, 0, 0, 0, 158, 159, 98, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 159, 75, 0, 0, 0, 0, 3, 147, 86, 162, 0, 0, 0, 0, 0, 26, 55, 160, 0, 0, 0, 7, 134, 144, 199, 113, 0, 0, 0, 34, 155, 35, 181, 65, 0, 0, 0, 5, 120, 143, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 99, 48, 0, 0, 0, 0, 0, 0, 18, 146, 0, 0, 0, 0, 0, 0, 0, 152, 14, 0, 0, 0, 0, 48, 115, 204, 58, 0, 0, 0, 0, 156, 114, 161, 44, 0, 0, 0, 0, 14, 44, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 121, 164, 66, 0, 0, 0, 0, 65, 187, 190, 185, 0, 0, 0, 0, 44, 202, 63, 140, 0, 0, 0, 0, 34, 53, 122, 144, 0, 0, 0, 0, 149, 242, 231, 89, 27, 0, 0, 0, 99, 149, 48, 116, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 135, 167, 167, 4, 0, 0, 0, 219, 211, 151, 155, 83, 0, 0, 0, 103, 127, 115, 115, 99, 0, 0, 0, 0, 0, 0, 135, 39, 0, 4, 91, 87, 67, 135, 155, 0, 0, 19, 147, 171, 159, 159, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 31, 47, 4, 0, 0, 0, 0, 43, 191, 207, 79, 0, 0, 0, 0, 91, 207, 203, 195, 0, 0, 0, 0, 4, 28, 32, 175, 0, 0, 0, 4, 127, 131, 135, 135, 0, 0, 0, 63, 215, 227, 255, 139, 4, 0, 0, 23, 127, 107, 31, 87, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 64, 126, 121, 11, 0, 0, 0, 51, 122, 105, 220, 59, 0, 0, 0, 9, 44, 135, 209, 10, 0, 0, 0, 74, 142, 173, 135, 0, 0, 0, 15, 22, 1, 127, 143, 0, 0, 0, 70, 215, 177, 111, 17, 0, 0, 0, 0, 47, 18, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 124, 139, 23, 0, 0, 0, 0, 0, 86, 246, 87, 0, 0, 0, 0, 7, 115, 251, 92, 0, 0, 0, 0, 0, 48, 161, 115, 0, 0, 0, 11, 52, 11, 174, 81, 0, 0, 0, 3, 120, 168, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 9, 77, 109, 102, 63, 9, 0, 0, 15, 72, 51, 54, 210, 67, 0, 0, 0, 0, 12, 146, 185, 27, 0, 0, 0, 0, 3, 50, 127, 223, 62, 0, 0, 0, 46, 6, 10, 184, 81, 0, 0, 0, 158, 160, 190, 144, 3, 0, 0, 0, 15, 41, 27, 3, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 40, 92, 116, 79, 2, 0, 0, 30, 133, 127, 202, 253, 110, 0, 0, 5, 2, 107, 214, 215, 25, 0, 0, 0, 1, 58, 160, 230, 7, 0, 0, 30, 21, 7, 121, 230, 4, 0, 0, 108, 253, 228, 167, 79, 0, 0, 0, 7, 63, 44, 5, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 139, 134, 125, 160, 13, 0, 0, 13, 32, 9, 108, 179, 38, 0, 0, 0, 0, 13, 75, 121, 123, 61, 0, 0, 0, 0, 35, 121, 85, 114, 0, 0, 0, 0, 0, 74, 95, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 17, 12, 4, 0, 0, 0, 0, 12, 103, 113, 165, 30, 0, 0, 0, 0, 0, 31, 115, 5, 0, 0, 0, 0, 0, 101, 110, 78, 0, 0, 0, 0, 0, 0, 60, 131, 0, 0, 0, 0, 0, 26, 129, 34, 0, 0, 0, 0, 0, 53, 30, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 62, 125, 93, 10, 0, 7, 9, 30, 145, 216, 231, 40, 0, 0, 0, 22, 165, 181, 69, 0, 0, 0, 0, 1, 26, 149, 99, 0, 0, 0, 5, 33, 11, 105, 144, 0, 0, 0, 30, 208, 184, 118, 25, 0, 0, 0, 0, 39, 15, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 105, 110, 15, 0, 0, 0, 0, 1, 1, 119, 28, 0, 0, 0, 0, 7, 100, 151, 66, 0, 0, 0, 0, 0, 0, 0, 88, 0, 0, 0, 0, 42, 2, 39, 114, 0, 0, 0, 0, 87, 143, 107, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 113, 50, 0, 0, 0, 0, 0, 83, 117, 187, 6, 0, 0, 0, 0, 27, 147, 190, 18, 0, 0, 0, 0, 17, 29, 157, 128, 0, 0, 0, 0, 15, 9, 109, 156, 0, 0, 0, 0, 83, 198, 154, 27, 0, 0, 0, 0, 14, 57, 12, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 63, 48, 0, 0, 0, 0, 30, 105, 69, 160, 82, 0, 0, 0, 0, 0, 17, 154, 147, 36, 0, 0, 0, 0, 0, 0, 30, 145, 28, 0, 0, 0, 0, 0, 0, 48, 89, 0, 0, 0, 0, 47, 91, 120, 66, 0, 0, 0, 0, 13, 67, 72, 4, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 99, 82, 3, 0, 0, 0, 0, 82, 63, 153, 26, 0, 0, 0, 0, 7, 103, 169, 15, 0, 0, 0, 0, 1, 37, 85, 132, 0, 0, 0, 0, 0, 0, 70, 145, 0, 0, 0, 0, 51, 168, 150, 42, 0, 0, 0, 0, 14, 60, 12, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 95, 185, 150, 0, 0, 0, 0, 23, 61, 69, 210, 9, 0, 0, 0, 0, 26, 188, 172, 0, 0, 0, 0, 20, 129, 101, 149, 0, 0, 0, 11, 0, 20, 133, 131, 0, 0, 0, 122, 149, 134, 87, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 21, 55, 63, 63, 8, 0, 0, 77, 213, 163, 134, 193, 116, 0, 0, 0, 60, 64, 106, 196, 85, 0, 0, 0, 140, 161, 190, 156, 0, 0, 0, 8, 0, 0, 8, 170, 2, 0, 24, 189, 191, 158, 187, 124, 0, 0, 0, 24, 80, 78, 36, 2, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 59, 8, 0, 0, 0, 0, 0, 53, 96, 190, 115, 0, 0, 0, 0, 0, 65, 167, 55, 0, 0, 0, 0, 0, 28, 175, 74, 0, 0, 0, 0, 0, 0, 92, 158, 0, 0, 0, 0, 105, 155, 114, 26, 0, 0, 0, 0, 19, 3, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 98, 169, 151, 10, 0, 0, 0, 59, 89, 77, 200, 20, 0, 0, 0, 9, 79, 182, 100, 0, 0, 0, 0, 14, 89, 209, 67, 0, 0, 11, 35, 0, 17, 209, 75, 0, 0, 36, 151, 166, 156, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 106, 63, 0, 0, 0, 0, 0, 84, 21, 139, 0, 0, 0, 0, 0, 0, 55, 122, 0, 0, 0, 0, 0, 7, 95, 121, 130, 0, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0, 0, 0, 94, 150, 99, 0, 0, 0, 0, 0, 8, 35, 3, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 70, 119, 126, 95, 0, 0, 0, 74, 111, 60, 97, 214, 0, 0, 0, 0, 5, 61, 220, 119, 0, 0, 0, 0, 108, 131, 83, 183, 0, 0, 0, 0, 0, 0, 13, 189, 0, 0, 0, 0, 139, 160, 180, 93, 0, 0, 0, 0, 33, 63, 35, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 157, 165, 35, 0, 0, 0, 0, 74, 42, 175, 40, 0, 0, 0, 14, 62, 164, 161, 0, 0, 0, 0, 45, 113, 161, 130, 0, 0, 5, 35, 12, 32, 167, 108, 0, 0, 2, 117, 185, 154, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 38, 79, 77, 18, 0, 0, 7, 140, 146, 110, 124, 173, 0, 0, 0, 7, 36, 105, 176, 89, 0, 0, 0, 47, 137, 113, 157, 0, 0, 0, 74, 3, 0, 40, 175, 0, 0, 0, 83, 168, 162, 127, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 55, 44, 4, 0, 0, 2, 166, 182, 165, 165, 158, 0, 0, 1, 44, 7, 43, 139, 125, 0, 0, 0, 0, 108, 211, 106, 0, 0, 0, 19, 0, 0, 183, 64, 0, 0, 0, 136, 156, 170, 102, 6, 0, 0, 0, 17, 65, 57, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 138, 162, 55, 0, 0, 0, 0, 85, 52, 21, 188, 21, 0, 0, 0, 1, 0, 17, 191, 32, 0, 0, 0, 0, 0, 64, 170, 131, 0, 0, 0, 0, 71, 82, 22, 172, 0, 0, 0, 0, 20, 99, 178, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 31, 31, 11, 0, 0, 0, 79, 187, 154, 171, 159, 0, 0, 0, 9, 42, 125, 170, 64, 0, 0, 0, 0, 76, 170, 53, 0, 0, 0, 21, 2, 0, 136, 125, 0, 0, 0, 128, 178, 159, 108, 12, 0, 0, 0, 10, 48, 33, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 28, 6, 0, 0, 0, 0, 112, 143, 148, 163, 93, 0, 0, 0, 8, 0, 20, 113, 152, 0, 0, 17, 0, 77, 216, 119, 8, 0, 0, 107, 10, 15, 157, 25, 0, 0, 0, 47, 152, 134, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 150, 161, 121, 0, 0, 0, 0, 31, 95, 105, 213, 0, 0, 0, 0, 0, 60, 230, 117, 0, 0, 0, 0, 0, 24, 124, 148, 0, 0, 9, 84, 20, 14, 136, 151, 0, 0, 2, 80, 174, 187, 108, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 121, 92, 1, 0, 0, 0, 0, 5, 11, 127, 37, 0, 0, 0, 0, 0, 101, 146, 2, 0, 0, 0, 0, 0, 12, 84, 128, 56, 0, 0, 0, 0, 0, 0, 38, 153, 0, 0, 0, 0, 0, 0, 79, 182, 20, 0, 0, 0, 0, 0, 9, 47, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 139, 157, 169, 12, 0, 0, 0, 16, 49, 50, 188, 32, 0, 0, 0, 0, 32, 212, 142, 0, 0, 0, 0, 0, 3, 154, 140, 0, 0, 7, 83, 27, 3, 166, 114, 0, 0, 0, 43, 169, 177, 86, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 155, 155, 77, 0, 0, 0, 0, 68, 56, 132, 174, 0, 0, 0, 0, 0, 44, 221, 201, 0, 0, 0, 55, 27, 57, 80, 209, 3, 0, 0, 165, 52, 28, 116, 214, 1, 0, 0, 61, 176, 157, 104, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 117, 133, 132, 93, 24, 0, 0, 21, 58, 34, 72, 170, 159, 0, 0, 0, 0, 12, 108, 134, 175, 30, 0, 0, 0, 31, 106, 75, 143, 104, 0, 0, 0, 0, 28, 49, 47, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 68, 104, 87, 0, 0, 0, 0, 12, 31, 114, 82, 0, 0, 0, 2, 94, 137, 177, 58, 0, 0, 0, 5, 52, 18, 4, 125, 1, 0, 0, 0, 54, 55, 1, 120, 0, 0, 0, 0, 47, 116, 120, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 100, 125, 169, 35, 0, 0, 0, 15, 96, 51, 175, 38, 0, 0, 0, 8, 111, 191, 105, 0, 0, 4, 19, 1, 63, 189, 62, 0, 0, 25, 159, 12, 16, 205, 75, 0, 0, 0, 59, 181, 171, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 83, 127, 107, 0, 0, 0, 0, 103, 155, 51, 187, 0, 0, 0, 0, 0, 4, 135, 143, 0, 0, 0, 0, 0, 55, 187, 59, 0, 0, 0, 83, 8, 0, 123, 87, 0, 0, 0, 67, 167, 167, 119, 11, 0, 0, 0, 0, 43, 43, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 154, 113, 161, 39, 0, 0, 0, 7, 10, 23, 148, 48, 0, 0, 0, 0, 17, 190, 169, 1, 0, 0, 0, 0, 4, 105, 176, 0, 0, 34, 71, 0, 1, 98, 187, 0, 0, 24, 135, 154, 165, 124, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 160, 127, 0, 0, 0, 0, 0, 38, 117, 150, 0, 0, 0, 0, 0, 51, 191, 30, 0, 0, 0, 0, 0, 19, 166, 97, 0, 0, 1, 56, 17, 47, 176, 47, 0, 0, 1, 74, 163, 154, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 121, 72, 0, 0, 0, 0, 10, 146, 141, 207, 21, 0, 0, 0, 0, 30, 195, 189, 22, 0, 0, 0, 0, 8, 68, 126, 196, 4, 0, 0, 0, 4, 1, 9, 183, 24, 0, 0, 0, 113, 188, 209, 145, 0, 0, 0, 0, 0, 28, 52, 6, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 76, 130, 158, 6, 0, 0, 0, 1, 51, 54, 186, 6, 0, 0, 0, 0, 26, 193, 116, 0, 0, 0, 0, 0, 9, 125, 144, 0, 0, 0, 87, 24, 10, 181, 75, 0, 0, 0, 37, 162, 166, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 166, 168, 22, 0, 0, 0, 0, 15, 77, 189, 5, 0, 0, 0, 0, 86, 217, 80, 0, 0, 0, 0, 0, 7, 131, 113, 0, 0, 42, 84, 2, 53, 182, 46, 0, 0, 44, 133, 140, 126, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 162, 91, 1, 0, 0, 0, 0, 15, 83, 217, 30, 0, 0, 0, 0, 0, 39, 150, 90, 0, 0, 0, 0, 0, 0, 15, 176, 5, 0, 0, 1, 3, 2, 108, 195, 3, 0, 0, 6, 159, 176, 151, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 99, 173, 168, 45, 0, 0, 0, 0, 42, 16, 134, 101, 0, 0, 0, 0, 45, 160, 164, 11, 0, 2, 28, 0, 49, 136, 123, 0, 0, 47, 176, 3, 1, 133, 131, 0, 0, 6, 91, 155, 166, 110, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 121, 53, 1, 0, 0, 0, 0, 39, 17, 121, 102, 0, 0, 0, 0, 0, 12, 179, 74, 0, 0, 0, 0, 0, 0, 138, 61, 0, 0, 0, 0, 0, 0, 97, 95, 0, 0, 0, 0, 32, 111, 179, 40, 0, 0, 0, 0, 0, 27, 34, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 123, 112, 23, 0, 0, 0, 1, 78, 65, 163, 80, 0, 0, 0, 0, 43, 150, 158, 9, 0, 0, 0, 0, 88, 193, 60, 0, 0, 0, 72, 0, 0, 157, 96, 0, 0, 0, 80, 189, 170, 136, 14, 0, 0, 0, 1, 38, 39, 5, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 119, 110, 80, 4, 0, 0, 7, 131, 22, 0, 124, 92, 0, 0, 0, 20, 0, 3, 167, 74, 0, 0, 0, 0, 25, 150, 127, 160, 11, 0, 0, 0, 13, 19, 6, 143, 38, 0, 0, 0, 100, 166, 161, 102, 0, 0, 0, 0, 4, 43, 17, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 145, 140, 41, 0, 0, 0, 0, 29, 12, 129, 53, 0, 0, 0, 0, 24, 151, 146, 3, 0, 2, 24, 0, 35, 87, 163, 0, 0, 27, 140, 0, 0, 78, 149, 0, 0, 0, 63, 138, 139, 116, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 106, 51, 14, 0, 0, 0, 18, 145, 91, 84, 146, 0, 0, 0, 1, 29, 90, 139, 46, 0, 0, 45, 0, 63, 114, 129, 0, 0, 0, 136, 37, 8, 128, 88, 0, 0, 0, 9, 96, 127, 57, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 136, 109, 140, 8, 0, 0, 0, 0, 0, 68, 185, 14, 0, 0, 0, 29, 154, 211, 69, 0, 0, 0, 0, 4, 16, 123, 71, 0, 0, 0, 76, 6, 9, 164, 48, 0, 0, 0, 51, 159, 159, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 111, 53, 4, 0, 0, 0, 0, 60, 51, 120, 177, 0, 0, 0, 0, 90, 146, 189, 170, 0, 0, 0, 53, 10, 0, 12, 87, 121, 0, 0, 153, 102, 71, 91, 132, 116, 0, 0, 4, 54, 75, 58, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 49, 52, 7, 0, 0, 0, 0, 130, 123, 136, 154, 0, 0, 0, 0, 45, 37, 130, 143, 0, 0, 0, 0, 111, 151, 184, 42, 0, 0, 0, 0, 0, 0, 124, 110, 0, 0, 0, 0, 19, 74, 170, 46, 0, 0, 0, 0, 62, 104, 28, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 110, 98, 23, 0, 0, 0, 0, 43, 73, 89, 205, 5, 0, 0, 0, 47, 98, 188, 153, 1, 0, 0, 0, 86, 78, 106, 152, 0, 0, 0, 0, 0, 0, 80, 166, 0, 0, 0, 16, 134, 159, 130, 25, 0, 0, 0, 0, 38, 30, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 67, 52, 0, 0, 0, 23, 136, 122, 102, 168, 4, 0, 0, 0, 0, 17, 138, 66, 0, 0, 0, 0, 0, 76, 141, 126, 162, 71, 0, 0, 0, 8, 6, 4, 112, 72, 0, 0, 0, 47, 137, 141, 86, 0, 0, 0, 0, 0, 10, 3, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 147, 152, 43, 0, 0, 0, 0, 43, 36, 172, 95, 0, 0, 0, 0, 25, 177, 192, 30, 0, 0, 0, 0, 0, 14, 66, 189, 16, 0, 0, 12, 0, 2, 32, 175, 25, 0, 0, 56, 121, 159, 127, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 147, 63, 10, 0, 0, 0, 0, 0, 32, 155, 216, 29, 0, 0, 17, 94, 127, 193, 222, 14, 0, 0, 17, 76, 73, 63, 123, 108, 0, 0, 2, 5, 33, 89, 170, 86, 0, 0, 86, 166, 148, 95, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 18, 17, 0, 0, 0, 0, 0, 40, 155, 120, 130, 45, 0, 0, 0, 0, 1, 0, 82, 137, 0, 0, 0, 0, 0, 22, 118, 34, 0, 0, 0, 0, 0, 105, 116, 4, 0, 0, 0, 0, 0, 0, 75, 139, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 44, 31, 0, 0, 0, 28, 132, 154, 201, 129, 0, 0, 0, 4, 50, 136, 125, 12, 0, 0, 10, 180, 196, 171, 19, 0, 0, 0, 3, 59, 54, 164, 15, 0, 0, 0, 72, 140, 123, 7, 0, 0, 0, 0, 75, 54, 3, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 31, 58, 49, 0, 0, 0, 0, 21, 49, 106, 125, 0, 0, 0, 0, 21, 100, 88, 12, 0, 0, 0, 0, 54, 118, 46, 0, 0, 0, 0, 0, 0, 10, 120, 17, 0, 0, 0, 0, 37, 44, 111, 10, 0, 0, 0, 0, 81, 88, 14, 0, 0, 0 },
    { 0, 0, 36, 61, 4, 0, 0, 0, 0, 0, 109, 141, 102, 1, 0, 0, 0, 0, 0, 0, 159, 26, 0, 0, 0, 0, 0, 99, 194, 31, 0, 0, 0, 0, 4, 5, 74, 149, 0, 0, 0, 45, 104, 54, 42, 161, 0, 0, 0, 1, 60, 94, 113, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 83, 116, 103, 18, 0, 0, 0, 33, 97, 31, 104, 114, 0, 0, 0, 0, 32, 128, 163, 19, 0, 0, 0, 0, 62, 80, 142, 0, 0, 0, 0, 6, 30, 140, 42, 0, 0, 0, 131, 216, 140, 17, 0, 0, 0, 0, 38, 37, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 48, 88, 114, 28, 0, 0, 5, 112, 105, 89, 153, 80, 0, 0, 0, 11, 83, 181, 178, 10, 0, 0, 0, 18, 56, 47, 133, 0, 0, 0, 0, 13, 58, 168, 69, 0, 0, 18, 190, 197, 107, 18, 0, 0, 0, 0, 39, 20, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 72, 99, 66, 0, 0, 0, 0, 37, 47, 109, 105, 0, 0, 0, 24, 100, 147, 191, 4, 0, 0, 0, 8, 16, 41, 134, 0, 0, 0, 19, 94, 136, 122, 31, 0, 0, 0, 116, 139, 70, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 102, 58, 0, 0, 0, 0, 25, 75, 120, 58, 0, 0, 0, 0, 0, 41, 100, 1, 0, 0, 0, 0, 0, 84, 94, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0, 0, 0, 58, 140, 77, 0, 0, 0, 0, 0, 23, 52, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 109, 92, 11, 0, 0, 0, 0, 4, 69, 167, 98, 0, 0, 0, 95, 127, 184, 121, 12, 0, 0, 0, 46, 60, 162, 89, 0, 0, 0, 0, 2, 55, 167, 37, 0, 0, 28, 126, 134, 104, 8, 0, 0, 0, 7, 33, 2, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 49, 34, 0, 0, 0, 0, 14, 119, 142, 180, 0, 0, 0, 0, 10, 88, 190, 82, 0, 0, 0, 4, 148, 116, 114, 150, 0, 0, 0, 0, 0, 7, 144, 77, 0, 0, 0, 3, 90, 139, 29, 0, 0, 0, 0, 31, 96, 21, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 63, 13, 0, 0, 0, 32, 157, 134, 169, 92, 0, 0, 0, 19, 95, 154, 170, 18, 0, 0, 0, 57, 138, 127, 176, 0, 0, 0, 0, 0, 7, 145, 105, 0, 0, 7, 71, 137, 157, 43, 0, 0, 0, 9, 102, 77, 11, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 99, 78, 4, 0, 0, 0, 0, 25, 186, 220, 21, 0, 0, 0, 73, 166, 231, 133, 1, 0, 0, 14, 129, 108, 92, 215, 21, 0, 0, 0, 0, 26, 172, 128, 0, 0, 1, 69, 153, 144, 24, 0, 0, 0, 1, 37, 36, 1, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 47, 43, 0, 0, 0, 0, 83, 159, 157, 236, 18, 0, 0, 0, 25, 95, 174, 120, 0, 0, 0, 0, 140, 186, 151, 208, 24, 0, 0, 0, 8, 13, 113, 175, 9, 0, 0, 9, 105, 158, 69, 4, 0, 0, 0, 20, 82, 17, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 80, 122, 31, 0, 0, 0, 66, 146, 73, 123, 82, 0, 0, 0, 8, 12, 114, 154, 14, 0, 0, 0, 126, 160, 189, 36, 0, 0, 0, 0, 41, 66, 150, 16, 0, 0, 12, 101, 155, 113, 2, 0, 0, 0, 9, 56, 21, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 137, 128, 164, 64, 0, 0, 0, 9, 119, 170, 216, 59, 0, 0, 0, 0, 78, 107, 144, 168, 65, 0, 0, 32, 86, 82, 1, 7, 177, 47, 0, 116, 179, 100, 6, 27, 193, 57, 0, 6, 66, 107, 138, 148, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 181, 98, 0, 0, 0, 0, 0, 27, 183, 114, 0, 0, 0, 0, 23, 145, 234, 116, 0, 0, 0, 0, 13, 48, 79, 193, 0, 0, 3, 80, 14, 1, 136, 130, 0, 0, 1, 78, 164, 172, 112, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 160, 165, 18, 0, 0, 0, 0, 17, 61, 187, 18, 0, 0, 0, 19, 132, 219, 108, 0, 0, 0, 0, 0, 13, 133, 105, 0, 0, 0, 63, 6, 4, 174, 60, 0, 0, 0, 57, 163, 157, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 172, 173, 4, 0, 0, 0, 0, 5, 126, 189, 2, 0, 0, 0, 36, 123, 231, 92, 0, 0, 0, 0, 65, 81, 156, 159, 7, 0, 0, 73, 16, 32, 187, 89, 0, 0, 0, 87, 157, 134, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 133, 171, 13, 0, 0, 0, 0, 0, 79, 187, 11, 0, 0, 0, 22, 103, 227, 82, 0, 0, 0, 0, 37, 80, 155, 124, 0, 0, 1, 95, 8, 18, 189, 73, 0, 0, 0, 67, 157, 154, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 114, 119, 58, 0, 0, 0, 7, 83, 23, 149, 126, 0, 0, 0, 0, 17, 116, 199, 27, 0, 0, 0, 0, 66, 115, 106, 157, 0, 0, 0, 14, 95, 0, 23, 192, 0, 0, 0, 2, 133, 173, 179, 87, 0, 0, 0, 0, 4, 47, 36, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 5, 0, 0, 0, 26, 113, 111, 147, 20, 0, 0, 0, 20, 112, 166, 135, 12, 0, 0, 0, 0, 9, 17, 80, 149, 54, 0, 0, 0, 0, 0, 0, 60, 51, 0, 0, 0, 18, 67, 126, 83, 0, 0, 0, 0, 33, 81, 41, 2, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 119, 150, 120, 0, 0, 0, 0, 0, 18, 166, 110, 0, 0, 0, 0, 64, 191, 172, 16, 0, 0, 0, 0, 7, 12, 132, 115, 0, 0, 0, 42, 36, 1, 151, 105, 0, 0, 0, 18, 153, 167, 87, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 152, 141, 0, 0, 0, 0, 0, 26, 170, 119, 0, 0, 0, 0, 60, 186, 214, 53, 0, 0, 0, 0, 0, 0, 109, 154, 0, 0, 0, 48, 15, 14, 176, 103, 0, 0, 0, 40, 159, 159, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 62, 8, 0, 0, 0, 0, 0, 38, 98, 105, 0, 0, 0, 0, 0, 17, 147, 103, 0, 0, 0, 0, 0, 0, 0, 151, 47, 0, 0, 0, 0, 0, 0, 136, 43, 0, 0, 0, 0, 0, 52, 106, 1, 0, 0, 0, 0, 0, 64, 7, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 147, 0, 0, 0, 0, 0, 0, 96, 193, 3, 0, 0, 0, 54, 132, 208, 60, 0, 0, 0, 11, 43, 56, 181, 78, 0, 0, 0, 107, 33, 18, 194, 76, 0, 0, 0, 15, 148, 159, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 181, 115, 7, 0, 0, 0, 0, 41, 17, 200, 82, 0, 0, 0, 0, 34, 158, 154, 21, 0, 0, 0, 0, 21, 119, 157, 47, 0, 0, 0, 0, 4, 7, 159, 188, 0, 0, 0, 0, 131, 177, 119, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 126, 50, 0, 0, 0, 0, 0, 38, 160, 39, 0, 0, 0, 14, 81, 175, 94, 0, 0, 0, 0, 62, 95, 170, 7, 0, 0, 0, 58, 33, 48, 147, 1, 0, 0, 0, 52, 161, 128, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 83, 77, 2, 0, 0, 0, 0, 17, 93, 156, 54, 0, 0, 0, 0, 0, 52, 167, 13, 0, 0, 0, 0, 0, 13, 140, 50, 0, 0, 0, 0, 0, 0, 140, 55, 0, 0, 0, 0, 70, 129, 102, 1, 0, 0, 0, 0, 19, 32, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 138, 173, 44, 0, 0, 0, 0, 15, 99, 167, 23, 0, 0, 0, 45, 171, 224, 138, 0, 0, 0, 0, 0, 0, 84, 196, 0, 0, 7, 90, 30, 72, 199, 94, 0, 0, 9, 117, 166, 122, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 129, 170, 42, 0, 0, 0, 0, 9, 137, 173, 6, 0, 0, 0, 85, 173, 171, 26, 0, 0, 0, 0, 62, 44, 178, 101, 0, 0, 0, 39, 18, 10, 183, 95, 0, 0, 0, 36, 164, 164, 82, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 130, 171, 76, 0, 0, 0, 0, 0, 64, 178, 38, 0, 0, 0, 68, 153, 217, 85, 0, 0, 0, 0, 32, 38, 128, 140, 0, 0, 0, 77, 6, 33, 154, 141, 0, 0, 0, 63, 175, 160, 61, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 166, 158, 87, 0, 0, 0, 0, 53, 62, 234, 186, 0, 0, 0, 0, 0, 134, 198, 27, 0, 0, 0, 0, 0, 36, 168, 193, 26, 0, 0, 49, 108, 45, 34, 207, 88, 0, 0, 33, 143, 184, 162, 100, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 48, 101, 126, 53, 0, 0, 0, 107, 107, 69, 181, 148, 0, 0, 0, 0, 48, 153, 236, 94, 0, 0, 0, 0, 149, 121, 93, 140, 85, 0, 0, 0, 0, 0, 0, 4, 159, 0, 0, 58, 210, 128, 83, 131, 116, 0, 0, 26, 63, 63, 63, 63, 17, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 36, 41, 5, 0, 0, 0, 0, 15, 50, 141, 99, 0, 0, 0, 0, 32, 123, 120, 18, 0, 0, 0, 0, 17, 91, 96, 3, 0, 0, 0, 0, 0, 0, 140, 25, 0, 0, 0, 0, 20, 102, 70, 0, 0, 0, 0, 0, 62, 74, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 57, 121, 30, 0, 0, 0, 0, 101, 172, 210, 60, 0, 0, 0, 0, 13, 101, 230, 114, 1, 0, 0, 0, 0, 104, 67, 194, 16, 0, 0, 0, 68, 29, 116, 179, 0, 0, 0, 0, 103, 226, 164, 32, 0, 0, 0, 0, 6, 44, 8, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 42, 93, 117, 53, 0, 0, 0, 115, 138, 168, 214, 39, 0, 0, 1, 94, 154, 243, 157, 5, 0, 0, 10, 135, 115, 87, 154, 124, 0, 0, 7, 16, 0, 41, 167, 74, 0, 0, 100, 219, 214, 177, 64, 0, 0, 0, 6, 33, 50, 10, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 82, 143, 162, 50, 0, 0, 0, 80, 105, 94, 202, 71, 0, 0, 0, 46, 132, 226, 218, 6, 0, 0, 0, 69, 94, 36, 161, 41, 0, 4, 68, 50, 1, 79, 181, 12, 0, 23, 144, 163, 152, 103, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 110, 86, 0, 0, 0, 3, 149, 161, 109, 143, 0, 0, 0, 0, 17, 47, 213, 75, 0, 0, 0, 0, 139, 135, 99, 144, 0, 0, 0, 0, 51, 1, 127, 90, 0, 0, 7, 62, 56, 98, 118, 4, 0, 0, 6, 54, 55, 61, 11, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 2, 47, 44, 9, 0, 0, 0, 0, 20, 65, 136, 118, 0, 0, 0, 0, 0, 0, 77, 135, 104, 70, 0, 0, 0, 0, 0, 15, 20, 88, 91, 0, 0, 0, 2, 110, 101, 128, 78, 0, 0, 0, 0, 1, 40, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 180, 167, 128, 0, 0, 0, 0, 9, 44, 152, 160, 0, 0, 0, 0, 59, 181, 237, 89, 0, 0, 0, 0, 45, 58, 32, 167, 4, 0, 1, 9, 0, 1, 93, 174, 1, 0, 53, 178, 148, 147, 104, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 82, 101, 0, 0, 0, 28, 175, 149, 119, 184, 1, 0, 0, 21, 37, 30, 175, 74, 0, 0, 0, 0, 115, 168, 147, 139, 0, 0, 0, 0, 30, 9, 75, 130, 0, 0, 0, 28, 74, 132, 135, 17, 0, 0, 0, 28, 62, 62, 10, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 144, 149, 87, 0, 0, 0, 0, 0, 6, 30, 158, 8, 0, 0, 0, 0, 40, 194, 156, 59, 1, 0, 0, 0, 3, 12, 45, 147, 78, 0, 0, 3, 26, 25, 121, 195, 34, 0, 0, 10, 139, 139, 60, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 117, 142, 55, 0, 0, 0, 0, 42, 46, 148, 61, 0, 0, 0, 0, 0, 44, 145, 111, 0, 0, 0, 2, 52, 5, 0, 116, 5, 0, 0, 5, 162, 19, 26, 138, 2, 0, 0, 0, 94, 116, 111, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 51, 0, 0, 0, 0, 62, 166, 208, 209, 1, 0, 0, 0, 27, 97, 185, 56, 0, 0, 0, 0, 164, 161, 162, 111, 0, 0, 0, 0, 30, 2, 126, 95, 0, 0, 0, 0, 0, 81, 114, 1, 0, 0, 0, 0, 53, 103, 14, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 130, 3, 0, 0, 0, 38, 132, 149, 64, 0, 0, 0, 0, 18, 95, 162, 101, 0, 0, 0, 0, 0, 26, 33, 94, 0, 0, 0, 73, 26, 0, 73, 53, 0, 0, 0, 18, 162, 146, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 63, 0, 0, 0, 0, 5, 91, 192, 161, 3, 0, 0, 0, 50, 143, 96, 94, 0, 0, 0, 0, 0, 94, 124, 106, 0, 0, 0, 4, 19, 14, 0, 63, 0, 0, 0, 8, 162, 101, 95, 39, 0, 0, 0, 0, 48, 63, 19, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 43, 13, 0, 0, 0, 14, 113, 127, 132, 62, 0, 0, 0, 5, 81, 145, 101, 0, 0, 0, 0, 15, 65, 5, 118, 0, 0, 0, 91, 107, 108, 97, 124, 0, 0, 0, 12, 61, 69, 39, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 132, 63, 2, 0, 0, 0, 0, 28, 42, 210, 59, 0, 0, 0, 0, 25, 137, 156, 19, 0, 0, 0, 0, 29, 129, 190, 94, 0, 0, 0, 0, 0, 3, 141, 162, 0, 0, 0, 0, 0, 107, 143, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 44, 62, 0, 0, 0, 17, 123, 189, 198, 58, 0, 0, 0, 26, 130, 165, 168, 7, 0, 0, 0, 0, 35, 27, 79, 7, 0, 0, 78, 3, 0, 46, 106, 0, 0, 0, 97, 178, 172, 79, 4, 0, 0, 0, 0, 28, 21, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 16, 41, 4, 0, 0, 0, 49, 101, 171, 213, 35, 0, 0, 17, 125, 92, 179, 210, 4, 0, 0, 0, 3, 127, 80, 162, 29, 0, 0, 34, 38, 13, 0, 133, 9, 0, 30, 207, 224, 201, 166, 198, 55, 0, 0, 62, 105, 101, 47, 25, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 95, 105, 71, 0, 0, 0, 0, 77, 107, 143, 191, 33, 0, 0, 0, 0, 14, 185, 218, 189, 40, 0, 0, 0, 0, 27, 0, 18, 128, 0, 0, 0, 0, 0, 0, 79, 136, 0, 0, 0, 97, 183, 190, 141, 13, 0, 0, 0, 1, 30, 40, 1, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 68, 47, 78, 0, 0, 0, 82, 150, 115, 127, 65, 0, 0, 0, 67, 30, 106, 167, 11, 0, 0, 57, 0, 23, 20, 91, 6, 0, 0, 156, 56, 35, 109, 105, 0, 0, 0, 27, 115, 107, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 26, 0, 0, 0, 9, 67, 121, 155, 91, 0, 0, 0, 73, 112, 115, 180, 2, 0, 0, 108, 7, 53, 50, 114, 0, 0, 0, 162, 144, 121, 141, 71, 0, 0, 0, 8, 53, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 100, 120, 45, 0, 0, 0, 0, 85, 92, 187, 134, 0, 0, 0, 0, 0, 70, 169, 28, 0, 0, 0, 0, 0, 22, 151, 74, 0, 0, 0, 0, 50, 1, 35, 136, 0, 0, 0, 0, 79, 187, 199, 68, 0, 0, 0, 0, 1, 35, 29, 1, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 112, 86, 33, 0, 0, 0, 0, 3, 44, 195, 116, 0, 0, 0, 0, 14, 129, 106, 10, 0, 0, 0, 0, 17, 122, 157, 73, 0, 0, 0, 0, 0, 0, 54, 154, 0, 0, 0, 0, 101, 173, 155, 70, 0, 0, 0, 0, 27, 63, 22, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 146, 144, 0, 0, 0, 0, 108, 132, 102, 84, 0, 0, 0, 0, 27, 68, 170, 49, 0, 0, 0, 0, 0, 39, 41, 114, 0, 0, 0, 68, 73, 0, 26, 111, 0, 0, 0, 13, 125, 146, 108, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 137, 79, 1, 0, 0, 0, 0, 0, 0, 155, 27, 0, 0, 0, 0, 80, 123, 104, 1, 0, 0, 0, 0, 57, 58, 109, 70, 0, 0, 0, 0, 0, 0, 1, 107, 0, 0, 0, 0, 46, 119, 118, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 149, 12, 0, 0, 7, 116, 141, 124, 135, 0, 0, 0, 13, 88, 35, 165, 63, 0, 0, 0, 0, 0, 86, 62, 116, 0, 0, 0, 23, 60, 1, 17, 107, 0, 0, 0, 2, 126, 166, 144, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 60, 63, 17, 0, 0, 0, 0, 80, 136, 127, 211, 38, 0, 0, 0, 0, 68, 148, 201, 36, 0, 0, 0, 9, 147, 118, 113, 130, 64, 0, 0, 0, 0, 0, 0, 36, 134, 0, 0, 0, 34, 69, 159, 172, 26, 0, 0, 0, 65, 118, 78, 15, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 69, 69, 7, 0, 0, 0, 0, 0, 0, 110, 44, 0, 0, 0, 0, 35, 99, 88, 2, 0, 0, 0, 0, 0, 2, 116, 4, 0, 0, 0, 0, 0, 0, 123, 6, 0, 0, 0, 0, 52, 95, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 174, 144, 0, 0, 0, 0, 0, 98, 200, 230, 0, 0, 0, 0, 0, 19, 238, 179, 0, 0, 0, 30, 69, 12, 204, 157, 0, 0, 0, 96, 214, 160, 235, 120, 0, 0, 0, 18, 170, 180, 90, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 40, 106, 83, 0, 0, 0, 0, 85, 252, 253, 240, 0, 0, 0, 0, 31, 120, 250, 189, 0, 0, 0, 0, 65, 117, 251, 137, 0, 0, 0, 0, 218, 212, 244, 167, 0, 0, 0, 0, 116, 227, 162, 21, 0, 0, 0, 0, 2, 38, 9, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 124, 90, 2, 0, 0, 0, 0, 1, 16, 135, 26, 0, 0, 0, 0, 47, 133, 141, 4, 0, 0, 0, 0, 20, 40, 138, 88, 0, 0, 0, 0, 25, 2, 109, 111, 0, 0, 0, 0, 58, 133, 129, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 91, 118, 55, 0, 0, 0, 62, 98, 58, 91, 172, 0, 0, 0, 0, 4, 84, 169, 67, 0, 0, 0, 0, 6, 93, 161, 51, 0, 0, 0, 10, 49, 0, 62, 161, 0, 0, 0, 9, 146, 155, 161, 112, 0, 0, 0, 0, 12, 51, 35, 4, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 152, 91, 1, 0, 0, 0, 5, 159, 211, 250, 50, 0, 0, 0, 0, 71, 213, 245, 27, 0, 0, 44, 38, 34, 234, 159, 0, 0, 0, 97, 180, 146, 242, 140, 0, 0, 0, 19, 160, 173, 103, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 25, 10, 0, 0, 0, 0, 0, 0, 63, 144, 13, 0, 0, 0, 0, 0, 30, 180, 66, 0, 0, 0, 0, 0, 126, 184, 24, 0, 0, 0, 0, 10, 0, 143, 74, 0, 0, 0, 0, 127, 98, 166, 42, 0, 0, 0, 0, 8, 91, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 121, 84, 28, 0, 0, 12, 0, 27, 152, 232, 251, 39, 0, 5, 0, 0, 96, 243, 213, 14, 0, 18, 114, 85, 34, 156, 217, 0, 0, 24, 176, 244, 181, 174, 238, 0, 0, 0, 0, 19, 109, 156, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 100, 33, 0, 0, 0, 0, 45, 176, 88, 151, 0, 0, 0, 8, 194, 104, 137, 138, 0, 0, 0, 17, 120, 221, 182, 138, 0, 0, 0, 0, 62, 112, 110, 112, 0, 0, 0, 0, 28, 145, 90, 7, 0, 0, 0, 0, 10, 37, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 174, 169, 101, 0, 0, 0, 0, 1, 30, 136, 41, 0, 0, 0, 0, 0, 27, 130, 127, 56, 0, 0, 0, 0, 0, 7, 76, 150, 39, 0, 0, 0, 0, 0, 0, 17, 131, 0, 0, 0, 0, 0, 9, 89, 64, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 67, 95, 42, 0, 0, 0, 0, 179, 229, 232, 210, 23, 0, 0, 0, 123, 76, 209, 197, 46, 0, 0, 0, 0, 9, 119, 189, 217, 110, 0, 0, 0, 0, 0, 59, 185, 173, 0, 0, 0, 0, 95, 244, 189, 46, 0, 0, 0, 0, 13, 55, 13, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 99, 183, 159, 107, 0, 0, 0, 16, 99, 59, 171, 115, 0, 0, 0, 0, 23, 199, 191, 11, 0, 0, 51, 79, 8, 131, 223, 0, 0, 0, 163, 239, 111, 187, 163, 0, 0, 0, 83, 171, 139, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 106, 120, 85, 0, 0, 0, 0, 0, 1, 115, 91, 0, 0, 0, 0, 60, 142, 187, 45, 0, 0, 0, 0, 18, 13, 22, 144, 0, 0, 0, 21, 14, 0, 64, 135, 0, 0, 0, 35, 121, 125, 77, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 102, 176, 99, 0, 0, 0, 0, 72, 190, 199, 252, 58, 0, 0, 0, 2, 85, 202, 227, 28, 0, 0, 7, 17, 88, 226, 120, 0, 0, 0, 84, 163, 102, 206, 138, 0, 0, 0, 17, 163, 189, 163, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 158, 99, 72, 0, 0, 0, 0, 84, 177, 159, 238, 20, 0, 0, 0, 0, 6, 159, 210, 5, 0, 0, 6, 3, 52, 252, 118, 0, 0, 0, 89, 162, 126, 233, 190, 0, 0, 0, 19, 129, 186, 189, 107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 99, 103, 14, 0, 0, 0, 14, 151, 42, 128, 89, 0, 0, 0, 16, 81, 38, 174, 47, 0, 0, 0, 0, 0, 12, 164, 110, 0, 0, 0, 0, 0, 0, 70, 152, 0, 0, 0, 0, 98, 163, 169, 53, 0, 0, 0, 0, 8, 49, 19, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 98, 109, 10, 0, 0, 0, 0, 24, 88, 81, 104, 0, 0, 0, 0, 0, 0, 91, 81, 0, 0, 0, 0, 0, 0, 57, 130, 136, 1, 0, 0, 0, 0, 0, 2, 133, 28, 0, 0, 0, 0, 49, 141, 158, 1, 0, 0, 0, 0, 1, 37, 15, 0, 0 },
    { 0, 0, 0, 0, 24, 12, 0, 0, 0, 0, 0, 1, 164, 97, 0, 0, 0, 0, 0, 35, 244, 231, 0, 0, 0, 0, 0, 39, 237, 183, 0, 0, 0, 27, 6, 51, 197, 15, 0, 0, 0, 108, 186, 193, 144, 0, 0, 0, 0, 21, 106, 102, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 47, 53, 10, 0, 0, 0, 0, 32, 76, 170, 105, 0, 0, 0, 0, 0, 49, 103, 11, 0, 0, 0, 0, 23, 171, 153, 59, 0, 0, 0, 0, 0, 23, 192, 73, 0, 0, 0, 0, 29, 143, 41, 0, 0, 0, 0, 0, 55, 48, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 164, 102, 25, 0, 0, 0, 0, 79, 177, 241, 61, 0, 0, 0, 0, 24, 187, 203, 5, 0, 0, 45, 80, 34, 182, 174, 0, 0, 0, 116, 216, 128, 208, 95, 0, 0, 0, 15, 173, 164, 50, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 151, 107, 0, 0, 0, 0, 0, 115, 215, 139, 0, 0, 0, 0, 0, 27, 219, 103, 0, 0, 0, 0, 99, 47, 207, 111, 0, 0, 0, 0, 219, 167, 199, 59, 0, 0, 0, 0, 95, 175, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 114, 39, 0, 0, 0, 0, 0, 150, 162, 102, 0, 0, 0, 0, 0, 95, 145, 54, 0, 0, 0, 0, 0, 0, 23, 150, 112, 0, 0, 0, 0, 0, 0, 110, 170, 0, 0, 0, 0, 19, 126, 157, 46, 0, 0, 0, 0, 15, 53, 4, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 139, 175, 87, 0, 0, 0, 0, 36, 51, 157, 150, 0, 0, 0, 0, 31, 136, 203, 48, 0, 0, 0, 39, 171, 128, 159, 204, 17, 0, 0, 12, 43, 8, 79, 210, 14, 0, 0, 33, 154, 178, 147, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 99, 115, 13, 0, 0, 0, 0, 7, 36, 92, 84, 1, 0, 0, 0, 0, 43, 156, 168, 73, 0, 0, 0, 0, 1, 0, 10, 134, 0, 0, 0, 0, 53, 0, 2, 123, 3, 0, 0, 0, 78, 155, 136, 72, 0, 0, 0, 0, 2, 31, 7, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 84, 119, 22, 0, 0, 0, 10, 107, 122, 212, 44, 0, 0, 0, 15, 92, 200, 102, 0, 0, 0, 0, 110, 92, 119, 154, 0, 0, 0, 41, 0, 0, 114, 139, 0, 0, 11, 124, 158, 162, 109, 8, 0, 0, 0, 0, 53, 43, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 21, 115, 103, 59, 15, 0, 0, 0, 0, 36, 115, 148, 247, 199, 2, 0, 0, 0, 74, 176, 232, 130, 0, 0, 0, 0, 40, 171, 168, 131, 37, 0, 0, 0, 0, 29, 135, 251, 90, 0, 0, 4, 161, 200, 147, 57, 0, 0, 0, 0, 37, 26, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 85, 96, 43, 0, 0, 0, 0, 50, 127, 145, 143, 0, 0, 0, 0, 0, 47, 156, 20, 0, 0, 0, 0, 13, 168, 204, 73, 0, 0, 0, 0, 2, 20, 180, 72, 0, 0, 0, 0, 20, 178, 79, 0, 0, 0, 0, 0, 4, 42, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 26, 21, 31, 0, 0, 0, 0, 62, 151, 230, 173, 0, 0, 0, 2, 93, 198, 220, 162, 25, 0, 0, 10, 75, 18, 2, 106, 96, 0, 24, 86, 7, 7, 106, 186, 18, 0, 5, 78, 168, 163, 93, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 59, 100, 105, 17, 0, 0, 0, 3, 57, 40, 161, 34, 0, 0, 0, 16, 54, 174, 179, 0, 0, 0, 0, 136, 127, 63, 169, 42, 0, 52, 95, 57, 67, 124, 174, 10, 0, 14, 51, 87, 97, 46, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 143, 134, 93, 6, 0, 0, 0, 4, 62, 4, 113, 83, 0, 0, 0, 0, 2, 34, 114, 63, 0, 0, 0, 0, 3, 88, 151, 19, 0, 0, 0, 0, 0, 0, 87, 140, 1, 0, 0, 0, 61, 121, 133, 128, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 98, 69, 0, 0, 0, 0, 5, 94, 12, 108, 3, 0, 0, 0, 0, 0, 69, 140, 11, 0, 0, 0, 0, 46, 77, 49, 133, 0, 0, 0, 0, 0, 0, 32, 123, 0, 0, 0, 0, 77, 98, 104, 17, 0, 0, 0, 0, 30, 48, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 91, 79, 0, 0, 0, 0, 0, 53, 112, 98, 0, 0, 0, 0, 0, 0, 131, 7, 0, 0, 0, 0, 0, 0, 120, 42, 0, 0, 0, 0, 0, 13, 145, 16, 0, 0, 0, 19, 130, 144, 24, 0, 0, 0, 0, 11, 50, 8, 0, 0, 0, 0 },
    { 0, 0, 16, 42, 0, 0, 0, 0, 0, 0, 40, 115, 76, 0, 0, 0, 0, 0, 0, 0, 114, 52, 0, 0, 0, 0, 0, 82, 134, 16, 0, 0, 0, 0, 0, 2, 112, 67, 0, 0, 0, 0, 25, 2, 57, 126, 0, 0, 0, 0, 46, 104, 83, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 79, 27, 0, 0, 8, 0, 8, 95, 199, 127, 0, 0, 0, 0, 27, 171, 211, 147, 0, 0, 0, 0, 0, 0, 123, 159, 0, 0, 12, 95, 75, 127, 151, 23, 0, 0, 0, 43, 91, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 82, 61, 2, 0, 0, 0, 0, 57, 95, 188, 26, 0, 0, 0, 0, 33, 171, 157, 0, 0, 0, 0, 72, 120, 60, 166, 3, 0, 26, 43, 7, 18, 144, 108, 0, 0, 25, 86, 126, 119, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 22, 16, 0, 0, 0, 0, 0, 11, 171, 111, 0, 0, 0, 0, 0, 5, 86, 175, 0, 0, 0, 0, 19, 92, 216, 130, 0, 0, 0, 0, 41, 71, 26, 169, 2, 0, 0, 57, 40, 57, 147, 105, 0, 0, 0, 25, 115, 95, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 15, 43, 0, 0, 0, 0, 0, 0, 96, 169, 0, 0, 0, 0, 1, 37, 160, 139, 0, 0, 0, 0, 34, 132, 137, 124, 0, 0, 0, 0, 0, 0, 80, 125, 0, 0, 0, 62, 90, 94, 167, 32, 0, 0, 0, 24, 110, 94, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 107, 87, 0, 0, 0, 0, 143, 139, 147, 255, 28, 0, 0, 0, 71, 95, 171, 191, 4, 0, 0, 0, 12, 111, 179, 119, 0, 0, 0, 0, 35, 0, 59, 195, 0, 0, 0, 20, 195, 143, 171, 79, 0, 0, 0, 0, 51, 63, 12, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 95, 72, 12, 0, 0, 0, 0, 69, 96, 181, 181, 0, 0, 0, 0, 57, 121, 216, 87, 0, 0, 0, 0, 107, 89, 93, 179, 12, 0, 0, 0, 0, 0, 32, 182, 14, 0, 0, 31, 175, 175, 165, 65, 0, 0, 0, 2, 56, 56, 1, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 98, 151, 159, 57, 0, 0, 0, 1, 53, 22, 111, 179, 0, 0, 0, 0, 85, 144, 202, 64, 0, 0, 0, 0, 47, 61, 93, 168, 27, 0, 2, 42, 17, 3, 45, 167, 33, 0, 9, 108, 151, 157, 139, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 70, 106, 106, 14, 0, 0, 0, 45, 104, 75, 170, 17, 0, 0, 0, 0, 1, 116, 73, 0, 0, 0, 0, 0, 16, 135, 151, 76, 0, 0, 0, 0, 0, 1, 69, 176, 0, 0, 0, 0, 66, 127, 153, 101, 0, 0, 0, 0, 37, 47, 11, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 139, 99, 13, 0, 0, 0, 0, 0, 13, 126, 82, 0, 0, 0, 0, 0, 92, 110, 6, 0, 0, 0, 0, 0, 0, 120, 45, 0, 0, 0, 0, 0, 33, 183, 42, 0, 0, 0, 2, 125, 143, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 83, 87, 2, 0, 0, 0, 0, 66, 101, 159, 47, 0, 0, 0, 64, 141, 208, 164, 2, 0, 0, 0, 7, 13, 72, 147, 0, 0, 59, 63, 0, 16, 169, 66, 0, 0, 12, 104, 153, 144, 34, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 147, 167, 35, 0, 0, 0, 0, 51, 83, 171, 39, 0, 0, 0, 27, 131, 195, 75, 0, 0, 0, 0, 0, 16, 115, 119, 0, 0, 4, 79, 0, 4, 127, 115, 0, 0, 0, 75, 147, 151, 79, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 121, 139, 127, 0, 0, 0, 0, 18, 43, 79, 144, 0, 0, 0, 0, 70, 166, 219, 77, 0, 0, 0, 19, 0, 0, 35, 156, 0, 0, 0, 102, 70, 2, 36, 161, 0, 0, 0, 4, 123, 151, 150, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 96, 135, 135, 49, 0, 0, 0, 0, 8, 2, 127, 121, 0, 0, 0, 0, 16, 147, 200, 38, 0, 0, 0, 0, 0, 9, 79, 171, 0, 0, 0, 7, 64, 7, 14, 186, 0, 0, 0, 3, 130, 164, 162, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 72, 114, 80, 0, 0, 0, 0, 111, 225, 214, 88, 0, 0, 0, 0, 0, 82, 209, 35, 0, 0, 0, 0, 0, 0, 195, 140, 0, 0, 0, 3, 43, 58, 243, 113, 0, 0, 0, 4, 190, 225, 113, 7, 0, 0, 0, 0, 24, 35, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 94, 70, 21, 0, 0, 0, 0, 5, 61, 67, 184, 31, 0, 0, 0, 0, 10, 108, 87, 5, 0, 0, 0, 0, 14, 116, 131, 46, 0, 0, 0, 0, 0, 0, 71, 133, 0, 0, 0, 0, 15, 71, 126, 101, 0, 0, 0, 0, 10, 51, 42, 2, 0, 0 },
    { 0, 0, 0, 17, 42, 6, 0, 0, 0, 0, 7, 118, 153, 140, 3, 0, 0, 0, 22, 50, 48, 166, 8, 0, 0, 0, 74, 204, 199, 72, 0, 0, 0, 27, 1, 0, 83, 143, 0, 0, 0, 147, 123, 43, 61, 168, 0, 0, 0, 3, 74, 121, 112, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 18, 63, 31, 0, 0, 0, 0, 18, 109, 147, 155, 0, 0, 0, 0, 0, 14, 108, 95, 0, 0, 0, 0, 0, 98, 191, 39, 0, 0, 0, 3, 20, 1, 47, 160, 0, 0, 0, 46, 208, 165, 142, 166, 0, 0, 0, 0, 78, 123, 66, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 84, 115, 73, 0, 0, 0, 0, 0, 9, 47, 115, 0, 0, 0, 0, 1, 47, 123, 30, 0, 0, 0, 0, 5, 70, 139, 55, 0, 0, 0, 0, 0, 0, 119, 54, 0, 0, 0, 0, 125, 119, 62, 0, 0, 0, 0, 0, 52, 28, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 72, 126, 99, 0, 0, 0, 0, 32, 48, 47, 183, 14, 0, 0, 0, 31, 183, 171, 112, 0, 0, 0, 0, 4, 47, 110, 141, 0, 0, 0, 24, 36, 0, 66, 155, 0, 0, 0, 13, 155, 178, 169, 41, 0, 0, 0, 0, 6, 44, 16, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 96, 73, 27, 40, 0, 0, 0, 27, 25, 78, 153, 10, 0, 0, 0, 43, 147, 181, 87, 53, 0, 0, 0, 8, 38, 78, 118, 0, 0, 0, 14, 66, 0, 90, 122, 47, 0, 0, 2, 138, 152, 104, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 93, 102, 69, 0, 0, 0, 0, 0, 0, 41, 98, 0, 0, 0, 0, 2, 93, 169, 37, 0, 0, 0, 0, 1, 27, 58, 112, 0, 0, 0, 31, 30, 0, 78, 87, 0, 0, 0, 7, 127, 122, 65, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 123, 125, 120, 52, 0, 0, 0, 0, 0, 12, 138, 141, 0, 0, 0, 0, 27, 100, 179, 27, 0, 0, 0, 0, 16, 47, 91, 161, 1, 0, 0, 2, 70, 0, 23, 168, 1, 0, 0, 1, 133, 156, 153, 55, 0, 0, 0, 0, 2, 31, 15, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 101, 96, 20, 0, 0, 0, 0, 0, 26, 134, 24, 0, 0, 0, 0, 0, 119, 30, 0, 0, 0, 0, 0, 0, 30, 106, 99, 0, 0, 0, 0, 0, 6, 88, 129, 0, 0, 2, 57, 98, 95, 36, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 159, 112, 61, 2, 0, 0, 0, 12, 44, 94, 226, 69, 0, 0, 0, 0, 54, 157, 93, 8, 0, 0, 0, 0, 95, 97, 1, 0, 0, 0, 0, 0, 25, 192, 38, 0, 0, 11, 124, 142, 155, 83, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 137, 156, 59, 0, 0, 0, 0, 12, 83, 162, 56, 0, 0, 0, 0, 9, 108, 171, 24, 0, 0, 0, 0, 8, 0, 69, 121, 0, 0, 0, 12, 117, 1, 109, 118, 0, 0, 0, 0, 121, 165, 98, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 65, 95, 118, 101, 1, 0, 0, 97, 83, 30, 62, 182, 14, 0, 0, 0, 0, 79, 162, 74, 0, 0, 0, 0, 0, 86, 145, 90, 0, 0, 0, 0, 61, 5, 28, 155, 16, 0, 0, 0, 132, 134, 152, 150, 5, 0, 0, 0, 7, 37, 40, 8, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 121, 129, 87, 13, 0, 0, 0, 0, 1, 11, 100, 185, 1, 0, 0, 0, 154, 194, 164, 86, 0, 0, 0, 0, 22, 55, 106, 122, 81, 0, 0, 89, 24, 0, 0, 16, 157, 0, 0, 14, 104, 121, 126, 136, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 96, 106, 129, 19, 0, 0, 0, 26, 5, 11, 115, 18, 0, 0, 0, 0, 108, 173, 91, 0, 0, 0, 0, 0, 0, 86, 115, 0, 0, 3, 77, 9, 1, 117, 100, 0, 0, 0, 60, 158, 158, 78, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 117, 138, 11, 0, 0, 0, 0, 2, 45, 149, 7, 0, 0, 0, 7, 129, 178, 60, 0, 0, 0, 0, 0, 0, 124, 81, 0, 0, 0, 25, 52, 1, 124, 84, 0, 0, 0, 8, 142, 150, 70, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 137, 123, 0, 0, 0, 0, 0, 13, 17, 137, 6, 0, 0, 0, 12, 120, 156, 68, 0, 0, 0, 0, 0, 24, 146, 75, 0, 0, 0, 5, 95, 2, 126, 82, 0, 0, 0, 1, 118, 155, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 118, 126, 87, 0, 0, 0, 0, 51, 25, 61, 158, 0, 0, 0, 0, 0, 92, 193, 70, 0, 0, 0, 0, 0, 17, 95, 137, 0, 0, 0, 75, 28, 0, 16, 166, 0, 0, 0, 30, 161, 156, 158, 87, 0, 0, 0, 0, 10, 42, 13, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 114, 137, 45, 0, 0, 0, 0, 0, 0, 21, 158, 4, 0, 0, 0, 0, 55, 100, 142, 2, 0, 0, 0, 0, 63, 154, 13, 0, 0, 0, 68, 33, 1, 174, 38, 0, 0, 0, 25, 155, 165, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 85, 81, 7, 0, 0, 0, 0, 66, 103, 186, 27, 0, 0, 0, 0, 0, 28, 158, 10, 0, 0, 0, 0, 37, 156, 225, 130, 0, 0, 0, 0, 10, 67, 138, 115, 0, 0, 0, 0, 20, 166, 155, 7, 0, 0, 0, 0, 0, 20, 16, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 40, 87, 66, 0, 0, 0, 0, 188, 193, 220, 253, 81, 0, 0, 0, 34, 140, 239, 206, 30, 0, 0, 0, 0, 38, 82, 186, 28, 0, 15, 87, 37, 22, 77, 199, 50, 0, 15, 129, 209, 212, 162, 74, 0, 0, 0, 0, 21, 23, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 97, 10, 0, 0, 0, 0, 54, 146, 186, 33, 0, 0, 0, 0, 5, 69, 218, 102, 0, 0, 0, 0, 5, 104, 74, 192, 0, 0, 0, 0, 10, 31, 117, 147, 0, 0, 0, 0, 71, 210, 137, 12, 0, 0, 0, 0, 7, 45, 7, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 39, 52, 6, 0, 0, 0, 21, 216, 235, 250, 156, 0, 0, 0, 29, 159, 151, 246, 175, 0, 0, 0, 0, 125, 240, 218, 238, 43, 0, 0, 0, 17, 59, 125, 241, 65, 0, 0, 0, 25, 180, 195, 93, 3, 0, 0, 0, 11, 95, 22, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 104, 106, 0, 0, 0, 0, 0, 0, 82, 161, 8, 0, 0, 0, 0, 0, 22, 141, 76, 0, 0, 0, 8, 5, 0, 100, 102, 0, 0, 0, 16, 68, 1, 144, 42, 0, 0, 0, 0, 102, 141, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 99, 111, 15, 0, 0, 0, 119, 79, 4, 75, 103, 0, 0, 0, 23, 83, 123, 99, 11, 0, 0, 0, 0, 0, 47, 91, 0, 0, 0, 47, 0, 0, 12, 123, 0, 0, 0, 91, 123, 123, 131, 71, 0, 0, 0, 0, 43, 59, 16, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 121, 119, 80, 0, 0, 0, 0, 88, 105, 174, 249, 7, 0, 0, 0, 34, 189, 242, 226, 2, 0, 0, 0, 3, 42, 25, 128, 43, 0, 0, 76, 25, 2, 79, 198, 36, 0, 0, 69, 220, 237, 189, 50, 0, 0, 0, 0, 44, 62, 14, 0, 0, 0 },
    { 0, 0, 0, 12, 10, 0, 0, 0, 0, 0, 0, 23, 95, 0, 0, 0, 0, 0, 15, 38, 116, 1, 0, 0, 0, 0, 56, 137, 157, 49, 0, 0, 0, 0, 0, 0, 7, 119, 0, 0, 0, 2, 1, 5, 97, 109, 0, 0, 0, 32, 56, 94, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 160, 154, 46, 0, 0, 0, 0, 0, 10, 148, 140, 0, 0, 0, 0, 56, 177, 235, 110, 0, 0, 0, 0, 34, 57, 39, 180, 0, 0, 0, 1, 15, 41, 196, 132, 0, 0, 0, 9, 171, 175, 60, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 22, 13, 0, 0, 82, 172, 188, 223, 253, 132, 0, 0, 99, 89, 116, 216, 194, 24, 0, 0, 0, 79, 177, 185, 146, 0, 0, 0, 21, 2, 2, 96, 210, 0, 0, 0, 122, 172, 198, 133, 31, 0, 0, 0, 23, 85, 59, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 51, 39, 0, 0, 0, 0, 0, 96, 125, 139, 14, 0, 0, 0, 0, 25, 131, 174, 1, 0, 0, 0, 0, 30, 128, 138, 8, 0, 39, 77, 0, 0, 77, 192, 17, 0, 39, 192, 87, 94, 220, 127, 0, 0, 0, 4, 104, 118, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 81, 44, 5, 0, 0, 0, 0, 0, 8, 130, 189, 34, 0, 0, 0, 0, 47, 148, 57, 1, 0, 0, 0, 0, 0, 113, 55, 0, 0, 0, 31, 7, 32, 93, 2, 0, 0, 4, 105, 96, 70, 0, 0, 0, 0, 0, 22, 21, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 127, 137, 39, 0, 0, 0, 0, 0, 44, 168, 104, 0, 0, 0, 0, 0, 107, 157, 120, 0, 0, 0, 0, 0, 0, 36, 150, 0, 0, 0, 71, 42, 15, 159, 128, 0, 0, 0, 15, 137, 165, 63, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 74, 105, 49, 0, 0, 0, 0, 58, 161, 127, 212, 1, 0, 0, 0, 13, 90, 175, 157, 0, 0, 0, 0, 20, 146, 139, 130, 0, 0, 0, 0, 24, 2, 18, 52, 0, 0, 0, 0, 127, 215, 213, 123, 0, 0, 0, 0, 14, 60, 47, 5, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 159, 183, 106, 1, 0, 0, 0, 7, 97, 112, 177, 62, 0, 0, 0, 25, 205, 252, 248, 35, 0, 0, 4, 6, 32, 118, 247, 17, 0, 0, 69, 150, 97, 205, 184, 4, 0, 0, 15, 141, 170, 59, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 37, 12, 0, 0, 0, 0, 0, 0, 119, 154, 14, 0, 0, 0, 0, 7, 77, 224, 56, 0, 0, 0, 0, 123, 235, 215, 158, 3, 0, 0, 0, 31, 33, 12, 161, 42, 0, 0, 0, 147, 112, 168, 189, 21, 0, 0, 0, 42, 122, 87, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 107, 83, 4, 0, 0, 0, 0, 0, 75, 103, 175, 19, 0, 0, 0, 0, 11, 59, 195, 67, 0, 0, 0, 0, 51, 179, 211, 139, 0, 0, 0, 0, 0, 0, 23, 159, 0, 0, 0, 0, 4, 87, 191, 163, 0, 0, 0, 0, 0, 15, 59, 15, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 88, 119, 34, 0, 0, 0, 8, 29, 152, 219, 97, 0, 0, 0, 0, 90, 216, 217, 129, 0, 0, 0, 0, 48, 63, 18, 159, 0, 0, 0, 0, 20, 10, 155, 148, 0, 0, 0, 0, 173, 218, 103, 5, 0, 0, 0, 0, 21, 42, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 173, 76, 1, 0, 0, 0, 0, 7, 64, 203, 65, 0, 0, 0, 0, 2, 107, 219, 48, 0, 0, 0, 0, 3, 101, 159, 118, 0, 0, 0, 0, 25, 76, 116, 148, 0, 0, 0, 0, 27, 163, 155, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 165, 76, 0, 0, 0, 0, 0, 32, 147, 192, 0, 0, 0, 0, 61, 140, 222, 186, 0, 0, 0, 0, 138, 155, 136, 153, 0, 0, 0, 7, 159, 61, 187, 142, 0, 0, 0, 0, 124, 184, 83, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 10, 39, 0, 0, 0, 0, 0, 0, 33, 201, 78, 0, 0, 0, 0, 0, 0, 31, 208, 55, 0, 0, 0, 0, 19, 151, 243, 89, 0, 0, 0, 0, 35, 123, 148, 168, 0, 0, 0, 0, 155, 142, 215, 148, 0, 0, 0, 0, 82, 123, 78, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 137, 38, 0, 0, 0, 0, 0, 38, 129, 66, 0, 0, 0, 0, 0, 21, 137, 10, 0, 0, 0, 0, 0, 56, 101, 1, 0, 0, 0, 0, 42, 21, 145, 24, 0, 0, 0, 0, 64, 145, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 48, 63, 19, 0, 0, 0, 0, 40, 60, 63, 83, 0, 0, 0, 0, 0, 9, 111, 35, 1, 0, 0, 0, 0, 9, 65, 78, 132, 0, 0, 0, 0, 0, 0, 0, 123, 0, 0, 0, 0, 0, 7, 92, 77, 0, 0, 0, 0, 0, 14, 60, 3, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 125, 48, 0, 0, 0, 0, 0, 24, 181, 62, 0, 0, 0, 0, 0, 71, 174, 45, 0, 0, 0, 0, 45, 0, 89, 139, 0, 0, 0, 0, 88, 36, 175, 44, 0, 0, 0, 0, 73, 153, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 91, 112, 24, 0, 0, 0, 0, 136, 138, 206, 49, 0, 0, 0, 0, 18, 91, 200, 55, 0, 0, 0, 0, 34, 166, 125, 165, 0, 0, 0, 0, 4, 13, 152, 105, 0, 0, 0, 0, 147, 197, 156, 9, 0, 0, 0, 0, 26, 36, 9, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 67, 0, 0, 0, 0, 0, 0, 15, 223, 51, 0, 0, 0, 0, 55, 171, 171, 19, 0, 0, 0, 0, 27, 111, 179, 147, 0, 0, 0, 0, 0, 4, 103, 207, 0, 0, 0, 0, 59, 143, 91, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 5, 0, 0, 0, 0, 17, 84, 92, 167, 23, 0, 0, 0, 0, 0, 63, 134, 1, 0, 0, 0, 0, 0, 80, 107, 114, 113, 27, 0, 0, 0, 0, 0, 5, 55, 100, 0, 0, 0, 1, 47, 66, 115, 18, 0, 0, 0, 1, 35, 5, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 51, 33, 13, 0, 0, 0, 0, 180, 167, 182, 219, 0, 0, 0, 0, 29, 2, 111, 172, 0, 0, 0, 0, 0, 46, 190, 29, 0, 0, 0, 0, 0, 97, 160, 0, 0, 0, 0, 0, 76, 156, 117, 0, 0, 0, 0, 0, 89, 123, 15, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 109, 98, 15, 0, 0, 0, 0, 126, 64, 177, 103, 0, 0, 0, 0, 0, 17, 213, 61, 0, 0, 0, 0, 82, 201, 152, 149, 0, 0, 0, 0, 35, 48, 104, 154, 0, 0, 0, 33, 82, 102, 178, 32, 0, 0, 0, 20, 63, 63, 26, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 94, 101, 0, 0, 0, 0, 0, 0, 62, 153, 4, 0, 0, 0, 0, 19, 149, 126, 65, 0, 0, 0, 0, 0, 0, 71, 93, 0, 0, 0, 0, 27, 0, 134, 63, 0, 0, 0, 0, 110, 138, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 28, 47, 8, 0, 0, 0, 0, 151, 171, 197, 140, 0, 0, 0, 0, 23, 80, 188, 52, 0, 0, 0, 0, 137, 190, 161, 114, 0, 0, 0, 0, 19, 7, 81, 163, 0, 0, 0, 0, 6, 87, 174, 42, 0, 0, 0, 0, 33, 114, 26, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 77, 104, 17, 0, 0, 0, 0, 67, 85, 30, 120, 0, 0, 0, 0, 0, 9, 58, 92, 0, 0, 0, 0, 0, 0, 12, 127, 54, 0, 0, 0, 0, 0, 0, 37, 132, 0, 0, 0, 0, 0, 83, 185, 88, 0, 0, 0, 0, 0, 17, 26, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 91, 90, 1, 0, 0, 0, 0, 70, 110, 158, 1, 0, 0, 0, 0, 2, 100, 95, 0, 0, 0, 0, 0, 11, 88, 227, 126, 0, 0, 0, 0, 0, 0, 135, 167, 0, 0, 0, 0, 13, 131, 148, 61, 0, 0, 0, 0, 4, 33, 20, 0, 0, 0 },
    { 0, 0, 0, 0, 23, 1, 0, 0, 0, 0, 0, 3, 143, 71, 0, 0, 0, 0, 0, 0, 65, 161, 0, 0, 0, 0, 0, 68, 181, 72, 0, 0, 0, 0, 0, 28, 174, 5, 0, 0, 0, 0, 85, 89, 135, 1, 0, 0, 0, 0, 74, 88, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 4, 51, 111, 104, 80, 63, 0, 0, 3, 44, 26, 37, 184, 178, 5, 0, 0, 0, 15, 125, 219, 59, 0, 0, 0, 14, 174, 102, 77, 181, 20, 0, 0, 38, 15, 0, 0, 129, 81, 0, 0, 34, 155, 165, 184, 173, 19, 0, 0, 0, 4, 39, 45, 7, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 170, 158, 62, 0, 0, 0, 0, 83, 67, 179, 112, 0, 0, 0, 0, 15, 143, 239, 65, 0, 0, 0, 0, 5, 35, 78, 162, 0, 0, 0, 1, 99, 100, 135, 178, 2, 0, 0, 8, 154, 189, 127, 68, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 84, 120, 56, 0, 0, 0, 0, 7, 69, 130, 140, 0, 0, 0, 0, 15, 146, 175, 17, 0, 0, 0, 0, 0, 25, 138, 49, 0, 0, 0, 0, 0, 28, 185, 28, 0, 0, 0, 28, 143, 193, 41, 0, 0, 0, 0, 0, 31, 34, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 106, 38, 0, 0, 0, 0, 102, 148, 231, 132, 0, 0, 0, 0, 12, 82, 209, 44, 0, 0, 0, 0, 67, 132, 166, 136, 4, 0, 0, 0, 4, 0, 163, 77, 0, 0, 0, 0, 191, 166, 92, 0, 0, 0, 0, 0, 52, 49, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 159, 129, 52, 0, 0, 0, 0, 93, 36, 90, 191, 0, 0, 0, 0, 0, 18, 157, 158, 0, 0, 0, 0, 12, 179, 188, 22, 0, 0, 0, 8, 1, 44, 187, 177, 0, 0, 0, 83, 171, 177, 145, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 108, 83, 6, 0, 0, 0, 0, 97, 87, 179, 35, 0, 0, 0, 0, 1, 96, 216, 78, 0, 0, 0, 0, 0, 46, 82, 181, 0, 0, 0, 1, 32, 1, 147, 99, 0, 0, 0, 2, 169, 167, 72, 0, 0, 0, 0, 0, 44, 50, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 101, 121, 105, 93, 27, 0, 0, 10, 126, 188, 253, 240, 84, 0, 0, 0, 108, 213, 172, 90, 2, 0, 0, 0, 78, 116, 182, 248, 62, 0, 0, 6, 99, 22, 36, 205, 65, 0, 0, 9, 194, 228, 200, 121, 2, 0, 0, 0, 14, 41, 20, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 151, 83, 3, 0, 0, 0, 0, 74, 58, 203, 76, 0, 0, 0, 0, 14, 136, 201, 62, 0, 0, 0, 0, 81, 82, 36, 139, 29, 0, 0, 8, 33, 0, 59, 162, 15, 0, 0, 11, 141, 136, 96, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 89, 59, 10, 0, 0, 0, 0, 153, 191, 184, 99, 0, 0, 0, 0, 12, 130, 200, 55, 0, 0, 0, 0, 51, 106, 78, 115, 100, 0, 0, 0, 34, 23, 16, 138, 63, 0, 0, 0, 139, 177, 164, 68, 0, 0, 0, 0, 9, 50, 18, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 101, 107, 37, 0, 0, 0, 0, 18, 88, 65, 189, 20, 0, 0, 0, 0, 0, 91, 198, 21, 0, 0, 0, 0, 0, 26, 97, 169, 20, 0, 0, 0, 0, 0, 33, 187, 27, 0, 0, 0, 41, 135, 211, 93, 0, 0, 0, 0, 0, 30, 44, 5, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 67, 100, 114, 17, 0, 0, 25, 110, 34, 53, 143, 13, 0, 0, 4, 6, 58, 167, 70, 0, 0, 0, 2, 39, 85, 49, 137, 2, 0, 0, 73, 17, 0, 0, 121, 4, 0, 0, 100, 100, 119, 132, 76, 0, 0, 0, 6, 51, 63, 21, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 102, 85, 3, 0, 0, 0, 0, 0, 15, 138, 14, 0, 0, 0, 0, 123, 181, 112, 3, 0, 0, 0, 0, 6, 3, 134, 90, 0, 0, 0, 0, 0, 0, 132, 84, 0, 0, 0, 0, 72, 105, 74, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 130, 137, 34, 0, 0, 0, 0, 77, 61, 128, 151, 0, 0, 0, 0, 0, 42, 214, 132, 0, 0, 0, 0, 12, 102, 51, 158, 1, 0, 0, 45, 11, 0, 104, 143, 0, 0, 0, 91, 98, 119, 90, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 139, 177, 104, 23, 0, 0, 0, 0, 26, 23, 130, 130, 0, 0, 0, 0, 5, 76, 185, 48, 0, 0, 0, 0, 25, 106, 116, 146, 0, 0, 0, 0, 43, 7, 5, 165, 3, 0, 0, 3, 157, 96, 143, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 63, 35, 0, 0, 0, 0, 0, 51, 79, 200, 58, 0, 0, 0, 0, 0, 4, 184, 26, 0, 0, 0, 0, 0, 111, 131, 1, 0, 0, 0, 0, 0, 49, 182, 30, 0, 0, 0, 0, 0, 97, 130, 1, 0, 0, 0, 0, 0, 78, 13, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 100, 85, 29, 0, 0, 0, 0, 53, 108, 63, 162, 0, 0, 0, 0, 18, 71, 179, 104, 0, 0, 0, 0, 37, 82, 67, 147, 0, 0, 0, 0, 1, 0, 86, 139, 0, 0, 0, 0, 128, 150, 113, 8, 0, 0, 0, 0, 14, 50, 3, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 90, 31, 7, 0, 0, 0, 0, 121, 139, 102, 168, 0, 0, 0, 0, 0, 27, 148, 140, 0, 0, 0, 0, 74, 197, 125, 136, 0, 0, 0, 0, 17, 25, 105, 129, 0, 0, 0, 0, 170, 155, 138, 20, 0, 0, 0, 0, 41, 54, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 67, 0, 0, 0, 0, 0, 0, 0, 92, 0, 0, 0, 0, 0, 0, 82, 106, 0, 0, 0, 0, 0, 0, 0, 85, 0, 0, 0, 0, 0, 45, 28, 95, 0, 0, 0, 0, 0, 31, 98, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 67, 0, 0, 0, 0, 0, 104, 145, 182, 106, 0, 0, 0, 0, 0, 47, 166, 46, 0, 0, 0, 0, 74, 146, 118, 133, 0, 0, 0, 0, 0, 0, 93, 136, 0, 0, 0, 0, 157, 138, 86, 5, 0, 0, 0, 0, 46, 26, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 43, 63, 65, 16, 0, 0, 0, 36, 96, 99, 198, 141, 0, 0, 0, 0, 15, 145, 162, 27, 0, 0, 25, 0, 118, 179, 25, 0, 0, 0, 112, 0, 30, 202, 46, 0, 0, 0, 93, 160, 147, 24, 0, 0, 0, 0, 0, 11, 2, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 148, 157, 134, 29, 0, 0, 0, 26, 50, 26, 176, 76, 0, 0, 0, 0, 87, 197, 216, 104, 0, 0, 0, 1, 5, 5, 3, 88, 76, 0, 0, 85, 78, 12, 0, 14, 130, 0, 0, 3, 73, 145, 155, 171, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 95, 126, 121, 59, 0, 0, 0, 50, 58, 27, 156, 156, 0, 0, 0, 0, 32, 156, 175, 39, 0, 0, 44, 107, 226, 228, 117, 0, 0, 0, 127, 42, 121, 196, 55, 0, 0, 0, 88, 190, 139, 17, 0, 0, 0, 0, 6, 16, 1, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 10, 2, 0, 0, 0, 0, 0, 44, 140, 185, 84, 0, 0, 0, 0, 22, 121, 142, 33, 0, 2, 6, 18, 148, 109, 0, 0, 0, 32, 94, 21, 100, 135, 0, 0, 0, 5, 77, 123, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 173, 148, 0, 0, 0, 0, 0, 59, 224, 189, 3, 0, 0, 0, 15, 186, 252, 112, 0, 0, 0, 0, 1, 28, 130, 178, 0, 0, 0, 9, 112, 86, 216, 111, 0, 0, 0, 15, 182, 164, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 40, 16, 0, 0, 0, 0, 0, 80, 140, 170, 0, 0, 0, 0, 10, 121, 157, 56, 0, 0, 68, 0, 53, 195, 27, 0, 0, 0, 136, 127, 149, 95, 4, 0, 0, 0, 6, 33, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 105, 54, 12, 0, 0, 0, 0, 49, 123, 222, 182, 1, 0, 0, 0, 24, 187, 170, 33, 0, 0, 0, 0, 0, 2, 76, 183, 18, 0, 0, 0, 0, 0, 41, 189, 12, 0, 0, 25, 161, 152, 151, 55, 0, 0, 0, 2, 53, 41, 6, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 113, 126, 2, 0, 0, 0, 0, 35, 68, 170, 5, 0, 0, 0, 3, 48, 157, 66, 0, 0, 0, 0, 18, 138, 94, 0, 0, 0, 0, 0, 0, 8, 138, 0, 0, 0, 0, 21, 150, 151, 42, 0, 0, 0, 0, 0, 60, 36, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 110, 127, 122, 30, 0, 0, 0, 24, 73, 122, 198, 61, 0, 0, 0, 0, 69, 218, 112, 0, 0, 0, 2, 0, 4, 115, 188, 0, 0, 0, 71, 61, 17, 166, 127, 0, 0, 0, 34, 202, 166, 46, 0, 0, 0, 0, 0, 49, 12, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 57, 2, 0, 0, 0, 0, 10, 64, 76, 99, 0, 0, 0, 0, 0, 0, 73, 54, 0, 0, 0, 0, 0, 0, 72, 135, 85, 0, 0, 0, 0, 0, 0, 80, 99, 0, 0, 0, 0, 0, 15, 120, 12, 0, 0, 0, 0, 0, 47, 35, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 89, 120, 122, 25, 0, 0, 0, 52, 124, 98, 168, 103, 0, 0, 0, 0, 6, 122, 190, 33, 0, 0, 0, 1, 104, 231, 60, 0, 0, 0, 57, 52, 34, 224, 70, 0, 0, 0, 41, 211, 193, 63, 0, 0, 0, 0, 0, 42, 29, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 55, 104, 126, 29, 0, 0, 6, 151, 107, 66, 163, 97, 0, 0, 0, 2, 13, 144, 163, 9, 0, 0, 18, 2, 135, 189, 135, 0, 0, 0, 99, 2, 8, 142, 129, 0, 0, 0, 52, 169, 173, 95, 4, 0, 0, 0, 0, 46, 40, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 90, 112, 126, 61, 0, 0, 0, 61, 65, 66, 156, 102, 0, 0, 0, 0, 52, 165, 148, 6, 0, 0, 0, 96, 210, 165, 25, 0, 0, 0, 30, 15, 61, 212, 47, 0, 0, 0, 123, 176, 163, 37, 0, 0, 0, 0, 14, 46, 4, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 61, 82, 80, 25, 0, 0, 0, 27, 84, 92, 182, 101, 0, 0, 0, 0, 9, 141, 178, 19, 0, 0, 3, 48, 187, 202, 17, 0, 0, 35, 134, 20, 119, 166, 7, 0, 0, 0, 78, 184, 146, 12, 0, 0, 0, 0, 0, 10, 4, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 79, 127, 107, 87, 27, 0, 0, 0, 23, 32, 59, 191, 99, 0, 0, 0, 0, 35, 167, 87, 4, 0, 0, 0, 0, 23, 119, 143, 87, 0, 0, 0, 8, 27, 0, 39, 123, 87, 0, 0, 4, 127, 159, 143, 155, 59, 0, 0, 0, 0, 27, 32, 8, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 101, 94, 57, 6, 0, 0, 0, 2, 94, 61, 163, 186, 0, 0, 0, 0, 2, 62, 203, 148, 0, 0, 0, 0, 10, 66, 55, 195, 0, 0, 0, 0, 0, 0, 65, 186, 0, 0, 0, 72, 155, 168, 136, 32, 0, 0, 0, 27, 63, 47, 1, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 60, 121, 118, 13, 0, 0, 0, 68, 91, 55, 164, 98, 0, 0, 0, 0, 3, 117, 167, 19, 0, 0, 0, 1, 135, 216, 58, 0, 0, 0, 50, 2, 40, 202, 78, 0, 0, 0, 62, 205, 182, 68, 1, 0, 0, 0, 3, 55, 21, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 99, 92, 32, 0, 0, 0, 37, 119, 93, 168, 153, 0, 0, 0, 0, 0, 104, 183, 38, 0, 0, 0, 37, 190, 230, 81, 0, 0, 0, 42, 19, 80, 214, 90, 0, 0, 0, 128, 186, 178, 61, 0, 0, 0, 0, 11, 53, 14, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 12, 0, 0, 0, 0, 83, 144, 141, 164, 109, 0, 0, 0, 21, 10, 46, 161, 51, 0, 0, 3, 0, 102, 198, 126, 0, 0, 0, 107, 12, 26, 161, 111, 0, 0, 0, 30, 131, 143, 61, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 152, 56, 0, 0, 0, 0, 0, 14, 3, 126, 56, 0, 0, 0, 0, 0, 3, 85, 69, 0, 0, 0, 0, 0, 68, 164, 53, 0, 0, 0, 0, 26, 20, 44, 96, 0, 0, 0, 0, 40, 135, 129, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 85, 143, 158, 47, 0, 0, 0, 12, 28, 36, 157, 36, 0, 0, 0, 0, 61, 156, 70, 0, 0, 0, 0, 0, 33, 188, 54, 0, 0, 28, 80, 0, 40, 163, 16, 0, 0, 6, 116, 154, 127, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 100, 53, 9, 0, 0, 0, 0, 0, 0, 82, 153, 2, 0, 0, 0, 0, 51, 90, 23, 0, 0, 0, 0, 0, 86, 6, 0, 0, 0, 0, 0, 4, 32, 80, 0, 0, 0, 0, 3, 100, 89, 65, 0, 0, 0, 0, 0, 44, 24, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 105, 98, 14, 0, 0, 0, 0, 138, 63, 132, 121, 0, 0, 0, 0, 4, 56, 211, 148, 4, 0, 0, 0, 137, 134, 48, 124, 81, 0, 0, 0, 3, 0, 60, 179, 32, 0, 0, 0, 74, 182, 132, 37, 0, 0, 0, 0, 19, 40, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 62, 122, 94, 1, 0, 0, 0, 82, 137, 163, 220, 6, 0, 0, 0, 9, 81, 237, 97, 0, 0, 0, 2, 105, 42, 108, 156, 0, 0, 0, 25, 102, 0, 27, 156, 0, 0, 0, 0, 167, 219, 186, 80, 0, 0, 0, 0, 13, 47, 10, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 84, 58, 0, 0, 0, 0, 55, 124, 193, 73, 0, 0, 0, 0, 0, 54, 134, 3, 0, 0, 0, 0, 0, 12, 120, 0, 0, 0, 0, 0, 0, 43, 116, 0, 0, 0, 0, 0, 104, 174, 17, 0, 0, 0, 0, 0, 56, 28, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 149, 159, 80, 0, 0, 0, 0, 51, 23, 89, 181, 0, 0, 0, 0, 33, 176, 213, 188, 8, 0, 0, 0, 6, 46, 5, 123, 57, 0, 0, 18, 85, 95, 90, 182, 17, 0, 0, 46, 181, 187, 111, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 133, 155, 69, 0, 0, 0, 0, 102, 39, 81, 166, 0, 0, 0, 0, 63, 150, 194, 73, 0, 0, 0, 0, 13, 28, 110, 137, 0, 0, 0, 1, 21, 45, 80, 191, 13, 0, 0, 45, 184, 165, 187, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 156, 164, 60, 0, 0, 4, 4, 0, 28, 187, 119, 0, 0, 0, 21, 143, 198, 225, 90, 0, 0, 0, 5, 41, 6, 28, 165, 55, 0, 0, 1, 8, 8, 58, 183, 64, 0, 0, 16, 147, 187, 148, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 87, 125, 18, 0, 0, 0, 0, 3, 21, 133, 15, 0, 0, 0, 0, 22, 134, 159, 48, 0, 0, 0, 0, 53, 33, 2, 123, 6, 0, 0, 0, 0, 0, 47, 139, 1, 0, 0, 12, 113, 108, 79, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 116, 112, 84, 59, 10, 0, 0, 91, 172, 231, 252, 249, 87, 0, 0, 0, 124, 238, 133, 68, 8, 0, 0, 0, 89, 161, 189, 207, 58, 0, 0, 49, 80, 14, 35, 172, 133, 0, 0, 14, 158, 217, 210, 154, 38, 0, 0, 0, 5, 27, 20, 5, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 134, 127, 70, 0, 0, 0, 0, 0, 1, 94, 60, 0, 0, 0, 0, 10, 135, 152, 142, 94, 1, 0, 0, 10, 32, 0, 0, 83, 77, 0, 0, 0, 14, 0, 6, 107, 66, 0, 0, 0, 85, 143, 130, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 95, 165, 155, 5, 0, 0, 0, 30, 99, 33, 176, 14, 0, 0, 0, 111, 129, 175, 126, 0, 0, 0, 0, 23, 51, 185, 42, 0, 0, 0, 0, 36, 63, 137, 99, 0, 0, 0, 7, 164, 129, 178, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 51, 111, 112, 4, 0, 0, 0, 142, 114, 16, 120, 49, 0, 0, 0, 6, 30, 120, 156, 10, 0, 0, 0, 66, 128, 136, 117, 0, 0, 0, 0, 0, 0, 43, 165, 0, 0, 0, 99, 146, 148, 130, 41, 0, 0, 0, 46, 49, 15, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 98, 133, 124, 0, 0, 0, 0, 14, 76, 132, 124, 0, 0, 0, 0, 45, 192, 141, 9, 0, 0, 0, 0, 0, 0, 89, 125, 0, 0, 0, 0, 118, 139, 136, 170, 12, 0, 0, 0, 117, 125, 135, 46, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 138, 171, 134, 0, 0, 0, 0, 45, 52, 42, 198, 2, 0, 0, 0, 77, 129, 217, 125, 0, 0, 0, 0, 66, 60, 93, 179, 0, 0, 0, 18, 71, 41, 145, 163, 0, 0, 0, 96, 178, 139, 58, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 97, 166, 143, 2, 0, 0, 0, 5, 64, 114, 169, 2, 0, 0, 0, 42, 163, 180, 43, 0, 0, 0, 0, 0, 1, 155, 68, 0, 0, 0, 54, 52, 10, 101, 119, 0, 0, 0, 58, 176, 186, 132, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 88, 100, 74, 1, 0, 0, 0, 41, 131, 63, 181, 33, 0, 0, 0, 40, 162, 192, 109, 0, 0, 0, 3, 25, 35, 142, 122, 45, 0, 0, 125, 204, 213, 219, 164, 70, 0, 0, 10, 68, 70, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 18, 0, 0, 0, 0, 0, 0, 31, 116, 130, 41, 0, 0, 0, 0, 0, 0, 100, 78, 0, 0, 0, 0, 0, 8, 129, 4, 0, 0, 0, 0, 0, 45, 81, 0, 0, 0, 0, 0, 0, 24, 120, 0, 0, 0, 0, 0, 0, 34, 23, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 89, 53, 28, 5, 0, 0, 0, 0, 47, 87, 102, 151, 48, 0, 0, 0, 0, 0, 74, 152, 16, 0, 0, 0, 0, 77, 164, 21, 0, 0, 0, 0, 0, 4, 104, 121, 0, 0, 0, 40, 112, 129, 134, 42, 0, 0, 0, 16, 63, 58, 7, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 74, 91, 0, 0, 0, 0, 0, 28, 128, 46, 0, 0, 0, 0, 0, 9, 80, 117, 41, 0, 0, 0, 0, 0, 0, 15, 107, 0, 0, 0, 0, 55, 0, 46, 113, 0, 0, 0, 0, 107, 87, 84, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 114, 89, 7, 0, 0, 0, 0, 51, 59, 74, 168, 33, 0, 0, 0, 0, 66, 118, 216, 49, 0, 0, 0, 0, 88, 133, 163, 158, 27, 0, 0, 0, 0, 0, 0, 60, 107, 0, 0, 0, 0, 53, 177, 195, 71, 0, 0, 0, 0, 0, 48, 53, 1, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 31, 7, 0, 0, 0, 3, 120, 224, 230, 133, 0, 0, 0, 0, 64, 78, 121, 209, 45, 0, 0, 0, 0, 0, 80, 128, 197, 15, 0, 0, 0, 0, 0, 7, 191, 50, 0, 0, 0, 0, 15, 173, 215, 18, 0, 0, 0, 0, 22, 116, 54, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 169, 55, 0, 0, 0, 0, 0, 24, 70, 138, 0, 0, 0, 0, 0, 57, 200, 185, 68, 0, 0, 0, 0, 0, 0, 18, 133, 27, 0, 0, 0, 59, 40, 9, 80, 53, 0, 0, 0, 32, 119, 185, 153, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 86, 81, 15, 0, 0, 0, 30, 54, 1, 91, 23, 0, 0, 0, 6, 7, 87, 99, 19, 0, 0, 0, 0, 55, 40, 26, 64, 76, 0, 0, 0, 30, 0, 0, 16, 84, 0, 0, 0, 54, 110, 97, 91, 1, 0, 0, 0, 0, 28, 36, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 164, 184, 136, 18, 0, 0, 0, 4, 38, 78, 220, 100, 0, 0, 0, 0, 184, 238, 215, 42, 0, 0, 0, 0, 46, 95, 143, 179, 36, 0, 0, 0, 53, 66, 45, 113, 149, 0, 0, 0, 53, 144, 185, 189, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 93, 35, 0, 0, 0, 0, 104, 122, 191, 24, 0, 0, 0, 0, 4, 89, 69, 0, 0, 0, 0, 0, 0, 33, 122, 27, 0, 0, 0, 0, 0, 0, 100, 122, 0, 0, 0, 7, 110, 133, 118, 27, 0, 0, 0, 6, 60, 27, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 79, 107, 38, 0, 0, 0, 0, 9, 7, 2, 131, 7, 0, 0, 0, 0, 0, 69, 143, 4, 0, 0, 0, 0, 0, 2, 67, 105, 0, 0, 0, 0, 1, 2, 12, 112, 0, 0, 0, 0, 26, 118, 120, 49, 0, 0, 0, 0, 0, 28, 17, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 94, 106, 133, 70, 0, 0, 0, 0, 0, 0, 95, 144, 0, 0, 0, 0, 44, 129, 147, 37, 0, 0, 0, 0, 48, 104, 154, 112, 0, 0, 0, 66, 17, 0, 14, 136, 39, 0, 0, 18, 82, 108, 139, 127, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 147, 172, 159, 49, 0, 0, 0, 91, 130, 110, 227, 99, 0, 0, 0, 1, 128, 209, 254, 168, 5, 0, 0, 0, 136, 149, 81, 149, 116, 0, 0, 10, 132, 93, 93, 169, 140, 0, 0, 3, 118, 163, 181, 176, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 42, 7, 0, 0, 0, 0, 0, 0, 184, 128, 0, 0, 0, 0, 24, 87, 204, 96, 0, 0, 0, 0, 198, 249, 159, 43, 0, 0, 0, 0, 89, 148, 121, 167, 93, 0, 0, 17, 157, 109, 88, 145, 96, 0, 0, 2, 80, 118, 117, 84, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 89, 147, 172, 130, 0, 0, 0, 0, 29, 13, 115, 180, 0, 0, 0, 0, 0, 56, 231, 91, 0, 0, 0, 0, 0, 56, 98, 196, 10, 0, 52, 93, 0, 0, 70, 210, 12, 0, 45, 156, 168, 168, 133, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 157, 100, 0, 0, 0, 0, 0, 183, 112, 144, 0, 0, 0, 0, 0, 42, 131, 80, 0, 0, 0, 0, 0, 0, 38, 181, 50, 0, 0, 0, 0, 0, 9, 126, 171, 0, 0, 0, 0, 18, 135, 178, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 165, 106, 10, 0, 0, 0, 0, 42, 21, 146, 98, 0, 0, 0, 0, 20, 83, 202, 39, 0, 0, 0, 0, 46, 92, 105, 125, 0, 0, 0, 0, 48, 1, 65, 174, 0, 0, 0, 0, 116, 164, 167, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 87, 114, 31, 0, 0, 0, 0, 0, 0, 82, 91, 0, 0, 0, 0, 0, 59, 129, 24, 0, 0, 0, 0, 0, 20, 116, 3, 0, 0, 0, 3, 64, 2, 116, 1, 0, 0, 0, 0, 81, 110, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 158, 160, 131, 21, 0, 0, 0, 8, 16, 22, 212, 84, 0, 0, 0, 0, 97, 168, 160, 18, 0, 0, 0, 0, 121, 150, 167, 165, 8, 0, 0, 0, 0, 0, 35, 199, 59, 0, 0, 12, 109, 133, 148, 123, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 155, 149, 126, 111, 0, 0, 0, 0, 19, 47, 176, 172, 0, 0, 0, 0, 80, 228, 166, 37, 0, 0, 0, 0, 6, 39, 84, 167, 63, 0, 0, 3, 7, 11, 38, 120, 81, 0, 10, 106, 165, 183, 139, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 99, 179, 155, 79, 0, 0, 0, 0, 8, 12, 103, 207, 4, 0, 0, 0, 119, 175, 215, 79, 0, 0, 0, 0, 24, 35, 95, 171, 47, 0, 0, 39, 55, 0, 8, 107, 111, 0, 0, 59, 167, 159, 167, 123, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 89, 97, 112, 43, 0, 0, 0, 52, 86, 39, 45, 149, 1, 0, 0, 0, 25, 134, 159, 183, 0, 0, 0, 0, 2, 32, 72, 132, 30, 0, 0, 0, 0, 0, 3, 75, 63, 0, 0, 5, 138, 159, 160, 102, 3, 0, 0, 0, 22, 45, 6, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 29, 41, 61, 0, 0, 0, 0, 183, 182, 167, 243, 31, 0, 0, 0, 25, 50, 181, 182, 10, 0, 0, 0, 38, 215, 232, 149, 0, 0, 0, 0, 0, 40, 70, 163, 0, 0, 0, 6, 75, 140, 158, 60, 0, 0, 0, 18, 103, 82, 13, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 88, 185, 122, 0, 0, 0, 0, 26, 118, 223, 137, 0, 0, 0, 0, 70, 204, 212, 52, 0, 0, 0, 0, 29, 64, 83, 169, 38, 0, 9, 42, 30, 31, 85, 165, 44, 0, 20, 129, 177, 158, 95, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 49, 28, 0, 0, 0, 0, 0, 140, 151, 178, 83, 0, 0, 0, 0, 0, 2, 134, 110, 0, 0, 0, 0, 13, 150, 200, 194, 0, 0, 0, 0, 0, 9, 18, 140, 0, 0, 0, 0, 4, 31, 138, 64, 0, 0, 0, 0, 53, 94, 63, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 112, 56, 12, 0, 0, 0, 0, 24, 18, 139, 175, 0, 0, 0, 0, 0, 107, 96, 25, 0, 0, 0, 0, 0, 63, 105, 6, 0, 0, 0, 0, 0, 0, 111, 99, 0, 0, 0, 0, 44, 110, 132, 108, 0, 0, 0, 0, 0, 14, 47, 11, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 94, 106, 57, 0, 0, 0, 0, 64, 154, 244, 174, 2, 0, 0, 0, 83, 175, 74, 9, 0, 0, 0, 0, 47, 139, 111, 65, 0, 0, 0, 0, 0, 7, 30, 159, 4, 0, 0, 7, 161, 180, 185, 84, 0, 0, 0, 0, 43, 46, 23, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 139, 144, 154, 129, 0, 0, 0, 0, 0, 1, 128, 150, 0, 0, 0, 0, 34, 134, 140, 25, 0, 0, 0, 0, 28, 118, 172, 58, 0, 0, 0, 0, 0, 0, 110, 178, 0, 0, 0, 61, 144, 143, 153, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 138, 29, 0, 0, 0, 0, 0, 113, 72, 125, 0, 0, 0, 0, 0, 22, 103, 103, 0, 0, 0, 0, 80, 222, 190, 72, 0, 0, 0, 3, 57, 45, 76, 135, 0, 0, 0, 9, 117, 116, 107, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 111, 119, 13, 0, 0, 0, 0, 3, 88, 154, 3, 0, 0, 0, 1, 63, 149, 32, 0, 0, 0, 0, 45, 120, 123, 111, 0, 0, 0, 18, 0, 0, 90, 124, 0, 0, 0, 63, 133, 134, 99, 6, 0, 0, 0, 0, 45, 49, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 143, 144, 14, 0, 0, 0, 0, 26, 61, 153, 5, 0, 0, 0, 0, 6, 137, 145, 12, 0, 0, 0, 0, 39, 105, 104, 139, 0, 0, 0, 0, 33, 29, 76, 139, 0, 0, 0, 0, 117, 151, 113, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 64, 101, 24, 0, 0, 0, 49, 118, 97, 181, 10, 0, 0, 0, 0, 38, 160, 66, 0, 0, 0, 0, 13, 89, 134, 84, 0, 0, 0, 0, 0, 0, 65, 133, 0, 0, 4, 112, 127, 130, 124, 25, 0, 0, 0, 5, 53, 39, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 19, 67, 100, 47, 0, 0, 0, 70, 111, 125, 184, 32, 0, 0, 0, 8, 86, 143, 42, 0, 0, 0, 0, 39, 110, 162, 62, 0, 0, 2, 7, 0, 0, 140, 81, 0, 0, 19, 140, 124, 129, 73, 0, 0, 0, 0, 15, 30, 9, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 60, 102, 6, 0, 0, 0, 114, 143, 199, 157, 0, 0, 0, 0, 46, 143, 181, 18, 0, 0, 0, 0, 34, 60, 112, 155, 0, 0, 0, 45, 0, 0, 12, 176, 0, 0, 0, 74, 156, 147, 157, 67, 0, 0, 0, 0, 27, 47, 7, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 126, 126, 119, 0, 0, 0, 0, 32, 75, 173, 180, 0, 0, 0, 0, 56, 121, 190, 47, 0, 0, 0, 2, 80, 81, 144, 161, 0, 0, 0, 5, 67, 10, 13, 184, 0, 0, 0, 74, 169, 89, 161, 134, 0, 0, 0, 1, 56, 63, 58, 12, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 57, 96, 23, 0, 0, 0, 7, 167, 141, 171, 35, 0, 0, 0, 0, 41, 132, 42, 0, 0, 0, 0, 0, 82, 145, 109, 57, 0, 0, 0, 0, 0, 16, 80, 131, 81, 0, 0, 0, 0, 47, 121, 121, 68, 0, 0, 0, 0, 1, 38, 24, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 66, 100, 104, 2, 0, 0, 0, 76, 112, 109, 172, 0, 0, 0, 0, 0, 45, 161, 46, 0, 0, 0, 0, 35, 102, 102, 135, 0, 0, 0, 0, 0, 0, 14, 147, 0, 0, 0, 71, 121, 123, 123, 54, 0, 0, 0, 22, 63, 45, 2, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 85, 5, 0, 0, 0, 0, 0, 0, 140, 85, 0, 0, 0, 0, 42, 118, 132, 20, 0, 0, 0, 0, 9, 49, 149, 17, 0, 0, 0, 0, 1, 1, 137, 65, 0, 0, 0, 0, 30, 128, 95, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 39, 57, 25, 0, 0, 0, 0, 91, 128, 131, 202, 0, 0, 0, 0, 0, 11, 136, 106, 0, 0, 0, 0, 142, 225, 71, 0, 0, 0, 0, 0, 77, 77, 163, 26, 0, 0, 0, 0, 12, 37, 172, 36, 0, 0, 0, 4, 61, 99, 58, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 122, 24, 0, 0, 0, 0, 41, 144, 151, 135, 0, 0, 0, 0, 0, 19, 142, 69, 0, 0, 0, 0, 109, 116, 134, 85, 0, 0, 0, 0, 0, 0, 70, 134, 0, 0, 0, 78, 108, 113, 87, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 142, 68, 0, 0, 0, 0, 2, 112, 98, 186, 0, 0, 0, 0, 4, 30, 149, 90, 0, 0, 0, 0, 99, 129, 152, 112, 0, 0, 0, 58, 3, 0, 107, 139, 0, 0, 0, 44, 151, 139, 96, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 107, 114, 50, 0, 0, 0, 0, 43, 38, 141, 106, 0, 0, 0, 0, 20, 123, 69, 3, 0, 0, 0, 0, 48, 153, 71, 14, 0, 0, 0, 0, 0, 45, 141, 137, 0, 0, 0, 0, 100, 113, 125, 41, 0, 0, 0, 0, 44, 34, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 120, 118, 46, 0, 0, 0, 0, 70, 53, 44, 120, 0, 0, 0, 0, 2, 57, 159, 66, 0, 0, 0, 0, 13, 92, 118, 105, 0, 0, 0, 0, 0, 0, 0, 91, 0, 0, 0, 0, 126, 131, 126, 110, 0, 0, 0, 0, 13, 41, 26, 2, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 53, 18, 0, 0, 0, 0, 39, 50, 117, 59, 0, 0, 0, 0, 0, 56, 120, 11, 0, 0, 0, 0, 0, 61, 143, 33, 0, 0, 0, 0, 0, 6, 117, 2, 0, 0, 0, 0, 10, 104, 21, 0, 0, 0, 0, 0, 31, 60, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 151, 96, 1, 0, 0, 0, 87, 137, 70, 178, 3, 0, 0, 3, 7, 53, 184, 95, 0, 0, 0, 3, 65, 106, 78, 161, 0, 0, 25, 35, 0, 0, 94, 152, 0, 0, 17, 125, 137, 139, 71, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 11, 1, 0, 0, 0, 3, 92, 137, 202, 25, 0, 0, 0, 0, 82, 162, 59, 0, 0, 33, 20, 0, 1, 80, 113, 0, 0, 62, 115, 27, 25, 94, 118, 0, 0, 0, 19, 89, 98, 48, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 102, 47, 1, 0, 0, 0, 0, 23, 31, 148, 104, 0, 0, 0, 0, 0, 20, 173, 79, 0, 0, 0, 0, 0, 111, 173, 66, 0, 0, 0, 0, 0, 4, 109, 151, 0, 0, 0, 0, 19, 150, 142, 18, 0, 0, 0, 0, 0, 37, 8, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 139, 131, 61, 0, 0, 0, 0, 0, 0, 34, 197, 18, 0, 0, 0, 0, 87, 154, 140, 1, 0, 0, 0, 0, 94, 93, 0, 0, 0, 0, 11, 69, 23, 154, 0, 0, 0, 0, 2, 98, 162, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 169, 128, 24, 0, 0, 0, 0, 4, 35, 150, 88, 0, 0, 0, 0, 31, 195, 217, 106, 0, 0, 0, 0, 0, 3, 13, 130, 0, 0, 0, 16, 14, 3, 112, 134, 0, 0, 0, 29, 170, 173, 111, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 31, 47, 6, 0, 0, 0, 0, 57, 107, 107, 140, 0, 0, 0, 0, 11, 59, 155, 64, 0, 0, 0, 0, 74, 94, 147, 24, 0, 0, 0, 0, 0, 0, 132, 17, 0, 0, 0, 0, 47, 106, 99, 0, 0, 0, 0, 0, 44, 115, 8, 0, 0, 0 },
    { 0, 0, 0, 21, 31, 0, 0, 0, 0, 0, 0, 110, 184, 95, 0, 0, 0, 0, 0, 6, 63, 136, 0, 0, 0, 0, 0, 42, 212, 144, 0, 0, 0, 34, 0, 0, 33, 122, 0, 0, 0, 89, 95, 58, 168, 98, 0, 0, 0, 3, 104, 115, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 164, 96, 0, 0, 0, 0, 0, 1, 51, 174, 0, 0, 0, 0, 0, 76, 202, 89, 0, 0, 0, 0, 0, 0, 35, 112, 0, 0, 6, 13, 62, 1, 111, 113, 0, 0, 0, 2, 145, 172, 79, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 6, 59, 25, 0, 0, 0, 0, 0, 21, 226, 148, 0, 0, 0, 0, 0, 0, 139, 125, 0, 0, 0, 0, 0, 0, 2, 155, 0, 0, 0, 0, 0, 0, 87, 173, 0, 0, 28, 118, 47, 78, 202, 73, 0, 0, 1, 33, 105, 115, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 98, 151, 83, 0, 0, 0, 0, 78, 96, 85, 159, 0, 0, 0, 0, 0, 37, 215, 104, 0, 0, 0, 0, 0, 0, 60, 169, 0, 0, 0, 58, 0, 4, 143, 126, 0, 0, 0, 82, 143, 143, 68, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 90, 105, 55, 0, 0, 0, 0, 6, 99, 188, 137, 14, 0, 0, 0, 0, 71, 216, 200, 153, 0, 0, 0, 0, 17, 15, 0, 135, 5, 0, 0, 0, 0, 0, 12, 140, 2, 0, 0, 0, 146, 185, 161, 64, 0, 0, 0, 0, 14, 49, 21, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 111, 147, 98, 0, 0, 0, 0, 0, 5, 70, 145, 0, 0, 0, 0, 40, 149, 201, 52, 0, 0, 0, 0, 36, 15, 86, 127, 0, 0, 0, 48, 61, 0, 97, 119, 0, 0, 0, 29, 142, 144, 126, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 161, 94, 0, 0, 0, 0, 0, 10, 63, 111, 0, 0, 0, 0, 0, 42, 166, 61, 0, 0, 0, 0, 0, 40, 150, 93, 0, 0, 0, 9, 30, 15, 155, 61, 0, 0, 0, 14, 166, 162, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 75, 115, 79, 0, 0, 0, 32, 255, 195, 211, 191, 0, 0, 0, 8, 99, 95, 231, 175, 0, 0, 0, 0, 131, 251, 175, 215, 67, 0, 0, 0, 75, 179, 91, 203, 99, 0, 0, 0, 35, 183, 175, 107, 4, 0, 0, 0, 0, 19, 11, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 28, 0, 0, 0, 0, 0, 0, 0, 103, 21, 0, 0, 0, 0, 0, 32, 117, 34, 0, 0, 0, 0, 0, 15, 102, 8, 0, 0, 0, 0, 0, 0, 97, 61, 0, 0, 0, 0, 47, 58, 80, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 175, 155, 36, 0, 0, 0, 0, 2, 19, 166, 105, 0, 0, 0, 0, 0, 57, 211, 32, 0, 0, 0, 0, 0, 2, 145, 91, 0, 0, 0, 0, 79, 51, 201, 67, 0, 0, 0, 0, 117, 179, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 80, 40, 0, 0, 0, 0, 0, 95, 17, 125, 0, 0, 0, 0, 0, 26, 66, 145, 6, 0, 0, 0, 0, 31, 143, 89, 103, 0, 0, 0, 0, 0, 0, 69, 103, 0, 0, 0, 0, 0, 37, 130, 13, 0, 0, 0, 0, 0, 28, 21, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 116, 172, 50, 0, 0, 0, 0, 23, 65, 123, 127, 0, 0, 0, 0, 0, 63, 203, 59, 0, 0, 0, 0, 0, 26, 137, 117, 0, 0, 0, 15, 94, 18, 163, 99, 0, 0, 0, 14, 172, 185, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 112, 59, 10, 0, 0, 0, 0, 5, 13, 73, 141, 52, 0, 0, 0, 0, 0, 72, 149, 26, 0, 0, 0, 0, 86, 105, 4, 0, 0, 0, 0, 2, 6, 128, 0, 0, 0, 0, 28, 136, 105, 80, 0, 0, 0, 0, 0, 50, 33, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 123, 88, 9, 0, 0, 0, 75, 93, 30, 198, 114, 0, 0, 0, 48, 82, 169, 217, 168, 66, 0, 0, 0, 101, 155, 22, 2, 151, 0, 0, 18, 23, 0, 0, 66, 120, 0, 0, 41, 169, 149, 160, 131, 10, 0, 0, 0, 34, 63, 31, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 11, 79, 162, 129, 0, 0, 0, 0, 4, 52, 49, 170, 0, 0, 0, 0, 0, 79, 190, 104, 0, 0, 0, 0, 0, 58, 126, 135, 0, 0, 0, 27, 19, 27, 176, 86, 0, 0, 0, 47, 183, 168, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 96, 5, 0, 0, 0, 0, 0, 11, 41, 126, 0, 0, 0, 0, 0, 0, 24, 134, 0, 0, 0, 0, 0, 85, 142, 133, 5, 0, 0, 0, 0, 10, 1, 141, 36, 0, 0, 0, 0, 0, 57, 119, 1, 0, 0, 0, 0, 0, 33, 11, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 122, 183, 188, 118, 0, 0, 0, 24, 71, 5, 17, 192, 0, 0, 1, 8, 0, 0, 101, 183, 0, 0, 0, 2, 0, 0, 188, 35, 0, 0, 0, 1, 26, 18, 125, 185, 6, 0, 0, 80, 158, 176, 180, 163, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 17, 63, 41, 0, 0, 0, 0, 0, 54, 148, 153, 90, 0, 0, 0, 0, 0, 0, 0, 179, 29, 0, 0, 0, 0, 0, 118, 206, 33, 0, 0, 0, 0, 0, 0, 71, 181, 21, 0, 0, 70, 76, 23, 14, 124, 100, 0, 0, 5, 69, 117, 126, 115, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 144, 180, 156, 25, 0, 0, 0, 36, 36, 14, 132, 56, 0, 0, 0, 0, 1, 129, 148, 6, 0, 0, 0, 0, 11, 179, 38, 0, 0, 4, 68, 32, 9, 110, 155, 0, 0, 2, 63, 134, 162, 168, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 125, 148, 109, 8, 0, 0, 0, 7, 35, 0, 185, 52, 0, 0, 0, 0, 5, 97, 194, 20, 0, 0, 0, 0, 18, 68, 102, 169, 23, 0, 0, 31, 108, 0, 42, 160, 44, 0, 0, 11, 118, 159, 142, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 189, 190, 170, 68, 0, 0, 0, 0, 95, 137, 205, 121, 0, 0, 0, 0, 76, 176, 233, 139, 3, 0, 0, 9, 0, 0, 13, 124, 126, 0, 0, 139, 55, 14, 32, 94, 117, 0, 0, 73, 160, 184, 174, 113, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 109, 126, 66, 0, 0, 0, 0, 90, 67, 46, 188, 21, 0, 0, 0, 15, 14, 122, 98, 0, 0, 0, 0, 0, 37, 127, 138, 147, 9, 0, 0, 0, 0, 0, 1, 110, 51, 0, 0, 0, 30, 121, 161, 177, 21, 0, 0, 0, 3, 23, 38, 13, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 38, 3, 0, 0, 17, 169, 177, 146, 146, 113, 0, 0, 12, 85, 19, 54, 148, 28, 0, 2, 6, 0, 0, 174, 30, 0, 0, 11, 26, 0, 0, 133, 74, 0, 0, 3, 63, 115, 140, 163, 57, 0, 0, 3, 45, 69, 51, 14, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 176, 139, 17, 0, 0, 0, 0, 58, 46, 180, 104, 0, 0, 0, 0, 0, 107, 194, 63, 0, 0, 0, 0, 0, 81, 225, 67, 0, 0, 0, 0, 50, 99, 214, 128, 0, 0, 0, 5, 117, 116, 98, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 9, 57, 19, 0, 0, 0, 0, 0, 27, 196, 162, 0, 0, 0, 0, 0, 0, 144, 154, 0, 0, 0, 0, 0, 15, 223, 189, 20, 0, 33, 141, 0, 0, 0, 75, 90, 0, 49, 193, 82, 42, 56, 173, 44, 0, 0, 15, 97, 125, 113, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 88, 111, 37, 0, 0, 0, 0, 85, 70, 102, 125, 0, 0, 0, 0, 0, 10, 148, 42, 0, 0, 0, 0, 0, 28, 136, 8, 0, 0, 0, 0, 0, 0, 150, 63, 0, 0, 0, 53, 111, 116, 123, 15, 0, 0, 0, 24, 58, 26, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 128, 128, 134, 66, 0, 0, 0, 13, 4, 0, 8, 161, 0, 0, 0, 0, 38, 59, 140, 132, 0, 0, 0, 0, 103, 102, 103, 148, 39, 0, 0, 13, 30, 7, 0, 86, 114, 0, 0, 44, 125, 149, 161, 146, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 20, 161, 118, 74, 56, 0, 0, 0, 0, 5, 53, 69, 201, 191, 0, 0, 0, 0, 0, 42, 243, 158, 0, 0, 0, 2, 1, 2, 109, 176, 23, 0, 0, 45, 104, 53, 58, 194, 76, 0, 0, 5, 163, 187, 140, 114, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 59, 35, 0, 0, 0, 0, 0, 46, 52, 135, 8, 0, 0, 0, 0, 0, 28, 144, 3, 0, 0, 0, 0, 0, 67, 111, 13, 0, 0, 0, 0, 0, 0, 114, 0, 0, 0, 0, 0, 0, 75, 46, 0, 0, 0, 0, 0, 7, 70, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 40, 40, 25, 0, 0, 0, 0, 29, 81, 74, 131, 117, 0, 0, 0, 0, 4, 70, 206, 105, 0, 0, 0, 0, 31, 69, 24, 147, 0, 0, 0, 0, 0, 0, 27, 133, 0, 0, 0, 38, 70, 96, 113, 23, 0, 0, 0, 24, 114, 74, 2, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 148, 165, 98, 0, 0, 0, 0, 17, 14, 53, 157, 0, 0, 0, 0, 0, 0, 127, 85, 0, 0, 0, 0, 8, 3, 159, 65, 0, 0, 0, 38, 43, 0, 104, 158, 0, 0, 0, 14, 143, 169, 126, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 143, 155, 99, 27, 0, 0, 0, 0, 0, 4, 127, 231, 8, 0, 0, 23, 151, 163, 207, 119, 0, 0, 0, 0, 20, 51, 127, 171, 19, 0, 0, 0, 39, 0, 12, 147, 59, 0, 0, 20, 151, 143, 163, 119, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 47, 106, 76, 0, 0, 0, 0, 124, 102, 56, 137, 0, 0, 0, 0, 17, 1, 135, 76, 0, 0, 0, 0, 0, 13, 135, 0, 0, 0, 0, 0, 0, 0, 140, 17, 0, 0, 0, 23, 118, 136, 121, 9, 0, 0, 0, 5, 58, 52, 4, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 106, 148, 134, 1, 0, 0, 0, 35, 52, 2, 140, 9, 0, 0, 0, 0, 0, 88, 99, 0, 0, 0, 0, 0, 11, 149, 2, 0, 0, 0, 45, 0, 0, 153, 49, 0, 0, 0, 63, 132, 151, 107, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 154, 142, 42, 0, 0, 0, 0, 5, 9, 95, 125, 0, 0, 0, 0, 0, 31, 153, 35, 0, 0, 0, 0, 0, 4, 147, 8, 0, 0, 0, 0, 0, 0, 157, 39, 0, 0, 0, 55, 110, 126, 75, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 103, 106, 60, 11, 0, 0, 0, 3, 50, 16, 162, 127, 0, 0, 0, 0, 74, 175, 223, 92, 9, 0, 0, 0, 23, 52, 49, 148, 125, 0, 0, 0, 5, 54, 151, 165, 29, 0, 0, 0, 177, 136, 31, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 141, 152, 65, 0, 0, 0, 0, 0, 1, 159, 87, 0, 0, 0, 0, 36, 142, 199, 101, 0, 0, 0, 0, 48, 73, 52, 168, 0, 0, 0, 39, 1, 7, 159, 88, 0, 0, 0, 51, 146, 155, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 92, 113, 18, 0, 0, 0, 0, 36, 93, 101, 113, 0, 0, 0, 0, 0, 57, 230, 99, 5, 0, 0, 0, 0, 0, 24, 123, 165, 2, 0, 0, 0, 0, 1, 2, 122, 30, 0, 0, 0, 0, 102, 204, 177, 14, 0, 0, 0, 0, 19, 39, 11, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 176, 174, 98, 0, 0, 0, 0, 1, 6, 88, 159, 0, 0, 0, 0, 40, 135, 227, 91, 0, 0, 0, 0, 40, 85, 65, 139, 31, 0, 0, 25, 58, 14, 14, 93, 64, 0, 0, 22, 139, 178, 185, 129, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 129, 93, 0, 0, 0, 0, 0, 46, 21, 122, 0, 0, 0, 0, 0, 45, 152, 148, 37, 0, 0, 0, 0, 23, 17, 33, 135, 0, 0, 0, 0, 0, 0, 54, 134, 0, 0, 0, 0, 98, 116, 105, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 183, 181, 101, 10, 0, 0, 0, 10, 22, 18, 183, 52, 0, 0, 0, 0, 67, 183, 231, 68, 0, 0, 0, 0, 39, 84, 77, 144, 41, 0, 0, 0, 20, 63, 71, 147, 55, 0, 0, 0, 71, 186, 160, 96, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 158, 165, 58, 0, 0, 0, 0, 47, 4, 40, 141, 0, 0, 0, 0, 0, 43, 206, 114, 13, 0, 0, 0, 0, 7, 43, 108, 177, 53, 0, 0, 2, 5, 8, 35, 120, 139, 0, 0, 78, 151, 149, 134, 95, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 63, 91, 119, 35, 0, 0, 0, 15, 63, 51, 183, 103, 0, 0, 0, 0, 0, 87, 147, 11, 0, 0, 0, 0, 0, 55, 171, 103, 0, 0, 0, 0, 0, 0, 87, 147, 0, 0, 0, 0, 159, 151, 123, 23, 0, 0, 0, 0, 51, 47, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 118, 107, 65, 20, 0, 0, 0, 6, 97, 143, 224, 164, 0, 0, 0, 0, 0, 141, 247, 105, 0, 0, 0, 0, 0, 24, 102, 162, 53, 0, 0, 0, 36, 1, 14, 98, 97, 0, 0, 7, 205, 233, 217, 144, 15, 0, 0, 0, 30, 63, 31, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 126, 80, 11, 0, 0, 0, 13, 176, 130, 230, 207, 1, 0, 0, 0, 19, 146, 242, 140, 0, 0, 0, 0, 8, 126, 218, 87, 0, 0, 0, 0, 32, 26, 137, 232, 13, 0, 0, 0, 127, 242, 221, 125, 0, 0, 0, 0, 7, 53, 35, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 80, 8, 0, 0, 0, 0, 0, 0, 15, 123, 27, 0, 0, 0, 0, 0, 0, 104, 46, 0, 0, 0, 0, 0, 132, 35, 0, 0, 0, 0, 0, 0, 69, 58, 0, 0, 0, 0, 0, 0, 39, 108, 0, 0, 0, 0, 0, 0, 30, 12, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 162, 144, 94, 1, 0, 0, 0, 22, 7, 26, 163, 26, 0, 0, 0, 15, 99, 202, 158, 0, 0, 0, 0, 15, 108, 149, 161, 27, 0, 0, 85, 53, 21, 79, 176, 36, 0, 0, 82, 160, 173, 129, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 104, 108, 67, 0, 0, 0, 0, 72, 78, 115, 207, 17, 0, 0, 0, 40, 147, 210, 126, 0, 0, 0, 0, 31, 107, 170, 106, 0, 0, 0, 0, 2, 1, 91, 157, 0, 0, 0, 29, 232, 230, 156, 34, 0, 0, 0, 7, 63, 61, 5, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 85, 126, 98, 0, 0, 0, 83, 117, 79, 170, 120, 0, 0, 0, 6, 6, 135, 101, 5, 0, 0, 0, 0, 21, 167, 159, 116, 10, 0, 0, 0, 0, 19, 62, 129, 103, 0, 0, 0, 89, 171, 167, 168, 45, 0, 0, 0, 35, 49, 15, 2, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 108, 88, 13, 0, 0, 0, 51, 67, 10, 105, 105, 0, 0, 0, 0, 14, 79, 134, 32, 0, 0, 0, 0, 43, 109, 116, 134, 1, 0, 0, 0, 37, 55, 0, 135, 4, 0, 0, 0, 77, 134, 138, 119, 0, 0, 0, 0, 1, 27, 29, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 116, 109, 45, 0, 0, 0, 0, 8, 17, 45, 186, 62, 0, 0, 0, 0, 0, 87, 162, 19, 0, 0, 0, 0, 0, 36, 149, 30, 0, 0, 0, 0, 0, 0, 104, 106, 0, 0, 0, 0, 0, 112, 179, 89, 0, 0, 0, 0, 0, 32, 45, 5, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 78, 107, 76, 0, 0, 0, 11, 141, 71, 44, 145, 0, 0, 0, 0, 0, 73, 197, 160, 0, 0, 0, 0, 0, 38, 17, 65, 52, 0, 0, 0, 3, 2, 44, 138, 40, 0, 0, 38, 147, 195, 180, 54, 0, 0, 0, 2, 54, 61, 11, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 95, 29, 0, 0, 0, 0, 11, 53, 11, 90, 0, 0, 0, 0, 0, 3, 104, 82, 0, 0, 0, 0, 0, 0, 0, 58, 86, 0, 0, 0, 0, 0, 0, 1, 90, 0, 0, 0, 0, 9, 74, 98, 84, 0, 0, 0, 0, 3, 47, 49, 4, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 140, 173, 106, 0, 0, 0, 0, 0, 0, 68, 181, 4, 0, 0, 0, 88, 170, 212, 81, 0, 0, 0, 0, 5, 14, 39, 137, 23, 0, 0, 6, 14, 35, 81, 160, 19, 0, 0, 42, 181, 169, 98, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 151, 151, 155, 0, 0, 0, 0, 12, 0, 47, 159, 0, 0, 0, 0, 19, 83, 203, 83, 0, 0, 0, 0, 67, 131, 163, 203, 43, 0, 0, 31, 99, 31, 35, 159, 51, 0, 0, 11, 127, 163, 163, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 160, 129, 42, 0, 0, 0, 0, 0, 2, 42, 174, 60, 0, 0, 0, 67, 110, 171, 173, 27, 0, 0, 0, 94, 152, 158, 97, 0, 0, 17, 83, 26, 21, 131, 136, 0, 0, 15, 79, 150, 173, 89, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 170, 127, 0, 0, 0, 0, 0, 12, 37, 152, 5, 0, 0, 0, 15, 77, 149, 133, 0, 0, 0, 0, 37, 118, 132, 101, 0, 0, 0, 34, 70, 21, 60, 113, 0, 0, 0, 7, 146, 185, 138, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 76, 111, 104, 27, 0, 0, 0, 7, 51, 55, 154, 70, 0, 0, 0, 18, 110, 177, 108, 2, 0, 0, 0, 10, 46, 68, 112, 0, 0, 18, 42, 0, 0, 27, 90, 0, 0, 19, 147, 143, 149, 94, 10, 0, 0, 0, 4, 23, 27, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 109, 64, 0, 0, 0, 0, 35, 137, 92, 127, 0, 0, 0, 0, 31, 13, 148, 188, 139, 6, 0, 0, 0, 0, 16, 0, 74, 91, 0, 0, 0, 24, 53, 0, 84, 87, 0, 0, 0, 72, 174, 144, 136, 3, 0, 0, 0, 0, 42, 27, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 98, 110, 39, 0, 0, 0, 21, 133, 14, 50, 135, 0, 0, 0, 4, 10, 0, 122, 64, 0, 0, 0, 1, 1, 51, 130, 109, 0, 0, 0, 15, 75, 0, 2, 121, 3, 0, 0, 0, 101, 107, 127, 129, 0, 0, 0, 0, 0, 18, 46, 4, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 83, 105, 0, 0, 0, 0, 68, 136, 152, 166, 0, 0, 0, 0, 92, 116, 160, 161, 20, 0, 0, 0, 0, 27, 1, 116, 20, 0, 0, 33, 65, 0, 89, 121, 0, 0, 0, 22, 168, 149, 76, 4, 0, 0, 0, 0, 54, 30, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 97, 66, 26, 0, 0, 0, 0, 12, 38, 109, 132, 0, 0, 0, 1, 25, 80, 87, 23, 0, 0, 0, 67, 125, 82, 54, 0, 0, 0, 0, 0, 0, 34, 103, 0, 0, 0, 86, 164, 131, 47, 7, 0, 0, 0, 0, 40, 34, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 34, 0, 0, 0, 0, 0, 0, 81, 176, 150, 205, 0, 0, 0, 0, 3, 8, 68, 121, 0, 0, 0, 0, 110, 174, 100, 21, 0, 0, 0, 0, 8, 14, 63, 86, 0, 0, 0, 0, 97, 132, 48, 2, 0, 0, 0, 0, 87, 53, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 99, 36, 0, 0, 0, 0, 0, 0, 1, 135, 10, 0, 0, 0, 0, 0, 0, 124, 42, 0, 0, 0, 0, 121, 181, 167, 24, 0, 0, 0, 0, 10, 14, 84, 106, 0, 0, 0, 0, 0, 0, 59, 130, 0, 0, 0, 0, 0, 0, 32, 30, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 88, 100, 24, 0, 0, 0, 0, 1, 7, 72, 151, 0, 0, 0, 0, 14, 108, 192, 87, 0, 0, 0, 0, 0, 0, 27, 140, 0, 0, 0, 33, 19, 0, 63, 130, 0, 0, 0, 2, 116, 121, 89, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 121, 162, 146, 2, 0, 0, 0, 52, 65, 165, 167, 1, 0, 0, 0, 53, 167, 229, 94, 0, 0, 0, 37, 46, 0, 29, 148, 64, 0, 0, 127, 76, 0, 0, 94, 92, 0, 0, 57, 94, 113, 153, 120, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 82, 90, 38, 0, 0, 0, 0, 7, 0, 4, 104, 0, 0, 0, 0, 21, 9, 9, 108, 0, 0, 0, 0, 58, 143, 138, 39, 0, 0, 0, 22, 5, 1, 99, 60, 0, 0, 0, 26, 102, 62, 101, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 48, 114, 86, 0, 0, 0, 5, 143, 116, 102, 193, 0, 0, 0, 0, 33, 68, 167, 141, 0, 0, 0, 1, 71, 83, 112, 168, 13, 0, 13, 132, 4, 0, 0, 104, 67, 0, 0, 52, 120, 122, 143, 130, 14, 0, 0, 0, 5, 30, 35, 1, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 49, 34, 0, 0, 0, 0, 0, 105, 92, 185, 31, 0, 0, 0, 0, 0, 64, 103, 0, 0, 0, 0, 0, 0, 19, 133, 4, 0, 0, 0, 0, 0, 0, 154, 25, 0, 0, 0, 0, 20, 105, 125, 0, 0, 0, 0, 0, 5, 85, 21, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 66, 115, 41, 0, 0, 0, 0, 118, 121, 152, 74, 0, 0, 0, 0, 0, 85, 161, 50, 0, 0, 0, 0, 0, 0, 23, 140, 0, 0, 0, 15, 30, 0, 36, 139, 0, 0, 0, 61, 132, 93, 126, 27, 0, 0, 0, 0, 39, 37, 1, 0, 0, 0 },
    { 0, 0, 0, 0, 45, 37, 0, 0, 0, 0, 40, 108, 197, 67, 0, 0, 0, 0, 35, 58, 136, 126, 0, 0, 0, 0, 34, 65, 154, 124, 0, 0, 5, 1, 89, 126, 121, 150, 12, 0, 65, 131, 51, 25, 50, 168, 45, 0, 0, 3, 63, 91, 103, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 97, 100, 54, 0, 0, 0, 9, 159, 147, 226, 145, 0, 0, 0, 0, 8, 92, 231, 89, 0, 0, 0, 0, 38, 149, 124, 196, 0, 0, 0, 8, 69, 9, 42, 200, 0, 0, 0, 1, 138, 207, 211, 106, 0, 0, 0, 0, 2, 31, 44, 2, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 146, 46, 0, 0, 0, 4, 114, 141, 192, 0, 0, 0, 0, 6, 53, 112, 133, 0, 0, 2, 53, 32, 82, 112, 171, 12, 0, 8, 176, 40, 0, 6, 158, 22, 0, 0, 48, 122, 119, 126, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 118, 101, 40, 16, 0, 0, 0, 0, 24, 145, 233, 113, 0, 0, 0, 0, 41, 153, 155, 122, 10, 0, 0, 0, 0, 0, 0, 24, 126, 0, 0, 64, 59, 0, 23, 115, 121, 0, 0, 13, 131, 176, 156, 100, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 84, 17, 0, 0, 0, 0, 42, 116, 139, 28, 0, 0, 0, 36, 45, 27, 113, 23, 0, 49, 35, 84, 133, 113, 113, 0, 0, 52, 114, 83, 29, 30, 131, 0, 0, 0, 0, 26, 63, 68, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 46, 144, 138, 0, 0, 0, 0, 9, 73, 63, 176, 11, 0, 0, 0, 54, 117, 192, 128, 0, 0, 0, 16, 17, 27, 100, 146, 0, 0, 0, 108, 0, 18, 152, 81, 0, 0, 0, 60, 144, 126, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 131, 131, 37, 0, 0, 0, 0, 15, 89, 191, 65, 0, 0, 0, 19, 155, 240, 143, 1, 0, 18, 127, 15, 0, 16, 158, 31, 0, 42, 172, 82, 29, 34, 160, 30, 0, 1, 35, 97, 120, 122, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 154, 167, 90, 0, 0, 0, 0, 1, 18, 131, 120, 0, 0, 0, 0, 88, 177, 182, 30, 0, 0, 0, 0, 0, 0, 129, 98, 0, 0, 0, 88, 14, 0, 63, 144, 0, 0, 0, 19, 124, 129, 150, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 121, 163, 77, 0, 0, 0, 0, 54, 57, 89, 163, 0, 0, 0, 0, 80, 138, 193, 87, 0, 0, 6, 22, 42, 70, 92, 157, 0, 0, 30, 144, 22, 0, 0, 149, 5, 0, 0, 28, 122, 147, 155, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 122, 152, 39, 0, 0, 0, 0, 4, 34, 107, 164, 0, 0, 0, 0, 45, 148, 201, 85, 0, 0, 0, 17, 0, 0, 63, 152, 0, 0, 0, 111, 42, 1, 0, 150, 2, 0, 0, 3, 79, 125, 134, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 130, 164, 96, 0, 0, 0, 0, 18, 28, 76, 142, 0, 0, 0, 0, 92, 157, 194, 53, 0, 0, 0, 0, 6, 25, 53, 158, 5, 0, 0, 14, 61, 0, 0, 127, 11, 0, 0, 1, 100, 129, 131, 117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 190, 154, 65, 0, 0, 0, 0, 49, 34, 179, 217, 0, 0, 0, 0, 0, 140, 240, 99, 0, 0, 0, 0, 0, 28, 136, 171, 2, 0, 0, 15, 52, 15, 86, 228, 10, 0, 0, 1, 147, 189, 176, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 103, 185, 79, 0, 0, 0, 0, 6, 103, 201, 49, 0, 0, 0, 0, 31, 201, 213, 94, 0, 0, 0, 5, 0, 0, 93, 221, 0, 0, 0, 71, 83, 55, 200, 151, 0, 0, 0, 6, 168, 176, 77, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 128, 156, 34, 0, 0, 0, 0, 0, 39, 212, 60, 0, 0, 0, 0, 0, 131, 228, 69, 0, 0, 0, 4, 3, 0, 72, 178, 0, 0, 0, 52, 51, 22, 159, 137, 0, 0, 0, 17, 168, 185, 97, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 152, 19, 0, 0, 0, 0, 0, 25, 205, 63, 0, 0, 0, 0, 0, 96, 235, 54, 0, 0, 0, 0, 0, 8, 213, 44, 0, 0, 0, 0, 72, 39, 223, 63, 0, 0, 0, 0, 66, 157, 131, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 34, 11, 0, 0, 0, 0, 0, 0, 134, 190, 101, 0, 0, 0, 0, 0, 10, 211, 140, 0, 0, 0, 0, 0, 3, 172, 156, 0, 0, 5, 74, 1, 0, 89, 209, 0, 0, 16, 168, 135, 126, 221, 120, 0, 0, 0, 1, 86, 120, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 158, 53, 0, 0, 0, 0, 0, 0, 109, 160, 0, 0, 0, 0, 21, 118, 188, 72, 0, 0, 0, 0, 2, 54, 173, 12, 0, 0, 0, 15, 71, 20, 204, 23, 0, 0, 0, 15, 139, 166, 70, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 165, 177, 101, 0, 0, 0, 0, 0, 63, 223, 107, 0, 0, 0, 0, 0, 56, 219, 69, 0, 0, 0, 0, 0, 0, 77, 191, 0, 0, 19, 135, 36, 22, 108, 202, 0, 0, 2, 81, 174, 186, 139, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 157, 182, 77, 0, 0, 0, 0, 37, 106, 185, 139, 0, 0, 0, 0, 0, 99, 194, 26, 0, 0, 0, 0, 0, 83, 163, 169, 0, 0, 0, 40, 63, 3, 109, 176, 0, 0, 0, 9, 140, 180, 161, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 48, 113, 96, 0, 0, 0, 0, 24, 79, 10, 141, 0, 0, 0, 0, 26, 107, 128, 106, 0, 0, 0, 0, 69, 136, 100, 114, 0, 0, 0, 4, 68, 0, 3, 131, 0, 0, 0, 2, 124, 121, 137, 73, 0, 0, 0, 0, 14, 50, 17, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 107, 80, 24, 0, 0, 0, 0, 5, 7, 44, 116, 155, 2, 0, 0, 22, 17, 15, 111, 138, 1, 0, 0, 42, 112, 149, 168, 48, 0, 0, 0, 0, 0, 0, 58, 147, 1, 0, 0, 0, 49, 77, 121, 117, 0, 0, 0, 0, 40, 48, 43, 9, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 98, 5, 0, 0, 0, 0, 0, 17, 62, 138, 1, 0, 0, 0, 0, 5, 70, 151, 7, 0, 0, 0, 0, 4, 70, 166, 65, 0, 0, 0, 0, 0, 0, 123, 95, 0, 0, 0, 0, 0, 67, 151, 17, 0, 0, 0, 0, 0, 33, 16, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 11, 95, 126, 116, 18, 0, 0, 0, 4, 9, 120, 191, 18, 0, 0, 0, 0, 0, 139, 191, 128, 36, 0, 0, 0, 0, 0, 10, 52, 172, 21, 0, 0, 0, 0, 71, 19, 129, 59, 0, 0, 0, 0, 124, 174, 190, 13, 0, 0, 0, 0, 15, 63, 34, 0, 0 },
    { 0, 0, 0, 28, 31, 0, 0, 0, 0, 0, 16, 145, 183, 99, 0, 0, 0, 0, 0, 19, 162, 105, 0, 0, 0, 0, 1, 134, 213, 69, 0, 0, 0, 19, 0, 0, 77, 185, 0, 0, 2, 130, 83, 65, 182, 137, 0, 0, 0, 10, 77, 110, 82, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 179, 167, 149, 109, 6, 0, 0, 0, 32, 9, 126, 233, 33, 0, 0, 0, 4, 97, 198, 104, 0, 0, 0, 0, 0, 64, 206, 91, 0, 0, 14, 92, 34, 25, 158, 167, 0, 0, 1, 73, 157, 187, 145, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 91, 63, 0, 0, 0, 0, 12, 127, 31, 139, 28, 0, 0, 0, 0, 12, 55, 179, 55, 0, 0, 0, 0, 0, 47, 8, 119, 8, 0, 0, 0, 4, 0, 0, 123, 12, 0, 0, 0, 119, 99, 127, 103, 0, 0, 0, 0, 31, 63, 16, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 171, 111, 0, 0, 0, 0, 0, 33, 136, 169, 0, 0, 0, 0, 0, 49, 219, 91, 0, 0, 0, 5, 0, 22, 112, 168, 0, 0, 8, 123, 7, 11, 155, 134, 0, 0, 0, 72, 174, 174, 88, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 137, 164, 134, 15, 0, 0, 0, 37, 80, 14, 176, 76, 0, 0, 0, 0, 31, 162, 206, 25, 0, 3, 4, 0, 35, 205, 119, 0, 0, 37, 140, 30, 15, 163, 133, 0, 0, 0, 45, 140, 178, 134, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 171, 170, 84, 0, 0, 0, 0, 12, 58, 206, 101, 0, 0, 0, 0, 62, 217, 111, 5, 0, 0, 0, 0, 23, 120, 195, 110, 0, 0, 0, 60, 82, 26, 143, 222, 0, 0, 0, 21, 144, 189, 145, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 147, 103, 0, 0, 0, 0, 0, 37, 88, 160, 41, 0, 0, 0, 0, 2, 150, 170, 159, 0, 0, 0, 0, 0, 13, 0, 104, 0, 0, 0, 0, 88, 29, 72, 112, 0, 0, 0, 0, 98, 168, 131, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 150, 145, 108, 0, 0, 0, 0, 4, 12, 54, 216, 14, 0, 0, 0, 0, 27, 201, 119, 0, 0, 0, 13, 0, 19, 170, 149, 0, 0, 0, 120, 85, 23, 53, 199, 0, 0, 0, 17, 110, 168, 172, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 62, 63, 52, 9, 0, 0, 0, 6, 62, 51, 163, 108, 0, 0, 0, 0, 33, 98, 143, 24, 0, 0, 0, 23, 87, 89, 95, 148, 44, 0, 0, 0, 0, 0, 42, 160, 28, 0, 0, 13, 76, 121, 136, 36, 0, 0, 0, 25, 87, 39, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 15, 100, 140, 131, 143, 30, 0, 0, 13, 38, 2, 3, 158, 84, 0, 0, 0, 0, 31, 126, 147, 24, 0, 0, 0, 0, 90, 121, 147, 153, 9, 0, 0, 0, 83, 11, 7, 135, 81, 0, 0, 0, 87, 151, 148, 145, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 134, 138, 19, 0, 0, 0, 0, 0, 0, 14, 135, 0, 0, 0, 0, 0, 34, 126, 84, 0, 0, 0, 0, 0, 74, 125, 137, 113, 0, 0, 0, 0, 30, 53, 9, 142, 27, 0, 0, 0, 10, 77, 147, 171, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 88, 100, 56, 0, 0, 0, 24, 100, 12, 78, 144, 0, 0, 0, 5, 27, 86, 158, 40, 0, 0, 0, 0, 67, 86, 76, 143, 0, 0, 0, 0, 6, 5, 0, 127, 7, 0, 0, 0, 117, 108, 137, 103, 0, 0, 0, 0, 18, 52, 24, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 175, 159, 27, 0, 0, 0, 0, 64, 38, 172, 81, 0, 0, 0, 0, 1, 189, 193, 181, 145, 21, 0, 0, 0, 0, 0, 0, 55, 156, 0, 0, 9, 64, 8, 0, 33, 177, 0, 0, 0, 88, 138, 153, 151, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 156, 94, 0, 0, 0, 0, 0, 9, 125, 164, 0, 0, 0, 0, 0, 71, 191, 58, 0, 0, 0, 0, 0, 108, 105, 0, 0, 0, 0, 34, 91, 22, 184, 12, 0, 0, 0, 6, 105, 166, 130, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 89, 78, 0, 0, 0, 0, 16, 121, 147, 133, 0, 0, 0, 0, 0, 55, 191, 36, 0, 0, 0, 0, 5, 62, 162, 37, 0, 0, 0, 2, 48, 18, 147, 6, 0, 0, 0, 17, 167, 168, 23, 0, 0, 0, 0, 0, 33, 31, 0, 0, 0, 0 },
    { 0, 0, 0, 33, 36, 4, 0, 0, 0, 0, 24, 156, 198, 95, 0, 0, 0, 0, 0, 13, 214, 82, 0, 0, 0, 0, 0, 21, 207, 119, 0, 0, 0, 0, 0, 0, 38, 187, 4, 0, 0, 120, 109, 96, 129, 195, 2, 0, 0, 31, 82, 114, 109, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 132, 151, 0, 0, 0, 0, 0, 66, 53, 155, 0, 0, 0, 0, 0, 10, 151, 104, 0, 0, 0, 0, 25, 154, 184, 53, 0, 0, 0, 18, 78, 10, 162, 39, 0, 0, 0, 12, 149, 139, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 33, 0, 0, 0, 0, 0, 102, 180, 180, 11, 0, 0, 0, 2, 152, 49, 190, 132, 0, 0, 0, 0, 15, 160, 91, 159, 0, 0, 0, 0, 51, 112, 46, 157, 0, 0, 0, 0, 0, 35, 155, 34, 0, 0, 0, 0, 0, 47, 36, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 152, 104, 0, 0, 0, 0, 75, 145, 54, 156, 0, 0, 0, 0, 17, 85, 191, 141, 0, 0, 0, 0, 6, 60, 44, 135, 0, 0, 0, 45, 72, 0, 87, 120, 0, 0, 0, 10, 137, 131, 82, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 101, 95, 9, 0, 0, 0, 60, 183, 93, 179, 52, 0, 0, 0, 36, 121, 161, 143, 1, 0, 0, 0, 30, 91, 155, 95, 0, 7, 0, 0, 116, 5, 127, 91, 0, 0, 0, 0, 127, 162, 138, 13, 0, 0, 0, 0, 14, 60, 10, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 42, 18, 0, 0, 0, 0, 70, 174, 124, 176, 135, 0, 0, 0, 2, 9, 12, 149, 91, 0, 0, 0, 0, 0, 150, 144, 33, 0, 0, 0, 0, 0, 28, 119, 154, 0, 0, 0, 0, 0, 75, 163, 88, 0, 0, 0, 0, 0, 65, 50, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 82, 170, 17, 0, 0, 0, 0, 60, 90, 140, 45, 0, 0, 0, 0, 32, 93, 159, 0, 0, 0, 0, 0, 64, 174, 61, 0, 0, 3, 61, 0, 15, 153, 12, 0, 0, 4, 107, 130, 134, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 133, 41, 0, 0, 0, 0, 20, 134, 118, 127, 0, 0, 0, 0, 3, 49, 142, 60, 0, 0, 0, 0, 0, 35, 168, 59, 0, 0, 0, 2, 65, 3, 146, 38, 0, 0, 0, 0, 96, 121, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 60, 124, 173, 186, 19, 0, 0, 32, 129, 96, 201, 123, 0, 0, 0, 0, 13, 178, 202, 101, 6, 0, 0, 0, 0, 5, 32, 119, 130, 0, 0, 82, 173, 49, 33, 122, 110, 0, 0, 37, 144, 177, 162, 105, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 3, 74, 102, 79, 35, 1, 0, 0, 0, 0, 7, 24, 111, 108, 0, 0, 0, 0, 0, 19, 122, 33, 0, 0, 0, 0, 1, 111, 115, 99, 0, 0, 0, 0, 0, 0, 0, 108, 0, 0, 0, 0, 40, 125, 122, 70, 0, 0, 0, 0, 0, 30, 31, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 90, 146, 5, 0, 0, 0, 0, 81, 88, 156, 18, 0, 0, 0, 0, 61, 190, 132, 0, 0, 0, 33, 19, 0, 105, 100, 0, 0, 0, 127, 57, 6, 153, 39, 0, 0, 0, 3, 113, 137, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 111, 4, 0, 0, 0, 9, 127, 116, 173, 15, 0, 0, 0, 8, 118, 168, 125, 0, 0, 0, 0, 3, 55, 142, 116, 0, 0, 0, 62, 17, 0, 145, 72, 0, 0, 0, 87, 136, 136, 69, 0, 0, 0, 0, 2, 57, 39, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 94, 0, 0, 0, 0, 0, 18, 121, 152, 0, 0, 0, 0, 0, 12, 90, 120, 0, 0, 0, 0, 19, 33, 143, 17, 0, 0, 0, 0, 106, 17, 127, 9, 0, 0, 0, 0, 98, 126, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 187, 143, 32, 0, 0, 0, 0, 29, 33, 176, 123, 0, 0, 0, 0, 0, 92, 224, 63, 0, 0, 0, 0, 0, 11, 185, 106, 0, 0, 0, 0, 99, 117, 145, 160, 0, 0, 0, 0, 34, 110, 178, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 82, 163, 111, 0, 0, 0, 0, 75, 81, 24, 168, 0, 0, 0, 0, 0, 60, 157, 127, 0, 0, 0, 53, 88, 29, 100, 131, 0, 0, 0, 84, 151, 9, 12, 143, 0, 0, 0, 0, 89, 139, 148, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 162, 159, 56, 0, 0, 0, 0, 0, 55, 164, 95, 0, 0, 0, 0, 0, 69, 195, 113, 2, 0, 0, 0, 0, 2, 0, 82, 175, 22, 0, 0, 0, 117, 88, 18, 130, 78, 0, 0, 0, 42, 132, 176, 143, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 127, 36, 0, 0, 0, 0, 39, 131, 93, 152, 0, 0, 0, 0, 0, 0, 94, 127, 0, 0, 0, 0, 41, 142, 157, 12, 0, 0, 0, 34, 27, 0, 133, 15, 0, 0, 0, 17, 128, 111, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 115, 0, 0, 0, 0, 0, 37, 141, 170, 0, 0, 0, 0, 0, 40, 147, 78, 0, 0, 0, 0, 0, 57, 155, 44, 0, 0, 0, 6, 34, 30, 141, 17, 0, 0, 0, 78, 152, 109, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 100, 154, 0, 0, 0, 0, 25, 152, 99, 189, 0, 0, 0, 0, 2, 63, 139, 130, 0, 0, 0, 29, 16, 33, 155, 60, 0, 0, 0, 127, 24, 13, 155, 24, 0, 0, 0, 49, 137, 149, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 38, 37, 3, 0, 0, 0, 25, 137, 132, 153, 125, 0, 0, 0, 1, 3, 100, 177, 165, 29, 0, 0, 0, 0, 53, 41, 97, 183, 39, 0, 0, 0, 53, 133, 57, 114, 102, 0, 0, 0, 15, 86, 126, 121, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 78, 97, 14, 0, 0, 0, 0, 65, 65, 99, 118, 0, 0, 0, 0, 0, 37, 171, 70, 0, 0, 0, 0, 0, 23, 92, 83, 0, 0, 0, 0, 28, 19, 17, 99, 0, 0, 0, 0, 74, 152, 125, 35, 0, 0, 0, 0, 3, 38, 10, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 72, 101, 80, 6, 0, 0, 0, 80, 131, 127, 242, 75, 0, 0, 0, 1, 55, 218, 241, 132, 7, 0, 0, 0, 5, 26, 46, 146, 100, 0, 0, 0, 16, 2, 14, 136, 107, 0, 0, 0, 171, 205, 208, 151, 9, 0, 0, 0, 37, 63, 32, 2, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 105, 145, 19, 0, 0, 0, 0, 125, 217, 225, 38, 0, 0, 0, 0, 86, 123, 233, 46, 0, 0, 0, 0, 0, 6, 190, 175, 0, 0, 0, 0, 36, 81, 163, 234, 5, 0, 0, 0, 82, 183, 188, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 132, 158, 77, 0, 0, 0, 0, 0, 13, 7, 162, 7, 0, 0, 0, 0, 64, 172, 187, 46, 0, 0, 0, 0, 4, 12, 34, 180, 0, 0, 0, 0, 39, 36, 30, 168, 0, 0, 0, 0, 107, 144, 136, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 37, 94, 69, 4, 0, 0, 1, 135, 210, 169, 247, 81, 0, 0, 0, 25, 23, 102, 205, 31, 0, 0, 0, 0, 70, 237, 225, 113, 0, 0, 0, 0, 27, 134, 99, 218, 25, 0, 0, 0, 11, 146, 232, 199, 13, 0, 0, 0, 0, 8, 44, 16, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79, 179, 127, 8, 0, 0, 0, 0, 27, 139, 195, 16, 0, 0, 0, 0, 103, 247, 211, 79, 0, 0, 0, 0, 12, 0, 39, 183, 55, 0, 0, 0, 143, 59, 12, 123, 95, 0, 0, 0, 71, 155, 191, 151, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 122, 119, 63, 0, 0, 0, 0, 84, 22, 45, 161, 0, 0, 0, 0, 0, 17, 153, 62, 0, 0, 0, 0, 0, 88, 151, 65, 0, 0, 0, 1, 74, 0, 47, 178, 1, 0, 0, 0, 132, 134, 161, 109, 0, 0, 0, 0, 11, 40, 28, 1, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 105, 123, 113, 18, 0, 0, 0, 7, 74, 77, 192, 25, 0, 0, 0, 0, 19, 163, 160, 23, 0, 0, 0, 0, 21, 89, 121, 185, 12, 0, 0, 30, 44, 0, 0, 138, 30, 0, 0, 14, 154, 170, 178, 133, 0, 0, 0, 0, 12, 47, 42, 4, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 74, 50, 0, 0, 0, 0, 0, 8, 0, 93, 46, 0, 0, 0, 0, 0, 20, 134, 32, 0, 0, 0, 0, 0, 0, 6, 84, 0, 0, 0, 0, 5, 5, 4, 78, 0, 0, 0, 0, 69, 95, 100, 32, 0, 0, 0, 0, 11, 51, 7, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155, 153, 93, 7, 0, 0, 0, 0, 58, 75, 172, 30, 0, 0, 0, 0, 56, 194, 182, 34, 0, 0, 0, 0, 0, 0, 33, 134, 25, 0, 0, 0, 108, 27, 1, 71, 73, 0, 0, 0, 65, 142, 172, 142, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 77, 126, 138, 19, 0, 0, 0, 0, 11, 60, 199, 33, 0, 0, 0, 0, 75, 223, 215, 70, 0, 0, 0, 0, 0, 0, 33, 186, 12, 0, 0, 0, 64, 11, 50, 188, 11, 0, 0, 0, 92, 170, 142, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 163, 191, 103, 4, 0, 0, 0, 27, 0, 27, 211, 28, 0, 0, 0, 0, 91, 195, 183, 19, 0, 0, 0, 0, 79, 107, 151, 207, 39, 0, 0, 0, 107, 47, 8, 119, 123, 0, 0, 0, 79, 155, 183, 179, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 135, 179, 180, 96, 0, 0, 0, 0, 13, 15, 147, 160, 0, 0, 0, 0, 39, 192, 252, 128, 0, 0, 0, 0, 3, 14, 46, 195, 21, 0, 0, 28, 40, 4, 58, 196, 22, 0, 0, 28, 181, 175, 145, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 134, 128, 18, 0, 0, 0, 0, 28, 44, 150, 27, 0, 0, 0, 0, 13, 160, 167, 131, 0, 0, 0, 0, 0, 0, 0, 79, 26, 0, 0, 30, 65, 0, 9, 100, 6, 0, 0, 1, 123, 158, 138, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 155, 107, 5, 0, 0, 0, 0, 52, 162, 144, 7, 0, 0, 0, 0, 92, 217, 187, 76, 0, 0, 0, 0, 0, 0, 41, 185, 20, 0, 0, 0, 3, 10, 86, 191, 11, 0, 0, 0, 121, 183, 117, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 95, 173, 117, 0, 0, 0, 0, 33, 45, 149, 170, 0, 0, 0, 0, 61, 161, 248, 171, 0, 0, 0, 0, 62, 80, 43, 200, 53, 0, 0, 101, 42, 43, 116, 221, 28, 0, 0, 56, 159, 167, 110, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 83, 126, 110, 1, 0, 0, 0, 61, 87, 111, 212, 32, 0, 0, 0, 0, 52, 232, 153, 0, 0, 0, 0, 0, 0, 38, 199, 0, 0, 1, 20, 0, 12, 147, 145, 0, 0, 19, 158, 171, 162, 50, 2, 0, 0, 0, 30, 53, 10, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 66, 89, 86, 3, 0, 0, 0, 30, 41, 50, 108, 16, 0, 0, 0, 0, 78, 81, 34, 0, 0, 0, 0, 0, 63, 52, 0, 0, 0, 0, 7, 6, 0, 105, 0, 0, 0, 0, 36, 86, 95, 46, 0, 0, 0, 0, 2, 56, 35, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 61, 4, 0, 0, 0, 0, 0, 17, 156, 84, 0, 0, 0, 0, 0, 3, 136, 20, 0, 0, 0, 0, 0, 119, 47, 0, 0, 0, 0, 0, 0, 148, 65, 0, 0, 0, 0, 0, 0, 57, 102, 0, 0, 0, 0, 0, 0, 21, 12, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 146, 114, 8, 0, 0, 0, 0, 60, 83, 153, 6, 0, 0, 0, 0, 9, 178, 109, 0, 0, 0, 0, 0, 1, 16, 158, 84, 0, 0, 0, 0, 55, 52, 84, 137, 0, 0, 0, 0, 86, 148, 154, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 110, 110, 61, 1, 0, 0, 0, 38, 92, 199, 203, 4, 0, 0, 0, 0, 106, 214, 57, 0, 0, 0, 0, 0, 44, 214, 136, 0, 0, 0, 0, 0, 3, 151, 190, 0, 0, 0, 19, 194, 186, 145, 42, 0, 0, 0, 1, 32, 16, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 171, 175, 134, 41, 0, 0, 0, 15, 7, 69, 219, 126, 0, 0, 0, 0, 99, 222, 253, 169, 11, 0, 0, 0, 18, 21, 27, 148, 104, 0, 0, 14, 100, 51, 38, 118, 137, 0, 0, 6, 122, 180, 180, 143, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 38, 107, 26, 0, 0, 0, 0, 94, 243, 252, 158, 11, 0, 0, 0, 53, 196, 249, 238, 178, 16, 0, 0, 0, 95, 98, 42, 167, 126, 0, 0, 0, 0, 136, 179, 198, 100, 0, 0, 0, 1, 132, 238, 172, 8, 0, 0, 0, 0, 8, 49, 5, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 13, 100, 153, 151, 98, 22, 0, 0, 35, 113, 60, 62, 150, 208, 8, 0, 0, 0, 0, 22, 112, 233, 15, 0, 0, 0, 8, 138, 182, 219, 46, 0, 5, 15, 0, 0, 1, 125, 119, 0, 39, 156, 129, 116, 98, 139, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136, 173, 155, 79, 0, 0, 0, 51, 57, 0, 33, 202, 7, 0, 0, 0, 81, 95, 184, 159, 0, 0, 0, 0, 70, 90, 121, 177, 3, 0, 0, 0, 0, 0, 7, 183, 38, 0, 3, 111, 111, 113, 157, 148, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 41, 73, 68, 6, 0, 0, 0, 55, 20, 5, 85, 27, 0, 0, 0, 2, 26, 97, 81, 0, 0, 0, 0, 73, 83, 35, 61, 0, 0, 0, 0, 0, 0, 4, 96, 0, 0, 0, 9, 92, 87, 95, 38, 0, 0, 0, 0, 24, 54, 8, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 129, 111, 0, 0, 0, 0, 0, 25, 38, 150, 0, 0, 0, 0, 24, 103, 178, 72, 0, 0, 0, 3, 29, 30, 112, 90, 0, 0, 0, 69, 45, 0, 134, 88, 0, 0, 0, 18, 123, 135, 78, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 90, 104, 2, 0, 0, 0, 0, 0, 0, 133, 7, 0, 0, 0, 0, 0, 12, 146, 0, 0, 0, 0, 0, 0, 0, 140, 26, 0, 0, 0, 0, 37, 59, 152, 71, 0, 0, 0, 0, 9, 124, 125, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 29, 17, 0, 0, 0, 0, 29, 143, 131, 148, 147, 0, 0, 0, 4, 6, 49, 105, 203, 3, 0, 0, 0, 13, 87, 62, 83, 133, 0, 0, 104, 122, 94, 78, 127, 125, 0, 0, 17, 34, 34, 32, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 198, 190, 189, 183, 36, 0, 0, 13, 18, 11, 91, 209, 59, 0, 0, 0, 60, 163, 129, 55, 0, 0, 0, 0, 100, 206, 76, 0, 0, 0, 0, 0, 0, 31, 199, 16, 0, 0, 0, 0, 7, 99, 116, 2, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 84, 87, 36, 0, 0, 0, 0, 61, 104, 80, 147, 163, 0, 0, 0, 0, 9, 67, 131, 196, 0, 0, 3, 20, 20, 95, 82, 174, 29, 0, 34, 166, 141, 92, 52, 141, 101, 0, 0, 0, 27, 68, 72, 71, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 167, 64, 0, 0, 0, 0, 0, 0, 57, 205, 42, 0, 0, 0, 22, 91, 90, 182, 85, 0, 0, 0, 69, 215, 158, 65, 1, 0, 15, 35, 0, 47, 213, 63, 0, 0, 6, 75, 141, 139, 108, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 50, 57, 42, 9, 0, 0, 0, 95, 98, 91, 105, 181, 20, 0, 0, 6, 4, 32, 46, 174, 41, 0, 0, 0, 32, 127, 179, 176, 0, 0, 0, 0, 0, 0, 12, 166, 25, 0, 34, 70, 80, 56, 75, 131, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 108, 137, 24, 0, 0, 0, 0, 0, 10, 159, 86, 0, 0, 0, 0, 11, 153, 232, 75, 0, 0, 0, 0, 0, 0, 48, 165, 0, 0, 0, 0, 24, 9, 115, 139, 0, 0, 0, 0, 161, 175, 92, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 87, 115, 66, 2, 0, 0, 0, 67, 59, 12, 113, 106, 0, 0, 0, 0, 4, 6, 90, 157, 0, 0, 0, 0, 81, 146, 168, 125, 0, 0, 0, 0, 0, 0, 13, 148, 0, 0, 0, 8, 121, 118, 126, 122, 0, 0, 0, 4, 63, 62, 25, 2, 0, 0 },
    { 0, 0, 13, 31, 0, 0, 0, 0, 0, 0, 116, 112, 8, 0, 0, 0, 0, 0, 1, 110, 17, 0, 0, 0, 0, 0, 4, 87, 86, 23, 0, 0, 0, 0, 0, 0, 5, 67, 0, 0, 0, 0, 56, 30, 3, 85, 0, 0, 0, 0, 21, 80, 117, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 77, 97, 94, 3, 0, 0, 0, 54, 71, 0, 103, 49, 0, 0, 0, 90, 26, 12, 182, 128, 26, 0, 0, 1, 0, 47, 85, 9, 99, 0, 0, 16, 75, 4, 0, 34, 66, 0, 0, 0, 45, 100, 114, 105, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 2, 27, 63, 63, 30, 1, 0, 0, 5, 77, 99, 119, 200, 130, 0, 0, 0, 0, 0, 8, 177, 121, 0, 0, 0, 0, 43, 178, 230, 118, 0, 0, 0, 0, 6, 6, 73, 217, 24, 0, 0, 0, 0, 95, 145, 188, 6, 0, 0, 0, 0, 42, 111, 39, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 169, 144, 173, 92, 0, 0, 0, 20, 31, 6, 154, 115, 0, 0, 0, 0, 0, 1, 147, 118, 0, 0, 0, 0, 0, 0, 15, 180, 0, 0, 0, 0, 0, 5, 123, 142, 0, 0, 0, 0, 0, 54, 125, 28, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 106, 120, 93, 58, 0, 0, 0, 25, 52, 64, 219, 159, 0, 0, 0, 0, 3, 156, 138, 28, 0, 0, 0, 0, 4, 100, 171, 163, 7, 0, 0, 0, 31, 12, 18, 149, 27, 0, 0, 0, 95, 196, 244, 183, 10, 0, 0, 0, 0, 15, 55, 22, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 163, 175, 83, 0, 0, 0, 0, 20, 0, 95, 135, 0, 0, 0, 0, 15, 99, 175, 43, 0, 0, 0, 0, 207, 195, 99, 51, 0, 0, 0, 0, 63, 103, 87, 183, 0, 0, 0, 0, 103, 155, 155, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 77, 113, 105, 25, 0, 0, 0, 71, 111, 51, 73, 176, 4, 0, 0, 1, 5, 30, 86, 194, 8, 0, 0, 0, 3, 95, 124, 179, 27, 0, 10, 10, 1, 0, 11, 150, 46, 0, 59, 126, 116, 108, 123, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 93, 111, 49, 0, 0, 0, 23, 102, 73, 34, 143, 115, 0, 0, 0, 0, 24, 62, 124, 150, 0, 0, 0, 0, 48, 135, 136, 178, 18, 0, 0, 0, 0, 0, 0, 96, 98, 0, 25, 120, 87, 63, 74, 149, 56, 0, 8, 39, 41, 41, 41, 39, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 153, 164, 102, 18, 0, 0, 4, 80, 18, 1, 101, 176, 0, 0, 0, 0, 36, 69, 128, 197, 0, 0, 0, 0, 79, 115, 78, 177, 42, 0, 0, 18, 1, 0, 0, 113, 77, 0, 6, 124, 158, 117, 102, 147, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 102, 94, 26, 0, 0, 0, 0, 5, 0, 0, 119, 15, 0, 0, 0, 0, 21, 43, 116, 10, 0, 0, 0, 0, 90, 90, 112, 73, 0, 0, 0, 0, 27, 0, 18, 126, 15, 0, 0, 0, 72, 74, 89, 106, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 131, 151, 111, 0, 0, 0, 0, 0, 0, 0, 147, 0, 0, 0, 0, 12, 75, 135, 139, 0, 0, 0, 0, 8, 59, 131, 139, 0, 0, 0, 51, 27, 0, 39, 171, 0, 0, 0, 31, 151, 163, 127, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 141, 131, 151, 26, 0, 0, 0, 48, 31, 0, 104, 70, 0, 0, 0, 27, 77, 131, 149, 9, 0, 0, 0, 60, 133, 161, 110, 0, 0, 0, 37, 16, 0, 43, 178, 0, 0, 0, 46, 159, 137, 145, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 93, 105, 25, 0, 0, 0, 80, 110, 55, 112, 164, 0, 0, 0, 44, 0, 33, 180, 128, 0, 0, 0, 0, 0, 84, 80, 167, 38, 0, 0, 0, 57, 14, 6, 128, 71, 0, 0, 0, 109, 157, 170, 103, 0, 0, 0, 0, 3, 49, 27, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 140, 176, 104, 0, 0, 0, 0, 88, 68, 19, 156, 1, 0, 0, 0, 36, 109, 168, 140, 0, 0, 0, 0, 29, 106, 157, 61, 0, 0, 0, 19, 45, 0, 59, 154, 0, 0, 0, 13, 152, 152, 164, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 119, 115, 28, 0, 0, 0, 0, 78, 81, 136, 142, 0, 0, 0, 0, 0, 90, 218, 96, 0, 0, 0, 0, 0, 38, 129, 136, 0, 0, 0, 0, 75, 9, 112, 125, 0, 0, 0, 0, 125, 213, 166, 27, 0, 0, 0, 0, 4, 43, 14, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 154, 79, 6, 0, 0, 0, 0, 0, 28, 156, 190, 2, 0, 0, 0, 43, 161, 191, 173, 2, 0, 0, 0, 65, 197, 129, 23, 0, 0, 0, 6, 34, 36, 204, 98, 0, 0, 0, 5, 125, 171, 92, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 179, 157, 98, 0, 0, 0, 0, 15, 25, 29, 136, 132, 0, 0, 0, 0, 79, 186, 211, 92, 0, 0, 0, 0, 74, 186, 30, 0, 0, 0, 53, 72, 42, 179, 103, 0, 0, 0, 16, 145, 183, 157, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 118, 81, 0, 0, 0, 0, 40, 172, 108, 159, 7, 0, 0, 0, 2, 60, 164, 176, 1, 0, 0, 1, 0, 69, 179, 55, 0, 0, 0, 76, 10, 0, 124, 96, 0, 0, 0, 73, 174, 172, 115, 10, 0, 0, 0, 1, 45, 32, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 147, 158, 56, 0, 0, 0, 0, 18, 32, 40, 144, 0, 0, 0, 0, 30, 79, 164, 104, 0, 0, 0, 0, 56, 94, 141, 82, 0, 0, 0, 34, 35, 13, 94, 149, 0, 0, 0, 18, 150, 165, 108, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87, 171, 159, 19, 0, 0, 0, 0, 16, 29, 158, 39, 0, 0, 0, 37, 131, 199, 150, 3, 0, 0, 3, 46, 78, 100, 54, 0, 0, 18, 99, 6, 14, 119, 86, 0, 0, 0, 84, 171, 163, 93, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 99, 122, 48, 0, 0, 0, 0, 22, 50, 143, 126, 0, 0, 0, 0, 0, 29, 206, 40, 0, 0, 0, 0, 0, 0, 119, 102, 0, 0, 0, 0, 0, 19, 180, 104, 0, 0, 0, 10, 188, 164, 53, 0, 0, 0, 0, 1, 39, 6, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 86, 121, 67, 0, 0, 0, 0, 93, 170, 24, 162, 3, 0, 0, 0, 0, 3, 49, 176, 2, 0, 0, 0, 9, 134, 184, 137, 0, 0, 0, 76, 18, 0, 66, 163, 0, 0, 0, 53, 166, 171, 126, 32, 0, 0, 0, 0, 43, 51, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 20, 63, 90, 11, 0, 0, 0, 89, 178, 119, 137, 119, 0, 0, 0, 0, 47, 71, 175, 69, 0, 0, 1, 4, 96, 205, 111, 0, 0, 27, 121, 3, 7, 176, 66, 0, 0, 3, 91, 193, 184, 62, 0, 0, 0, 0, 0, 30, 19, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 111, 126, 43, 0, 0, 0, 0, 47, 133, 222, 55, 0, 0, 0, 0, 101, 217, 200, 25, 0, 0, 0, 0, 10, 4, 118, 141, 0, 0, 0, 21, 103, 29, 79, 181, 0, 0, 0, 0, 121, 200, 184, 68, 0, 0, 0, 0, 0, 21, 14, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 11, 30, 0, 2, 94, 0, 0, 0, 82, 37, 0, 30, 125, 0, 0, 17, 147, 6, 0, 19, 113, 102, 97, 89, 146, 0, 0, 0, 0, 0, 0, 42, 127, 0, 0, 0, 0, 0, 0, 37, 135, 0, 0, 0, 0, 0, 0, 6, 31, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 93, 0, 0, 0, 0, 73, 9, 95, 54, 0, 0, 0, 18, 139, 38, 150, 5, 0, 0, 17, 160, 162, 213, 97, 0, 0, 0, 18, 21, 97, 104, 29, 0, 0, 0, 0, 23, 107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 9, 34, 0, 0, 13, 84, 0, 0, 22, 191, 37, 0, 52, 192, 0, 0, 0, 117, 124, 19, 138, 192, 0, 0, 0, 19, 251, 220, 191, 224, 0, 0, 0, 3, 96, 35, 72, 242, 12, 0, 0, 0, 0, 0, 3, 101, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 18, 0, 0, 0, 0, 66, 45, 80, 88, 0, 0, 0, 0, 95, 55, 116, 81, 0, 0, 0, 0, 12, 82, 149, 30, 0, 0, 0, 0, 0, 0, 103, 2, 0, 0, 0, 0, 0, 15, 93, 0, 0, 0, 0, 0, 0, 17, 27, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 123, 68, 17, 0, 0, 0, 32, 154, 129, 9, 17, 0, 0, 0, 10, 105, 153, 101, 38, 0, 0, 0, 0, 94, 21, 0, 2, 0, 0, 0, 47, 89, 0, 0, 0, 0, 0, 0, 56, 16, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 55, 78, 0, 0, 0, 11, 179, 1, 128, 174, 0, 0, 0, 26, 222, 82, 177, 166, 0, 0, 0, 32, 175, 176, 220, 154, 0, 0, 0, 0, 0, 0, 157, 174, 0, 0, 0, 0, 0, 0, 181, 141, 0, 0, 0, 0, 0, 0, 36, 21, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 13, 0, 38, 0, 0, 0, 28, 179, 25, 0, 124, 68, 0, 0, 135, 72, 0, 0, 81, 114, 0, 0, 157, 140, 145, 168, 186, 151, 0, 0, 27, 98, 89, 62, 84, 91, 0, 0, 0, 0, 0, 0, 12, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 10, 0, 0, 0, 0, 49, 47, 148, 2, 0, 0, 0, 32, 152, 130, 50, 0, 0, 0, 0, 91, 183, 145, 66, 0, 0, 0, 0, 16, 126, 2, 0, 0, 0, 0, 0, 100, 62, 0, 0, 0, 0, 0, 0, 49, 19, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 20, 0, 37, 0, 0, 0, 18, 152, 3, 23, 119, 0, 0, 0, 120, 106, 0, 103, 56, 0, 0, 32, 138, 43, 117, 171, 0, 0, 0, 33, 170, 150, 181, 108, 0, 0, 0, 0, 0, 0, 139, 40, 0, 0, 0, 0, 0, 0, 28, 7, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 5, 0, 6, 12, 134, 2, 68, 133, 3, 0, 6, 130, 119, 16, 166, 29, 0, 0, 67, 176, 128, 182, 111, 0, 0, 0, 7, 19, 66, 103, 2, 0, 0, 0, 0, 58, 131, 0, 0, 0, 0, 0, 0, 47, 34, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 2, 41, 0, 0, 0, 0, 88, 40, 14, 102, 0, 0, 0, 0, 98, 33, 29, 110, 0, 0, 0, 0, 124, 124, 132, 104, 0, 0, 0, 0, 14, 7, 68, 99, 0, 0, 0, 0, 0, 0, 60, 95, 0, 0, 0, 0, 0, 0, 12, 21, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 56, 0, 0, 0, 7, 93, 3, 126, 25, 0, 0, 0, 126, 123, 23, 151, 0, 0, 0, 9, 135, 147, 198, 106, 0, 0, 0, 0, 0, 19, 130, 9, 0, 0, 0, 0, 7, 111, 7, 0, 0, 0, 0, 0, 6, 25, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 45, 0, 0, 0, 22, 38, 59, 110, 5, 0, 0, 24, 142, 80, 145, 9, 0, 0, 26, 212, 115, 188, 87, 0, 0, 0, 15, 95, 189, 126, 50, 0, 0, 0, 0, 68, 95, 0, 0, 0, 0, 0, 0, 12, 9, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 31, 0, 0, 0, 5, 118, 65, 133, 54, 0, 0, 3, 119, 164, 87, 139, 0, 0, 0, 10, 160, 175, 218, 157, 39, 0, 0, 0, 3, 114, 86, 27, 1, 0, 0, 0, 96, 119, 0, 0, 0, 0, 0, 0, 62, 17, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 34, 0, 0, 0, 0, 64, 25, 157, 1, 0, 0, 0, 69, 180, 98, 116, 0, 0, 0, 0, 166, 164, 211, 196, 7, 0, 0, 0, 46, 148, 157, 55, 0, 0, 0, 0, 2, 119, 4, 0, 0, 0, 0, 0, 1, 25, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 44, 0, 0, 0, 0, 0, 0, 96, 95, 1, 89, 0, 0, 0, 0, 143, 67, 55, 102, 0, 0, 0, 0, 35, 139, 191, 118, 53, 0, 0, 0, 0, 21, 154, 80, 16, 0, 0, 0, 0, 71, 34, 0, 0, 0, 0, 0, 0, 23, 2, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 31, 0, 0, 0, 0, 1, 76, 192, 11, 0, 0, 0, 1, 104, 148, 165, 1, 0, 0, 0, 61, 188, 148, 197, 130, 99, 5, 0, 0, 45, 121, 148, 51, 4, 0, 0, 0, 0, 61, 63, 0, 0, 0, 0, 0, 0, 9, 12, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 58, 0, 0, 0, 2, 71, 75, 151, 8, 0, 0, 0, 101, 152, 174, 76, 1, 0, 0, 0, 143, 200, 202, 135, 20, 0, 0, 0, 23, 162, 28, 0, 0, 0, 0, 0, 65, 59, 0, 0, 0, 0, 0, 0, 21, 3, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 1, 12, 37, 0, 0, 0, 22, 179, 5, 52, 227, 0, 0, 0, 52, 142, 27, 109, 247, 8, 0, 0, 75, 254, 243, 202, 240, 28, 0, 0, 27, 101, 58, 63, 220, 0, 0, 0, 0, 0, 0, 37, 176, 0, 0, 0, 0, 0, 0, 6, 34, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 9, 0, 0, 0, 21, 128, 20, 157, 1, 0, 0, 0, 76, 143, 93, 125, 0, 0, 0, 0, 166, 168, 191, 24, 0, 0, 0, 0, 65, 88, 117, 0, 0, 0, 0, 0, 0, 71, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 51, 0, 63, 0, 0, 0, 0, 155, 95, 20, 167, 0, 0, 0, 0, 199, 35, 59, 215, 0, 0, 0, 0, 171, 215, 223, 167, 0, 0, 0, 0, 31, 71, 131, 135, 0, 0, 0, 0, 0, 0, 139, 91, 0, 0, 0, 0, 0, 0, 27, 15, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 81, 0, 0, 0, 0, 30, 35, 24, 159, 0, 0, 0, 0, 79, 111, 34, 149, 0, 0, 0, 0, 182, 162, 169, 118, 0, 0, 0, 0, 66, 24, 173, 53, 0, 0, 0, 0, 0, 7, 120, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 13, 0, 0, 0, 0, 0, 39, 196, 18, 2, 134, 47, 0, 0, 94, 140, 12, 160, 238, 96, 0, 0, 92, 236, 211, 105, 196, 74, 0, 0, 24, 118, 50, 0, 186, 49, 0, 0, 0, 0, 0, 0, 186, 31, 0, 0, 0, 0, 0, 0, 46, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 90, 0, 0, 0, 0, 59, 0, 3, 154, 0, 0, 0, 1, 159, 1, 42, 154, 0, 0, 0, 7, 169, 147, 176, 109, 0, 0, 0, 0, 1, 35, 208, 39, 0, 0, 0, 0, 0, 18, 107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 59, 0, 0, 0, 3, 25, 0, 118, 38, 0, 0, 0, 68, 113, 37, 162, 2, 0, 0, 2, 208, 193, 198, 114, 2, 0, 0, 1, 75, 69, 180, 24, 2, 0, 0, 0, 0, 67, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 0, 0, 0, 0, 12, 18, 26, 143, 0, 0, 0, 0, 58, 124, 81, 119, 0, 0, 0, 0, 157, 194, 208, 78, 0, 0, 0, 0, 56, 58, 169, 29, 0, 0, 0, 0, 0, 50, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 8, 28, 0, 0, 3, 153, 75, 0, 124, 86, 0, 0, 83, 143, 80, 112, 199, 21, 0, 0, 69, 103, 54, 130, 128, 0, 0, 0, 0, 0, 11, 178, 40, 0, 0, 0, 0, 0, 67, 129, 0, 0, 0, 0, 0, 0, 31, 33, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 11, 0, 0, 0, 19, 14, 0, 149, 15, 0, 0, 0, 106, 68, 13, 156, 2, 0, 0, 7, 182, 160, 182, 159, 0, 0, 0, 15, 94, 3, 188, 60, 0, 0, 0, 0, 0, 25, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 4, 8, 5, 137, 0, 0, 0, 0, 56, 105, 61, 139, 0, 0, 0, 1, 180, 147, 182, 81, 0, 0, 0, 1, 45, 26, 166, 13, 0, 0, 0, 0, 0, 27, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 66, 0, 0, 0, 0, 0, 0, 95, 126, 52, 0, 0, 0, 0, 5, 144, 140, 80, 0, 0, 0, 0, 116, 192, 190, 129, 41, 0, 0, 0, 42, 68, 157, 22, 0, 0, 0, 0, 0, 0, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 150, 85, 0, 0, 149, 55, 0, 0, 173, 96, 0, 44, 186, 87, 0, 0, 144, 234, 228, 199, 199, 87, 0, 0, 29, 109, 88, 22, 118, 87, 0, 0, 0, 0, 0, 0, 44, 115, 0, 0, 0, 0, 0, 0, 1, 31, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 77, 0, 0, 0, 7, 34, 0, 103, 38, 0, 0, 0, 77, 116, 15, 152, 0, 0, 0, 43, 188, 142, 167, 120, 0, 0, 0, 18, 18, 37, 162, 27, 0, 0, 0, 0, 0, 77, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 35, 0, 0, 0, 0, 0, 0, 95, 71, 0, 65, 42, 0, 0, 0, 107, 34, 0, 103, 5, 0, 0, 0, 170, 136, 124, 154, 0, 0, 0, 0, 20, 0, 84, 159, 0, 0, 0, 0, 0, 0, 105, 20, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 5, 31, 0, 0, 0, 0, 0, 0, 44, 89, 0, 0, 0, 9, 58, 0, 143, 27, 0, 0, 1, 126, 95, 51, 165, 0, 0, 0, 65, 206, 156, 205, 102, 0, 0, 0, 14, 28, 63, 187, 17, 0, 0, 0, 0, 0, 40, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 45, 3, 51, 0, 0, 0, 0, 55, 110, 57, 119, 0, 0, 0, 0, 104, 96, 109, 87, 0, 0, 0, 0, 113, 149, 184, 25, 0, 0, 0, 0, 0, 0, 137, 5, 0, 0, 0, 0, 0, 39, 97, 0, 0, 0, 0, 0, 0, 15, 16, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 7, 9, 0, 0, 0, 50, 98, 0, 117, 11, 0, 0, 0, 117, 40, 31, 122, 2, 0, 0, 0, 119, 95, 146, 118, 31, 1, 0, 0, 5, 29, 149, 9, 0, 0, 0, 0, 0, 0, 94, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 31, 0, 0, 0, 0, 2, 23, 89, 59, 0, 0, 0, 0, 26, 148, 160, 75, 8, 0, 0, 0, 126, 68, 148, 62, 0, 0, 0, 0, 53, 5, 128, 0, 0, 0, 0, 0, 0, 9, 96, 0, 0, 0, 0, 0, 0, 2, 15, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 70, 5, 0, 0, 0, 0, 0, 99, 131, 10, 16, 0, 0, 0, 0, 121, 112, 124, 94, 0, 0, 0, 0, 8, 75, 203, 32, 0, 0, 0, 0, 0, 0, 151, 5, 0, 0, 0, 0, 0, 0, 99, 22, 0, 0, 0, 0, 0, 0, 16, 13, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 0, 0, 0, 0, 0, 0, 41, 155, 0, 0, 0, 0, 74, 43, 125, 101, 0, 0, 0, 0, 167, 169, 204, 30, 0, 0, 0, 0, 11, 125, 95, 3, 0, 0, 0, 0, 0, 103, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 47, 0, 0, 0, 30, 107, 12, 151, 10, 0, 0, 0, 130, 115, 63, 134, 0, 0, 0, 1, 145, 148, 201, 88, 0, 0, 0, 0, 0, 1, 149, 14, 0, 0, 0, 0, 0, 19, 103, 0, 0, 0, 0, 0, 0, 4, 16, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 34, 0, 6, 0, 0, 0, 0, 111, 10, 71, 90, 0, 0, 0, 0, 104, 0, 123, 77, 8, 0, 0, 0, 83, 124, 192, 103, 17, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 0, 0, 6, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 32, 0, 0, 0, 4, 8, 13, 144, 6, 0, 0, 0, 114, 55, 73, 129, 0, 0, 0, 33, 180, 125, 194, 51, 0, 0, 0, 2, 13, 66, 112, 1, 0, 0, 0, 0, 0, 71, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 20, 0, 0, 0, 0, 3, 10, 127, 0, 0, 0, 0, 46, 95, 98, 112, 0, 0, 0, 0, 136, 151, 192, 50, 0, 0, 0, 0, 12, 80, 102, 23, 0, 0, 0, 0, 0, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 41, 0, 0, 0, 0, 0, 19, 156, 2, 0, 117, 28, 0, 0, 68, 110, 0, 13, 160, 3, 0, 0, 51, 164, 80, 141, 223, 92, 0, 0, 2, 107, 163, 182, 177, 13, 0, 0, 0, 0, 0, 53, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 15, 0, 0, 0, 6, 70, 0, 105, 11, 0, 0, 0, 101, 104, 7, 139, 2, 0, 0, 25, 176, 123, 171, 117, 0, 0, 0, 4, 8, 0, 144, 40, 0, 0, 0, 0, 0, 8, 119, 0, 0, 0, 0, 0, 0, 5, 22, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 88, 43, 32, 0, 0, 0, 0, 73, 98, 123, 69, 11, 0, 0, 0, 2, 40, 136, 31, 0, 0, 0, 0, 0, 15, 84, 0, 0, 0, 0, 0, 0, 47, 29, 0, 0, 0, 0, 0, 0, 27, 1, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 53, 0, 0, 0, 0, 81, 0, 108, 7, 0, 0, 0, 46, 139, 23, 127, 0, 0, 0, 0, 131, 127, 171, 70, 0, 0, 0, 0, 0, 8, 150, 7, 0, 0, 0, 0, 0, 67, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 123, 59, 0, 0, 0, 0, 0, 74, 231, 80, 0, 0, 0, 0, 30, 163, 165, 68, 0, 0, 0, 4, 197, 120, 169, 78, 0, 0, 0, 10, 159, 173, 210, 104, 0, 0, 0, 0, 0, 0, 73, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 50, 10, 60, 0, 0, 0, 0, 104, 137, 98, 163, 0, 0, 0, 0, 154, 119, 121, 183, 0, 0, 0, 0, 173, 189, 219, 154, 0, 0, 0, 0, 24, 17, 152, 126, 0, 0, 0, 0, 0, 0, 142, 88, 0, 0, 0, 0, 0, 0, 23, 6, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 65, 0, 0, 0, 0, 0, 0, 79, 106, 21, 90, 0, 0, 0, 0, 121, 49, 88, 84, 0, 0, 0, 0, 110, 124, 176, 115, 0, 0, 0, 0, 18, 92, 167, 15, 0, 0, 0, 0, 0, 1, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 10, 0, 10, 107, 0, 0, 0, 124, 77, 0, 95, 73, 0, 0, 2, 159, 15, 8, 157, 15, 0, 0, 30, 187, 145, 191, 129, 0, 0, 0, 0, 51, 74, 155, 11, 0, 0, 0, 0, 0, 99, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 21, 0, 0, 6, 67, 0, 23, 138, 16, 0, 0, 117, 136, 5, 130, 34, 0, 0, 41, 181, 78, 157, 121, 0, 2, 0, 7, 97, 169, 127, 19, 0, 2, 0, 0, 34, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 11, 0, 0, 0, 61, 3, 35, 126, 48, 0, 0, 96, 121, 38, 146, 46, 6, 0, 38, 174, 110, 167, 81, 20, 0, 0, 5, 75, 178, 34, 1, 0, 0, 0, 0, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 72, 17, 0, 0, 21, 113, 28, 117, 41, 0, 0, 2, 136, 72, 57, 147, 0, 0, 0, 10, 152, 137, 219, 122, 3, 0, 0, 0, 8, 87, 102, 7, 0, 0, 0, 0, 9, 133, 0, 0, 0, 0, 0, 0, 3, 22, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 42, 0, 0, 0, 0, 115, 129, 12, 152, 0, 0, 0, 0, 175, 16, 46, 165, 0, 0, 0, 0, 149, 159, 188, 126, 0, 0, 0, 0, 6, 37, 197, 58, 0, 0, 0, 0, 0, 24, 132, 0, 0, 0, 0, 0, 0, 4, 21, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 85, 26, 0, 0, 7, 78, 3, 122, 68, 0, 0, 0, 96, 129, 86, 149, 1, 0, 0, 4, 191, 93, 207, 108, 3, 0, 0, 4, 156, 221, 77, 10, 0, 0, 0, 0, 70, 137, 0, 0, 0, 0, 0, 0, 21, 26, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 26, 0, 0, 0, 0, 0, 0, 136, 15, 97, 45, 0, 0, 0, 0, 152, 126, 182, 71, 0, 0, 0, 0, 0, 0, 111, 43, 0, 0, 0, 0, 0, 0, 137, 31, 0, 0, 0, 0, 0, 0, 135, 89, 0, 0, 0, 0, 0, 0, 34, 41, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 105, 12, 36, 92, 8, 0, 5, 124, 96, 21, 141, 26, 0, 0, 55, 128, 109, 201, 90, 0, 0, 0, 0, 0, 70, 77, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 17, 0, 0, 0, 0, 0, 65, 130, 55, 0, 0, 0, 0, 71, 107, 109, 31, 27, 0, 0, 11, 144, 114, 159, 71, 12, 0, 0, 0, 0, 0, 97, 0, 0, 0, 0, 0, 0, 16, 73, 0, 0, 0, 0, 0, 0, 8, 21, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 11, 0, 0, 0, 23, 0, 63, 124, 55, 0, 0, 37, 141, 74, 130, 24, 4, 0, 2, 157, 100, 155, 53, 0, 0, 0, 1, 156, 154, 71, 9, 0, 0, 0, 16, 86, 4, 0, 0, 0, 0, 0, 13, 7, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 6, 82, 0, 0, 17, 7, 0, 0, 47, 189, 0, 0, 117, 133, 0, 0, 24, 190, 58, 2, 149, 188, 0, 0, 0, 34, 175, 202, 210, 236, 32, 0, 0, 0, 3, 27, 30, 181, 108, 0, 0, 0, 0, 0, 0, 51, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 73, 4, 13, 0, 0, 0, 0, 122, 182, 37, 217, 0, 0, 0, 0, 178, 74, 70, 204, 0, 0, 0, 0, 244, 178, 206, 175, 0, 0, 0, 0, 107, 76, 155, 183, 0, 0, 0, 0, 0, 0, 84, 195, 0, 0, 0, 0, 0, 0, 4, 36, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 19, 0, 0, 0, 37, 0, 35, 118, 48, 0, 0, 85, 94, 40, 127, 11, 0, 0, 0, 136, 112, 91, 6, 0, 0, 0, 0, 27, 115, 7, 0, 0, 0, 0, 0, 61, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 31, 0, 0, 13, 137, 31, 58, 128, 0, 0, 2, 123, 109, 33, 149, 37, 0, 0, 31, 186, 148, 204, 110, 12, 0, 0, 0, 19, 103, 63, 0, 0, 0, 0, 0, 44, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 26, 0, 0, 0, 23, 76, 115, 49, 0, 0, 0, 31, 146, 120, 104, 0, 0, 0, 0, 86, 198, 145, 51, 0, 0, 0, 0, 65, 132, 1, 0, 0, 0, 0, 16, 115, 7, 0, 0, 0, 0, 0, 10, 14, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 20, 14, 101, 16, 0, 0, 49, 138, 18, 128, 48, 0, 0, 81, 215, 148, 193, 118, 34, 0, 0, 39, 39, 95, 64, 0, 0, 0, 0, 0, 23, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 83, 0, 0, 5, 0, 0, 0, 119, 170, 0, 48, 124, 0, 0, 30, 221, 157, 28, 138, 67, 0, 0, 51, 63, 80, 210, 210, 0, 0, 0, 0, 0, 7, 205, 92, 0, 0, 0, 0, 0, 100, 115, 0, 0, 0, 0, 0, 0, 24, 8, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 12, 0, 51, 0, 0, 0, 0, 102, 29, 77, 48, 0, 0, 0, 14, 144, 10, 128, 1, 0, 0, 16, 170, 139, 110, 102, 0, 0, 0, 25, 51, 78, 181, 29, 0, 0, 0, 0, 0, 88, 61, 0, 0, 0, 0, 0, 0, 35, 2, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 67, 0, 96, 13, 0, 0, 0, 6, 67, 0, 84, 60, 0, 0, 0, 18, 108, 76, 86, 88, 0, 0, 0, 0, 0, 0, 32, 104, 0, 0, 0, 0, 0, 0, 21, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 15, 0, 29, 0, 0, 0, 0, 153, 90, 6, 157, 0, 0, 0, 0, 158, 61, 130, 169, 0, 0, 0, 19, 206, 125, 107, 120, 0, 0, 0, 1, 33, 0, 116, 110, 0, 0, 0, 0, 0, 0, 143, 115, 0, 0, 0, 0, 0, 0, 56, 35, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 29, 0, 16, 1, 0, 0, 75, 176, 6, 25, 154, 4, 0, 41, 217, 175, 10, 124, 82, 0, 0, 21, 18, 73, 218, 195, 0, 0, 0, 0, 0, 37, 197, 45, 0, 0, 0, 0, 9, 167, 46, 0, 0, 0, 0, 0, 3, 33, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 4, 0, 48, 0, 0, 0, 14, 132, 1, 76, 42, 0, 0, 0, 74, 176, 14, 120, 0, 0, 0, 0, 122, 82, 98, 46, 0, 0, 0, 0, 65, 134, 139, 10, 0, 0, 0, 0, 0, 80, 24, 0, 0, 0, 0, 0, 0, 19, 2, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 4, 0, 6, 12, 0, 0, 0, 102, 18, 0, 83, 113, 0, 0, 0, 92, 66, 6, 173, 122, 0, 0, 0, 16, 156, 152, 139, 143, 0, 0, 0, 0, 0, 0, 66, 167, 0, 0, 0, 0, 0, 0, 19, 163, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 12, 0, 75, 0, 0, 0, 32, 170, 14, 60, 134, 0, 0, 4, 160, 116, 13, 171, 40, 0, 0, 138, 185, 158, 148, 245, 16, 0, 0, 38, 12, 128, 219, 123, 0, 0, 0, 0, 16, 170, 26, 0, 0, 0, 0, 0, 7, 38, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 37, 0, 0, 0, 0, 0, 0, 124, 50, 0, 1, 0, 0, 0, 0, 187, 129, 117, 114, 0, 0, 0, 0, 5, 8, 78, 118, 0, 0, 0, 0, 0, 0, 110, 72, 0, 0, 0, 0, 0, 0, 130, 76, 0, 0, 0, 0, 0, 0, 48, 52, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 45, 0, 0, 0, 0, 0, 107, 193, 6, 7, 157, 18, 0, 29, 230, 132, 0, 89, 130, 1, 0, 26, 70, 147, 151, 233, 22, 0, 0, 0, 0, 30, 241, 127, 2, 0, 0, 0, 0, 116, 97, 2, 0, 0, 0, 0, 0, 31, 9, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 113, 25, 6, 119, 0, 0, 0, 104, 108, 0, 83, 92, 0, 0, 117, 149, 68, 104, 214, 8, 0, 0, 50, 17, 0, 100, 147, 0, 0, 0, 0, 0, 0, 25, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 49, 0, 0, 0, 0, 0, 0, 112, 23, 0, 0, 0, 0, 0, 0, 139, 97, 3, 0, 0, 0, 0, 20, 181, 218, 101, 0, 0, 0, 0, 0, 48, 138, 2, 0, 0, 0, 0, 0, 31, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 85, 24, 0, 0, 0, 0, 37, 166, 80, 24, 90, 0, 0, 18, 203, 204, 17, 132, 74, 0, 0, 23, 25, 49, 225, 158, 0, 0, 0, 0, 0, 69, 172, 27, 0, 0, 0, 0, 95, 192, 5, 0, 0, 0, 0, 0, 31, 29, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 17, 0, 0, 0, 0, 0, 2, 83, 23, 39, 0, 0, 0, 0, 27, 83, 79, 81, 0, 0, 0, 0, 25, 91, 118, 4, 0, 0, 0, 0, 0, 7, 71, 0, 0, 0, 0, 0, 0, 30, 32, 0, 0, 0, 0, 0, 0, 4, 7, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 34, 43, 0, 0, 0, 77, 155, 4, 144, 32, 0, 0, 11, 205, 95, 84, 194, 27, 0, 0, 77, 98, 163, 218, 126, 1, 0, 0, 0, 0, 97, 122, 0, 0, 0, 0, 0, 6, 173, 13, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 35, 0, 0, 13, 0, 0, 0, 133, 18, 0, 5, 174, 0, 0, 0, 136, 28, 0, 26, 202, 0, 0, 0, 39, 176, 149, 182, 173, 0, 0, 0, 0, 32, 65, 137, 159, 0, 0, 0, 0, 0, 0, 75, 163, 0, 0, 0, 0, 0, 0, 11, 28, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 66, 0, 0, 41, 0, 0, 62, 102, 0, 0, 0, 123, 0, 0, 130, 13, 0, 0, 0, 129, 0, 0, 116, 66, 27, 49, 95, 124, 0, 0, 17, 117, 126, 80, 113, 66, 0, 0, 0, 0, 0, 0, 59, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 1, 0, 0, 0, 14, 63, 58, 134, 0, 0, 0, 0, 79, 122, 101, 98, 0, 0, 0, 2, 211, 148, 202, 85, 0, 0, 0, 2, 80, 19, 178, 29, 0, 0, 0, 0, 0, 0, 113, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 29, 142, 3, 74, 0, 0, 0, 0, 104, 195, 178, 169, 0, 0, 0, 0, 198, 128, 47, 178, 0, 0, 0, 0, 70, 9, 4, 153, 0, 0, 0, 0, 0, 0, 2, 136, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 8, 0, 0, 84, 111, 0, 65, 119, 2, 0, 15, 181, 59, 12, 168, 50, 0, 0, 85, 169, 154, 180, 206, 67, 0, 0, 0, 18, 105, 191, 39, 0, 0, 0, 0, 0, 121, 40, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 25, 1, 0, 0, 0, 0, 0, 0, 123, 34, 0, 0, 0, 59, 22, 0, 108, 126, 0, 0, 0, 120, 29, 0, 72, 171, 0, 0, 0, 144, 156, 153, 168, 205, 6, 0, 0, 20, 20, 12, 66, 220, 13, 0, 0, 0, 0, 0, 21, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 60, 9, 0, 0, 0, 0, 0, 4, 133, 7, 0, 0, 0, 0, 8, 111, 27, 44, 0, 0, 0, 0, 85, 111, 50, 105, 0, 0, 0, 0, 136, 11, 149, 54, 74, 7, 0, 0, 117, 133, 174, 111, 72, 5, 0, 0, 0, 9, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 88, 169, 0, 17, 134, 0, 0, 51, 222, 74, 1, 131, 81, 0, 0, 85, 105, 176, 153, 225, 2, 0, 0, 0, 0, 93, 217, 74, 0, 0, 0, 0, 0, 43, 96, 0, 0, 0, 0, 0, 0, 1, 3, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 54, 25, 0, 0, 92, 168, 0, 33, 153, 11, 0, 43, 234, 105, 5, 146, 58, 0, 0, 39, 60, 184, 206, 189, 0, 0, 0, 0, 0, 52, 211, 48, 0, 0, 0, 0, 0, 132, 52, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 21, 0, 0, 0, 74, 26, 0, 133, 32, 0, 0, 1, 184, 67, 13, 167, 18, 0, 0, 43, 182, 156, 192, 184, 0, 0, 0, 1, 3, 0, 138, 110, 0, 0, 0, 0, 0, 0, 184, 28, 0, 0, 0, 0, 0, 0, 54, 7, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 61, 0, 2, 0, 0, 0, 0, 147, 61, 0, 81, 62, 0, 0, 3, 164, 15, 0, 91, 68, 0, 0, 62, 197, 143, 120, 180, 27, 0, 0, 53, 86, 26, 0, 148, 9, 0, 0, 0, 0, 0, 0, 128, 7, 0, 0, 0, 0, 0, 0, 22, 1, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 24, 12, 6, 0, 0, 0, 0, 89, 169, 155, 83, 0, 0, 0, 0, 109, 158, 207, 80, 23, 0, 0, 0, 129, 249, 232, 168, 62, 0, 0, 0, 31, 172, 106, 5, 0, 0, 0, 0, 0, 182, 20, 0, 0, 0, 0, 0, 0, 77, 3, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 50, 0, 0, 0, 0, 0, 99, 211, 44, 17, 181, 86, 0, 0, 209, 140, 57, 154, 164, 23, 0, 0, 174, 250, 247, 151, 0, 0, 0, 0, 28, 161, 173, 12, 0, 0, 0, 0, 73, 185, 16, 0, 0, 0, 0, 0, 15, 20, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 23, 0, 0, 13, 63, 0, 37, 132, 9, 0, 0, 98, 111, 2, 129, 23, 0, 0, 47, 212, 165, 160, 149, 0, 0, 0, 56, 49, 3, 146, 49, 0, 0, 0, 0, 0, 8, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 66, 31, 40, 0, 0, 0, 5, 149, 7, 148, 71, 0, 0, 0, 20, 124, 0, 151, 50, 0, 0, 0, 0, 172, 81, 195, 153, 63, 0, 0, 0, 81, 122, 179, 91, 5, 0, 0, 0, 0, 0, 99, 86, 0, 0, 0, 0, 0, 0, 14, 22, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 68, 10, 0, 0, 0, 143, 44, 0, 163, 0, 0, 0, 14, 157, 2, 39, 200, 0, 0, 0, 24, 198, 167, 173, 176, 0, 0, 0, 0, 69, 48, 110, 135, 0, 0, 0, 0, 0, 0, 110, 100, 0, 0, 0, 0, 0, 0, 19, 19, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 104, 0, 0, 0, 0, 132, 43, 23, 168, 0, 0, 0, 7, 174, 33, 42, 186, 36, 0, 0, 116, 202, 152, 127, 206, 25, 0, 0, 24, 28, 2, 23, 199, 0, 0, 0, 0, 0, 0, 12, 134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 6, 0, 0, 1, 66, 0, 19, 133, 18, 0, 0, 101, 123, 11, 129, 36, 0, 0, 76, 124, 122, 179, 105, 0, 0, 0, 14, 0, 78, 83, 0, 0, 0, 0, 0, 31, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 26, 0, 0, 0, 0, 101, 5, 127, 9, 0, 0, 0, 48, 132, 64, 121, 0, 0, 0, 0, 157, 132, 182, 58, 0, 0, 0, 0, 21, 49, 95, 0, 0, 0, 0, 0, 0, 110, 3, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 25, 0, 0, 13, 147, 37, 23, 137, 6, 0, 0, 117, 146, 1, 124, 48, 0, 0, 59, 215, 151, 166, 149, 0, 0, 0, 64, 39, 7, 169, 39, 0, 0, 0, 0, 0, 36, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 4, 0, 0, 9, 101, 4, 57, 103, 0, 0, 0, 116, 137, 16, 147, 16, 0, 0, 64, 189, 144, 216, 103, 0, 0, 0, 21, 14, 28, 153, 13, 0, 0, 0, 0, 37, 157, 17, 0, 0, 0, 0, 0, 24, 35, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 70, 0, 15, 0, 0, 0, 0, 149, 103, 12, 162, 0, 0, 0, 3, 175, 14, 68, 152, 0, 0, 0, 12, 214, 92, 150, 123, 12, 0, 0, 1, 128, 175, 221, 168, 40, 0, 0, 0, 0, 0, 84, 3, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 53, 168, 0, 103, 7, 0, 0, 37, 187, 125, 61, 176, 5, 0, 0, 109, 194, 192, 167, 220, 6, 0, 0, 1, 4, 3, 0, 166, 8, 0, 0, 0, 0, 0, 0, 148, 19, 0, 0, 0, 0, 0, 0, 64, 5, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 55, 0, 0, 0, 0, 0, 44, 188, 40, 0, 51, 0, 0, 0, 169, 216, 94, 95, 104, 0, 0, 1, 89, 75, 124, 210, 15, 0, 0, 4, 0, 1, 169, 110, 0, 0, 0, 0, 0, 95, 120, 1, 0, 0, 0, 0, 0, 41, 12, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 8, 0, 0, 0, 0, 65, 0, 94, 23, 0, 0, 0, 0, 88, 84, 149, 23, 0, 0, 0, 0, 0, 42, 111, 32, 0, 0, 0, 0, 0, 0, 104, 60, 0, 0, 0, 0, 0, 0, 87, 74, 0, 0, 0, 0, 0, 0, 21, 21, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 71, 0, 0, 0, 0, 100, 39, 83, 130, 0, 0, 0, 0, 150, 59, 100, 106, 0, 0, 0, 0, 88, 162, 183, 85, 0, 0, 0, 0, 13, 77, 153, 72, 0, 0, 0, 0, 0, 0, 149, 33, 0, 0, 0, 0, 0, 0, 31, 7, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 27, 0, 0, 0, 145, 26, 0, 133, 101, 0, 0, 22, 172, 10, 90, 187, 10, 0, 0, 10, 179, 167, 220, 53, 0, 0, 0, 0, 13, 14, 165, 3, 0, 0, 0, 0, 0, 52, 116, 0, 0, 0, 0, 0, 0, 28, 46, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 15, 37, 104, 2, 0, 0, 0, 13, 168, 170, 165, 22, 0, 0, 0, 144, 248, 88, 175, 21, 0, 0, 88, 252, 251, 243, 253, 176, 12, 0, 99, 249, 213, 122, 162, 116, 8, 0, 2, 17, 0, 0, 20, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 67, 27, 59, 16, 0, 0, 0, 10, 124, 20, 101, 0, 0, 0, 0, 99, 196, 155, 48, 0, 0, 0, 0, 30, 97, 77, 0, 0, 0, 0, 0, 4, 79, 0, 0, 0, 0, 0, 0, 4, 16, 0, 0, 0, 0 },
    { 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 22, 154, 0, 0, 0, 0, 0, 0, 73, 152, 20, 82, 0, 0, 0, 0, 111, 90, 30, 123, 0, 0, 0, 3, 186, 83, 112, 199, 53, 0, 0, 24, 149, 115, 120, 181, 19, 0, 0, 0, 0, 0, 10, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 0, 69, 48, 56, 57, 0, 0, 0, 36, 145, 20, 120, 1, 0, 0, 0, 174, 131, 167, 108, 0, 0, 0, 0, 88, 117, 108, 0, 0, 0, 0, 0, 6, 117, 1, 0, 0, 0, 0, 0, 4, 25, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 37, 32, 0, 0, 0, 0, 5, 3, 127, 24, 0, 0, 0, 0, 0, 77, 138, 40, 0, 0, 0, 0, 0, 103, 146, 16, 0, 0, 0, 0, 1, 112, 17, 0, 0, 0, 0, 0, 47, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 1, 22, 155, 24, 0, 0, 0, 0, 78, 98, 153, 52, 0, 0, 0, 30, 182, 131, 201, 63, 0, 0, 0, 1, 6, 0, 161, 63, 0, 0, 0, 0, 0, 0, 142, 53, 0, 0, 0, 0, 0, 0, 22, 6, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 29, 0, 0, 0, 0, 3, 84, 44, 90, 0, 0, 0, 0, 11, 93, 81, 64, 0, 0, 0, 4, 117, 94, 154, 64, 0, 0, 0, 0, 0, 0, 107, 21, 0, 0, 0, 0, 0, 0, 101, 1, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 10, 4, 50, 0, 0, 0, 2, 126, 37, 119, 30, 0, 0, 0, 80, 162, 72, 178, 33, 0, 0, 1, 219, 176, 181, 119, 6, 0, 0, 0, 81, 184, 27, 0, 0, 0, 0, 0, 80, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 59, 0, 0, 0, 0, 0, 0, 33, 125, 112, 52, 0, 0, 0, 0, 64, 112, 124, 64, 0, 0, 0, 0, 71, 146, 171, 92, 0, 0, 0, 0, 0, 0, 114, 62, 0, 0, 0, 0, 0, 0, 129, 37, 0, 0, 0, 0, 0, 0, 24, 4, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 41, 0, 0, 0, 0, 38, 69, 68, 28, 0, 0, 0, 22, 115, 35, 111, 0, 0, 0, 1, 182, 164, 173, 23, 0, 0, 0, 1, 64, 89, 61, 0, 0, 0, 0, 0, 50, 94, 0, 0, 0, 0, 0, 0, 24, 13, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 69, 0, 0, 0, 0, 0, 0, 27, 106, 0, 0, 0, 0, 0, 4, 110, 40, 65, 0, 0, 0, 0, 47, 180, 190, 129, 0, 0, 0, 0, 0, 0, 124, 27, 0, 0, 0, 0, 0, 14, 89, 0, 0, 0, 0, 0, 0, 4, 14, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 2, 0, 19, 100, 0, 0, 0, 121, 40, 29, 50, 123, 30, 0, 0, 27, 227, 162, 83, 92, 120, 0, 0, 28, 124, 5, 0, 0, 120, 0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0, 0, 0, 0, 0, 1, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 70, 20, 0, 0, 0, 61, 57, 53, 52, 0, 0, 0, 65, 117, 23, 118, 6, 0, 0, 2, 183, 133, 162, 105, 9, 0, 0, 1, 55, 121, 55, 0, 0, 0, 0, 0, 45, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 37, 64, 0, 23, 24, 0, 0, 0, 27, 108, 6, 103, 47, 0, 0, 0, 0, 34, 105, 178, 118, 73, 31, 0, 0, 0, 0, 112, 52, 43, 17, 0, 0, 0, 0, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 1, 70, 0, 51, 57, 0, 0, 0, 47, 112, 16, 113, 2, 0, 0, 0, 152, 149, 191, 34, 0, 0, 0, 0, 50, 97, 69, 0, 0, 0, 0, 0, 56, 93, 0, 0, 0, 0, 0, 0, 22, 12, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 20, 7, 7, 0, 0, 0, 0, 125, 26, 89, 142, 0, 0, 0, 0, 116, 12, 84, 104, 0, 0, 0, 0, 78, 133, 159, 131, 0, 0, 0, 0, 0, 28, 45, 114, 0, 0, 0, 0, 0, 0, 2, 131, 14, 0, 0, 0, 0, 0, 0, 33, 7, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 64, 0, 1, 4, 0, 0, 1, 195, 145, 0, 83, 162, 0, 0, 26, 229, 54, 31, 157, 140, 0, 0, 148, 244, 223, 210, 245, 33, 0, 0, 67, 121, 72, 165, 164, 0, 0, 0, 0, 0, 0, 69, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 91, 4, 0, 0, 0, 0, 39, 139, 162, 0, 0, 0, 0, 54, 174, 132, 130, 0, 0, 0, 49, 241, 184, 224, 158, 112, 11, 0, 38, 124, 85, 184, 10, 0, 0, 0, 0, 0, 73, 93, 0, 0, 0, 0, 0, 0, 22, 15, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 76, 0, 0, 0, 155, 54, 1, 166, 39, 0, 0, 17, 202, 24, 52, 206, 3, 0, 0, 89, 249, 225, 247, 195, 0, 0, 0, 51, 112, 101, 216, 46, 0, 0, 0, 0, 0, 53, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 3, 35, 0, 0, 0, 91, 31, 0, 0, 78, 0, 0, 0, 73, 47, 2, 7, 103, 9, 0, 0, 61, 173, 132, 122, 168, 58, 0, 0, 13, 33, 0, 0, 27, 110, 0, 0, 0, 0, 0, 0, 0, 97, 3, 0, 0, 0, 0, 0, 0, 15, 1 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 0, 0, 0, 0, 0, 81, 0, 126, 30, 0, 0, 0, 0, 138, 0, 135, 54, 0, 0, 0, 0, 171, 140, 196, 124, 0, 0, 0, 0, 30, 23, 121, 142, 0, 0, 0, 0, 0, 0, 52, 117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 103, 0, 0, 0, 0, 99, 119, 83, 227, 0, 0, 0, 0, 191, 131, 159, 219, 0, 0, 0, 32, 255, 255, 255, 187, 0, 0, 0, 8, 123, 171, 215, 31, 0, 0, 0, 0, 0, 123, 75, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 27, 0, 0, 0, 0, 141, 85, 95, 112, 0, 0, 0, 5, 200, 78, 81, 149, 0, 0, 0, 8, 100, 90, 173, 149, 0, 0, 0, 0, 0, 0, 59, 141, 0, 0, 0, 0, 0, 0, 48, 134, 0, 0, 0, 0, 0, 0, 6, 28, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 2, 0, 85, 27, 0, 0, 117, 223, 8, 57, 222, 41, 0, 46, 226, 135, 36, 182, 134, 0, 0, 81, 253, 250, 253, 245, 103, 0, 0, 11, 97, 170, 223, 96, 1, 0, 0, 0, 0, 158, 74, 0, 0, 0, 0, 0, 0, 40, 6, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 71, 32, 19, 0, 0, 0, 0, 79, 150, 109, 90, 0, 0, 0, 0, 131, 87, 87, 136, 0, 0, 0, 29, 202, 118, 169, 201, 116, 26, 0, 84, 140, 103, 133, 166, 59, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 39, 0, 0, 0, 0, 39, 119, 176, 114, 0, 0, 0, 0, 117, 200, 222, 72, 0, 0, 0, 0, 110, 242, 235, 206, 10, 0, 0, 0, 17, 206, 94, 26, 0, 0, 0, 0, 64, 228, 13, 0, 0, 0, 0, 0, 6, 41, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 87, 0, 0, 0, 0, 0, 0, 34, 123, 80, 27, 0, 0, 0, 0, 79, 106, 108, 72, 0, 0, 0, 0, 131, 137, 167, 129, 4, 0, 0, 0, 59, 95, 150, 127, 4, 0, 0, 0, 0, 0, 58, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 6, 20, 0, 0, 0, 0, 0, 0, 62, 91, 0, 0, 0, 69, 48, 0, 145, 29, 0, 0, 4, 148, 25, 44, 198, 3, 0, 0, 83, 77, 0, 62, 155, 0, 0, 0, 107, 144, 142, 148, 145, 0, 0, 0, 0, 5, 0, 13, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 23, 35, 0, 0, 0, 23, 231, 43, 131, 235, 0, 0, 0, 83, 231, 87, 191, 211, 0, 0, 0, 43, 187, 211, 255, 231, 0, 0, 0, 0, 0, 55, 255, 127, 0, 0, 0, 0, 0, 75, 239, 47, 0, 0, 0, 0, 0, 19, 95, 4, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 81, 0, 40, 3, 0, 0, 22, 161, 39, 0, 127, 8, 0, 0, 71, 107, 0, 2, 151, 19, 0, 0, 9, 154, 175, 188, 202, 27, 0, 0, 0, 6, 33, 157, 106, 0, 0, 0, 0, 0, 2, 185, 50, 0, 0, 0, 0, 0, 0, 36, 9, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 23, 27, 0, 0, 0, 0, 198, 74, 155, 149, 0, 0, 0, 4, 244, 146, 215, 156, 37, 0, 0, 4, 157, 180, 245, 216, 95, 0, 0, 0, 0, 36, 225, 58, 1, 0, 0, 0, 0, 82, 166, 6, 0, 0, 0, 0, 0, 33, 57, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 60, 37, 110, 10, 0, 0, 0, 153, 240, 161, 244, 30, 0, 0, 11, 222, 242, 223, 240, 12, 0, 0, 65, 249, 253, 253, 236, 33, 0, 0, 8, 78, 174, 221, 128, 0, 0, 0, 0, 2, 178, 163, 5, 0, 0, 0, 0, 0, 40, 28, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 10, 8, 88, 16, 0, 0, 1, 208, 140, 125, 247, 55, 0, 0, 54, 250, 173, 211, 232, 17, 0, 0, 62, 218, 200, 252, 186, 21, 0, 0, 0, 33, 92, 252, 149, 0, 0, 0, 0, 0, 100, 235, 65, 0, 0, 0, 0, 0, 22, 49, 3, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 4, 0, 30, 0, 0, 0, 0, 123, 204, 69, 242, 52, 0, 0, 0, 196, 221, 191, 252, 75, 0, 0, 0, 125, 152, 254, 149, 6, 0, 0, 0, 0, 71, 241, 70, 0, 0, 0, 0, 0, 155, 171, 8, 0, 0, 0, 0, 0, 74, 53, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 9, 32, 20, 0, 0, 0, 1, 108, 9, 117, 0, 0, 0, 0, 54, 103, 46, 117, 0, 0, 0, 0, 165, 151, 189, 63, 0, 0, 0, 0, 39, 40, 122, 3, 0, 0, 0, 0, 0, 74, 27, 0, 0, 0, 0, 0, 0, 20, 4, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 66, 0, 1, 0, 0, 0, 0, 129, 43, 41, 99, 0, 0, 0, 0, 125, 10, 42, 124, 0, 0, 0, 0, 81, 136, 109, 150, 0, 0, 0, 0, 2, 18, 34, 137, 0, 0, 0, 0, 0, 0, 61, 111, 0, 0, 0, 0, 0, 0, 16, 23, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 124, 86, 35, 190, 0, 0, 0, 1, 204, 128, 129, 214, 41, 0, 0, 20, 251, 243, 251, 227, 97, 0, 0, 4, 77, 96, 187, 41, 9, 0, 0, 0, 0, 135, 59, 0, 0, 0, 0, 0, 0, 32, 1, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 86, 0, 0, 0, 0, 100, 62, 125, 213, 0, 0, 0, 0, 169, 128, 194, 155, 12, 0, 0, 0, 240, 249, 244, 203, 69, 0, 0, 0, 98, 149, 176, 17, 3, 0, 0, 0, 0, 137, 94, 0, 0, 0, 0, 0, 0, 30, 12, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 58, 54, 6, 184, 0, 0, 0, 0, 156, 107, 81, 223, 1, 0, 0, 19, 204, 200, 246, 175, 17, 0, 0, 0, 18, 24, 204, 30, 0, 0, 0, 0, 0, 73, 132, 0, 0, 0, 0, 0, 0, 17, 24, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 59, 0, 0, 0, 63, 2, 0, 113, 139, 0, 0, 29, 178, 30, 0, 66, 190, 0, 0, 11, 157, 116, 126, 170, 219, 19, 0, 0, 39, 124, 97, 42, 119, 73, 0, 0, 0, 0, 0, 0, 36, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 26, 0, 0, 0, 0, 0, 1, 145, 55, 0, 6, 56, 0, 0, 19, 121, 0, 51, 140, 86, 0, 0, 10, 153, 137, 132, 154, 0, 0, 0, 0, 0, 0, 98, 97, 0, 0, 0, 0, 0, 0, 121, 81, 0, 0, 0, 0, 0, 0, 54, 27, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 91, 8, 0, 0, 0, 82, 32, 150, 18, 0, 0, 0, 49, 148, 134, 71, 20, 12, 0, 35, 217, 206, 162, 112, 57, 2, 0, 62, 122, 180, 6, 0, 0, 0, 0, 0, 68, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 4, 0, 0, 1, 0, 0, 95, 83, 0, 0, 15, 108, 5, 27, 196, 48, 0, 0, 60, 173, 145, 207, 117, 20, 0, 0, 2, 43, 63, 122, 3, 0, 0, 0, 0, 37, 137, 3, 0, 0, 0, 0, 0, 17, 25, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 16, 0, 0, 72, 41, 0, 0, 78, 38, 0, 0, 130, 2, 0, 0, 113, 20, 0, 0, 121, 103, 107, 84, 146, 57, 0, 0, 15, 48, 39, 8, 82, 38, 0, 0, 0, 0, 0, 0, 52, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 6, 0, 0, 0, 0, 132, 9, 176, 82, 0, 0, 0, 3, 170, 1, 151, 97, 0, 0, 0, 0, 169, 164, 228, 105, 0, 0, 0, 0, 52, 61, 158, 96, 0, 0, 0, 0, 0, 0, 128, 93, 0, 0, 0, 0, 0, 0, 38, 47, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 170, 39, 0, 0, 0, 0, 0, 72, 208, 19, 0, 5, 32, 0, 0, 113, 207, 19, 0, 27, 175, 20, 0, 48, 240, 216, 205, 229, 252, 63, 0, 0, 71, 124, 124, 88, 252, 63, 0, 0, 0, 0, 0, 7, 138, 33, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 4, 47, 0, 0, 0, 103, 18, 0, 3, 132, 0, 0, 0, 84, 62, 0, 0, 153, 0, 0, 0, 46, 160, 118, 131, 190, 1, 0, 0, 1, 74, 44, 31, 132, 23, 0, 0, 0, 0, 0, 0, 58, 79, 0, 0, 0, 0, 0, 0, 9, 24, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 39, 0, 0, 0, 0, 0, 93, 139, 0, 0, 0, 0, 74, 64, 157, 33, 52, 24, 0, 57, 218, 183, 178, 136, 98, 11, 0, 46, 135, 142, 15, 8, 0, 0, 0, 0, 68, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 85, 0, 0, 0, 0, 0, 0, 104, 92, 0, 0, 0, 0, 39, 85, 137, 16, 0, 0, 0, 0, 108, 195, 141, 85, 0, 0, 0, 0, 47, 130, 0, 0, 0, 0, 0, 0, 71, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 3, 0, 0, 0, 0, 75, 84, 141, 0, 0, 0, 0, 48, 175, 179, 121, 105, 41, 0, 0, 59, 205, 121, 73, 35, 5, 0, 0, 78, 149, 0, 0, 0, 0, 0, 16, 142, 13, 0, 0, 0, 0, 0, 11, 18, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 7, 0, 0, 65, 26, 0, 0, 30, 38, 0, 59, 110, 0, 0, 0, 140, 93, 48, 152, 15, 0, 0, 0, 125, 135, 195, 56, 0, 0, 0, 0, 1, 71, 73, 0, 0, 0, 0, 0, 36, 160, 0, 0, 0, 0, 0, 0, 2, 30, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 51, 0, 0, 0, 0, 0, 0, 116, 51, 39, 10, 0, 0, 0, 0, 121, 30, 147, 48, 0, 0, 0, 0, 72, 139, 208, 76, 0, 0, 0, 0, 0, 0, 139, 64, 0, 0, 0, 0, 0, 0, 83, 79, 0, 0, 0, 0, 0, 0, 11, 18, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 63, 0, 5, 0, 0, 0, 0, 75, 157, 32, 152, 0, 0, 0, 0, 151, 115, 70, 173, 0, 0, 0, 0, 174, 155, 182, 187, 0, 0, 0, 0, 7, 0, 80, 173, 0, 0, 0, 0, 0, 0, 84, 111, 0, 0, 0, 0, 0, 0, 14, 17, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 93, 6, 0, 0, 11, 35, 38, 152, 11, 0, 0, 12, 137, 71, 136, 59, 6, 0, 0, 45, 189, 212, 224, 198, 67, 0, 0, 0, 115, 146, 57, 52, 10, 0, 0, 0, 82, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 53, 0, 0, 0, 15, 74, 38, 163, 16, 0, 0, 0, 130, 118, 150, 91, 79, 16, 0, 15, 198, 171, 232, 172, 58, 3, 0, 0, 85, 201, 68, 19, 0, 0, 0, 0, 147, 22, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 110, 12, 0, 0, 0, 9, 34, 156, 36, 0, 0, 0, 75, 105, 138, 88, 0, 0, 0, 20, 220, 186, 175, 127, 61, 2, 0, 7, 157, 86, 7, 0, 0, 0, 0, 51, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 60, 0, 0, 0, 0, 0, 7, 126, 68, 0, 0, 0, 0, 44, 100, 129, 19, 5, 0, 0, 0, 155, 194, 158, 119, 12, 0, 0, 0, 28, 159, 10, 0, 0, 0, 0, 0, 91, 62, 0, 0, 0, 0, 0, 0, 22, 1, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 35, 0, 0, 0, 0, 0, 0, 164, 65, 3, 130, 0, 0, 0, 0, 191, 39, 18, 172, 0, 0, 0, 0, 158, 176, 197, 174, 0, 0, 0, 0, 9, 14, 90, 140, 0, 0, 0, 0, 0, 0, 79, 177, 0, 0, 0, 0, 0, 0, 13, 36, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 65, 0, 0, 0, 0, 0, 0, 48, 159, 0, 0, 0, 0, 0, 0, 115, 113, 0, 0, 0, 0, 0, 49, 152, 145, 70, 0, 0, 0, 0, 18, 73, 149, 56, 0, 0, 0, 0, 0, 0, 124, 11, 0, 0, 0, 0, 0, 0, 26, 3, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 14, 0, 0, 0, 0, 0, 76, 117, 8, 0, 0, 64, 38, 66, 156, 7, 0, 0, 67, 207, 166, 178, 116, 40, 0, 0, 46, 78, 127, 39, 0, 0, 0, 0, 0, 25, 78, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 99, 0, 0, 0, 0, 0, 0, 111, 145, 119, 96, 0, 0, 0, 0, 137, 117, 114, 152, 0, 0, 0, 0, 167, 93, 98, 152, 0, 0, 0, 0, 92, 167, 184, 126, 0, 0, 0, 0, 0, 0, 69, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 90, 0, 102, 19, 0, 0, 0, 0, 93, 8, 139, 54, 0, 0, 0, 0, 95, 92, 125, 78, 0, 0, 0, 0, 0, 0, 75, 93, 0, 0, 0, 0, 0, 0, 40, 105, 0, 0, 0, 0, 0, 0, 4, 20, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 30, 0, 0, 0, 0, 32, 130, 189, 89, 0, 0, 0, 12, 138, 81, 78, 92, 0, 0, 0, 65, 167, 155, 190, 180, 70, 14, 0, 0, 1, 0, 101, 100, 1, 0, 0, 0, 0, 0, 60, 111, 0, 0, 0, 0, 0, 0, 22, 51, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 44, 0, 0, 0, 0, 0, 89, 128, 128, 122, 0, 0, 0, 83, 144, 15, 70, 171, 0, 0, 0, 41, 94, 117, 95, 162, 0, 0, 0, 0, 0, 0, 58, 172, 0, 0, 0, 0, 0, 0, 95, 138, 0, 0, 0, 0, 0, 0, 50, 55, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 26, 0, 87, 0, 0, 0, 0, 122, 82, 45, 121, 0, 0, 0, 5, 132, 9, 109, 94, 0, 0, 0, 15, 159, 108, 196, 139, 2, 0, 0, 0, 33, 101, 185, 69, 0, 0, 0, 0, 0, 0, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 193, 58, 106, 146, 0, 0, 0, 31, 232, 82, 167, 147, 0, 0, 0, 3, 116, 155, 234, 123, 0, 0, 0, 0, 0, 0, 188, 85, 0, 0, 0, 0, 0, 0, 127, 101, 0, 0, 0, 0, 0, 0, 57, 80, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 19, 0, 23, 0, 0, 0, 0, 122, 52, 0, 106, 0, 0, 0, 0, 115, 19, 33, 138, 0, 0, 0, 0, 134, 121, 112, 127, 0, 0, 0, 0, 0, 0, 71, 85, 0, 0, 0, 0, 0, 0, 113, 46, 0, 0, 0, 0, 0, 0, 49, 12, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 85, 0, 81, 0, 0, 0, 0, 122, 54, 30, 143, 0, 0, 0, 28, 98, 0, 96, 112, 2, 0, 0, 43, 153, 80, 190, 148, 70, 0, 0, 0, 88, 121, 205, 74, 2, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 16, 0, 110, 0, 0, 0, 27, 191, 25, 2, 157, 0, 0, 0, 102, 131, 0, 39, 194, 0, 0, 0, 101, 205, 210, 214, 209, 0, 0, 0, 8, 60, 64, 95, 189, 0, 0, 0, 0, 0, 0, 67, 156, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 41, 0, 24, 1, 0, 0, 0, 86, 114, 0, 110, 4, 0, 0, 3, 142, 23, 23, 126, 0, 0, 0, 1, 136, 131, 170, 177, 6, 0, 0, 0, 11, 58, 171, 48, 0, 0, 0, 0, 0, 18, 90, 0, 0, 0, 0, 0, 0, 22, 23, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 64, 31, 67, 118, 0, 0, 0, 0, 116, 15, 129, 80, 0, 0, 0, 0, 139, 113, 174, 32, 0, 0, 0, 0, 31, 65, 135, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0, 10, 9, 40, 112, 0, 0, 0, 0, 75, 27, 96, 66, 0, 0, 0, 0, 135, 109, 185, 55, 0, 0, 0, 0, 28, 73, 96, 0, 0, 0, 0, 0, 0, 66, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 86, 0, 0, 2, 96, 62, 0, 9, 136, 0, 0, 0, 94, 67, 3, 6, 132, 0, 0, 23, 134, 116, 125, 130, 209, 38, 0, 0, 0, 0, 0, 6, 176, 3, 0, 0, 0, 0, 0, 0, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 25, 34, 0, 0, 0, 158, 19, 0, 102, 38, 0, 0, 39, 110, 0, 14, 147, 0, 0, 0, 40, 158, 67, 125, 187, 7, 0, 0, 0, 88, 130, 201, 81, 0, 0, 0, 0, 0, 21, 124, 0, 0, 0, 0, 0, 0, 14, 23, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 19, 16, 38, 0, 0, 0, 0, 149, 67, 99, 116, 0, 0, 0, 0, 187, 47, 102, 132, 32, 0, 0, 1, 180, 160, 224, 174, 27, 0, 0, 0, 33, 61, 149, 96, 0, 0, 0, 0, 0, 0, 95, 114, 0, 0, 0, 0, 0, 0, 21, 21, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 5, 0, 21, 2, 0, 0, 0, 124, 58, 0, 121, 4, 0, 0, 0, 112, 19, 43, 120, 0, 0, 0, 0, 75, 127, 186, 100, 0, 0, 0, 0, 0, 28, 139, 3, 0, 0, 0, 0, 0, 60, 57, 0, 0, 0, 0, 0, 0, 39, 11, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 14, 0, 0, 0, 0, 0, 0, 116, 4, 0, 0, 0, 0, 9, 100, 134, 2, 0, 0, 0, 0, 70, 136, 169, 90, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 0, 96, 17, 58, 137, 0, 0, 0, 0, 169, 15, 119, 89, 0, 0, 0, 0, 74, 129, 197, 69, 0, 0, 0, 0, 0, 12, 123, 0, 0, 0, 0, 0, 0, 29, 94, 0, 0, 0, 0, 0, 0, 7, 26, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 22, 0, 0, 0, 0, 47, 125, 8, 133, 0, 0, 0, 0, 118, 82, 43, 142, 0, 0, 0, 0, 130, 133, 182, 147, 0, 0, 0, 0, 0, 0, 130, 65, 0, 0, 0, 0, 0, 0, 142, 19, 0, 0, 0, 0, 0, 0, 69, 1, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 38, 0, 0, 0, 0, 10, 57, 62, 98, 0, 0, 0, 0, 4, 138, 25, 144, 0, 0, 0, 0, 0, 28, 105, 181, 25, 0, 0, 0, 0, 0, 0, 147, 76, 0, 0, 0, 0, 0, 0, 75, 122, 0, 0, 0, 0, 0, 0, 13, 22, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 8, 99, 14, 98, 0, 0, 0, 0, 79, 101, 66, 97, 0, 0, 0, 0, 135, 121, 164, 120, 16, 0, 0, 0, 10, 1, 105, 12, 0, 0, 0, 0, 0, 0, 115, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 14, 0, 0, 0, 1, 69, 2, 101, 1, 0, 0, 0, 60, 81, 55, 95, 0, 0, 0, 0, 99, 92, 166, 72, 0, 0, 0, 0, 0, 24, 87, 0, 0, 0, 0, 0, 0, 96, 5, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 104, 1, 0, 0, 0, 0, 1, 167, 54, 0, 131, 3, 0, 0, 4, 188, 7, 1, 173, 4, 0, 0, 0, 103, 187, 128, 194, 0, 0, 0, 0, 0, 28, 150, 189, 0, 0, 0, 0, 0, 0, 54, 137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 13, 0, 42, 12, 0, 0, 0, 74, 108, 15, 117, 0, 0, 0, 0, 132, 37, 93, 90, 0, 0, 0, 0, 41, 136, 190, 58, 0, 0, 0, 0, 0, 72, 60, 0, 0, 0, 0, 0, 2, 121, 0, 0, 0, 0, 0, 0, 1, 30, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 32, 0, 0, 0, 9, 67, 6, 128, 5, 0, 0, 0, 87, 96, 77, 109, 0, 0, 0, 0, 127, 91, 135, 13, 0, 0, 0, 0, 23, 123, 101, 0, 0, 0, 0, 0, 0, 111, 7, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 51, 0, 0, 0, 0, 0, 0, 83, 151, 95, 12, 0, 0, 0, 0, 119, 131, 159, 32, 0, 0, 0, 0, 131, 231, 243, 219, 83, 0, 0, 0, 31, 71, 183, 59, 27, 0, 0, 0, 0, 0, 139, 24, 0, 0, 0, 0, 0, 0, 23, 4, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 68, 0, 0, 0, 0, 0, 0, 127, 112, 0, 0, 0, 0, 0, 21, 196, 150, 0, 0, 0, 0, 0, 109, 242, 225, 113, 0, 0, 0, 0, 28, 62, 217, 130, 0, 0, 0, 0, 0, 0, 110, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 52, 0, 0, 0, 0, 13, 143, 173, 0, 0, 0, 0, 14, 120, 80, 120, 0, 0, 0, 79, 205, 124, 66, 150, 33, 0, 0, 107, 199, 180, 147, 169, 73, 0, 0, 0, 0, 0, 0, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 30, 24, 0, 0, 0, 1, 74, 100, 125, 0, 0, 0, 0, 69, 125, 111, 63, 0, 0, 0, 0, 134, 51, 187, 102, 7, 0, 0, 0, 93, 177, 77, 12, 0, 0, 0, 0, 0, 88, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 55, 0, 0, 0, 72, 45, 0, 95, 35, 0, 0, 0, 145, 23, 49, 119, 0, 0, 0, 20, 138, 49, 156, 98, 0, 0, 0, 0, 98, 125, 154, 46, 0, 0, 0, 0, 0, 80, 14, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 34, 0, 0, 2, 153, 4, 0, 61, 167, 0, 0, 1, 143, 118, 59, 126, 163, 0, 0, 0, 1, 43, 91, 48, 185, 2, 0, 0, 0, 0, 0, 31, 179, 0, 0, 0, 0, 0, 0, 33, 159, 4, 0, 0, 0, 0, 0, 0, 68, 13, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 36, 0, 83, 5, 0, 0, 0, 13, 103, 0, 182, 51, 0, 0, 0, 8, 179, 24, 185, 60, 0, 0, 0, 0, 94, 188, 223, 165, 0, 0, 0, 0, 0, 44, 189, 154, 0, 0, 0, 0, 0, 0, 70, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 13, 0, 24, 44, 0, 0, 0, 179, 96, 0, 127, 108, 0, 0, 19, 203, 30, 62, 202, 19, 0, 0, 113, 240, 180, 219, 243, 135, 22, 0, 82, 165, 116, 231, 172, 31, 1, 0, 0, 0, 0, 171, 15, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 7, 0, 0, 0, 0, 0, 45, 124, 179, 68, 0, 0, 0, 0, 97, 48, 115, 49, 0, 0, 0, 0, 97, 115, 181, 96, 4, 0, 0, 0, 4, 53, 142, 38, 0, 0, 0, 0, 0, 84, 41, 0, 0, 0, 0, 0, 0, 19, 3, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 86, 0, 0, 22, 125, 4, 0, 88, 249, 11, 0, 33, 214, 60, 60, 189, 244, 62, 0, 0, 68, 231, 233, 253, 170, 0, 0, 0, 0, 44, 77, 240, 57, 0, 0, 0, 0, 0, 27, 166, 25, 0, 0, 0, 0, 0, 0, 10, 2, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 64, 0, 0, 0, 84, 80, 1, 145, 22, 0, 0, 0, 181, 76, 76, 203, 4, 0, 0, 4, 201, 181, 216, 131, 2, 0, 0, 0, 19, 11, 178, 55, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 3, 0, 101, 0, 0, 0, 0, 159, 31, 41, 173, 0, 0, 0, 15, 162, 4, 96, 170, 8, 0, 0, 41, 203, 193, 219, 169, 21, 0, 0, 0, 34, 56, 185, 14, 0, 0, 0, 0, 0, 23, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 41, 0, 0, 0, 0, 123, 2, 15, 124, 0, 0, 0, 0, 122, 0, 71, 137, 0, 0, 0, 0, 130, 135, 197, 87, 0, 0, 0, 0, 11, 18, 116, 66, 0, 0, 0, 0, 0, 0, 134, 48, 0, 0, 0, 0, 0, 0, 33, 8, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 10, 16, 19, 0, 0, 0, 0, 65, 99, 118, 73, 0, 0, 0, 0, 110, 63, 159, 18, 0, 0, 0, 0, 26, 85, 152, 1, 0, 0, 0, 0, 0, 17, 162, 0, 0, 0, 0, 0, 0, 0, 107, 0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 21, 22, 66, 0, 0, 0, 0, 125, 113, 53, 186, 0, 0, 0, 0, 190, 97, 150, 176, 0, 0, 0, 18, 155, 120, 138, 151, 0, 0, 0, 0, 0, 0, 84, 134, 0, 0, 0, 0, 0, 0, 49, 201, 1, 0, 0, 0, 0, 0, 5, 42, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 49, 0, 0, 0, 0, 0, 0, 88, 89, 13, 70, 0, 0, 0, 0, 110, 47, 65, 127, 0, 0, 0, 0, 129, 94, 189, 86, 0, 0, 0, 0, 36, 105, 119, 58, 0, 0, 0, 0, 0, 0, 102, 42, 0, 0, 0, 0, 0, 0, 19, 8, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 58, 0, 0, 0, 61, 57, 6, 160, 20, 0, 0, 5, 195, 144, 123, 159, 0, 0, 0, 48, 169, 122, 225, 82, 0, 0, 0, 0, 2, 14, 188, 14, 0, 0, 0, 0, 0, 46, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 4, 23, 0, 0, 0, 0, 19, 162, 51, 162, 0, 0, 0, 0, 80, 164, 96, 141, 0, 0, 0, 0, 95, 206, 240, 124, 0, 0, 0, 0, 4, 15, 204, 57, 0, 0, 0, 0, 0, 4, 192, 14, 0, 0, 0, 0, 0, 1, 69, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 4, 0, 0, 0, 0, 0, 0, 123, 0, 0, 79, 79, 0, 0, 35, 99, 0, 79, 207, 19, 0, 0, 67, 155, 115, 107, 107, 0, 0, 0, 4, 55, 12, 123, 59, 0, 0, 0, 0, 0, 0, 139, 8, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 18, 0, 97, 74, 0, 0, 0, 179, 101, 32, 207, 22, 0, 0, 20, 234, 99, 82, 212, 0, 0, 0, 50, 252, 227, 239, 237, 60, 0, 0, 26, 137, 41, 177, 159, 26, 0, 0, 0, 0, 0, 122, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0, 0, 0, 0, 0, 0, 25, 126, 103, 33, 0, 0, 0, 0, 59, 123, 129, 3, 0, 0, 0, 0, 74, 140, 185, 99, 28, 0, 0, 0, 18, 139, 155, 37, 0, 0, 0, 0, 0, 93, 28, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 21, 0, 0, 0, 0, 77, 151, 16, 180, 16, 0, 0, 0, 175, 132, 108, 204, 0, 0, 0, 0, 83, 180, 246, 150, 0, 0, 0, 0, 0, 52, 169, 11, 0, 0, 0, 0, 0, 130, 72, 0, 0, 0, 0, 0, 0, 72, 21, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 69, 0, 0, 0, 0, 133, 6, 150, 84, 0, 0, 0, 9, 200, 17, 189, 137, 12, 0, 0, 19, 228, 237, 252, 167, 9, 0, 0, 0, 42, 58, 251, 68, 0, 0, 0, 0, 0, 0, 132, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 70, 0, 0, 0, 0, 0, 0, 0, 108, 0, 0, 30, 0, 0, 0, 15, 88, 0, 0, 123, 0, 0, 0, 29, 160, 126, 123, 194, 15, 0, 0, 0, 6, 0, 0, 93, 49, 0, 0, 0, 0, 0, 0, 8, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 19, 2, 133, 86, 0, 0, 0, 0, 212, 51, 176, 131, 0, 0, 0, 14, 207, 25, 169, 131, 0, 0, 0, 82, 133, 5, 171, 196, 140, 22, 0, 97, 196, 169, 228, 167, 72, 12, 0, 0, 0, 0, 30, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 70, 1, 57, 63, 0, 0, 0, 19, 192, 8, 89, 198, 0, 0, 0, 5, 195, 17, 42, 214, 0, 0, 0, 59, 243, 200, 181, 235, 11, 0, 0, 102, 153, 40, 4, 175, 28, 0, 0, 0, 0, 0, 0, 114, 85, 0, 0, 0, 0, 0, 0, 21, 23, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 31, 42, 0, 0, 0, 0, 9, 142, 24, 161, 0, 0, 0, 0, 89, 149, 58, 173, 0, 0, 0, 0, 202, 210, 220, 133, 0, 0, 0, 0, 58, 84, 202, 22, 0, 0, 0, 0, 0, 101, 81, 0, 0, 0, 0, 0, 0, 33, 5, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 22, 1, 0, 0, 0, 0, 0, 98, 93, 27, 0, 0, 0, 0, 20, 111, 97, 34, 0, 0, 0, 0, 37, 125, 160, 31, 0, 0, 0, 0, 0, 0, 106, 22, 0, 0, 0, 0, 0, 0, 104, 14, 0, 0, 0, 0, 0, 0, 49, 3, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 34, 0, 0, 0, 0, 102, 101, 27, 135, 0, 0, 0, 0, 128, 4, 64, 129, 0, 0, 0, 0, 155, 115, 184, 85, 0, 0, 0, 0, 49, 68, 144, 54, 0, 0, 0, 0, 0, 0, 153, 34, 0, 0, 0, 0, 0, 0, 70, 4, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 128, 0, 0, 0, 0, 73, 36, 111, 169, 0, 0, 0, 14, 198, 56, 150, 124, 0, 0, 0, 84, 243, 184, 225, 165, 0, 0, 0, 9, 71, 93, 249, 92, 0, 0, 0, 0, 0, 0, 165, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 65, 0, 0, 0, 32, 188, 17, 111, 88, 0, 0, 2, 166, 210, 68, 202, 43, 2, 0, 84, 246, 217, 244, 171, 103, 17, 0, 38, 71, 54, 218, 38, 0, 0, 0, 0, 0, 102, 141, 0, 0, 0, 0, 0, 0, 26, 27, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 16, 0, 0, 0, 0, 0, 0, 144, 72, 117, 10, 0, 0, 0, 0, 120, 160, 199, 69, 0, 0, 0, 0, 21, 89, 182, 118, 0, 0, 0, 0, 0, 0, 96, 123, 0, 0, 0, 0, 0, 0, 49, 159, 0, 0, 0, 0, 0, 0, 10, 36, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 57, 16, 0, 0, 0, 27, 164, 0, 144, 24, 0, 0, 0, 82, 164, 23, 172, 1, 0, 0, 0, 131, 178, 221, 118, 0, 0, 0, 0, 10, 13, 174, 20, 0, 0, 0, 0, 0, 103, 69, 0, 0, 0, 0, 0, 0, 38, 4, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 27, 0, 0, 0, 115, 67, 25, 188, 22, 0, 0, 8, 209, 61, 94, 182, 0, 0, 0, 82, 229, 136, 200, 102, 0, 0, 0, 18, 70, 70, 220, 46, 0, 0, 0, 0, 0, 13, 169, 12, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 41, 0, 2, 26, 0, 0, 0, 41, 197, 0, 94, 77, 0, 0, 0, 118, 155, 0, 151, 19, 0, 0, 0, 221, 177, 190, 200, 0, 0, 0, 0, 48, 5, 149, 125, 0, 0, 0, 0, 0, 23, 165, 11, 0, 0, 0, 0, 0, 34, 53, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 9, 0, 0, 102, 116, 0, 39, 148, 15, 0, 15, 195, 52, 8, 151, 42, 0, 0, 100, 213, 152, 185, 193, 2, 0, 0, 23, 46, 54, 181, 57, 1, 0, 0, 0, 0, 76, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 14, 0, 28, 4, 0, 0, 0, 58, 124, 5, 143, 1, 0, 0, 0, 136, 107, 41, 153, 0, 0, 0, 0, 65, 103, 195, 102, 0, 0, 0, 0, 0, 0, 145, 29, 0, 0, 0, 0, 0, 0, 130, 0, 0, 0, 0, 0, 0, 0, 55, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 86, 0, 4, 50, 0, 0, 0, 60, 156, 0, 66, 81, 0, 0, 3, 169, 70, 0, 119, 23, 0, 0, 89, 115, 66, 111, 151, 0, 0, 0, 49, 128, 113, 134, 108, 0, 0, 0, 0, 0, 0, 106, 28, 0, 0, 0, 0, 0, 0, 21, 2, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 8, 41, 0, 0, 0, 3, 119, 76, 152, 69, 0, 0, 0, 104, 174, 82, 172, 0, 0, 0, 48, 245, 163, 202, 60, 0, 0, 0, 19, 73, 151, 141, 17, 0, 0, 0, 0, 0, 160, 16, 0, 0, 0, 0, 0, 2, 87, 1, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 26, 0, 44, 0, 0, 0, 0, 122, 27, 33, 82, 0, 0, 0, 0, 124, 0, 83, 97, 0, 0, 0, 0, 79, 98, 137, 104, 0, 0, 0, 0, 0, 0, 76, 103, 0, 0, 0, 0, 0, 0, 31, 141, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 19, 0, 57, 4, 0, 0, 0, 150, 68, 17, 151, 0, 0, 0, 10, 188, 32, 77, 149, 0, 0, 0, 16, 129, 170, 221, 112, 0, 0, 0, 0, 0, 5, 185, 37, 0, 0, 0, 0, 0, 0, 134, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 9, 12, 0, 0, 0, 7, 165, 59, 119, 1, 0, 0, 0, 78, 196, 120, 149, 0, 0, 0, 0, 90, 156, 219, 159, 0, 0, 0, 0, 0, 0, 178, 43, 0, 0, 0, 0, 0, 21, 132, 0, 0, 0, 0, 0, 0, 11, 48, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 65, 0, 0, 0, 0, 83, 100, 54, 153, 0, 0, 0, 1, 168, 30, 45, 147, 0, 0, 0, 29, 144, 107, 136, 147, 0, 0, 0, 0, 0, 0, 105, 131, 0, 0, 0, 0, 0, 0, 143, 92, 0, 0, 0, 0, 0, 0, 26, 20, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 94, 0, 0, 0, 0, 0, 0, 28, 146, 0, 55, 180, 0, 0, 0, 21, 183, 16, 75, 226, 0, 0, 0, 0, 148, 200, 182, 210, 0, 0, 0, 0, 3, 39, 114, 194, 0, 0, 0, 0, 0, 0, 0, 109, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 49, 27, 0, 0, 0, 0, 82, 98, 143, 52, 0, 0, 0, 0, 145, 106, 142, 25, 0, 0, 0, 0, 53, 123, 210, 143, 12, 0, 0, 0, 0, 21, 122, 0, 0, 0, 0, 0, 0, 48, 78, 0, 0, 0, 0, 0, 0, 5, 9, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 40, 0, 0, 0, 0, 38, 115, 178, 48, 0, 0, 0, 0, 141, 44, 143, 8, 0, 0, 0, 0, 120, 149, 188, 124, 45, 0, 0, 0, 0, 106, 57, 7, 0, 0, 0, 0, 0, 129, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 42, 132, 43, 133, 0, 0, 0, 0, 106, 120, 122, 119, 1, 0, 0, 0, 128, 158, 199, 87, 0, 0, 0, 0, 9, 50, 155, 51, 0, 0, 0, 0, 0, 67, 58, 0, 0, 0, 0, 0, 0, 34, 27, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 47, 0, 0, 0, 0, 0, 0, 55, 45, 0, 0, 0, 0, 0, 0, 100, 5, 0, 0, 0, 0, 0, 13, 119, 130, 44, 0, 0, 0, 0, 1, 106, 128, 17, 0, 0, 0, 0, 0, 0, 50, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 28, 0, 0, 0, 0, 79, 97, 72, 131, 0, 0, 0, 0, 110, 52, 142, 87, 0, 0, 0, 0, 139, 151, 173, 18, 0, 0, 0, 0, 44, 41, 114, 1, 0, 0, 0, 0, 0, 12, 127, 0, 0, 0, 0, 0, 0, 12, 45, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 16, 0, 0, 0, 3, 100, 11, 145, 0, 0, 0, 0, 53, 134, 75, 128, 0, 0, 0, 1, 173, 148, 179, 49, 0, 0, 0, 20, 131, 56, 153, 5, 0, 0, 0, 0, 0, 40, 93, 0, 0, 0, 0, 0, 0, 12, 15, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 14, 15, 0, 0, 0, 40, 172, 21, 155, 18, 0, 0, 0, 120, 137, 100, 124, 0, 0, 0, 0, 207, 188, 215, 113, 0, 0, 0, 0, 44, 48, 166, 17, 0, 0, 0, 0, 0, 0, 152, 27, 0, 0, 0, 0, 0, 0, 61, 14, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 24, 0, 0, 0, 0, 0, 0, 139, 48, 0, 19, 60, 0, 0, 13, 135, 6, 0, 66, 129, 0, 0, 118, 69, 55, 101, 168, 66, 0, 0, 65, 127, 126, 84, 134, 27, 0, 0, 0, 0, 0, 0, 56, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 40, 0, 0, 0, 7, 174, 26, 104, 160, 0, 0, 0, 49, 159, 3, 125, 153, 0, 0, 0, 9, 119, 113, 204, 121, 0, 0, 0, 0, 0, 0, 164, 102, 0, 0, 0, 0, 0, 0, 200, 92, 0, 0, 0, 0, 0, 0, 84, 28, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 25, 2, 22, 0, 0, 0, 0, 145, 52, 106, 91, 0, 0, 0, 0, 119, 65, 125, 77, 0, 0, 0, 0, 20, 145, 147, 72, 0, 0, 0, 0, 0, 50, 188, 30, 0, 0, 0, 0, 0, 15, 117, 0, 0, 0, 0, 0, 0, 12, 37, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 34, 0, 0, 25, 13, 0, 0, 53, 210, 21, 22, 198, 95, 0, 0, 98, 222, 116, 184, 250, 68, 0, 0, 73, 212, 177, 222, 222, 7, 0, 0, 0, 24, 1, 207, 176, 0, 0, 0, 0, 0, 0, 193, 127, 0, 0, 0, 0, 0, 0, 37, 25, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 60, 0, 8, 70, 0, 0, 0, 15, 119, 0, 45, 143, 0, 0, 0, 7, 144, 5, 44, 156, 0, 0, 0, 38, 209, 168, 178, 201, 0, 0, 0, 12, 32, 3, 36, 191, 0, 0, 0, 0, 0, 0, 13, 177, 5, 0, 0, 0, 0, 0, 0, 34, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 6, 22, 20, 0, 0, 0, 0, 142, 96, 143, 139, 0, 0, 0, 0, 120, 155, 178, 114, 0, 0, 0, 0, 22, 143, 246, 70, 0, 0, 0, 0, 0, 13, 211, 30, 0, 0, 0, 0, 0, 61, 155, 0, 0, 0, 0, 0, 0, 14, 63, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 11, 8, 0, 0, 0, 0, 6, 159, 30, 153, 0, 0, 0, 0, 77, 201, 119, 116, 0, 0, 0, 0, 43, 99, 216, 65, 0, 0, 0, 0, 0, 18, 149, 2, 0, 0, 0, 0, 0, 89, 70, 0, 0, 0, 0, 0, 0, 24, 13, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 16, 17, 0, 0, 0, 31, 150, 0, 129, 21, 0, 0, 0, 109, 138, 21, 159, 0, 0, 0, 0, 202, 182, 179, 148, 0, 0, 0, 0, 32, 33, 166, 89, 0, 0, 0, 0, 0, 0, 144, 29, 0, 0, 0, 0, 0, 0, 69, 14, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 58, 18, 0, 14, 13, 0, 0, 151, 45, 0, 34, 174, 34, 0, 23, 150, 2, 58, 160, 43, 0, 0, 24, 180, 133, 210, 92, 0, 0, 0, 0, 11, 44, 163, 20, 0, 0, 0, 0, 0, 160, 142, 12, 0, 0, 0, 0, 0, 36, 9, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 4, 60, 0, 0, 0, 0, 50, 153, 98, 87, 0, 0, 0, 0, 92, 146, 162, 36, 0, 0, 0, 0, 31, 167, 198, 76, 0, 0, 0, 0, 0, 39, 122, 0, 0, 0, 0, 0, 0, 48, 159, 12, 0, 0, 0, 0, 0, 6, 32, 1, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 116, 75, 26, 167, 9, 0, 0, 0, 163, 28, 72, 153, 0, 0, 0, 10, 201, 141, 196, 91, 0, 0, 0, 0, 26, 17, 168, 17, 0, 0, 0, 0, 0, 18, 132, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 1, 0, 0, 0, 0, 0, 24, 188, 6, 63, 1, 0, 0, 0, 114, 140, 37, 120, 0, 0, 0, 0, 114, 185, 186, 93, 0, 0, 0, 0, 1, 18, 158, 40, 0, 0, 0, 0, 0, 14, 110, 0, 0, 0, 0, 0, 0, 16, 43, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 46, 0, 0, 0, 0, 22, 12, 166, 79, 0, 0, 0, 0, 129, 83, 214, 70, 0, 0, 0, 0, 158, 156, 208, 46, 0, 0, 0, 0, 18, 16, 198, 31, 0, 0, 0, 0, 0, 14, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 43, 0, 0, 0, 0, 10, 101, 217, 90, 0, 0, 0, 1, 153, 162, 164, 95, 0, 0, 0, 20, 196, 158, 176, 131, 0, 0, 0, 0, 10, 2, 153, 136, 0, 0, 0, 0, 0, 0, 82, 155, 0, 0, 0, 0, 0, 0, 13, 32, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 5, 0, 71, 10, 0, 0, 3, 124, 43, 50, 119, 0, 0, 0, 92, 169, 30, 162, 24, 0, 0, 1, 180, 163, 223, 113, 0, 0, 0, 0, 12, 53, 156, 15, 0, 0, 0, 0, 21, 187, 15, 0, 0, 0, 0, 0, 7, 40, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 0, 0, 0, 0, 0, 0, 0, 145, 0, 23, 71, 0, 0, 0, 0, 132, 0, 120, 179, 0, 0, 0, 0, 124, 160, 103, 93, 20, 0, 0, 0, 17, 60, 3, 77, 61, 0, 0, 0, 0, 0, 0, 3, 114, 12, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 3, 0, 29, 6, 0, 0, 66, 162, 2, 77, 117, 1, 0, 1, 195, 143, 87, 187, 23, 0, 0, 4, 155, 121, 218, 116, 0, 0, 0, 0, 0, 64, 175, 18, 0, 0, 0, 0, 78, 196, 18, 0, 0, 0, 0, 0, 62, 63, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 17, 0, 39, 45, 0, 0, 0, 72, 55, 0, 83, 84, 0, 0, 0, 65, 65, 0, 83, 97, 0, 0, 0, 0, 134, 76, 142, 133, 0, 0, 0, 0, 31, 106, 155, 108, 0, 0, 0, 0, 0, 0, 51, 144, 0, 0, 0, 0, 0, 0, 7, 23, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 0, 0, 0, 73, 60, 48, 125, 0, 0, 0, 0, 101, 45, 105, 82, 0, 0, 0, 0, 17, 89, 184, 50, 0, 0, 0, 0, 0, 37, 94, 0, 0, 0, 0, 0, 0, 115, 5, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 74, 0, 0, 0, 0, 0, 15, 215, 150, 0, 0, 0, 0, 10, 134, 138, 141, 0, 0, 0, 1, 149, 144, 109, 166, 0, 0, 0, 26, 211, 142, 86, 141, 0, 0, 0, 0, 0, 0, 0, 95, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 11, 15, 0, 0, 0, 93, 73, 44, 142, 16, 0, 0, 87, 205, 120, 186, 42, 0, 0, 20, 182, 115, 171, 131, 0, 0, 0, 0, 5, 43, 173, 26, 0, 0, 0, 0, 63, 173, 20, 0, 0, 0, 0, 0, 34, 34, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 65, 0, 0, 0, 0, 0, 0, 112, 129, 0, 83, 86, 0, 0, 0, 161, 40, 68, 195, 21, 0, 0, 0, 165, 170, 216, 115, 0, 0, 0, 0, 13, 21, 173, 41, 0, 0, 0, 0, 0, 31, 170, 9, 0, 0, 0, 0, 0, 1, 23, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 32, 0, 0, 0, 35, 120, 0, 22, 147, 0, 0, 0, 129, 206, 165, 157, 181, 0, 0, 28, 154, 107, 83, 169, 240, 64, 0, 0, 0, 0, 0, 98, 185, 1, 0, 0, 0, 0, 0, 66, 192, 17, 0, 0, 0, 0, 0, 2, 15, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 17, 24, 0, 0, 0, 0, 78, 0, 8, 70, 0, 0, 0, 0, 82, 0, 0, 72, 0, 0, 0, 0, 87, 67, 58, 95, 0, 0, 0, 0, 4, 0, 0, 89, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 45, 0, 0, 1, 2, 122, 26, 146, 19, 0, 0, 0, 74, 142, 91, 144, 0, 0, 0, 0, 191, 189, 184, 44, 0, 0, 0, 0, 36, 139, 73, 0, 0, 0, 0, 0, 65, 157, 0, 0, 0, 0, 0, 0, 19, 30, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 54, 2, 45, 0, 0, 0, 7, 122, 83, 114, 53, 0, 0, 0, 106, 209, 153, 157, 0, 0, 0, 20, 173, 117, 187, 24, 0, 0, 0, 0, 1, 103, 105, 0, 0, 0, 0, 0, 46, 175, 5, 0, 0, 0, 0, 0, 16, 32, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 8, 0, 0, 0, 1, 98, 93, 74, 94, 0, 0, 0, 81, 203, 109, 178, 5, 0, 0, 0, 102, 109, 203, 57, 0, 0, 0, 0, 0, 81, 143, 2, 0, 0, 0, 0, 51, 168, 15, 0, 0, 0, 0, 0, 60, 60, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 72, 87, 79, 79, 0, 0, 0, 40, 201, 108, 161, 5, 0, 0, 0, 34, 126, 190, 32, 0, 0, 0, 0, 4, 154, 68, 0, 0, 0, 0, 0, 117, 117, 0, 0, 0, 0, 0, 0, 70, 10, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 28, 2, 0, 0, 2, 124, 34, 94, 82, 1, 0, 0, 101, 179, 85, 193, 2, 0, 0, 0, 121, 148, 239, 79, 0, 0, 0, 0, 0, 55, 143, 3, 0, 0, 0, 0, 29, 172, 12, 0, 0, 0, 0, 0, 36, 75, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 50, 0, 1, 0, 0, 0, 0, 122, 79, 0, 141, 0, 0, 0, 0, 147, 6, 23, 173, 0, 0, 0, 0, 92, 117, 153, 135, 0, 0, 0, 0, 0, 7, 133, 74, 0, 0, 0, 0, 0, 0, 127, 34, 0, 0, 0, 0, 0, 0, 16, 1, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 6, 8, 24, 0, 0, 0, 0, 110, 8, 74, 97, 0, 0, 0, 0, 107, 0, 110, 147, 0, 0, 0, 0, 122, 127, 172, 82, 0, 0, 0, 0, 0, 0, 119, 37, 0, 0, 0, 0, 0, 0, 125, 11, 0, 0, 0, 0, 0, 0, 46, 1, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 36, 0, 0, 0, 0, 0, 49, 191, 192, 40, 0, 0, 0, 31, 185, 102, 177, 103, 0, 0, 0, 141, 220, 208, 234, 225, 93, 0, 0, 8, 33, 34, 183, 130, 9, 0, 0, 0, 0, 0, 71, 150, 17, 0, 0, 0, 0, 0, 0, 3, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 27, 54, 0, 0, 0, 7, 152, 11, 157, 25, 0, 0, 0, 107, 193, 135, 172, 0, 0, 0, 7, 234, 169, 217, 51, 0, 0, 0, 4, 71, 98, 124, 0, 0, 0, 0, 0, 7, 166, 15, 0, 0, 0, 0, 0, 1, 30, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 44, 2, 2, 4, 0, 0, 26, 151, 126, 25, 176, 79, 0, 5, 186, 205, 99, 175, 104, 3, 0, 29, 224, 252, 221, 81, 0, 0, 0, 0, 133, 236, 64, 1, 0, 0, 0, 0, 135, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 28, 0, 0, 0, 6, 138, 16, 88, 66, 0, 0, 0, 82, 141, 39, 158, 4, 0, 0, 0, 99, 156, 217, 72, 0, 0, 0, 0, 0, 46, 131, 2, 0, 0, 0, 0, 31, 166, 9, 0, 0, 0, 0, 0, 38, 69, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 41, 159, 147, 43, 0, 0, 0, 7, 173, 82, 108, 109, 0, 0, 0, 16, 164, 165, 217, 177, 142, 46, 0, 0, 10, 47, 199, 63, 0, 0, 0, 0, 0, 0, 133, 6, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 29, 0, 0, 0, 0, 0, 0, 9, 165, 13, 125, 58, 0, 0, 0, 0, 143, 74, 134, 95, 0, 0, 0, 0, 149, 180, 189, 145, 0, 0, 0, 0, 23, 8, 34, 155, 0, 0, 0, 0, 0, 0, 0, 65, 91, 0, 0, 0, 0, 0, 0, 2, 60, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 27, 0, 0, 0, 6, 135, 19, 177, 180, 0, 0, 0, 0, 189, 123, 238, 106, 0, 0, 0, 0, 29, 177, 242, 64, 0, 0, 0, 0, 0, 75, 199, 9, 0, 0, 0, 0, 0, 64, 184, 1, 0, 0, 0, 0, 0, 9, 82, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 14, 28, 9, 0, 0, 0, 0, 81, 117, 160, 68, 0, 0, 0, 0, 75, 132, 190, 54, 0, 0, 0, 0, 2, 85, 153, 0, 0, 0, 0, 0, 0, 39, 119, 0, 0, 0, 0, 0, 0, 81, 94, 0, 0, 0, 0, 0, 0, 40, 39, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 115, 0, 0, 14, 30, 0, 0, 62, 159, 0, 0, 107, 56, 0, 4, 54, 172, 0, 0, 69, 143, 130, 132, 157, 176, 0, 0, 0, 0, 0, 0, 39, 169, 0, 0, 0, 0, 0, 0, 0, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 3, 0, 0, 0, 0, 84, 173, 13, 156, 19, 0, 0, 2, 207, 106, 109, 168, 0, 0, 0, 8, 184, 185, 242, 77, 0, 0, 0, 0, 6, 21, 231, 43, 0, 0, 0, 0, 0, 71, 168, 12, 0, 0, 0, 0, 0, 28, 44, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 112, 0, 0, 0, 0, 14, 3, 70, 156, 0, 0, 0, 0, 136, 10, 117, 112, 0, 0, 0, 62, 191, 151, 221, 153, 17, 0, 0, 15, 57, 63, 199, 91, 26, 0, 0, 0, 0, 15, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 37, 19, 0, 0, 0, 0, 20, 194, 130, 140, 0, 0, 0, 0, 89, 183, 170, 141, 1, 0, 0, 0, 148, 190, 224, 131, 2, 0, 0, 0, 45, 197, 120, 2, 0, 0, 0, 0, 2, 165, 14, 0, 0, 0, 0, 0, 0, 30, 2, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 22, 9, 0, 0, 0, 0, 0, 5, 138, 12, 0, 0, 0, 62, 67, 70, 157, 0, 0, 0, 3, 166, 50, 124, 114, 0, 0, 0, 68, 200, 146, 220, 146, 1, 0, 0, 17, 63, 107, 165, 52, 0, 0, 0, 0, 0, 53, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 1, 43, 57, 0, 0, 0, 0, 71, 28, 81, 90, 0, 0, 0, 0, 65, 32, 88, 90, 0, 0, 0, 0, 107, 184, 187, 133, 0, 0, 0, 0, 70, 75, 80, 99, 0, 0, 0, 0, 0, 0, 38, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 16, 0, 0, 39, 8, 0, 27, 167, 47, 0, 35, 135, 0, 0, 99, 75, 0, 0, 131, 67, 0, 0, 63, 167, 75, 111, 175, 0, 0, 0, 0, 91, 127, 211, 87, 0, 0, 0, 0, 0, 0, 159, 8, 0, 0, 0, 0, 0, 0, 67, 12, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 3, 95, 0, 0, 0, 0, 34, 149, 92, 140, 0, 0, 0, 0, 138, 114, 173, 60, 0, 0, 0, 0, 156, 188, 212, 113, 0, 0, 0, 0, 1, 136, 64, 16, 0, 0, 0, 0, 0, 110, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 3, 94, 7, 0, 0, 0, 29, 186, 23, 142, 17, 0, 0, 0, 127, 139, 1, 166, 6, 0, 0, 54, 236, 189, 202, 225, 45, 0, 0, 31, 65, 42, 172, 114, 9, 0, 0, 0, 0, 13, 140, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 29, 6, 75, 0, 0, 0, 0, 104, 122, 71, 146, 0, 0, 0, 0, 154, 36, 132, 104, 0, 0, 0, 0, 147, 187, 229, 177, 52, 0, 0, 0, 4, 66, 177, 40, 3, 0, 0, 0, 0, 99, 97, 0, 0, 0, 0, 0, 0, 27, 13, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 69, 0, 0, 0, 0, 0, 99, 59, 119, 0, 0, 0, 0, 69, 122, 81, 104, 0, 0, 0, 0, 185, 128, 186, 126, 0, 0, 0, 0, 58, 32, 130, 0, 0, 0, 0, 0, 0, 32, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 2, 0, 113, 0, 0, 0, 0, 0, 98, 69, 156, 0, 0, 0, 0, 11, 149, 111, 129, 0, 0, 0, 1, 158, 134, 199, 147, 12, 0, 0, 36, 193, 176, 170, 90, 9, 0, 0, 0, 0, 61, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 2, 60, 0, 0, 0, 0, 0, 98, 15, 91, 0, 0, 0, 0, 59, 111, 74, 72, 0, 0, 0, 2, 150, 117, 155, 49, 0, 0, 0, 1, 18, 8, 154, 51, 0, 0, 0, 0, 0, 0, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 62, 0, 0, 19, 85, 0, 0, 32, 205, 17, 0, 102, 105, 0, 0, 76, 160, 3, 1, 138, 83, 0, 0, 117, 216, 191, 198, 211, 49, 0, 0, 72, 182, 145, 57, 103, 44, 0, 0, 0, 0, 0, 0, 47, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 8, 0, 0, 4, 0, 0, 0, 95, 91, 0, 0, 99, 71, 0, 0, 95, 115, 0, 0, 135, 55, 0, 0, 19, 211, 199, 179, 231, 20, 0, 0, 0, 43, 91, 83, 183, 0, 0, 0, 0, 0, 0, 0, 143, 0, 0, 0, 0, 0, 0, 0, 55, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 2, 48, 0, 0, 0, 0, 32, 153, 39, 125, 0, 0, 0, 0, 124, 104, 77, 131, 0, 0, 0, 0, 96, 144, 178, 105, 0, 0, 0, 0, 0, 0, 136, 72, 0, 0, 0, 0, 0, 0, 145, 45, 0, 0, 0, 0, 0, 0, 25, 2, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 59, 0, 23, 0, 0, 0, 0, 151, 99, 27, 131, 0, 0, 0, 0, 167, 31, 71, 103, 0, 0, 0, 0, 111, 203, 211, 103, 0, 0, 0, 0, 0, 27, 163, 67, 0, 0, 0, 0, 0, 0, 115, 63, 0, 0, 0, 0, 0, 0, 19, 19, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 33, 0, 0, 0, 0, 0, 79, 129, 63, 0, 0, 0, 0, 70, 150, 102, 76, 0, 0, 9, 129, 145, 140, 164, 108, 0, 0, 0, 0, 0, 8, 136, 138, 0, 0, 0, 0, 0, 0, 46, 134, 0, 0, 0, 0, 0, 0, 3, 31, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 44, 0, 0, 0, 2, 0, 0, 184, 122, 0, 0, 7, 154, 0, 0, 171, 102, 3, 0, 62, 150, 0, 0, 43, 227, 202, 143, 196, 65, 0, 0, 0, 52, 107, 149, 232, 36, 0, 0, 0, 0, 0, 11, 161, 6, 0, 0, 0, 0, 0, 0, 14, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 28, 0, 0, 54, 22, 0, 21, 169, 41, 0, 24, 177, 31, 5, 134, 63, 0, 0, 47, 214, 174, 187, 130, 0, 0, 0, 1, 48, 134, 163, 22, 0, 0, 0, 0, 0, 75, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 22, 0, 0, 0, 0, 0, 3, 121, 2, 0, 0, 0, 0, 0, 48, 123, 18, 36, 0, 0, 0, 0, 39, 169, 171, 114, 0, 0, 0, 0, 0, 23, 152, 61, 0, 0, 0, 0, 0, 0, 106, 14, 0, 0, 0, 0, 0, 0, 20, 1, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 19, 0, 23, 31, 0, 0, 75, 207, 59, 27, 183, 55, 0, 4, 175, 71, 11, 167, 83, 0, 0, 39, 183, 71, 151, 203, 0, 0, 0, 16, 175, 235, 239, 123, 0, 0, 0, 0, 0, 16, 83, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 40, 16, 0, 0, 0, 0, 160, 31, 125, 114, 0, 0, 0, 0, 171, 66, 186, 165, 0, 0, 0, 0, 194, 198, 148, 115, 0, 0, 0, 0, 36, 18, 95, 126, 0, 0, 0, 0, 0, 0, 67, 130, 0, 0, 0, 0, 0, 0, 14, 30, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 55, 0, 2, 8, 0, 0, 0, 120, 103, 0, 70, 85, 0, 0, 3, 184, 35, 8, 158, 20, 0, 0, 0, 130, 176, 220, 173, 28, 0, 0, 0, 0, 5, 177, 47, 0, 0, 0, 0, 0, 57, 97, 0, 0, 0, 0, 0, 0, 11, 17, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 21, 0, 0, 21, 8, 0, 41, 203, 45, 0, 29, 193, 32, 0, 118, 103, 0, 0, 121, 125, 0, 0, 86, 215, 194, 193, 196, 8, 0, 0, 3, 56, 85, 205, 139, 0, 0, 0, 0, 0, 0, 173, 59, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 19, 0, 0, 3, 83, 5, 1, 132, 59, 0, 0, 43, 203, 76, 60, 209, 12, 0, 0, 5, 112, 96, 225, 139, 0, 0, 0, 0, 0, 2, 199, 53, 0, 0, 0, 0, 0, 38, 138, 0, 0, 0, 0, 0, 0, 0, 55, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 12, 0, 17, 11, 0, 0, 3, 191, 19, 15, 158, 32, 0, 0, 44, 180, 20, 55, 162, 0, 0, 0, 6, 180, 182, 209, 122, 0, 0, 0, 0, 23, 75, 223, 86, 0, 0, 0, 0, 0, 0, 125, 63, 0, 0, 0, 0, 0, 0, 43, 44, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 42, 131, 30, 134, 0, 0, 0, 0, 128, 73, 84, 115, 0, 0, 0, 0, 87, 97, 168, 53, 0, 0, 0, 0, 0, 0, 130, 43, 0, 0, 0, 0, 0, 0, 111, 17, 0, 0, 0, 0, 0, 0, 49, 10, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 15, 0, 0, 0, 0, 0, 0, 211, 63, 55, 199, 59, 0, 0, 0, 219, 207, 239, 223, 19, 0, 0, 0, 24, 32, 223, 87, 0, 0, 0, 0, 0, 55, 215, 23, 0, 0, 0, 0, 0, 103, 159, 8, 0, 0, 0, 0, 0, 15, 19, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 77, 0, 0, 76, 28, 0, 0, 134, 194, 0, 41, 230, 56, 0, 16, 233, 120, 30, 174, 152, 10, 0, 28, 214, 67, 191, 198, 12, 0, 0, 13, 177, 216, 209, 43, 0, 0, 0, 0, 0, 129, 68, 0, 0, 0, 0, 0, 0, 21, 10, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 4, 0, 0, 0, 0, 0, 6, 141, 1, 25, 84, 0, 0, 0, 51, 181, 107, 95, 136, 0, 0, 0, 1, 34, 48, 163, 122, 0, 0, 0, 0, 0, 0, 94, 120, 0, 0, 0, 0, 0, 0, 86, 147, 0, 0, 0, 0, 0, 0, 18, 30, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 33, 0, 0, 0, 0, 0, 0, 67, 55, 89, 0, 0, 0, 0, 1, 94, 30, 147, 27, 0, 0, 10, 127, 166, 157, 81, 33, 0, 0, 94, 82, 11, 73, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 20, 0, 0, 43, 0, 0, 70, 228, 62, 0, 82, 154, 3, 0, 126, 165, 19, 30, 204, 37, 0, 0, 35, 223, 243, 237, 236, 123, 4, 0, 0, 43, 131, 233, 88, 17, 0, 0, 0, 0, 59, 93, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 64, 0, 0, 0, 0, 0, 22, 162, 29, 27, 27, 0, 0, 0, 109, 176, 13, 144, 30, 0, 0, 0, 91, 221, 223, 147, 0, 34, 0, 0, 6, 106, 179, 31, 0, 20, 0, 0, 3, 128, 4, 0, 0, 0, 0, 0, 2, 26, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 13, 0, 0, 0, 0, 0, 0, 127, 35, 37, 88, 0, 0, 0, 0, 127, 59, 92, 91, 0, 0, 0, 0, 22, 108, 180, 41, 0, 0, 0, 0, 0, 0, 144, 13, 0, 0, 0, 0, 0, 0, 98, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 28, 71, 21, 0, 0, 0, 0, 90, 9, 84, 50, 15, 0, 0, 0, 20, 68, 122, 36, 1, 0, 0, 0, 0, 0, 83, 0, 0, 0, 0, 0, 0, 0, 73, 0, 0, 0, 0, 0, 0, 0, 53, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 38, 0, 0, 0, 0, 0, 0, 162, 25, 5, 55, 0, 0, 0, 0, 138, 0, 44, 138, 0, 0, 0, 0, 78, 105, 168, 113, 0, 0, 0, 0, 1, 60, 93, 96, 0, 0, 0, 0, 0, 0, 38, 119, 0, 0, 0, 0, 0, 0, 1, 29, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 15, 0, 53, 0, 0, 0, 0, 76, 126, 26, 162, 0, 0, 0, 1, 165, 42, 105, 134, 5, 0, 0, 16, 161, 150, 210, 121, 55, 0, 0, 0, 0, 93, 90, 0, 0, 0, 0, 0, 33, 167, 0, 0, 0, 0, 0, 0, 12, 35, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 0, 0, 0, 57, 103, 0, 11, 198, 12, 0, 0, 41, 163, 0, 36, 219, 19, 0, 0, 50, 225, 188, 233, 242, 18, 0, 0, 2, 111, 117, 122, 209, 0, 0, 0, 0, 0, 0, 47, 169, 0, 0, 0, 0, 0, 0, 2, 31, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 82, 0, 0, 0, 3, 128, 3, 104, 56, 0, 0, 0, 100, 127, 52, 189, 30, 0, 0, 19, 197, 156, 196, 97, 18, 0, 0, 5, 25, 97, 80, 0, 0, 0, 0, 0, 11, 131, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 25, 0, 0, 64, 2, 0, 0, 49, 141, 0, 75, 85, 0, 0, 2, 153, 59, 42, 179, 46, 0, 0, 51, 161, 136, 223, 105, 29, 0, 0, 0, 0, 79, 108, 0, 0, 0, 0, 0, 59, 202, 2, 0, 0, 0, 0, 0, 24, 43, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 92, 34, 50, 0, 0, 0, 0, 32, 148, 98, 95, 0, 0, 0, 0, 84, 130, 121, 73, 0, 0, 0, 0, 145, 131, 192, 145, 3, 0, 0, 0, 95, 153, 193, 119, 3, 0, 0, 0, 0, 0, 77, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 50, 0, 0, 0, 0, 101, 19, 115, 19, 0, 0, 0, 60, 126, 31, 131, 0, 0, 0, 10, 197, 135, 191, 110, 15, 0, 0, 4, 34, 74, 76, 0, 0, 0, 0, 0, 37, 135, 0, 0, 0, 0, 0, 0, 14, 25, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 59, 23, 43, 0, 0, 0, 0, 79, 143, 87, 111, 0, 0, 0, 0, 79, 143, 127, 95, 0, 0, 0, 0, 95, 179, 211, 95, 0, 0, 0, 0, 27, 79, 135, 111, 0, 0, 0, 0, 0, 0, 47, 131, 0, 0, 0, 0, 0, 0, 4, 23, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 12, 0, 0, 2, 139, 27, 21, 165, 22, 0, 0, 81, 129, 5, 134, 37, 0, 0, 17, 208, 137, 193, 160, 6, 0, 0, 12, 61, 88, 119, 5, 0, 0, 0, 0, 24, 182, 6, 0, 0, 0, 0, 0, 15, 51, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 49, 96, 14, 46, 0, 0, 0, 0, 108, 116, 128, 117, 0, 0, 0, 0, 53, 123, 182, 65, 0, 0, 0, 0, 0, 0, 123, 10, 0, 0, 0, 0, 0, 1, 82, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 2, 4, 77, 5, 0, 0, 26, 156, 15, 127, 44, 0, 0, 0, 146, 81, 71, 164, 19, 0, 0, 54, 157, 152, 168, 66, 2, 0, 0, 4, 6, 132, 32, 0, 0, 0, 0, 0, 92, 140, 0, 0, 0, 0, 0, 0, 28, 21, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 143, 12, 100, 30, 0, 0, 0, 0, 108, 29, 131, 27, 0, 0, 0, 0, 23, 104, 166, 55, 0, 0, 0, 0, 0, 0, 98, 64, 0, 0, 0, 0, 0, 0, 23, 118, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 52, 0, 0, 0, 0, 0, 0, 4, 186, 49, 47, 0, 0, 0, 0, 0, 137, 142, 169, 13, 0, 0, 0, 0, 5, 89, 172, 154, 0, 0, 0, 0, 0, 0, 19, 166, 27, 0, 0, 0, 0, 0, 0, 41, 148, 7, 0, 0, 0, 0, 0, 0, 49, 6 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 5, 0, 53, 16, 0, 0, 73, 143, 0, 43, 128, 4, 0, 37, 168, 51, 54, 174, 34, 0, 0, 56, 117, 114, 196, 84, 23, 0, 0, 0, 3, 113, 71, 0, 0, 0, 0, 0, 95, 143, 0, 0, 0, 0, 0, 0, 18, 29, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 31, 0, 0, 0, 1, 108, 35, 138, 10, 0, 0, 0, 81, 182, 116, 155, 19, 0, 0, 0, 117, 99, 175, 65, 24, 0, 0, 0, 0, 97, 70, 0, 0, 0, 0, 0, 31, 155, 0, 0, 0, 0, 0, 0, 15, 37, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 34, 0, 0, 0, 0, 0, 0, 64, 72, 14, 0, 0, 0, 0, 0, 101, 104, 82, 0, 0, 0, 0, 58, 172, 166, 64, 0, 0, 0, 0, 37, 119, 188, 47, 0, 0, 0, 0, 0, 0, 91, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 38, 0, 0, 0, 0, 70, 49, 80, 105, 0, 0, 0, 0, 143, 60, 121, 84, 0, 0, 0, 17, 120, 111, 188, 63, 0, 0, 0, 0, 0, 0, 127, 25, 0, 0, 0, 0, 0, 0, 131, 43, 0, 0, 0, 0, 0, 0, 24, 8, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 3, 0, 0, 0, 18, 103, 57, 120, 0, 0, 0, 0, 100, 73, 130, 37, 0, 0, 0, 0, 68, 114, 138, 0, 0, 0, 0, 0, 0, 0, 119, 0, 0, 0, 0, 0, 0, 0, 123, 0, 0, 0, 0, 0, 0, 0, 51, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 56, 0, 0, 0, 0, 58, 74, 132, 32, 0, 0, 0, 60, 162, 89, 159, 0, 0, 0, 16, 180, 168, 213, 134, 53, 0, 0, 1, 5, 99, 86, 0, 0, 0, 0, 0, 76, 156, 0, 0, 0, 0, 0, 0, 24, 29, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 10, 0, 22, 2, 0, 0, 0, 42, 111, 0, 117, 30, 0, 0, 0, 5, 159, 21, 151, 58, 0, 0, 0, 0, 69, 158, 191, 108, 0, 0, 0, 0, 0, 0, 54, 168, 2, 0, 0, 0, 0, 0, 0, 146, 32, 0, 0, 0, 0, 0, 0, 53, 16, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 16, 26, 0, 0, 0, 0, 13, 147, 55, 155, 0, 0, 0, 0, 111, 129, 55, 173, 0, 0, 0, 0, 162, 195, 212, 136, 0, 0, 0, 0, 45, 72, 160, 53, 0, 0, 0, 0, 0, 0, 162, 31, 0, 0, 0, 0, 0, 0, 70, 8, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 66, 0, 0, 0, 1, 96, 6, 135, 19, 0, 0, 0, 98, 124, 57, 171, 0, 0, 0, 22, 159, 113, 194, 68, 0, 0, 0, 0, 0, 51, 100, 0, 0, 0, 0, 0, 0, 116, 3, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 74, 6, 0, 0, 0, 0, 0, 36, 222, 32, 46, 191, 17, 0, 0, 53, 219, 117, 192, 242, 14, 0, 0, 9, 121, 135, 215, 163, 0, 0, 0, 0, 0, 0, 218, 128, 0, 0, 0, 0, 0, 0, 220, 82, 0, 0, 0, 0, 0, 0, 34, 9, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 12, 14, 0, 0, 27, 154, 2, 41, 138, 32, 0, 8, 158, 91, 9, 152, 43, 0, 0, 32, 165, 150, 207, 164, 55, 0, 0, 0, 0, 33, 163, 20, 0, 0, 0, 0, 3, 152, 20, 0, 0, 0, 0, 0, 4, 47, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 14, 0, 0, 20, 106, 0, 34, 129, 9, 0, 8, 131, 80, 27, 154, 36, 0, 0, 74, 146, 144, 180, 78, 7, 0, 0, 0, 9, 141, 38, 0, 0, 0, 0, 0, 7, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 77, 0, 0, 0, 93, 101, 0, 71, 154, 0, 0, 0, 155, 48, 3, 100, 146, 0, 0, 0, 44, 153, 178, 208, 196, 18, 0, 0, 0, 0, 13, 146, 127, 2, 0, 0, 0, 0, 0, 54, 140, 0, 0, 0, 0, 0, 0, 1, 20, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 2, 80, 19, 0, 0, 1, 109, 48, 102, 35, 0, 0, 0, 79, 128, 38, 172, 64, 4, 0, 1, 206, 138, 188, 55, 2, 0, 0, 1, 61, 92, 71, 0, 0, 0, 0, 0, 48, 132, 0, 0, 0, 0, 0, 0, 24, 25, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 1, 15, 0, 0, 0, 0, 46, 134, 22, 100, 0, 0, 0, 0, 113, 64, 97, 94, 5, 0, 0, 0, 42, 135, 174, 70, 0, 0, 0, 0, 0, 78, 50, 0, 0, 0, 0, 0, 0, 111, 1, 0, 0, 0, 0, 0, 0, 49, 15, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 3, 0, 0, 0, 30, 89, 6, 132, 0, 0, 0, 0, 76, 81, 52, 123, 0, 0, 0, 0, 99, 123, 164, 38, 0, 0, 0, 0, 0, 1, 116, 1, 0, 0, 0, 0, 0, 84, 36, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 111, 124, 5, 121, 98, 0, 0, 159, 177, 71, 117, 134, 15, 0, 0, 211, 198, 235, 167, 7, 0, 0, 0, 37, 129, 152, 21, 0, 0, 0, 0, 90, 136, 6, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 31, 38, 0, 0, 0, 0, 92, 0, 23, 99, 0, 0, 0, 17, 88, 0, 21, 122, 5, 0, 0, 111, 92, 86, 99, 161, 40, 0, 0, 62, 79, 56, 35, 104, 0, 0, 0, 0, 0, 0, 19, 118, 0, 0, 0, 0, 0, 0, 3, 23, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 51, 0, 39, 19, 0, 0, 0, 131, 147, 0, 159, 20, 0, 0, 0, 187, 75, 51, 195, 0, 0, 0, 0, 163, 191, 215, 127, 0, 0, 0, 0, 23, 123, 179, 11, 0, 0, 0, 0, 12, 151, 31, 0, 0, 0, 0, 0, 8, 31, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 25, 0, 0, 0, 16, 179, 6, 122, 75, 0, 0, 0, 92, 181, 54, 201, 5, 0, 0, 0, 52, 157, 228, 106, 0, 0, 0, 0, 0, 64, 159, 9, 0, 0, 0, 0, 43, 181, 20, 0, 0, 0, 0, 0, 46, 60, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 128, 5, 13, 0, 0, 0, 0, 99, 173, 85, 169, 0, 0, 0, 0, 130, 150, 88, 179, 0, 0, 0, 0, 152, 70, 88, 172, 0, 0, 0, 0, 158, 186, 179, 199, 3, 0, 0, 0, 38, 22, 41, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 3, 0, 0, 0, 0, 146, 4, 0, 136, 0, 0, 0, 5, 178, 45, 92, 185, 0, 0, 0, 1, 90, 89, 126, 161, 0, 0, 0, 0, 0, 0, 106, 138, 0, 0, 0, 0, 0, 0, 97, 141, 0, 0, 0, 0, 0, 0, 37, 68, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 14, 134, 18, 171, 0, 0, 0, 0, 71, 161, 86, 139, 0, 0, 0, 0, 57, 146, 205, 104, 0, 0, 0, 0, 0, 34, 162, 9, 0, 0, 0, 0, 0, 112, 37, 0, 0, 0, 0, 0, 0, 74, 1, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 18, 121, 42, 158, 0, 0, 0, 0, 97, 136, 117, 121, 0, 0, 0, 0, 79, 166, 216, 69, 0, 0, 0, 0, 0, 39, 145, 0, 0, 0, 0, 0, 0, 122, 32, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 0, 0, 0, 0, 50, 72, 1, 119, 0, 0, 0, 0, 140, 59, 28, 135, 0, 0, 0, 0, 127, 131, 174, 104, 0, 0, 0, 0, 1, 3, 125, 52, 0, 0, 0, 0, 0, 0, 109, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 20, 0, 0, 0, 0, 89, 50, 92, 88, 0, 0, 0, 6, 180, 90, 149, 83, 6, 0, 0, 55, 51, 16, 176, 135, 33, 0, 0, 0, 0, 0, 134, 30, 0, 0, 0, 0, 0, 0, 145, 0, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 22, 10, 0, 0, 0, 33, 166, 22, 173, 20, 0, 0, 0, 126, 122, 104, 131, 0, 0, 0, 0, 111, 187, 234, 139, 0, 0, 0, 0, 0, 98, 125, 23, 0, 0, 0, 0, 41, 169, 3, 0, 0, 0, 0, 0, 55, 72, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 40, 0, 0, 0, 5, 32, 0, 155, 89, 0, 0, 0, 19, 97, 10, 220, 104, 0, 0, 0, 2, 181, 197, 111, 108, 0, 0, 0, 0, 25, 31, 92, 104, 0, 0, 0, 0, 0, 0, 94, 104, 0, 0, 0, 0, 0, 0, 21, 20, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 6, 0, 24, 0, 0, 0, 0, 182, 18, 58, 123, 0, 0, 0, 0, 212, 124, 167, 144, 0, 0, 0, 0, 53, 103, 195, 50, 0, 0, 0, 0, 0, 9, 193, 17, 0, 0, 0, 0, 0, 3, 193, 29, 0, 0, 0, 0, 0, 0, 85, 19, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 21, 0, 0, 0, 0, 77, 82, 134, 28, 0, 0, 0, 0, 118, 120, 144, 27, 0, 0, 0, 0, 114, 13, 115, 57, 5, 0, 0, 0, 79, 116, 176, 130, 4, 0, 0, 0, 0, 0, 55, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 26, 39, 37, 0, 0, 0, 0, 108, 31, 92, 39, 0, 0, 0, 0, 122, 7, 99, 46, 0, 0, 0, 0, 121, 25, 109, 68, 0, 0, 0, 0, 69, 132, 159, 91, 0, 0, 0, 0, 0, 0, 34, 108, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 12, 0, 0, 0, 33, 116, 58, 154, 0, 0, 0, 0, 115, 115, 140, 123, 0, 0, 0, 0, 128, 185, 216, 81, 0, 0, 0, 0, 5, 111, 93, 0, 0, 0, 0, 0, 22, 130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 22, 0, 0, 0, 0, 100, 76, 107, 68, 0, 0, 0, 0, 119, 10, 124, 131, 92, 20, 0, 53, 171, 111, 128, 51, 26, 2, 0, 62, 30, 0, 79, 31, 0, 0, 0, 0, 0, 0, 70, 28, 0, 0, 0, 0, 0, 0, 11, 4, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 19, 47, 0, 0, 0, 0, 26, 148, 163, 21, 0, 0, 0, 11, 116, 98, 122, 0, 0, 0, 1, 183, 147, 186, 64, 0, 0, 0, 1, 101, 167, 107, 99, 0, 0, 0, 0, 3, 137, 10, 0, 0, 0, 0, 0, 0, 33, 2, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 1, 0, 0, 0, 0, 0, 0, 95, 1, 0, 0, 0, 0, 16, 41, 115, 71, 11, 0, 0, 0, 25, 149, 128, 40, 0, 0, 0, 0, 0, 82, 9, 0, 0, 0, 0, 0, 1, 83, 0, 0, 0, 0, 0, 0, 1, 18, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 4, 24, 0, 0, 0, 0, 112, 21, 116, 48, 0, 0, 0, 16, 146, 53, 157, 1, 0, 0, 0, 48, 189, 197, 68, 0, 0, 0, 0, 1, 111, 129, 8, 0, 0, 0, 0, 40, 149, 1, 0, 0, 0, 0, 0, 46, 46, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 67, 0, 0, 0, 0, 0, 0, 116, 151, 15, 42, 0, 0, 0, 0, 153, 176, 134, 140, 0, 0, 0, 0, 57, 108, 164, 159, 0, 0, 0, 0, 0, 0, 98, 146, 0, 0, 0, 0, 0, 0, 82, 209, 0, 0, 0, 0, 0, 0, 13, 40, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 73, 0, 0, 0, 0, 68, 83, 141, 106, 0, 0, 0, 20, 212, 97, 183, 67, 0, 0, 0, 7, 98, 141, 227, 48, 0, 0, 0, 0, 0, 5, 215, 35, 0, 0, 0, 0, 0, 8, 168, 10, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 7, 0, 15, 105, 3, 0, 0, 150, 118, 0, 16, 205, 128, 0, 0, 124, 189, 9, 6, 180, 155, 0, 0, 50, 237, 140, 114, 223, 137, 0, 0, 22, 204, 236, 245, 246, 148, 0, 0, 0, 0, 4, 4, 37, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 8, 16, 0, 0, 0, 0, 125, 76, 127, 146, 0, 0, 0, 0, 112, 76, 193, 105, 0, 0, 0, 0, 89, 92, 115, 30, 0, 0, 0, 0, 0, 2, 130, 0, 0, 0, 0, 0, 0, 15, 155, 7, 0, 0, 0, 0, 0, 4, 82, 4, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 3, 81, 9, 71, 77, 0, 0, 0, 83, 111, 23, 151, 7, 0, 0, 0, 79, 146, 165, 40, 0, 0, 0, 0, 0, 101, 74, 0, 0, 0, 0, 0, 22, 103, 0, 0, 0, 0, 0, 0, 8, 17, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 4, 0, 0, 4, 93, 0, 29, 101, 1, 0, 0, 94, 112, 19, 129, 14, 0, 0, 0, 79, 122, 139, 29, 0, 0, 0, 0, 0, 87, 38, 0, 0, 0, 0, 0, 60, 74, 0, 0, 0, 0, 0, 0, 18, 7, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 33, 0, 0, 0, 0, 0, 0, 161, 15, 0, 0, 0, 0, 0, 20, 155, 1, 75, 157, 11, 0, 0, 8, 177, 155, 58, 125, 40, 0, 0, 0, 17, 12, 0, 62, 102, 0, 0, 0, 0, 0, 0, 0, 85, 45, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 52, 0, 0, 0, 1, 95, 52, 91, 76, 0, 0, 0, 52, 158, 67, 159, 3, 0, 0, 0, 52, 171, 161, 21, 2, 0, 0, 0, 20, 139, 30, 0, 0, 0, 0, 0, 117, 60, 0, 0, 0, 0, 0, 0, 27, 4, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 30, 113, 7, 61, 78, 0, 0, 0, 132, 61, 27, 154, 8, 0, 0, 4, 163, 69, 121, 53, 0, 0, 0, 0, 71, 127, 61, 0, 0, 0, 0, 0, 14, 84, 0, 0, 0, 0, 0, 0, 27, 33, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 68, 0, 0, 0, 0, 0, 0, 99, 139, 44, 44, 0, 0, 0, 0, 125, 101, 112, 110, 0, 0, 0, 0, 31, 142, 196, 110, 0, 0, 0, 0, 0, 2, 104, 131, 0, 0, 0, 0, 0, 0, 37, 169, 0, 0, 0, 0, 0, 0, 1, 44, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 2, 0, 0, 0, 7, 45, 15, 135, 3, 0, 0, 0, 89, 85, 95, 100, 0, 0, 0, 0, 52, 150, 132, 1, 0, 0, 0, 0, 0, 116, 29, 0, 0, 0, 0, 0, 59, 87, 0, 0, 0, 0, 0, 0, 18, 15, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0, 0, 10, 84, 52, 130, 0, 0, 0, 0, 56, 121, 121, 68, 0, 0, 0, 0, 60, 154, 123, 0, 0, 0, 0, 0, 0, 132, 23, 0, 0, 0, 0, 0, 34, 90, 0, 0, 0, 0, 0, 0, 14, 18, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 54, 35, 0, 0, 0, 0, 81, 108, 116, 53, 0, 0, 0, 0, 98, 100, 145, 55, 0, 0, 0, 0, 60, 142, 191, 42, 0, 0, 0, 0, 0, 11, 133, 21, 0, 0, 0, 0, 0, 0, 135, 19, 0, 0, 0, 0, 0, 0, 25, 1, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 22, 38, 0, 0, 0, 30, 130, 0, 120, 27, 0, 0, 0, 142, 79, 30, 152, 0, 0, 0, 0, 103, 164, 193, 66, 0, 0, 0, 0, 0, 42, 163, 12, 0, 0, 0, 0, 0, 82, 20, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 18, 0, 0, 0, 10, 136, 23, 127, 2, 0, 0, 0, 114, 134, 68, 136, 0, 0, 0, 0, 75, 157, 165, 26, 0, 0, 0, 0, 0, 97, 66, 0, 0, 0, 0, 0, 51, 138, 0, 0, 0, 0, 0, 0, 28, 25, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 39, 0, 0, 0, 37, 126, 0, 115, 33, 0, 0, 0, 149, 87, 48, 153, 0, 0, 0, 0, 145, 147, 180, 42, 0, 0, 0, 0, 5, 84, 117, 0, 0, 0, 0, 0, 0, 124, 9, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 35, 0, 0, 0, 0, 0, 0, 66, 146, 175, 64, 0, 0, 0, 0, 112, 105, 217, 85, 0, 0, 0, 0, 39, 127, 218, 45, 0, 0, 0, 0, 0, 0, 183, 28, 0, 0, 0, 0, 0, 0, 167, 56, 0, 0, 0, 0, 0, 0, 69, 53, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 54, 0, 0, 0, 77, 124, 0, 26, 136, 0, 0, 35, 165, 52, 24, 108, 70, 0, 0, 116, 154, 139, 139, 208, 11, 0, 0, 0, 0, 0, 100, 137, 0, 0, 0, 0, 0, 0, 137, 38, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 27, 0, 0, 0, 0, 54, 0, 88, 37, 0, 0, 0, 66, 136, 41, 143, 1, 0, 0, 0, 90, 132, 170, 28, 0, 0, 0, 0, 0, 91, 56, 0, 0, 0, 0, 0, 90, 88, 0, 0, 0, 0, 0, 0, 30, 5, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 2, 0, 0, 0, 0, 0, 25, 110, 105, 22, 0, 0, 0, 0, 51, 90, 89, 0, 0, 0, 0, 0, 26, 133, 139, 3, 0, 0, 0, 0, 0, 15, 113, 0, 0, 0, 0, 0, 0, 0, 117, 17, 0, 0, 0, 0, 0, 0, 30, 14, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 13, 0, 0, 0, 1, 82, 64, 82, 74, 0, 0, 0, 94, 152, 41, 163, 6, 0, 0, 0, 122, 154, 170, 38, 0, 0, 0, 0, 5, 140, 62, 0, 0, 0, 0, 0, 115, 95, 0, 0, 0, 0, 0, 0, 73, 5, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 0, 3, 0, 0, 0, 0, 61, 190, 21, 181, 0, 0, 0, 8, 204, 174, 143, 215, 8, 0, 0, 50, 171, 115, 181, 155, 10, 0, 0, 2, 5, 0, 179, 64, 0, 0, 0, 0, 0, 0, 197, 20, 0, 0, 0, 0, 0, 0, 73, 3, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 0, 12, 45, 0, 0, 0, 103, 150, 0, 53, 79, 0, 0, 0, 184, 40, 0, 106, 37, 0, 0, 73, 235, 166, 183, 219, 6, 0, 0, 30, 69, 19, 71, 162, 0, 0, 0, 0, 0, 0, 115, 106, 0, 0, 0, 0, 0, 0, 29, 18, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 3, 0, 0, 0, 0, 0, 10, 143, 17, 99, 0, 0, 0, 0, 83, 104, 46, 120, 0, 0, 0, 0, 175, 125, 170, 168, 0, 0, 0, 0, 69, 65, 129, 111, 0, 0, 0, 0, 0, 0, 85, 109, 0, 0, 0, 0, 0, 0, 19, 26, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 76, 0, 1, 2, 0, 0, 1, 138, 128, 0, 38, 83, 0, 0, 55, 184, 17, 2, 70, 71, 0, 0, 70, 185, 187, 192, 215, 5, 0, 0, 0, 4, 6, 56, 173, 0, 0, 0, 0, 0, 0, 133, 90, 0, 0, 0, 0, 0, 0, 33, 10, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 12, 0, 0, 0, 0, 0, 51, 162, 9, 55, 28, 0, 0, 0, 140, 66, 30, 157, 18, 0, 0, 0, 118, 145, 199, 120, 0, 0, 0, 0, 0, 0, 138, 39, 0, 0, 0, 0, 0, 0, 107, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 11, 0, 53, 15, 0, 0, 0, 146, 52, 3, 145, 1, 0, 0, 2, 159, 25, 74, 146, 0, 0, 0, 28, 182, 167, 202, 117, 0, 0, 0, 0, 0, 0, 130, 61, 0, 0, 0, 0, 0, 0, 139, 27, 0, 0, 0, 0, 0, 0, 30, 2, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0, 0, 0, 21, 98, 0, 59, 78, 0, 0, 0, 106, 119, 0, 116, 14, 0, 0, 22, 222, 150, 89, 124, 0, 0, 0, 11, 84, 88, 147, 87, 0, 0, 0, 0, 0, 0, 109, 15, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 13, 0, 0, 0, 56, 78, 2, 121, 1, 0, 0, 0, 141, 35, 53, 119, 0, 0, 0, 11, 166, 147, 200, 57, 0, 0, 0, 0, 0, 0, 113, 3, 0, 0, 0, 0, 0, 30, 57, 0, 0, 0, 0, 0, 0, 17, 2, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 44, 10, 22, 0, 0, 0, 0, 89, 29, 59, 98, 0, 0, 0, 0, 116, 34, 112, 168, 5, 0, 0, 0, 34, 99, 166, 66, 0, 0, 0, 0, 0, 0, 123, 43, 0, 0, 0, 0, 0, 0, 122, 63, 0, 0, 0, 0, 0, 0, 25, 18, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 13, 59, 0, 0, 0, 0, 4, 136, 54, 141, 0, 0, 0, 0, 51, 141, 93, 111, 0, 0, 0, 0, 193, 154, 183, 69, 0, 0, 0, 0, 68, 36, 140, 25, 0, 0, 0, 0, 0, 0, 136, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 49, 0, 0, 3, 0, 0, 63, 194, 73, 4, 137, 142, 0, 0, 211, 135, 53, 125, 175, 36, 0, 0, 164, 221, 245, 140, 7, 0, 0, 0, 13, 149, 127, 8, 0, 0, 0, 0, 100, 140, 0, 0, 0, 0, 0, 0, 16, 14, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 107, 26, 0, 0, 0, 0, 159, 62, 139, 87, 0, 0, 0, 0, 173, 70, 109, 115, 0, 0, 0, 0, 189, 164, 194, 194, 0, 0, 0, 0, 28, 61, 124, 168, 0, 0, 0, 0, 0, 0, 60, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 160, 0, 5, 1, 0, 0, 11, 212, 90, 3, 148, 88, 0, 0, 75, 167, 8, 5, 172, 59, 0, 0, 105, 129, 112, 161, 243, 19, 0, 0, 40, 151, 128, 94, 232, 11, 0, 0, 0, 0, 0, 11, 136, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 5, 60, 0, 0, 0, 0, 15, 123, 14, 131, 0, 0, 0, 0, 121, 104, 71, 125, 0, 0, 0, 0, 97, 104, 193, 55, 0, 0, 0, 0, 0, 10, 126, 0, 0, 0, 0, 0, 0, 67, 64, 0, 0, 0, 0, 0, 0, 24, 5, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 64, 0, 28, 0, 0, 0, 0, 109, 111, 0, 151, 3, 0, 0, 6, 168, 53, 1, 173, 3, 0, 0, 89, 224, 193, 205, 240, 2, 0, 0, 46, 103, 70, 79, 193, 0, 0, 0, 0, 0, 0, 85, 152, 0, 0, 0, 0, 0, 0, 21, 33, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 21, 0, 11, 0, 0, 0, 0, 102, 21, 4, 98, 0, 0, 0, 0, 105, 0, 48, 114, 0, 0, 0, 0, 108, 92, 156, 83, 0, 0, 0, 0, 0, 0, 110, 8, 0, 0, 0, 0, 0, 0, 117, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 82, 0, 0, 0, 0, 0, 63, 87, 161, 0, 0, 0, 0, 41, 157, 84, 161, 0, 0, 0, 70, 229, 166, 185, 190, 31, 0, 0, 59, 86, 51, 122, 149, 0, 0, 0, 0, 0, 0, 78, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 139, 51, 0, 44, 10, 0, 7, 161, 53, 0, 46, 150, 19, 0, 86, 143, 122, 122, 194, 7, 0, 0, 12, 63, 46, 116, 127, 0, 0, 0, 0, 0, 0, 100, 56, 0, 0, 0, 0, 0, 0, 10, 8, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 24, 0, 0, 0, 0, 31, 117, 24, 119, 0, 0, 0, 0, 89, 93, 96, 87, 0, 0, 0, 0, 76, 131, 150, 82, 15, 0, 0, 0, 6, 115, 156, 76, 0, 0, 0, 0, 0, 57, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 30, 0, 0, 0, 0, 0, 22, 175, 8, 0, 4, 48, 0, 0, 26, 171, 15, 3, 34, 130, 0, 0, 0, 96, 122, 89, 159, 56, 0, 0, 0, 0, 0, 10, 158, 3, 0, 0, 0, 0, 0, 5, 118, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 115, 0, 25, 82, 0, 0, 0, 126, 127, 0, 78, 57, 0, 0, 22, 166, 21, 0, 111, 43, 0, 0, 114, 192, 157, 140, 215, 9, 0, 0, 49, 109, 109, 154, 199, 4, 0, 0, 0, 0, 0, 73, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 51, 0, 0, 67, 0, 0, 0, 101, 103, 0, 0, 140, 0, 0, 31, 144, 16, 0, 5, 114, 0, 0, 169, 208, 173, 169, 202, 45, 0, 0, 52, 46, 15, 34, 162, 2, 0, 0, 0, 0, 0, 50, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 46, 46, 0, 0, 0, 17, 147, 0, 119, 15, 0, 0, 0, 135, 106, 5, 152, 0, 0, 0, 49, 194, 129, 144, 135, 0, 0, 0, 9, 26, 22, 144, 85, 0, 0, 0, 0, 0, 0, 103, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 12, 0, 39, 4, 0, 0, 0, 71, 100, 0, 108, 22, 0, 0, 1, 120, 35, 5, 144, 3, 0, 0, 32, 190, 170, 180, 120, 0, 0, 0, 0, 6, 1, 117, 34, 0, 0, 0, 0, 0, 6, 109, 0, 0, 0, 0, 0, 0, 3, 17, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 18, 0, 0, 0, 33, 154, 28, 166, 64, 0, 0, 9, 171, 112, 85, 236, 15, 0, 0, 53, 208, 211, 233, 184, 143, 16, 0, 0, 23, 118, 138, 6, 4, 0, 0, 0, 48, 200, 11, 0, 0, 0, 0, 0, 32, 89, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 25, 0, 0, 0, 0, 0, 6, 134, 109, 0, 0, 0, 0, 0, 86, 143, 124, 8, 0, 0, 0, 0, 82, 100, 178, 30, 0, 0, 0, 0, 0, 0, 141, 53, 0, 0, 0, 0, 0, 0, 114, 87, 0, 0, 0, 0, 0, 0, 24, 20, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 65, 0, 0, 0, 0, 36, 117, 25, 191, 3, 0, 0, 0, 154, 76, 96, 133, 2, 0, 0, 57, 192, 149, 201, 140, 30, 0, 0, 13, 15, 90, 80, 0, 0, 0, 0, 0, 3, 141, 1, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 14, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 0, 0, 0, 26, 122, 41, 59, 0, 0, 0, 0, 20, 116, 192, 101, 0, 0, 0, 0, 0, 0, 127, 32, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 19, 0, 0, 0, 50, 132, 1, 145, 10, 0, 0, 2, 157, 59, 42, 166, 0, 0, 0, 73, 189, 110, 191, 165, 47, 0, 0, 30, 65, 42, 185, 25, 0, 0, 0, 0, 0, 77, 78, 0, 0, 0, 0, 0, 0, 21, 7, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 57, 0, 0, 0, 0, 71, 81, 147, 8, 0, 0, 0, 86, 173, 40, 153, 0, 0, 0, 65, 218, 112, 92, 165, 0, 0, 0, 35, 94, 109, 174, 167, 0, 0, 0, 0, 0, 0, 54, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 69, 0, 0, 0, 23, 102, 0, 107, 60, 0, 0, 0, 131, 97, 46, 168, 3, 0, 0, 108, 201, 108, 189, 155, 0, 0, 0, 51, 76, 107, 120, 3, 0, 0, 0, 0, 24, 159, 10, 0, 0, 0, 0, 0, 10, 30, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 31, 0, 0, 0, 28, 130, 6, 103, 24, 0, 0, 0, 131, 79, 28, 149, 3, 0, 0, 46, 208, 123, 188, 166, 27, 0, 0, 20, 84, 172, 125, 31, 3, 0, 0, 0, 0, 105, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 98, 0, 0, 0, 33, 126, 9, 116, 38, 0, 0, 0, 144, 71, 44, 158, 3, 0, 0, 38, 201, 137, 183, 134, 34, 0, 0, 6, 34, 120, 86, 0, 0, 0, 0, 0, 0, 107, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 1, 65, 0, 0, 0, 0, 5, 125, 5, 138, 0, 0, 0, 0, 70, 122, 81, 120, 0, 0, 0, 16, 184, 185, 205, 136, 24, 0, 0, 10, 17, 125, 81, 3, 0, 0, 0, 0, 19, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0, 0, 4, 48, 39, 172, 0, 0, 0, 0, 83, 133, 140, 103, 0, 0, 0, 28, 221, 152, 200, 134, 26, 0, 0, 5, 63, 167, 41, 0, 0, 0, 0, 0, 67, 136, 0, 0, 0, 0, 0, 0, 19, 28, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 78, 0, 0, 0, 0, 0, 32, 193, 188, 18, 0, 0, 0, 0, 150, 149, 178, 56, 86, 16, 0, 11, 194, 181, 232, 179, 86, 10, 0, 0, 6, 5, 184, 18, 0, 0, 0, 0, 0, 3, 156, 1, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 7, 0, 0, 0, 0, 97, 69, 143, 11, 0, 0, 0, 27, 166, 50, 147, 0, 0, 0, 8, 178, 148, 195, 155, 79, 0, 0, 24, 159, 132, 158, 19, 0, 0, 0, 0, 0, 79, 55, 0, 0, 0, 0, 0, 0, 14, 12, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 35, 77, 0, 0, 0, 1, 98, 94, 148, 17, 0, 0, 0, 67, 151, 76, 143, 0, 0, 0, 6, 225, 159, 203, 151, 29, 0, 0, 2, 105, 134, 126, 3, 0, 0, 0, 0, 0, 107, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 87, 0, 0, 0, 0, 0, 0, 85, 143, 9, 74, 0, 0, 0, 0, 113, 129, 59, 167, 0, 0, 0, 0, 93, 183, 204, 134, 0, 0, 0, 0, 14, 90, 149, 139, 0, 0, 0, 0, 0, 0, 72, 154, 0, 0, 0, 0, 0, 0, 9, 37, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 52, 0, 0, 0, 0, 0, 23, 118, 11, 15, 0, 0, 0, 7, 120, 27, 94, 30, 0, 0, 0, 136, 165, 136, 120, 0, 0, 0, 0, 94, 59, 163, 26, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 0, 54, 5, 0, 0, 0, 0, 118, 0, 138, 56, 0, 0, 0, 0, 137, 0, 100, 101, 0, 0, 0, 0, 168, 141, 206, 210, 0, 0, 0, 0, 87, 124, 109, 144, 0, 0, 0, 0, 0, 0, 1, 104, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 71, 13, 0, 0, 48, 144, 0, 41, 155, 3, 0, 2, 165, 89, 23, 167, 46, 0, 0, 69, 197, 176, 212, 144, 0, 0, 0, 10, 18, 65, 185, 29, 0, 0, 0, 0, 0, 95, 38, 0, 0, 0, 0, 0, 0, 13, 3, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98, 0, 0, 13, 11, 0, 0, 24, 127, 0, 0, 148, 67, 0, 0, 79, 118, 0, 44, 228, 41, 0, 0, 83, 131, 3, 123, 201, 3, 0, 0, 21, 157, 141, 201, 130, 0, 0, 0, 0, 0, 0, 42, 143, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 9, 0, 0, 26, 93, 0, 40, 147, 19, 0, 0, 133, 100, 20, 157, 36, 0, 0, 79, 218, 154, 201, 78, 0, 0, 0, 23, 47, 79, 142, 4, 0, 0, 0, 0, 0, 59, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 104, 0, 10, 113, 16, 0, 8, 155, 107, 9, 130, 95, 0, 0, 65, 190, 142, 179, 129, 0, 0, 0, 0, 36, 131, 141, 11, 0, 0, 0, 0, 0, 89, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 121, 152, 0, 88, 50, 0, 0, 0, 197, 70, 17, 182, 25, 0, 0, 0, 106, 173, 205, 167, 0, 0, 0, 0, 0, 32, 223, 54, 0, 0, 0, 0, 0, 25, 154, 0, 0, 0, 0, 0, 0, 15, 63, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 33, 11, 0, 0, 65, 144, 0, 11, 159, 19, 0, 2, 172, 79, 0, 103, 87, 0, 0, 87, 194, 143, 182, 152, 0, 0, 0, 13, 15, 20, 187, 33, 0, 0, 0, 0, 0, 55, 75, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 113, 32, 0, 0, 61, 57, 0, 105, 101, 0, 0, 9, 169, 35, 59, 184, 9, 0, 0, 66, 146, 171, 203, 71, 0, 0, 0, 0, 3, 149, 92, 1, 0, 0, 0, 0, 42, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 17, 10, 0, 0, 0, 29, 142, 0, 91, 42, 0, 0, 1, 131, 69, 0, 124, 16, 0, 5, 128, 164, 126, 132, 153, 0, 0, 1, 19, 0, 4, 79, 130, 0, 0, 0, 0, 0, 0, 81, 104, 0, 0, 0, 0, 0, 0, 12, 18, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 13, 0, 0, 0, 0, 0, 3, 142, 3, 5, 149, 7, 0, 0, 72, 135, 0, 68, 96, 0, 0, 40, 217, 154, 136, 147, 0, 0, 0, 63, 66, 62, 196, 32, 0, 0, 0, 0, 0, 89, 55, 0, 0, 0, 0, 0, 0, 20, 2, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 15, 15, 0, 0, 83, 147, 0, 0, 95, 107, 0, 0, 147, 103, 4, 35, 135, 111, 0, 0, 139, 243, 227, 155, 175, 103, 0, 0, 12, 51, 35, 0, 83, 103, 0, 0, 0, 0, 0, 0, 91, 115, 0, 0, 0, 0, 0, 0, 31, 55, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 3, 0, 2, 0, 0, 0, 39, 190, 6, 60, 142, 0, 0, 0, 121, 120, 1, 134, 55, 0, 0, 33, 201, 100, 143, 134, 0, 0, 0, 22, 106, 107, 195, 28, 0, 0, 0, 0, 0, 61, 81, 0, 0, 0, 0, 0, 0, 41, 17, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 99, 16, 0, 0, 0, 131, 28, 4, 139, 0, 0, 0, 23, 171, 32, 8, 163, 0, 0, 0, 99, 103, 123, 151, 199, 0, 0, 0, 8, 0, 0, 75, 183, 0, 0, 0, 0, 0, 0, 43, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 19, 0, 0, 0, 0, 0, 26, 192, 13, 28, 104, 0, 0, 0, 90, 159, 1, 124, 69, 0, 0, 15, 209, 125, 96, 149, 0, 0, 0, 37, 116, 113, 214, 72, 0, 0, 0, 0, 0, 14, 122, 0, 0, 0, 0, 0, 0, 3, 19, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 20, 9, 0, 0, 98, 167, 0, 62, 176, 28, 0, 4, 206, 87, 25, 183, 79, 0, 0, 17, 152, 184, 203, 140, 0, 0, 0, 0, 0, 40, 209, 35, 0, 0, 0, 0, 0, 93, 117, 0, 0, 0, 0, 0, 0, 51, 32, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 5, 8, 0, 0, 0, 0, 0, 89, 52, 78, 0, 0, 0, 0, 0, 91, 66, 69, 0, 0, 0, 0, 4, 113, 145, 64, 0, 0, 0, 0, 0, 47, 122, 15, 0, 0, 0, 0, 0, 0, 92, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 57, 0, 0, 0, 23, 127, 8, 138, 38, 0, 0, 0, 102, 97, 86, 146, 0, 0, 0, 9, 183, 170, 180, 26, 0, 0, 0, 0, 12, 112, 101, 0, 0, 0, 0, 0, 4, 148, 6, 0, 0, 0, 0, 0, 2, 31, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 1, 0, 0, 0, 0, 21, 148, 1, 118, 5, 0, 0, 0, 97, 91, 13, 126, 0, 0, 0, 16, 180, 102, 80, 115, 0, 0, 0, 19, 54, 100, 185, 74, 0, 0, 0, 0, 0, 0, 117, 55, 0, 0, 0, 0, 0, 0, 21, 11, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 7, 152, 2, 0, 80, 13, 0, 0, 33, 131, 0, 0, 147, 12, 0, 0, 2, 140, 157, 132, 201, 3, 0, 0, 0, 3, 19, 35, 164, 0, 0, 0, 0, 0, 0, 0, 120, 0, 0, 0, 0, 0, 0, 0, 49, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 7, 0, 0, 0, 0, 47, 64, 129, 0, 0, 0, 0, 10, 135, 119, 69, 0, 0, 0, 0, 142, 163, 129, 1, 0, 0, 0, 0, 58, 108, 82, 0, 0, 0, 0, 0, 0, 124, 3, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 6, 2, 43, 0, 0, 0, 0, 91, 83, 48, 110, 0, 0, 0, 0, 131, 106, 124, 108, 0, 0, 0, 0, 52, 57, 155, 66, 0, 0, 0, 0, 0, 0, 118, 19, 0, 0, 0, 0, 0, 12, 111, 0, 0, 0, 0, 0, 0, 9, 22, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 123, 67, 0, 74, 126, 0, 0, 31, 179, 21, 38, 181, 30, 0, 0, 19, 151, 152, 227, 87, 0, 0, 0, 0, 1, 67, 138, 3, 0, 0, 0, 0, 6, 155, 22, 0, 0, 0, 0, 0, 8, 75, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 2, 0, 0, 30, 124, 0, 51, 159, 20, 0, 0, 148, 121, 36, 184, 37, 0, 0, 89, 221, 163, 220, 90, 0, 0, 0, 30, 100, 112, 149, 3, 0, 0, 0, 0, 0, 108, 28, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 20, 0, 0, 0, 0, 75, 18, 128, 28, 3, 0, 0, 55, 195, 139, 92, 1, 0, 0, 0, 10, 147, 61, 0, 49, 8, 0, 0, 53, 138, 0, 0, 14, 2, 0, 0, 109, 25, 0, 0, 0, 0, 0, 0, 42, 0, 0, 0, 13, 2 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 46, 0, 0, 0, 0, 0, 79, 80, 84, 0, 0, 0, 0, 18, 123, 98, 41, 0, 0, 0, 0, 70, 103, 150, 52, 0, 0, 0, 0, 0, 29, 77, 10, 0, 0, 0, 0, 0, 80, 11, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 19, 0, 0, 0, 80, 128, 0, 155, 131, 0, 0, 12, 178, 183, 108, 180, 196, 0, 0, 15, 122, 127, 109, 178, 250, 93, 0, 0, 0, 0, 0, 90, 245, 27, 0, 0, 0, 0, 0, 40, 208, 12, 0, 0, 0, 0, 0, 0, 42, 5, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79, 82, 0, 0, 0, 0, 23, 16, 111, 118, 0, 0, 0, 11, 160, 89, 165, 82, 0, 0, 0, 16, 152, 110, 177, 97, 0, 0, 0, 0, 0, 0, 118, 124, 0, 0, 0, 0, 0, 0, 78, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 7, 79, 39, 0, 0, 0, 0, 149, 0, 136, 77, 0, 0, 0, 1, 173, 2, 142, 95, 0, 0, 0, 0, 119, 179, 213, 108, 0, 0, 0, 0, 4, 40, 174, 122, 0, 0, 0, 0, 0, 0, 72, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 22, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 35, 109, 5, 40, 0, 0, 0, 0, 12, 96, 149, 106, 0, 0, 0, 0, 0, 0, 124, 44, 0, 0, 0, 0, 0, 0, 81, 58, 0, 0, 0, 0, 0, 0, 13, 15, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 16, 4, 0, 0, 0, 0, 131, 0, 139, 90, 0, 0, 0, 1, 149, 37, 132, 100, 0, 0, 0, 0, 103, 114, 198, 112, 0, 0, 0, 0, 0, 0, 113, 130, 0, 0, 0, 0, 0, 0, 80, 190, 0, 0, 0, 0, 0, 0, 12, 47, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 68, 0, 0, 61, 0, 0, 0, 104, 110, 0, 36, 105, 0, 0, 1, 198, 85, 0, 117, 39, 0, 0, 43, 116, 134, 201, 157, 0, 0, 0, 3, 1, 7, 175, 52, 0, 0, 0, 0, 0, 79, 112, 0, 0, 0, 0, 0, 0, 29, 11, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155, 142, 20, 81, 129, 0, 0, 34, 177, 67, 173, 228, 38, 0, 0, 13, 164, 165, 148, 154, 0, 0, 0, 0, 0, 0, 151, 83, 0, 0, 0, 0, 0, 0, 174, 55, 0, 0, 0, 0, 0, 0, 85, 68, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 38, 18, 0, 0, 61, 135, 0, 11, 141, 9, 0, 5, 162, 43, 1, 113, 77, 0, 0, 93, 161, 143, 152, 165, 0, 0, 0, 17, 16, 105, 187, 36, 0, 0, 0, 0, 0, 94, 35, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 59, 0, 0, 0, 0, 0, 0, 131, 129, 0, 0, 0, 0, 0, 0, 140, 86, 4, 85, 0, 0, 0, 0, 70, 185, 172, 187, 0, 0, 0, 0, 0, 45, 171, 125, 0, 0, 0, 0, 0, 0, 72, 104, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 13, 0, 0, 0, 1, 60, 0, 141, 51, 0, 0, 0, 21, 96, 0, 115, 87, 0, 0, 0, 3, 158, 125, 194, 114, 0, 0, 0, 0, 34, 71, 119, 127, 0, 0, 0, 0, 0, 0, 34, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 42, 0, 0, 0, 0, 0, 31, 168, 135, 20, 0, 0, 0, 1, 164, 116, 169, 32, 67, 0, 0, 20, 216, 171, 227, 182, 64, 0, 0, 0, 59, 96, 172, 7, 0, 0, 0, 0, 0, 18, 110, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 61, 4, 0, 0, 89, 77, 0, 27, 109, 0, 0, 7, 177, 49, 7, 125, 24, 0, 0, 89, 181, 160, 201, 158, 0, 0, 0, 27, 21, 18, 167, 24, 0, 0, 0, 0, 1, 126, 29, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 0, 5, 0, 0, 0, 2, 99, 54, 13, 109, 0, 0, 0, 95, 164, 8, 115, 42, 0, 0, 12, 100, 103, 184, 77, 0, 0, 0, 0, 0, 55, 97, 0, 0, 0, 0, 0, 29, 133, 0, 0, 0, 0, 0, 0, 12, 24, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 35, 0, 0, 0, 0, 30, 147, 34, 78, 38, 0, 0, 0, 131, 79, 46, 139, 0, 0, 0, 0, 138, 0, 144, 66, 5, 0, 0, 0, 146, 145, 181, 101, 2, 0, 0, 0, 0, 55, 58, 0, 0, 0, 0, 0, 0, 9, 14, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 34, 0, 0, 0, 0, 0, 0, 104, 14, 82, 44, 0, 0, 0, 0, 104, 29, 115, 59, 46, 7, 0, 0, 14, 49, 123, 24, 4, 0, 0, 0, 0, 0, 102, 0, 0, 0, 0, 0, 0, 0, 91, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 57, 0, 63, 11, 0, 0, 0, 116, 113, 0, 128, 3, 0, 0, 5, 175, 30, 26, 144, 0, 0, 0, 88, 126, 101, 181, 186, 33, 0, 0, 53, 148, 116, 157, 46, 0, 0, 0, 0, 0, 0, 117, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 47, 0, 0, 67, 3, 0, 0, 140, 105, 0, 28, 139, 0, 0, 16, 211, 77, 4, 125, 71, 0, 0, 32, 90, 126, 224, 174, 3, 0, 0, 0, 0, 8, 173, 29, 0, 0, 0, 0, 0, 112, 74, 0, 0, 0, 0, 0, 0, 31, 2, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 21, 0, 0, 79, 37, 0, 0, 103, 34, 0, 0, 138, 48, 12, 4, 144, 9, 0, 0, 107, 155, 134, 120, 203, 51, 0, 0, 0, 0, 0, 30, 161, 0, 0, 0, 0, 0, 0, 27, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 83, 0, 0, 0, 60, 121, 0, 48, 109, 0, 0, 12, 182, 50, 4, 132, 32, 0, 0, 114, 101, 145, 206, 96, 0, 0, 0, 4, 0, 27, 135, 5, 0, 0, 0, 0, 0, 88, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 23, 0, 53, 10, 0, 0, 8, 143, 20, 22, 122, 0, 0, 0, 112, 110, 7, 125, 34, 0, 0, 50, 172, 141, 161, 144, 0, 0, 0, 7, 12, 115, 140, 20, 0, 0, 0, 0, 50, 147, 0, 0, 0, 0, 0, 0, 21, 26, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 84, 3, 0, 0, 50, 127, 0, 29, 111, 0, 0, 1, 143, 49, 1, 116, 26, 0, 0, 59, 174, 140, 166, 130, 0, 0, 0, 17, 5, 32, 148, 23, 0, 0, 0, 0, 0, 89, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 3, 32, 6, 0, 0, 0, 6, 119, 0, 110, 8, 0, 0, 0, 58, 98, 17, 136, 0, 0, 0, 0, 153, 162, 180, 135, 0, 0, 0, 1, 110, 58, 111, 42, 0, 0, 0, 0, 0, 4, 106, 0, 0, 0, 0, 0, 0, 2, 24, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 14, 0, 0, 0, 0, 0, 49, 225, 143, 0, 0, 0, 0, 28, 209, 208, 114, 0, 0, 0, 0, 148, 223, 184, 68, 0, 0, 0, 0, 50, 76, 168, 18, 0, 0, 0, 0, 0, 7, 161, 0, 0, 0, 0, 0, 0, 4, 59, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 70, 17, 0, 0, 65, 117, 0, 26, 133, 4, 0, 7, 190, 58, 13, 141, 44, 0, 0, 47, 96, 136, 197, 144, 0, 0, 0, 0, 0, 10, 160, 32, 0, 0, 0, 0, 0, 115, 51, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 17, 0, 0, 0, 82, 95, 11, 167, 8, 0, 0, 0, 179, 64, 76, 177, 0, 0, 0, 0, 125, 149, 187, 94, 0, 0, 0, 0, 9, 64, 214, 33, 0, 0, 0, 0, 0, 28, 140, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 29, 149, 44, 89, 0, 0, 0, 0, 65, 195, 181, 181, 0, 0, 0, 0, 7, 43, 158, 62, 0, 0, 0, 0, 0, 38, 129, 1, 0, 0, 0, 0, 4, 142, 12, 0, 0, 0, 0, 0, 6, 71, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 35, 6, 38, 0, 0, 0, 0, 115, 69, 59, 109, 0, 0, 0, 0, 104, 31, 94, 93, 0, 0, 0, 0, 39, 122, 187, 56, 0, 0, 0, 0, 0, 0, 132, 44, 0, 0, 0, 0, 0, 0, 114, 31, 0, 0, 0, 0, 0, 0, 14, 3, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 122, 0, 0, 0, 101, 30, 0, 51, 149, 0, 0, 0, 132, 43, 0, 51, 177, 18, 0, 0, 60, 188, 175, 202, 234, 54, 0, 0, 0, 25, 40, 51, 191, 0, 0, 0, 0, 0, 0, 9, 135, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 51, 0, 0, 0, 6, 94, 0, 80, 153, 0, 0, 0, 68, 118, 9, 149, 160, 104, 20, 0, 60, 173, 170, 224, 102, 20, 2, 0, 0, 3, 43, 153, 2, 0, 0, 0, 0, 0, 53, 87, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 0, 119, 88, 32, 167, 0, 0, 0, 21, 169, 31, 148, 169, 0, 0, 0, 62, 169, 148, 140, 135, 0, 0, 0, 2, 21, 6, 131, 81, 0, 0, 0, 0, 0, 0, 188, 59, 0, 0, 0, 0, 0, 0, 80, 19, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 4, 0, 0, 0, 0, 89, 2, 97, 0, 0, 0, 0, 0, 109, 39, 124, 44, 0, 0, 0, 0, 7, 64, 120, 3, 0, 0, 0, 0, 0, 0, 106, 0, 0, 0, 0, 0, 0, 0, 111, 27, 0, 0, 0, 0, 0, 0, 27, 12, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 70, 6, 0, 0, 17, 160, 3, 86, 193, 3, 0, 0, 61, 126, 0, 166, 109, 0, 0, 0, 31, 194, 198, 248, 172, 67, 0, 0, 0, 14, 36, 200, 18, 0, 0, 0, 0, 0, 18, 156, 0, 0, 0, 0, 0, 0, 4, 27, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 18, 79, 21, 77, 0, 0, 0, 0, 83, 64, 114, 125, 0, 0, 0, 0, 117, 99, 71, 72, 0, 0, 0, 0, 30, 14, 85, 28, 0, 0, 0, 0, 0, 0, 82, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 18, 89, 46, 0, 0, 0, 0, 123, 44, 113, 14, 0, 0, 0, 0, 137, 6, 127, 89, 27, 0, 0, 0, 149, 69, 212, 120, 0, 0, 0, 0, 97, 132, 141, 129, 0, 0, 0, 0, 0, 0, 10, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 12, 0, 0, 0, 0, 0, 0, 176, 80, 48, 23, 0, 0, 0, 0, 165, 95, 214, 110, 0, 0, 0, 0, 57, 159, 144, 159, 0, 0, 0, 0, 0, 0, 57, 174, 0, 0, 0, 0, 0, 0, 39, 170, 0, 0, 0, 0, 0, 0, 9, 72, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 8, 84, 0, 0, 0, 7, 150, 9, 121, 118, 0, 0, 0, 44, 113, 0, 163, 41, 8, 0, 0, 37, 170, 171, 221, 165, 96, 2, 0, 0, 9, 92, 116, 6, 0, 0, 0, 0, 0, 134, 36, 0, 0, 0, 0, 0, 0, 26, 2, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 53, 0, 0, 0, 0, 0, 23, 198, 111, 0, 0, 0, 0, 56, 179, 162, 109, 0, 0, 0, 23, 253, 144, 103, 202, 3, 0, 0, 9, 84, 113, 189, 170, 11, 0, 0, 0, 0, 0, 35, 85, 0, 0, 0, 0, 0, 0, 5, 22, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 59, 0, 0, 0, 0, 64, 131, 71, 135, 0, 0, 0, 0, 128, 90, 135, 141, 1, 0, 0, 0, 81, 167, 195, 68, 0, 0, 0, 0, 0, 18, 133, 0, 0, 0, 0, 0, 0, 27, 100, 0, 0, 0, 0, 0, 0, 6, 21, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 37, 0, 0, 0, 123, 80, 0, 151, 27, 0, 0, 8, 174, 20, 46, 181, 0, 0, 0, 59, 180, 122, 180, 155, 0, 0, 0, 5, 95, 116, 208, 46, 0, 0, 0, 0, 0, 0, 172, 1, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 9, 19, 0, 0, 0, 3, 1, 0, 77, 64, 0, 0, 0, 181, 55, 2, 154, 19, 0, 0, 31, 178, 9, 28, 192, 3, 0, 0, 119, 155, 135, 203, 213, 31, 0, 0, 70, 185, 150, 171, 148, 0, 0, 0, 0, 0, 0, 61, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 3, 0, 0, 0, 1, 118, 0, 0, 109, 2, 0, 0, 26, 97, 0, 0, 121, 0, 0, 0, 30, 122, 101, 101, 146, 0, 0, 0, 1, 10, 5, 8, 89, 0, 0, 0, 0, 0, 0, 0, 88, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 120, 12, 0, 0, 0, 77, 74, 117, 112, 0, 0, 0, 12, 146, 19, 159, 22, 0, 0, 0, 27, 167, 173, 192, 136, 81, 0, 0, 0, 11, 132, 53, 5, 0, 0, 0, 0, 5, 126, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 14, 0, 54, 37, 0, 0, 0, 69, 63, 0, 106, 108, 0, 0, 0, 69, 88, 0, 77, 143, 0, 0, 0, 24, 169, 123, 127, 189, 1, 0, 0, 0, 39, 82, 67, 154, 28, 0, 0, 0, 0, 0, 0, 75, 42, 0, 0, 0, 0, 0, 0, 12, 6, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 47, 0, 24, 44, 0, 0, 7, 183, 32, 1, 142, 35, 0, 0, 62, 151, 38, 57, 179, 4, 0, 0, 86, 164, 146, 203, 187, 30, 0, 0, 0, 0, 0, 188, 56, 0, 0, 0, 0, 0, 51, 135, 0, 0, 0, 0, 0, 0, 8, 21, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 70, 111, 161, 4, 0, 0, 0, 31, 213, 168, 207, 0, 0, 0, 0, 5, 79, 155, 22, 0, 0, 0, 0, 3, 127, 35, 0, 0, 0, 0, 0, 113, 112, 0, 0, 0, 0, 0, 0, 57, 36, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 47, 0, 0, 0, 151, 16, 35, 199, 23, 0, 0, 39, 179, 4, 107, 171, 0, 0, 0, 127, 223, 191, 235, 243, 99, 0, 0, 43, 95, 95, 231, 91, 4, 0, 0, 0, 0, 24, 175, 4, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 43, 81, 87, 70, 0, 0, 0, 118, 208, 130, 56, 5, 0, 0, 0, 0, 113, 35, 0, 0, 0, 0, 0, 0, 5, 138, 130, 0, 0, 0, 0, 1, 49, 175, 155, 0, 0, 0, 69, 183, 169, 38, 0, 0, 0, 0, 40, 45, 9, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 125, 136, 54, 0, 0, 0, 57, 86, 35, 1, 0, 0, 1, 37, 121, 41, 0, 0, 0, 0, 23, 164, 143, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 49, 12, 0, 0, 0, 8, 127, 127, 76, 10, 0, 0, 0, 97, 93, 1, 0, 0, 0, 0, 40, 62, 116, 5, 0, 0, 0, 63, 60, 93, 74, 0, 0, 0, 0, 17, 51, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 63, 19, 0, 0, 0, 12, 107, 159, 115, 47, 0, 0, 63, 123, 4, 0, 0, 0, 0, 0, 55, 151, 107, 0, 0, 0, 0, 0, 23, 27, 159, 0, 0, 0, 0, 31, 179, 147, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 52, 101, 146, 67, 0, 0, 27, 143, 136, 71, 34, 3, 0, 0, 18, 145, 41, 0, 0, 0, 0, 34, 81, 134, 21, 0, 0, 0, 0, 1, 55, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 54, 6, 0, 0, 0, 22, 172, 135, 73, 2, 0, 0, 0, 33, 185, 0, 0, 0, 0, 0, 0, 12, 151, 35, 1, 0, 0, 0, 0, 0, 98, 178, 70, 0, 0, 0, 0, 0, 0, 75, 120, 0, 0, 0, 0, 0, 0, 44, 50, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 118, 1, 0, 0, 0, 0, 0, 95, 100, 0, 0, 0, 0, 0, 0, 43, 149, 2, 0, 0, 0, 0, 0, 0, 180, 39, 0, 0, 0, 0, 0, 23, 184, 26, 0, 0, 0, 0, 71, 160, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 111, 156, 4, 0, 0, 0, 14, 180, 99, 14, 0, 0, 0, 0, 0, 88, 167, 40, 0, 0, 0, 10, 105, 35, 48, 184, 18, 0, 0, 26, 212, 60, 24, 165, 26, 0, 0, 0, 44, 138, 145, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 100, 126, 129, 57, 0, 0, 103, 85, 77, 37, 1, 0, 0, 1, 67, 138, 88, 0, 0, 0, 0, 41, 91, 89, 113, 0, 0, 0, 0, 0, 63, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 108, 132, 97, 14, 0, 0, 0, 106, 105, 38, 0, 0, 0, 15, 11, 75, 114, 0, 0, 0, 0, 76, 124, 125, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 123, 144, 144, 52, 0, 0, 5, 122, 119, 49, 1, 0, 0, 2, 53, 105, 167, 26, 0, 0, 0, 37, 149, 69, 176, 52, 0, 0, 0, 0, 49, 79, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 127, 125, 46, 0, 0, 0, 0, 155, 195, 78, 46, 0, 0, 0, 0, 39, 106, 146, 62, 0, 0, 0, 0, 0, 0, 12, 159, 7, 0, 0, 0, 67, 34, 45, 192, 25, 0, 0, 0, 45, 154, 161, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 57, 117, 133, 55, 0, 0, 28, 123, 65, 39, 6, 0, 0, 0, 77, 128, 76, 0, 0, 0, 0, 30, 88, 75, 111, 0, 0, 0, 0, 0, 62, 54, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 80, 84, 0, 0, 0, 19, 133, 94, 93, 35, 0, 0, 0, 102, 224, 74, 9, 0, 0, 0, 55, 7, 36, 122, 131, 0, 0, 0, 112, 69, 28, 145, 109, 0, 0, 0, 5, 96, 128, 65, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 33, 99, 40, 0, 0, 49, 213, 230, 193, 90, 7, 0, 0, 44, 209, 77, 16, 0, 0, 0, 0, 0, 79, 72, 0, 0, 0, 0, 15, 19, 9, 173, 20, 0, 0, 0, 14, 202, 236, 158, 18, 0, 0, 0, 0, 28, 55, 11, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 70, 193, 162, 102, 0, 0, 0, 10, 191, 102, 13, 0, 0, 0, 42, 0, 16, 107, 147, 0, 0, 0, 96, 104, 49, 122, 121, 0, 0, 0, 0, 49, 100, 58, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 126, 119, 98, 0, 0, 0, 0, 140, 221, 126, 112, 0, 0, 0, 0, 126, 170, 112, 133, 10, 0, 0, 0, 172, 219, 112, 168, 70, 0, 0, 0, 49, 42, 42, 203, 28, 0, 0, 0, 56, 196, 186, 84, 0, 0, 0, 0, 21, 59, 15, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 12, 33, 0, 0, 0, 10, 110, 135, 166, 56, 0, 0, 0, 76, 214, 102, 10, 0, 0, 16, 89, 4, 0, 119, 110, 0, 0, 1, 86, 134, 100, 179, 52, 0, 0, 0, 0, 11, 56, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 131, 118, 109, 60, 0, 0, 0, 168, 80, 33, 9, 0, 0, 0, 0, 44, 158, 25, 0, 0, 0, 0, 0, 0, 28, 167, 48, 0, 0, 0, 4, 93, 18, 66, 168, 11, 0, 0, 2, 115, 136, 160, 162, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 174, 149, 65, 0, 0, 0, 29, 201, 123, 17, 0, 0, 28, 85, 8, 36, 85, 133, 0, 0, 12, 108, 106, 43, 125, 109, 0, 0, 0, 0, 42, 88, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 3, 43, 26, 0, 0, 0, 0, 0, 57, 196, 120, 0, 0, 0, 0, 0, 78, 98, 0, 0, 0, 0, 0, 0, 24, 168, 30, 0, 0, 0, 0, 70, 8, 49, 199, 0, 0, 0, 0, 186, 86, 139, 183, 0, 0, 0, 0, 37, 104, 81, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 90, 78, 95, 62, 0, 0, 0, 10, 179, 70, 39, 34, 0, 0, 0, 0, 105, 165, 131, 99, 0, 0, 0, 7, 2, 4, 0, 110, 57, 0, 0, 60, 68, 0, 0, 76, 78, 0, 0, 0, 89, 98, 130, 129, 1, 0, 0, 0, 0, 31, 46, 5, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 161, 131, 82, 0, 0, 0, 4, 144, 144, 13, 0, 0, 0, 67, 0, 0, 104, 92, 0, 0, 0, 95, 119, 124, 133, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 9, 29, 11, 0, 0, 0, 127, 210, 136, 111, 23, 0, 0, 0, 128, 150, 135, 116, 8, 0, 0, 60, 0, 0, 0, 27, 128, 0, 0, 105, 105, 27, 5, 53, 146, 0, 0, 0, 56, 119, 138, 105, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 46, 67, 63, 0, 0, 0, 0, 8, 141, 42, 1, 0, 0, 0, 0, 0, 113, 118, 103, 69, 0, 0, 0, 0, 16, 14, 0, 88, 23, 0, 0, 0, 0, 0, 0, 76, 24, 0, 0, 0, 1, 85, 109, 118, 0, 0, 0, 0, 0, 8, 56, 14, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 93, 108, 37, 0, 0, 0, 19, 172, 124, 77, 26, 0, 0, 0, 136, 217, 47, 15, 0, 0, 0, 3, 203, 173, 195, 212, 0, 0, 0, 0, 44, 23, 168, 164, 0, 0, 0, 0, 79, 211, 141, 14, 0, 0, 0, 0, 1, 43, 7, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 28, 43, 106, 40, 0, 0, 0, 116, 172, 72, 25, 0, 0, 0, 0, 111, 157, 21, 0, 0, 0, 0, 0, 0, 21, 123, 92, 0, 0, 0, 0, 35, 4, 15, 154, 0, 0, 0, 0, 80, 126, 151, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 1, 0, 0, 0, 79, 56, 92, 107, 14, 0, 0, 80, 197, 77, 8, 0, 0, 0, 42, 25, 3, 84, 96, 0, 0, 0, 30, 135, 92, 139, 52, 0, 0, 0, 0, 6, 27, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 155, 23, 0, 0, 0, 0, 43, 167, 55, 23, 0, 0, 0, 0, 19, 143, 4, 0, 0, 0, 0, 0, 0, 63, 151, 19, 0, 0, 0, 0, 15, 43, 119, 115, 0, 0, 0, 0, 8, 99, 187, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 86, 8, 0, 0, 0, 0, 0, 67, 76, 81, 12, 0, 0, 0, 11, 105, 8, 1, 0, 0, 0, 0, 77, 124, 79, 111, 0, 0, 0, 0, 7, 0, 34, 107, 0, 0, 0, 0, 86, 102, 75, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 69, 44, 0, 0, 0, 4, 114, 134, 87, 50, 0, 0, 0, 42, 213, 59, 6, 0, 0, 0, 50, 0, 0, 109, 136, 0, 0, 0, 119, 104, 81, 157, 60, 0, 0, 0, 0, 32, 39, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 58, 39, 0, 0, 0, 0, 78, 77, 116, 47, 0, 0, 0, 39, 198, 46, 0, 0, 0, 0, 47, 0, 4, 104, 133, 0, 0, 0, 110, 108, 75, 153, 105, 0, 0, 0, 0, 16, 61, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 103, 103, 93, 17, 0, 0, 0, 98, 98, 24, 22, 3, 0, 14, 1, 30, 146, 52, 0, 0, 0, 49, 112, 113, 141, 22, 0, 0, 0, 0, 2, 9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 56, 52, 0, 0, 0, 0, 11, 150, 78, 78, 0, 0, 0, 0, 62, 201, 114, 26, 0, 0, 0, 0, 10, 17, 108, 95, 0, 0, 0, 0, 0, 0, 154, 44, 0, 0, 0, 0, 20, 129, 49, 0, 0, 0, 0, 0, 39, 61, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 148, 130, 72, 0, 0, 0, 26, 182, 95, 7, 0, 0, 0, 65, 21, 6, 105, 119, 0, 0, 0, 51, 130, 123, 144, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 123, 102, 77, 14, 0, 0, 35, 145, 36, 20, 27, 3, 0, 0, 25, 100, 97, 0, 0, 0, 0, 26, 64, 103, 100, 0, 0, 0, 0, 7, 35, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 30, 39, 31, 4, 0, 0, 66, 152, 104, 82, 70, 50, 0, 0, 160, 87, 10, 0, 0, 0, 0, 0, 37, 81, 130, 109, 0, 0, 0, 0, 50, 4, 56, 132, 0, 0, 0, 0, 65, 112, 107, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 101, 104, 59, 1, 0, 0, 0, 128, 165, 107, 156, 41, 0, 0, 0, 163, 163, 17, 0, 0, 0, 0, 0, 147, 174, 211, 50, 0, 0, 0, 0, 37, 22, 192, 96, 0, 0, 0, 0, 52, 193, 220, 60, 0, 0, 0, 0, 0, 28, 41, 2, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 107, 139, 27, 0, 0, 0, 20, 145, 68, 2, 0, 0, 0, 0, 91, 230, 162, 79, 0, 0, 0, 0, 59, 93, 26, 152, 0, 0, 0, 0, 67, 22, 81, 142, 0, 0, 0, 0, 123, 145, 111, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 102, 68, 5, 0, 0, 0, 0, 37, 105, 42, 11, 0, 0, 0, 0, 5, 99, 0, 0, 0, 0, 0, 0, 0, 53, 102, 2, 0, 0, 0, 0, 0, 0, 110, 45, 0, 0, 0, 0, 5, 94, 120, 30, 0, 0, 0, 0, 0, 29, 26, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 132, 158, 127, 105, 56, 0, 0, 3, 168, 15, 36, 68, 12, 0, 0, 0, 153, 145, 53, 6, 0, 0, 0, 0, 0, 32, 118, 175, 68, 0, 0, 43, 63, 5, 54, 170, 78, 0, 0, 70, 174, 171, 131, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 79, 0, 0, 0, 0, 0, 0, 167, 203, 187, 171, 87, 0, 0, 8, 219, 91, 63, 59, 16, 0, 0, 0, 19, 91, 175, 71, 0, 0, 0, 0, 12, 4, 119, 151, 0, 0, 0, 0, 95, 195, 183, 39, 0, 0, 0, 0, 8, 55, 15, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 122, 125, 120, 44, 0, 0, 47, 153, 65, 21, 0, 0, 0, 0, 42, 104, 130, 19, 0, 0, 0, 33, 126, 79, 148, 24, 0, 0, 0, 2, 67, 51, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 59, 0, 0, 0, 0, 0, 3, 78, 54, 7, 0, 0, 0, 0, 14, 127, 126, 47, 0, 0, 0, 0, 0, 0, 42, 105, 0, 0, 0, 0, 42, 6, 141, 69, 0, 0, 0, 0, 51, 138, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 18, 5, 42, 95, 12, 0, 22, 173, 96, 81, 29, 7, 0, 0, 83, 98, 5, 0, 0, 0, 0, 0, 12, 93, 133, 128, 119, 14, 0, 0, 0, 51, 40, 7, 91, 103, 0, 0, 0, 18, 125, 125, 134, 22, 0, 0, 0, 0, 5, 38, 13, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 109, 121, 90, 17, 0, 0, 31, 154, 93, 26, 1, 0, 0, 0, 10, 58, 143, 7, 0, 0, 0, 37, 76, 102, 79, 1, 0, 0, 0, 22, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0, 36, 169, 131, 96, 53, 0, 0, 25, 183, 111, 16, 0, 0, 0, 0, 7, 34, 121, 104, 0, 0, 0, 0, 109, 139, 173, 30, 0, 0, 0, 0, 94, 97, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 58, 71, 28, 0, 0, 3, 91, 103, 69, 29, 5, 0, 0, 52, 186, 27, 0, 0, 0, 0, 0, 0, 9, 138, 0, 0, 0, 0, 5, 29, 86, 104, 0, 0, 0, 0, 19, 165, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 99, 159, 94, 46, 5, 0, 0, 0, 145, 96, 80, 109, 41, 0, 0, 0, 49, 159, 81, 21, 0, 0, 0, 0, 0, 0, 78, 172, 93, 0, 0, 0, 8, 47, 114, 175, 68, 0, 0, 105, 174, 135, 63, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 68, 97, 108, 0, 0, 0, 22, 226, 185, 105, 56, 0, 0, 0, 0, 198, 115, 149, 157, 8, 0, 0, 0, 186, 182, 46, 119, 102, 0, 0, 0, 28, 27, 40, 171, 73, 0, 0, 0, 0, 152, 217, 102, 1, 0, 0, 0, 0, 27, 32, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 21, 5, 0, 0, 0, 60, 125, 116, 93, 51, 0, 0, 67, 145, 49, 0, 0, 0, 0, 0, 95, 143, 23, 0, 0, 0, 0, 0, 44, 79, 120, 0, 0, 0, 0, 0, 115, 97, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 117, 169, 154, 143, 111, 19, 0, 24, 152, 55, 10, 10, 0, 0, 0, 69, 125, 104, 99, 46, 0, 0, 0, 0, 0, 0, 36, 143, 0, 0, 0, 0, 0, 0, 20, 129, 0, 0, 0, 0, 0, 0, 85, 77, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 135, 143, 146, 62, 0, 0, 100, 188, 79, 36, 4, 0, 0, 33, 150, 111, 168, 92, 0, 0, 0, 16, 148, 157, 149, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 106, 110, 68, 0, 0, 0, 0, 250, 172, 117, 124, 2, 0, 0, 0, 253, 218, 182, 171, 12, 0, 0, 0, 98, 60, 12, 148, 97, 0, 0, 0, 15, 2, 82, 227, 65, 0, 0, 0, 109, 213, 207, 108, 0, 0, 0, 0, 1, 27, 29, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 60, 74, 0, 0, 0, 159, 181, 168, 145, 8, 0, 0, 0, 229, 172, 142, 113, 19, 0, 0, 0, 76, 47, 27, 64, 151, 0, 0, 40, 81, 0, 7, 105, 108, 0, 0, 26, 146, 122, 160, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 130, 171, 2, 0, 0, 0, 42, 189, 84, 7, 0, 0, 0, 0, 146, 167, 1, 0, 0, 0, 0, 0, 49, 167, 180, 49, 0, 0, 0, 0, 0, 15, 209, 133, 0, 0, 0, 0, 95, 149, 99, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 75, 71, 13, 0, 0, 18, 156, 250, 155, 24, 1, 0, 0, 8, 73, 96, 170, 0, 0, 0, 34, 163, 166, 214, 157, 0, 0, 0, 105, 137, 139, 143, 33, 0, 0, 0, 22, 74, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 125, 155, 0, 0, 0, 0, 2, 144, 104, 7, 0, 0, 0, 0, 21, 180, 124, 12, 0, 0, 0, 0, 0, 0, 168, 90, 0, 0, 0, 0, 37, 24, 176, 96, 0, 0, 0, 0, 55, 170, 120, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 34, 112, 43, 0, 0, 0, 25, 124, 103, 36, 0, 0, 0, 48, 178, 36, 0, 0, 0, 0, 0, 1, 46, 150, 5, 0, 0, 0, 0, 0, 22, 151, 5, 0, 0, 0, 28, 135, 134, 20, 0, 0, 0, 0, 8, 46, 3, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 129, 124, 21, 0, 0, 0, 4, 148, 68, 0, 0, 0, 0, 0, 93, 224, 154, 62, 0, 0, 0, 0, 84, 25, 62, 200, 0, 0, 0, 60, 43, 37, 135, 164, 0, 0, 0, 34, 140, 134, 69, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 100, 61, 0, 0, 0, 0, 60, 195, 32, 1, 0, 0, 0, 0, 64, 139, 47, 56, 0, 0, 0, 0, 124, 183, 91, 158, 1, 0, 0, 0, 35, 43, 21, 157, 0, 0, 0, 0, 0, 85, 150, 52, 0, 0, 0, 0, 0, 26, 22, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 144, 126, 64, 0, 0, 0, 47, 179, 62, 16, 0, 0, 0, 0, 183, 196, 123, 162, 0, 0, 0, 0, 8, 2, 15, 184, 0, 0, 10, 34, 4, 0, 116, 160, 0, 0, 12, 98, 157, 156, 99, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 122, 126, 126, 31, 0, 0, 60, 196, 84, 34, 45, 13, 0, 45, 220, 224, 157, 120, 1, 0, 0, 21, 87, 47, 12, 158, 67, 0, 0, 9, 31, 0, 38, 200, 52, 0, 0, 24, 189, 185, 185, 93, 0, 0, 0, 0, 15, 18, 9, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 19, 56, 53, 10, 0, 0, 3, 195, 105, 86, 72, 97, 28, 0, 4, 155, 48, 56, 47, 0, 0, 0, 24, 143, 68, 21, 121, 40, 0, 0, 0, 0, 0, 0, 107, 56, 0, 0, 14, 96, 67, 137, 140, 0, 0, 0, 0, 69, 122, 71, 8, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 144, 46, 0, 0, 0, 0, 0, 167, 81, 147, 30, 0, 0, 0, 0, 149, 148, 70, 10, 0, 0, 0, 0, 5, 27, 158, 147, 0, 0, 0, 0, 0, 0, 87, 186, 0, 0, 0, 0, 58, 122, 176, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 93, 114, 115, 26, 0, 0, 7, 130, 128, 42, 34, 5, 0, 0, 122, 240, 155, 69, 0, 0, 0, 0, 68, 39, 70, 188, 0, 0, 0, 59, 29, 1, 156, 141, 0, 0, 0, 35, 191, 193, 116, 12, 0, 0, 0, 0, 28, 42, 1, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 97, 126, 123, 21, 0, 0, 10, 155, 115, 60, 20, 0, 0, 0, 134, 241, 137, 62, 0, 0, 0, 19, 108, 58, 61, 198, 0, 0, 0, 95, 106, 53, 171, 145, 0, 0, 0, 5, 95, 133, 58, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 112, 125, 49, 0, 0, 0, 77, 86, 0, 0, 0, 0, 0, 0, 108, 127, 81, 7, 0, 0, 0, 0, 34, 0, 55, 130, 0, 0, 0, 4, 95, 0, 27, 126, 0, 0, 0, 0, 107, 122, 115, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 81, 130, 119, 2, 0, 0, 2, 127, 115, 33, 1, 0, 0, 0, 76, 223, 77, 7, 0, 0, 0, 0, 69, 96, 154, 129, 0, 0, 0, 34, 34, 3, 185, 98, 0, 0, 0, 36, 155, 166, 76, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 72, 30, 0, 0, 0, 0, 33, 128, 40, 0, 0, 0, 0, 20, 162, 90, 18, 0, 0, 0, 0, 35, 76, 91, 134, 0, 0, 0, 0, 85, 107, 128, 46, 0, 0, 0, 0, 30, 26, 33, 24, 2, 0, 0, 0, 27, 19, 33, 24, 2, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 19, 0, 0, 0, 0, 0, 37, 74, 81, 80, 40, 5, 0, 45, 61, 57, 67, 48, 0, 0, 0, 0, 0, 0, 33, 42, 0, 0, 0, 0, 2, 37, 50, 1, 0, 0, 0, 0, 2, 17, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 135, 111, 14, 0, 0, 27, 150, 108, 23, 0, 0, 0, 0, 141, 214, 152, 59, 0, 0, 0, 0, 0, 0, 79, 168, 0, 0, 0, 37, 41, 19, 172, 109, 0, 0, 0, 41, 166, 163, 59, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 116, 135, 22, 0, 0, 0, 3, 122, 102, 0, 0, 0, 0, 0, 77, 232, 159, 62, 0, 0, 0, 0, 16, 16, 106, 140, 0, 0, 0, 28, 34, 2, 181, 82, 0, 0, 0, 23, 146, 154, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 154, 157, 41, 0, 0, 0, 22, 183, 116, 1, 0, 0, 0, 0, 60, 192, 177, 75, 0, 0, 0, 0, 0, 0, 48, 202, 0, 0, 0, 41, 103, 9, 129, 190, 0, 0, 0, 8, 129, 168, 128, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 129, 58, 0, 0, 0, 0, 1, 170, 35, 0, 0, 0, 0, 0, 0, 69, 135, 4, 0, 0, 0, 0, 0, 0, 120, 131, 0, 0, 0, 0, 26, 27, 147, 106, 0, 0, 0, 0, 133, 108, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 113, 86, 0, 0, 0, 0, 14, 152, 20, 35, 0, 0, 0, 0, 79, 107, 90, 88, 0, 0, 0, 0, 120, 155, 13, 116, 10, 0, 0, 0, 53, 30, 20, 134, 2, 0, 0, 15, 139, 114, 108, 21, 0, 0, 0, 1, 59, 39, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 109, 134, 104, 0, 0, 0, 3, 148, 105, 9, 2, 0, 0, 0, 65, 232, 163, 100, 0, 0, 0, 0, 18, 29, 22, 190, 0, 0, 0, 93, 44, 26, 135, 155, 0, 0, 0, 39, 140, 137, 69, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 144, 168, 92, 0, 0, 0, 4, 131, 99, 1, 0, 0, 0, 0, 72, 233, 143, 53, 0, 0, 0, 0, 90, 82, 85, 188, 0, 0, 0, 59, 2, 19, 178, 117, 0, 0, 0, 70, 168, 163, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 69, 67, 63, 24, 0, 0, 34, 166, 154, 130, 100, 27, 0, 0, 50, 81, 117, 24, 0, 0, 0, 20, 143, 116, 104, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 119, 161, 146, 104, 0, 0, 0, 25, 222, 90, 3, 10, 0, 0, 0, 0, 106, 145, 48, 0, 0, 0, 0, 1, 0, 10, 117, 149, 23, 0, 0, 39, 109, 63, 13, 44, 128, 7, 0, 0, 40, 100, 152, 160, 130, 12, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 140, 132, 89, 24, 0, 0, 15, 133, 76, 12, 0, 0, 0, 10, 110, 138, 176, 62, 0, 0, 0, 24, 163, 155, 87, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 89, 124, 105, 27, 0, 0, 48, 143, 65, 20, 0, 0, 0, 0, 126, 107, 0, 0, 0, 0, 0, 0, 6, 76, 123, 13, 0, 0, 0, 0, 0, 0, 130, 74, 0, 0, 0, 0, 96, 161, 116, 7, 0, 0, 0, 0, 18, 53, 2, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 112, 108, 117, 40, 0, 0, 0, 93, 138, 73, 31, 10, 0, 0, 53, 125, 152, 39, 0, 0, 0, 19, 92, 93, 100, 3, 0, 0, 0, 8, 37, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 74, 137, 23, 0, 0, 0, 0, 113, 238, 23, 0, 0, 0, 0, 0, 53, 244, 104, 131, 6, 0, 0, 0, 37, 201, 159, 219, 49, 0, 0, 0, 99, 155, 79, 220, 33, 0, 0, 0, 18, 98, 189, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 119, 125, 145, 83, 0, 0, 23, 156, 99, 82, 44, 6, 0, 0, 125, 138, 171, 49, 0, 0, 0, 0, 114, 113, 135, 17, 0, 0, 0, 0, 42, 50, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 99, 102, 99, 68, 0, 0, 0, 104, 66, 59, 59, 22, 0, 0, 0, 123, 129, 127, 101, 59, 0, 0, 0, 0, 8, 7, 55, 142, 88, 0, 0, 0, 52, 5, 0, 13, 150, 0, 0, 0, 83, 148, 153, 156, 37, 0, 0, 0, 0, 4, 44, 14, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 65, 80, 80, 29, 0, 0, 45, 149, 100, 75, 29, 4, 0, 1, 63, 92, 85, 0, 0, 0, 0, 14, 107, 110, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 3, 15, 0, 0, 0, 0, 112, 124, 140, 51, 0, 0, 0, 0, 166, 36, 6, 0, 0, 0, 0, 0, 162, 64, 13, 0, 0, 0, 0, 0, 47, 103, 172, 0, 0, 0, 37, 70, 37, 74, 177, 0, 0, 0, 17, 94, 118, 100, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 126, 126, 111, 24, 0, 9, 163, 174, 60, 44, 44, 16, 0, 42, 226, 104, 10, 0, 0, 0, 0, 0, 26, 85, 165, 108, 0, 0, 0, 0, 36, 0, 42, 187, 0, 0, 0, 0, 113, 171, 187, 114, 0, 0, 0, 0, 10, 55, 21, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 92, 84, 7, 0, 0, 0, 34, 150, 89, 62, 6, 0, 0, 0, 58, 75, 0, 0, 0, 0, 0, 2, 0, 160, 44, 0, 0, 0, 51, 73, 31, 153, 19, 0, 0, 0, 36, 192, 141, 10, 0, 0, 0, 0, 0, 49, 10, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 156, 130, 14, 0, 0, 0, 0, 66, 136, 3, 0, 0, 0, 0, 0, 81, 167, 63, 32, 0, 0, 0, 0, 36, 89, 68, 122, 92, 0, 0, 0, 13, 0, 17, 118, 87, 0, 0, 0, 67, 132, 115, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 147, 130, 112, 37, 0, 0, 2, 101, 102, 38, 0, 0, 0, 0, 68, 149, 147, 98, 0, 0, 0, 22, 117, 111, 115, 21, 0, 0, 0, 0, 48, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 53, 91, 15, 0, 0, 0, 0, 162, 87, 14, 0, 0, 0, 0, 0, 131, 44, 6, 6, 0, 0, 0, 0, 65, 153, 132, 158, 5, 0, 0, 0, 2, 18, 0, 117, 36, 0, 0, 0, 0, 0, 6, 140, 23, 0, 0, 0, 0, 0, 6, 48, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 60, 121, 77, 0, 0, 0, 0, 6, 179, 167, 215, 6, 0, 0, 0, 0, 77, 141, 70, 1, 0, 0, 0, 0, 0, 102, 116, 0, 0, 0, 0, 53, 66, 113, 91, 0, 0, 0, 14, 173, 113, 119, 8, 0, 0, 0, 0, 45, 58, 8, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 81, 17, 0, 0, 0, 24, 126, 115, 49, 1, 0, 0, 47, 170, 104, 42, 0, 0, 0, 0, 86, 57, 46, 112, 0, 0, 0, 56, 77, 81, 135, 57, 0, 0, 0, 24, 103, 94, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 77, 121, 28, 0, 0, 0, 7, 146, 79, 68, 19, 0, 0, 0, 39, 153, 54, 11, 0, 0, 0, 0, 82, 199, 161, 112, 0, 0, 0, 2, 14, 21, 90, 122, 0, 0, 0, 36, 131, 138, 105, 21, 0, 0, 0, 0, 40, 17, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 61, 85, 15, 0, 0, 0, 34, 151, 63, 4, 0, 0, 0, 25, 181, 151, 49, 0, 0, 0, 0, 36, 50, 99, 70, 0, 0, 0, 65, 65, 76, 138, 18, 0, 0, 0, 27, 115, 114, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 23, 7, 0, 0, 0, 2, 96, 149, 136, 24, 0, 0, 0, 92, 81, 17, 0, 0, 0, 0, 66, 126, 92, 39, 0, 0, 0, 4, 42, 89, 69, 159, 0, 0, 0, 72, 167, 154, 169, 115, 0, 0, 0, 0, 43, 78, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 0, 0, 25, 127, 118, 94, 14, 0, 0, 16, 139, 130, 32, 0, 0, 0, 21, 93, 121, 88, 98, 0, 0, 0, 17, 164, 215, 141, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 127, 79, 47, 4, 0, 0, 0, 0, 135, 67, 91, 19, 0, 0, 0, 39, 179, 115, 39, 0, 0, 0, 0, 75, 211, 43, 159, 0, 0, 0, 47, 59, 79, 43, 159, 0, 0, 0, 19, 99, 71, 107, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 58, 87, 48, 0, 0, 7, 100, 113, 108, 62, 16, 0, 0, 27, 143, 99, 7, 0, 0, 0, 7, 56, 27, 105, 122, 0, 0, 0, 41, 243, 194, 203, 110, 0, 0, 0, 0, 69, 99, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 94, 80, 27, 0, 0, 0, 8, 74, 6, 0, 0, 0, 0, 0, 86, 127, 34, 0, 0, 0, 22, 76, 101, 110, 25, 0, 0, 0, 30, 217, 164, 73, 0, 0, 0, 0, 0, 9, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 3, 23, 13, 0, 0, 0, 36, 97, 72, 31, 5, 0, 0, 19, 138, 70, 71, 0, 0, 0, 20, 33, 17, 39, 69, 0, 0, 0, 28, 155, 152, 95, 16, 0, 0, 0, 0, 8, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 152, 105, 87, 41, 1, 0, 0, 139, 67, 5, 0, 0, 0, 0, 2, 157, 123, 121, 120, 21, 0, 0, 1, 15, 0, 0, 9, 134, 0, 0, 56, 25, 0, 0, 31, 109, 0, 0, 27, 124, 113, 107, 91, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 105, 105, 82, 23, 0, 0, 1, 201, 107, 94, 65, 36, 0, 0, 2, 206, 155, 102, 32, 0, 0, 0, 15, 83, 17, 91, 177, 71, 0, 0, 19, 27, 12, 35, 156, 125, 0, 0, 19, 182, 240, 192, 137, 5, 0, 0, 0, 12, 51, 12, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 40, 96, 75, 0, 0, 0, 0, 149, 176, 60, 25, 0, 0, 0, 0, 56, 184, 122, 35, 0, 0, 0, 0, 28, 127, 28, 136, 0, 0, 0, 0, 0, 5, 11, 135, 0, 0, 0, 0, 68, 141, 146, 69, 0, 0, 0, 0, 0, 34, 33, 0, 0, 0 },
    { 0, 0, 0, 0, 24, 1, 0, 0, 0, 0, 0, 57, 139, 64, 0, 0, 0, 0, 0, 34, 95, 0, 0, 0, 0, 0, 0, 0, 112, 66, 0, 0, 0, 0, 0, 0, 3, 105, 33, 0, 57, 65, 19, 9, 53, 129, 33, 0, 1, 43, 95, 88, 50, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 4, 0, 0, 0, 0, 0, 111, 235, 175, 179, 187, 63, 0, 0, 143, 231, 151, 139, 107, 39, 0, 0, 16, 59, 199, 43, 0, 0, 0, 47, 179, 103, 215, 119, 0, 0, 0, 4, 83, 143, 147, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 102, 96, 103, 19, 0, 0, 7, 136, 214, 165, 144, 29, 0, 0, 116, 241, 163, 19, 0, 0, 0, 11, 102, 77, 235, 112, 0, 0, 0, 34, 231, 120, 194, 40, 0, 0, 0, 0, 90, 224, 118, 0, 0, 0, 0, 0, 0, 37, 13, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 23, 73, 24, 0, 0, 31, 151, 243, 230, 190, 66, 0, 0, 185, 249, 100, 40, 10, 2, 0, 0, 82, 167, 191, 40, 0, 0, 0, 26, 204, 112, 180, 10, 0, 0, 0, 0, 69, 187, 140, 7, 0, 0, 0, 0, 0, 17, 12, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 6, 0, 0, 0, 0, 60, 153, 198, 104, 7, 0, 0, 0, 105, 201, 156, 130, 124, 69, 0, 0, 5, 2, 0, 0, 3, 165, 52, 0, 0, 77, 43, 64, 120, 154, 19, 0, 0, 74, 106, 91, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 21, 17, 1, 0, 0, 0, 0, 0, 122, 113, 63, 0, 0, 0, 0, 0, 115, 0, 0, 0, 0, 0, 0, 0, 147, 86, 35, 0, 0, 0, 0, 49, 53, 8, 115, 0, 0, 0, 0, 127, 67, 109, 125, 0, 0, 0, 0, 26, 104, 65, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 65, 168, 158, 155, 19, 0, 0, 65, 224, 104, 64, 50, 5, 0, 5, 29, 144, 124, 0, 0, 0, 0, 60, 158, 153, 76, 0, 0, 0, 0, 0, 36, 60, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 94, 184, 164, 154, 31, 0, 0, 56, 221, 143, 54, 37, 7, 0, 1, 14, 74, 201, 14, 0, 0, 0, 54, 146, 113, 148, 4, 0, 0, 0, 0, 48, 87, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 57, 0, 0, 0, 0, 0, 0, 90, 140, 100, 96, 67, 17, 0, 0, 104, 82, 0, 0, 0, 0, 0, 0, 6, 77, 116, 23, 0, 0, 0, 0, 0, 0, 54, 94, 0, 0, 0, 9, 80, 93, 106, 61, 0, 0, 0, 2, 50, 60, 17, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 105, 89, 0, 0, 0, 0, 32, 148, 118, 146, 34, 0, 0, 0, 86, 134, 20, 3, 0, 0, 0, 0, 125, 199, 165, 146, 0, 0, 0, 0, 33, 35, 96, 126, 0, 0, 0, 19, 140, 146, 128, 8, 0, 0, 0, 0, 2, 37, 9, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 82, 78, 90, 49, 0, 0, 76, 224, 158, 208, 190, 79, 0, 5, 51, 140, 153, 0, 0, 0, 0, 39, 142, 99, 135, 0, 0, 0, 0, 0, 50, 126, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 137, 198, 192, 208, 93, 0, 0, 154, 245, 91, 101, 84, 35, 0, 16, 17, 55, 134, 0, 0, 0, 0, 52, 117, 27, 159, 0, 0, 0, 0, 0, 122, 189, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 135, 149, 124, 18, 0, 0, 0, 0, 103, 99, 40, 0, 0, 0, 0, 0, 154, 66, 12, 0, 0, 0, 0, 0, 81, 116, 194, 6, 0, 0, 87, 59, 3, 94, 195, 3, 0, 0, 49, 162, 162, 101, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 97, 170, 164, 16, 0, 0, 17, 136, 191, 123, 32, 0, 0, 34, 123, 138, 162, 1, 0, 0, 0, 80, 207, 139, 92, 0, 0, 0, 0, 0, 50, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 31, 0, 0, 0, 0, 0, 11, 155, 159, 135, 8, 0, 0, 0, 87, 143, 4, 20, 0, 0, 0, 0, 155, 111, 43, 8, 0, 0, 0, 0, 51, 143, 195, 79, 0, 0, 0, 0, 0, 4, 139, 23, 0, 0, 0, 0, 0, 4, 19, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 62, 115, 125, 21, 0, 0, 0, 131, 133, 16, 7, 0, 0, 0, 0, 163, 84, 0, 0, 0, 0, 0, 0, 46, 93, 110, 94, 0, 0, 0, 0, 6, 0, 0, 74, 23, 0, 0, 0, 115, 143, 131, 126, 6, 0, 0, 0, 10, 49, 26, 2, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 99, 77, 31, 0, 0, 0, 1, 200, 206, 254, 153, 0, 0, 0, 6, 244, 219, 180, 203, 10, 0, 0, 0, 27, 0, 0, 121, 100, 0, 0, 0, 38, 16, 0, 108, 85, 0, 0, 2, 102, 165, 196, 163, 5, 0, 0, 0, 0, 14, 51, 17, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 20, 20, 61, 31, 0, 42, 228, 199, 195, 156, 91, 26, 0, 58, 217, 104, 45, 1, 0, 0, 0, 8, 134, 86, 133, 144, 0, 0, 0, 0, 0, 0, 67, 218, 0, 0, 0, 0, 51, 114, 193, 101, 0, 0, 0, 0, 85, 114, 47, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 175, 46, 125, 145, 105, 52, 0, 63, 162, 105, 162, 32, 0, 0, 0, 24, 140, 150, 105, 18, 0, 0, 0, 0, 0, 33, 108, 124, 0, 0, 0, 0, 0, 0, 112, 126, 0, 0, 0, 0, 0, 23, 70, 11, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 13, 0, 13, 21, 0, 0, 2, 217, 207, 179, 150, 20, 0, 0, 2, 143, 191, 25, 2, 0, 0, 0, 0, 0, 45, 189, 84, 0, 0, 0, 0, 18, 4, 120, 164, 0, 0, 0, 0, 72, 157, 204, 68, 0, 0, 0, 0, 5, 77, 50, 3, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 102, 133, 120, 111, 35, 0, 0, 89, 178, 18, 0, 0, 0, 0, 0, 6, 51, 167, 67, 0, 0, 0, 22, 137, 141, 192, 58, 0, 0, 0, 12, 74, 51, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 163, 143, 127, 87, 0, 0, 0, 51, 171, 79, 95, 67, 0, 0, 0, 83, 207, 183, 171, 135, 0, 0, 0, 35, 107, 19, 0, 115, 107, 0, 0, 0, 75, 43, 32, 71, 179, 0, 0, 0, 111, 127, 163, 187, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 82, 167, 159, 108, 28, 0, 9, 153, 177, 63, 23, 3, 0, 0, 21, 138, 160, 148, 20, 0, 0, 0, 0, 0, 4, 189, 81, 0, 0, 0, 0, 79, 146, 92, 4, 0, 0, 0, 0, 1, 5, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 62, 96, 95, 52, 0, 0, 32, 143, 88, 43, 8, 2, 0, 0, 42, 71, 145, 16, 0, 0, 0, 0, 152, 198, 123, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 82, 40, 0, 0, 0, 62, 155, 166, 58, 9, 0, 0, 6, 146, 84, 13, 0, 0, 0, 6, 53, 193, 164, 17, 0, 0, 0, 42, 47, 45, 164, 9, 0, 0, 0, 0, 122, 149, 23, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 67, 32, 0, 0, 0, 27, 115, 108, 43, 14, 0, 0, 36, 163, 51, 0, 0, 0, 0, 0, 23, 63, 159, 32, 0, 0, 0, 21, 182, 185, 94, 3, 0, 0, 0, 1, 47, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 61, 46, 3, 0, 0, 0, 0, 104, 143, 88, 53, 0, 0, 0, 7, 161, 22, 0, 0, 0, 0, 0, 30, 159, 190, 58, 0, 0, 0, 0, 0, 8, 145, 97, 0, 0, 0, 0, 33, 115, 105, 2, 0, 0, 0, 0, 80, 80, 1, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 35, 56, 96, 76, 0, 0, 53, 103, 115, 108, 59, 14, 0, 0, 107, 106, 49, 0, 0, 0, 0, 0, 111, 145, 66, 0, 0, 0, 0, 0, 9, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 87, 90, 0, 0, 0, 0, 102, 200, 99, 47, 0, 0, 0, 0, 73, 198, 45, 0, 0, 0, 0, 0, 0, 25, 181, 39, 0, 0, 0, 0, 0, 3, 162, 118, 0, 0, 0, 0, 111, 159, 89, 11, 0, 0, 0, 0, 35, 38, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 67, 93, 113, 97, 51, 0, 0, 79, 187, 56, 1, 0, 0, 0, 0, 3, 31, 141, 30, 0, 0, 0, 0, 92, 122, 177, 72, 0, 0, 0, 0, 56, 76, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 99, 71, 93, 61, 0, 0, 0, 115, 176, 96, 75, 24, 0, 0, 0, 120, 200, 65, 6, 0, 0, 0, 0, 98, 150, 111, 154, 0, 0, 0, 1, 1, 2, 46, 192, 0, 0, 0, 32, 140, 147, 169, 71, 0, 0, 0, 0, 38, 58, 15, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 51, 37, 0, 0, 11, 89, 49, 127, 64, 32, 0, 0, 137, 206, 59, 11, 0, 0, 0, 0, 23, 83, 222, 85, 0, 0, 0, 0, 165, 212, 227, 71, 0, 0, 0, 0, 1, 35, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 58, 1, 0, 0, 7, 132, 120, 87, 55, 2, 0, 0, 24, 170, 77, 72, 18, 0, 0, 0, 0, 37, 59, 96, 147, 0, 0, 0, 0, 0, 0, 133, 105, 0, 0, 0, 0, 0, 99, 126, 7, 0, 0, 0, 0, 0, 78, 7, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 122, 160, 8, 0, 0, 0, 55, 227, 88, 32, 0, 0, 0, 0, 23, 180, 44, 0, 0, 0, 0, 0, 0, 21, 199, 68, 0, 0, 0, 0, 47, 2, 166, 117, 0, 0, 0, 0, 104, 142, 141, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 114, 146, 4, 0, 0, 0, 16, 157, 48, 4, 0, 0, 0, 0, 44, 138, 0, 0, 0, 0, 0, 0, 2, 108, 95, 2, 0, 0, 0, 0, 0, 6, 152, 63, 0, 0, 0, 0, 56, 123, 153, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 89, 61, 40, 8, 0, 0, 0, 191, 148, 131, 118, 40, 0, 0, 25, 229, 194, 172, 70, 2, 0, 0, 74, 111, 10, 54, 162, 119, 0, 0, 12, 6, 0, 0, 31, 186, 5, 0, 0, 51, 145, 173, 155, 79, 0, 0, 0, 9, 41, 50, 7, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 49, 98, 63, 0, 0, 0, 7, 207, 182, 126, 129, 7, 0, 0, 5, 226, 161, 38, 1, 0, 0, 0, 0, 29, 98, 200, 165, 0, 0, 0, 0, 0, 21, 161, 203, 0, 0, 0, 0, 77, 210, 140, 31, 0, 0, 0, 0, 12, 31, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 118, 109, 94, 16, 0, 0, 46, 185, 94, 13, 0, 0, 0, 0, 33, 40, 129, 70, 0, 0, 0, 28, 86, 97, 136, 27, 0, 0, 0, 24, 68, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 53, 18, 0, 0, 30, 110, 116, 107, 49, 14, 0, 0, 120, 137, 8, 0, 0, 0, 0, 0, 7, 52, 138, 67, 0, 0, 0, 19, 87, 116, 147, 51, 0, 0, 0, 3, 62, 46, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 4, 0, 0, 6, 121, 119, 97, 76, 13, 0, 0, 42, 170, 113, 28, 0, 0, 0, 2, 27, 34, 81, 136, 0, 0, 0, 85, 216, 222, 170, 63, 0, 0, 0, 0, 14, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 83, 53, 45, 10, 0, 0, 73, 157, 53, 73, 58, 7, 0, 0, 54, 126, 128, 8, 0, 0, 0, 24, 0, 0, 126, 65, 0, 0, 0, 78, 12, 0, 116, 83, 0, 0, 0, 7, 114, 140, 131, 22, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 92, 45, 0, 0, 26, 139, 140, 112, 45, 3, 0, 0, 84, 133, 3, 0, 0, 0, 0, 0, 1, 74, 75, 0, 0, 0, 0, 36, 34, 0, 122, 7, 0, 0, 0, 2, 129, 136, 127, 8, 0, 0, 0, 0, 2, 17, 2, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 69, 129, 131, 121, 25, 0, 0, 79, 71, 15, 0, 0, 0, 0, 16, 56, 108, 39, 0, 0, 0, 0, 65, 84, 32, 129, 0, 0, 0, 0, 0, 38, 82, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 3, 0, 0, 2, 67, 119, 114, 98, 44, 0, 0, 112, 119, 20, 5, 0, 0, 0, 0, 130, 136, 110, 22, 0, 0, 0, 0, 30, 11, 171, 60, 0, 0, 0, 0, 109, 115, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 45, 0, 5, 0, 0, 0, 0, 55, 177, 127, 106, 16, 0, 0, 0, 89, 104, 0, 0, 0, 0, 0, 0, 52, 119, 101, 117, 0, 0, 0, 0, 8, 19, 3, 153, 0, 0, 0, 0, 10, 112, 147, 75, 0, 0, 0, 0, 0, 19, 24, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 93, 90, 11, 0, 0, 0, 19, 96, 0, 0, 0, 0, 0, 0, 122, 131, 57, 6, 0, 0, 0, 12, 66, 3, 27, 104, 2, 0, 0, 0, 93, 8, 0, 92, 6, 0, 0, 0, 26, 93, 94, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 49, 129, 126, 126, 69, 0, 28, 168, 96, 113, 20, 7, 4, 0, 6, 89, 73, 135, 114, 0, 0, 0, 0, 60, 7, 113, 105, 0, 0, 0, 0, 75, 147, 85, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 49, 52, 13, 0, 0, 2, 106, 146, 121, 80, 30, 0, 0, 18, 148, 9, 0, 0, 0, 0, 8, 3, 52, 85, 0, 0, 0, 0, 50, 59, 0, 134, 1, 0, 0, 0, 4, 133, 143, 71, 0, 0, 0, 0, 0, 2, 5, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 181, 230, 225, 207, 193, 69, 0, 53, 176, 136, 97, 88, 81, 19, 0, 37, 230, 178, 206, 89, 0, 0, 0, 3, 127, 6, 104, 162, 0, 0, 0, 0, 123, 206, 203, 96, 0, 0, 0, 0, 3, 36, 29, 2, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 12, 0, 0, 0, 37, 133, 189, 166, 119, 35, 0, 1, 115, 81, 61, 21, 0, 0, 0, 15, 98, 77, 106, 44, 0, 0, 0, 8, 0, 0, 38, 105, 0, 0, 0, 56, 106, 99, 106, 41, 0, 0, 0, 0, 24, 50, 11, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 112, 89, 27, 0, 0, 0, 0, 144, 64, 47, 22, 0, 0, 0, 0, 210, 131, 123, 24, 0, 0, 0, 0, 26, 0, 52, 142, 0, 0, 0, 0, 0, 0, 23, 161, 0, 0, 0, 0, 9, 109, 160, 75, 0, 0, 0, 0, 0, 23, 33, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 136, 121, 111, 23, 0, 0, 0, 108, 62, 21, 0, 0, 0, 17, 0, 81, 26, 0, 0, 0, 0, 89, 39, 22, 88, 0, 0, 0, 0, 1, 79, 96, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 24, 0, 0, 15, 65, 132, 147, 132, 47, 0, 0, 98, 151, 67, 17, 0, 0, 0, 0, 47, 115, 0, 0, 0, 0, 0, 29, 50, 119, 7, 0, 0, 0, 0, 2, 117, 154, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 60, 49, 2, 0, 0, 0, 6, 83, 83, 91, 89, 40, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 124, 111, 14, 0, 0, 0, 0, 0, 15, 93, 122, 0, 0, 0, 0, 0, 48, 127, 131, 0, 0, 0, 0, 0, 9, 53, 35, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 77, 124, 102, 54, 0, 0, 82, 150, 17, 28, 0, 0, 0, 0, 102, 124, 67, 0, 0, 0, 0, 0, 85, 47, 137, 0, 0, 0, 0, 0, 41, 72, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 11, 0, 0, 0, 87, 129, 128, 92, 20, 0, 0, 3, 122, 18, 0, 0, 0, 0, 2, 0, 45, 70, 0, 0, 0, 0, 77, 7, 20, 95, 0, 0, 0, 0, 23, 112, 102, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 106, 56, 0, 0, 16, 93, 150, 130, 42, 16, 0, 0, 107, 142, 24, 0, 0, 0, 0, 0, 47, 114, 0, 0, 0, 0, 0, 15, 25, 88, 50, 0, 0, 0, 0, 13, 147, 139, 91, 0, 0, 0, 0, 0, 25, 62, 6, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 98, 137, 43, 0, 0, 0, 0, 131, 120, 0, 0, 0, 0, 0, 0, 81, 166, 15, 0, 0, 0, 0, 0, 1, 33, 153, 92, 0, 0, 0, 0, 78, 41, 27, 162, 13, 0, 0, 0, 13, 92, 135, 145, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 98, 28, 0, 0, 0, 0, 70, 238, 126, 179, 91, 0, 0, 0, 175, 175, 0, 15, 12, 0, 0, 0, 100, 189, 182, 29, 0, 0, 0, 0, 42, 7, 217, 91, 0, 0, 0, 0, 123, 217, 210, 56, 0, 0, 0, 0, 5, 49, 27, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 100, 97, 25, 0, 0, 0, 94, 208, 122, 115, 28, 0, 0, 0, 181, 192, 51, 2, 0, 0, 0, 0, 87, 108, 162, 139, 0, 0, 0, 0, 45, 11, 103, 185, 0, 0, 0, 6, 200, 233, 186, 62, 0, 0, 0, 0, 28, 44, 14, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 64, 101, 46, 0, 0, 0, 0, 92, 110, 29, 0, 0, 0, 0, 0, 97, 85, 5, 0, 0, 0, 0, 0, 13, 123, 89, 0, 0, 0, 0, 0, 0, 88, 79, 0, 0, 0, 3, 139, 172, 110, 1, 0, 0, 0, 0, 7, 42, 6, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 32, 0, 0, 0, 18, 78, 162, 227, 138, 14, 0, 0, 108, 208, 137, 88, 2, 0, 0, 0, 83, 151, 0, 0, 0, 0, 0, 0, 5, 134, 19, 0, 0, 0, 0, 12, 179, 197, 12, 0, 0, 0, 0, 0, 96, 67, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 116, 171, 189, 50, 0, 0, 0, 127, 178, 63, 63, 15, 0, 0, 21, 225, 173, 147, 119, 4, 0, 0, 20, 114, 82, 20, 151, 44, 0, 0, 24, 41, 29, 107, 209, 16, 0, 0, 67, 189, 186, 132, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 128, 138, 60, 0, 0, 0, 4, 139, 52, 4, 0, 0, 0, 0, 76, 213, 117, 112, 0, 0, 0, 0, 11, 11, 5, 138, 0, 0, 0, 23, 0, 3, 126, 110, 0, 0, 0, 78, 132, 136, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 189, 158, 1, 0, 0, 0, 0, 180, 117, 59, 0, 0, 0, 0, 5, 185, 192, 63, 0, 0, 0, 37, 27, 0, 35, 182, 17, 0, 0, 62, 159, 70, 132, 218, 18, 0, 0, 0, 147, 183, 110, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 174, 144, 0, 0, 0, 0, 23, 205, 125, 73, 0, 0, 0, 0, 80, 249, 144, 37, 0, 0, 0, 0, 15, 68, 117, 180, 0, 0, 0, 7, 141, 116, 184, 193, 0, 0, 0, 4, 119, 172, 121, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 96, 122, 103, 0, 0, 0, 14, 202, 143, 101, 65, 0, 0, 0, 40, 233, 183, 198, 137, 10, 0, 0, 15, 96, 45, 20, 106, 91, 0, 0, 0, 24, 35, 10, 106, 43, 0, 0, 0, 61, 212, 211, 156, 0, 0, 0, 0, 0, 32, 53, 10, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 75, 127, 163, 31, 0, 0, 35, 183, 203, 115, 67, 8, 0, 0, 119, 223, 35, 0, 0, 0, 0, 0, 175, 179, 187, 43, 0, 0, 0, 8, 83, 95, 211, 99, 0, 0, 0, 0, 171, 183, 99, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 16, 86, 88, 87, 86, 55, 0, 0, 104, 142, 20, 0, 0, 0, 0, 0, 22, 105, 41, 0, 0, 0, 0, 0, 76, 13, 103, 0, 0, 0, 0, 0, 47, 106, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 73, 123, 52, 0, 0, 0, 0, 78, 180, 43, 11, 0, 0, 0, 0, 18, 148, 55, 0, 0, 0, 0, 0, 0, 4, 168, 55, 0, 0, 0, 0, 0, 0, 130, 100, 0, 0, 0, 0, 71, 144, 108, 18, 0, 0, 0, 0, 27, 37, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 100, 121, 0, 0, 0, 2, 155, 209, 168, 62, 0, 0, 0, 67, 231, 37, 1, 0, 0, 0, 0, 22, 121, 200, 56, 0, 0, 0, 12, 51, 71, 209, 105, 0, 0, 0, 21, 180, 168, 87, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 53, 122, 178, 56, 0, 0, 0, 91, 246, 183, 98, 14, 0, 0, 0, 157, 253, 202, 77, 0, 0, 0, 4, 12, 26, 46, 169, 0, 0, 0, 98, 120, 96, 156, 207, 0, 0, 0, 61, 174, 186, 144, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 104, 17, 0, 0, 0, 108, 131, 67, 3, 0, 0, 0, 0, 100, 129, 31, 0, 0, 0, 0, 0, 0, 1, 120, 77, 0, 0, 0, 0, 19, 19, 44, 124, 0, 0, 0, 0, 37, 136, 140, 56, 0, 0, 0, 0, 0, 37, 26, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 110, 190, 146, 3, 0, 0, 0, 148, 252, 107, 88, 3, 0, 0, 0, 222, 253, 162, 66, 0, 0, 0, 0, 17, 20, 55, 171, 29, 0, 0, 0, 110, 91, 89, 173, 55, 0, 0, 1, 139, 188, 175, 118, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 79, 106, 50, 8, 0, 0, 0, 61, 221, 60, 71, 14, 0, 0, 0, 128, 151, 0, 0, 0, 0, 0, 0, 177, 123, 77, 37, 0, 0, 0, 0, 81, 192, 178, 177, 8, 0, 0, 0, 0, 0, 100, 143, 3, 0, 0, 0, 0, 0, 41, 15, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 102, 114, 60, 0, 0, 0, 3, 71, 12, 4, 0, 0, 0, 0, 58, 88, 0, 0, 0, 0, 0, 0, 112, 158, 137, 109, 0, 0, 0, 0, 26, 56, 98, 94, 0, 0, 0, 0, 82, 108, 58, 1, 0, 0, 0, 0, 42, 19, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 127, 175, 6, 0, 0, 0, 37, 218, 149, 82, 3, 0, 0, 0, 64, 241, 150, 15, 0, 0, 0, 0, 0, 6, 117, 151, 0, 0, 0, 32, 146, 84, 145, 181, 0, 0, 0, 14, 160, 182, 108, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 29, 110, 140, 136, 23, 0, 0, 127, 92, 56, 44, 15, 1, 0, 0, 186, 172, 74, 5, 0, 0, 0, 7, 1, 12, 118, 129, 0, 0, 0, 62, 60, 41, 99, 127, 0, 0, 0, 20, 143, 146, 100, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 42, 12, 0, 0, 0, 47, 149, 164, 106, 37, 0, 0, 13, 144, 49, 8, 0, 0, 0, 0, 8, 147, 23, 0, 0, 0, 0, 23, 39, 71, 93, 0, 0, 0, 0, 18, 138, 155, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 136, 126, 94, 12, 0, 0, 0, 78, 94, 0, 0, 0, 0, 0, 12, 187, 126, 100, 77, 0, 0, 0, 44, 34, 0, 0, 68, 50, 0, 0, 20, 2, 0, 0, 78, 56, 0, 0, 19, 116, 111, 110, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 102, 147, 75, 0, 0, 0, 0, 28, 149, 31, 1, 0, 0, 0, 0, 24, 181, 149, 60, 0, 0, 0, 0, 0, 0, 28, 119, 0, 0, 0, 0, 25, 48, 57, 129, 0, 0, 0, 0, 31, 141, 161, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 96, 135, 108, 22, 0, 0, 42, 217, 54, 4, 0, 0, 0, 0, 87, 191, 45, 1, 0, 0, 0, 0, 69, 93, 157, 62, 0, 0, 0, 0, 17, 58, 158, 100, 0, 0, 0, 0, 146, 188, 174, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 75, 119, 117, 16, 0, 0, 47, 185, 80, 38, 7, 0, 0, 0, 177, 224, 145, 47, 0, 0, 0, 0, 28, 8, 52, 163, 0, 0, 0, 76, 109, 117, 127, 185, 0, 0, 0, 18, 98, 110, 70, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 56, 93, 42, 0, 0, 0, 4, 124, 84, 55, 1, 0, 0, 0, 10, 137, 3, 0, 0, 0, 0, 0, 0, 46, 118, 1, 0, 0, 0, 0, 5, 0, 135, 16, 0, 0, 0, 0, 116, 121, 102, 0, 0, 0, 0, 0, 20, 62, 8, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 25, 49, 54, 20, 0, 0, 10, 142, 133, 95, 76, 30, 0, 0, 137, 219, 61, 9, 0, 0, 0, 0, 35, 51, 121, 145, 0, 0, 0, 1, 21, 33, 96, 161, 0, 0, 0, 29, 158, 158, 143, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 167, 164, 134, 49, 0, 0, 0, 141, 157, 6, 0, 19, 0, 0, 0, 150, 204, 165, 127, 16, 0, 0, 0, 0, 0, 2, 119, 84, 0, 0, 7, 106, 114, 50, 126, 63, 0, 0, 10, 125, 181, 165, 128, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 16, 63, 45, 0, 0, 5, 146, 165, 136, 75, 10, 0, 0, 91, 203, 15, 0, 0, 0, 0, 0, 79, 106, 162, 58, 0, 0, 0, 0, 0, 0, 92, 132, 0, 0, 0, 32, 153, 117, 142, 40, 0, 0, 0, 0, 7, 17, 3, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 118, 87, 52, 53, 4, 0, 0, 0, 152, 211, 139, 79, 1, 0, 0, 0, 36, 109, 156, 120, 0, 0, 0, 0, 0, 0, 9, 194, 14, 0, 0, 4, 60, 0, 42, 191, 2, 0, 0, 0, 127, 156, 174, 80, 0, 0, 0, 0, 7, 50, 49, 4, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 50, 55, 42, 2, 0, 0, 0, 156, 129, 100, 94, 104, 46, 0, 0, 158, 17, 6, 0, 0, 0, 0, 0, 102, 138, 160, 98, 0, 0, 0, 0, 0, 0, 19, 158, 18, 0, 0, 0, 92, 100, 149, 149, 7, 0, 0, 0, 50, 106, 55, 10, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 55, 85, 62, 0, 0, 0, 0, 33, 124, 24, 0, 0, 0, 0, 0, 65, 175, 106, 51, 0, 0, 0, 0, 1, 3, 5, 113, 0, 0, 0, 0, 0, 0, 24, 125, 0, 0, 0, 0, 79, 99, 123, 30, 0, 0, 0, 0, 1, 31, 14, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 88, 83, 28, 0, 0, 0, 58, 187, 109, 124, 49, 0, 0, 0, 163, 218, 45, 0, 0, 0, 0, 0, 60, 50, 165, 47, 0, 0, 0, 0, 27, 0, 98, 133, 0, 0, 0, 4, 200, 216, 183, 121, 0, 0, 0, 0, 27, 56, 29, 2, 0, 0 },
    { 0, 0, 0, 12, 47, 63, 32, 0, 0, 0, 41, 171, 138, 127, 58, 0, 0, 0, 110, 138, 0, 0, 0, 0, 0, 0, 126, 185, 110, 63, 0, 0, 0, 0, 3, 12, 18, 153, 31, 0, 0, 8, 181, 179, 150, 206, 59, 0, 0, 0, 48, 100, 122, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 21, 33, 53, 10, 0, 0, 10, 85, 145, 125, 97, 16, 0, 0, 97, 148, 0, 0, 0, 0, 0, 0, 147, 171, 67, 10, 0, 0, 0, 0, 24, 32, 70, 164, 1, 0, 0, 0, 133, 127, 88, 182, 7, 0, 0, 0, 35, 106, 127, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 120, 110, 34, 0, 0, 0, 0, 91, 108, 2, 0, 0, 0, 0, 0, 81, 173, 136, 98, 0, 0, 0, 0, 83, 178, 1, 96, 61, 0, 0, 0, 27, 51, 0, 58, 88, 0, 0, 0, 2, 114, 129, 122, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 64, 44, 92, 3, 0, 0, 1, 133, 86, 89, 1, 0, 0, 0, 20, 154, 58, 2, 0, 0, 0, 0, 22, 157, 0, 0, 0, 0, 0, 0, 3, 117, 123, 50, 0, 0, 0, 0, 33, 111, 128, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 159, 129, 2, 0, 0, 0, 105, 234, 139, 36, 0, 0, 0, 7, 212, 155, 147, 173, 0, 0, 0, 75, 10, 0, 2, 180, 6, 0, 0, 122, 55, 8, 34, 215, 12, 0, 0, 16, 128, 172, 184, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 76, 114, 68, 0, 0, 0, 69, 210, 97, 13, 0, 0, 0, 0, 81, 158, 8, 0, 0, 0, 0, 0, 99, 139, 131, 45, 0, 0, 0, 0, 8, 3, 88, 123, 0, 0, 0, 0, 98, 125, 160, 39, 0, 0, 0, 0, 12, 57, 26, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 77, 71, 79, 79, 59, 0, 0, 205, 195, 115, 84, 76, 39, 0, 0, 253, 191, 0, 0, 0, 0, 0, 0, 253, 253, 130, 54, 0, 0, 0, 0, 126, 167, 139, 212, 14, 0, 0, 0, 52, 168, 170, 180, 12, 0, 0, 0, 0, 9, 39, 15, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 153, 131, 12, 0, 0, 0, 0, 63, 84, 0, 0, 0, 0, 0, 0, 124, 140, 68, 0, 0, 0, 0, 0, 0, 43, 199, 0, 0, 0, 0, 2, 38, 172, 127, 0, 0, 0, 90, 156, 125, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 18, 11, 10, 1, 0, 0, 20, 209, 139, 128, 138, 62, 0, 0, 55, 225, 24, 0, 0, 0, 0, 0, 7, 43, 154, 71, 0, 0, 0, 26, 124, 77, 56, 156, 0, 0, 0, 1, 118, 171, 157, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 69, 109, 123, 95, 25, 0, 14, 209, 157, 60, 40, 38, 17, 0, 52, 211, 67, 9, 0, 0, 0, 0, 2, 85, 125, 178, 147, 13, 0, 0, 18, 118, 88, 96, 197, 48, 0, 0, 1, 126, 196, 215, 148, 6, 0, 0, 0, 0, 12, 27, 1, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 80, 93, 40, 0, 0, 0, 51, 124, 17, 0, 0, 0, 0, 0, 137, 110, 78, 21, 0, 0, 0, 27, 3, 0, 9, 101, 3, 0, 0, 62, 27, 0, 1, 101, 4, 0, 0, 1, 93, 88, 101, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 169, 163, 131, 16, 0, 0, 0, 147, 139, 8, 14, 1, 0, 0, 0, 207, 190, 91, 11, 0, 0, 0, 0, 44, 32, 103, 183, 18, 0, 0, 0, 0, 0, 5, 146, 72, 0, 0, 0, 113, 165, 189, 141, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 32, 16, 0, 0, 81, 158, 135, 107, 82, 39, 0, 0, 149, 124, 23, 0, 0, 0, 0, 0, 20, 92, 117, 124, 131, 40, 0, 0, 0, 0, 0, 0, 33, 132, 0, 0, 0, 0, 62, 107, 139, 82, 0, 0, 0, 0, 8, 68, 43, 1, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 11, 0, 18, 25, 0, 0, 17, 142, 190, 122, 80, 18, 0, 0, 129, 107, 43, 6, 0, 0, 0, 0, 166, 126, 59, 10, 0, 0, 0, 0, 32, 91, 209, 88, 0, 0, 0, 0, 43, 91, 87, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 66, 49, 101, 121, 20, 0, 0, 69, 224, 120, 56, 1, 0, 0, 0, 126, 197, 20, 0, 0, 0, 0, 0, 14, 66, 178, 59, 0, 0, 0, 8, 6, 0, 126, 121, 0, 0, 0, 59, 164, 155, 153, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 76, 101, 108, 30, 0, 0, 0, 121, 225, 83, 50, 2, 0, 0, 0, 16, 118, 131, 44, 0, 0, 0, 0, 0, 0, 10, 163, 16, 0, 0, 0, 20, 0, 83, 207, 12, 0, 0, 0, 154, 182, 159, 45, 0, 0, 0, 0, 31, 55, 4, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 126, 150, 137, 69, 0, 0, 0, 127, 174, 1, 2, 21, 0, 0, 0, 189, 204, 131, 60, 0, 0, 0, 0, 0, 0, 37, 156, 39, 0, 0, 111, 95, 4, 27, 157, 45, 0, 0, 28, 141, 157, 140, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 89, 65, 0, 0, 0, 39, 99, 115, 64, 1, 0, 0, 0, 135, 84, 0, 0, 0, 0, 0, 0, 23, 112, 154, 32, 0, 0, 0, 0, 0, 0, 144, 74, 0, 0, 0, 0, 25, 158, 102, 3, 0, 0, 0, 0, 9, 48, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 143, 129, 108, 20, 0, 0, 11, 130, 23, 0, 0, 0, 0, 1, 14, 100, 126, 0, 0, 0, 0, 67, 60, 126, 54, 0, 0, 0, 0, 3, 72, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 149, 149, 137, 49, 0, 0, 9, 131, 90, 28, 0, 0, 0, 0, 18, 115, 128, 6, 0, 0, 0, 19, 76, 122, 98, 3, 0, 0, 0, 0, 88, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 78, 115, 2, 0, 0, 0, 0, 121, 228, 39, 0, 0, 0, 0, 0, 31, 118, 190, 45, 0, 0, 0, 0, 0, 0, 112, 165, 0, 0, 0, 0, 33, 10, 119, 196, 0, 0, 0, 0, 37, 130, 159, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 96, 142, 87, 0, 0, 0, 0, 35, 179, 34, 0, 0, 0, 0, 0, 131, 136, 19, 0, 0, 0, 0, 0, 38, 151, 141, 0, 0, 0, 78, 28, 25, 194, 84, 0, 0, 0, 32, 158, 156, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 0, 0, 0, 25, 130, 149, 139, 44, 0, 0, 4, 115, 74, 29, 0, 0, 0, 0, 67, 168, 106, 1, 0, 0, 0, 18, 42, 98, 129, 1, 0, 0, 0, 16, 119, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 19, 109, 135, 131, 50, 0, 0, 24, 126, 40, 13, 0, 0, 0, 0, 55, 131, 141, 15, 0, 0, 0, 22, 33, 65, 123, 4, 0, 0, 0, 9, 98, 79, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 142, 148, 54, 0, 0, 0, 0, 175, 68, 85, 54, 0, 0, 0, 0, 221, 181, 173, 143, 0, 0, 0, 0, 34, 0, 0, 119, 73, 0, 0, 0, 143, 47, 0, 78, 84, 0, 0, 0, 47, 132, 183, 141, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 151, 132, 78, 0, 0, 0, 0, 124, 18, 0, 0, 0, 0, 0, 0, 122, 113, 54, 5, 0, 0, 0, 0, 0, 4, 77, 144, 29, 0, 0, 36, 31, 0, 0, 33, 101, 0, 0, 0, 79, 123, 124, 140, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 138, 96, 0, 0, 0, 0, 0, 111, 1, 0, 0, 0, 0, 0, 0, 111, 0, 0, 0, 0, 0, 0, 2, 94, 150, 33, 0, 0, 0, 0, 20, 19, 101, 91, 0, 0, 0, 0, 35, 144, 122, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 26, 82, 19, 0, 0, 0, 67, 147, 117, 46, 1, 0, 0, 15, 155, 14, 0, 0, 0, 0, 10, 14, 55, 185, 29, 0, 0, 0, 103, 72, 97, 164, 14, 0, 0, 0, 20, 102, 76, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 104, 115, 116, 51, 0, 0, 40, 89, 55, 30, 1, 0, 0, 0, 95, 133, 38, 0, 0, 0, 0, 15, 59, 146, 51, 0, 0, 0, 0, 4, 64, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 104, 121, 61, 0, 0, 0, 0, 188, 131, 55, 48, 0, 0, 0, 15, 238, 190, 147, 117, 7, 0, 0, 0, 9, 1, 2, 91, 116, 0, 0, 0, 62, 76, 2, 86, 128, 0, 0, 0, 41, 174, 196, 162, 13, 0, 0, 0, 0, 16, 39, 6, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 56, 40, 0, 0, 0, 65, 136, 134, 79, 15, 0, 0, 31, 145, 14, 0, 0, 0, 0, 0, 49, 113, 196, 42, 0, 0, 0, 23, 35, 88, 132, 7, 0, 0, 0, 26, 155, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 110, 167, 134, 5, 0, 0, 18, 146, 109, 76, 8, 0, 0, 0, 118, 158, 21, 3, 0, 0, 0, 0, 55, 123, 176, 189, 0, 0, 0, 50, 27, 36, 169, 128, 0, 0, 0, 40, 162, 144, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 11, 0, 0, 0, 35, 128, 138, 121, 43, 0, 0, 5, 140, 58, 10, 0, 0, 0, 0, 23, 113, 173, 19, 0, 0, 0, 13, 18, 64, 132, 3, 0, 0, 0, 27, 134, 87, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 156, 176, 96, 0, 0, 0, 63, 194, 73, 23, 6, 0, 0, 0, 74, 195, 20, 0, 0, 0, 0, 0, 54, 42, 177, 49, 0, 0, 0, 18, 157, 4, 143, 129, 0, 0, 0, 2, 133, 170, 134, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 11, 0, 0, 0, 17, 73, 121, 112, 47, 0, 0, 1, 137, 72, 0, 0, 0, 0, 21, 23, 37, 163, 29, 0, 0, 0, 34, 138, 125, 92, 3, 0, 0, 0, 0, 9, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 119, 112, 120, 50, 0, 0, 14, 106, 60, 22, 0, 0, 0, 0, 108, 150, 83, 0, 0, 0, 0, 23, 49, 118, 58, 0, 0, 0, 0, 13, 89, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 79, 130, 101, 0, 0, 0, 0, 217, 254, 254, 179, 0, 0, 0, 0, 175, 214, 237, 138, 0, 0, 0, 0, 0, 0, 28, 191, 55, 0, 0, 39, 141, 123, 99, 203, 127, 0, 0, 48, 135, 153, 189, 141, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 6, 0, 0, 0, 0, 0, 0, 161, 209, 184, 217, 15, 0, 0, 0, 162, 185, 43, 46, 0, 0, 0, 0, 67, 92, 175, 36, 0, 0, 0, 0, 0, 0, 144, 87, 0, 0, 0, 0, 8, 117, 191, 54, 0, 0, 0, 0, 6, 94, 90, 7, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 42, 61, 63, 32, 0, 0, 5, 165, 113, 116, 109, 65, 0, 0, 28, 195, 138, 147, 165, 0, 0, 0, 0, 0, 0, 0, 151, 22, 0, 0, 0, 0, 0, 32, 182, 8, 0, 0, 131, 143, 160, 165, 61, 0, 0, 0, 46, 108, 67, 4, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 93, 103, 0, 0, 0, 0, 85, 224, 172, 102, 0, 0, 0, 0, 172, 242, 162, 70, 0, 0, 0, 0, 126, 89, 96, 230, 37, 0, 0, 0, 68, 44, 86, 230, 40, 0, 0, 0, 75, 199, 212, 87, 0, 0, 0, 0, 0, 22, 30, 2, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 92, 98, 79, 50, 7, 0, 0, 152, 77, 74, 95, 91, 16, 0, 30, 183, 77, 105, 65, 0, 0, 0, 15, 96, 70, 34, 167, 0, 0, 0, 8, 0, 0, 22, 180, 0, 0, 0, 84, 162, 165, 165, 79, 0, 0, 0, 0, 5, 6, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 82, 79, 65, 4, 0, 0, 80, 123, 20, 0, 0, 0, 0, 0, 105, 88, 5, 0, 0, 0, 0, 0, 0, 11, 111, 43, 0, 0, 0, 0, 25, 0, 35, 100, 0, 0, 0, 0, 63, 90, 101, 58, 0, 0, 0, 0, 1, 38, 24, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 98, 136, 128, 18, 0, 0, 0, 23, 161, 15, 96, 0, 0, 0, 0, 0, 171, 66, 8, 0, 0, 0, 0, 0, 80, 153, 129, 29, 0, 0, 0, 0, 75, 108, 97, 163, 76, 3, 0, 0, 0, 26, 89, 115, 114, 13, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 49, 86, 108, 105, 21, 0, 0, 101, 115, 87, 61, 43, 8, 0, 0, 83, 84, 103, 104, 0, 0, 0, 45, 102, 103, 120, 66, 0, 0, 0, 3, 11, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 47, 10, 0, 0, 0, 23, 137, 157, 148, 148, 27, 0, 0, 96, 198, 16, 0, 0, 0, 0, 0, 12, 98, 138, 1, 0, 0, 0, 6, 0, 50, 160, 3, 0, 0, 0, 60, 173, 128, 7, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 4, 117, 132, 141, 113, 18, 0, 0, 75, 202, 88, 10, 0, 0, 0, 0, 10, 19, 92, 128, 0, 0, 0, 64, 68, 38, 132, 122, 0, 0, 0, 5, 90, 122, 54, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 2, 0, 0, 15, 126, 148, 149, 141, 60, 0, 0, 153, 102, 18, 0, 0, 0, 0, 0, 67, 74, 140, 110, 0, 0, 0, 8, 86, 58, 102, 141, 0, 0, 0, 10, 62, 94, 87, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 44, 113, 118, 0, 0, 0, 0, 66, 238, 83, 2, 0, 0, 0, 0, 44, 198, 38, 0, 0, 0, 0, 0, 0, 26, 159, 129, 0, 0, 0, 0, 0, 0, 40, 177, 0, 0, 0, 0, 34, 163, 164, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 36, 0, 0, 0, 0, 65, 150, 156, 138, 40, 0, 0, 0, 99, 31, 9, 0, 1, 0, 0, 5, 118, 84, 65, 57, 0, 0, 0, 0, 0, 0, 15, 73, 0, 0, 0, 0, 10, 76, 110, 24, 0, 0, 0, 0, 25, 74, 23, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 85, 114, 100, 0, 0, 0, 0, 115, 125, 44, 1, 0, 0, 0, 0, 78, 144, 124, 77, 0, 0, 0, 0, 0, 0, 5, 124, 0, 0, 0, 0, 61, 6, 11, 127, 0, 0, 0, 0, 87, 135, 132, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 46, 69, 86, 93, 42, 0, 0, 81, 106, 80, 67, 53, 22, 0, 1, 102, 80, 49, 0, 0, 0, 0, 12, 74, 90, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 38, 50, 44, 7, 0, 0, 76, 176, 104, 89, 79, 16, 0, 0, 156, 122, 3, 0, 0, 0, 0, 0, 7, 56, 123, 112, 0, 0, 0, 0, 0, 0, 49, 172, 0, 0, 0, 48, 139, 142, 108, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 59, 57, 51, 12, 0, 0, 114, 222, 152, 123, 91, 28, 0, 0, 192, 70, 0, 0, 0, 0, 0, 0, 108, 163, 44, 0, 0, 0, 0, 0, 1, 67, 177, 63, 0, 0, 0, 0, 19, 150, 179, 107, 0, 0, 0, 0, 0, 53, 114, 25, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 114, 97, 0, 0, 0, 0, 1, 84, 0, 0, 0, 0, 0, 0, 17, 122, 125, 42, 0, 0, 0, 0, 16, 118, 84, 103, 0, 0, 0, 0, 14, 0, 96, 89, 0, 0, 0, 0, 108, 111, 90, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 50, 47, 3, 0, 0, 68, 160, 194, 167, 81, 5, 0, 0, 148, 95, 28, 1, 0, 0, 0, 0, 144, 165, 35, 0, 0, 0, 0, 0, 14, 101, 181, 31, 0, 0, 0, 0, 55, 124, 184, 48, 0, 0, 0, 0, 22, 103, 69, 1, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 116, 116, 56, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, 79, 112, 21, 0, 0, 0, 0, 0, 0, 46, 129, 0, 0, 0, 13, 0, 0, 54, 142, 0, 0, 0, 50, 130, 118, 85, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 3, 0, 0, 25, 127, 57, 182, 174, 75, 0, 0, 119, 172, 54, 86, 12, 0, 0, 0, 136, 198, 184, 70, 0, 0, 0, 0, 73, 116, 207, 70, 0, 0, 0, 0, 82, 115, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 89, 126, 119, 86, 0, 0, 0, 145, 153, 66, 19, 0, 0, 0, 0, 95, 160, 122, 17, 0, 0, 0, 0, 0, 0, 43, 139, 125, 6, 0, 0, 0, 58, 12, 2, 109, 91, 0, 0, 0, 46, 170, 175, 198, 127, 0, 0, 0, 0, 9, 55, 63, 18, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 7, 0, 0, 40, 142, 127, 134, 155, 73, 0, 0, 126, 120, 74, 48, 1, 0, 0, 0, 28, 132, 117, 20, 0, 0, 0, 12, 26, 47, 223, 81, 0, 0, 0, 21, 121, 102, 32, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 27, 122, 34, 0, 0, 67, 162, 43, 124, 88, 23, 0, 3, 187, 74, 6, 8, 0, 0, 0, 0, 131, 209, 148, 14, 0, 0, 0, 0, 4, 48, 215, 66, 0, 0, 0, 0, 96, 222, 134, 16, 0, 0, 0, 0, 17, 55, 3, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 48, 48, 73, 39, 0, 0, 96, 31, 65, 68, 55, 17, 0, 12, 175, 81, 13, 0, 0, 0, 0, 14, 47, 47, 133, 65, 0, 0, 0, 0, 30, 0, 66, 100, 0, 0, 0, 0, 77, 117, 111, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 12, 8, 0, 3, 99, 124, 185, 180, 145, 67, 0, 35, 139, 24, 60, 14, 0, 0, 0, 5, 131, 180, 132, 15, 0, 0, 0, 8, 67, 58, 212, 63, 0, 0, 0, 0, 104, 140, 67, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 115, 91, 18, 0, 0, 13, 127, 103, 52, 33, 10, 0, 4, 163, 145, 4, 0, 0, 0, 0, 14, 162, 143, 106, 11, 0, 0, 0, 0, 9, 34, 149, 91, 0, 0, 0, 0, 82, 155, 181, 57, 0, 0, 0, 0, 7, 44, 17, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 5, 0, 0, 0, 0, 0, 131, 120, 118, 111, 97, 40, 0, 0, 131, 16, 0, 0, 0, 0, 0, 0, 17, 78, 72, 8, 0, 0, 0, 0, 3, 0, 108, 62, 0, 0, 0, 0, 94, 90, 110, 5, 0, 0, 0, 0, 85, 93, 5, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 91, 112, 102, 64, 0, 0, 61, 192, 47, 3, 0, 0, 0, 0, 144, 102, 0, 0, 0, 0, 0, 0, 83, 148, 138, 113, 0, 0, 0, 0, 2, 2, 105, 138, 0, 0, 0, 0, 99, 189, 134, 16, 0, 0, 0, 0, 15, 50, 1, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 52, 91, 121, 25, 0, 0, 4, 222, 228, 190, 158, 54, 0, 0, 14, 235, 83, 10, 0, 0, 0, 0, 0, 88, 194, 182, 86, 0, 0, 0, 0, 57, 84, 174, 209, 0, 0, 0, 0, 96, 243, 223, 113, 0, 0, 0, 0, 9, 54, 38, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 62, 106, 85, 0, 0, 0, 66, 191, 129, 54, 1, 0, 0, 22, 211, 185, 133, 44, 0, 0, 0, 11, 102, 59, 28, 144, 0, 0, 0, 0, 26, 8, 28, 177, 4, 0, 0, 0, 83, 168, 150, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 10, 111, 0, 0, 0, 0, 8, 70, 129, 23, 0, 0, 0, 0, 19, 177, 68, 77, 44, 0, 0, 0, 0, 84, 117, 25, 71, 87, 0, 0, 0, 4, 40, 4, 64, 98, 0, 0, 0, 0, 69, 83, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 108, 61, 0, 22, 0, 0, 0, 108, 180, 5, 0, 0, 0, 0, 0, 31, 143, 124, 42, 0, 0, 0, 0, 0, 0, 109, 177, 0, 0, 0, 0, 0, 5, 178, 160, 0, 0, 0, 0, 48, 139, 91, 6, 0, 0, 0, 0, 19, 30, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 17, 6, 17, 0, 0, 0, 3, 111, 125, 117, 71, 0, 0, 0, 72, 203, 78, 12, 0, 0, 0, 0, 13, 33, 94, 126, 0, 0, 0, 92, 101, 98, 157, 66, 0, 0, 0, 0, 13, 23, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 86, 40, 0, 0, 0, 129, 130, 95, 49, 0, 0, 0, 0, 160, 51, 0, 0, 0, 0, 0, 0, 28, 162, 54, 0, 0, 0, 0, 0, 0, 22, 157, 16, 0, 0, 0, 0, 0, 74, 176, 44, 0, 0, 0, 0, 0, 11, 31, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 106, 63, 0, 0, 0, 49, 150, 91, 34, 19, 0, 0, 21, 175, 78, 1, 0, 0, 0, 0, 8, 103, 122, 138, 107, 0, 0, 0, 0, 0, 0, 66, 130, 0, 0, 0, 0, 38, 140, 118, 11, 0, 0, 0, 0, 4, 31, 2, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 130, 108, 103, 20, 0, 0, 26, 141, 42, 0, 0, 0, 0, 0, 28, 78, 128, 61, 0, 0, 0, 59, 108, 99, 122, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 47, 101, 97, 0, 0, 0, 0, 164, 253, 198, 78, 0, 0, 0, 0, 149, 197, 136, 138, 0, 0, 0, 0, 20, 7, 0, 141, 0, 0, 0, 2, 33, 0, 79, 155, 0, 0, 0, 0, 157, 194, 173, 32, 0, 0, 0, 0, 7, 49, 16, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 161, 126, 16, 0, 0, 0, 13, 177, 78, 1, 0, 0, 0, 0, 72, 239, 25, 0, 0, 0, 0, 0, 30, 129, 134, 99, 0, 0, 0, 0, 1, 14, 65, 190, 1, 0, 0, 0, 128, 174, 153, 115, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 60, 87, 113, 34, 0, 0, 35, 177, 91, 70, 43, 8, 0, 0, 137, 102, 0, 0, 0, 0, 0, 0, 147, 172, 174, 121, 0, 0, 0, 0, 2, 5, 47, 181, 0, 0, 0, 16, 167, 157, 137, 68, 0, 0, 0, 2, 50, 27, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 43, 30, 0, 0, 0, 18, 130, 109, 94, 56, 0, 0, 0, 79, 191, 95, 18, 0, 0, 0, 0, 0, 20, 69, 134, 0, 0, 0, 61, 82, 88, 145, 85, 0, 0, 0, 32, 46, 43, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 90, 98, 88, 14, 0, 0, 44, 149, 17, 0, 0, 0, 0, 0, 8, 41, 116, 45, 0, 0, 0, 45, 105, 89, 112, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 116, 112, 123, 132, 32, 0, 1, 153, 134, 14, 2, 3, 0, 0, 4, 51, 53, 136, 65, 0, 0, 0, 7, 23, 26, 140, 62, 0, 0, 0, 46, 92, 84, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 51, 36, 30, 4, 0, 0, 15, 156, 125, 160, 151, 28, 0, 0, 107, 129, 39, 9, 0, 0, 0, 0, 176, 144, 118, 134, 0, 0, 0, 6, 60, 0, 82, 144, 0, 0, 0, 69, 140, 135, 125, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 125, 82, 4, 0, 0, 0, 0, 181, 75, 89, 31, 0, 0, 0, 0, 181, 127, 157, 76, 0, 0, 0, 0, 68, 106, 12, 149, 22, 0, 0, 0, 0, 0, 5, 146, 30, 0, 0, 0, 24, 108, 144, 95, 0, 0, 0, 0, 19, 58, 9, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 116, 107, 90, 15, 0, 0, 45, 151, 49, 12, 1, 0, 0, 0, 25, 68, 86, 117, 0, 0, 0, 41, 89, 83, 122, 88, 0, 0, 0, 5, 15, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 136, 32, 0, 0, 0, 0, 0, 100, 244, 38, 0, 0, 0, 0, 0, 92, 252, 67, 5, 0, 0, 0, 0, 9, 86, 160, 188, 0, 0, 0, 0, 0, 0, 129, 242, 0, 0, 0, 0, 0, 86, 169, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 139, 150, 131, 15, 0, 0, 0, 148, 29, 0, 0, 0, 0, 0, 0, 109, 120, 78, 1, 0, 0, 0, 13, 1, 0, 111, 124, 0, 0, 0, 37, 112, 29, 16, 134, 0, 0, 0, 0, 38, 106, 146, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 32, 7, 0, 0, 0, 8, 120, 92, 67, 72, 28, 0, 0, 107, 128, 49, 18, 0, 0, 0, 0, 55, 67, 52, 142, 4, 0, 0, 21, 126, 147, 142, 115, 0, 0, 0, 0, 9, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 15, 0, 0, 27, 163, 143, 143, 131, 53, 0, 0, 133, 92, 4, 1, 0, 0, 0, 0, 166, 122, 134, 37, 0, 0, 0, 0, 5, 1, 149, 70, 0, 0, 0, 39, 142, 135, 94, 2, 0, 0, 0, 0, 53, 57, 1, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 125, 113, 111, 108, 36, 0, 0, 135, 176, 89, 24, 0, 0, 0, 0, 29, 4, 48, 145, 0, 0, 0, 16, 88, 108, 188, 125, 0, 0, 0, 3, 55, 104, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 72, 107, 12, 0, 0, 0, 87, 170, 89, 32, 4, 0, 0, 0, 145, 125, 13, 0, 0, 0, 0, 0, 10, 76, 151, 70, 0, 0, 0, 0, 0, 0, 139, 106, 0, 0, 0, 0, 68, 171, 119, 8, 0, 0, 0, 0, 11, 54, 2, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 93, 111, 91, 0, 0, 0, 0, 5, 110, 7, 7, 0, 0, 0, 0, 35, 140, 53, 9, 0, 0, 0, 0, 58, 106, 83, 129, 0, 0, 0, 0, 0, 0, 0, 129, 0, 0, 0, 0, 66, 120, 131, 92, 0, 0, 0, 0, 9, 56, 36, 1, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 49, 91, 0, 0, 0, 0, 71, 139, 115, 13, 0, 0, 0, 0, 110, 11, 0, 0, 0, 0, 0, 0, 6, 106, 0, 0, 0, 0, 16, 79, 4, 100, 2, 0, 0, 0, 0, 76, 144, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 57, 94, 14, 0, 0, 0, 39, 172, 136, 56, 0, 0, 0, 0, 34, 162, 21, 0, 0, 0, 0, 0, 0, 16, 142, 50, 0, 0, 0, 0, 0, 0, 104, 102, 0, 0, 0, 0, 102, 117, 127, 19, 0, 0, 0, 0, 27, 45, 7, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 146, 141, 5, 0, 0, 0, 22, 170, 118, 79, 0, 0, 0, 0, 9, 51, 54, 125, 15, 0, 0, 0, 0, 0, 0, 46, 46, 0, 2, 97, 82, 11, 0, 84, 22, 0, 0, 6, 92, 151, 150, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 70, 15, 0, 0, 0, 38, 191, 185, 68, 0, 0, 0, 0, 68, 151, 43, 0, 0, 0, 2, 0, 32, 96, 0, 0, 0, 0, 60, 81, 12, 138, 0, 0, 0, 0, 1, 96, 152, 84, 0, 0, 0, 0, 0, 0, 7, 1, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 115, 84, 91, 28, 0, 0, 0, 0, 110, 37, 27, 38, 0, 0, 0, 0, 52, 139, 108, 110, 60, 0, 0, 78, 1, 0, 0, 5, 116, 0, 0, 64, 69, 1, 0, 59, 68, 0, 0, 0, 70, 108, 107, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 28, 65, 20, 0, 0, 0, 59, 165, 143, 65, 7, 0, 0, 0, 114, 65, 0, 0, 0, 0, 0, 0, 75, 85, 0, 0, 0, 0, 19, 26, 55, 101, 0, 0, 0, 0, 16, 168, 162, 23, 0, 0, 0, 0, 0, 7, 6, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 60, 60, 63, 63, 62, 14, 0, 32, 168, 87, 58, 44, 22, 2, 0, 0, 153, 6, 0, 0, 0, 0, 0, 0, 88, 110, 110, 118, 31, 0, 0, 6, 1, 0, 0, 16, 128, 3, 0, 12, 113, 98, 91, 126, 66, 0, 0, 0, 30, 80, 89, 48, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 34, 54, 8, 0, 0, 0, 67, 165, 139, 114, 24, 0, 0, 0, 128, 12, 0, 0, 0, 0, 0, 0, 120, 21, 0, 0, 0, 0, 20, 0, 79, 60, 0, 0, 0, 0, 62, 141, 145, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 44, 60, 0, 0, 0, 0, 69, 179, 152, 25, 0, 0, 0, 20, 197, 91, 4, 0, 0, 0, 0, 2, 147, 0, 0, 0, 0, 0, 0, 0, 122, 25, 0, 0, 0, 0, 11, 164, 209, 32, 0, 0, 0, 0, 0, 22, 40, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 58, 31, 0, 0, 0, 53, 131, 123, 72, 22, 0, 0, 8, 114, 0, 0, 0, 0, 0, 0, 34, 124, 0, 0, 0, 0, 0, 14, 4, 72, 1, 0, 0, 0, 0, 17, 139, 119, 0, 0, 0, 0, 0, 0, 18, 11, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 141, 55, 0, 0, 0, 0, 64, 186, 40, 0, 0, 0, 0, 0, 98, 86, 0, 0, 0, 0, 0, 0, 63, 106, 0, 0, 0, 0, 0, 43, 39, 131, 0, 0, 0, 0, 0, 126, 161, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 125, 11, 0, 0, 0, 63, 166, 138, 25, 0, 0, 0, 0, 129, 11, 0, 0, 0, 0, 0, 0, 48, 114, 0, 0, 0, 0, 72, 13, 29, 122, 0, 0, 0, 0, 17, 141, 135, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 152, 154, 133, 51, 0, 0, 21, 154, 97, 47, 21, 8, 0, 0, 40, 132, 3, 0, 0, 0, 0, 7, 1, 125, 46, 0, 0, 0, 0, 24, 125, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 170, 157, 135, 49, 0, 0, 0, 166, 90, 45, 22, 5, 0, 14, 42, 94, 75, 0, 0, 0, 0, 47, 133, 181, 50, 0, 0, 0, 0, 0, 46, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 103, 27, 0, 0, 0, 70, 177, 167, 79, 10, 0, 0, 31, 139, 35, 3, 0, 0, 0, 0, 43, 172, 16, 0, 0, 0, 0, 0, 0, 78, 73, 0, 0, 0, 0, 17, 174, 152, 50, 0, 0, 0, 0, 0, 47, 48, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 94, 143, 100, 0, 0, 0, 79, 197, 77, 15, 0, 0, 0, 0, 130, 134, 25, 8, 0, 0, 0, 0, 16, 76, 114, 167, 31, 0, 0, 58, 2, 0, 48, 164, 47, 0, 0, 42, 148, 154, 116, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 60, 60, 57, 14, 0, 0, 83, 214, 119, 133, 83, 28, 0, 0, 141, 66, 0, 0, 0, 0, 0, 0, 86, 162, 154, 85, 0, 0, 0, 0, 0, 7, 151, 110, 0, 0, 0, 37, 142, 157, 91, 2, 0, 0, 0, 10, 117, 75, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 20, 0, 0, 71, 157, 154, 147, 95, 20, 0, 0, 172, 127, 46, 17, 0, 0, 0, 0, 13, 111, 117, 5, 0, 0, 0, 0, 0, 1, 166, 30, 0, 0, 0, 13, 59, 85, 137, 7, 0, 0, 0, 6, 66, 95, 21, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 184, 202, 174, 143, 45, 0, 0, 61, 187, 40, 15, 0, 0, 0, 0, 24, 158, 58, 0, 0, 0, 0, 0, 0, 43, 159, 0, 0, 0, 0, 0, 5, 93, 113, 0, 0, 0, 0, 25, 110, 149, 20, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 27, 60, 97, 20, 0, 0, 26, 130, 169, 60, 20, 0, 0, 0, 0, 102, 79, 48, 33, 0, 0, 0, 0, 183, 125, 60, 125, 37, 0, 0, 0, 39, 20, 0, 78, 55, 0, 0, 0, 11, 114, 131, 134, 2, 0, 0, 0, 0, 10, 58, 13, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 110, 164, 147, 122, 65, 0, 0, 72, 139, 35, 11, 0, 0, 0, 0, 36, 155, 14, 0, 0, 0, 0, 0, 0, 87, 78, 0, 0, 0, 0, 0, 60, 127, 33, 0, 0, 0, 0, 0, 59, 45, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 48, 23, 18, 38, 18, 0, 0, 78, 98, 137, 115, 69, 12, 0, 22, 176, 17, 0, 0, 0, 0, 0, 2, 86, 147, 124, 18, 0, 0, 0, 0, 0, 6, 149, 98, 0, 0, 0, 16, 74, 97, 149, 32, 0, 0, 0, 11, 90, 88, 18, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 65, 127, 125, 107, 78, 0, 0, 68, 82, 5, 6, 6, 2, 0, 0, 109, 105, 0, 0, 0, 0, 0, 0, 9, 130, 36, 0, 0, 0, 0, 0, 23, 115, 38, 0, 0, 0, 0, 0, 51, 53, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 45, 0, 0, 1, 5, 0, 0, 148, 158, 163, 166, 138, 46, 0, 0, 118, 144, 8, 0, 0, 0, 0, 0, 0, 65, 150, 13, 0, 0, 0, 8, 27, 13, 227, 79, 0, 0, 0, 24, 183, 190, 77, 2, 0, 0, 0, 0, 8, 9, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 73, 24, 2, 0, 0, 0, 0, 147, 62, 95, 32, 0, 0, 0, 0, 145, 0, 0, 0, 0, 0, 0, 0, 61, 132, 4, 0, 0, 0, 0, 0, 0, 144, 38, 0, 0, 0, 0, 84, 113, 134, 13, 0, 0, 0, 0, 1, 34, 24, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 48, 12, 0, 0, 41, 93, 146, 129, 56, 1, 0, 0, 111, 128, 33, 0, 0, 0, 0, 0, 52, 148, 50, 0, 0, 0, 0, 0, 0, 44, 120, 0, 0, 0, 0, 22, 91, 114, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 115, 141, 125, 98, 29, 0, 0, 26, 138, 35, 18, 0, 0, 0, 0, 0, 57, 118, 6, 0, 0, 0, 6, 5, 15, 160, 25, 0, 0, 0, 4, 97, 108, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 117, 119, 101, 33, 0, 0, 46, 127, 60, 15, 1, 0, 0, 0, 60, 122, 0, 0, 0, 0, 0, 0, 2, 118, 16, 0, 0, 0, 0, 12, 82, 93, 0, 0, 0, 0, 0, 2, 14, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 117, 126, 128, 107, 38, 0, 0, 147, 75, 3, 0, 0, 0, 0, 0, 33, 82, 155, 58, 0, 0, 0, 7, 4, 11, 150, 55, 0, 0, 0, 8, 86, 94, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 113, 142, 123, 11, 0, 0, 0, 53, 219, 65, 0, 0, 0, 0, 0, 31, 190, 175, 103, 0, 0, 0, 10, 0, 0, 11, 170, 0, 0, 0, 62, 63, 5, 58, 170, 0, 0, 0, 3, 122, 169, 144, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 19, 46, 73, 87, 30, 0, 0, 106, 125, 114, 98, 33, 0, 0, 0, 35, 106, 48, 0, 0, 0, 0, 0, 0, 66, 64, 0, 0, 0, 0, 11, 86, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 111, 177, 176, 149, 24, 0, 0, 183, 163, 34, 8, 1, 1, 0, 0, 51, 101, 142, 77, 0, 0, 0, 41, 88, 82, 161, 127, 0, 0, 0, 3, 73, 91, 42, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 5, 0, 0, 162, 154, 109, 117, 104, 19, 0, 43, 126, 33, 12, 3, 0, 0, 0, 117, 114, 117, 123, 133, 37, 0, 0, 49, 100, 52, 0, 37, 108, 0, 0, 0, 0, 37, 104, 123, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 88, 16, 0, 0, 6, 74, 181, 165, 113, 19, 0, 0, 112, 171, 39, 1, 0, 0, 0, 0, 109, 157, 93, 6, 0, 0, 0, 48, 43, 28, 152, 38, 0, 0, 0, 22, 139, 178, 118, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 12, 0, 0, 0, 55, 143, 183, 191, 87, 0, 0, 127, 187, 119, 67, 8, 0, 0, 0, 147, 135, 111, 8, 0, 0, 0, 16, 91, 63, 159, 39, 0, 0, 0, 0, 75, 119, 75, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 59, 179, 131, 103, 51, 0, 0, 0, 115, 19, 0, 0, 0, 0, 0, 0, 127, 43, 0, 0, 0, 0, 0, 0, 127, 8, 0, 0, 0, 0, 0, 135, 123, 0, 0, 0, 0, 0, 0, 83, 23, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 128, 165, 28, 0, 0, 14, 84, 190, 70, 5, 0, 0, 0, 123, 227, 51, 0, 0, 0, 0, 0, 45, 107, 167, 97, 0, 0, 0, 5, 0, 7, 122, 137, 0, 0, 0, 65, 157, 182, 133, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 103, 147, 27, 0, 0, 4, 95, 179, 59, 0, 0, 0, 0, 123, 171, 23, 0, 0, 0, 0, 0, 47, 127, 171, 27, 0, 0, 0, 43, 99, 95, 183, 39, 0, 0, 0, 19, 87, 119, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 163, 121, 22, 0, 0, 0, 0, 60, 148, 0, 0, 0, 0, 0, 0, 25, 159, 73, 31, 0, 0, 0, 0, 5, 96, 68, 176, 0, 0, 0, 0, 12, 0, 48, 174, 0, 0, 0, 0, 119, 152, 116, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 7, 21, 0, 0, 0, 0, 34, 130, 102, 29, 0, 0, 0, 0, 119, 11, 0, 0, 0, 0, 0, 5, 97, 0, 0, 0, 0, 0, 0, 0, 78, 103, 26, 0, 0, 0, 14, 26, 18, 147, 153, 0, 0, 0, 0, 99, 122, 77, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 21, 0, 0, 2, 79, 159, 138, 111, 44, 0, 0, 97, 228, 70, 1, 0, 0, 0, 0, 42, 54, 82, 69, 0, 0, 0, 22, 87, 64, 123, 71, 0, 0, 0, 3, 56, 144, 51, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 93, 59, 0, 0, 6, 110, 133, 133, 66, 17, 0, 0, 109, 147, 19, 0, 0, 0, 0, 7, 153, 97, 40, 0, 0, 0, 0, 8, 26, 63, 122, 0, 0, 0, 0, 8, 109, 131, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 7, 0, 2, 1, 0, 0, 2, 150, 107, 122, 113, 82, 11, 0, 43, 114, 126, 105, 120, 1, 0, 0, 99, 135, 45, 0, 103, 26, 0, 0, 24, 27, 0, 0, 118, 17, 0, 0, 0, 0, 4, 78, 125, 0, 0, 0, 0, 0, 27, 94, 23, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 96, 132, 25, 0, 0, 35, 154, 133, 41, 1, 0, 0, 0, 125, 141, 1, 0, 0, 0, 0, 0, 17, 71, 98, 89, 0, 0, 0, 0, 2, 23, 59, 36, 0, 0, 0, 49, 144, 160, 88, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 93, 124, 26, 0, 0, 2, 99, 110, 49, 2, 0, 0, 0, 112, 139, 7, 0, 0, 0, 0, 0, 64, 76, 118, 135, 0, 0, 0, 10, 16, 3, 67, 153, 0, 0, 0, 48, 106, 113, 67, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 86, 123, 5, 0, 0, 12, 146, 131, 72, 17, 0, 0, 0, 51, 130, 0, 0, 0, 0, 0, 0, 51, 154, 146, 41, 0, 0, 0, 51, 36, 5, 134, 101, 0, 0, 0, 21, 150, 185, 117, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 71, 59, 79, 96, 22, 0, 0, 85, 239, 180, 128, 82, 8, 0, 0, 188, 163, 17, 0, 0, 0, 0, 0, 160, 208, 200, 198, 5, 0, 0, 0, 23, 19, 60, 216, 13, 0, 0, 0, 209, 205, 206, 103, 0, 0, 0, 0, 30, 40, 18, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 64, 91, 103, 32, 0, 0, 0, 89, 144, 55, 36, 3, 0, 0, 0, 24, 144, 92, 132, 116, 19, 0, 0, 0, 229, 109, 4, 23, 152, 20, 0, 0, 94, 73, 0, 0, 171, 60, 0, 0, 17, 120, 139, 150, 108, 7, 0, 0, 0, 0, 27, 17, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 41, 155, 180, 214, 187, 36, 0, 24, 185, 95, 86, 60, 14, 0, 0, 35, 143, 162, 121, 38, 0, 0, 0, 0, 0, 8, 82, 132, 0, 0, 0, 41, 105, 130, 130, 66, 0, 0, 0, 3, 56, 90, 45, 3, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 144, 115, 84, 4, 0, 0, 30, 175, 13, 0, 0, 0, 0, 0, 161, 191, 130, 77, 0, 0, 0, 0, 11, 0, 5, 164, 0, 0, 0, 46, 112, 0, 34, 164, 0, 0, 0, 26, 109, 112, 135, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 91, 115, 0, 0, 0, 0, 98, 160, 138, 30, 0, 0, 0, 11, 233, 202, 123, 36, 0, 0, 0, 11, 64, 49, 56, 143, 0, 0, 0, 0, 43, 27, 23, 176, 2, 0, 0, 0, 35, 143, 159, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 174, 24, 0, 0, 0, 43, 147, 97, 62, 6, 0, 0, 0, 129, 215, 111, 54, 0, 0, 0, 10, 22, 7, 15, 170, 0, 0, 0, 61, 126, 0, 47, 156, 0, 0, 0, 1, 99, 131, 122, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 90, 122, 61, 0, 0, 0, 9, 125, 62, 0, 0, 0, 0, 0, 110, 194, 112, 41, 0, 0, 0, 0, 7, 0, 46, 138, 0, 0, 0, 85, 41, 0, 112, 99, 0, 0, 0, 4, 114, 116, 101, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 100, 81, 83, 19, 0, 0, 0, 103, 199, 88, 62, 4, 0, 0, 0, 166, 219, 151, 92, 1, 0, 0, 0, 18, 11, 7, 127, 54, 0, 0, 0, 18, 0, 3, 121, 77, 0, 0, 0, 181, 186, 186, 139, 8, 0, 0, 0, 28, 63, 32, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 102, 86, 86, 56, 0, 0, 71, 172, 156, 126, 114, 71, 0, 0, 69, 154, 105, 0, 0, 0, 0, 0, 91, 141, 91, 0, 0, 0, 0, 0, 84, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 26, 88, 47, 0, 0, 0, 0, 177, 183, 102, 22, 0, 0, 0, 0, 217, 168, 122, 56, 0, 0, 0, 0, 86, 119, 170, 192, 0, 0, 0, 0, 0, 3, 109, 194, 0, 0, 0, 0, 38, 187, 192, 59, 0, 0, 0, 0, 0, 18, 21, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 68, 50, 0, 0, 0, 0, 44, 117, 49, 29, 0, 0, 0, 0, 138, 119, 44, 0, 0, 0, 103, 35, 77, 10, 100, 37, 0, 0, 56, 86, 59, 40, 136, 21, 0, 0, 0, 13, 49, 65, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 32, 6, 0, 0, 0, 0, 67, 131, 113, 20, 0, 0, 20, 136, 88, 12, 0, 0, 0, 0, 112, 209, 112, 41, 0, 0, 0, 31, 135, 28, 43, 169, 0, 0, 0, 83, 150, 24, 146, 133, 0, 0, 0, 8, 86, 83, 44, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 56, 117, 68, 1, 0, 0, 4, 121, 70, 16, 0, 0, 0, 0, 54, 192, 40, 0, 0, 0, 0, 12, 79, 78, 118, 156, 0, 0, 0, 51, 111, 0, 89, 150, 0, 0, 0, 0, 98, 119, 73, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 66, 105, 5, 0, 0, 0, 50, 165, 66, 19, 0, 0, 0, 0, 129, 190, 135, 105, 2, 0, 0, 0, 43, 25, 4, 117, 36, 0, 0, 0, 15, 0, 8, 148, 12, 0, 0, 0, 118, 121, 120, 41, 0, 0, 0, 0, 21, 53, 6, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 101, 93, 28, 0, 0, 59, 129, 131, 92, 15, 0, 0, 0, 109, 78, 0, 0, 0, 0, 0, 0, 22, 145, 2, 0, 0, 0, 0, 11, 82, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 142, 60, 0, 0, 0, 0, 112, 225, 96, 2, 0, 0, 0, 0, 198, 163, 12, 0, 0, 0, 0, 0, 80, 181, 242, 182, 26, 0, 0, 0, 0, 28, 181, 252, 76, 0, 0, 0, 0, 98, 146, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 13, 71, 83, 9, 0, 0, 25, 168, 207, 211, 129, 15, 0, 0, 103, 115, 28, 22, 0, 0, 0, 0, 54, 186, 76, 0, 0, 0, 0, 14, 7, 35, 152, 0, 0, 0, 0, 56, 211, 216, 81, 0, 0, 0, 0, 0, 45, 44, 2, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 76, 97, 22, 0, 0, 0, 0, 107, 109, 49, 126, 35, 0, 0, 0, 142, 26, 0, 1, 3, 0, 0, 0, 105, 137, 128, 141, 7, 0, 0, 0, 0, 2, 40, 169, 15, 0, 0, 0, 116, 163, 109, 26, 0, 0, 0, 0, 45, 32, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 63, 88, 1, 0, 0, 0, 0, 145, 88, 46, 41, 0, 0, 0, 0, 129, 134, 124, 144, 32, 0, 0, 0, 111, 77, 0, 71, 53, 0, 0, 0, 1, 0, 1, 126, 14, 0, 0, 0, 112, 121, 141, 99, 0, 0, 0, 0, 10, 57, 36, 1, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 81, 81, 59, 0, 0, 0, 0, 74, 95, 38, 24, 0, 0, 0, 36, 164, 140, 61, 0, 0, 0, 8, 16, 17, 6, 140, 0, 0, 0, 98, 1, 0, 15, 142, 0, 0, 0, 45, 115, 120, 119, 49, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 1, 23, 27, 0, 0, 0, 0, 0, 135, 145, 69, 0, 0, 0, 15, 145, 89, 5, 0, 0, 0, 0, 123, 222, 94, 36, 0, 0, 0, 16, 8, 42, 69, 182, 11, 0, 0, 88, 74, 29, 70, 179, 14, 0, 0, 0, 77, 110, 101, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 4, 98, 107, 0, 0, 0, 0, 8, 141, 84, 8, 0, 0, 0, 0, 74, 186, 113, 106, 0, 0, 0, 43, 38, 16, 0, 116, 20, 0, 0, 106, 5, 0, 41, 158, 8, 0, 0, 16, 96, 97, 73, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 92, 164, 68, 0, 0, 69, 65, 159, 107, 31, 0, 0, 26, 206, 77, 4, 0, 0, 0, 0, 10, 97, 164, 129, 6, 0, 0, 0, 0, 9, 33, 220, 60, 0, 0, 0, 32, 169, 166, 116, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 92, 113, 107, 15, 0, 0, 47, 196, 94, 54, 0, 0, 0, 0, 175, 200, 62, 12, 0, 0, 0, 0, 91, 89, 119, 182, 0, 0, 0, 0, 84, 36, 41, 200, 0, 0, 0, 0, 69, 194, 186, 90, 0, 0, 0, 0, 2, 41, 33, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 13, 12, 0, 0, 12, 86, 154, 169, 133, 75, 0, 0, 169, 152, 69, 17, 0, 0, 0, 0, 118, 149, 126, 9, 0, 0, 0, 0, 78, 37, 200, 54, 0, 0, 0, 0, 70, 130, 87, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 27, 2, 0, 0, 0, 4, 140, 158, 99, 5, 0, 0, 0, 50, 188, 112, 109, 45, 0, 0, 0, 26, 130, 50, 36, 87, 92, 0, 0, 0, 0, 0, 0, 1, 133, 0, 0, 0, 0, 0, 14, 114, 92, 0, 0, 0, 0, 2, 65, 97, 4, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 181, 153, 146, 7, 0, 0, 0, 153, 134, 13, 1, 0, 0, 0, 30, 245, 181, 88, 13, 0, 0, 0, 13, 62, 46, 118, 183, 7, 0, 0, 3, 15, 9, 15, 177, 34, 0, 0, 23, 114, 148, 182, 151, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 110, 126, 141, 59, 0, 0, 74, 177, 114, 76, 61, 17, 0, 2, 85, 153, 71, 0, 0, 0, 0, 24, 140, 138, 156, 0, 0, 0, 0, 0, 0, 16, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 58, 0, 0, 0, 0, 0, 19, 143, 94, 111, 84, 25, 0, 0, 98, 78, 0, 0, 1, 2, 0, 0, 114, 81, 34, 0, 0, 0, 0, 2, 9, 28, 122, 32, 0, 0, 0, 6, 70, 85, 154, 34, 0, 0, 0, 0, 3, 32, 28, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 21, 3, 0, 0, 0, 82, 126, 136, 125, 108, 40, 0, 14, 185, 68, 1, 0, 0, 0, 0, 39, 157, 136, 138, 27, 0, 0, 0, 0, 6, 10, 141, 101, 0, 0, 0, 0, 20, 111, 106, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 103, 138, 24, 0, 0, 6, 119, 208, 133, 35, 11, 0, 0, 108, 151, 24, 2, 0, 0, 0, 0, 130, 173, 175, 61, 0, 0, 0, 41, 24, 16, 168, 119, 0, 0, 0, 60, 143, 156, 81, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 90, 96, 11, 0, 0, 104, 169, 82, 28, 1, 0, 0, 0, 176, 52, 22, 4, 0, 0, 0, 0, 73, 95, 124, 160, 0, 0, 0, 0, 0, 0, 0, 164, 0, 0, 0, 23, 100, 118, 140, 127, 0, 0, 0, 0, 1, 24, 47, 10, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 129, 56, 0, 0, 0, 0, 0, 49, 124, 28, 0, 0, 0, 0, 0, 62, 182, 115, 85, 0, 0, 0, 0, 19, 10, 0, 62, 49, 0, 0, 0, 60, 0, 0, 85, 44, 0, 0, 0, 31, 71, 92, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 62, 15, 0, 0, 0, 17, 122, 148, 55, 1, 0, 0, 52, 155, 102, 14, 0, 0, 0, 0, 104, 133, 150, 53, 0, 0, 0, 44, 78, 75, 162, 85, 0, 0, 0, 33, 61, 51, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 64, 79, 97, 57, 0, 0, 0, 169, 145, 77, 65, 7, 0, 0, 0, 171, 134, 51, 2, 0, 0, 0, 0, 84, 91, 112, 161, 2, 0, 0, 0, 0, 0, 53, 187, 3, 0, 0, 0, 112, 175, 166, 59, 0, 0, 0, 0, 37, 56, 7, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 71, 132, 110, 0, 0, 0, 9, 140, 125, 55, 6, 0, 0, 0, 148, 157, 5, 0, 0, 0, 0, 0, 93, 189, 73, 1, 0, 0, 0, 34, 82, 66, 212, 42, 0, 0, 0, 2, 77, 148, 178, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 62, 138, 50, 0, 0, 12, 101, 201, 122, 32, 0, 0, 0, 119, 184, 63, 1, 0, 0, 0, 0, 89, 160, 172, 50, 0, 0, 0, 18, 60, 26, 131, 151, 0, 0, 0, 9, 129, 159, 152, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 55, 51, 5, 0, 0, 0, 0, 70, 77, 30, 42, 0, 0, 0, 0, 84, 49, 6, 21, 0, 0, 0, 0, 64, 105, 73, 113, 0, 0, 0, 0, 3, 10, 3, 86, 0, 0, 0, 0, 0, 18, 86, 40, 0, 0, 0, 0, 0, 39, 48, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 34, 0, 4, 12, 0, 0, 0, 111, 223, 153, 100, 24, 0, 0, 0, 149, 58, 4, 0, 0, 0, 0, 0, 133, 75, 0, 0, 0, 0, 0, 0, 85, 134, 0, 0, 0, 0, 28, 166, 149, 13, 0, 0, 0, 0, 19, 71, 9, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 17, 13, 30, 2, 0, 0, 1, 126, 180, 169, 118, 22, 0, 0, 60, 156, 12, 3, 0, 0, 0, 0, 54, 86, 105, 40, 0, 0, 0, 0, 0, 0, 131, 59, 0, 0, 0, 66, 148, 150, 64, 0, 0, 0, 0, 5, 31, 6, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 46, 61, 9, 0, 0, 0, 89, 163, 118, 98, 53, 0, 0, 51, 205, 25, 0, 0, 0, 0, 0, 38, 96, 158, 10, 0, 0, 0, 19, 46, 4, 165, 19, 0, 0, 0, 16, 120, 154, 128, 4, 0, 0, 0, 0, 0, 1, 3, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 22, 65, 29, 0, 0, 51, 142, 153, 141, 97, 25, 0, 0, 170, 146, 4, 0, 0, 0, 0, 0, 86, 185, 81, 1, 0, 0, 0, 26, 115, 139, 206, 22, 0, 0, 0, 0, 36, 66, 57, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 11, 17, 46, 0, 0, 0, 0, 173, 223, 235, 208, 61, 0, 0, 0, 233, 244, 140, 27, 3, 0, 0, 0, 81, 142, 217, 98, 0, 0, 0, 0, 0, 37, 227, 88, 0, 0, 0, 0, 61, 213, 90, 0, 0, 0, 0, 0, 45, 90, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 7, 0, 0, 22, 141, 131, 131, 135, 50, 0, 0, 67, 194, 53, 0, 0, 0, 0, 0, 0, 5, 143, 23, 0, 0, 0, 25, 92, 25, 159, 27, 0, 0, 0, 0, 77, 113, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 99, 98, 6, 0, 0, 0, 14, 116, 23, 8, 0, 0, 0, 0, 45, 179, 144, 84, 0, 0, 0, 0, 15, 98, 3, 103, 0, 0, 0, 0, 0, 0, 2, 112, 0, 0, 0, 0, 101, 127, 131, 61, 0, 0, 0, 0, 24, 61, 19, 0, 0, 0 },
    { 0, 0, 0, 1, 25, 0, 0, 0, 0, 0, 0, 29, 57, 0, 0, 0, 0, 0, 0, 78, 114, 104, 16, 0, 0, 0, 0, 124, 62, 1, 0, 0, 0, 0, 42, 68, 93, 75, 0, 0, 0, 11, 23, 0, 66, 93, 0, 0, 0, 0, 74, 101, 71, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 17, 0, 0, 0, 7, 97, 106, 143, 46, 0, 0, 15, 138, 139, 77, 3, 0, 0, 0, 54, 76, 131, 0, 0, 0, 0, 42, 65, 12, 124, 0, 0, 0, 0, 5, 113, 115, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 73, 113, 19, 0, 0, 0, 0, 4, 115, 7, 0, 0, 0, 0, 0, 8, 142, 99, 66, 0, 0, 0, 0, 0, 19, 7, 114, 0, 0, 0, 0, 47, 33, 50, 133, 0, 0, 0, 0, 28, 123, 119, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 55, 51, 0, 0, 2, 73, 160, 134, 75, 35, 0, 0, 90, 175, 27, 0, 0, 0, 0, 0, 39, 73, 129, 0, 0, 0, 0, 0, 65, 16, 132, 0, 0, 0, 0, 0, 116, 129, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 112, 126, 77, 0, 0, 0, 14, 147, 3, 0, 0, 0, 0, 0, 0, 200, 152, 108, 42, 0, 0, 0, 0, 105, 29, 0, 70, 28, 0, 0, 0, 0, 0, 0, 35, 105, 0, 0, 0, 49, 130, 143, 189, 77, 0, 0, 0, 0, 5, 45, 63, 3, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 50, 82, 110, 57, 0, 0, 10, 114, 117, 70, 5, 0, 0, 0, 17, 42, 99, 0, 0, 0, 0, 30, 82, 26, 90, 0, 0, 0, 0, 0, 46, 64, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 0, 0, 16, 128, 158, 139, 113, 10, 0, 0, 82, 199, 65, 23, 1, 0, 0, 0, 0, 33, 110, 0, 0, 0, 0, 72, 42, 37, 111, 0, 0, 0, 0, 6, 90, 103, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 82, 98, 104, 78, 0, 0, 57, 129, 78, 51, 7, 0, 0, 0, 25, 76, 72, 0, 0, 0, 0, 0, 73, 46, 78, 0, 0, 0, 0, 0, 66, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 71, 82, 91, 16, 0, 0, 0, 88, 131, 55, 14, 0, 0, 0, 0, 143, 75, 0, 0, 0, 0, 0, 0, 107, 175, 70, 1, 0, 0, 0, 0, 1, 53, 168, 117, 0, 0, 0, 0, 0, 0, 99, 157, 0, 0, 0, 0, 0, 0, 48, 33, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 63, 127, 31, 0, 0, 0, 55, 151, 71, 4, 0, 0, 0, 51, 207, 79, 0, 0, 0, 0, 0, 16, 32, 191, 51, 0, 0, 0, 24, 59, 19, 175, 23, 0, 0, 0, 12, 151, 159, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 114, 58, 0, 0, 0, 16, 133, 134, 34, 0, 0, 0, 0, 121, 204, 77, 10, 0, 0, 0, 0, 16, 40, 129, 116, 0, 0, 0, 0, 74, 1, 143, 95, 0, 0, 0, 0, 91, 161, 76, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 104, 22, 0, 0, 0, 0, 7, 138, 22, 0, 0, 0, 0, 0, 28, 162, 39, 0, 0, 0, 0, 0, 0, 24, 134, 122, 0, 0, 0, 0, 0, 0, 83, 122, 0, 0, 0, 0, 1, 67, 95, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 107, 100, 114, 126, 68, 0, 0, 4, 221, 137, 115, 98, 32, 0, 0, 26, 238, 151, 148, 143, 58, 1, 0, 1, 75, 95, 62, 164, 222, 39, 0, 19, 10, 5, 92, 207, 107, 1, 0, 83, 221, 236, 185, 102, 2, 0, 0, 1, 40, 56, 9, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 67, 113, 99, 16, 0, 0, 0, 77, 157, 74, 97, 104, 0, 0, 0, 31, 180, 125, 141, 67, 0, 0, 0, 0, 146, 78, 61, 183, 9, 0, 0, 0, 46, 44, 0, 118, 57, 0, 0, 0, 47, 175, 191, 206, 28, 0, 0, 0, 0, 12, 63, 40, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 173, 193, 167, 134, 76, 0, 0, 176, 162, 53, 10, 0, 0, 0, 0, 120, 157, 3, 0, 0, 0, 0, 0, 10, 144, 87, 0, 0, 0, 0, 0, 45, 125, 94, 0, 0, 0, 0, 0, 98, 131, 10, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 80, 119, 125, 53, 0, 0, 0, 125, 250, 169, 88, 18, 0, 0, 30, 236, 222, 210, 200, 31, 0, 0, 25, 60, 0, 0, 72, 168, 0, 0, 129, 120, 83, 75, 131, 157, 0, 0, 49, 120, 125, 125, 94, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 20, 75, 14, 0, 0, 81, 188, 202, 177, 116, 20, 0, 0, 218, 208, 59, 3, 0, 0, 0, 21, 22, 75, 196, 72, 0, 0, 0, 79, 137, 31, 95, 172, 0, 0, 0, 0, 76, 171, 193, 127, 0, 0, 0, 0, 0, 6, 27, 2, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 164, 150, 119, 15, 0, 0, 64, 218, 47, 4, 0, 0, 0, 31, 207, 225, 189, 78, 0, 0, 0, 112, 59, 2, 30, 154, 79, 0, 0, 91, 70, 18, 3, 82, 133, 0, 0, 33, 144, 183, 179, 161, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 33, 0, 0, 7, 138, 157, 135, 93, 24, 0, 0, 53, 152, 17, 0, 0, 0, 0, 0, 46, 110, 113, 3, 0, 0, 0, 0, 0, 0, 132, 27, 0, 0, 0, 0, 103, 115, 110, 3, 0, 0, 0, 0, 102, 83, 5, 0, 0, 0 },
    { 0, 0, 0, 7, 48, 10, 0, 0, 0, 0, 28, 119, 93, 17, 0, 0, 0, 0, 101, 43, 0, 0, 0, 0, 0, 0, 87, 70, 0, 0, 0, 0, 0, 0, 3, 86, 94, 31, 0, 0, 0, 0, 20, 30, 54, 134, 10, 0, 0, 0, 25, 58, 93, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 68, 134, 127, 0, 0, 0, 0, 96, 190, 40, 2, 0, 0, 0, 0, 177, 226, 177, 78, 0, 0, 0, 0, 47, 22, 27, 174, 31, 0, 0, 31, 122, 47, 33, 173, 26, 0, 0, 4, 77, 150, 156, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 73, 20, 0, 0, 0, 74, 122, 109, 35, 0, 0, 0, 0, 134, 81, 90, 30, 0, 0, 0, 0, 75, 16, 8, 72, 122, 53, 0, 0, 0, 0, 0, 0, 10, 138, 0, 0, 0, 0, 0, 23, 69, 108, 0, 0, 0, 0, 0, 23, 51, 19, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 71, 63, 0, 0, 0, 0, 75, 140, 66, 39, 0, 0, 0, 0, 159, 24, 0, 0, 0, 0, 0, 0, 120, 134, 68, 20, 0, 0, 0, 0, 5, 68, 160, 126, 0, 0, 0, 0, 0, 0, 134, 84, 0, 0, 0, 0, 0, 0, 46, 3, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 76, 102, 112, 32, 0, 0, 0, 81, 184, 82, 105, 59, 0, 0, 0, 0, 122, 71, 40, 0, 0, 0, 0, 19, 187, 79, 160, 0, 0, 0, 3, 100, 61, 1, 136, 0, 0, 0, 0, 90, 169, 159, 79, 0, 0, 0, 0, 2, 41, 26, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 155, 173, 9, 0, 0, 0, 91, 238, 97, 16, 0, 0, 0, 10, 201, 168, 169, 157, 1, 0, 0, 4, 31, 0, 1, 140, 33, 0, 0, 17, 27, 2, 30, 173, 28, 0, 0, 24, 142, 180, 164, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 51, 0, 0, 0, 0, 5, 116, 135, 94, 21, 0, 0, 0, 66, 143, 1, 0, 0, 0, 0, 0, 29, 110, 14, 0, 0, 0, 0, 0, 0, 32, 83, 0, 0, 0, 0, 0, 0, 70, 128, 0, 0, 0, 0, 0, 16, 97, 21, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 152, 58, 0, 0, 0, 0, 31, 188, 16, 2, 0, 0, 0, 0, 116, 230, 188, 152, 24, 0, 0, 0, 79, 32, 0, 66, 125, 0, 0, 3, 43, 3, 31, 144, 76, 0, 0, 2, 151, 177, 162, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 20, 1, 0, 0, 0, 0, 0, 23, 192, 105, 0, 0, 0, 0, 40, 201, 70, 79, 0, 0, 0, 0, 48, 201, 59, 0, 0, 0, 0, 0, 30, 9, 167, 116, 0, 0, 0, 0, 182, 81, 162, 155, 0, 0, 0, 0, 46, 110, 78, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 117, 168, 35, 0, 0, 19, 125, 168, 72, 16, 0, 0, 0, 166, 234, 110, 26, 0, 0, 0, 29, 139, 114, 130, 197, 12, 0, 0, 98, 124, 39, 43, 198, 29, 0, 0, 10, 118, 166, 170, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 157, 164, 3, 0, 0, 0, 36, 210, 136, 48, 0, 0, 0, 0, 105, 196, 146, 187, 5, 0, 0, 0, 2, 1, 0, 106, 56, 0, 55, 136, 89, 38, 48, 174, 26, 0, 0, 0, 69, 135, 126, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 98, 173, 74, 0, 0, 0, 0, 114, 221, 101, 57, 0, 0, 0, 0, 172, 220, 166, 201, 37, 0, 0, 0, 70, 16, 0, 109, 72, 0, 0, 0, 101, 44, 43, 180, 35, 0, 0, 0, 82, 180, 177, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 31, 13, 0, 0, 0, 0, 3, 82, 218, 74, 0, 0, 0, 0, 102, 177, 29, 2, 0, 0, 0, 0, 168, 111, 15, 0, 0, 0, 0, 0, 72, 172, 206, 206, 11, 0, 0, 0, 40, 114, 141, 203, 8, 0, 0, 0, 12, 100, 86, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 9, 25, 37, 33, 3, 0, 0, 136, 192, 148, 127, 101, 24, 0, 0, 162, 159, 116, 55, 0, 0, 0, 0, 155, 174, 37, 163, 19, 0, 0, 0, 32, 26, 17, 174, 25, 0, 0, 0, 95, 113, 177, 76, 0, 0, 0, 0, 61, 102, 29, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 67, 91, 124, 154, 93, 0, 0, 82, 172, 85, 60, 18, 0, 0, 0, 112, 117, 126, 0, 0, 0, 0, 0, 154, 87, 144, 2, 0, 0, 0, 0, 12, 68, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 79, 0, 0, 0, 0, 0, 104, 92, 27, 0, 0, 0, 0, 61, 169, 74, 4, 0, 0, 0, 0, 5, 2, 96, 71, 0, 0, 0, 0, 2, 15, 100, 79, 0, 0, 0, 0, 34, 130, 102, 5, 0, 0, 0, 0, 0, 31, 7, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 28, 0, 0, 12, 71, 139, 144, 81, 13, 0, 0, 83, 176, 48, 3, 0, 0, 0, 7, 48, 154, 64, 0, 0, 0, 0, 31, 150, 136, 127, 0, 0, 0, 0, 0, 34, 53, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 90, 125, 125, 0, 0, 0, 0, 175, 163, 112, 37, 0, 0, 0, 0, 193, 217, 180, 167, 10, 0, 0, 15, 37, 26, 0, 56, 162, 0, 0, 130, 181, 143, 67, 101, 144, 0, 0, 0, 0, 34, 119, 128, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 143, 129, 108, 87, 62, 0, 0, 108, 27, 0, 0, 0, 0, 0, 0, 89, 131, 36, 0, 0, 0, 0, 0, 0, 28, 105, 0, 0, 0, 0, 0, 27, 65, 81, 0, 0, 0, 0, 0, 51, 125, 10, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79, 60, 116, 148, 36, 0, 0, 0, 207, 169, 60, 5, 0, 0, 0, 0, 181, 203, 160, 116, 0, 0, 0, 0, 71, 41, 3, 106, 85, 0, 0, 8, 5, 0, 1, 55, 135, 0, 0, 85, 174, 158, 154, 157, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 85, 63, 0, 0, 0, 0, 0, 83, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 54, 59, 5, 0, 0, 0, 0, 0, 0, 88, 61, 0, 0, 0, 0, 78, 75, 75, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 20, 56, 87, 55, 0, 0, 0, 79, 134, 41, 4, 0, 0, 0, 15, 167, 104, 100, 68, 0, 0, 0, 15, 22, 0, 0, 57, 55, 0, 0, 0, 85, 0, 6, 93, 28, 0, 0, 0, 72, 111, 95, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 99, 63, 0, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 15, 110, 0, 0, 0, 0, 0, 0, 12, 79, 100, 63, 0, 0, 0, 0, 53, 46, 7, 95, 0, 0, 0, 0, 15, 77, 89, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 46, 36, 70, 40, 0, 0, 0, 205, 179, 131, 101, 17, 0, 0, 0, 165, 121, 81, 39, 0, 0, 0, 0, 152, 228, 101, 170, 58, 0, 0, 0, 103, 95, 0, 35, 167, 6, 0, 40, 106, 84, 76, 101, 167, 15, 0, 15, 60, 63, 63, 63, 30, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 92, 80, 69, 11, 0, 0, 23, 187, 96, 87, 98, 44, 0, 0, 62, 110, 89, 137, 143, 80, 2, 0, 55, 219, 99, 0, 0, 154, 91, 0, 7, 66, 0, 0, 21, 175, 77, 0, 0, 152, 166, 162, 158, 51, 0, 0, 0, 5, 26, 22, 1, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 23, 72, 28, 0, 0, 0, 24, 161, 82, 23, 0, 0, 0, 0, 51, 172, 82, 8, 0, 0, 0, 0, 25, 32, 64, 91, 0, 0, 0, 0, 0, 0, 29, 93, 0, 0, 0, 0, 14, 101, 113, 43, 0, 0, 0, 0, 0, 38, 12, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 117, 117, 145, 77, 0, 0, 0, 0, 156, 125, 28, 5, 0, 0, 0, 0, 109, 202, 168, 161, 17, 0, 0, 0, 43, 170, 5, 48, 136, 0, 0, 0, 15, 14, 0, 48, 150, 0, 0, 11, 153, 137, 148, 130, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 87, 86, 108, 110, 0, 0, 0, 8, 210, 206, 162, 83, 0, 0, 0, 0, 154, 119, 56, 6, 0, 0, 0, 0, 102, 169, 104, 169, 3, 0, 0, 0, 11, 13, 0, 138, 41, 0, 0, 31, 173, 144, 135, 183, 25, 0, 0, 0, 26, 62, 63, 44, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 3, 42, 100, 10, 0, 0, 0, 191, 132, 99, 37, 1, 0, 0, 0, 178, 129, 141, 116, 0, 0, 0, 0, 148, 118, 3, 109, 63, 0, 0, 0, 21, 5, 0, 35, 143, 0, 0, 14, 147, 95, 63, 92, 131, 0, 0, 1, 51, 63, 63, 63, 23, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 126, 117, 4, 0, 0, 0, 0, 98, 181, 106, 3, 0, 0, 0, 0, 67, 101, 0, 0, 0, 0, 0, 0, 62, 118, 0, 0, 0, 0, 8, 130, 98, 105, 0, 0, 0, 0, 0, 92, 226, 60, 0, 0, 0, 0, 0, 1, 40, 4, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 171, 137, 109, 20, 0, 0, 27, 181, 96, 19, 1, 0, 0, 13, 71, 50, 144, 45, 0, 0, 0, 89, 52, 76, 135, 21, 0, 0, 0, 17, 86, 64, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 121, 177, 154, 121, 54, 0, 0, 54, 209, 77, 65, 60, 25, 0, 3, 9, 83, 149, 0, 0, 0, 0, 38, 53, 90, 144, 0, 0, 0, 0, 23, 157, 110, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 112, 112, 98, 31, 0, 0, 0, 72, 191, 81, 31, 1, 0, 7, 44, 99, 121, 18, 0, 0, 0, 35, 144, 119, 108, 1, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 88, 152, 110, 0, 0, 0, 16, 183, 106, 35, 1, 0, 0, 0, 114, 173, 121, 146, 150, 31, 0, 0, 31, 59, 30, 0, 25, 113, 0, 0, 0, 57, 28, 20, 101, 83, 0, 0, 0, 66, 169, 164, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 114, 127, 109, 46, 0, 0, 3, 122, 139, 60, 10, 0, 0, 13, 37, 92, 112, 11, 0, 0, 0, 25, 112, 105, 117, 10, 0, 0, 0, 0, 19, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 63, 78, 50, 0, 0, 0, 0, 137, 83, 75, 5, 0, 0, 0, 20, 164, 48, 0, 0, 0, 0, 0, 65, 160, 131, 90, 0, 0, 0, 0, 48, 5, 107, 108, 0, 0, 0, 0, 141, 169, 129, 12, 0, 0, 0, 0, 10, 49, 4, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 59, 98, 68, 0, 0, 0, 0, 138, 85, 31, 6, 0, 0, 0, 0, 131, 85, 9, 0, 0, 0, 0, 0, 4, 66, 149, 80, 0, 0, 0, 0, 2, 2, 18, 119, 0, 0, 0, 0, 20, 139, 128, 75, 0, 0, 0, 0, 0, 34, 39, 2, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 38, 21, 6, 0, 0, 0, 16, 195, 156, 116, 45, 0, 0, 17, 139, 172, 16, 0, 0, 0, 0, 141, 103, 95, 148, 0, 0, 0, 29, 36, 42, 129, 131, 0, 0, 0, 34, 157, 132, 59, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 2, 0, 0, 0, 38, 177, 160, 174, 73, 0, 0, 39, 169, 103, 74, 6, 0, 0, 0, 129, 149, 98, 0, 0, 0, 0, 19, 5, 14, 125, 0, 0, 0, 0, 19, 156, 172, 30, 0, 0, 0, 0, 0, 38, 33, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 33, 58, 57, 0, 0, 0, 0, 88, 189, 110, 73, 1, 0, 0, 0, 130, 214, 177, 81, 0, 0, 0, 0, 37, 12, 68, 155, 0, 0, 0, 0, 0, 0, 97, 137, 0, 0, 0, 0, 84, 151, 153, 25, 0, 0, 0, 0, 38, 98, 13, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 58, 81, 116, 58, 0, 0, 80, 204, 175, 140, 71, 4, 0, 0, 174, 94, 55, 17, 0, 0, 0, 0, 233, 186, 167, 192, 0, 0, 0, 0, 53, 14, 118, 175, 0, 0, 0, 0, 173, 188, 118, 24, 0, 0, 0, 0, 43, 32, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 98, 74, 31, 0, 0, 0, 0, 178, 226, 116, 48, 0, 0, 0, 0, 152, 205, 50, 0, 0, 0, 0, 0, 32, 107, 189, 134, 0, 0, 0, 0, 0, 0, 81, 191, 0, 0, 0, 0, 37, 170, 212, 108, 0, 0, 0, 0, 0, 35, 46, 1, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 100, 114, 108, 46, 0, 0, 1, 104, 103, 41, 0, 0, 0, 0, 114, 119, 57, 0, 0, 0, 0, 30, 93, 131, 23, 0, 0, 0, 0, 12, 56, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 88, 143, 80, 0, 0, 0, 0, 120, 127, 31, 1, 0, 0, 0, 0, 95, 158, 134, 109, 0, 0, 0, 0, 6, 57, 64, 166, 0, 0, 0, 0, 28, 13, 96, 145, 0, 0, 0, 0, 97, 184, 120, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 57, 45, 9, 0, 0, 0, 44, 182, 144, 66, 3, 0, 0, 39, 179, 136, 5, 0, 0, 0, 19, 22, 21, 130, 28, 0, 0, 0, 102, 100, 140, 126, 1, 0, 0, 0, 31, 79, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 94, 107, 100, 52, 0, 0, 38, 156, 105, 59, 21, 0, 0, 0, 26, 13, 95, 0, 0, 0, 0, 0, 135, 111, 78, 0, 0, 0, 0, 0, 5, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 6, 8, 0, 0, 0, 0, 164, 185, 154, 61, 0, 0, 10, 97, 175, 25, 0, 0, 0, 18, 136, 112, 138, 17, 0, 0, 0, 48, 101, 45, 128, 4, 0, 0, 0, 0, 95, 112, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 92, 118, 115, 26, 0, 0, 38, 95, 100, 57, 9, 0, 0, 40, 101, 83, 141, 93, 0, 0, 0, 33, 123, 117, 101, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 31, 0, 0, 0, 11, 107, 112, 88, 29, 0, 0, 94, 123, 60, 6, 0, 0, 0, 0, 125, 53, 0, 0, 0, 0, 0, 0, 33, 102, 0, 0, 0, 0, 0, 0, 56, 108, 0, 0, 0, 0, 0, 0, 52, 21, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 48, 10, 0, 0, 0, 0, 0, 116, 167, 140, 131, 22, 0, 0, 0, 183, 84, 0, 0, 0, 0, 0, 0, 54, 158, 162, 90, 0, 0, 0, 0, 0, 3, 95, 183, 0, 0, 0, 0, 10, 40, 132, 61, 0, 0, 0, 0, 43, 81, 19, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 118, 128, 100, 18, 0, 0, 3, 113, 66, 1, 0, 0, 0, 42, 114, 155, 153, 111, 0, 0, 0, 33, 130, 130, 129, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 78, 8, 0, 0, 0, 0, 0, 108, 23, 6, 0, 0, 0, 0, 11, 114, 0, 0, 0, 0, 0, 0, 48, 185, 140, 89, 0, 0, 0, 0, 8, 46, 35, 105, 0, 0, 0, 0, 0, 0, 119, 45, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 111, 114, 20, 0, 0, 0, 73, 160, 72, 83, 43, 0, 0, 0, 44, 172, 71, 7, 0, 0, 0, 0, 0, 19, 165, 140, 0, 0, 0, 0, 20, 6, 109, 140, 0, 0, 0, 0, 159, 171, 138, 23, 0, 0, 0, 0, 17, 42, 2, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 0, 0, 0, 0, 107, 144, 150, 128, 21, 0, 0, 40, 181, 62, 23, 0, 0, 0, 0, 101, 127, 108, 173, 0, 0, 0, 68, 138, 133, 159, 106, 0, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 128, 150, 139, 53, 0, 0, 0, 3, 163, 65, 53, 16, 0, 0, 0, 17, 183, 150, 156, 9, 0, 0, 0, 0, 0, 0, 130, 39, 0, 0, 73, 93, 28, 113, 175, 5, 0, 0, 32, 164, 183, 93, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 2, 0, 0, 0, 0, 1, 116, 171, 154, 119, 35, 0, 0, 20, 139, 3, 10, 0, 0, 0, 0, 10, 135, 21, 0, 0, 0, 0, 0, 0, 46, 98, 0, 0, 0, 0, 0, 52, 148, 34, 0, 0, 0, 0, 0, 86, 59, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 90, 116, 86, 12, 0, 0, 37, 145, 104, 37, 0, 0, 0, 31, 122, 118, 171, 99, 0, 0, 0, 53, 132, 120, 113, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 68, 100, 35, 0, 0, 5, 134, 194, 73, 2, 0, 0, 0, 30, 178, 55, 0, 0, 0, 0, 0, 17, 124, 61, 0, 0, 0, 0, 0, 69, 20, 160, 10, 0, 0, 0, 0, 83, 130, 121, 0, 0, 0, 0, 0, 5, 51, 12, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 128, 133, 58, 0, 0, 0, 16, 179, 120, 43, 0, 0, 0, 15, 26, 76, 78, 176, 2, 0, 0, 84, 122, 121, 122, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 121, 103, 108, 20, 0, 0, 31, 161, 86, 31, 0, 0, 0, 46, 48, 79, 134, 115, 0, 0, 0, 36, 111, 114, 105, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 78, 89, 48, 0, 0, 0, 53, 193, 102, 58, 23, 0, 0, 8, 142, 212, 94, 10, 0, 0, 0, 2, 14, 51, 166, 123, 0, 0, 0, 68, 142, 104, 163, 140, 0, 0, 0, 0, 18, 55, 70, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 32, 41, 0, 0, 0, 71, 158, 156, 133, 57, 0, 0, 0, 156, 82, 0, 0, 0, 0, 0, 0, 49, 150, 142, 17, 0, 0, 0, 0, 2, 8, 142, 111, 0, 0, 0, 0, 53, 88, 117, 98, 0, 0, 0, 0, 6, 74, 81, 10, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 43, 0, 0, 0, 0, 0, 17, 167, 167, 128, 24, 0, 0, 0, 86, 132, 30, 69, 19, 0, 0, 0, 88, 168, 154, 46, 0, 0, 0, 0, 1, 24, 112, 140, 0, 0, 0, 0, 0, 0, 155, 82, 0, 0, 0, 0, 0, 0, 28, 4, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 34, 68, 90, 80, 7, 0, 0, 111, 213, 137, 101, 76, 16, 0, 0, 203, 182, 56, 2, 0, 0, 0, 0, 51, 96, 190, 117, 0, 0, 0, 55, 76, 23, 158, 130, 0, 0, 0, 13, 130, 179, 147, 30, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 40, 59, 3, 0, 0, 31, 139, 203, 158, 101, 23, 0, 0, 158, 240, 116, 10, 0, 0, 0, 0, 30, 44, 166, 137, 0, 0, 0, 59, 122, 103, 187, 114, 0, 0, 0, 2, 38, 67, 47, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 67, 74, 62, 21, 0, 0, 99, 67, 2, 28, 67, 47, 0, 0, 19, 29, 56, 0, 0, 0, 0, 0, 12, 35, 63, 0, 0, 0, 0, 0, 33, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 64, 150, 28, 0, 0, 0, 39, 146, 118, 32, 0, 0, 0, 74, 141, 0, 0, 0, 0, 0, 0, 93, 159, 149, 19, 0, 0, 0, 0, 14, 5, 194, 73, 0, 0, 0, 0, 154, 178, 107, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 121, 147, 127, 21, 0, 0, 28, 195, 93, 12, 2, 0, 0, 0, 98, 207, 181, 74, 0, 0, 0, 0, 0, 0, 92, 173, 0, 0, 0, 56, 69, 23, 144, 145, 0, 0, 0, 28, 113, 157, 109, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 104, 33, 6, 1, 0, 0, 0, 66, 119, 72, 101, 40, 0, 0, 0, 124, 155, 106, 31, 0, 0, 0, 1, 13, 1, 17, 123, 0, 0, 0, 4, 81, 16, 28, 136, 0, 0, 0, 0, 25, 115, 131, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 26, 0, 0, 0, 0, 0, 0, 87, 88, 72, 15, 0, 0, 0, 44, 82, 0, 0, 0, 0, 0, 0, 68, 60, 0, 0, 0, 0, 0, 0, 20, 79, 76, 15, 0, 0, 0, 0, 0, 0, 95, 33, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 60, 45, 12, 23, 0, 0, 0, 195, 235, 137, 144, 89, 0, 0, 0, 122, 138, 133, 21, 0, 0, 0, 0, 0, 0, 59, 148, 0, 0, 0, 0, 52, 0, 0, 143, 0, 0, 0, 0, 115, 146, 155, 136, 0, 0, 0, 0, 11, 49, 48, 10, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 58, 81, 93, 106, 14, 0, 0, 141, 180, 134, 113, 47, 3, 0, 0, 220, 130, 12, 0, 0, 0, 0, 0, 35, 96, 189, 48, 0, 0, 0, 0, 0, 0, 140, 123, 0, 0, 0, 2, 173, 178, 204, 70, 0, 0, 0, 0, 26, 48, 31, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 143, 146, 101, 17, 0, 0, 0, 153, 40, 0, 0, 0, 0, 0, 0, 90, 114, 21, 0, 0, 0, 0, 0, 0, 9, 102, 79, 0, 0, 0, 14, 24, 0, 7, 116, 0, 0, 0, 2, 94, 121, 138, 140, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 42, 6, 0, 0, 57, 198, 169, 177, 102, 15, 0, 0, 167, 219, 53, 3, 0, 0, 0, 0, 60, 102, 180, 24, 0, 0, 0, 46, 82, 37, 199, 55, 0, 0, 0, 16, 75, 144, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 33, 0, 0, 0, 0, 0, 84, 191, 137, 73, 0, 0, 0, 34, 216, 161, 27, 0, 0, 0, 3, 3, 23, 146, 126, 0, 0, 0, 122, 118, 85, 178, 49, 0, 0, 0, 3, 55, 86, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 133, 100, 0, 0, 0, 0, 2, 147, 40, 1, 0, 0, 0, 0, 1, 152, 159, 85, 0, 0, 0, 0, 34, 0, 28, 152, 0, 0, 0, 0, 104, 0, 12, 153, 0, 0, 0, 0, 128, 110, 124, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 160, 136, 118, 39, 0, 0, 30, 196, 130, 32, 0, 0, 0, 0, 41, 83, 73, 175, 0, 0, 0, 24, 171, 154, 153, 95, 0, 0, 0, 12, 85, 58, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 72, 11, 0, 0, 0, 0, 0, 90, 0, 0, 0, 0, 0, 0, 0, 87, 0, 0, 0, 0, 0, 0, 0, 57, 108, 12, 0, 0, 0, 0, 0, 0, 86, 46, 0, 0, 0, 0, 15, 74, 73, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 89, 41, 2, 0, 0, 0, 0, 65, 131, 51, 12, 0, 0, 0, 0, 20, 151, 67, 5, 0, 0, 0, 0, 2, 22, 90, 108, 0, 0, 0, 0, 0, 0, 9, 126, 0, 0, 0, 0, 6, 91, 118, 87, 0, 0, 0, 0, 0, 40, 42, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 151, 124, 126, 47, 0, 0, 6, 188, 109, 30, 4, 0, 0, 0, 20, 89, 189, 72, 0, 0, 0, 14, 145, 129, 153, 25, 0, 0, 0, 0, 16, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 63, 104, 22, 0, 0, 17, 164, 129, 82, 16, 0, 0, 0, 83, 158, 13, 0, 0, 0, 0, 0, 76, 125, 149, 114, 0, 0, 0, 60, 84, 65, 182, 120, 0, 0, 0, 25, 93, 96, 70, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 7, 0, 0, 0, 0, 101, 226, 186, 171, 39, 0, 0, 0, 160, 244, 36, 35, 14, 0, 0, 0, 25, 132, 190, 68, 0, 0, 0, 0, 5, 82, 167, 99, 0, 0, 0, 0, 4, 158, 168, 7, 0, 0, 0, 0, 0, 57, 38, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 113, 115, 104, 53, 0, 0, 37, 196, 37, 0, 0, 0, 0, 0, 14, 31, 145, 12, 0, 0, 0, 44, 123, 77, 118, 1, 0, 0, 0, 8, 86, 81, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 21, 2, 0, 0, 16, 144, 141, 110, 87, 45, 0, 0, 50, 217, 33, 0, 0, 0, 0, 0, 37, 126, 161, 112, 0, 0, 0, 5, 120, 108, 174, 108, 0, 0, 0, 10, 78, 98, 76, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 49, 63, 63, 63, 63, 31, 0, 28, 231, 164, 124, 104, 77, 38, 0, 8, 208, 85, 55, 8, 0, 0, 0, 39, 198, 130, 134, 177, 0, 0, 0, 0, 14, 0, 32, 212, 12, 0, 0, 0, 83, 131, 193, 116, 0, 0, 0, 0, 37, 88, 44, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 2, 0, 0, 14, 113, 130, 140, 125, 20, 0, 0, 51, 174, 6, 0, 0, 0, 0, 9, 30, 86, 145, 59, 0, 0, 0, 49, 171, 145, 144, 58, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 12, 53, 34, 0, 0, 76, 154, 124, 116, 60, 15, 0, 0, 121, 24, 0, 0, 0, 0, 0, 0, 73, 98, 7, 0, 0, 0, 0, 0, 0, 39, 97, 0, 0, 0, 0, 0, 47, 48, 106, 0, 0, 0, 0, 0, 53, 103, 32, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 11, 0, 0, 0, 69, 142, 139, 103, 37, 0, 0, 23, 191, 176, 31, 0, 0, 0, 0, 60, 58, 116, 109, 0, 0, 0, 34, 157, 62, 156, 54, 0, 0, 0, 8, 119, 117, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 25, 26, 0, 0, 0, 0, 4, 161, 74, 27, 0, 0, 0, 0, 75, 88, 2, 0, 0, 0, 0, 25, 162, 96, 19, 0, 0, 0, 0, 10, 46, 138, 49, 0, 0, 0, 0, 79, 119, 26, 0, 0, 0, 0, 0, 21, 3, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 43, 95, 119, 26, 0, 0, 15, 158, 96, 23, 9, 61, 0, 0, 36, 160, 127, 139, 114, 0, 0, 0, 0, 27, 6, 0, 82, 72, 0, 0, 0, 33, 0, 2, 101, 57, 0, 0, 0, 170, 136, 146, 92, 0, 0, 0, 0, 39, 60, 21, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 147, 43, 0, 0, 0, 0, 0, 163, 4, 0, 0, 0, 0, 0, 0, 179, 135, 51, 0, 0, 0, 0, 0, 23, 39, 151, 0, 0, 0, 0, 35, 131, 99, 155, 0, 0, 0, 0, 0, 99, 139, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 42, 61, 71, 15, 0, 0, 5, 147, 155, 78, 52, 8, 0, 0, 107, 229, 136, 14, 0, 0, 0, 0, 18, 6, 163, 85, 0, 0, 0, 71, 142, 107, 180, 32, 0, 0, 0, 11, 73, 87, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 30, 5, 0, 0, 0, 76, 123, 104, 75, 60, 10, 0, 0, 106, 97, 39, 2, 0, 0, 0, 0, 0, 0, 48, 81, 0, 0, 0, 0, 0, 0, 75, 96, 0, 0, 0, 39, 111, 126, 48, 1, 0, 0, 0, 30, 55, 7, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 100, 111, 104, 0, 0, 0, 1, 133, 17, 0, 0, 0, 0, 0, 48, 170, 105, 98, 46, 0, 0, 0, 1, 0, 3, 9, 76, 69, 0, 0, 29, 4, 0, 0, 2, 112, 0, 0, 11, 98, 103, 109, 123, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 50, 0, 0, 0, 84, 126, 141, 205, 39, 0, 0, 38, 185, 91, 54, 50, 0, 0, 2, 164, 128, 156, 0, 0, 0, 0, 8, 71, 52, 117, 0, 0, 0, 0, 39, 160, 125, 0, 0, 0, 0, 0, 1, 11, 1, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 9, 0, 0, 0, 35, 159, 186, 134, 17, 0, 0, 20, 154, 91, 22, 0, 0, 0, 0, 123, 184, 183, 33, 0, 0, 0, 14, 105, 78, 163, 22, 0, 0, 0, 49, 134, 102, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 122, 83, 9, 0, 0, 0, 32, 218, 90, 120, 25, 0, 0, 0, 64, 226, 4, 0, 0, 0, 0, 0, 92, 196, 202, 44, 0, 0, 0, 0, 9, 21, 165, 130, 0, 0, 0, 0, 1, 94, 232, 133, 0, 0, 0, 0, 0, 0, 52, 21, 0, 0 },
    { 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 83, 95, 0, 0, 0, 0, 4, 99, 54, 0, 0, 0, 0, 0, 31, 125, 0, 0, 0, 0, 0, 0, 0, 50, 119, 27, 0, 0, 0, 0, 2, 4, 87, 88, 0, 0, 0, 0, 23, 89, 88, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 60, 14, 0, 0, 0, 56, 158, 142, 64, 3, 0, 0, 9, 161, 181, 59, 0, 0, 0, 0, 125, 108, 100, 131, 0, 0, 0, 0, 19, 16, 155, 65, 0, 0, 0, 57, 168, 144, 36, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 45, 49, 0, 0, 0, 0, 10, 230, 131, 60, 0, 0, 0, 3, 101, 236, 58, 0, 0, 0, 0, 80, 145, 149, 67, 0, 0, 0, 0, 14, 68, 139, 17, 0, 0, 0, 141, 178, 129, 2, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5, 44, 67, 80, 12, 0, 76, 139, 130, 92, 71, 27, 3, 0, 85, 112, 75, 33, 2, 0, 0, 0, 0, 9, 42, 102, 136, 57, 0, 0, 0, 16, 0, 0, 19, 122, 0, 0, 0, 108, 137, 128, 137, 37, 0, 0, 0, 5, 29, 22, 2, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 85, 83, 38, 0, 0, 0, 14, 99, 86, 66, 62, 16, 0, 0, 100, 74, 15, 0, 0, 85, 31, 0, 42, 0, 0, 0, 22, 85, 16, 0, 0, 0, 11, 76, 59, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 17, 1, 0, 0, 0, 49, 144, 142, 111, 21, 0, 0, 17, 151, 90, 2, 0, 0, 0, 0, 140, 126, 173, 17, 0, 0, 0, 10, 45, 18, 137, 4, 0, 0, 0, 63, 127, 123, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 126, 145, 118, 16, 0, 0, 0, 96, 163, 26, 0, 0, 0, 0, 81, 142, 152, 4, 0, 0, 0, 38, 81, 118, 74, 0, 0, 0, 0, 31, 82, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 55, 54, 0, 0, 0, 0, 0, 34, 176, 45, 0, 0, 0, 0, 33, 152, 22, 0, 0, 0, 0, 0, 111, 148, 80, 145, 16, 0, 0, 0, 155, 106, 137, 145, 24, 0, 0, 0, 158, 169, 165, 56, 0, 0, 0, 0, 32, 57, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 12, 28, 0, 0, 0, 0, 0, 2, 101, 53, 0, 0, 0, 0, 0, 89, 15, 0, 0, 0, 0, 0, 13, 94, 58, 24, 0, 0, 0, 0, 74, 81, 36, 81, 0, 0, 0, 0, 76, 71, 10, 81, 0, 0, 0, 0, 6, 67, 74, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 81, 25, 0, 0, 0, 0, 0, 49, 87, 10, 0, 0, 0, 0, 1, 113, 0, 0, 0, 0, 0, 0, 38, 112, 0, 1, 0, 0, 0, 0, 78, 87, 109, 149, 33, 0, 0, 0, 55, 131, 119, 124, 4, 0, 0, 0, 0, 34, 42, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 28, 4, 0, 0, 0, 0, 0, 21, 201, 44, 0, 0, 0, 0, 2, 155, 111, 2, 0, 0, 0, 0, 40, 226, 49, 0, 0, 0, 0, 0, 72, 248, 208, 188, 7, 0, 0, 0, 46, 227, 200, 241, 24, 0, 0, 0, 0, 25, 106, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 112, 0, 0, 0, 0, 0, 11, 179, 57, 0, 0, 0, 0, 0, 56, 164, 46, 142, 2, 0, 0, 0, 123, 105, 156, 158, 5, 0, 0, 0, 104, 189, 210, 138, 1, 0, 0, 0, 1, 67, 65, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 137, 120, 0, 0, 0, 0, 4, 134, 105, 27, 0, 0, 0, 0, 47, 204, 52, 26, 0, 0, 0, 0, 118, 239, 128, 197, 0, 0, 0, 0, 115, 181, 91, 171, 0, 0, 0, 0, 19, 126, 142, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 15, 63, 0, 0, 0, 0, 0, 0, 143, 111, 0, 0, 0, 0, 0, 95, 107, 0, 0, 0, 0, 0, 39, 207, 99, 91, 4, 0, 0, 0, 167, 139, 36, 175, 24, 0, 0, 0, 171, 135, 147, 127, 0, 0, 0, 0, 19, 63, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 73, 14, 0, 0, 0, 0, 0, 0, 150, 21, 0, 0, 0, 0, 0, 77, 78, 6, 0, 0, 0, 0, 21, 145, 118, 165, 21, 0, 0, 0, 122, 168, 84, 102, 11, 0, 0, 0, 136, 217, 156, 112, 0, 0, 0, 0, 17, 63, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 51, 16, 0, 0, 0, 0, 0, 4, 143, 16, 0, 0, 0, 0, 4, 123, 47, 24, 0, 0, 0, 0, 55, 139, 119, 163, 63, 0, 0, 0, 147, 55, 119, 55, 67, 0, 0, 0, 171, 103, 175, 127, 8, 0, 0, 0, 35, 63, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 24, 83, 0, 0, 0, 0, 0, 19, 157, 115, 0, 0, 0, 0, 54, 176, 26, 0, 0, 0, 0, 0, 156, 117, 13, 70, 16, 0, 0, 0, 206, 147, 105, 167, 46, 0, 0, 0, 150, 231, 157, 152, 8, 0, 0, 0, 0, 34, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 33, 23, 0, 0, 0, 0, 0, 10, 184, 63, 0, 0, 0, 0, 0, 129, 61, 2, 0, 0, 0, 0, 53, 170, 142, 159, 1, 0, 0, 0, 154, 133, 110, 120, 15, 0, 0, 0, 159, 128, 165, 101, 1, 0, 0, 0, 58, 124, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 30, 4, 0, 0, 0, 0, 0, 38, 184, 63, 0, 0, 0, 0, 49, 161, 17, 9, 0, 0, 0, 0, 132, 109, 33, 1, 0, 0, 0, 0, 154, 167, 122, 178, 1, 0, 0, 0, 130, 117, 98, 203, 6, 0, 0, 0, 1, 62, 104, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 18, 44, 0, 0, 0, 0, 0, 40, 163, 140, 0, 0, 0, 0, 40, 189, 16, 0, 0, 0, 0, 0, 111, 138, 0, 0, 0, 0, 0, 0, 142, 201, 172, 141, 0, 0, 0, 0, 77, 189, 49, 191, 18, 0, 0, 0, 0, 39, 126, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 3, 41, 0, 0, 0, 0, 0, 0, 112, 168, 0, 0, 0, 0, 0, 98, 144, 18, 0, 0, 0, 0, 58, 226, 154, 85, 0, 0, 0, 0, 124, 249, 105, 110, 0, 0, 0, 0, 176, 219, 159, 59, 0, 0, 0, 0, 45, 99, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 47, 12, 0, 0, 0, 0, 0, 32, 192, 33, 0, 0, 0, 0, 0, 152, 41, 0, 0, 0, 0, 0, 27, 175, 70, 126, 0, 0, 0, 0, 97, 215, 206, 169, 0, 0, 0, 0, 68, 238, 224, 95, 0, 0, 0, 0, 0, 61, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 56, 94, 0, 0, 0, 0, 0, 21, 176, 76, 0, 0, 0, 0, 4, 142, 31, 0, 0, 0, 0, 0, 67, 146, 13, 61, 2, 0, 0, 0, 149, 57, 175, 207, 24, 0, 0, 0, 146, 143, 213, 110, 1, 0, 0, 0, 19, 61, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 21, 70, 0, 0, 0, 0, 0, 3, 153, 102, 0, 0, 0, 0, 0, 111, 98, 0, 0, 0, 0, 0, 47, 185, 71, 133, 17, 0, 0, 0, 143, 120, 172, 121, 37, 0, 0, 0, 161, 179, 201, 105, 1, 0, 0, 0, 25, 63, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 43, 80, 0, 0, 0, 0, 0, 5, 180, 87, 0, 0, 0, 0, 4, 138, 74, 0, 0, 0, 0, 0, 74, 207, 113, 101, 1, 0, 0, 0, 136, 242, 101, 167, 20, 0, 0, 0, 135, 235, 164, 136, 0, 0, 0, 0, 5, 53, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 26, 4, 0, 0, 0, 0, 0, 14, 163, 22, 0, 0, 0, 0, 0, 66, 106, 0, 0, 0, 0, 0, 0, 86, 104, 77, 71, 2, 0, 0, 0, 62, 206, 73, 76, 87, 0, 0, 0, 21, 194, 63, 74, 62, 0, 0, 0, 0, 12, 96, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 10, 43, 0, 0, 0, 0, 0, 0, 60, 83, 0, 0, 0, 0, 0, 0, 124, 9, 0, 0, 0, 0, 0, 7, 150, 42, 123, 4, 0, 0, 0, 22, 179, 196, 193, 0, 0, 0, 0, 17, 203, 208, 79, 0, 0, 0, 0, 0, 35, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 36, 13, 0, 0, 0, 0, 0, 68, 113, 15, 0, 0, 0, 0, 43, 142, 2, 13, 0, 0, 0, 0, 97, 109, 134, 156, 33, 0, 0, 0, 103, 212, 34, 55, 80, 0, 0, 0, 43, 205, 104, 143, 13, 0, 0, 0, 0, 43, 100, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 1, 92, 16, 0, 0, 0, 0, 0, 72, 180, 17, 0, 0, 0, 0, 91, 188, 16, 0, 0, 0, 0, 0, 193, 116, 79, 140, 45, 0, 0, 0, 204, 65, 191, 114, 83, 0, 0, 5, 210, 192, 222, 177, 16, 0, 0, 0, 3, 50, 53, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 33, 29, 0, 0, 0, 0, 0, 56, 137, 53, 0, 0, 0, 0, 55, 133, 0, 0, 0, 0, 0, 0, 116, 55, 17, 81, 6, 0, 0, 0, 138, 123, 178, 162, 23, 0, 0, 0, 49, 150, 107, 142, 5, 0, 0, 0, 0, 34, 91, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 38, 51, 0, 0, 0, 0, 0, 2, 145, 34, 0, 0, 0, 0, 0, 147, 111, 0, 0, 0, 0, 0, 15, 182, 17, 0, 54, 78, 0, 0, 45, 167, 7, 96, 184, 144, 0, 0, 4, 153, 172, 221, 203, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 22, 139, 0, 0, 0, 0, 0, 0, 143, 42, 0, 0, 0, 0, 0, 64, 128, 1, 0, 0, 0, 0, 20, 157, 134, 13, 0, 0, 0, 0, 87, 134, 137, 10, 0, 0, 0, 0, 49, 113, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 67, 18, 0, 0, 0, 0, 0, 10, 151, 11, 0, 0, 0, 0, 4, 148, 59, 0, 0, 0, 0, 0, 95, 168, 5, 77, 10, 0, 0, 0, 193, 39, 169, 216, 31, 0, 0, 0, 180, 155, 243, 163, 0, 0, 0, 0, 5, 36, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 57, 153, 0, 0, 0, 0, 0, 10, 161, 18, 0, 0, 0, 0, 0, 104, 78, 0, 0, 0, 0, 0, 76, 197, 123, 113, 0, 0, 0, 0, 156, 73, 47, 154, 0, 0, 0, 0, 82, 6, 78, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 47, 30, 0, 0, 0, 0, 0, 67, 227, 119, 0, 0, 0, 0, 87, 245, 97, 0, 0, 0, 0, 0, 166, 253, 202, 66, 0, 0, 0, 0, 179, 253, 249, 228, 29, 0, 0, 0, 115, 251, 251, 253, 73, 0, 0, 0, 1, 36, 115, 82, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 5, 80, 15, 0, 0, 0, 0, 3, 119, 119, 4, 0, 0, 0, 0, 84, 182, 0, 15, 3, 0, 0, 0, 158, 94, 94, 185, 58, 0, 0, 3, 202, 163, 160, 138, 62, 0, 0, 1, 185, 245, 201, 154, 4, 0, 0, 0, 5, 44, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 54, 51, 0, 0, 0, 0, 0, 1, 169, 96, 0, 0, 0, 0, 0, 79, 140, 6, 0, 0, 0, 0, 31, 188, 49, 20, 0, 0, 0, 0, 146, 149, 222, 203, 0, 0, 0, 0, 197, 178, 229, 113, 0, 0, 0, 0, 31, 61, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 61, 0, 0, 0, 0, 0, 0, 30, 143, 0, 0, 0, 0, 0, 21, 162, 20, 0, 0, 0, 0, 0, 119, 123, 9, 56, 0, 0, 0, 3, 168, 23, 164, 220, 9, 0, 0, 2, 185, 153, 233, 164, 1, 0, 0, 0, 20, 52, 45, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 4, 119, 4, 0, 0, 0, 0, 0, 103, 103, 0, 0, 0, 0, 0, 95, 163, 0, 0, 0, 0, 0, 0, 195, 59, 0, 31, 8, 0, 0, 20, 159, 0, 147, 239, 95, 0, 0, 0, 171, 167, 239, 191, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 61, 16, 0, 0, 0, 0, 0, 34, 138, 1, 0, 0, 0, 0, 4, 152, 44, 0, 0, 0, 0, 0, 73, 176, 3, 79, 5, 0, 0, 0, 174, 98, 160, 233, 8, 0, 0, 0, 120, 208, 229, 90, 0, 0, 0, 0, 0, 0, 33, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 1, 89, 9, 0, 0, 0, 0, 0, 65, 149, 5, 0, 0, 0, 0, 42, 196, 21, 0, 0, 0, 0, 0, 149, 122, 0, 27, 12, 0, 0, 0, 191, 16, 140, 231, 82, 0, 0, 0, 192, 173, 244, 180, 12, 0, 0, 0, 14, 58, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 38, 25, 0, 0, 0, 0, 0, 0, 99, 10, 0, 0, 0, 0, 0, 46, 41, 0, 0, 0, 0, 0, 0, 99, 1, 0, 0, 0, 0, 0, 0, 106, 114, 121, 0, 0, 0, 0, 0, 129, 122, 58, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 73, 24, 0, 0, 0, 0, 0, 13, 175, 20, 0, 0, 0, 0, 14, 151, 39, 0, 0, 0, 0, 0, 103, 162, 0, 39, 12, 0, 0, 0, 182, 50, 127, 196, 59, 0, 0, 0, 209, 155, 226, 152, 6, 0, 0, 0, 28, 63, 44, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 44, 42, 0, 0, 0, 0, 0, 0, 142, 50, 0, 0, 0, 0, 0, 96, 90, 0, 0, 0, 0, 0, 42, 170, 5, 25, 0, 0, 0, 0, 113, 111, 143, 196, 0, 0, 0, 0, 56, 165, 222, 116, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 48, 49, 0, 0, 0, 0, 0, 17, 182, 58, 0, 0, 0, 0, 14, 162, 67, 0, 0, 0, 0, 0, 103, 177, 14, 92, 10, 0, 0, 0, 178, 103, 210, 213, 33, 0, 0, 0, 146, 218, 236, 146, 1, 0, 0, 0, 7, 48, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 19, 25, 0, 0, 0, 0, 0, 8, 140, 95, 0, 0, 0, 0, 0, 113, 33, 0, 0, 0, 0, 0, 20, 132, 0, 0, 0, 0, 0, 0, 102, 158, 91, 113, 3, 0, 0, 0, 114, 88, 9, 127, 7, 0, 0, 0, 14, 83, 89, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 63, 33, 0, 0, 0, 0, 0, 25, 154, 21, 0, 0, 0, 0, 30, 181, 22, 0, 0, 0, 0, 0, 108, 149, 51, 132, 0, 0, 0, 0, 173, 87, 176, 169, 7, 0, 0, 0, 120, 182, 221, 149, 0, 0, 0, 0, 0, 28, 31, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 39, 3, 0, 0, 0, 0, 0, 4, 162, 9, 0, 0, 0, 0, 9, 135, 63, 0, 0, 0, 0, 0, 101, 139, 28, 106, 20, 0, 0, 0, 174, 54, 205, 231, 61, 0, 0, 0, 157, 207, 201, 98, 0, 0, 0, 0, 0, 44, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 39, 88, 0, 0, 0, 0, 0, 3, 167, 86, 0, 0, 0, 0, 1, 116, 91, 0, 0, 0, 0, 0, 64, 182, 28, 100, 47, 0, 0, 5, 186, 79, 167, 92, 110, 0, 0, 16, 194, 182, 158, 165, 33, 0, 0, 0, 34, 55, 18, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 11, 15, 0, 0, 0, 0, 0, 0, 93, 81, 0, 0, 0, 0, 0, 0, 133, 42, 111, 164, 22, 0, 0, 0, 152, 59, 206, 83, 77, 0, 0, 0, 132, 185, 125, 7, 113, 0, 0, 0, 35, 202, 133, 98, 64, 0, 0, 0, 0, 30, 104, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 55, 144, 0, 0, 0, 0, 0, 0, 129, 195, 140, 125, 8, 0, 0, 0, 149, 74, 21, 101, 102, 0, 0, 0, 175, 28, 0, 0, 145, 0, 0, 0, 163, 96, 49, 83, 141, 0, 0, 0, 26, 108, 108, 81, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 13, 66, 0, 0, 0, 0, 0, 8, 98, 48, 0, 0, 0, 0, 0, 96, 19, 0, 0, 0, 0, 0, 3, 103, 0, 0, 0, 0, 0, 0, 27, 170, 123, 150, 0, 0, 0, 0, 83, 166, 91, 140, 0, 0, 0, 0, 0, 3, 35, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 134, 1, 0, 0, 0, 0, 3, 138, 75, 3, 0, 0, 0, 0, 39, 97, 0, 48, 115, 130, 55, 0, 43, 134, 45, 174, 85, 134, 48, 0, 1, 85, 162, 149, 107, 24, 0, 0, 0, 0, 58, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 7, 68, 0, 0, 0, 0, 0, 0, 47, 142, 0, 0, 0, 0, 0, 0, 107, 112, 0, 0, 0, 0, 0, 0, 116, 134, 134, 135, 5, 0, 0, 0, 82, 193, 12, 102, 66, 0, 0, 0, 45, 165, 99, 152, 14, 0, 0, 0, 0, 26, 47, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 9, 54, 0, 0, 0, 0, 0, 0, 68, 29, 0, 0, 0, 0, 0, 14, 98, 0, 0, 0, 0, 0, 0, 68, 88, 10, 62, 5, 0, 0, 0, 98, 41, 132, 138, 2, 0, 0, 0, 81, 132, 194, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 102, 16, 0, 0, 0, 0, 0, 98, 64, 0, 0, 0, 0, 0, 33, 156, 77, 152, 0, 0, 0, 0, 130, 183, 219, 145, 0, 0, 0, 0, 75, 206, 94, 15, 0, 0, 0, 0, 60, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 14, 70, 0, 0, 0, 0, 0, 1, 142, 127, 0, 0, 0, 0, 7, 126, 90, 71, 0, 0, 0, 0, 98, 139, 140, 231, 22, 0, 0, 9, 185, 192, 181, 231, 8, 0, 0, 0, 206, 246, 216, 99, 0, 0, 0, 0, 36, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 148, 60, 0, 0, 0, 0, 13, 175, 53, 0, 0, 0, 0, 0, 85, 168, 1, 0, 0, 0, 0, 0, 128, 175, 34, 0, 0, 0, 0, 0, 54, 164, 109, 73, 0, 0, 0, 0, 0, 23, 103, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 21, 52, 0, 0, 0, 0, 0, 0, 73, 88, 0, 0, 0, 0, 0, 0, 107, 49, 0, 0, 0, 0, 0, 0, 107, 28, 53, 65, 0, 0, 0, 0, 83, 100, 113, 106, 13, 0, 0, 0, 13, 114, 176, 148, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 9, 35, 0, 0, 0, 0, 0, 0, 101, 162, 0, 0, 0, 0, 0, 48, 165, 17, 0, 0, 0, 0, 16, 171, 173, 158, 21, 0, 0, 0, 149, 188, 105, 147, 11, 0, 0, 15, 162, 169, 142, 68, 0, 0, 0, 7, 121, 78, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 86, 20, 0, 0, 0, 0, 0, 8, 197, 44, 0, 0, 0, 0, 16, 137, 85, 0, 0, 0, 0, 0, 152, 187, 12, 0, 0, 0, 0, 6, 234, 138, 126, 171, 118, 18, 0, 1, 219, 241, 206, 164, 100, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 2, 35, 0, 0, 0, 0, 0, 0, 101, 184, 0, 0, 0, 0, 0, 87, 110, 29, 0, 0, 0, 0, 43, 157, 126, 166, 6, 0, 0, 0, 155, 74, 137, 138, 0, 0, 0, 9, 141, 63, 180, 65, 0, 0, 0, 4, 118, 103, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 139, 0, 0, 0, 0, 0, 79, 157, 15, 2, 0, 0, 0, 43, 193, 109, 166, 50, 0, 0, 0, 189, 204, 250, 172, 2, 0, 0, 0, 225, 236, 132, 21, 0, 0, 0, 0, 140, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 47, 67, 0, 0, 0, 0, 0, 0, 108, 68, 1, 0, 0, 0, 0, 0, 129, 58, 71, 0, 0, 0, 0, 0, 93, 11, 72, 0, 0, 0, 0, 0, 30, 89, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 1, 42, 22, 0, 0, 0, 0, 0, 98, 166, 38, 0, 0, 0, 0, 62, 149, 11, 0, 0, 0, 0, 18, 162, 66, 90, 6, 0, 0, 0, 141, 170, 168, 194, 29, 0, 0, 0, 206, 228, 187, 100, 0, 0, 0, 0, 56, 76, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 50, 136, 113, 0, 0, 0, 0, 0, 160, 37, 0, 0, 0, 0, 0, 4, 134, 0, 10, 27, 1, 0, 0, 4, 123, 101, 136, 94, 173, 61, 0, 0, 116, 193, 136, 106, 104, 20, 0, 0, 0, 27, 74, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 28, 104, 0, 0, 0, 0, 0, 0, 107, 27, 0, 0, 0, 0, 0, 3, 131, 57, 9, 0, 0, 0, 0, 37, 181, 57, 96, 0, 0, 0, 0, 37, 109, 23, 90, 0, 0, 0, 0, 0, 54, 70, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 26, 5, 0, 0, 0, 0, 0, 55, 170, 10, 0, 0, 0, 5, 92, 202, 88, 3, 0, 0, 0, 86, 224, 209, 215, 70, 0, 0, 65, 238, 248, 181, 180, 22, 0, 0, 75, 239, 197, 106, 34, 0, 0, 0, 0, 85, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 5, 36, 0, 0, 0, 0, 0, 0, 128, 205, 1, 0, 0, 0, 7, 136, 116, 15, 0, 0, 0, 0, 71, 199, 49, 14, 0, 0, 0, 0, 129, 249, 190, 168, 0, 0, 0, 0, 122, 201, 140, 161, 0, 0, 0, 0, 22, 105, 76, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 53, 76, 0, 0, 0, 0, 0, 22, 203, 101, 0, 0, 0, 0, 42, 194, 64, 0, 0, 0, 0, 0, 161, 148, 11, 61, 57, 0, 0, 35, 180, 19, 208, 252, 100, 0, 0, 51, 203, 146, 254, 162, 4, 0, 0, 0, 38, 60, 63, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 74, 59, 0, 0, 0, 0, 0, 29, 202, 70, 0, 0, 0, 0, 41, 175, 63, 0, 0, 0, 0, 1, 174, 123, 33, 118, 78, 0, 0, 45, 163, 27, 199, 233, 93, 0, 0, 42, 187, 160, 233, 149, 3, 0, 0, 0, 30, 63, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 49, 113, 0, 0, 0, 0, 0, 0, 171, 161, 0, 0, 0, 0, 7, 135, 138, 5, 0, 0, 0, 0, 106, 194, 15, 14, 14, 0, 0, 16, 210, 74, 184, 242, 99, 0, 0, 32, 213, 184, 228, 161, 8, 0, 0, 0, 41, 47, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 15, 93, 0, 0, 0, 0, 0, 0, 138, 158, 0, 0, 0, 0, 1, 106, 123, 1, 0, 0, 0, 0, 76, 186, 17, 55, 30, 0, 0, 0, 194, 67, 176, 217, 50, 0, 0, 0, 191, 203, 194, 115, 0, 0, 0, 0, 20, 47, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 1, 39, 12, 0, 0, 0, 0, 0, 91, 184, 20, 0, 0, 0, 0, 78, 168, 19, 1, 0, 0, 0, 47, 203, 71, 145, 85, 0, 0, 1, 191, 120, 189, 166, 63, 0, 0, 8, 221, 190, 179, 96, 3, 0, 0, 0, 68, 120, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 16, 85, 0, 0, 0, 0, 0, 6, 140, 125, 0, 0, 0, 0, 8, 145, 87, 14, 31, 0, 0, 0, 105, 170, 69, 183, 152, 0, 0, 20, 185, 93, 191, 174, 28, 0, 0, 54, 178, 206, 189, 86, 0, 0, 0, 0, 45, 39, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 96, 140, 0, 0, 0, 0, 4, 97, 155, 12, 0, 0, 0, 0, 92, 201, 49, 120, 96, 11, 0, 51, 181, 55, 205, 152, 154, 15, 0, 82, 187, 176, 214, 127, 18, 0, 0, 0, 7, 16, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 22, 30, 0, 0, 0, 0, 0, 8, 105, 15, 0, 0, 0, 0, 0, 63, 86, 0, 0, 0, 0, 0, 0, 101, 71, 2, 30, 3, 0, 0, 0, 68, 115, 119, 154, 46, 0, 0, 0, 16, 130, 189, 98, 1, 0, 0, 0, 0, 0, 25, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 3, 0, 0, 0, 0, 0, 0, 28, 25, 0, 0, 0, 0, 0, 0, 81, 1, 0, 0, 32, 81, 21, 0, 72, 0, 0, 21, 89, 73, 50, 0, 75, 15, 0, 73, 33, 73, 3, 0, 18, 78, 71, 98, 61, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 1, 64, 25, 0, 0, 0, 0, 0, 100, 163, 15, 0, 0, 0, 4, 100, 124, 10, 0, 0, 0, 0, 79, 176, 9, 29, 1, 0, 0, 0, 182, 93, 185, 214, 11, 0, 0, 0, 171, 232, 183, 87, 0, 0, 0, 0, 13, 58, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 49, 63, 0, 0, 0, 0, 0, 73, 176, 46, 0, 0, 0, 0, 68, 159, 21, 0, 0, 0, 0, 46, 192, 34, 0, 0, 0, 0, 0, 170, 218, 203, 156, 1, 0, 0, 5, 211, 225, 178, 207, 10, 0, 0, 0, 7, 53, 48, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 13, 36, 0, 0, 0, 0, 0, 0, 114, 115, 0, 0, 0, 0, 0, 38, 186, 2, 0, 0, 0, 0, 0, 88, 151, 99, 114, 0, 0, 0, 0, 131, 108, 222, 181, 0, 0, 0, 0, 107, 148, 229, 127, 0, 0, 0, 0, 5, 80, 91, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 39, 45, 0, 0, 0, 0, 0, 0, 135, 126, 0, 0, 0, 0, 0, 34, 199, 12, 0, 0, 0, 0, 0, 74, 207, 105, 69, 0, 0, 0, 0, 78, 252, 185, 185, 29, 0, 0, 0, 24, 191, 183, 192, 61, 0, 0, 0, 0, 4, 49, 58, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 34, 29, 0, 0, 0, 0, 0, 19, 173, 56, 0, 0, 0, 0, 6, 162, 59, 0, 0, 0, 0, 0, 52, 186, 17, 36, 0, 0, 0, 0, 110, 123, 159, 178, 0, 0, 0, 0, 103, 194, 151, 138, 0, 0, 0, 0, 7, 88, 88, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 3, 33, 0, 0, 0, 0, 0, 0, 96, 157, 0, 0, 0, 0, 0, 88, 153, 11, 0, 0, 0, 0, 51, 191, 80, 143, 64, 0, 0, 0, 173, 157, 170, 187, 38, 0, 0, 0, 212, 233, 193, 113, 0, 0, 0, 0, 66, 102, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 16, 91, 10, 0, 0, 0, 0, 9, 174, 163, 10, 0, 0, 0, 13, 163, 100, 1, 0, 0, 0, 0, 91, 204, 3, 0, 0, 0, 0, 0, 198, 118, 162, 209, 49, 0, 0, 0, 219, 236, 204, 178, 7, 0, 0, 0, 36, 63, 33, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 169, 111, 5, 0, 0, 0, 76, 192, 8, 49, 70, 0, 0, 0, 162, 102, 0, 0, 0, 0, 0, 0, 134, 141, 108, 109, 1, 0, 0, 0, 116, 99, 0, 108, 23, 0, 0, 0, 5, 93, 140, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 19, 12, 0, 0, 0, 0, 0, 2, 165, 74, 0, 0, 0, 0, 0, 87, 135, 1, 0, 0, 0, 0, 2, 164, 36, 3, 0, 0, 0, 0, 51, 225, 196, 171, 0, 0, 0, 0, 63, 252, 196, 57, 0, 0, 0, 0, 10, 91, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 67, 41, 0, 0, 0, 0, 0, 3, 181, 42, 0, 0, 0, 0, 4, 135, 56, 3, 0, 0, 0, 0, 51, 189, 104, 177, 20, 0, 0, 0, 155, 173, 212, 189, 24, 0, 0, 0, 189, 235, 184, 70, 0, 0, 0, 0, 14, 45, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 1, 25, 0, 0, 0, 0, 0, 0, 10, 108, 0, 0, 0, 0, 0, 0, 23, 87, 0, 0, 0, 0, 0, 0, 52, 125, 58, 0, 0, 0, 0, 6, 130, 126, 116, 0, 0, 0, 0, 82, 110, 117, 28, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 21, 66, 0, 0, 0, 0, 0, 0, 130, 96, 0, 0, 0, 0, 0, 92, 96, 0, 0, 0, 0, 0, 52, 169, 17, 95, 48, 0, 0, 0, 139, 83, 162, 126, 36, 0, 0, 0, 195, 181, 182, 89, 0, 0, 0, 0, 37, 49, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 50, 15, 0, 0, 0, 0, 3, 86, 164, 86, 0, 0, 0, 0, 120, 81, 7, 3, 0, 0, 0, 4, 144, 7, 0, 0, 0, 0, 0, 10, 124, 0, 81, 127, 81, 0, 0, 1, 149, 48, 78, 129, 126, 7, 0, 0, 14, 93, 101, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 36, 8, 0, 0, 0, 0, 0, 0, 84, 2, 0, 0, 0, 0, 0, 25, 60, 0, 0, 0, 0, 0, 0, 84, 10, 0, 0, 0, 0, 0, 0, 120, 134, 54, 0, 0, 0, 0, 0, 111, 110, 53, 0, 0, 0, 0, 0, 36, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 10, 14, 0, 0, 0, 0, 0, 7, 87, 35, 0, 0, 0, 0, 0, 104, 26, 0, 0, 0, 0, 0, 63, 81, 93, 0, 0, 0, 0, 55, 117, 140, 102, 0, 0, 0, 0, 123, 181, 97, 17, 0, 0, 0, 0, 65, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 116, 66, 0, 0, 0, 0, 0, 77, 151, 21, 0, 0, 0, 0, 147, 161, 3, 0, 0, 0, 0, 35, 200, 79, 123, 133, 56, 0, 0, 63, 252, 252, 238, 252, 157, 0, 0, 7, 140, 224, 249, 217, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 2, 52, 0, 0, 0, 0, 0, 0, 75, 104, 0, 0, 0, 0, 0, 32, 100, 1, 0, 0, 0, 0, 7, 115, 40, 54, 0, 0, 0, 0, 98, 122, 188, 114, 0, 0, 0, 0, 136, 188, 112, 17, 0, 0, 0, 0, 48, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 149, 56, 0, 0, 0, 0, 55, 212, 11, 0, 0, 0, 0, 0, 123, 240, 154, 42, 0, 0, 0, 0, 145, 105, 129, 150, 0, 0, 0, 0, 99, 167, 137, 150, 0, 0, 0, 0, 8, 107, 149, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 3, 54, 0, 0, 0, 0, 0, 0, 84, 139, 0, 0, 0, 0, 0, 37, 150, 15, 0, 0, 0, 0, 18, 158, 62, 55, 0, 0, 0, 0, 136, 133, 181, 188, 0, 0, 0, 0, 157, 189, 170, 66, 0, 0, 0, 0, 55, 57, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 19, 52, 0, 0, 0, 0, 0, 22, 138, 39, 0, 0, 0, 0, 26, 148, 35, 0, 0, 0, 0, 17, 150, 63, 53, 0, 0, 0, 0, 134, 78, 160, 149, 0, 0, 0, 0, 148, 134, 151, 50, 0, 0, 0, 0, 35, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 8, 82, 0, 0, 0, 0, 0, 0, 61, 198, 1, 0, 0, 0, 0, 3, 194, 87, 0, 0, 0, 0, 0, 26, 200, 14, 112, 166, 44, 0, 0, 19, 196, 25, 243, 247, 90, 0, 0, 0, 152, 182, 241, 222, 19, 0, 0, 0, 0, 17, 55, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 39, 21, 0, 0, 0, 0, 0, 28, 153, 26, 0, 0, 0, 0, 0, 140, 30, 0, 0, 0, 0, 0, 16, 167, 0, 0, 0, 0, 0, 0, 27, 181, 129, 84, 0, 0, 0, 0, 7, 162, 104, 164, 0, 0, 0, 0, 0, 28, 125, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 33, 35, 0, 0, 0, 0, 0, 15, 149, 33, 0, 0, 0, 0, 8, 159, 64, 0, 0, 0, 0, 6, 121, 101, 63, 0, 0, 0, 0, 129, 159, 165, 165, 0, 0, 0, 0, 163, 193, 155, 58, 0, 0, 0, 0, 32, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 19, 18, 0, 0, 0, 0, 0, 4, 166, 74, 0, 0, 0, 0, 0, 133, 89, 0, 0, 0, 0, 0, 33, 201, 25, 0, 0, 0, 0, 0, 117, 217, 161, 57, 0, 0, 0, 0, 93, 160, 124, 131, 0, 0, 0, 0, 0, 55, 110, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 2, 97, 1, 0, 0, 0, 0, 0, 66, 146, 0, 0, 0, 0, 0, 18, 158, 27, 0, 0, 0, 0, 10, 143, 96, 46, 0, 0, 0, 0, 150, 221, 142, 218, 13, 0, 0, 16, 233, 171, 150, 121, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 125, 0, 0, 0, 0, 0, 22, 159, 26, 0, 0, 0, 0, 4, 131, 91, 0, 0, 0, 0, 0, 9, 170, 184, 26, 0, 0, 0, 0, 0, 146, 172, 32, 0, 0, 0, 0, 0, 86, 113, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 16, 87, 0, 0, 0, 0, 0, 0, 140, 111, 0, 0, 0, 0, 0, 91, 84, 9, 0, 0, 0, 0, 41, 156, 80, 176, 56, 0, 0, 11, 203, 203, 105, 111, 57, 0, 0, 63, 230, 95, 103, 146, 3, 0, 0, 24, 57, 57, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 8, 29, 0, 0, 0, 0, 0, 0, 63, 119, 0, 0, 0, 0, 0, 0, 154, 48, 0, 0, 0, 0, 0, 35, 210, 80, 119, 0, 0, 0, 0, 108, 189, 203, 249, 0, 0, 0, 0, 126, 221, 217, 154, 0, 0, 0, 0, 21, 112, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 19, 22, 0, 0, 0, 0, 0, 3, 145, 56, 0, 0, 0, 0, 0, 84, 106, 0, 0, 0, 0, 0, 0, 140, 68, 0, 0, 0, 0, 0, 0, 152, 169, 50, 0, 0, 0, 0, 0, 166, 182, 85, 0, 0, 0, 0, 0, 41, 60, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 2, 41, 0, 0, 0, 0, 0, 0, 62, 69, 0, 0, 0, 0, 0, 21, 85, 0, 0, 0, 0, 0, 1, 95, 94, 120, 0, 0, 0, 0, 67, 188, 89, 93, 0, 0, 0, 0, 145, 204, 119, 34, 0, 0, 0, 0, 34, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 30, 112, 0, 0, 0, 0, 0, 0, 121, 26, 0, 0, 0, 0, 0, 41, 85, 10, 0, 0, 0, 0, 10, 164, 116, 150, 2, 0, 0, 0, 139, 138, 64, 73, 0, 0, 0, 6, 43, 58, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 146, 54, 0, 0, 0, 0, 5, 141, 189, 33, 0, 0, 0, 0, 61, 240, 192, 37, 0, 0, 0, 0, 84, 254, 206, 136, 0, 0, 0, 0, 52, 233, 198, 157, 0, 0, 0, 0, 0, 64, 168, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 1, 82, 5, 0, 0, 0, 0, 0, 76, 113, 0, 0, 0, 0, 0, 62, 89, 1, 0, 0, 0, 0, 27, 159, 106, 147, 9, 0, 0, 1, 180, 163, 47, 130, 7, 0, 0, 68, 201, 113, 134, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 18, 33, 0, 0, 0, 0, 0, 24, 145, 107, 10, 0, 0, 0, 7, 154, 28, 0, 0, 0, 0, 0, 83, 153, 0, 0, 0, 0, 0, 0, 152, 127, 151, 167, 0, 0, 0, 0, 141, 107, 73, 151, 0, 0, 0, 0, 20, 102, 92, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 46, 51, 0, 0, 0, 0, 0, 43, 108, 4, 0, 0, 0, 0, 38, 108, 6, 0, 0, 0, 0, 19, 130, 69, 85, 0, 0, 0, 0, 121, 142, 95, 136, 0, 0, 0, 0, 205, 181, 131, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 1, 38, 0, 0, 0, 0, 0, 0, 82, 119, 0, 0, 0, 0, 0, 55, 56, 0, 0, 0, 0, 0, 10, 85, 0, 0, 0, 0, 0, 0, 63, 72, 92, 35, 0, 0, 0, 0, 82, 47, 134, 66, 0, 0, 0, 0, 39, 108, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 1, 29, 5, 0, 0, 0, 0, 2, 121, 170, 13, 0, 0, 0, 22, 160, 80, 3, 0, 0, 0, 0, 116, 132, 0, 0, 0, 0, 0, 0, 168, 92, 153, 190, 60, 0, 0, 0, 148, 58, 89, 192, 50, 0, 0, 0, 34, 109, 81, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 14, 70, 0, 0, 0, 0, 0, 0, 101, 157, 0, 0, 0, 0, 0, 40, 220, 51, 0, 0, 0, 0, 0, 108, 201, 27, 119, 47, 0, 0, 0, 178, 148, 194, 253, 124, 0, 0, 0, 183, 243, 246, 195, 18, 0, 0, 0, 28, 63, 22, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 2, 114, 67, 0, 12, 41, 0, 0, 60, 51, 0, 42, 106, 129, 38, 0, 81, 17, 0, 74, 31, 99, 4, 0, 21, 83, 88, 85, 91, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 2, 35, 0, 0, 0, 0, 0, 4, 108, 123, 9, 0, 0, 0, 5, 116, 45, 0, 0, 0, 0, 0, 78, 115, 3, 26, 0, 0, 0, 0, 137, 85, 83, 115, 19, 0, 0, 0, 162, 153, 86, 87, 0, 0, 0, 0, 54, 111, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 34, 115, 5, 0, 0, 0, 0, 3, 141, 21, 0, 0, 0, 0, 0, 43, 161, 64, 87, 0, 0, 0, 0, 64, 149, 181, 143, 0, 0, 0, 0, 58, 165, 183, 123, 0, 0, 0, 0, 0, 51, 80, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 51, 5, 0, 0, 0, 0, 0, 33, 101, 2, 0, 0, 0, 0, 26, 123, 0, 0, 0, 0, 0, 0, 99, 75, 19, 36, 0, 0, 0, 0, 108, 56, 91, 127, 7, 0, 0, 0, 101, 180, 49, 94, 1, 0, 0, 0, 0, 34, 52, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 1, 31, 0, 0, 0, 0, 0, 0, 95, 112, 0, 0, 0, 0, 0, 45, 85, 0, 0, 0, 0, 0, 2, 121, 44, 12, 0, 0, 0, 0, 53, 170, 122, 126, 0, 0, 0, 0, 77, 122, 120, 69, 0, 0, 0, 0, 10, 93, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 27, 55, 0, 0, 0, 0, 0, 0, 86, 56, 0, 0, 0, 0, 0, 15, 86, 0, 0, 0, 0, 0, 0, 85, 82, 4, 0, 0, 0, 0, 0, 114, 166, 44, 0, 0, 0, 0, 1, 160, 145, 27, 0, 0, 0, 0, 0, 18, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 3, 28, 0, 0, 0, 0, 0, 0, 69, 174, 6, 0, 0, 0, 0, 34, 206, 134, 0, 0, 0, 0, 0, 124, 240, 31, 0, 0, 0, 0, 0, 149, 186, 56, 128, 3, 0, 0, 2, 88, 222, 226, 250, 12, 0, 0, 0, 0, 46, 114, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 49, 24, 0, 0, 0, 0, 0, 77, 200, 46, 0, 0, 0, 0, 125, 200, 36, 29, 0, 0, 0, 0, 215, 141, 188, 190, 79, 0, 0, 0, 217, 205, 52, 5, 140, 9, 0, 0, 150, 239, 154, 95, 96, 0, 0, 0, 4, 74, 126, 80, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 8, 44, 0, 0, 0, 0, 0, 1, 116, 229, 53, 0, 0, 0, 1, 157, 252, 185, 45, 0, 0, 0, 85, 249, 252, 230, 220, 62, 0, 0, 65, 251, 252, 252, 252, 137, 0, 0, 9, 187, 252, 252, 223, 61, 0, 0, 0, 37, 118, 89, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 35, 19, 0, 0, 0, 0, 0, 31, 211, 75, 0, 0, 0, 0, 59, 211, 75, 0, 0, 0, 0, 0, 199, 159, 15, 75, 15, 0, 0, 20, 235, 115, 219, 247, 95, 0, 0, 4, 227, 251, 243, 195, 23, 0, 0, 0, 31, 99, 71, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 78, 50, 0, 0, 0, 0, 0, 29, 223, 85, 0, 0, 0, 0, 5, 156, 127, 2, 0, 0, 0, 0, 73, 226, 19, 17, 4, 0, 0, 2, 215, 132, 195, 250, 123, 0, 0, 5, 228, 224, 253, 241, 89, 0, 0, 0, 2, 34, 29, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 139, 90, 0, 0, 0, 0, 11, 140, 202, 31, 0, 0, 0, 0, 105, 245, 175, 68, 0, 0, 0, 0, 233, 252, 252, 227, 0, 6, 0, 0, 182, 252, 243, 169, 0, 8, 0, 0, 9, 39, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 2, 59, 15, 0, 0, 0, 0, 0, 70, 176, 44, 0, 0, 0, 0, 10, 169, 13, 0, 0, 0, 0, 0, 49, 207, 0, 0, 0, 0, 0, 0, 55, 227, 170, 152, 1, 0, 0, 0, 23, 196, 62, 151, 10, 0, 0, 0, 0, 19, 114, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 20, 108, 10, 0, 0, 0, 0, 0, 137, 177, 3, 0, 0, 0, 1, 105, 120, 9, 0, 0, 0, 0, 79, 175, 67, 98, 9, 0, 0, 0, 204, 222, 147, 196, 57, 0, 0, 0, 196, 246, 160, 184, 9, 0, 0, 0, 13, 49, 49, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 45, 88, 0, 0, 0, 0, 0, 1, 175, 144, 0, 0, 0, 0, 14, 150, 148, 10, 0, 0, 0, 0, 108, 215, 63, 106, 48, 0, 0, 12, 207, 182, 200, 231, 82, 0, 0, 21, 242, 242, 215, 170, 8, 0, 0, 0, 46, 63, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 30, 4, 0, 0, 0, 0, 0, 2, 195, 41, 0, 0, 0, 0, 5, 123, 166, 2, 0, 0, 0, 0, 71, 238, 81, 25, 0, 0, 0, 0, 166, 243, 247, 176, 0, 0, 0, 0, 163, 253, 253, 150, 0, 0, 0, 0, 28, 106, 51, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 32, 13, 0, 0, 0, 0, 0, 6, 161, 22, 0, 0, 0, 0, 0, 96, 83, 0, 0, 0, 0, 0, 0, 136, 85, 0, 0, 0, 0, 0, 18, 192, 144, 106, 0, 0, 0, 0, 11, 181, 93, 149, 0, 0, 0, 0, 0, 53, 127, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 42, 35, 0, 0, 0, 0, 0, 88, 185, 24, 0, 0, 0, 2, 91, 151, 19, 0, 0, 0, 0, 61, 187, 26, 2, 0, 0, 0, 0, 182, 205, 199, 200, 0, 0, 0, 0, 195, 218, 178, 120, 0, 0, 0, 0, 11, 36, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 4, 73, 43, 0, 0, 0, 0, 0, 105, 168, 33, 0, 0, 0, 0, 10, 162, 10, 0, 0, 0, 0, 0, 34, 131, 0, 13, 59, 52, 0, 0, 12, 175, 22, 160, 93, 188, 48, 0, 0, 118, 167, 202, 140, 156, 18, 0, 0, 0, 19, 63, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 41, 10, 0, 0, 0, 0, 0, 2, 224, 65, 0, 0, 0, 0, 0, 120, 201, 25, 0, 0, 0, 0, 43, 216, 183, 70, 0, 0, 0, 0, 162, 223, 243, 167, 0, 0, 0, 0, 175, 221, 246, 141, 0, 0, 0, 0, 54, 126, 85, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 64, 34, 0, 0, 0, 0, 0, 10, 203, 101, 0, 0, 0, 0, 12, 149, 186, 25, 0, 0, 0, 0, 110, 241, 133, 135, 8, 0, 0, 0, 206, 225, 252, 253, 33, 0, 0, 0, 121, 247, 254, 231, 8, 0, 0, 0, 0, 12, 49, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 11, 26, 0, 0, 0, 0, 0, 0, 99, 172, 0, 0, 0, 0, 0, 89, 210, 68, 0, 0, 0, 0, 49, 214, 64, 0, 0, 0, 0, 0, 127, 228, 187, 50, 0, 0, 0, 0, 89, 218, 185, 139, 0, 0, 0, 0, 5, 76, 120, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 20, 2, 0, 0, 0, 0, 0, 20, 133, 5, 0, 0, 0, 0, 0, 149, 78, 13, 89, 72, 0, 0, 5, 168, 10, 131, 163, 153, 0, 0, 31, 141, 35, 130, 121, 61, 0, 0, 8, 158, 83, 185, 153, 1, 0, 0, 0, 36, 103, 72, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 24, 84, 0, 0, 0, 0, 0, 0, 129, 128, 0, 0, 0, 0, 0, 67, 132, 6, 0, 0, 0, 0, 7, 158, 23, 0, 0, 0, 0, 0, 114, 132, 87, 137, 15, 0, 0, 0, 152, 175, 248, 183, 5, 0, 0, 0, 17, 59, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 68, 3, 0, 0, 0, 0, 0, 40, 173, 6, 0, 0, 0, 0, 4, 134, 13, 0, 0, 0, 0, 0, 53, 134, 70, 117, 8, 0, 0, 0, 104, 139, 108, 59, 65, 0, 0, 0, 54, 171, 140, 149, 11, 0, 0, 0, 0, 34, 53, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 61, 73, 3, 0, 0, 0, 0, 63, 149, 32, 1, 0, 0, 0, 0, 150, 29, 0, 0, 0, 0, 0, 0, 151, 0, 0, 36, 1, 0, 0, 0, 150, 3, 120, 155, 66, 0, 0, 0, 129, 120, 167, 165, 50, 0, 0, 0, 0, 34, 63, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 39, 31, 0, 0, 0, 0, 0, 37, 145, 13, 0, 0, 0, 0, 18, 167, 39, 0, 0, 0, 0, 15, 137, 55, 0, 0, 0, 0, 0, 152, 86, 39, 28, 0, 0, 0, 0, 154, 123, 208, 82, 0, 0, 0, 0, 23, 62, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 58, 59, 0, 0, 0, 0, 0, 24, 206, 99, 0, 0, 0, 0, 22, 180, 57, 0, 0, 0, 0, 0, 100, 175, 17, 29, 0, 0, 0, 0, 142, 178, 197, 232, 10, 0, 0, 0, 107, 250, 196, 191, 4, 0, 0, 0, 7, 54, 42, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 88, 78, 0, 0, 0, 0, 0, 0, 224, 192, 0, 0, 0, 0, 0, 29, 253, 107, 0, 6, 9, 0, 0, 43, 247, 70, 103, 176, 170, 34, 0, 17, 240, 176, 253, 253, 225, 37, 0, 0, 139, 243, 253, 253, 141, 2, 0, 0, 0, 13, 53, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 48, 13, 0, 0, 0, 0, 0, 24, 167, 11, 0, 0, 0, 0, 0, 110, 77, 0, 0, 0, 0, 0, 0, 119, 16, 87, 104, 5, 0, 0, 0, 92, 58, 116, 106, 64, 0, 0, 0, 129, 193, 155, 175, 29, 0, 0, 0, 5, 46, 54, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 52, 54, 0, 0, 0, 0, 0, 7, 154, 46, 0, 0, 0, 0, 8, 127, 40, 0, 0, 0, 0, 0, 72, 140, 11, 39, 0, 0, 0, 0, 104, 130, 170, 243, 3, 0, 0, 0, 77, 198, 222, 111, 0, 0, 0, 0, 0, 36, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 33, 64, 0, 0, 0, 0, 0, 0, 140, 64, 0, 0, 0, 0, 0, 0, 149, 0, 0, 0, 0, 0, 0, 0, 157, 0, 88, 93, 25, 0, 0, 0, 172, 86, 164, 53, 101, 0, 0, 0, 63, 173, 214, 197, 48, 0, 0, 0, 0, 5, 59, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 13, 71, 0, 0, 0, 0, 0, 0, 143, 113, 0, 0, 0, 0, 0, 68, 159, 0, 0, 0, 0, 0, 0, 116, 81, 0, 0, 0, 0, 0, 107, 154, 194, 139, 0, 0, 0, 0, 206, 196, 215, 71, 0, 0, 0, 0, 21, 47, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 31, 56, 0, 0, 0, 0, 0, 0, 118, 112, 0, 0, 0, 0, 0, 0, 168, 86, 0, 5, 0, 0, 0, 0, 185, 93, 119, 178, 37, 0, 0, 0, 152, 245, 112, 61, 127, 0, 0, 0, 82, 235, 151, 174, 42, 0, 0, 0, 0, 26, 43, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 24, 2, 0, 0, 0, 0, 0, 5, 127, 3, 0, 0, 0, 0, 0, 91, 59, 0, 0, 0, 0, 0, 0, 162, 56, 0, 0, 0, 0, 0, 0, 131, 120, 97, 0, 0, 0, 0, 0, 116, 91, 104, 0, 0, 0, 0, 0, 52, 82, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 42, 8, 0, 0, 0, 0, 0, 28, 142, 4, 0, 0, 0, 0, 18, 147, 32, 0, 0, 0, 0, 9, 129, 48, 0, 0, 0, 0, 0, 103, 103, 112, 129, 0, 0, 0, 0, 129, 143, 225, 104, 0, 0, 0, 0, 11, 51, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 67, 16, 0, 0, 0, 0, 0, 0, 141, 14, 0, 0, 0, 0, 0, 5, 134, 0, 0, 0, 0, 0, 0, 42, 133, 46, 31, 0, 0, 0, 0, 43, 216, 73, 148, 10, 0, 0, 0, 6, 140, 109, 161, 19, 0, 0, 0, 0, 0, 50, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 35, 5, 0, 0, 0, 0, 0, 81, 166, 70, 0, 0, 0, 0, 78, 130, 24, 15, 0, 0, 0, 0, 141, 60, 0, 0, 0, 0, 0, 0, 154, 16, 109, 124, 17, 0, 0, 0, 131, 155, 63, 88, 65, 0, 0, 0, 5, 74, 127, 99, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 24, 2, 0, 0, 0, 0, 0, 24, 168, 50, 0, 0, 0, 0, 0, 140, 76, 54, 122, 64, 0, 0, 0, 160, 61, 192, 126, 115, 15, 0, 2, 179, 173, 19, 19, 60, 6, 0, 0, 174, 207, 133, 145, 24, 0, 0, 0, 68, 43, 25, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 8, 97, 42, 0, 0, 0, 0, 0, 107, 102, 34, 0, 0, 0, 0, 33, 160, 0, 0, 0, 0, 0, 0, 75, 136, 0, 0, 0, 0, 0, 0, 72, 155, 133, 155, 0, 0, 0, 0, 11, 174, 237, 171, 0, 0, 0, 0, 0, 10, 56, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 23, 68, 0, 0, 0, 0, 0, 0, 113, 96, 0, 0, 0, 0, 0, 32, 117, 1, 0, 0, 0, 0, 3, 122, 22, 0, 0, 0, 0, 0, 40, 135, 97, 58, 0, 0, 0, 0, 48, 203, 219, 136, 0, 0, 0, 0, 0, 32, 39, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 51, 0, 0, 0, 0, 0, 0, 21, 120, 0, 0, 0, 0, 0, 1, 127, 30, 0, 0, 0, 0, 1, 81, 47, 0, 0, 0, 0, 0, 95, 148, 122, 104, 0, 0, 0, 0, 72, 196, 109, 44, 0, 0, 0, 0, 3, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 9, 36, 0, 0, 0, 0, 0, 0, 75, 22, 0, 0, 0, 0, 0, 22, 88, 0, 0, 0, 0, 0, 0, 81, 64, 80, 84, 2, 0, 0, 0, 90, 99, 6, 67, 21, 0, 0, 0, 87, 97, 68, 109, 0, 0, 0, 0, 1, 35, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 7, 82, 11, 0, 0, 0, 0, 0, 113, 123, 4, 0, 0, 0, 0, 82, 105, 2, 0, 0, 0, 0, 54, 153, 6, 1, 0, 0, 0, 0, 185, 181, 127, 171, 0, 0, 0, 0, 198, 201, 115, 128, 0, 0, 0, 0, 24, 63, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 12, 44, 2, 0, 0, 0, 0, 5, 138, 164, 10, 0, 0, 0, 0, 95, 163, 2, 0, 0, 0, 0, 0, 147, 92, 0, 0, 0, 0, 0, 0, 106, 164, 141, 139, 7, 0, 0, 0, 17, 173, 215, 199, 15, 0, 0, 0, 0, 11, 92, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 62, 26, 0, 0, 0, 0, 0, 3, 161, 26, 0, 0, 0, 0, 0, 80, 70, 0, 0, 0, 0, 0, 15, 140, 4, 0, 0, 0, 0, 0, 78, 105, 166, 128, 0, 0, 0, 0, 62, 137, 187, 134, 0, 0, 0, 0, 0, 21, 56, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 74, 21, 0, 0, 0, 0, 0, 8, 162, 18, 0, 0, 0, 0, 0, 104, 40, 0, 0, 0, 0, 0, 62, 128, 0, 0, 0, 0, 0, 0, 148, 154, 150, 161, 35, 0, 0, 0, 159, 216, 87, 147, 30, 0, 0, 0, 5, 38, 53, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 2, 33, 0, 0, 0, 0, 0, 0, 78, 159, 0, 0, 0, 0, 0, 63, 173, 35, 0, 0, 0, 0, 46, 202, 147, 129, 43, 0, 0, 0, 168, 75, 3, 38, 110, 0, 0, 0, 145, 9, 63, 145, 34, 0, 0, 0, 97, 126, 81, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 69, 10, 0, 0, 0, 0, 0, 1, 142, 8, 0, 0, 0, 0, 0, 91, 52, 0, 0, 0, 0, 0, 29, 146, 11, 18, 0, 0, 0, 0, 117, 102, 161, 177, 4, 0, 0, 0, 98, 179, 139, 142, 0, 0, 0, 0, 0, 33, 45, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 24, 45, 0, 0, 0, 0, 0, 0, 121, 45, 0, 0, 0, 0, 0, 74, 48, 0, 0, 0, 0, 0, 7, 114, 0, 0, 0, 0, 0, 0, 58, 107, 107, 96, 0, 0, 0, 0, 26, 147, 197, 135, 0, 0, 0, 0, 0, 1, 38, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 20, 42, 0, 0, 0, 0, 0, 0, 131, 87, 0, 0, 0, 0, 0, 79, 67, 0, 0, 0, 0, 0, 4, 154, 25, 0, 0, 0, 0, 0, 38, 156, 134, 20, 0, 0, 0, 0, 36, 152, 150, 29, 0, 0, 0, 0, 0, 68, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 16, 12, 0, 0, 0, 0, 0, 0, 97, 40, 0, 0, 0, 0, 0, 0, 117, 0, 60, 98, 32, 0, 0, 0, 130, 81, 96, 51, 104, 5, 0, 0, 172, 91, 0, 0, 110, 11, 0, 0, 163, 124, 73, 101, 74, 0, 0, 0, 55, 83, 33, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 30, 23, 0, 0, 0, 0, 0, 0, 117, 16, 0, 0, 0, 0, 0, 6, 158, 1, 0, 0, 0, 0, 0, 32, 177, 74, 28, 0, 0, 0, 0, 51, 201, 80, 168, 0, 0, 0, 0, 3, 173, 139, 145, 0, 0, 0, 0, 0, 23, 43, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 30, 33, 0, 0, 0, 0, 0, 17, 118, 58, 0, 0, 0, 0, 0, 122, 8, 0, 0, 0, 0, 0, 40, 118, 50, 85, 20, 0, 0, 0, 93, 118, 80, 63, 50, 0, 0, 0, 86, 178, 85, 107, 1, 0, 0, 0, 0, 56, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 30, 53, 0, 0, 0, 0, 0, 1, 121, 51, 0, 0, 0, 0, 0, 111, 69, 0, 0, 0, 0, 0, 24, 132, 24, 9, 0, 0, 0, 0, 111, 161, 128, 165, 10, 0, 0, 0, 106, 174, 163, 157, 6, 0, 0, 0, 0, 39, 42, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 64, 21, 0, 0, 0, 0, 0, 50, 105, 11, 0, 0, 0, 0, 17, 153, 2, 0, 0, 0, 0, 0, 84, 138, 62, 71, 4, 0, 0, 0, 124, 198, 54, 65, 100, 0, 0, 0, 69, 188, 84, 109, 65, 0, 0, 0, 0, 24, 50, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 41, 6, 0, 0, 0, 0, 0, 60, 200, 28, 0, 0, 0, 0, 43, 197, 22, 0, 0, 0, 0, 0, 117, 133, 59, 150, 0, 0, 0, 0, 167, 79, 192, 219, 10, 0, 0, 0, 145, 122, 204, 207, 0, 0, 0, 0, 19, 106, 97, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 74, 52, 7, 6, 0, 0, 0, 7, 200, 64, 12, 10, 0, 0, 4, 122, 42, 0, 0, 0, 0, 0, 93, 118, 0, 0, 0, 0, 0, 0, 131, 116, 139, 152, 17, 5, 0, 0, 140, 208, 82, 156, 31, 14, 0, 0, 1, 37, 55, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 16, 36, 0, 0, 0, 0, 0, 0, 134, 160, 0, 0, 0, 0, 0, 69, 188, 31, 0, 0, 0, 0, 10, 181, 56, 0, 0, 0, 0, 0, 78, 203, 158, 133, 0, 0, 0, 0, 81, 247, 141, 184, 0, 0, 0, 0, 1, 69, 108, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 31, 11, 0, 0, 0, 0, 0, 47, 155, 23, 0, 0, 0, 0, 19, 191, 31, 0, 0, 0, 0, 0, 111, 171, 15, 0, 0, 0, 0, 31, 203, 179, 91, 0, 0, 0, 0, 63, 231, 203, 35, 0, 0, 0, 0, 8, 95, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 2, 64, 0, 0, 0, 0, 0, 0, 73, 145, 0, 0, 0, 0, 0, 45, 114, 6, 0, 0, 0, 0, 33, 121, 17, 3, 0, 0, 0, 0, 120, 110, 164, 165, 11, 0, 0, 0, 98, 184, 93, 109, 1, 0, 0, 0, 0, 16, 47, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 31, 13, 0, 0, 0, 0, 0, 27, 190, 79, 0, 0, 0, 0, 0, 143, 176, 8, 0, 0, 0, 0, 5, 221, 90, 98, 126, 14, 0, 0, 11, 213, 99, 210, 231, 82, 0, 0, 2, 185, 96, 140, 212, 21, 0, 0, 0, 20, 103, 109, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 16, 55, 0, 0, 0, 0, 0, 0, 101, 71, 0, 0, 0, 0, 0, 47, 72, 0, 0, 0, 0, 0, 5, 111, 6, 1, 0, 0, 0, 0, 74, 134, 137, 125, 0, 0, 0, 0, 75, 200, 83, 114, 0, 0, 0, 0, 0, 19, 35, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 50, 90, 0, 0, 0, 0, 0, 1, 140, 49, 0, 0, 0, 0, 7, 127, 31, 0, 0, 0, 0, 0, 91, 115, 3, 3, 0, 0, 0, 0, 131, 86, 168, 169, 0, 0, 0, 0, 131, 200, 165, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 41, 106, 0, 0, 0, 0, 0, 0, 104, 27, 53, 108, 17, 0, 0, 0, 92, 1, 104, 32, 46, 0, 0, 0, 96, 29, 78, 56, 13, 0, 0, 0, 82, 132, 143, 105, 0, 0, 0, 0, 0, 32, 43, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 99, 151, 21, 0, 0, 26, 148, 187, 101, 46, 4, 0, 0, 143, 249, 80, 1, 0, 0, 0, 0, 227, 182, 110, 87, 0, 0, 0, 0, 205, 88, 90, 122, 0, 0, 0, 0, 53, 147, 147, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 4, 15, 0, 0, 0, 0, 0, 0, 50, 29, 0, 0, 0, 0, 0, 0, 132, 2, 0, 0, 0, 0, 0, 17, 160, 138, 100, 0, 0, 0, 0, 11, 197, 78, 106, 0, 0, 0, 0, 0, 148, 134, 132, 0, 0, 0, 0, 0, 4, 50, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 60, 140, 0, 0, 0, 0, 0, 44, 134, 11, 0, 0, 0, 0, 15, 139, 19, 0, 0, 0, 0, 0, 102, 222, 159, 97, 0, 0, 0, 0, 81, 201, 138, 107, 0, 0, 0, 0, 0, 38, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 70, 9, 0, 0, 0, 0, 0, 0, 119, 3, 0, 0, 0, 0, 0, 19, 115, 0, 0, 0, 0, 0, 0, 62, 102, 79, 110, 3, 0, 0, 0, 91, 96, 115, 43, 66, 0, 0, 0, 39, 153, 199, 153, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 24, 4, 0, 0, 0, 0, 0, 34, 138, 14, 0, 0, 0, 0, 29, 156, 5, 0, 0, 0, 0, 0, 107, 114, 55, 61, 0, 0, 0, 0, 130, 77, 100, 118, 2, 0, 0, 0, 82, 151, 169, 136, 0, 0, 0, 0, 0, 53, 99, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 1, 56, 0, 0, 0, 0, 0, 0, 46, 131, 0, 0, 0, 0, 0, 8, 118, 12, 0, 0, 0, 0, 0, 95, 33, 0, 0, 0, 0, 0, 78, 201, 118, 102, 0, 0, 0, 0, 65, 173, 72, 115, 0, 0, 0, 0, 0, 21, 44, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 29, 99, 21, 0, 0, 0, 0, 3, 153, 91, 5, 0, 0, 0, 29, 155, 39, 0, 0, 0, 0, 0, 136, 86, 2, 9, 10, 0, 0, 2, 168, 91, 124, 72, 134, 15, 0, 0, 172, 190, 85, 115, 76, 0, 0, 0, 7, 53, 40, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 16, 64, 0, 0, 0, 0, 0, 3, 126, 129, 0, 0, 0, 0, 0, 80, 220, 23, 0, 0, 0, 0, 0, 160, 145, 76, 83, 0, 0, 0, 0, 171, 108, 236, 245, 27, 0, 0, 0, 96, 222, 247, 227, 22, 0, 0, 0, 0, 37, 32, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 1, 65, 2, 0, 0, 0, 0, 0, 49, 70, 0, 0, 0, 0, 0, 0, 101, 2, 0, 0, 0, 0, 0, 1, 95, 0, 0, 0, 0, 0, 0, 26, 129, 136, 83, 0, 0, 0, 0, 17, 155, 153, 78, 0, 0, 0, 0, 0, 26, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 7, 41, 0, 0, 0, 0, 0, 0, 68, 171, 2, 0, 0, 0, 0, 11, 187, 91, 0, 0, 0, 0, 0, 86, 242, 180, 117, 0, 0, 0, 0, 134, 253, 246, 236, 3, 0, 0, 0, 128, 253, 251, 162, 0, 0, 0, 0, 12, 88, 50, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 66, 170, 0, 0, 0, 0, 0, 0, 135, 96, 1, 6, 0, 0, 0, 0, 138, 20, 66, 144, 12, 0, 0, 0, 124, 15, 95, 127, 27, 0, 0, 0, 69, 123, 62, 150, 0, 0, 0, 0, 0, 22, 97, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 87, 198, 3, 0, 0, 0, 0, 99, 199, 50, 0, 0, 0, 0, 47, 209, 61, 0, 0, 0, 0, 0, 139, 150, 78, 29, 0, 0, 0, 0, 134, 227, 247, 84, 0, 0, 0, 0, 16, 94, 101, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 19, 43, 0, 0, 0, 0, 0, 0, 101, 50, 0, 0, 0, 0, 0, 31, 96, 0, 0, 0, 0, 0, 0, 117, 98, 38, 0, 0, 0, 0, 39, 130, 41, 122, 0, 0, 0, 0, 60, 146, 126, 46, 0, 0, 0, 0, 0, 41, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 64, 18, 0, 0, 0, 0, 0, 39, 154, 13, 0, 0, 0, 0, 0, 142, 106, 0, 0, 0, 0, 0, 0, 155, 73, 112, 141, 68, 0, 0, 0, 140, 139, 123, 8, 120, 0, 0, 0, 60, 203, 183, 135, 44, 0, 0, 0, 0, 17, 57, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 26, 39, 0, 0, 0, 0, 0, 10, 136, 89, 0, 0, 0, 0, 6, 116, 14, 0, 0, 0, 0, 0, 75, 107, 0, 0, 0, 0, 0, 0, 106, 62, 100, 51, 0, 0, 0, 0, 108, 101, 64, 125, 9, 0, 0, 0, 4, 60, 94, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 22, 6, 0, 0, 0, 0, 0, 0, 115, 19, 0, 0, 0, 0, 0, 29, 98, 0, 0, 0, 0, 0, 0, 109, 76, 5, 0, 0, 0, 0, 13, 140, 122, 101, 0, 0, 0, 0, 22, 132, 110, 110, 0, 0, 0, 0, 0, 60, 72, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 1, 28, 0, 0, 0, 0, 0, 0, 52, 89, 0, 0, 0, 0, 0, 0, 87, 3, 0, 0, 0, 0, 0, 50, 121, 35, 0, 0, 0, 0, 16, 120, 93, 45, 0, 0, 0, 0, 60, 109, 84, 3, 0, 0, 0, 0, 34, 90, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 1, 46, 1, 0, 0, 0, 0, 0, 96, 197, 3, 0, 0, 0, 1, 106, 174, 28, 0, 0, 0, 0, 55, 211, 32, 0, 0, 0, 0, 0, 122, 198, 126, 35, 0, 0, 0, 0, 112, 252, 218, 141, 0, 0, 0, 0, 29, 121, 117, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 26, 24, 0, 0, 0, 0, 0, 0, 154, 137, 0, 0, 0, 0, 0, 0, 180, 44, 0, 0, 0, 0, 0, 0, 187, 61, 72, 107, 6, 0, 0, 0, 122, 203, 157, 139, 63, 0, 0, 0, 38, 222, 122, 147, 46, 0, 0, 0, 3, 84, 84, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 10, 35, 0, 0, 0, 0, 0, 0, 81, 198, 0, 0, 0, 0, 0, 16, 217, 74, 0, 0, 0, 0, 5, 127, 131, 3, 0, 0, 0, 0, 53, 238, 176, 22, 0, 0, 0, 0, 91, 252, 251, 89, 0, 0, 0, 0, 16, 77, 103, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 68, 14, 0, 0, 0, 0, 0, 0, 188, 35, 0, 0, 0, 0, 0, 73, 140, 1, 0, 0, 0, 0, 2, 149, 59, 0, 0, 0, 0, 0, 74, 234, 228, 155, 0, 0, 0, 0, 75, 250, 250, 163, 0, 0, 0, 0, 0, 40, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 2, 61, 0, 0, 0, 0, 0, 0, 60, 165, 3, 0, 0, 0, 0, 37, 207, 28, 0, 0, 0, 0, 0, 111, 157, 0, 0, 0, 0, 0, 0, 120, 112, 195, 123, 3, 0, 0, 0, 92, 228, 253, 224, 7, 0, 0, 0, 0, 26, 43, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 2, 37, 0, 0, 0, 0, 0, 1, 90, 129, 0, 0, 0, 0, 0, 106, 146, 1, 0, 0, 0, 0, 0, 154, 35, 22, 142, 31, 0, 0, 0, 155, 16, 133, 119, 64, 0, 0, 0, 146, 104, 162, 168, 33, 0, 0, 0, 15, 92, 103, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 63, 24, 0, 0, 0, 0, 0, 23, 169, 28, 0, 0, 0, 0, 4, 164, 76, 0, 0, 0, 0, 0, 51, 225, 33, 6, 0, 0, 0, 0, 76, 235, 244, 148, 0, 0, 0, 0, 11, 195, 250, 131, 0, 0, 0, 0, 0, 13, 49, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 19, 15, 0, 0, 0, 0, 0, 3, 180, 91, 0, 0, 0, 0, 2, 129, 149, 12, 0, 0, 0, 0, 67, 214, 91, 54, 0, 0, 0, 0, 160, 235, 163, 213, 17, 0, 0, 0, 144, 202, 148, 189, 5, 0, 0, 0, 22, 101, 77, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 61, 0, 0, 0, 0, 0, 0, 39, 76, 0, 0, 0, 0, 0, 0, 108, 2, 0, 0, 0, 0, 0, 2, 105, 96, 70, 0, 0, 0, 0, 22, 168, 43, 89, 7, 0, 0, 0, 2, 154, 74, 99, 1, 0, 0, 0, 0, 11, 46, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 48, 7, 0, 0, 0, 0, 0, 36, 236, 70, 0, 0, 0, 0, 20, 195, 163, 9, 0, 0, 0, 0, 125, 237, 101, 127, 1, 0, 0, 1, 222, 233, 246, 253, 83, 0, 0, 0, 173, 253, 253, 248, 50, 0, 0, 0, 12, 88, 126, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 25, 36, 0, 0, 0, 0, 0, 0, 91, 51, 0, 0, 0, 0, 0, 6, 139, 0, 0, 0, 0, 0, 0, 30, 135, 121, 127, 9, 0, 0, 0, 56, 226, 25, 87, 49, 0, 0, 0, 34, 200, 98, 133, 7, 0, 0, 0, 0, 17, 48, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 27, 15, 0, 0, 0, 0, 0, 4, 191, 135, 0, 0, 0, 0, 0, 127, 191, 23, 0, 0, 0, 0, 39, 227, 71, 0, 0, 0, 0, 0, 83, 255, 231, 67, 0, 0, 0, 0, 75, 255, 255, 127, 0, 0, 0, 0, 11, 75, 107, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 67, 27, 0, 0, 0, 0, 0, 0, 133, 39, 0, 0, 0, 0, 0, 73, 229, 5, 0, 0, 0, 0, 0, 132, 199, 94, 112, 16, 0, 0, 0, 173, 253, 253, 253, 112, 0, 0, 0, 97, 231, 233, 204, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 143, 69, 0, 0, 0, 0, 0, 26, 201, 47, 0, 0, 0, 0, 0, 85, 112, 0, 0, 0, 0, 0, 18, 168, 126, 3, 0, 0, 0, 0, 78, 234, 190, 10, 0, 0, 0, 0, 0, 91, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 83, 35, 0, 0, 0, 0, 0, 19, 218, 64, 0, 0, 0, 0, 4, 151, 93, 0, 0, 0, 0, 0, 68, 207, 7, 0, 0, 0, 0, 0, 111, 223, 171, 131, 0, 0, 0, 0, 81, 252, 205, 223, 0, 0, 0, 0, 1, 24, 41, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 24, 24, 0, 0, 0, 0, 0, 56, 184, 74, 0, 0, 0, 0, 82, 205, 61, 0, 0, 0, 0, 66, 212, 61, 0, 0, 0, 0, 0, 171, 146, 55, 2, 0, 0, 0, 0, 127, 239, 234, 111, 0, 0, 0, 0, 13, 95, 115, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 16, 27, 0, 0, 0, 0, 8, 111, 114, 79, 0, 0, 0, 33, 140, 23, 0, 0, 0, 0, 0, 99, 80, 0, 0, 0, 0, 0, 0, 134, 101, 114, 94, 0, 0, 0, 0, 125, 142, 9, 121, 7, 0, 0, 0, 7, 79, 113, 83, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 69, 8, 0, 0, 0, 0, 0, 28, 155, 8, 0, 0, 0, 0, 34, 177, 23, 0, 0, 0, 0, 0, 130, 129, 65, 118, 27, 0, 0, 0, 163, 168, 118, 90, 134, 0, 0, 0, 105, 239, 119, 136, 68, 0, 0, 0, 0, 23, 43, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 30, 24, 0, 0, 0, 0, 0, 32, 211, 98, 0, 0, 0, 0, 28, 178, 57, 5, 0, 0, 0, 0, 116, 150, 0, 0, 0, 0, 0, 0, 163, 117, 149, 169, 5, 0, 0, 0, 127, 233, 111, 179, 26, 0, 0, 0, 4, 72, 126, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 9, 57, 0, 0, 0, 0, 0, 0, 81, 90, 0, 0, 0, 0, 0, 89, 171, 3, 0, 0, 0, 0, 0, 175, 57, 26, 78, 11, 0, 0, 2, 175, 104, 193, 187, 81, 0, 0, 0, 166, 234, 110, 151, 46, 0, 0, 0, 1, 43, 63, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 21, 42, 0, 0, 0, 0, 0, 0, 148, 131, 0, 0, 0, 0, 0, 11, 182, 9, 0, 0, 49, 12, 0, 56, 168, 0, 8, 122, 232, 63, 0, 37, 187, 8, 134, 252, 113, 0, 0, 1, 195, 154, 199, 168, 8, 0, 0, 0, 32, 92, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 32, 28, 0, 0, 0, 0, 0, 11, 125, 79, 0, 0, 0, 0, 0, 115, 32, 0, 0, 0, 0, 0, 19, 144, 0, 0, 0, 0, 0, 0, 67, 175, 121, 67, 0, 0, 0, 0, 45, 136, 123, 77, 0, 0, 0, 0, 1, 70, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 126, 0, 0, 0, 0, 0, 0, 174, 192, 0, 0, 0, 0, 0, 0, 169, 78, 0, 0, 0, 0, 0, 0, 101, 166, 21, 113, 121, 0, 0, 0, 10, 133, 191, 230, 54, 0, 0, 0, 0, 0, 7, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 36, 19, 0, 0, 0, 0, 0, 58, 218, 82, 0, 0, 0, 0, 63, 180, 38, 5, 0, 0, 0, 0, 143, 99, 10, 5, 0, 0, 0, 0, 172, 185, 120, 165, 95, 0, 0, 0, 140, 233, 62, 99, 154, 0, 0, 0, 4, 60, 105, 81, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 88, 29, 0, 0, 0, 0, 0, 32, 175, 22, 0, 0, 0, 0, 12, 166, 36, 0, 0, 0, 0, 0, 80, 173, 82, 116, 15, 0, 0, 0, 120, 227, 134, 158, 90, 0, 0, 0, 79, 221, 153, 146, 25, 0, 0, 0, 0, 33, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 25, 44, 0, 0, 0, 0, 0, 47, 178, 160, 0, 0, 0, 0, 68, 164, 15, 0, 0, 0, 0, 0, 158, 49, 0, 0, 0, 0, 0, 15, 138, 24, 164, 166, 29, 0, 0, 1, 155, 186, 121, 130, 117, 0, 0, 0, 0, 37, 106, 121, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 18, 23, 0, 0, 0, 0, 0, 45, 145, 88, 0, 0, 0, 0, 0, 121, 65, 0, 0, 0, 0, 0, 0, 111, 80, 46, 50, 0, 0, 0, 0, 57, 153, 134, 135, 0, 0, 0, 0, 11, 189, 80, 139, 0, 0, 0, 0, 0, 49, 97, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 37, 73, 0, 0, 0, 0, 0, 4, 160, 77, 0, 0, 0, 0, 7, 134, 72, 0, 0, 0, 0, 0, 64, 172, 13, 25, 0, 0, 0, 0, 180, 193, 143, 198, 25, 0, 0, 0, 184, 167, 107, 143, 15, 0, 0, 0, 12, 54, 29, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 70, 11, 0, 0, 0, 0, 0, 27, 141, 6, 0, 0, 0, 0, 20, 160, 18, 0, 0, 0, 0, 0, 117, 130, 64, 121, 21, 0, 0, 0, 171, 104, 149, 122, 80, 0, 0, 0, 102, 205, 148, 154, 36, 0, 0, 0, 0, 2, 50, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 1, 74, 0, 0, 0, 0, 0, 1, 92, 81, 0, 0, 0, 0, 0, 108, 76, 0, 0, 0, 0, 0, 0, 125, 111, 136, 62, 0, 0, 0, 0, 143, 55, 31, 155, 14, 0, 0, 0, 88, 159, 148, 177, 8, 0, 0, 0, 0, 23, 28, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 77, 21, 0, 0, 0, 0, 0, 53, 87, 2, 0, 0, 0, 0, 43, 129, 0, 0, 0, 0, 0, 0, 118, 66, 71, 55, 0, 0, 0, 0, 119, 136, 55, 93, 3, 0, 0, 0, 71, 172, 58, 122, 0, 0, 0, 0, 0, 24, 54, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 19, 37, 0, 0, 0, 0, 0, 5, 144, 58, 0, 0, 0, 0, 3, 130, 32, 0, 0, 0, 0, 0, 65, 155, 4, 0, 0, 0, 0, 0, 122, 203, 155, 102, 0, 0, 0, 0, 91, 152, 28, 168, 0, 0, 0, 0, 0, 59, 102, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 1, 45, 3, 0, 0, 0, 0, 39, 143, 102, 3, 0, 0, 0, 57, 162, 14, 0, 0, 0, 0, 0, 142, 89, 97, 138, 21, 0, 0, 0, 189, 168, 70, 140, 18, 0, 0, 0, 122, 223, 152, 111, 0, 0, 0, 0, 0, 42, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 45, 40, 0, 0, 0, 0, 0, 5, 131, 23, 0, 0, 0, 0, 0, 91, 23, 0, 0, 0, 0, 0, 4, 118, 18, 0, 0, 0, 0, 0, 34, 145, 161, 97, 0, 0, 0, 0, 25, 159, 114, 84, 0, 0, 0, 0, 0, 36, 40, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 125, 40, 0, 0, 0, 0, 0, 61, 146, 14, 0, 0, 0, 0, 47, 170, 6, 0, 0, 0, 0, 0, 131, 104, 1, 31, 10, 0, 0, 0, 161, 95, 174, 170, 163, 5, 0, 0, 184, 219, 56, 43, 141, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 47, 29, 0, 0, 0, 0, 0, 64, 165, 124, 0, 0, 0, 0, 39, 142, 1, 35, 0, 0, 0, 0, 116, 81, 2, 26, 1, 0, 0, 0, 138, 22, 161, 246, 25, 0, 0, 0, 128, 36, 161, 190, 2, 0, 0, 0, 39, 120, 84, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 33, 12, 0, 0, 0, 0, 0, 58, 191, 38, 0, 0, 0, 5, 106, 117, 40, 0, 0, 0, 0, 58, 164, 1, 0, 0, 0, 0, 0, 153, 150, 173, 157, 0, 0, 0, 0, 170, 186, 70, 188, 0, 0, 0, 0, 40, 123, 111, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 49, 13, 0, 0, 0, 0, 0, 10, 148, 7, 0, 0, 0, 0, 0, 103, 119, 1, 1, 0, 0, 0, 0, 144, 75, 170, 166, 15, 0, 0, 0, 134, 205, 28, 92, 49, 0, 0, 0, 45, 208, 145, 138, 8, 0, 0, 0, 0, 25, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 22, 21, 0, 0, 0, 0, 0, 0, 83, 40, 0, 0, 0, 0, 0, 1, 116, 0, 0, 0, 0, 0, 0, 12, 99, 49, 17, 0, 0, 0, 0, 18, 156, 66, 92, 0, 0, 0, 0, 36, 115, 62, 108, 0, 0, 0, 0, 0, 0, 42, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 1, 75, 7, 0, 0, 0, 0, 0, 58, 108, 2, 0, 0, 0, 0, 48, 154, 1, 0, 0, 0, 0, 0, 125, 92, 26, 67, 3, 0, 0, 0, 145, 139, 137, 190, 23, 0, 0, 0, 105, 228, 121, 122, 4, 0, 0, 0, 4, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 79, 5, 0, 0, 0, 0, 0, 56, 137, 5, 0, 0, 0, 0, 13, 165, 11, 0, 0, 0, 0, 0, 73, 181, 143, 113, 0, 0, 0, 0, 108, 219, 51, 168, 0, 0, 0, 0, 75, 219, 138, 143, 0, 0, 0, 0, 1, 46, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 48, 98, 0, 0, 0, 0, 0, 29, 177, 8, 0, 0, 0, 0, 0, 101, 119, 36, 69, 0, 0, 0, 0, 150, 123, 165, 192, 8, 0, 0, 0, 82, 218, 173, 121, 0, 0, 0, 0, 0, 67, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 74, 25, 0, 0, 0, 0, 0, 36, 112, 4, 0, 0, 0, 0, 3, 117, 16, 0, 0, 0, 0, 0, 20, 140, 73, 36, 0, 0, 0, 0, 51, 215, 98, 136, 0, 0, 0, 0, 48, 179, 134, 123, 0, 0, 0, 0, 0, 10, 27, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 1, 65, 0, 0, 0, 0, 0, 0, 44, 109, 0, 0, 0, 0, 0, 5, 141, 6, 0, 0, 0, 0, 0, 52, 142, 78, 124, 6, 0, 0, 0, 69, 176, 113, 85, 22, 0, 0, 0, 20, 166, 118, 130, 1, 0, 0, 0, 0, 6, 47, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 1, 74, 1, 0, 0, 0, 0, 0, 68, 137, 1, 0, 0, 0, 0, 42, 187, 14, 0, 0, 0, 0, 0, 108, 162, 127, 142, 30, 0, 0, 0, 142, 233, 45, 73, 119, 0, 0, 0, 81, 216, 147, 143, 54, 0, 0, 0, 0, 25, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 148, 21, 0, 0, 0, 8, 125, 212, 70, 0, 0, 0, 0, 93, 243, 209, 39, 0, 0, 0, 0, 176, 96, 111, 144, 0, 0, 0, 0, 159, 56, 150, 104, 0, 0, 0, 0, 38, 143, 122, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 27, 53, 7, 0, 0, 0, 0, 59, 104, 88, 35, 0, 0, 0, 16, 109, 1, 0, 0, 0, 0, 0, 58, 60, 0, 11, 81, 91, 33, 0, 49, 77, 3, 107, 21, 33, 94, 0, 4, 144, 87, 58, 5, 98, 54, 0, 0, 8, 73, 87, 56, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 11, 62, 0, 0, 0, 0, 0, 0, 126, 105, 0, 0, 0, 0, 2, 107, 124, 3, 0, 0, 0, 0, 66, 202, 61, 142, 56, 0, 0, 0, 187, 80, 164, 77, 104, 0, 0, 13, 209, 159, 189, 128, 23, 0, 0, 0, 56, 63, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 75, 41, 0, 0, 0, 0, 0, 85, 184, 28, 0, 0, 0, 0, 84, 197, 47, 0, 0, 0, 0, 46, 200, 101, 97, 11, 0, 0, 20, 203, 169, 197, 212, 40, 0, 0, 43, 238, 232, 211, 175, 2, 0, 0, 1, 57, 63, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 1, 38, 0, 0, 0, 0, 0, 0, 91, 167, 0, 0, 0, 0, 0, 42, 146, 13, 0, 0, 0, 0, 0, 132, 42, 0, 0, 0, 0, 0, 64, 205, 118, 74, 0, 0, 0, 0, 53, 153, 73, 128, 0, 0, 0, 0, 2, 74, 85, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 69, 39, 0, 0, 0, 0, 0, 8, 185, 48, 0, 0, 0, 0, 0, 92, 96, 0, 0, 0, 0, 0, 14, 168, 43, 94, 10, 0, 0, 0, 114, 147, 188, 209, 14, 0, 0, 0, 162, 191, 194, 85, 0, 0, 0, 0, 26, 59, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 67, 30, 0, 0, 0, 0, 0, 12, 185, 32, 0, 0, 0, 0, 0, 127, 92, 0, 0, 0, 0, 0, 63, 199, 20, 85, 54, 0, 0, 0, 206, 78, 139, 209, 113, 0, 0, 2, 224, 172, 231, 168, 18, 0, 0, 0, 33, 54, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 55, 21, 0, 0, 0, 0, 0, 91, 168, 25, 0, 0, 0, 0, 57, 106, 6, 0, 0, 0, 0, 30, 166, 18, 0, 0, 0, 0, 0, 113, 230, 209, 77, 0, 0, 0, 0, 154, 208, 195, 81, 0, 0, 0, 0, 3, 38, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 15, 45, 0, 0, 4, 0, 0, 0, 131, 108, 0, 0, 0, 0, 0, 75, 125, 2, 0, 0, 0, 0, 41, 176, 77, 141, 30, 0, 0, 0, 180, 138, 211, 178, 7, 0, 0, 1, 221, 238, 188, 82, 0, 0, 0, 0, 5, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 47, 7, 0, 0, 0, 0, 0, 0, 123, 24, 0, 0, 0, 0, 0, 3, 156, 0, 0, 0, 0, 0, 0, 22, 143, 100, 100, 0, 0, 0, 0, 35, 212, 69, 145, 5, 0, 0, 0, 15, 172, 87, 150, 1, 0, 0, 0, 0, 12, 63, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 21, 50, 0, 0, 0, 0, 0, 2, 171, 157, 0, 0, 0, 0, 2, 135, 67, 10, 0, 0, 0, 0, 58, 171, 50, 55, 0, 0, 0, 0, 153, 220, 155, 218, 12, 0, 0, 0, 174, 159, 179, 98, 0, 0, 0, 0, 48, 115, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 6, 84, 6, 0, 0, 0, 0, 0, 98, 158, 1, 0, 0, 0, 0, 57, 173, 16, 0, 0, 0, 0, 13, 175, 92, 105, 33, 0, 0, 0, 147, 173, 159, 168, 80, 0, 0, 12, 238, 219, 173, 87, 3, 0, 0, 0, 44, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 8, 37, 0, 0, 0, 0, 0, 0, 55, 42, 0, 0, 0, 0, 0, 0, 103, 8, 0, 0, 0, 0, 0, 0, 142, 42, 3, 0, 0, 0, 0, 4, 165, 121, 99, 0, 0, 0, 0, 0, 134, 80, 85, 0, 0, 0, 0, 0, 2, 33, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 117, 135, 34, 0, 0, 0, 4, 131, 65, 0, 0, 0, 0, 0, 60, 214, 83, 19, 0, 0, 0, 0, 136, 162, 75, 167, 8, 0, 0, 0, 144, 103, 35, 168, 14, 0, 0, 0, 34, 143, 131, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 60, 61, 0, 0, 0, 0, 0, 12, 191, 68, 0, 0, 0, 0, 6, 141, 72, 0, 0, 0, 0, 0, 81, 210, 50, 146, 116, 3, 0, 7, 193, 96, 166, 135, 112, 0, 0, 34, 213, 179, 211, 127, 8, 0, 0, 0, 56, 56, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 51, 62, 0, 0, 0, 0, 0, 0, 85, 10, 22, 43, 2, 0, 0, 0, 71, 56, 109, 121, 76, 0, 0, 0, 105, 136, 0, 26, 77, 0, 0, 0, 72, 196, 112, 139, 17, 0, 0, 0, 3, 33, 20, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 22, 36, 0, 0, 0, 0, 0, 0, 94, 97, 0, 0, 0, 0, 0, 0, 145, 91, 54, 60, 0, 0, 0, 0, 128, 138, 174, 147, 41, 0, 0, 0, 64, 238, 28, 31, 124, 0, 0, 0, 6, 148, 139, 156, 57, 0, 0, 0, 0, 1, 48, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 13, 65, 0, 0, 0, 0, 0, 1, 105, 23, 0, 0, 0, 0, 0, 61, 107, 0, 0, 0, 0, 0, 0, 107, 54, 32, 122, 12, 0, 0, 0, 113, 21, 142, 149, 8, 0, 0, 0, 66, 147, 200, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 50, 55, 0, 0, 0, 0, 0, 0, 159, 72, 0, 0, 0, 0, 1, 107, 120, 4, 0, 0, 0, 0, 54, 225, 133, 77, 0, 0, 0, 0, 170, 152, 38, 158, 12, 0, 0, 0, 155, 177, 146, 127, 2, 0, 0, 0, 5, 50, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 28, 16, 0, 0, 0, 0, 0, 58, 130, 33, 0, 0, 0, 0, 59, 82, 1, 0, 0, 0, 0, 29, 130, 4, 19, 31, 0, 0, 0, 134, 119, 91, 71, 47, 0, 0, 0, 143, 216, 127, 73, 0, 0, 0, 3, 37, 7, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 56, 65, 0, 0, 0, 0, 0, 17, 198, 67, 0, 0, 0, 0, 8, 146, 99, 0, 0, 0, 0, 0, 98, 198, 4, 0, 0, 0, 0, 0, 204, 61, 79, 193, 78, 0, 0, 0, 208, 166, 222, 194, 46, 0, 0, 0, 26, 63, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 35, 78, 0, 0, 0, 0, 0, 14, 184, 90, 0, 0, 0, 0, 24, 180, 75, 0, 0, 0, 0, 0, 158, 163, 27, 95, 86, 0, 0, 46, 203, 132, 153, 170, 113, 0, 0, 49, 229, 235, 155, 172, 12, 0, 0, 0, 32, 63, 33, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 61, 42, 0, 0, 0, 0, 0, 53, 164, 31, 0, 0, 0, 0, 35, 203, 30, 10, 17, 0, 0, 0, 127, 153, 14, 145, 181, 42, 0, 29, 198, 52, 202, 147, 151, 23, 0, 39, 213, 212, 199, 114, 12, 0, 0, 0, 3, 30, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 69, 54, 0, 0, 0, 0, 0, 25, 183, 49, 0, 0, 0, 0, 32, 197, 56, 0, 0, 0, 0, 0, 126, 158, 56, 99, 34, 0, 0, 6, 199, 139, 149, 209, 99, 0, 0, 14, 223, 227, 197, 130, 10, 0, 0, 0, 40, 63, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 21, 10, 0, 0, 0, 0, 0, 0, 117, 21, 0, 0, 0, 0, 0, 73, 52, 0, 0, 0, 0, 0, 0, 128, 12, 0, 0, 0, 0, 0, 0, 118, 89, 17, 0, 0, 0, 0, 0, 94, 86, 70, 0, 0, 0, 0, 0, 36, 62, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 31, 5, 0, 0, 0, 0, 0, 17, 186, 67, 0, 0, 0, 0, 0, 129, 233, 18, 10, 0, 0, 0, 2, 208, 161, 167, 187, 42, 0, 0, 1, 225, 174, 251, 253, 127, 0, 0, 0, 132, 182, 250, 244, 44, 0, 0, 0, 0, 41, 93, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 68, 31, 0, 0, 0, 0, 0, 28, 153, 18, 0, 0, 0, 0, 18, 165, 30, 0, 0, 0, 0, 0, 105, 140, 75, 61, 0, 0, 0, 0, 194, 182, 78, 140, 59, 0, 0, 0, 176, 213, 128, 160, 44, 0, 0, 0, 18, 32, 14, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 76, 0, 0, 0, 0, 0, 1, 104, 36, 0, 0, 11, 5, 0, 55, 53, 0, 24, 91, 126, 43, 0, 96, 5, 7, 144, 103, 50, 0, 0, 30, 81, 94, 111, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 43, 23, 0, 0, 0, 0, 0, 0, 98, 75, 0, 0, 0, 0, 0, 37, 118, 7, 0, 0, 0, 0, 20, 174, 101, 35, 0, 0, 0, 0, 154, 119, 42, 129, 0, 0, 0, 0, 99, 119, 117, 72, 0, 0, 0, 0, 0, 32, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 63, 39, 0, 0, 0, 0, 0, 27, 118, 14, 0, 0, 0, 0, 0, 123, 9, 0, 0, 0, 0, 0, 6, 139, 0, 0, 0, 0, 0, 0, 8, 155, 137, 136, 0, 0, 0, 0, 5, 172, 110, 135, 0, 0, 0, 0, 0, 7, 51, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 40, 83, 0, 0, 0, 0, 0, 5, 160, 69, 0, 0, 0, 0, 7, 140, 57, 0, 0, 0, 0, 0, 91, 151, 34, 111, 8, 0, 0, 0, 173, 88, 180, 201, 29, 0, 0, 0, 162, 211, 201, 114, 0, 0, 0, 0, 9, 40, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 58, 125, 0, 0, 0, 0, 0, 0, 131, 44, 0, 0, 0, 0, 0, 0, 112, 51, 97, 73, 3, 0, 0, 0, 166, 121, 17, 26, 102, 2, 0, 0, 51, 152, 27, 1, 116, 4, 0, 0, 0, 5, 92, 107, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 6, 43, 0, 0, 0, 0, 0, 0, 125, 164, 0, 0, 0, 0, 0, 94, 105, 1, 0, 0, 0, 0, 31, 178, 17, 14, 0, 0, 0, 0, 131, 186, 155, 176, 11, 0, 0, 0, 159, 229, 59, 155, 6, 0, 0, 0, 31, 116, 100, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 47, 83, 0, 0, 0, 0, 0, 14, 164, 69, 0, 0, 0, 0, 5, 145, 40, 0, 0, 0, 0, 0, 76, 161, 62, 157, 31, 0, 0, 0, 163, 127, 116, 104, 53, 0, 0, 0, 175, 205, 138, 129, 1, 0, 0, 0, 12, 54, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 4, 66, 0, 0, 0, 0, 0, 0, 95, 127, 0, 0, 0, 0, 0, 48, 130, 6, 0, 0, 0, 0, 14, 166, 132, 124, 7, 0, 0, 0, 111, 173, 32, 112, 27, 0, 0, 0, 162, 129, 125, 123, 2, 0, 0, 0, 23, 57, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 97, 60, 0, 0, 0, 0, 0, 103, 25, 0, 0, 0, 0, 0, 30, 137, 38, 53, 0, 0, 0, 0, 82, 190, 83, 121, 34, 0, 0, 0, 67, 198, 108, 119, 3, 0, 0, 0, 33, 71, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 68, 20, 0, 0, 0, 0, 0, 9, 122, 14, 0, 0, 0, 0, 0, 87, 25, 0, 0, 0, 0, 0, 0, 121, 139, 78, 0, 0, 0, 0, 20, 148, 43, 121, 0, 0, 0, 0, 19, 141, 153, 81, 0, 0, 0, 0, 0, 34, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 7, 55, 9, 0, 0, 0, 0, 0, 86, 163, 23, 0, 0, 0, 0, 16, 183, 8, 0, 0, 0, 0, 0, 35, 210, 18, 12, 0, 0, 0, 0, 35, 219, 164, 191, 0, 0, 0, 0, 13, 180, 100, 194, 0, 0, 0, 0, 0, 23, 110, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 75, 57, 0, 0, 0, 0, 0, 70, 160, 28, 0, 0, 0, 0, 96, 171, 4, 0, 0, 0, 0, 0, 175, 49, 79, 136, 47, 0, 0, 10, 175, 114, 110, 62, 124, 0, 0, 0, 178, 217, 108, 162, 41, 0, 0, 0, 7, 48, 49, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 114, 185, 21, 0, 0, 0, 7, 137, 137, 40, 0, 0, 0, 0, 105, 221, 57, 19, 0, 0, 0, 0, 223, 196, 149, 203, 87, 0, 0, 0, 150, 189, 60, 170, 47, 0, 0, 0, 2, 115, 177, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 15, 23, 0, 0, 0, 0, 0, 6, 114, 41, 0, 0, 0, 0, 0, 100, 49, 12, 96, 6, 0, 0, 0, 113, 2, 112, 153, 59, 0, 0, 0, 138, 81, 131, 116, 21, 0, 0, 0, 96, 207, 207, 109, 0, 0, 0, 0, 0, 4, 107, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 25, 106, 0, 0, 0, 0, 0, 0, 107, 22, 0, 0, 0, 0, 0, 23, 185, 111, 69, 0, 0, 0, 0, 140, 151, 22, 92, 10, 0, 0, 0, 63, 118, 31, 127, 4, 0, 0, 0, 0, 71, 114, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 6, 69, 0, 0, 0, 0, 0, 0, 19, 134, 0, 0, 0, 0, 0, 0, 124, 57, 0, 0, 0, 0, 0, 53, 176, 29, 116, 42, 0, 0, 0, 158, 107, 142, 127, 79, 0, 0, 3, 148, 198, 137, 149, 7, 0, 0, 0, 10, 54, 39, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 59, 29, 0, 0, 0, 0, 0, 54, 196, 34, 0, 0, 0, 0, 18, 196, 63, 0, 0, 0, 0, 0, 77, 93, 73, 148, 111, 19, 0, 0, 57, 158, 152, 130, 90, 165, 5, 0, 3, 136, 206, 164, 135, 176, 9, 0, 0, 0, 6, 46, 63, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 9, 39, 0, 0, 0, 0, 0, 0, 111, 100, 0, 0, 0, 0, 0, 60, 92, 0, 0, 0, 0, 0, 2, 162, 135, 51, 0, 0, 0, 0, 63, 223, 86, 96, 0, 0, 0, 0, 89, 200, 128, 17, 0, 0, 0, 0, 26, 111, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 71, 28, 0, 0, 0, 0, 0, 44, 206, 42, 0, 0, 0, 0, 42, 178, 35, 0, 0, 0, 0, 0, 141, 160, 96, 48, 0, 0, 0, 0, 170, 224, 126, 197, 31, 0, 0, 0, 90, 234, 139, 175, 34, 0, 0, 0, 0, 19, 45, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 32, 9, 0, 0, 0, 0, 0, 42, 197, 42, 0, 0, 0, 0, 101, 183, 22, 0, 0, 0, 0, 15, 157, 52, 69, 61, 1, 0, 0, 43, 198, 197, 126, 154, 129, 0, 0, 13, 169, 185, 70, 57, 153, 0, 0, 0, 1, 21, 88, 113, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 84, 47, 0, 0, 0, 0, 0, 49, 158, 30, 0, 0, 0, 0, 54, 156, 11, 0, 0, 0, 0, 0, 164, 62, 33, 59, 5, 0, 0, 0, 187, 149, 63, 61, 138, 27, 0, 0, 130, 221, 106, 50, 102, 28, 0, 0, 0, 17, 55, 45, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 85, 15, 0, 0, 0, 0, 0, 52, 168, 18, 0, 0, 0, 6, 28, 168, 16, 0, 0, 0, 0, 0, 107, 155, 82, 65, 4, 0, 0, 10, 225, 249, 165, 219, 89, 0, 0, 5, 209, 249, 195, 227, 88, 0, 0, 0, 2, 18, 44, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 47, 63, 0, 0, 0, 0, 0, 33, 156, 71, 2, 0, 0, 0, 0, 130, 67, 0, 0, 0, 0, 0, 0, 139, 27, 0, 0, 0, 0, 0, 0, 139, 113, 144, 132, 107, 0, 0, 0, 56, 224, 130, 112, 115, 0, 0, 0, 0, 6, 57, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 27, 106, 14, 0, 0, 0, 0, 9, 165, 88, 6, 0, 0, 0, 0, 110, 154, 0, 0, 0, 0, 0, 0, 168, 79, 0, 9, 0, 0, 0, 0, 164, 96, 128, 223, 35, 0, 0, 0, 73, 198, 217, 209, 22, 0, 0, 0, 0, 12, 57, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 30, 16, 0, 0, 0, 0, 0, 12, 174, 76, 0, 0, 0, 0, 0, 106, 215, 5, 14, 20, 0, 0, 0, 180, 134, 80, 186, 173, 16, 0, 0, 220, 166, 197, 133, 135, 1, 0, 0, 184, 245, 179, 201, 42, 0, 0, 0, 28, 102, 71, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 46, 67, 0, 0, 0, 0, 0, 31, 159, 56, 0, 0, 0, 0, 30, 138, 13, 0, 0, 0, 0, 6, 51, 35, 71, 100, 50, 1, 0, 64, 122, 137, 61, 115, 155, 0, 0, 63, 203, 163, 135, 145, 37, 0, 0, 0, 45, 54, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 52, 65, 0, 0, 0, 0, 0, 13, 182, 74, 0, 0, 0, 0, 20, 169, 49, 0, 0, 0, 0, 0, 120, 142, 40, 87, 11, 0, 0, 0, 154, 163, 143, 173, 76, 0, 0, 0, 167, 225, 160, 165, 12, 0, 0, 0, 22, 63, 42, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 9, 94, 17, 0, 0, 0, 0, 3, 106, 95, 16, 0, 0, 0, 0, 88, 110, 0, 0, 0, 0, 0, 0, 131, 44, 0, 56, 3, 0, 0, 0, 146, 14, 94, 230, 16, 0, 0, 0, 138, 92, 189, 137, 0, 0, 0, 0, 7, 52, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 7, 40, 1, 0, 0, 0, 0, 0, 83, 210, 76, 0, 0, 0, 0, 0, 181, 81, 101, 8, 0, 0, 0, 0, 194, 139, 120, 71, 0, 0, 0, 0, 198, 151, 78, 126, 136, 6, 0, 0, 59, 174, 103, 77, 178, 22, 0, 0, 0, 15, 93, 112, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 3, 0, 0, 1, 24, 0, 0, 0, 7, 0, 1, 96, 191, 3, 0, 0, 0, 34, 165, 211, 82, 0, 0, 0, 0, 157, 209, 68, 67, 1, 0, 0, 22, 253, 223, 249, 254, 52, 0, 0, 27, 254, 254, 243, 207, 20, 0, 0, 0, 92, 98, 61, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 9, 0, 0, 0, 0, 0, 0, 126, 29, 0, 22, 53, 2, 0, 0, 126, 56, 16, 167, 151, 116, 6, 0, 41, 171, 99, 194, 104, 196, 37, 0, 0, 98, 160, 163, 140, 105, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 19, 3, 0, 0, 0, 0, 0, 2, 143, 17, 0, 0, 0, 0, 0, 65, 79, 0, 0, 0, 0, 0, 0, 113, 12, 0, 0, 0, 0, 0, 0, 123, 115, 15, 0, 0, 0, 0, 0, 113, 158, 79, 0, 0, 0, 0, 0, 42, 90, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 57, 74, 0, 0, 0, 0, 0, 0, 109, 94, 0, 0, 0, 0, 0, 65, 18, 0, 0, 0, 0, 0, 12, 111, 0, 0, 0, 0, 0, 0, 96, 125, 140, 142, 0, 0, 0, 0, 114, 203, 206, 108, 0, 0, 0, 0, 12, 37, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 30, 6, 0, 0, 0, 0, 0, 23, 127, 7, 0, 0, 0, 0, 1, 130, 16, 0, 0, 0, 0, 0, 27, 176, 108, 39, 0, 0, 0, 0, 69, 148, 50, 173, 0, 0, 0, 0, 63, 163, 73, 134, 0, 0, 0, 0, 2, 72, 88, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 1, 72, 4, 0, 0, 0, 0, 0, 85, 210, 5, 0, 0, 0, 0, 83, 181, 34, 0, 0, 0, 0, 77, 210, 90, 90, 0, 0, 0, 0, 205, 198, 227, 241, 46, 0, 0, 0, 187, 253, 229, 153, 13, 0, 0, 0, 11, 58, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 7, 30, 0, 0, 0, 0, 0, 0, 120, 163, 0, 0, 0, 0, 13, 112, 182, 37, 0, 0, 0, 0, 94, 207, 40, 11, 0, 0, 0, 11, 226, 193, 149, 223, 38, 0, 0, 25, 247, 171, 142, 182, 21, 0, 0, 1, 53, 104, 65, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 11, 11, 0, 0, 0, 0, 0, 66, 143, 47, 0, 0, 0, 1, 88, 171, 28, 0, 0, 0, 0, 66, 207, 78, 83, 18, 0, 0, 0, 206, 220, 114, 143, 98, 0, 0, 6, 238, 127, 100, 125, 25, 0, 0, 1, 67, 119, 83, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 67, 2, 0, 0, 0, 0, 0, 54, 122, 0, 0, 0, 0, 0, 37, 110, 8, 0, 0, 0, 0, 19, 130, 19, 20, 0, 0, 0, 0, 116, 88, 167, 131, 0, 0, 0, 0, 60, 175, 220, 58, 0, 0, 0, 0, 0, 10, 28, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 45, 44, 0, 0, 0, 2, 0, 0, 130, 87, 0, 0, 0, 0, 0, 28, 139, 7, 0, 0, 0, 0, 0, 122, 85, 67, 0, 0, 0, 0, 89, 153, 167, 172, 0, 0, 0, 0, 146, 208, 151, 80, 0, 0, 0, 0, 17, 55, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 17, 19, 0, 0, 0, 0, 0, 0, 113, 45, 0, 0, 0, 0, 0, 39, 93, 0, 0, 0, 0, 0, 0, 110, 87, 3, 0, 0, 0, 0, 0, 120, 124, 61, 0, 0, 0, 0, 0, 107, 135, 21, 0, 0, 0, 0, 0, 78, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 21, 21, 0, 0, 0, 0, 0, 0, 140, 63, 0, 0, 0, 0, 6, 121, 67, 0, 0, 0, 0, 0, 86, 143, 3, 56, 8, 0, 0, 0, 170, 45, 133, 213, 30, 0, 0, 0, 127, 164, 210, 113, 0, 0, 0, 0, 0, 59, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 35, 18, 0, 0, 0, 0, 0, 39, 161, 30, 0, 0, 0, 0, 22, 101, 16, 0, 0, 0, 0, 0, 105, 166, 113, 115, 3, 0, 0, 0, 112, 40, 0, 87, 23, 0, 0, 0, 99, 110, 54, 137, 16, 0, 0, 0, 1, 53, 96, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 13, 42, 0, 0, 0, 0, 0, 0, 129, 70, 0, 0, 0, 0, 0, 21, 179, 4, 0, 0, 0, 0, 0, 91, 217, 137, 123, 3, 0, 0, 0, 113, 189, 57, 120, 53, 0, 0, 0, 66, 201, 115, 164, 3, 0, 0, 0, 0, 31, 52, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 7, 33, 0, 0, 0, 0, 0, 6, 123, 112, 0, 0, 0, 0, 25, 139, 28, 0, 0, 0, 0, 0, 121, 79, 1, 2, 0, 0, 0, 0, 164, 109, 83, 115, 103, 0, 0, 0, 175, 79, 10, 33, 123, 5, 0, 0, 13, 73, 100, 67, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 63, 47, 0, 0, 0, 0, 0, 8, 162, 22, 0, 0, 0, 0, 3, 129, 51, 0, 0, 0, 0, 0, 66, 145, 12, 108, 53, 0, 0, 0, 156, 32, 147, 112, 71, 0, 0, 0, 164, 127, 166, 107, 7, 0, 0, 0, 11, 45, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 42, 143, 0, 0, 0, 0, 0, 14, 150, 21, 0, 0, 0, 0, 0, 106, 47, 0, 0, 0, 0, 0, 58, 154, 129, 35, 0, 0, 0, 0, 113, 65, 138, 46, 0, 0, 0, 0, 19, 72, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 67, 62, 0, 0, 0, 0, 0, 71, 93, 0, 0, 0, 0, 0, 0, 105, 11, 49, 131, 15, 0, 0, 0, 113, 0, 111, 46, 52, 0, 0, 0, 127, 43, 139, 105, 5, 0, 0, 0, 12, 55, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 47, 41, 0, 0, 0, 0, 0, 1, 163, 41, 0, 0, 0, 0, 4, 125, 58, 0, 0, 0, 0, 0, 82, 151, 0, 44, 14, 0, 0, 3, 154, 15, 119, 161, 96, 0, 0, 8, 155, 59, 184, 128, 18, 0, 0, 0, 48, 63, 44, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 13, 53, 0, 0, 0, 0, 0, 0, 76, 234, 3, 0, 0, 0, 0, 0, 162, 153, 0, 0, 0, 0, 0, 0, 212, 113, 109, 108, 8, 0, 0, 0, 212, 195, 189, 195, 90, 0, 0, 0, 123, 237, 147, 196, 82, 0, 0, 0, 0, 41, 119, 99, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 7, 83, 0, 0, 0, 0, 0, 0, 89, 142, 0, 0, 0, 0, 0, 21, 148, 16, 0, 0, 0, 0, 0, 106, 41, 0, 0, 0, 0, 0, 67, 128, 171, 134, 0, 0, 0, 0, 130, 128, 95, 109, 0, 0, 0, 0, 29, 27, 29, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 73, 65, 0, 0, 0, 0, 0, 31, 130, 13, 73, 16, 0, 0, 0, 69, 105, 102, 116, 68, 0, 0, 0, 117, 92, 96, 9, 66, 0, 0, 0, 77, 157, 70, 88, 14, 0, 0, 0, 2, 71, 108, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 8, 29, 0, 0, 0, 0, 0, 0, 103, 82, 0, 0, 0, 0, 0, 65, 87, 3, 0, 0, 0, 0, 22, 149, 30, 156, 43, 0, 0, 0, 130, 73, 136, 129, 23, 0, 0, 0, 139, 122, 170, 86, 0, 0, 0, 0, 51, 101, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 66, 45, 0, 0, 0, 0, 0, 32, 93, 15, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 32, 102, 0, 0, 0, 0, 0, 0, 52, 122, 80, 96, 3, 0, 0, 0, 32, 125, 40, 122, 26, 0, 0, 0, 0, 8, 51, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 17, 70, 0, 0, 0, 0, 0, 0, 114, 101, 0, 0, 0, 0, 0, 72, 86, 2, 1, 0, 0, 0, 46, 148, 41, 146, 50, 0, 0, 0, 146, 58, 214, 140, 2, 0, 0, 0, 173, 160, 143, 19, 0, 0, 0, 0, 34, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 21, 31, 0, 0, 0, 0, 0, 1, 147, 73, 0, 0, 0, 0, 20, 130, 54, 0, 0, 0, 0, 0, 144, 99, 5, 106, 86, 0, 0, 57, 108, 14, 150, 104, 91, 0, 0, 40, 164, 163, 176, 111, 7, 0, 0, 0, 7, 91, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 23, 30, 0, 0, 0, 0, 0, 0, 119, 115, 0, 0, 0, 0, 0, 40, 131, 13, 0, 0, 0, 0, 20, 157, 17, 57, 20, 0, 0, 0, 130, 67, 94, 155, 45, 0, 0, 0, 149, 55, 171, 112, 4, 0, 0, 0, 47, 111, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 6, 26, 0, 0, 0, 0, 0, 0, 77, 111, 0, 0, 0, 0, 1, 73, 107, 5, 0, 0, 0, 0, 61, 141, 7, 65, 34, 0, 0, 0, 146, 33, 144, 172, 47, 0, 0, 0, 131, 157, 155, 65, 0, 0, 0, 0, 0, 57, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 51, 135, 10, 0, 0, 0, 0, 10, 103, 3, 0, 0, 0, 0, 0, 75, 31, 0, 0, 0, 0, 0, 3, 97, 0, 0, 0, 0, 0, 0, 6, 112, 49, 2, 0, 0, 0, 0, 13, 79, 118, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 53, 29, 0, 0, 0, 0, 0, 8, 149, 28, 0, 0, 0, 0, 8, 135, 37, 0, 0, 0, 0, 0, 65, 140, 30, 127, 0, 0, 0, 0, 133, 66, 155, 159, 0, 0, 0, 0, 103, 161, 192, 47, 0, 0, 0, 0, 0, 22, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 33, 134, 0, 0, 0, 0, 0, 0, 79, 146, 9, 19, 0, 0, 0, 0, 91, 134, 139, 164, 20, 0, 0, 0, 67, 230, 66, 113, 39, 0, 0, 0, 23, 198, 73, 165, 1, 0, 0, 0, 0, 28, 104, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 54, 0, 0, 0, 0, 0, 0, 1, 129, 0, 0, 0, 0, 0, 0, 78, 56, 0, 0, 0, 0, 0, 5, 135, 4, 19, 0, 0, 0, 0, 79, 93, 110, 148, 0, 0, 0, 0, 92, 146, 156, 46, 0, 0, 0, 0, 0, 23, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 51, 75, 0, 0, 0, 0, 0, 8, 163, 95, 0, 0, 0, 0, 0, 107, 123, 0, 0, 0, 0, 0, 27, 199, 23, 55, 23, 0, 0, 0, 127, 127, 115, 243, 31, 0, 0, 0, 159, 163, 219, 127, 0, 0, 0, 0, 27, 63, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 1, 25, 0, 0, 0, 0, 0, 0, 74, 121, 0, 0, 0, 0, 0, 15, 149, 22, 0, 0, 0, 0, 0, 97, 90, 88, 0, 0, 0, 0, 39, 185, 141, 125, 0, 0, 0, 0, 83, 240, 141, 40, 0, 0, 0, 0, 2, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 32, 13, 0, 0, 0, 0, 0, 0, 156, 33, 0, 0, 0, 0, 0, 48, 101, 0, 0, 0, 0, 0, 0, 130, 20, 0, 0, 0, 0, 0, 9, 160, 81, 121, 0, 0, 0, 0, 5, 139, 189, 73, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 54, 45, 0, 0, 0, 0, 0, 7, 145, 27, 0, 0, 0, 0, 0, 111, 41, 0, 0, 0, 0, 0, 40, 149, 1, 45, 5, 0, 0, 0, 144, 67, 155, 210, 5, 0, 0, 0, 136, 172, 168, 62, 0, 0, 0, 0, 0, 27, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 60, 74, 0, 0, 0, 0, 123, 184, 94, 50, 0, 0, 1, 90, 179, 57, 0, 0, 0, 0, 98, 248, 171, 4, 0, 0, 0, 0, 168, 253, 114, 0, 0, 0, 0, 0, 124, 155, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 60, 46, 0, 0, 0, 0, 0, 0, 138, 58, 0, 0, 0, 0, 0, 21, 104, 0, 0, 0, 0, 0, 0, 95, 56, 16, 0, 0, 0, 0, 7, 157, 171, 150, 0, 0, 0, 0, 26, 205, 154, 88, 0, 0, 0, 0, 3, 49, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 14, 32, 0, 0, 0, 0, 0, 15, 164, 114, 0, 0, 0, 0, 29, 182, 50, 0, 0, 0, 0, 0, 118, 183, 98, 62, 0, 0, 0, 0, 198, 132, 37, 96, 56, 0, 0, 0, 181, 45, 35, 160, 30, 0, 0, 0, 15, 83, 118, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 35, 3, 0, 0, 0, 0, 0, 74, 165, 12, 0, 0, 0, 0, 8, 184, 26, 0, 0, 0, 0, 0, 41, 190, 40, 61, 6, 0, 0, 0, 98, 233, 158, 182, 85, 0, 0, 0, 95, 218, 131, 198, 39, 0, 0, 0, 2, 60, 83, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 1, 35, 0, 0, 0, 0, 0, 0, 44, 136, 0, 0, 0, 0, 0, 2, 152, 27, 0, 0, 0, 0, 0, 73, 98, 2, 0, 0, 0, 0, 40, 202, 203, 78, 0, 0, 0, 0, 98, 246, 158, 27, 0, 0, 0, 0, 17, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 33, 18, 0, 0, 0, 0, 0, 4, 175, 46, 0, 0, 0, 0, 3, 128, 80, 0, 0, 0, 0, 0, 66, 178, 3, 0, 0, 0, 0, 0, 158, 72, 98, 194, 18, 0, 0, 0, 96, 170, 232, 185, 7, 0, 0, 0, 1, 71, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 2, 32, 0, 0, 0, 0, 0, 0, 83, 171, 0, 0, 0, 0, 0, 21, 199, 50, 0, 0, 0, 0, 0, 121, 112, 0, 0, 0, 0, 0, 36, 220, 211, 86, 0, 0, 0, 0, 68, 250, 248, 92, 0, 0, 0, 0, 22, 114, 39, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 63, 7, 0, 0, 0, 0, 0, 49, 178, 9, 0, 0, 0, 0, 4, 190, 53, 0, 0, 0, 0, 0, 26, 150, 0, 42, 100, 46, 0, 0, 13, 176, 96, 146, 74, 149, 25, 0, 0, 132, 216, 134, 112, 147, 18, 0, 0, 0, 9, 50, 58, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 6, 40, 0, 0, 0, 0, 0, 0, 99, 166, 0, 0, 0, 0, 0, 52, 184, 25, 0, 0, 0, 0, 18, 182, 84, 0, 0, 0, 0, 0, 139, 151, 13, 96, 10, 0, 0, 0, 130, 183, 159, 158, 5, 0, 0, 0, 0, 12, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 34, 186, 6, 0, 0, 0, 0, 7, 185, 77, 0, 0, 0, 0, 0, 100, 111, 1, 0, 0, 0, 0, 68, 182, 176, 72, 0, 0, 0, 0, 137, 234, 216, 45, 0, 0, 0, 0, 47, 117, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 16, 10, 0, 0, 0, 0, 0, 0, 128, 60, 0, 0, 0, 0, 0, 22, 146, 4, 0, 0, 0, 0, 0, 90, 123, 14, 0, 0, 0, 0, 0, 152, 151, 106, 0, 0, 0, 0, 9, 151, 167, 48, 0, 0, 0, 0, 1, 81, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 61, 177, 0, 0, 0, 0, 0, 43, 164, 30, 0, 0, 0, 0, 2, 157, 135, 3, 0, 0, 0, 0, 100, 131, 140, 76, 0, 0, 0, 0, 99, 135, 174, 64, 0, 0, 0, 0, 1, 65, 68, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 9, 55, 0, 0, 0, 0, 0, 2, 121, 78, 0, 0, 0, 0, 0, 94, 64, 0, 0, 0, 0, 0, 2, 146, 1, 0, 0, 0, 0, 0, 50, 198, 150, 118, 0, 0, 0, 0, 36, 184, 113, 101, 0, 0, 0, 0, 0, 24, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 124, 103, 0, 0, 0, 37, 138, 72, 85, 44, 0, 0, 10, 144, 56, 25, 65, 4, 0, 0, 106, 87, 177, 98, 94, 141, 6, 0, 113, 52, 70, 1, 42, 123, 1, 0, 10, 127, 120, 124, 89, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 81, 152, 0, 0, 0, 0, 0, 43, 167, 22, 0, 0, 0, 0, 22, 173, 39, 0, 0, 0, 0, 0, 110, 170, 102, 28, 0, 0, 0, 0, 120, 245, 209, 120, 0, 0, 0, 0, 52, 91, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 48, 14, 0, 0, 0, 0, 0, 51, 166, 5, 0, 0, 0, 0, 33, 158, 33, 0, 0, 0, 0, 20, 161, 40, 0, 0, 0, 0, 0, 132, 130, 153, 166, 2, 0, 0, 0, 128, 222, 162, 118, 2, 0, 0, 0, 12, 51, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 6, 38, 0, 0, 0, 0, 0, 73, 175, 124, 0, 0, 0, 0, 45, 172, 50, 0, 0, 0, 0, 10, 159, 42, 0, 0, 0, 0, 0, 113, 231, 192, 157, 0, 0, 0, 0, 177, 172, 133, 110, 0, 0, 0, 0, 72, 122, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 12, 93, 8, 0, 0, 0, 0, 0, 131, 149, 3, 0, 0, 0, 0, 73, 113, 3, 0, 0, 0, 0, 30, 156, 18, 2, 0, 0, 0, 0, 156, 186, 146, 156, 0, 0, 0, 0, 166, 200, 144, 121, 0, 0, 0, 0, 24, 44, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 32, 2, 0, 0, 0, 0, 0, 82, 147, 2, 0, 0, 0, 0, 27, 142, 9, 0, 0, 0, 0, 1, 122, 33, 0, 0, 0, 0, 0, 69, 211, 166, 115, 0, 0, 0, 0, 130, 156, 94, 113, 0, 0, 0, 0, 28, 110, 63, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 40, 111, 0, 0, 0, 0, 0, 0, 126, 24, 2, 0, 0, 0, 0, 14, 160, 142, 89, 0, 0, 0, 0, 40, 136, 56, 144, 0, 0, 0, 0, 35, 150, 162, 84, 0, 0, 0, 0, 0, 59, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 140, 68, 0, 0, 0, 0, 35, 164, 48, 0, 0, 0, 0, 13, 152, 37, 0, 0, 0, 0, 0, 119, 211, 41, 0, 0, 0, 0, 0, 149, 125, 138, 0, 0, 0, 0, 0, 43, 150, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 30, 51, 0, 0, 0, 0, 0, 3, 152, 51, 0, 0, 0, 0, 0, 86, 74, 0, 0, 0, 0, 0, 5, 145, 32, 5, 0, 0, 0, 0, 39, 208, 193, 79, 0, 0, 0, 0, 42, 205, 136, 37, 0, 0, 0, 0, 8, 54, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 26, 5, 0, 0, 0, 0, 0, 46, 144, 31, 0, 0, 0, 0, 0, 139, 1, 0, 0, 0, 0, 0, 8, 154, 12, 0, 0, 0, 0, 0, 24, 185, 134, 88, 0, 0, 0, 0, 0, 135, 95, 135, 0, 0, 0, 0, 0, 14, 108, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 48, 135, 135, 89, 0, 0, 6, 175, 227, 103, 73, 124, 0, 0, 84, 233, 82, 18, 28, 5, 0, 0, 147, 173, 28, 231, 253, 136, 0, 0, 110, 239, 149, 224, 249, 131, 0, 0, 2, 85, 133, 109, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 1, 35, 0, 0, 0, 0, 0, 0, 56, 49, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 8, 78, 58, 45, 0, 0, 0, 0, 36, 152, 30, 75, 18, 0, 0, 0, 8, 92, 3, 82, 8, 0, 0, 0, 0, 36, 75, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 3, 29, 0, 0, 0, 0, 0, 14, 124, 97, 0, 0, 0, 0, 39, 147, 65, 0, 0, 0, 0, 28, 153, 27, 0, 0, 0, 0, 0, 139, 80, 60, 1, 0, 0, 0, 0, 146, 154, 179, 30, 0, 0, 0, 0, 45, 103, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 15, 38, 0, 0, 0, 0, 0, 94, 196, 113, 0, 0, 0, 64, 156, 101, 56, 0, 0, 0, 4, 186, 62, 0, 0, 0, 0, 0, 40, 140, 21, 153, 153, 7, 0, 0, 6, 188, 153, 67, 119, 40, 0, 0, 0, 80, 106, 83, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 9, 47, 0, 0, 0, 0, 0, 11, 158, 158, 0, 0, 0, 0, 17, 169, 61, 0, 0, 0, 0, 0, 102, 166, 11, 70, 4, 0, 0, 0, 148, 90, 165, 205, 16, 0, 0, 0, 129, 198, 114, 169, 0, 0, 0, 0, 27, 118, 103, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 19, 70, 28, 0, 0, 0, 0, 4, 122, 68, 4, 0, 0, 0, 0, 86, 45, 0, 25, 37, 0, 0, 0, 124, 34, 62, 93, 100, 75, 0, 0, 31, 135, 107, 35, 1, 119, 0, 0, 0, 91, 165, 185, 174, 146, 5, 0, 0, 0, 4, 49, 57, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 1, 7, 0, 0, 0, 0, 0, 0, 89, 85, 0, 0, 0, 0, 0, 136, 109, 2, 1, 0, 0, 0, 35, 136, 9, 113, 144, 121, 43, 0, 37, 158, 165, 74, 27, 125, 89, 0, 3, 151, 199, 160, 159, 87, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 17, 16, 0, 0, 0, 0, 0, 0, 140, 101, 0, 0, 0, 0, 0, 42, 164, 11, 0, 0, 0, 0, 0, 131, 158, 62, 0, 0, 0, 0, 41, 230, 217, 151, 0, 0, 0, 0, 68, 252, 204, 47, 0, 0, 0, 0, 21, 108, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 9, 99, 11, 0, 0, 0, 0, 20, 147, 102, 6, 0, 0, 0, 0, 143, 82, 0, 0, 0, 0, 0, 0, 132, 14, 108, 151, 94, 3, 0, 0, 128, 146, 77, 36, 143, 18, 0, 0, 147, 223, 147, 177, 86, 0, 0, 0, 1, 31, 38, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 19, 121, 80, 0, 0, 0, 0, 19, 155, 51, 0, 16, 12, 0, 0, 84, 44, 4, 113, 137, 119, 15, 0, 116, 122, 138, 72, 53, 158, 29, 0, 28, 136, 184, 180, 156, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 49, 32, 0, 0, 0, 0, 0, 78, 159, 35, 0, 0, 0, 0, 155, 142, 2, 2, 1, 0, 0, 35, 157, 9, 24, 143, 154, 46, 0, 63, 124, 28, 198, 83, 178, 94, 0, 48, 214, 204, 235, 171, 102, 10, 0, 0, 0, 21, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 8, 64, 0, 0, 0, 0, 0, 0, 101, 82, 0, 0, 0, 0, 0, 97, 87, 0, 0, 0, 0, 0, 0, 136, 5, 72, 128, 75, 0, 0, 22, 116, 101, 139, 78, 141, 0, 0, 6, 172, 228, 187, 152, 42, 0, 0, 0, 9, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 24, 21, 0, 0, 0, 0, 0, 55, 181, 104, 0, 0, 0, 0, 78, 102, 1, 0, 0, 0, 0, 2, 140, 11, 80, 141, 45, 0, 0, 11, 138, 89, 78, 22, 107, 0, 0, 2, 151, 179, 39, 105, 35, 0, 0, 0, 27, 106, 115, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 38, 51, 0, 0, 0, 0, 0, 0, 144, 63, 0, 0, 0, 0, 0, 40, 198, 0, 0, 0, 0, 0, 0, 83, 199, 59, 84, 1, 0, 0, 0, 62, 235, 190, 180, 50, 0, 0, 0, 5, 150, 184, 180, 23, 0, 0, 0, 0, 0, 51, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 11, 23, 0, 0, 0, 0, 0, 7, 154, 137, 0, 0, 0, 0, 10, 160, 99, 42, 0, 0, 0, 0, 78, 165, 67, 36, 0, 0, 0, 0, 150, 208, 110, 185, 5, 0, 0, 0, 125, 172, 48, 163, 3, 0, 0, 0, 8, 76, 113, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 8, 0, 0, 24, 0, 0, 0, 0, 8, 0, 44, 158, 6, 0, 0, 0, 0, 56, 189, 27, 0, 0, 0, 0, 5, 184, 91, 80, 156, 163, 47, 0, 31, 129, 120, 89, 31, 115, 64, 0, 14, 178, 212, 109, 105, 73, 2, 0, 0, 14, 83, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 9, 17, 0, 0, 0, 0, 0, 1, 96, 104, 0, 0, 0, 0, 0, 94, 212, 14, 43, 66, 0, 0, 0, 168, 95, 94, 196, 206, 24, 0, 2, 232, 202, 146, 179, 78, 0, 0, 1, 213, 249, 178, 100, 0, 0, 0, 0, 36, 95, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 55, 31, 0, 0, 0, 0, 0, 31, 167, 65, 0, 0, 0, 0, 0, 121, 116, 0, 0, 0, 0, 0, 0, 128, 97, 15, 73, 15, 0, 0, 0, 94, 165, 154, 82, 124, 0, 0, 0, 16, 171, 155, 129, 65, 0, 0, 0, 0, 5, 62, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 34, 0, 0, 0, 0, 0, 43, 109, 5, 0, 0, 0, 0, 2, 102, 15, 46, 116, 88, 11, 0, 94, 32, 89, 78, 49, 72, 9, 0, 49, 106, 137, 83, 72, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 2, 70, 0, 0, 0, 0, 0, 0, 48, 103, 0, 0, 0, 0, 0, 0, 141, 20, 0, 0, 0, 0, 0, 9, 149, 0, 0, 0, 0, 0, 0, 71, 179, 108, 170, 35, 0, 0, 0, 69, 172, 62, 135, 19, 0, 0, 0, 0, 34, 39, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 3, 81, 0, 0, 0, 0, 0, 0, 54, 105, 0, 0, 0, 0, 0, 0, 133, 6, 0, 0, 0, 0, 0, 7, 146, 5, 0, 0, 0, 0, 0, 21, 168, 121, 159, 0, 0, 0, 0, 4, 153, 110, 161, 0, 0, 0, 0, 0, 13, 36, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 79, 87, 0, 0, 0, 0, 4, 147, 95, 0, 0, 0, 0, 0, 43, 103, 0, 91, 147, 155, 47, 0, 51, 139, 119, 107, 71, 115, 67, 0, 15, 159, 215, 139, 139, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 74, 103, 0, 24, 58, 6, 0, 17, 133, 10, 84, 121, 142, 39, 0, 91, 113, 82, 130, 66, 98, 14, 0, 22, 118, 151, 125, 93, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 19, 60, 0, 0, 0, 0, 0, 0, 88, 32, 0, 0, 0, 0, 0, 22, 69, 0, 0, 0, 0, 0, 0, 47, 70, 0, 0, 0, 0, 0, 0, 36, 74, 142, 91, 0, 0, 0, 0, 11, 109, 128, 103, 0, 0, 0, 0, 0, 13, 49, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 51, 7, 0, 0, 0, 0, 8, 106, 144, 10, 0, 0, 0, 11, 141, 75, 0, 7, 6, 0, 0, 87, 65, 3, 120, 154, 139, 27, 0, 97, 113, 144, 63, 9, 140, 61, 0, 21, 176, 235, 178, 170, 121, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 133, 101, 8, 0, 0, 0, 0, 114, 132, 27, 4, 0, 0, 0, 0, 164, 197, 181, 151, 1, 0, 0, 21, 202, 53, 38, 203, 51, 0, 0, 0, 108, 127, 88, 194, 2, 0, 0, 0, 13, 118, 147, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 62, 16, 0, 0, 0, 0, 0, 11, 105, 2, 0, 0, 0, 0, 0, 100, 13, 0, 0, 0, 0, 0, 34, 109, 3, 4, 0, 0, 0, 0, 108, 115, 121, 138, 0, 0, 0, 0, 92, 184, 83, 116, 0, 0, 0, 0, 2, 43, 37, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 79, 19, 0, 0, 0, 0, 4, 99, 159, 19, 0, 0, 0, 0, 151, 135, 0, 0, 0, 0, 0, 23, 159, 31, 67, 91, 51, 4, 0, 103, 83, 171, 103, 71, 207, 47, 0, 47, 231, 219, 159, 179, 127, 15, 0, 0, 39, 51, 32, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 7, 74, 0, 0, 0, 0, 0, 0, 77, 143, 0, 0, 0, 0, 0, 94, 183, 13, 1, 0, 0, 0, 0, 174, 53, 137, 164, 75, 2, 0, 9, 135, 123, 82, 28, 177, 59, 0, 0, 192, 221, 169, 191, 154, 25, 0, 0, 14, 60, 39, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 9, 37, 0, 0, 0, 0, 0, 0, 100, 99, 0, 0, 0, 0, 0, 96, 156, 0, 0, 0, 0, 0, 0, 166, 81, 2, 114, 14, 0, 0, 0, 152, 75, 118, 234, 29, 0, 0, 0, 60, 153, 221, 139, 2, 0, 0, 0, 0, 0, 65, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 61, 4, 0, 0, 0, 0, 0, 18, 85, 4, 0, 0, 0, 0, 0, 88, 2, 0, 0, 0, 0, 0, 0, 78, 43, 32, 0, 0, 0, 0, 2, 115, 66, 80, 0, 0, 0, 0, 70, 133, 100, 47, 0, 0, 0, 0, 23, 9, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 15, 6, 0, 0, 0, 0, 0, 0, 115, 14, 0, 0, 0, 0, 0, 85, 125, 0, 80, 113, 0, 0, 0, 155, 34, 28, 140, 115, 0, 0, 33, 124, 0, 109, 199, 29, 0, 0, 34, 127, 20, 177, 131, 0, 0, 0, 0, 89, 126, 67, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 91, 27, 0, 0, 0, 0, 0, 17, 120, 20, 0, 0, 0, 0, 0, 97, 9, 0, 0, 0, 0, 0, 0, 131, 0, 0, 0, 0, 0, 0, 23, 128, 117, 75, 0, 0, 0, 0, 14, 180, 153, 85, 0, 0, 0, 0, 0, 21, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 12, 73, 0, 0, 0, 0, 0, 0, 92, 109, 0, 0, 0, 0, 0, 64, 166, 2, 0, 0, 0, 0, 0, 140, 89, 39, 57, 0, 0, 0, 0, 149, 22, 176, 190, 46, 0, 0, 0, 151, 114, 173, 137, 28, 0, 0, 0, 3, 47, 54, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 59, 63, 0, 0, 0, 0, 0, 45, 200, 81, 0, 0, 0, 0, 44, 180, 20, 0, 0, 0, 0, 0, 148, 117, 67, 123, 11, 0, 0, 0, 184, 152, 139, 171, 87, 0, 0, 0, 124, 228, 144, 168, 33, 0, 0, 0, 0, 26, 49, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 33, 44, 0, 0, 0, 0, 0, 15, 169, 100, 0, 0, 0, 0, 0, 116, 161, 0, 0, 0, 0, 0, 0, 146, 124, 79, 102, 13, 0, 0, 0, 114, 232, 193, 85, 124, 0, 0, 0, 31, 200, 205, 124, 60, 0, 0, 0, 0, 3, 57, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 35, 17, 0, 0, 0, 0, 0, 0, 195, 86, 0, 0, 0, 0, 0, 89, 158, 8, 0, 0, 0, 0, 17, 190, 152, 73, 0, 0, 0, 0, 113, 250, 251, 128, 0, 0, 0, 0, 144, 252, 171, 26, 0, 0, 0, 0, 42, 108, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 2, 0, 38, 71, 0, 0, 0, 0, 0, 12, 151, 86, 0, 0, 0, 0, 9, 148, 35, 0, 0, 0, 0, 0, 71, 151, 71, 83, 0, 0, 0, 0, 127, 147, 146, 169, 24, 0, 0, 0, 83, 175, 175, 145, 3, 0, 0, 0, 0, 31, 37, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 2, 72, 0, 0, 0, 0, 0, 0, 54, 148, 0, 0, 0, 0, 0, 0, 142, 28, 0, 0, 0, 0, 0, 33, 163, 13, 8, 0, 0, 0, 0, 114, 179, 179, 194, 0, 0, 0, 0, 109, 233, 121, 152, 0, 0, 0, 0, 1, 34, 50, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 99, 31, 0, 0, 0, 0, 0, 21, 198, 30, 0, 0, 0, 0, 0, 136, 31, 0, 0, 0, 0, 0, 42, 157, 16, 33, 0, 0, 0, 0, 132, 180, 124, 186, 31, 0, 0, 0, 145, 193, 118, 118, 14, 0, 0, 0, 12, 58, 53, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 12, 29, 0, 0, 0, 0, 0, 0, 85, 104, 0, 0, 0, 0, 0, 0, 142, 69, 0, 25, 3, 0, 0, 0, 139, 59, 102, 137, 73, 0, 0, 0, 142, 129, 89, 45, 69, 0, 0, 0, 98, 213, 49, 136, 9, 0, 0, 0, 1, 72, 97, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 15, 31, 0, 0, 0, 0, 0, 0, 122, 112, 0, 0, 0, 0, 0, 41, 173, 17, 0, 0, 0, 0, 0, 133, 94, 0, 0, 0, 0, 0, 43, 187, 153, 63, 0, 0, 0, 0, 55, 187, 153, 79, 0, 0, 0, 0, 2, 85, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 67, 43, 0, 0, 0, 0, 0, 13, 158, 26, 0, 0, 0, 0, 2, 133, 34, 0, 0, 0, 0, 0, 49, 144, 35, 11, 0, 0, 0, 0, 131, 207, 188, 143, 0, 0, 0, 0, 102, 228, 137, 123, 0, 0, 0, 0, 2, 42, 49, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 32, 35, 0, 0, 0, 0, 0, 26, 124, 81, 0, 0, 0, 0, 18, 138, 3, 0, 0, 0, 0, 0, 74, 99, 3, 0, 0, 0, 0, 0, 146, 143, 98, 119, 3, 0, 0, 0, 119, 80, 23, 128, 8, 0, 0, 0, 15, 91, 90, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 120, 0, 0, 0, 0, 0, 15, 202, 81, 0, 0, 0, 0, 0, 83, 122, 20, 160, 158, 46, 0, 0, 67, 142, 114, 87, 12, 166, 26, 0, 5, 160, 216, 174, 182, 143, 12, 0, 0, 0, 10, 47, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 1, 45, 38, 0, 0, 0, 0, 6, 117, 150, 80, 0, 0, 0, 0, 121, 133, 0, 0, 0, 0, 0, 0, 167, 55, 49, 91, 27, 0, 0, 0, 170, 186, 109, 111, 155, 0, 0, 0, 90, 236, 104, 146, 56, 0, 0, 0, 0, 38, 113, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 20, 60, 0, 0, 0, 0, 0, 51, 163, 130, 5, 0, 0, 0, 74, 195, 21, 0, 0, 0, 0, 0, 182, 140, 100, 100, 6, 0, 0, 9, 239, 129, 60, 126, 97, 0, 0, 1, 193, 150, 53, 124, 73, 0, 0, 0, 8, 64, 116, 77, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 39, 32, 0, 0, 0, 0, 0, 51, 192, 77, 0, 0, 0, 0, 54, 208, 52, 49, 8, 0, 0, 0, 149, 149, 171, 186, 108, 0, 0, 0, 210, 131, 157, 24, 144, 0, 0, 0, 187, 155, 119, 160, 64, 0, 0, 0, 31, 112, 110, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 8, 18, 0, 0, 0, 0, 0, 24, 116, 32, 0, 0, 0, 0, 15, 171, 51, 0, 0, 0, 0, 0, 118, 122, 0, 0, 0, 0, 0, 77, 188, 190, 78, 0, 0, 0, 0, 114, 150, 167, 36, 0, 0, 0, 0, 21, 106, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 26, 122, 71, 0, 0, 0, 0, 47, 145, 35, 0, 0, 0, 0, 32, 190, 115, 20, 0, 0, 0, 5, 158, 60, 107, 191, 0, 0, 0, 21, 139, 28, 140, 115, 0, 0, 0, 7, 110, 56, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 71, 49, 0, 0, 0, 0, 0, 45, 127, 19, 0, 0, 0, 0, 30, 168, 4, 0, 0, 0, 0, 0, 118, 109, 0, 0, 0, 0, 0, 0, 148, 94, 103, 140, 37, 0, 0, 0, 92, 180, 82, 126, 22, 0, 0, 0, 0, 6, 52, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 51, 26, 0, 0, 0, 0, 0, 23, 137, 13, 0, 0, 0, 0, 21, 160, 17, 0, 0, 0, 0, 0, 116, 118, 66, 121, 22, 0, 0, 2, 184, 102, 72, 31, 106, 0, 0, 0, 104, 164, 182, 132, 28, 0, 0, 0, 0, 0, 53, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 38, 69, 0, 0, 0, 0, 0, 0, 111, 1, 0, 0, 0, 0, 0, 12, 123, 5, 6, 0, 0, 0, 0, 53, 149, 145, 110, 0, 0, 0, 0, 17, 173, 118, 105, 0, 0, 0, 0, 0, 24, 40, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 43, 65, 0, 0, 0, 0, 0, 46, 143, 52, 0, 0, 0, 0, 103, 141, 5, 0, 0, 0, 0, 0, 150, 15, 0, 0, 0, 0, 0, 0, 144, 102, 101, 135, 43, 0, 0, 0, 67, 200, 72, 111, 41, 0, 0, 0, 0, 11, 61, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 25, 62, 0, 0, 0, 0, 0, 4, 133, 49, 0, 0, 0, 0, 1, 126, 55, 0, 0, 0, 0, 0, 30, 166, 74, 62, 0, 0, 0, 0, 106, 238, 46, 115, 0, 0, 0, 0, 66, 198, 141, 120, 0, 0, 0, 0, 0, 22, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 80, 84, 35, 0, 0, 0, 27, 100, 2, 0, 0, 0, 0, 0, 53, 68, 0, 0, 0, 0, 0, 0, 1, 161, 121, 89, 58, 121, 62, 0, 0, 131, 120, 103, 89, 116, 56, 0, 0, 0, 0, 8, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 3, 95, 6, 0, 0, 0, 0, 0, 19, 205, 22, 0, 0, 0, 0, 16, 152, 101, 0, 0, 0, 0, 0, 96, 233, 16, 0, 0, 0, 0, 0, 167, 197, 93, 86, 10, 0, 0, 0, 226, 251, 253, 251, 82, 0, 0, 0, 0, 30, 63, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 19, 35, 0, 0, 0, 0, 0, 0, 104, 24, 0, 0, 0, 0, 0, 46, 100, 0, 0, 0, 0, 0, 0, 76, 74, 104, 162, 12, 0, 0, 0, 69, 171, 118, 47, 53, 0, 0, 0, 24, 210, 67, 115, 12, 0, 0, 0, 0, 10, 56, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 15, 91, 0, 0, 0, 0, 9, 0, 135, 172, 0, 0, 0, 0, 4, 115, 157, 15, 0, 0, 0, 0, 69, 217, 34, 0, 0, 0, 0, 0, 161, 191, 133, 111, 10, 0, 0, 0, 145, 251, 252, 241, 29, 0, 0, 0, 3, 44, 56, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 39, 15, 0, 0, 0, 0, 0, 33, 189, 41, 0, 0, 0, 0, 11, 158, 18, 0, 0, 0, 0, 0, 65, 168, 0, 0, 0, 0, 0, 0, 85, 227, 152, 83, 0, 0, 0, 0, 29, 185, 100, 151, 0, 0, 0, 0, 0, 31, 109, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 60, 61, 0, 0, 0, 0, 0, 2, 83, 0, 0, 0, 0, 0, 0, 38, 103, 10, 71, 1, 0, 0, 0, 27, 93, 114, 86, 19, 0, 0, 0, 3, 101, 86, 70, 2, 0, 0, 0, 0, 28, 89, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 12, 95, 0, 0, 0, 0, 0, 2, 152, 171, 0, 0, 0, 0, 26, 168, 114, 13, 0, 0, 0, 0, 127, 181, 3, 0, 0, 0, 0, 0, 209, 148, 165, 166, 41, 0, 0, 0, 191, 243, 198, 225, 40, 0, 0, 0, 23, 63, 63, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 74, 21, 0, 0, 0, 0, 0, 20, 129, 7, 0, 0, 0, 0, 3, 133, 33, 0, 0, 0, 0, 0, 57, 178, 0, 0, 0, 0, 0, 0, 116, 157, 135, 108, 0, 0, 0, 0, 94, 248, 235, 175, 0, 0, 0, 0, 1, 42, 26, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 10, 26, 0, 0, 0, 0, 0, 0, 98, 81, 0, 0, 0, 0, 0, 43, 93, 0, 0, 0, 0, 0, 0, 126, 20, 0, 0, 0, 0, 0, 38, 156, 122, 16, 0, 0, 0, 0, 48, 130, 130, 17, 0, 0, 0, 0, 2, 83, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 34, 14, 0, 0, 0, 0, 0, 32, 187, 46, 0, 0, 0, 0, 0, 147, 45, 0, 0, 0, 0, 0, 7, 180, 1, 0, 0, 0, 0, 0, 9, 197, 134, 13, 0, 0, 0, 0, 5, 171, 249, 86, 0, 0, 0, 0, 0, 21, 111, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 6, 51, 0, 0, 0, 0, 0, 0, 125, 164, 1, 0, 0, 0, 0, 94, 95, 0, 0, 0, 0, 0, 33, 171, 6, 0, 0, 0, 0, 0, 139, 207, 184, 184, 0, 0, 0, 0, 155, 214, 165, 108, 0, 0, 0, 0, 54, 121, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 17, 23, 0, 0, 0, 0, 0, 0, 128, 73, 0, 0, 0, 0, 0, 20, 193, 15, 0, 0, 0, 0, 0, 84, 127, 5, 0, 0, 0, 0, 31, 203, 149, 162, 0, 0, 0, 0, 77, 215, 140, 101, 0, 0, 0, 0, 15, 77, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 72, 143, 85, 0, 0, 0, 0, 95, 127, 0, 0, 0, 0, 0, 0, 127, 65, 0, 0, 0, 0, 0, 0, 116, 166, 150, 83, 0, 0, 0, 0, 53, 171, 3, 118, 0, 0, 0, 0, 0, 30, 127, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 76, 24, 0, 0, 0, 0, 0, 8, 165, 20, 0, 0, 0, 0, 7, 133, 87, 0, 0, 0, 0, 0, 74, 201, 29, 12, 0, 0, 0, 0, 166, 228, 132, 158, 37, 0, 0, 0, 157, 202, 90, 141, 27, 0, 0, 0, 1, 37, 45, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 5, 0, 0, 0, 0, 0, 7, 113, 5, 0, 0, 0, 0, 0, 76, 37, 0, 44, 71, 78, 12, 0, 70, 35, 0, 81, 5, 102, 39, 0, 8, 62, 69, 95, 62, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 21, 115, 67, 0, 0, 0, 0, 53, 165, 129, 92, 0, 0, 0, 5, 185, 52, 0, 0, 0, 0, 0, 43, 139, 1, 58, 58, 1, 0, 0, 61, 121, 121, 115, 144, 137, 1, 0, 11, 181, 216, 117, 120, 136, 1, 0, 0, 6, 46, 63, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 26, 35, 0, 0, 0, 0, 0, 4, 152, 59, 0, 0, 0, 0, 0, 129, 66, 0, 0, 0, 0, 0, 43, 226, 59, 17, 0, 0, 0, 0, 123, 183, 95, 196, 0, 0, 0, 0, 116, 172, 125, 159, 0, 0, 0, 0, 11, 92, 77, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 15, 49, 1, 0, 0, 0, 0, 17, 154, 126, 3, 0, 0, 0, 0, 115, 142, 6, 0, 0, 0, 0, 0, 153, 202, 189, 86, 0, 0, 0, 0, 129, 139, 49, 173, 9, 0, 0, 0, 64, 206, 78, 158, 17, 0, 0, 0, 0, 39, 119, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 20, 62, 0, 0, 0, 0, 0, 42, 137, 39, 0, 0, 0, 0, 0, 125, 24, 0, 0, 0, 0, 0, 11, 122, 0, 0, 0, 0, 0, 0, 13, 162, 120, 116, 66, 122, 45, 0, 0, 67, 187, 108, 76, 144, 80, 0, 0, 0, 0, 32, 58, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 8, 35, 0, 0, 0, 0, 0, 1, 129, 131, 0, 0, 0, 0, 0, 102, 138, 6, 0, 0, 0, 0, 28, 192, 30, 0, 0, 0, 0, 0, 66, 194, 62, 94, 26, 0, 0, 0, 50, 231, 217, 206, 53, 0, 0, 0, 46, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 27, 32, 0, 0, 0, 0, 0, 15, 168, 65, 0, 0, 0, 0, 4, 157, 69, 0, 0, 0, 0, 0, 49, 192, 7, 0, 0, 0, 0, 0, 131, 115, 10, 57, 110, 27, 0, 0, 110, 185, 191, 210, 120, 23, 0, 0, 9, 79, 22, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 112, 135, 1, 0, 0, 0, 0, 37, 141, 1, 0, 0, 0, 0, 0, 63, 117, 0, 44, 107, 148, 62, 0, 45, 170, 158, 117, 53, 122, 115, 0, 2, 155, 228, 119, 138, 133, 30, 0, 0, 0, 14, 35, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 28, 24, 0, 0, 0, 0, 0, 48, 210, 128, 0, 0, 0, 0, 86, 205, 69, 51, 0, 0, 0, 2, 210, 184, 155, 164, 43, 0, 0, 50, 252, 213, 31, 69, 179, 0, 0, 35, 242, 132, 103, 175, 102, 0, 0, 0, 119, 126, 102, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 81, 48, 0, 0, 0, 0, 3, 48, 180, 35, 0, 0, 0, 0, 11, 190, 62, 0, 0, 0, 0, 0, 72, 212, 5, 0, 0, 0, 0, 0, 102, 189, 110, 120, 1, 0, 0, 0, 64, 223, 249, 228, 3, 0, 0, 0, 0, 30, 60, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 70, 17, 0, 0, 0, 0, 0, 8, 176, 27, 0, 0, 0, 0, 3, 133, 80, 0, 0, 0, 0, 0, 49, 197, 20, 5, 0, 0, 0, 0, 131, 221, 154, 183, 0, 0, 0, 0, 121, 179, 158, 136, 0, 0, 0, 0, 6, 53, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 34, 15, 0, 0, 0, 0, 0, 16, 152, 20, 0, 0, 0, 0, 0, 123, 60, 0, 0, 0, 0, 0, 17, 183, 52, 1, 0, 0, 0, 0, 6, 171, 98, 129, 0, 0, 0, 0, 1, 155, 134, 143, 0, 0, 0, 0, 0, 48, 112, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 11, 61, 0, 0, 0, 0, 0, 0, 137, 101, 0, 0, 0, 0, 33, 150, 55, 0, 0, 0, 0, 0, 160, 84, 57, 139, 104, 1, 0, 58, 111, 81, 153, 118, 109, 1, 0, 30, 182, 223, 179, 124, 8, 0, 0, 0, 7, 53, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 36, 17, 0, 0, 0, 0, 0, 17, 182, 41, 0, 0, 0, 0, 2, 132, 35, 0, 0, 0, 0, 0, 31, 156, 50, 129, 0, 0, 0, 0, 77, 130, 196, 184, 0, 0, 0, 0, 53, 154, 194, 124, 0, 0, 0, 0, 1, 69, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 51, 37, 0, 0, 0, 0, 0, 23, 115, 17, 0, 0, 0, 0, 42, 136, 5, 0, 0, 0, 0, 0, 145, 44, 1, 46, 56, 1, 0, 58, 72, 10, 134, 109, 129, 8, 0, 26, 148, 166, 162, 111, 31, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 27, 4, 0, 0, 0, 0, 0, 15, 140, 7, 0, 0, 0, 0, 23, 159, 23, 1, 0, 0, 0, 0, 143, 109, 16, 129, 94, 0, 0, 2, 150, 5, 183, 219, 45, 0, 0, 11, 186, 149, 175, 59, 0, 0, 0, 0, 11, 54, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 56, 10, 0, 0, 0, 0, 0, 9, 155, 11, 0, 0, 0, 0, 0, 71, 86, 0, 58, 147, 103, 2, 0, 117, 35, 0, 188, 127, 193, 47, 0, 126, 45, 2, 177, 84, 190, 29, 0, 53, 196, 173, 230, 201, 67, 0, 0, 0, 4, 29, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 7, 67, 0, 0, 0, 0, 0, 0, 75, 69, 0, 0, 0, 0, 0, 20, 128, 0, 0, 0, 0, 0, 0, 99, 94, 8, 69, 23, 0, 0, 0, 146, 20, 187, 208, 21, 0, 0, 0, 156, 70, 202, 56, 0, 0, 0, 0, 20, 43, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 57, 104, 0, 0, 0, 0, 0, 56, 112, 5, 0, 0, 0, 0, 48, 141, 30, 88, 5, 0, 0, 0, 124, 75, 155, 170, 4, 0, 0, 0, 135, 184, 136, 51, 0, 0, 0, 0, 3, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 90, 106, 0, 0, 0, 0, 5, 111, 65, 0, 0, 0, 0, 0, 76, 148, 30, 76, 47, 0, 0, 0, 123, 93, 134, 99, 100, 0, 0, 0, 141, 171, 122, 111, 8, 0, 0, 0, 44, 93, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 6, 27, 0, 0, 0, 0, 0, 0, 100, 172, 0, 0, 0, 0, 0, 46, 185, 34, 0, 0, 0, 0, 11, 168, 135, 67, 0, 0, 0, 0, 135, 235, 247, 129, 0, 0, 0, 0, 213, 213, 187, 36, 0, 0, 0, 0, 105, 90, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 116, 41, 0, 0, 0, 0, 0, 151, 57, 0, 0, 0, 0, 0, 53, 132, 15, 0, 0, 0, 0, 15, 129, 108, 26, 0, 0, 0, 0, 90, 105, 151, 56, 0, 0, 0, 0, 56, 133, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 1, 23, 0, 0, 0, 0, 0, 0, 107, 93, 0, 0, 0, 0, 0, 70, 72, 0, 0, 0, 0, 0, 17, 170, 92, 39, 0, 0, 0, 0, 106, 129, 33, 127, 0, 0, 0, 0, 116, 92, 51, 113, 0, 0, 0, 0, 19, 97, 85, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 12, 15, 0, 0, 0, 0, 0, 1, 126, 51, 0, 0, 0, 0, 0, 71, 113, 0, 0, 0, 0, 0, 0, 127, 54, 0, 0, 0, 0, 0, 0, 153, 162, 30, 0, 0, 0, 0, 0, 150, 194, 55, 0, 0, 0, 0, 0, 52, 90, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 17, 46, 0, 0, 0, 0, 0, 0, 108, 26, 0, 0, 0, 0, 0, 51, 105, 1, 0, 0, 0, 0, 0, 94, 66, 105, 93, 0, 0, 0, 0, 101, 84, 4, 89, 28, 0, 0, 0, 96, 119, 85, 127, 7, 0, 0, 0, 1, 37, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 27, 38, 0, 0, 0, 0, 0, 8, 116, 17, 0, 0, 0, 0, 0, 98, 109, 0, 0, 0, 0, 0, 0, 123, 80, 21, 92, 18, 0, 0, 0, 109, 81, 130, 79, 108, 0, 0, 0, 47, 145, 165, 126, 48, 0, 0, 0, 0, 10, 47, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 15, 62, 0, 0, 0, 0, 0, 0, 128, 78, 0, 0, 0, 0, 14, 136, 51, 38, 16, 0, 0, 0, 117, 100, 81, 126, 98, 0, 0, 3, 141, 61, 91, 70, 70, 0, 0, 2, 157, 185, 144, 127, 5, 0, 0, 0, 10, 51, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 53, 29, 0, 0, 0, 0, 0, 48, 111, 14, 0, 0, 0, 0, 106, 112, 0, 2, 8, 0, 0, 10, 141, 7, 33, 118, 120, 6, 0, 55, 74, 74, 111, 48, 101, 0, 0, 14, 174, 203, 110, 118, 14, 0, 0, 0, 37, 37, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 2, 87, 18, 0, 0, 0, 0, 0, 69, 196, 11, 0, 0, 0, 0, 0, 189, 89, 0, 0, 0, 0, 0, 3, 204, 35, 61, 113, 47, 0, 0, 11, 206, 82, 237, 206, 202, 17, 0, 0, 148, 238, 252, 247, 132, 4, 0, 0, 0, 19, 52, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 32, 79, 0, 0, 0, 0, 0, 36, 183, 107, 0, 0, 0, 0, 2, 198, 108, 0, 0, 0, 0, 0, 8, 197, 15, 24, 85, 89, 22, 0, 23, 204, 28, 226, 184, 214, 67, 0, 4, 186, 199, 246, 218, 122, 1, 0, 0, 1, 40, 63, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 19, 56, 0, 0, 0, 0, 0, 2, 131, 92, 0, 0, 0, 0, 0, 122, 189, 1, 0, 0, 0, 0, 0, 200, 85, 6, 3, 0, 0, 0, 0, 203, 151, 227, 202, 60, 0, 0, 0, 159, 247, 211, 192, 83, 0, 0, 0, 0, 25, 63, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 17, 7, 0, 0, 0, 0, 0, 5, 147, 38, 0, 0, 0, 0, 0, 55, 210, 2, 32, 0, 0, 0, 0, 105, 187, 109, 221, 5, 0, 0, 0, 133, 221, 250, 200, 0, 0, 0, 0, 105, 252, 239, 95, 0, 0, 0, 0, 9, 76, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 35, 17, 0, 0, 0, 0, 0, 14, 178, 38, 0, 0, 0, 0, 11, 163, 74, 0, 0, 0, 0, 0, 96, 186, 97, 134, 40, 0, 0, 0, 203, 164, 153, 87, 88, 0, 0, 0, 175, 242, 165, 163, 17, 0, 0, 0, 16, 101, 86, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 12, 76, 0, 0, 0, 0, 0, 2, 120, 118, 0, 0, 0, 0, 0, 105, 179, 3, 0, 0, 0, 0, 0, 203, 76, 16, 57, 1, 0, 0, 0, 196, 65, 213, 208, 81, 0, 0, 0, 203, 220, 226, 212, 54, 0, 0, 0, 6, 48, 57, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 67, 116, 0, 0, 0, 0, 0, 55, 193, 10, 0, 0, 0, 0, 0, 131, 115, 10, 66, 85, 67, 0, 0, 133, 160, 217, 200, 97, 0, 0, 0, 111, 232, 215, 180, 21, 0, 0, 0, 66, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 24, 30, 0, 0, 0, 0, 0, 8, 162, 92, 0, 0, 0, 0, 0, 109, 64, 0, 0, 0, 0, 0, 7, 157, 3, 0, 0, 0, 0, 0, 53, 189, 142, 105, 0, 0, 0, 0, 29, 204, 136, 133, 0, 0, 0, 0, 0, 54, 84, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 83, 20, 0, 0, 0, 0, 0, 60, 72, 10, 0, 0, 0, 0, 28, 106, 0, 0, 0, 0, 0, 0, 91, 77, 0, 0, 0, 0, 0, 0, 63, 138, 75, 83, 16, 0, 0, 0, 9, 101, 56, 87, 46, 0, 0, 0, 0, 0, 42, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 123, 90, 0, 0, 0, 0, 0, 117, 76, 3, 0, 0, 0, 0, 20, 199, 60, 7, 0, 0, 0, 0, 104, 133, 122, 112, 0, 0, 0, 0, 100, 100, 122, 100, 0, 0, 0, 0, 36, 120, 62, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 30, 59, 0, 0, 0, 0, 0, 0, 132, 86, 0, 0, 0, 0, 0, 90, 42, 0, 0, 0, 0, 0, 29, 135, 0, 4, 0, 0, 0, 0, 107, 61, 123, 193, 5, 0, 0, 0, 129, 82, 194, 90, 0, 0, 0, 0, 25, 63, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 28, 41, 0, 0, 0, 0, 0, 41, 177, 76, 0, 0, 0, 0, 0, 139, 80, 0, 0, 0, 0, 0, 0, 126, 5, 13, 15, 0, 0, 0, 0, 151, 63, 195, 215, 46, 0, 0, 0, 70, 191, 188, 191, 62, 0, 0, 0, 0, 11, 63, 53, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 61, 15, 0, 0, 0, 0, 0, 63, 156, 15, 0, 0, 0, 0, 77, 179, 4, 0, 0, 0, 0, 1, 183, 62, 69, 136, 74, 0, 0, 40, 135, 37, 155, 37, 145, 0, 0, 6, 182, 140, 190, 166, 63, 0, 0, 0, 19, 63, 29, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 14, 88, 0, 0, 0, 0, 0, 0, 93, 169, 0, 0, 0, 0, 0, 0, 183, 66, 0, 0, 0, 0, 0, 11, 199, 22, 113, 180, 72, 0, 0, 27, 171, 29, 177, 92, 137, 0, 0, 1, 196, 182, 235, 200, 54, 0, 0, 0, 10, 50, 39, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 16, 20, 0, 0, 0, 0, 0, 87, 133, 24, 0, 0, 0, 0, 101, 92, 2, 0, 0, 0, 0, 36, 158, 2, 0, 0, 0, 0, 0, 83, 191, 95, 7, 0, 0, 0, 0, 48, 151, 173, 52, 0, 0, 0, 0, 0, 39, 91, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 19, 68, 0, 0, 0, 0, 0, 0, 96, 62, 0, 0, 0, 0, 0, 25, 74, 0, 0, 0, 0, 0, 0, 93, 11, 0, 0, 0, 0, 0, 32, 116, 169, 25, 0, 0, 0, 0, 56, 213, 109, 0, 0, 0, 0, 0, 4, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 29, 9, 0, 0, 0, 0, 0, 32, 172, 27, 0, 0, 0, 0, 58, 193, 38, 0, 0, 0, 0, 0, 170, 125, 65, 111, 38, 0, 0, 0, 190, 203, 165, 133, 164, 0, 0, 0, 165, 245, 192, 191, 58, 0, 0, 0, 71, 18, 9, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 4, 102, 36, 0, 0, 0, 0, 6, 119, 165, 30, 0, 0, 0, 0, 141, 180, 1, 0, 0, 0, 0, 0, 205, 73, 32, 54, 5, 0, 0, 0, 218, 186, 191, 211, 98, 0, 0, 0, 171, 252, 200, 210, 40, 0, 0, 0, 1, 28, 47, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 134, 129, 0, 0, 0, 0, 33, 157, 45, 25, 0, 0, 0, 0, 117, 94, 0, 0, 0, 0, 0, 0, 109, 83, 146, 133, 0, 0, 0, 0, 123, 87, 5, 142, 0, 0, 0, 0, 28, 127, 134, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 39, 179, 19, 0, 0, 0, 0, 35, 191, 31, 0, 0, 0, 0, 0, 127, 207, 95, 67, 0, 0, 0, 0, 203, 163, 107, 223, 59, 0, 0, 0, 159, 195, 171, 195, 27, 0, 0, 0, 11, 83, 59, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 1, 53, 37, 0, 0, 0, 0, 0, 84, 221, 98, 0, 0, 0, 0, 109, 214, 35, 0, 0, 0, 0, 2, 209, 116, 24, 24, 5, 0, 0, 38, 222, 171, 251, 251, 116, 0, 0, 14, 233, 252, 252, 225, 50, 0, 0, 0, 37, 107, 79, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 54, 30, 0, 0, 0, 0, 0, 57, 193, 33, 0, 0, 0, 0, 6, 201, 83, 0, 0, 0, 0, 0, 53, 168, 5, 41, 116, 135, 30, 0, 49, 195, 77, 226, 163, 212, 51, 0, 2, 184, 236, 244, 232, 108, 1, 0, 0, 0, 25, 42, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 59, 26, 0, 0, 0, 0, 0, 9, 170, 47, 0, 0, 0, 0, 0, 141, 145, 0, 0, 0, 0, 0, 0, 188, 66, 0, 26, 42, 1, 0, 0, 214, 44, 153, 241, 197, 15, 0, 0, 200, 201, 249, 228, 63, 0, 0, 0, 3, 41, 55, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 5, 23, 0, 0, 0, 0, 0, 0, 109, 119, 0, 0, 0, 0, 0, 60, 120, 7, 0, 0, 0, 0, 1, 142, 16, 0, 0, 0, 0, 0, 49, 209, 145, 80, 0, 0, 0, 0, 60, 171, 120, 74, 0, 0, 0, 0, 5, 86, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 7, 104, 13, 0, 0, 0, 0, 3, 113, 180, 15, 0, 0, 0, 0, 115, 214, 8, 0, 0, 0, 0, 0, 170, 149, 78, 106, 44, 0, 0, 0, 188, 238, 201, 207, 141, 0, 0, 0, 136, 250, 222, 233, 59, 0, 0, 0, 2, 41, 39, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 54, 0, 0, 0, 0, 0, 0, 26, 104, 0, 0, 0, 0, 0, 0, 92, 23, 0, 0, 0, 0, 0, 0, 109, 0, 0, 0, 0, 0, 0, 0, 127, 59, 23, 0, 0, 0, 0, 0, 112, 215, 141, 0, 0, 0, 0, 0, 0, 34, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 51, 46, 0, 0, 0, 0, 0, 20, 171, 32, 0, 0, 0, 0, 0, 84, 139, 0, 0, 0, 0, 0, 0, 140, 137, 114, 132, 44, 0, 0, 0, 145, 216, 55, 103, 110, 0, 0, 0, 105, 196, 155, 164, 10, 0, 0, 0, 1, 40, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 20, 32, 0, 0, 0, 0, 0, 0, 115, 46, 0, 0, 0, 0, 0, 77, 46, 0, 0, 0, 0, 0, 0, 109, 8, 17, 0, 0, 0, 0, 0, 132, 101, 109, 3, 0, 0, 0, 10, 147, 102, 83, 0, 0, 0, 0, 7, 76, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 30, 12, 0, 0, 0, 0, 0, 0, 87, 164, 37, 0, 0, 0, 0, 0, 0, 112, 137, 0, 0, 0, 0, 0, 0, 121, 150, 120, 144, 65, 1, 0, 0, 194, 159, 78, 2, 197, 50, 0, 0, 188, 179, 146, 106, 187, 18, 0, 0, 2, 11, 12, 12, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 29, 131, 1, 0, 0, 0, 0, 0, 23, 210, 17, 0, 0, 0, 0, 0, 118, 200, 1, 29, 7, 0, 0, 3, 206, 125, 74, 213, 101, 0, 0, 29, 232, 75, 217, 159, 163, 0, 0, 6, 198, 234, 244, 227, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 2, 42, 1, 0, 0, 0, 0, 0, 74, 173, 4, 0, 0, 0, 0, 52, 221, 43, 0, 0, 0, 0, 0, 153, 210, 71, 135, 78, 1, 0, 0, 228, 248, 183, 199, 176, 9, 0, 0, 225, 239, 194, 197, 40, 0, 0, 0, 23, 82, 79, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 39, 8, 0, 0, 0, 0, 0, 59, 126, 32, 0, 0, 0, 0, 25, 123, 0, 0, 0, 0, 0, 0, 95, 89, 76, 62, 1, 0, 0, 0, 130, 163, 30, 30, 76, 0, 0, 0, 86, 182, 11, 20, 67, 0, 0, 0, 0, 49, 90, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 35, 117, 0, 0, 0, 0, 0, 0, 118, 19, 0, 0, 0, 0, 0, 44, 165, 78, 32, 0, 0, 0, 0, 121, 120, 29, 124, 43, 0, 0, 0, 130, 17, 2, 106, 34, 0, 0, 0, 54, 66, 78, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 52, 57, 0, 0, 0, 0, 0, 0, 99, 143, 0, 0, 0, 0, 0, 0, 130, 132, 7, 31, 21, 0, 0, 0, 171, 84, 133, 176, 162, 9, 0, 0, 181, 41, 175, 34, 172, 17, 0, 0, 155, 172, 222, 165, 53, 0, 0, 0, 0, 28, 46, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 135, 41, 0, 0, 0, 0, 0, 36, 143, 26, 0, 0, 0, 0, 0, 110, 104, 20, 0, 0, 0, 0, 1, 171, 130, 87, 0, 0, 0, 0, 2, 166, 131, 33, 0, 0, 0, 0, 0, 79, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 40, 52, 0, 0, 0, 0, 0, 0, 79, 150, 0, 0, 0, 0, 0, 0, 89, 187, 94, 58, 6, 0, 0, 0, 159, 241, 128, 163, 94, 0, 0, 0, 204, 221, 20, 74, 100, 0, 0, 0, 154, 248, 99, 159, 71, 0, 0, 0, 3, 46, 55, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 26, 7, 0, 0, 0, 0, 0, 0, 106, 10, 0, 0, 0, 0, 0, 46, 79, 0, 0, 0, 0, 0, 0, 117, 18, 0, 0, 0, 0, 0, 20, 140, 120, 85, 0, 0, 0, 0, 22, 127, 51, 105, 0, 0, 0, 0, 0, 42, 86, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 124, 48, 0, 0, 0, 0, 0, 0, 167, 112, 0, 0, 0, 0, 0, 0, 163, 115, 0, 8, 5, 0, 0, 1, 197, 75, 97, 183, 161, 26, 0, 42, 170, 20, 197, 30, 145, 119, 0, 45, 200, 115, 211, 100, 202, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 34, 7, 0, 0, 0, 0, 0, 0, 147, 76, 0, 0, 0, 0, 0, 0, 146, 101, 38, 86, 25, 0, 0, 5, 177, 56, 175, 121, 164, 49, 0, 62, 117, 47, 132, 18, 161, 96, 0, 27, 186, 157, 230, 187, 105, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 141, 43, 0, 0, 0, 0, 0, 0, 172, 108, 0, 0, 0, 0, 0, 0, 186, 88, 0, 5, 0, 0, 0, 15, 196, 27, 114, 168, 79, 0, 0, 58, 135, 64, 158, 9, 197, 57, 0, 28, 205, 177, 217, 160, 192, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 2, 112, 0, 0, 0, 0, 0, 0, 0, 163, 10, 0, 0, 0, 0, 0, 13, 184, 4, 0, 0, 0, 0, 0, 96, 170, 81, 130, 11, 0, 0, 0, 176, 56, 175, 118, 69, 0, 0, 0, 147, 178, 217, 173, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 43, 175, 16, 0, 0, 0, 0, 23, 199, 59, 0, 0, 0, 0, 0, 115, 163, 31, 83, 0, 0, 0, 0, 151, 87, 235, 255, 20, 0, 0, 0, 115, 155, 255, 187, 4, 0, 0, 0, 15, 107, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 19, 49, 0, 0, 0, 0, 0, 32, 185, 175, 0, 0, 0, 0, 62, 199, 35, 0, 0, 0, 0, 0, 150, 91, 3, 19, 0, 0, 0, 0, 174, 129, 197, 226, 46, 0, 0, 0, 146, 251, 220, 159, 7, 0, 0, 0, 6, 90, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 42, 65, 0, 0, 0, 0, 0, 0, 50, 161, 0, 0, 0, 0, 0, 0, 50, 170, 1, 17, 0, 0, 0, 0, 133, 138, 146, 173, 126, 16, 0, 0, 192, 109, 100, 6, 177, 46, 0, 0, 192, 160, 224, 180, 134, 5, 0, 0, 11, 45, 58, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 68, 49, 0, 0, 0, 0, 0, 14, 124, 24, 0, 0, 0, 0, 2, 101, 15, 0, 0, 0, 0, 0, 23, 123, 0, 0, 0, 0, 0, 0, 85, 216, 123, 113, 0, 0, 0, 0, 103, 162, 102, 155, 0, 0, 0, 0, 1, 41, 45, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 27, 42, 0, 0, 0, 0, 0, 0, 140, 69, 0, 0, 0, 0, 0, 20, 152, 0, 0, 0, 0, 0, 0, 38, 144, 0, 38, 154, 32, 0, 0, 6, 191, 34, 114, 206, 107, 0, 0, 0, 132, 177, 161, 244, 52, 0, 0, 0, 0, 15, 53, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 4, 0, 0, 25, 88, 0, 0, 0, 0, 0, 2, 157, 131, 0, 0, 0, 0, 2, 114, 89, 4, 0, 0, 0, 0, 60, 177, 27, 69, 9, 0, 0, 0, 162, 104, 183, 177, 100, 0, 0, 0, 181, 172, 187, 181, 37, 0, 0, 0, 31, 63, 36, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 14, 23, 0, 0, 0, 0, 0, 0, 118, 87, 0, 0, 0, 0, 0, 61, 198, 5, 0, 0, 0, 0, 0, 117, 148, 79, 57, 0, 0, 0, 0, 136, 151, 243, 220, 4, 0, 0, 0, 70, 184, 227, 181, 0, 0, 0, 0, 4, 84, 82, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 14, 28, 0, 0, 0, 0, 0, 17, 131, 128, 31, 0, 0, 0, 0, 107, 114, 0, 0, 0, 0, 0, 0, 134, 87, 115, 66, 0, 0, 0, 0, 117, 130, 53, 181, 0, 0, 0, 0, 94, 130, 43, 185, 0, 0, 0, 0, 2, 55, 106, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 158, 51, 0, 0, 0, 0, 43, 186, 94, 0, 0, 0, 0, 30, 166, 46, 0, 0, 0, 0, 0, 169, 221, 173, 130, 0, 0, 0, 0, 199, 158, 146, 122, 0, 0, 0, 1, 125, 74, 45, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 14, 34, 0, 0, 0, 0, 0, 14, 174, 177, 0, 0, 0, 0, 24, 184, 76, 0, 0, 0, 0, 0, 103, 173, 109, 86, 0, 0, 0, 0, 168, 215, 144, 220, 8, 0, 0, 0, 148, 245, 195, 165, 0, 0, 0, 0, 22, 108, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 25, 33, 0, 0, 0, 0, 0, 0, 129, 86, 0, 0, 0, 0, 0, 43, 99, 0, 0, 0, 0, 0, 0, 112, 41, 28, 0, 0, 0, 0, 47, 187, 133, 115, 0, 0, 0, 0, 95, 225, 112, 38, 0, 0, 0, 0, 24, 99, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 132, 152, 230, 38, 0, 0, 15, 216, 125, 52, 202, 12, 0, 0, 5, 26, 8, 194, 61, 0, 0, 0, 0, 0, 85, 122, 2, 0, 0, 0, 0, 70, 154, 0, 0, 0, 0, 0, 0, 92, 48, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 7, 47, 102, 122, 0, 0, 0, 0, 71, 141, 126, 185, 0, 0, 0, 0, 0, 60, 150, 20, 0, 0, 0, 0, 50, 170, 18, 0, 0, 0, 0, 0, 67, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 133, 144, 160, 57, 0, 0, 0, 0, 0, 0, 131, 82, 0, 0, 0, 1, 85, 124, 201, 139, 77, 12, 0, 2, 118, 74, 144, 8, 0, 0, 0, 0, 0, 0, 82, 3, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 106, 170, 51, 0, 0, 0, 0, 80, 35, 111, 17, 0, 0, 0, 0, 0, 0, 108, 0, 0, 0, 0, 0, 0, 0, 104, 0, 0, 0, 0, 0, 0, 41, 70, 0, 0, 0, 0, 0, 0, 60, 27, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 190, 180, 198, 172, 29, 0, 0, 42, 163, 52, 34, 169, 67, 0, 0, 0, 0, 0, 67, 170, 0, 0, 0, 0, 0, 1, 170, 75, 0, 0, 0, 0, 0, 77, 167, 8, 0, 0, 0, 0, 0, 94, 118, 4, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 70, 149, 177, 24, 0, 0, 1, 132, 168, 107, 189, 18, 0, 0, 0, 0, 3, 144, 44, 0, 0, 0, 0, 3, 96, 63, 0, 0, 0, 0, 0, 91, 102, 0, 0, 0, 0, 0, 10, 106, 8, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 82, 175, 225, 17, 0, 0, 9, 148, 173, 164, 200, 2, 0, 0, 0, 3, 26, 146, 20, 0, 0, 0, 0, 5, 135, 50, 0, 0, 0, 0, 0, 146, 95, 0, 0, 0, 0, 0, 4, 105, 4, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 97, 125, 106, 118, 132, 0, 0, 0, 0, 0, 0, 12, 138, 0, 0, 0, 0, 0, 0, 111, 100, 0, 0, 0, 0, 0, 0, 157, 22, 0, 0, 0, 0, 0, 50, 103, 0, 0, 0, 0, 0, 0, 54, 89, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 95, 172, 170, 34, 0, 0, 73, 184, 193, 144, 226, 41, 0, 0, 7, 0, 0, 119, 122, 0, 0, 0, 0, 0, 47, 144, 12, 0, 0, 0, 0, 81, 136, 5, 0, 0, 0, 0, 35, 93, 13, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 139, 184, 164, 0, 0, 0, 0, 65, 58, 119, 105, 0, 0, 0, 0, 0, 2, 157, 17, 0, 0, 0, 0, 0, 37, 130, 0, 0, 0, 0, 0, 0, 111, 37, 0, 0, 0, 0, 0, 0, 93, 27, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 42, 123, 171, 75, 0, 5, 80, 164, 161, 109, 191, 45, 0, 10, 47, 11, 0, 87, 127, 0, 0, 0, 0, 0, 10, 158, 33, 0, 0, 0, 0, 0, 115, 63, 0, 0, 0, 0, 0, 0, 79, 11, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 95, 149, 153, 203, 4, 0, 0, 15, 126, 82, 38, 153, 0, 0, 0, 0, 0, 0, 122, 58, 0, 0, 0, 0, 0, 27, 110, 0, 0, 0, 0, 0, 16, 138, 11, 0, 0, 0, 0, 0, 37, 95, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 97, 148, 165, 179, 46, 0, 0, 53, 138, 94, 64, 188, 43, 0, 0, 0, 0, 0, 152, 99, 0, 0, 0, 0, 4, 94, 116, 5, 0, 0, 0, 0, 135, 105, 0, 0, 0, 0, 0, 7, 147, 7, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 94, 24, 0, 0, 0, 0, 0, 0, 15, 155, 31, 0, 0, 0, 0, 0, 0, 118, 80, 0, 0, 0, 0, 0, 0, 132, 32, 0, 0, 0, 0, 0, 34, 100, 1, 0, 0, 0, 0, 90, 143, 0, 0, 0, 0, 0, 0, 51, 21, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 56, 146, 219, 37, 0, 0, 0, 121, 184, 199, 188, 0, 0, 0, 0, 2, 48, 149, 17, 0, 0, 0, 0, 25, 150, 21, 0, 0, 0, 0, 0, 149, 49, 0, 0, 0, 0, 0, 35, 57, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 95, 18, 0, 0, 0, 0, 14, 117, 60, 109, 0, 0, 0, 0, 27, 68, 57, 99, 0, 0, 0, 6, 94, 116, 191, 73, 0, 0, 0, 7, 74, 70, 125, 2, 0, 0, 0, 0, 0, 112, 10, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 144, 43, 5, 59, 3, 0, 0, 9, 150, 81, 83, 149, 5, 0, 0, 0, 97, 0, 0, 102, 0, 0, 0, 0, 10, 0, 0, 101, 0, 0, 0, 0, 0, 0, 0, 119, 0, 0, 0, 0, 0, 0, 0, 79, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 38, 24, 10, 0, 0, 0, 0, 95, 166, 241, 178, 0, 0, 0, 0, 0, 16, 243, 125, 0, 0, 0, 0, 1, 122, 200, 18, 0, 0, 0, 0, 42, 223, 140, 0, 0, 0, 0, 0, 79, 249, 69, 0, 0, 0, 0, 0, 15, 108, 20, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 56, 109, 168, 185, 67, 0, 16, 150, 197, 153, 102, 209, 64, 0, 0, 0, 0, 0, 136, 162, 3, 0, 0, 0, 9, 62, 188, 36, 0, 0, 0, 0, 89, 166, 9, 0, 0, 0, 0, 0, 79, 45, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 88, 142, 187, 146, 0, 0, 84, 188, 161, 127, 181, 99, 0, 0, 21, 3, 0, 140, 123, 0, 0, 0, 0, 0, 35, 162, 24, 0, 0, 0, 0, 89, 133, 4, 0, 0, 0, 0, 0, 80, 36, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 160, 180, 182, 133, 0, 0, 0, 82, 210, 65, 99, 199, 0, 0, 0, 0, 28, 0, 58, 192, 0, 0, 0, 0, 0, 0, 81, 198, 0, 0, 0, 0, 0, 0, 160, 114, 0, 0, 0, 0, 0, 0, 166, 71, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 23, 0, 0, 0, 0, 0, 50, 175, 123, 0, 0, 0, 0, 0, 105, 60, 147, 0, 0, 0, 0, 0, 0, 0, 143, 0, 0, 0, 0, 0, 0, 0, 140, 0, 0, 0, 0, 0, 0, 0, 172, 10, 0, 0, 0, 0, 0, 0, 81, 10, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 156, 158, 197, 209, 151, 2, 0, 17, 84, 40, 40, 58, 213, 15, 0, 0, 0, 0, 0, 99, 204, 0, 0, 0, 0, 0, 0, 149, 150, 0, 0, 0, 0, 0, 0, 220, 69, 0, 0, 0, 0, 0, 0, 143, 16, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 205, 133, 177, 50, 0, 0, 0, 95, 184, 97, 217, 19, 0, 0, 0, 10, 12, 160, 117, 0, 0, 0, 0, 0, 53, 178, 22, 0, 0, 0, 0, 32, 187, 18, 0, 0, 0, 0, 0, 57, 129, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79, 142, 140, 185, 19, 0, 0, 0, 42, 13, 34, 153, 2, 0, 0, 0, 0, 6, 162, 44, 0, 0, 0, 0, 0, 92, 81, 0, 0, 0, 0, 0, 59, 150, 0, 0, 0, 0, 0, 0, 86, 62, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 185, 174, 122, 173, 0, 0, 0, 16, 207, 44, 39, 182, 0, 0, 0, 0, 0, 0, 166, 108, 0, 0, 0, 0, 0, 29, 173, 14, 0, 0, 0, 0, 9, 159, 42, 0, 0, 0, 0, 0, 47, 134, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 27, 0, 0, 0, 0, 103, 134, 127, 135, 0, 0, 0, 0, 10, 9, 82, 90, 0, 0, 0, 0, 0, 0, 137, 13, 0, 0, 0, 0, 0, 19, 129, 0, 0, 0, 0, 0, 4, 137, 25, 0, 0, 0, 0, 0, 5, 70, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 177, 205, 150, 177, 62, 0, 0, 8, 179, 53, 99, 204, 13, 0, 0, 0, 0, 1, 178, 111, 0, 0, 0, 0, 0, 45, 182, 15, 0, 0, 0, 0, 28, 182, 41, 0, 0, 0, 0, 0, 60, 136, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 172, 140, 148, 131, 0, 0, 0, 0, 2, 1, 59, 142, 0, 0, 0, 0, 0, 0, 137, 63, 0, 0, 0, 0, 0, 9, 140, 6, 0, 0, 0, 0, 0, 50, 111, 0, 0, 0, 0, 0, 0, 26, 108, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 177, 124, 154, 26, 0, 0, 0, 124, 111, 43, 181, 13, 0, 0, 0, 0, 0, 162, 69, 0, 0, 0, 0, 0, 41, 152, 1, 0, 0, 0, 0, 29, 174, 13, 0, 0, 0, 0, 0, 83, 108, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 161, 111, 185, 30, 0, 0, 0, 151, 67, 62, 172, 4, 0, 0, 0, 0, 15, 185, 45, 0, 0, 0, 0, 0, 119, 100, 0, 0, 0, 0, 0, 76, 156, 0, 0, 0, 0, 0, 0, 107, 73, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 163, 146, 175, 0, 0, 0, 0, 59, 57, 78, 158, 0, 0, 0, 0, 0, 3, 166, 53, 0, 0, 0, 0, 0, 73, 108, 1, 0, 0, 0, 0, 29, 173, 13, 0, 0, 0, 0, 0, 62, 108, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 132, 129, 150, 164, 0, 0, 0, 30, 57, 13, 86, 132, 0, 0, 0, 0, 110, 135, 209, 172, 41, 0, 0, 0, 32, 55, 177, 58, 10, 0, 0, 0, 0, 53, 95, 0, 0, 0, 0, 0, 0, 70, 36, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136, 149, 153, 186, 66, 0, 0, 6, 164, 9, 48, 205, 20, 0, 0, 0, 21, 0, 184, 105, 0, 0, 0, 0, 0, 75, 155, 11, 0, 0, 0, 0, 81, 208, 7, 0, 0, 0, 0, 0, 112, 95, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 43, 0, 0, 0, 0, 0, 4, 151, 203, 27, 0, 0, 0, 0, 79, 171, 155, 83, 0, 0, 0, 12, 179, 35, 75, 195, 0, 0, 0, 4, 23, 0, 91, 159, 0, 0, 0, 0, 0, 16, 151, 15, 0, 0, 0, 0, 0, 12, 43, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 187, 114, 131, 162, 109, 0, 0, 24, 99, 0, 9, 155, 51, 0, 0, 0, 0, 0, 123, 121, 0, 0, 0, 0, 0, 38, 158, 25, 0, 0, 0, 0, 43, 190, 23, 0, 0, 0, 0, 0, 94, 103, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 37, 32, 0, 0, 0, 0, 0, 85, 175, 151, 209, 0, 0, 0, 0, 46, 38, 59, 171, 0, 0, 0, 0, 0, 0, 186, 68, 0, 0, 0, 0, 0, 66, 147, 6, 0, 0, 0, 0, 65, 188, 11, 0, 0, 0, 0, 0, 65, 64, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 61, 26, 0, 0, 0, 0, 65, 139, 196, 47, 0, 0, 0, 0, 4, 35, 158, 5, 0, 0, 0, 0, 0, 52, 129, 0, 0, 0, 0, 0, 0, 71, 108, 0, 0, 0, 0, 0, 0, 77, 92, 0, 0, 0, 0, 0, 0, 31, 42, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 184, 196, 173, 163, 40, 0, 0, 0, 191, 52, 16, 134, 69, 0, 0, 0, 2, 0, 60, 191, 4, 0, 0, 0, 0, 9, 181, 86, 0, 0, 0, 0, 18, 169, 80, 0, 0, 0, 0, 0, 65, 139, 5, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 132, 189, 175, 204, 67, 0, 0, 1, 191, 80, 45, 185, 32, 0, 0, 0, 4, 1, 160, 146, 0, 0, 0, 0, 1, 74, 199, 38, 0, 0, 0, 0, 99, 219, 26, 0, 0, 0, 0, 0, 115, 98, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 49, 82, 76, 130, 120, 0, 0, 0, 82, 102, 105, 167, 70, 0, 0, 0, 0, 41, 134, 201, 128, 51, 0, 0, 0, 7, 46, 157, 49, 3, 0, 0, 0, 0, 0, 87, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 147, 159, 157, 188, 0, 0, 0, 0, 98, 13, 57, 188, 0, 0, 0, 0, 0, 0, 178, 100, 0, 0, 0, 0, 0, 61, 146, 12, 0, 0, 0, 0, 69, 172, 6, 0, 0, 0, 0, 0, 104, 50, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 170, 127, 195, 48, 0, 0, 0, 114, 58, 75, 176, 4, 0, 0, 0, 0, 28, 179, 42, 0, 0, 0, 0, 3, 141, 78, 0, 0, 0, 0, 0, 87, 178, 0, 0, 0, 0, 0, 0, 94, 74, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 97, 111, 127, 151, 1, 0, 0, 0, 0, 0, 110, 70, 0, 0, 0, 0, 0, 7, 111, 0, 0, 0, 0, 0, 0, 43, 77, 0, 0, 0, 0, 0, 0, 89, 33, 0, 0, 0, 0, 0, 0, 91, 30, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 122, 107, 99, 107, 137, 57, 0, 40, 198, 242, 240, 245, 252, 96, 0, 0, 0, 0, 0, 163, 204, 6, 0, 0, 0, 0, 10, 229, 112, 0, 0, 0, 0, 0, 39, 223, 34, 0, 0, 0, 0, 0, 29, 124, 11, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 14, 0, 0, 0, 0, 0, 2, 115, 117, 33, 0, 0, 0, 0, 96, 120, 105, 120, 0, 0, 0, 2, 45, 0, 70, 111, 0, 0, 0, 0, 0, 0, 105, 42, 0, 0, 0, 0, 0, 17, 86, 0, 0, 0, 0, 0, 0, 21, 23, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 157, 126, 137, 176, 0, 0, 0, 0, 156, 43, 3, 159, 13, 0, 0, 0, 171, 9, 5, 147, 2, 0, 0, 0, 74, 0, 56, 119, 0, 0, 0, 0, 0, 0, 120, 26, 0, 0, 0, 0, 0, 13, 69, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 184, 179, 183, 173, 59, 0, 0, 0, 10, 4, 27, 118, 137, 0, 0, 0, 0, 1, 125, 208, 26, 0, 0, 0, 3, 76, 186, 67, 0, 0, 0, 4, 160, 139, 6, 0, 0, 0, 0, 27, 124, 10, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 30, 84, 85, 82, 75, 8, 0, 31, 152, 83, 63, 51, 72, 80, 0, 0, 64, 11, 0, 0, 9, 94, 0, 0, 0, 0, 0, 0, 70, 30, 0, 0, 0, 0, 0, 41, 100, 0, 0, 0, 0, 0, 0, 48, 18, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 188, 199, 200, 43, 0, 0, 0, 1, 21, 21, 213, 72, 10, 0, 0, 0, 26, 163, 221, 149, 51, 0, 0, 0, 0, 80, 134, 0, 0, 0, 0, 0, 0, 98, 83, 0, 0, 0, 0, 0, 0, 78, 37, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 26, 1, 0, 0, 0, 0, 1, 141, 138, 183, 172, 83, 5, 0, 0, 0, 0, 14, 85, 204, 27, 0, 0, 0, 11, 128, 173, 40, 0, 0, 0, 27, 146, 135, 26, 0, 0, 0, 58, 173, 51, 0, 0, 0, 0, 0, 59, 56, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 34, 1, 0, 0, 0, 0, 0, 36, 127, 172, 93, 0, 0, 0, 0, 0, 18, 161, 57, 0, 0, 0, 0, 49, 180, 71, 0, 0, 0, 0, 85, 166, 42, 0, 0, 0, 0, 79, 114, 4, 0, 0, 0, 0, 0, 61, 15, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 81, 127, 164, 208, 62, 0, 0, 39, 155, 111, 60, 182, 38, 0, 0, 0, 0, 0, 141, 129, 0, 0, 0, 0, 0, 46, 160, 14, 0, 0, 0, 0, 40, 172, 14, 0, 0, 0, 0, 0, 69, 96, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 147, 170, 236, 75, 0, 0, 0, 7, 35, 142, 161, 8, 0, 0, 0, 0, 90, 117, 8, 0, 0, 0, 0, 60, 166, 6, 0, 0, 0, 0, 37, 143, 23, 0, 0, 0, 0, 0, 87, 27, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 124, 124, 109, 39, 0, 0, 0, 20, 26, 33, 154, 112, 0, 0, 0, 0, 0, 102, 198, 110, 51, 3, 0, 0, 0, 87, 70, 10, 59, 7, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 167, 200, 206, 152, 0, 0, 29, 187, 212, 112, 146, 103, 0, 0, 14, 44, 2, 101, 152, 1, 0, 0, 0, 0, 42, 154, 27, 0, 0, 0, 0, 83, 177, 14, 0, 0, 0, 0, 15, 155, 61, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 195, 211, 200, 193, 7, 0, 0, 15, 27, 23, 64, 216, 9, 0, 0, 0, 0, 0, 158, 142, 0, 0, 0, 0, 0, 26, 201, 42, 0, 0, 0, 0, 0, 156, 68, 0, 0, 0, 0, 0, 0, 114, 31, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 59, 46, 29, 0, 0, 0, 0, 27, 41, 99, 153, 0, 0, 0, 0, 0, 0, 137, 74, 0, 0, 0, 0, 0, 17, 143, 1, 0, 0, 0, 0, 0, 107, 57, 0, 0, 0, 0, 0, 47, 165, 0, 0, 0, 0, 0, 0, 45, 75, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 149, 146, 141, 148, 103, 1, 0, 0, 7, 46, 52, 52, 160, 14, 0, 0, 0, 0, 0, 20, 157, 3, 0, 0, 0, 0, 0, 118, 105, 0, 0, 0, 0, 0, 59, 136, 2, 0, 0, 0, 0, 0, 82, 82, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 180, 152, 153, 13, 0, 0, 0, 0, 8, 13, 166, 15, 0, 0, 0, 0, 5, 154, 80, 0, 0, 0, 0, 6, 108, 95, 1, 0, 0, 0, 6, 146, 87, 0, 0, 0, 0, 0, 27, 79, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 47, 17, 0, 0, 0, 3, 81, 60, 46, 129, 0, 0, 0, 0, 0, 0, 10, 108, 0, 0, 0, 0, 0, 3, 122, 40, 0, 0, 0, 0, 0, 86, 60, 0, 0, 0, 0, 0, 127, 69, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 115, 144, 154, 200, 20, 0, 0, 0, 95, 12, 39, 178, 4, 0, 0, 0, 10, 28, 170, 39, 0, 0, 0, 0, 20, 154, 55, 0, 0, 0, 0, 0, 133, 40, 0, 0, 0, 0, 0, 16, 59, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 9, 0, 0, 0, 0, 0, 0, 14, 193, 126, 126, 149, 0, 0, 0, 0, 159, 7, 27, 171, 0, 0, 0, 0, 142, 30, 71, 145, 0, 0, 0, 0, 19, 4, 110, 138, 0, 0, 0, 0, 0, 0, 140, 118, 0, 0, 0, 0, 0, 0, 70, 51, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 40, 38, 0, 0, 0, 0, 0, 85, 142, 187, 0, 0, 0, 0, 0, 0, 133, 101, 0, 0, 0, 0, 0, 94, 89, 0, 0, 0, 0, 0, 56, 152, 5, 0, 0, 0, 0, 0, 152, 21, 0, 0, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 129, 143, 129, 192, 57, 0, 0, 2, 32, 7, 39, 176, 17, 0, 0, 0, 0, 13, 173, 59, 0, 0, 0, 0, 7, 126, 78, 0, 0, 0, 0, 0, 157, 100, 0, 0, 0, 0, 0, 32, 140, 5, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 99, 31, 0, 0, 0, 0, 0, 0, 88, 168, 151, 68, 0, 0, 0, 0, 0, 14, 82, 192, 0, 0, 0, 0, 0, 4, 170, 118, 0, 0, 0, 0, 0, 75, 164, 15, 0, 0, 0, 0, 0, 160, 60, 0, 0, 0, 0, 0, 0, 34, 5, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 75, 44, 67, 130, 163, 44, 0, 22, 160, 184, 177, 110, 190, 37, 0, 0, 0, 0, 0, 91, 173, 1, 0, 0, 0, 0, 0, 177, 76, 0, 0, 0, 0, 0, 44, 126, 0, 0, 0, 0, 0, 0, 130, 42, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 38, 1, 0, 0, 0, 0, 43, 129, 160, 62, 0, 0, 0, 0, 0, 0, 125, 48, 0, 0, 0, 0, 0, 1, 117, 0, 0, 0, 0, 0, 0, 47, 77, 0, 0, 0, 0, 0, 0, 116, 5, 0, 0, 0, 0, 0, 0, 56, 3, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 132, 129, 139, 0, 0, 0, 0, 21, 30, 49, 102, 0, 0, 0, 0, 0, 0, 115, 16, 0, 0, 0, 0, 0, 30, 101, 0, 0, 0, 0, 0, 0, 129, 15, 0, 0, 0, 0, 0, 3, 99, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 76, 105, 111, 126, 114, 15, 0, 25, 165, 180, 153, 122, 163, 79, 0, 0, 0, 0, 0, 31, 163, 33, 0, 0, 0, 0, 0, 105, 120, 0, 0, 0, 0, 0, 0, 145, 39, 0, 0, 0, 0, 0, 0, 133, 49, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 224, 142, 0, 0, 0, 0, 0, 27, 170, 32, 0, 0, 0, 0, 0, 128, 27, 0, 0, 0, 0, 0, 5, 154, 0, 0, 0, 0, 0, 0, 35, 150, 0, 0, 0, 0, 0, 0, 37, 116, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 185, 173, 199, 106, 0, 0, 0, 26, 55, 24, 168, 46, 0, 0, 0, 0, 7, 178, 95, 0, 0, 0, 0, 8, 123, 95, 3, 0, 0, 0, 10, 178, 101, 0, 0, 0, 0, 0, 29, 116, 6, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 107, 129, 136, 170, 179, 0, 0, 0, 25, 30, 11, 122, 125, 0, 0, 0, 0, 0, 0, 186, 38, 0, 0, 0, 0, 0, 16, 168, 3, 0, 0, 0, 0, 0, 104, 86, 0, 0, 0, 0, 0, 0, 83, 25, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 181, 202, 154, 230, 77, 0, 0, 0, 106, 37, 44, 213, 25, 0, 0, 0, 0, 13, 201, 97, 0, 0, 0, 0, 3, 107, 140, 6, 0, 0, 0, 0, 139, 180, 4, 0, 0, 0, 0, 0, 143, 46, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 151, 159, 148, 71, 0, 0, 0, 0, 12, 43, 86, 125, 0, 0, 0, 0, 0, 0, 31, 119, 0, 0, 0, 0, 0, 0, 73, 116, 0, 0, 0, 0, 0, 0, 116, 48, 0, 0, 0, 0, 0, 0, 90, 10, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 186, 142, 174, 96, 0, 0, 0, 211, 135, 24, 170, 51, 0, 0, 0, 5, 0, 140, 142, 0, 0, 0, 0, 0, 52, 167, 23, 0, 0, 0, 0, 71, 194, 17, 0, 0, 0, 0, 0, 117, 91, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87, 195, 148, 202, 107, 0, 0, 0, 134, 83, 43, 206, 49, 0, 0, 0, 0, 14, 193, 93, 0, 0, 0, 0, 6, 131, 116, 2, 0, 0, 0, 0, 157, 154, 2, 0, 0, 0, 0, 6, 147, 28, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 141, 228, 222, 209, 167, 1, 0, 0, 36, 40, 44, 110, 241, 6, 0, 0, 0, 0, 0, 117, 186, 0, 0, 0, 0, 0, 0, 190, 108, 0, 0, 0, 0, 0, 26, 221, 33, 0, 0, 0, 0, 0, 24, 145, 11, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 60, 26, 0, 0, 0, 0, 30, 112, 81, 129, 0, 0, 0, 0, 0, 0, 107, 88, 0, 0, 0, 0, 0, 2, 126, 5, 0, 0, 0, 0, 0, 76, 60, 0, 0, 0, 0, 0, 17, 140, 0, 0, 0, 0, 0, 0, 20, 68, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 24, 0, 0, 0, 0, 0, 0, 17, 133, 153, 154, 151, 0, 0, 0, 0, 0, 8, 80, 130, 0, 0, 0, 0, 111, 135, 200, 149, 82, 40, 0, 0, 27, 28, 160, 18, 0, 0, 0, 0, 0, 87, 95, 0, 0, 0, 0, 0, 0, 59, 32, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 29, 0, 0, 0, 0, 121, 127, 165, 124, 0, 0, 0, 12, 131, 31, 140, 79, 0, 0, 0, 9, 37, 0, 148, 48, 0, 0, 0, 0, 0, 0, 146, 21, 0, 0, 0, 0, 0, 0, 159, 0, 0, 0, 0, 0, 0, 2, 63, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 59, 163, 144, 174, 101, 0, 0, 0, 118, 109, 51, 197, 37, 0, 0, 0, 0, 30, 202, 75, 0, 0, 0, 0, 20, 169, 92, 0, 0, 0, 0, 1, 187, 159, 0, 0, 0, 0, 0, 3, 120, 36, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134, 163, 157, 162, 17, 0, 0, 0, 45, 10, 110, 208, 4, 0, 0, 0, 0, 1, 181, 86, 0, 0, 0, 0, 0, 47, 163, 8, 0, 0, 0, 0, 11, 174, 32, 0, 0, 0, 0, 0, 25, 131, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 118, 158, 50, 0, 0, 0, 0, 100, 25, 113, 80, 0, 0, 0, 0, 0, 0, 99, 35, 0, 0, 0, 0, 0, 0, 107, 11, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 8, 5, 0, 0, 0, 0, 79, 197, 167, 216, 0, 0, 0, 0, 15, 25, 115, 180, 0, 0, 0, 0, 0, 41, 194, 40, 6, 3, 0, 0, 17, 170, 75, 0, 5, 3, 0, 0, 180, 171, 0, 0, 0, 0, 0, 0, 102, 35, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 161, 160, 167, 54, 0, 0, 0, 24, 17, 0, 99, 133, 0, 0, 0, 0, 0, 0, 145, 93, 0, 0, 0, 0, 0, 5, 179, 28, 0, 0, 0, 0, 0, 63, 104, 0, 0, 0, 0, 0, 0, 40, 73, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 22, 6, 0, 0, 0, 0, 0, 118, 210, 174, 227, 40, 0, 0, 0, 56, 48, 94, 198, 4, 0, 0, 0, 0, 41, 214, 57, 0, 0, 6, 0, 21, 169, 83, 1, 0, 0, 0, 0, 182, 107, 0, 0, 0, 0, 0, 0, 71, 6, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 42, 8, 0, 0, 0, 0, 1, 188, 147, 164, 192, 78, 0, 0, 1, 70, 5, 41, 201, 33, 0, 0, 0, 0, 1, 193, 99, 0, 0, 0, 0, 0, 54, 175, 12, 0, 0, 0, 0, 54, 213, 49, 0, 0, 0, 0, 0, 48, 95, 2, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 165, 124, 163, 104, 0, 0, 0, 95, 97, 0, 85, 153, 0, 0, 0, 2, 0, 0, 74, 188, 0, 0, 0, 0, 0, 0, 104, 170, 0, 0, 0, 0, 0, 0, 123, 122, 0, 0, 0, 0, 0, 0, 73, 77, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 146, 146, 179, 38, 0, 0, 0, 0, 8, 16, 125, 16, 0, 0, 0, 0, 0, 0, 149, 5, 0, 0, 0, 0, 0, 0, 131, 0, 0, 0, 0, 0, 0, 0, 144, 6, 0, 0, 0, 0, 0, 0, 81, 4, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 167, 168, 161, 199, 9, 0, 0, 0, 45, 9, 87, 208, 3, 0, 0, 0, 0, 26, 204, 53, 0, 0, 0, 0, 8, 144, 114, 0, 0, 0, 0, 0, 131, 171, 1, 0, 0, 0, 0, 0, 130, 56, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 188, 137, 211, 31, 0, 0, 0, 52, 97, 47, 192, 9, 0, 0, 0, 0, 5, 189, 71, 0, 0, 0, 0, 2, 100, 117, 2, 0, 0, 0, 0, 99, 175, 1, 0, 0, 0, 0, 0, 126, 56, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 15, 0, 0, 0, 0, 0, 0, 60, 86, 60, 68, 76, 0, 0, 0, 22, 5, 0, 3, 127, 0, 0, 0, 0, 0, 0, 79, 128, 0, 0, 0, 0, 0, 1, 147, 43, 0, 0, 0, 0, 0, 94, 62, 0, 0, 0, 0, 0, 3, 78, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 150, 154, 198, 216, 43, 0, 0, 8, 52, 29, 84, 201, 13, 0, 0, 0, 0, 16, 201, 58, 0, 0, 0, 0, 0, 108, 113, 0, 0, 0, 0, 0, 78, 188, 3, 0, 0, 0, 0, 0, 76, 98, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 114, 160, 210, 238, 45, 0, 4, 158, 191, 140, 71, 183, 48, 0, 0, 0, 0, 0, 95, 187, 3, 0, 0, 0, 0, 4, 210, 91, 0, 0, 0, 0, 9, 147, 104, 0, 0, 0, 0, 0, 35, 156, 10, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 101, 15, 0, 0, 0, 0, 0, 19, 143, 83, 0, 0, 0, 0, 0, 0, 153, 34, 0, 0, 0, 0, 0, 85, 198, 55, 0, 0, 0, 0, 0, 163, 92, 7, 0, 0, 0, 0, 10, 152, 0, 0, 0, 0, 0, 0, 3, 27, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 164, 172, 126, 0, 0, 0, 0, 104, 95, 127, 91, 0, 0, 0, 0, 0, 7, 168, 18, 0, 0, 0, 0, 0, 38, 131, 0, 0, 0, 0, 0, 0, 111, 58, 0, 0, 0, 0, 0, 0, 84, 10, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 130, 132, 166, 154, 0, 0, 0, 15, 36, 7, 114, 104, 0, 0, 0, 0, 62, 118, 197, 136, 14, 0, 0, 0, 58, 56, 127, 0, 0, 0, 0, 0, 0, 78, 49, 0, 0, 0, 0, 0, 0, 88, 12, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 73, 143, 194, 203, 128, 0, 0, 16, 145, 71, 49, 88, 171, 0, 0, 0, 0, 0, 0, 115, 137, 0, 0, 0, 0, 0, 0, 177, 70, 0, 0, 0, 0, 0, 30, 206, 42, 0, 0, 0, 0, 0, 25, 142, 23, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 69, 99, 121, 103, 85, 7, 0, 3, 128, 159, 139, 160, 212, 16, 0, 0, 0, 0, 0, 25, 134, 0, 0, 0, 0, 0, 0, 94, 111, 0, 0, 0, 0, 0, 0, 145, 54, 0, 0, 0, 0, 0, 0, 143, 9, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 94, 166, 221, 234, 63, 0, 0, 0, 120, 105, 69, 177, 31, 0, 0, 0, 0, 7, 165, 122, 0, 0, 0, 0, 13, 133, 132, 10, 0, 0, 0, 15, 189, 132, 0, 0, 0, 0, 0, 45, 110, 8, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 43, 0, 0, 0, 0, 0, 0, 31, 133, 196, 151, 0, 0, 0, 0, 0, 4, 178, 132, 0, 0, 0, 0, 28, 209, 202, 149, 1, 0, 0, 0, 33, 199, 24, 0, 0, 0, 0, 0, 136, 139, 0, 0, 0, 0, 0, 0, 63, 58, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 135, 123, 123, 159, 47, 0, 0, 4, 35, 0, 4, 135, 51, 0, 0, 0, 0, 0, 131, 87, 0, 0, 0, 0, 0, 47, 123, 4, 0, 0, 0, 0, 23, 167, 4, 0, 0, 0, 0, 0, 51, 143, 8, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 28, 5, 10, 14, 88, 31, 0, 65, 69, 85, 173, 122, 191, 24, 0, 0, 0, 36, 9, 112, 83, 0, 0, 15, 3, 0, 55, 95, 2, 0, 0, 0, 0, 6, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 42, 35, 9, 0, 0, 0, 0, 96, 140, 140, 177, 156, 18, 0, 0, 0, 0, 0, 18, 174, 82, 0, 0, 0, 0, 0, 59, 208, 47, 0, 0, 0, 0, 40, 201, 117, 0, 0, 0, 0, 41, 194, 41, 0, 0, 0, 0, 0, 31, 104, 13, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 35, 11, 0, 0, 0, 0, 106, 120, 196, 53, 0, 0, 0, 0, 0, 0, 186, 43, 0, 0, 0, 0, 0, 7, 172, 0, 0, 0, 0, 0, 0, 23, 165, 0, 0, 0, 0, 0, 0, 16, 164, 0, 0, 0, 0, 0, 0, 1, 64, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 135, 165, 190, 173, 63, 0, 0, 135, 201, 201, 192, 239, 130, 0, 0, 0, 0, 0, 66, 208, 43, 0, 0, 0, 0, 34, 208, 108, 0, 0, 0, 0, 87, 212, 52, 0, 0, 0, 0, 0, 164, 81, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 29, 13, 23, 0, 0, 0, 0, 13, 136, 219, 233, 4, 0, 0, 0, 0, 3, 184, 111, 0, 0, 0, 0, 53, 186, 216, 141, 3, 0, 0, 0, 50, 222, 70, 11, 0, 0, 0, 0, 125, 154, 0, 0, 0, 0, 0, 0, 73, 58, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 40, 21, 0, 0, 0, 21, 206, 244, 245, 202, 0, 0, 0, 1, 74, 66, 219, 147, 0, 0, 0, 0, 62, 144, 251, 179, 34, 0, 0, 0, 39, 180, 200, 60, 0, 0, 0, 0, 4, 184, 89, 0, 0, 0, 0, 0, 0, 59, 21, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 151, 160, 151, 202, 61, 0, 0, 0, 42, 15, 26, 169, 26, 0, 0, 0, 118, 161, 214, 173, 24, 0, 0, 0, 55, 95, 129, 10, 0, 0, 0, 0, 39, 175, 5, 0, 0, 0, 0, 0, 76, 80, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 121, 113, 105, 120, 153, 3, 0, 4, 23, 37, 31, 61, 144, 0, 0, 0, 0, 0, 0, 120, 76, 0, 0, 0, 0, 0, 13, 136, 4, 0, 0, 0, 0, 0, 98, 44, 0, 0, 0, 0, 0, 0, 122, 35, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 39, 0, 0, 0, 0, 0, 55, 102, 152, 31, 0, 0, 0, 0, 17, 5, 119, 44, 0, 0, 0, 0, 23, 110, 185, 102, 0, 0, 0, 0, 0, 14, 128, 28, 0, 0, 0, 0, 0, 21, 110, 0, 0, 0, 0, 0, 0, 11, 44, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 44, 0, 0, 0, 65, 177, 211, 182, 204, 1, 0, 0, 83, 103, 55, 4, 147, 2, 0, 0, 0, 0, 0, 77, 197, 0, 0, 0, 0, 0, 41, 210, 97, 0, 0, 0, 0, 104, 205, 40, 0, 0, 0, 0, 0, 101, 64, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 36, 65, 109, 112, 7, 0, 28, 0, 128, 120, 83, 165, 33, 0, 0, 0, 0, 12, 156, 77, 0, 0, 0, 0, 15, 134, 58, 0, 0, 0, 0, 0, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 10, 21, 0, 21, 0, 0, 0, 164, 241, 221, 199, 146, 0, 0, 18, 213, 84, 65, 166, 125, 0, 0, 0, 7, 5, 178, 174, 3, 0, 0, 0, 5, 116, 183, 30, 0, 0, 0, 1, 164, 191, 8, 0, 0, 0, 0, 12, 120, 40, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 125, 160, 156, 176, 164, 34, 0, 8, 79, 81, 45, 54, 175, 43, 0, 0, 0, 0, 0, 81, 172, 0, 0, 0, 0, 0, 0, 184, 80, 0, 0, 0, 0, 0, 79, 113, 1, 0, 0, 0, 0, 0, 81, 126, 8, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 106, 7, 55, 155, 31, 0, 22, 225, 188, 176, 216, 164, 14, 0, 72, 73, 42, 127, 155, 3, 0, 0, 0, 0, 57, 157, 22, 0, 0, 0, 0, 101, 157, 4, 0, 0, 0, 0, 1, 95, 29, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 34, 0, 0, 0, 87, 192, 82, 165, 154, 1, 0, 13, 217, 178, 186, 235, 37, 0, 0, 0, 23, 8, 193, 85, 0, 0, 0, 0, 4, 121, 116, 3, 0, 0, 0, 3, 163, 145, 0, 0, 0, 0, 0, 20, 105, 15, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 172, 175, 70, 161, 0, 0, 0, 1, 189, 133, 224, 203, 0, 0, 0, 1, 86, 0, 136, 122, 0, 0, 0, 0, 0, 0, 168, 91, 0, 0, 0, 0, 0, 0, 168, 34, 0, 0, 0, 0, 0, 0, 133, 43, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 22, 0, 0, 0, 4, 37, 138, 164, 89, 0, 0, 2, 115, 206, 78, 113, 48, 0, 1, 143, 153, 37, 78, 156, 0, 0, 3, 78, 10, 12, 176, 56, 0, 0, 0, 0, 6, 132, 80, 0, 0, 0, 0, 0, 21, 98, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 105, 115, 16, 0, 0, 0, 0, 25, 0, 119, 75, 0, 0, 0, 0, 0, 0, 116, 34, 0, 0, 0, 0, 0, 25, 93, 0, 0, 0, 0, 0, 0, 95, 5, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 2, 35, 38, 15, 0, 50, 62, 49, 128, 139, 153, 19, 0, 2, 0, 6, 2, 89, 53, 0, 0, 0, 0, 0, 43, 75, 0, 0, 0, 0, 0, 12, 73, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 154, 161, 189, 112, 0, 0, 0, 0, 0, 0, 155, 49, 0, 0, 0, 0, 0, 4, 162, 4, 0, 0, 0, 0, 0, 8, 149, 0, 0, 0, 0, 0, 0, 0, 158, 1, 0, 0, 0, 0, 0, 0, 119, 32, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 167, 148, 107, 154, 9, 0, 50, 236, 214, 132, 121, 87, 0, 0, 18, 35, 1, 93, 145, 0, 0, 0, 0, 0, 26, 158, 30, 0, 0, 0, 0, 46, 153, 21, 0, 0, 0, 0, 0, 111, 71, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 80, 130, 140, 157, 133, 19, 0, 21, 85, 49, 36, 49, 148, 82, 0, 0, 0, 0, 0, 94, 159, 4, 0, 0, 0, 0, 12, 161, 32, 0, 0, 0, 0, 0, 127, 43, 0, 0, 0, 0, 0, 0, 115, 11, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 31, 0, 0, 0, 44, 116, 118, 125, 61, 0, 0, 0, 100, 115, 71, 116, 1, 0, 0, 0, 0, 43, 144, 20, 0, 0, 0, 0, 24, 147, 25, 0, 0, 0, 0, 5, 139, 45, 0, 0, 0, 0, 0, 10, 44, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 125, 167, 182, 222, 11, 0, 0, 112, 118, 77, 64, 156, 0, 0, 0, 0, 0, 0, 152, 72, 0, 0, 0, 0, 0, 0, 168, 11, 0, 0, 0, 0, 0, 51, 166, 17, 0, 0, 0, 0, 0, 52, 143, 13, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 34, 67, 0, 0, 0, 27, 119, 192, 180, 150, 0, 0, 124, 188, 125, 34, 123, 31, 0, 0, 65, 16, 0, 73, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 130, 122, 117, 140, 91, 0, 0, 5, 34, 16, 67, 152, 22, 0, 0, 0, 0, 19, 152, 18, 0, 0, 0, 0, 0, 116, 49, 0, 0, 0, 0, 0, 69, 124, 0, 0, 0, 0, 0, 0, 128, 67, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 57, 18, 0, 0, 0, 0, 0, 0, 28, 96, 0, 0, 0, 0, 16, 20, 89, 67, 0, 0, 0, 0, 42, 59, 96, 1, 0, 0, 0, 0, 0, 30, 50, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 54, 41, 0, 0, 0, 0, 0, 63, 144, 140, 0, 0, 0, 0, 0, 0, 133, 57, 0, 0, 0, 0, 0, 78, 202, 76, 0, 0, 0, 0, 1, 153, 78, 32, 0, 0, 0, 0, 46, 157, 0, 0, 0, 0, 0, 0, 37, 72, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 144, 167, 166, 110, 1, 0, 0, 2, 141, 16, 25, 162, 12, 0, 0, 0, 0, 0, 70, 156, 0, 0, 0, 0, 0, 4, 164, 52, 0, 0, 0, 0, 0, 107, 71, 0, 0, 0, 0, 0, 0, 92, 1, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 132, 116, 95, 0, 0, 14, 157, 211, 164, 193, 42, 0, 0, 9, 41, 6, 123, 74, 0, 0, 0, 0, 0, 73, 91, 1, 0, 0, 0, 0, 73, 124, 0, 0, 0, 0, 0, 0, 132, 23, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 41, 41, 0, 0, 0, 0, 32, 163, 210, 196, 0, 0, 0, 0, 0, 3, 166, 170, 7, 0, 0, 0, 28, 175, 215, 95, 2, 0, 0, 0, 8, 175, 108, 0, 0, 0, 0, 0, 66, 223, 9, 0, 0, 0, 0, 0, 44, 88, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 129, 72, 91, 0, 0, 0, 40, 153, 158, 58, 137, 0, 0, 111, 167, 70, 7, 124, 37, 0, 0, 69, 10, 0, 111, 102, 0, 0, 0, 0, 0, 43, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 49, 140, 131, 74, 0, 0, 0, 140, 157, 103, 135, 3, 0, 0, 0, 5, 21, 130, 24, 0, 0, 0, 0, 9, 130, 37, 0, 0, 0, 0, 0, 113, 52, 0, 0, 0, 0, 0, 2, 76, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 33, 2, 0, 0, 42, 128, 137, 137, 217, 28, 0, 0, 0, 0, 0, 61, 168, 0, 0, 0, 0, 95, 140, 198, 66, 0, 0, 0, 0, 96, 98, 138, 0, 0, 0, 0, 0, 12, 152, 26, 0, 0, 0, 0, 0, 17, 82, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 143, 113, 154, 116, 0, 0, 0, 0, 0, 0, 96, 113, 0, 0, 0, 0, 0, 0, 139, 38, 0, 0, 0, 0, 0, 2, 136, 2, 0, 0, 0, 0, 0, 70, 75, 0, 0, 0, 0, 0, 0, 64, 62, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 25, 93, 97, 105, 0, 0, 64, 88, 177, 157, 169, 30, 0, 0, 0, 0, 0, 125, 63, 0, 0, 0, 0, 0, 61, 91, 0, 0, 0, 0, 0, 50, 122, 0, 0, 0, 0, 0, 0, 53, 32, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 108, 153, 29, 0, 0, 0, 0, 0, 0, 142, 27, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 0, 0, 3, 132, 0, 0, 0, 0, 0, 0, 1, 117, 1, 0, 0, 0, 0, 0, 0, 50, 9, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 109, 87, 137, 107, 0, 0, 0, 21, 109, 120, 123, 131, 0, 0, 0, 0, 0, 0, 110, 92, 0, 0, 0, 0, 0, 0, 137, 51, 0, 0, 0, 0, 0, 0, 153, 12, 0, 0, 0, 0, 0, 0, 131, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 168, 221, 218, 139, 0, 0, 0, 0, 138, 157, 213, 213, 0, 0, 0, 0, 0, 1, 201, 136, 0, 0, 0, 0, 0, 54, 215, 42, 0, 0, 0, 0, 5, 178, 107, 0, 0, 0, 0, 0, 13, 146, 27, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 182, 236, 218, 19, 0, 0, 0, 133, 138, 161, 235, 17, 0, 0, 0, 0, 52, 231, 102, 0, 0, 0, 0, 26, 194, 146, 9, 0, 0, 0, 0, 134, 194, 3, 0, 0, 0, 0, 0, 124, 73, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 175, 203, 207, 175, 0, 0, 0, 73, 112, 62, 110, 252, 0, 0, 0, 0, 0, 0, 154, 164, 0, 0, 0, 0, 0, 7, 221, 98, 0, 0, 0, 0, 0, 77, 154, 0, 0, 0, 0, 0, 0, 82, 47, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 127, 99, 172, 0, 0, 0, 6, 140, 4, 25, 167, 0, 0, 0, 0, 7, 0, 100, 127, 0, 0, 0, 0, 0, 0, 159, 63, 0, 0, 0, 0, 0, 10, 168, 6, 0, 0, 0, 0, 0, 28, 85, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 252, 231, 194, 0, 0, 0, 0, 91, 161, 192, 250, 16, 0, 0, 0, 0, 24, 221, 183, 0, 0, 0, 0, 13, 145, 203, 57, 0, 0, 0, 0, 117, 229, 25, 0, 0, 0, 0, 0, 86, 106, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 9, 28, 17, 0, 0, 0, 0, 228, 246, 241, 208, 0, 0, 0, 0, 108, 82, 146, 206, 0, 0, 0, 0, 0, 0, 202, 155, 0, 0, 0, 0, 0, 44, 247, 97, 0, 0, 0, 0, 0, 146, 170, 4, 0, 0, 0, 0, 0, 74, 65, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 55, 55, 11, 0, 0, 0, 0, 71, 219, 235, 147, 0, 0, 0, 0, 4, 28, 151, 171, 0, 0, 0, 0, 0, 27, 239, 99, 0, 0, 0, 0, 0, 111, 171, 11, 0, 0, 0, 0, 28, 219, 55, 0, 0, 0, 0, 0, 8, 87, 8, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 216, 247, 252, 176, 0, 0, 0, 0, 101, 160, 214, 196, 0, 0, 0, 0, 0, 0, 207, 164, 0, 0, 0, 0, 0, 42, 251, 99, 0, 0, 0, 0, 0, 136, 181, 9, 0, 0, 0, 0, 0, 80, 92, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 54, 28, 0, 0, 0, 28, 219, 225, 243, 161, 0, 0, 0, 1, 53, 42, 206, 179, 0, 0, 0, 0, 0, 31, 252, 125, 0, 0, 0, 0, 0, 80, 247, 68, 0, 0, 0, 0, 0, 134, 200, 16, 0, 0, 0, 0, 0, 47, 80, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 41, 60, 30, 0, 0, 0, 42, 197, 160, 196, 191, 0, 0, 0, 0, 14, 1, 186, 183, 0, 0, 0, 0, 0, 47, 242, 78, 0, 0, 0, 0, 0, 113, 220, 65, 0, 0, 0, 0, 9, 184, 149, 5, 0, 0, 0, 0, 6, 100, 28, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 41, 41, 2, 0, 0, 0, 0, 172, 175, 201, 118, 0, 0, 0, 0, 27, 1, 129, 159, 0, 0, 0, 0, 0, 12, 224, 91, 0, 0, 0, 0, 0, 84, 185, 17, 0, 0, 0, 0, 26, 194, 36, 0, 0, 0, 0, 0, 23, 76, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 104, 67, 87, 54, 0, 0, 0, 60, 111, 132, 179, 147, 0, 0, 0, 0, 16, 129, 109, 7, 0, 0, 1, 81, 132, 53, 0, 0, 0, 0, 142, 62, 5, 0, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 169, 150, 129, 117, 103, 0, 0, 177, 92, 24, 9, 45, 127, 0, 0, 81, 0, 0, 40, 178, 12, 0, 0, 0, 0, 0, 149, 89, 0, 0, 0, 0, 0, 57, 122, 1, 0, 0, 0, 0, 0, 133, 27, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 181, 187, 189, 138, 0, 0, 0, 117, 113, 35, 112, 197, 0, 0, 0, 126, 50, 0, 90, 213, 0, 0, 0, 12, 3, 0, 90, 197, 0, 0, 0, 0, 0, 0, 90, 196, 0, 0, 0, 0, 0, 0, 43, 93, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 113, 138, 170, 164, 180, 135, 0, 0, 0, 4, 52, 47, 137, 182, 0, 0, 0, 0, 0, 0, 170, 98, 0, 0, 0, 0, 0, 0, 198, 80, 0, 0, 0, 0, 0, 0, 198, 93, 0, 0, 0, 0, 0, 0, 128, 72, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 220, 214, 51, 0, 0, 0, 0, 35, 86, 204, 73, 0, 0, 0, 0, 0, 0, 176, 30, 0, 0, 0, 0, 0, 5, 160, 2, 0, 0, 0, 0, 0, 35, 149, 0, 0, 0, 0, 0, 0, 26, 100, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 116, 135, 153, 134, 134, 40, 0, 1, 3, 13, 34, 71, 200, 51, 0, 0, 0, 0, 1, 157, 80, 0, 0, 0, 0, 0, 59, 116, 2, 0, 0, 0, 0, 14, 159, 2, 0, 0, 0, 0, 0, 65, 134, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 46, 37, 0, 0, 0, 0, 170, 212, 195, 208, 0, 0, 0, 0, 53, 31, 122, 201, 0, 0, 0, 0, 0, 40, 224, 89, 0, 0, 0, 0, 28, 182, 151, 10, 0, 0, 0, 0, 178, 191, 7, 0, 0, 0, 0, 0, 74, 53, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 29, 0, 0, 0, 0, 0, 0, 16, 214, 158, 177, 111, 0, 0, 0, 0, 91, 21, 174, 89, 0, 0, 0, 0, 7, 122, 238, 128, 1, 0, 0, 0, 4, 43, 182, 81, 1, 0, 0, 0, 0, 0, 158, 28, 0, 0, 0, 0, 0, 0, 75, 21, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 22, 0, 0, 0, 0, 0, 49, 173, 157, 17, 0, 0, 0, 0, 14, 15, 117, 14, 0, 0, 0, 0, 35, 171, 198, 30, 0, 0, 0, 0, 7, 69, 122, 0, 0, 0, 0, 0, 0, 74, 47, 0, 0, 0, 0, 0, 0, 30, 10, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 135, 167, 210, 225, 0, 0, 0, 0, 212, 204, 169, 226, 0, 0, 0, 0, 8, 0, 151, 173, 0, 0, 0, 0, 0, 34, 237, 96, 0, 0, 0, 0, 0, 145, 132, 1, 0, 0, 0, 0, 0, 109, 35, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 49, 20, 0, 0, 0, 0, 44, 228, 252, 174, 0, 0, 0, 0, 23, 92, 147, 202, 0, 0, 0, 0, 0, 18, 219, 96, 0, 0, 0, 0, 0, 123, 153, 8, 0, 0, 0, 0, 66, 226, 26, 0, 0, 0, 0, 0, 29, 87, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 167, 235, 243, 247, 0, 0, 0, 0, 147, 103, 163, 171, 0, 0, 0, 0, 0, 12, 207, 51, 0, 0, 0, 0, 0, 83, 131, 0, 0, 0, 0, 0, 47, 207, 15, 0, 0, 0, 0, 0, 91, 123, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122, 112, 5, 0, 0, 0, 0, 0, 193, 138, 97, 102, 0, 0, 0, 0, 153, 83, 0, 70, 15, 0, 0, 0, 29, 18, 0, 38, 51, 0, 0, 0, 0, 0, 0, 13, 56, 0, 0, 0, 0, 0, 0, 7, 67, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136, 216, 248, 227, 4, 0, 0, 0, 61, 121, 175, 231, 6, 0, 0, 0, 0, 14, 223, 97, 0, 0, 0, 0, 0, 102, 172, 12, 0, 0, 0, 0, 44, 229, 27, 0, 0, 0, 0, 0, 34, 150, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 48, 63, 31, 0, 0, 0, 68, 172, 137, 73, 199, 19, 0, 0, 12, 17, 0, 35, 211, 14, 0, 0, 0, 0, 0, 145, 164, 0, 0, 0, 0, 0, 48, 223, 69, 0, 0, 0, 0, 61, 213, 57, 0, 0, 0, 0, 0, 39, 82, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 62, 29, 0, 0, 0, 0, 0, 25, 194, 209, 206, 74, 0, 0, 0, 0, 12, 25, 238, 176, 0, 0, 0, 0, 0, 48, 253, 149, 0, 0, 0, 0, 0, 109, 235, 121, 0, 0, 0, 0, 0, 151, 183, 26, 0, 0, 0, 0, 0, 48, 29, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 2, 0, 0, 0, 0, 0, 15, 152, 110, 172, 1, 0, 0, 0, 66, 105, 80, 117, 0, 0, 0, 0, 104, 35, 133, 43, 0, 0, 0, 0, 6, 1, 127, 4, 0, 0, 0, 0, 0, 32, 118, 0, 0, 0, 0, 0, 0, 23, 50, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 25, 116, 128, 119, 37, 0, 0, 108, 139, 83, 42, 78, 157, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 0, 0, 0, 119, 0, 0, 0, 0, 0, 0, 4, 124, 0, 0, 0, 0, 0, 0, 17, 104, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 135, 156, 137, 164, 99, 0, 0, 21, 151, 98, 122, 226, 46, 0, 0, 0, 0, 0, 170, 126, 0, 0, 0, 0, 0, 54, 179, 25, 0, 0, 0, 0, 5, 183, 23, 0, 0, 0, 0, 0, 7, 152, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 51, 30, 2, 0, 0, 0, 0, 6, 109, 137, 160, 150, 0, 0, 0, 0, 0, 0, 29, 174, 0, 0, 0, 0, 0, 0, 148, 68, 0, 0, 0, 0, 0, 54, 133, 2, 0, 0, 0, 0, 0, 167, 31, 0, 0, 0, 0, 0, 0, 88, 15, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 147, 150, 168, 176, 78, 0, 0, 115, 102, 10, 1, 75, 181, 0, 0, 0, 0, 0, 117, 196, 42, 0, 0, 0, 0, 80, 189, 49, 0, 0, 0, 0, 109, 184, 6, 0, 0, 0, 0, 0, 151, 60, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 152, 128, 162, 128, 0, 0, 0, 102, 67, 15, 140, 68, 0, 0, 0, 0, 4, 166, 82, 0, 0, 0, 0, 5, 106, 97, 0, 0, 0, 0, 0, 156, 104, 0, 0, 0, 0, 0, 7, 120, 8, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 18, 0, 0, 0, 0, 0, 0, 101, 248, 239, 159, 112, 10, 0, 0, 6, 90, 186, 226, 251, 123, 0, 0, 0, 0, 3, 124, 241, 154, 0, 0, 0, 3, 97, 246, 195, 31, 0, 0, 0, 134, 248, 103, 7, 0, 0, 0, 0, 72, 116, 7, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 91, 174, 3, 0, 0, 0, 0, 38, 105, 99, 0, 0, 0, 0, 0, 8, 106, 0, 0, 0, 0, 0, 0, 79, 36, 0, 0, 0, 0, 0, 41, 115, 0, 0, 0, 0, 0, 0, 72, 42, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 139, 177, 222, 23, 0, 0, 0, 91, 127, 111, 192, 4, 0, 0, 0, 14, 17, 171, 67, 0, 0, 0, 0, 15, 124, 129, 30, 0, 0, 0, 0, 89, 159, 0, 0, 0, 0, 0, 0, 124, 45, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 93, 120, 136, 205, 26, 0, 0, 42, 166, 102, 54, 185, 7, 0, 0, 0, 0, 0, 154, 82, 0, 0, 0, 0, 0, 75, 104, 2, 0, 0, 0, 0, 97, 112, 0, 0, 0, 0, 0, 1, 97, 9, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 127, 133, 200, 58, 0, 0, 4, 138, 87, 59, 160, 0, 0, 0, 0, 0, 1, 145, 30, 0, 0, 0, 0, 0, 80, 75, 0, 0, 0, 0, 0, 102, 97, 0, 0, 0, 0, 0, 0, 107, 3, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 115, 144, 194, 35, 0, 0, 0, 92, 118, 59, 158, 2, 0, 0, 0, 0, 1, 161, 43, 0, 0, 0, 0, 0, 78, 104, 1, 0, 0, 0, 0, 78, 139, 0, 0, 0, 0, 0, 0, 116, 42, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 115, 141, 169, 0, 0, 0, 0, 54, 38, 122, 104, 0, 0, 0, 0, 0, 21, 123, 4, 0, 0, 0, 0, 0, 103, 37, 0, 0, 0, 0, 0, 71, 108, 0, 0, 0, 0, 0, 0, 95, 20, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 168, 235, 85, 0, 0, 0, 0, 4, 4, 178, 92, 0, 0, 0, 0, 0, 0, 213, 58, 0, 0, 0, 0, 0, 10, 205, 23, 0, 0, 0, 0, 0, 46, 164, 3, 0, 0, 0, 0, 0, 49, 76, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 57, 12, 0, 0, 0, 0, 77, 154, 154, 110, 0, 0, 0, 0, 5, 2, 95, 126, 0, 0, 0, 0, 0, 0, 173, 56, 0, 0, 0, 0, 0, 64, 136, 7, 0, 0, 0, 0, 42, 167, 6, 0, 0, 0, 0, 0, 50, 55, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 9, 0, 0, 0, 0, 0, 19, 230, 236, 193, 78, 0, 0, 0, 0, 73, 190, 251, 126, 31, 9, 0, 0, 100, 217, 229, 177, 169, 51, 0, 0, 11, 179, 177, 0, 0, 0, 0, 0, 43, 232, 118, 0, 0, 0, 0, 0, 4, 69, 10, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 24, 0, 0, 0, 0, 0, 54, 176, 166, 159, 122, 0, 0, 0, 103, 110, 10, 150, 75, 0, 0, 0, 0, 1, 129, 169, 0, 0, 0, 0, 12, 109, 156, 28, 0, 0, 0, 34, 180, 102, 0, 0, 0, 0, 0, 31, 65, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 115, 137, 83, 124, 0, 0, 0, 0, 162, 88, 115, 167, 0, 0, 0, 0, 121, 0, 0, 100, 0, 0, 0, 0, 27, 0, 26, 116, 0, 0, 0, 0, 0, 0, 62, 100, 0, 0, 0, 0, 0, 0, 78, 95, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 63, 52, 8, 0, 0, 0, 0, 138, 239, 241, 243, 96, 0, 0, 0, 42, 157, 233, 251, 204, 80, 0, 0, 0, 211, 250, 251, 240, 161, 0, 0, 0, 79, 202, 233, 91, 22, 0, 0, 0, 0, 130, 168, 4, 0, 0, 0, 0, 0, 13, 45, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 87, 165, 169, 129, 0, 0, 0, 47, 157, 61, 21, 144, 0, 0, 0, 1, 0, 0, 99, 105, 0, 0, 0, 0, 0, 9, 155, 25, 0, 0, 0, 0, 5, 122, 51, 0, 0, 0, 0, 0, 35, 121, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 173, 196, 197, 197, 15, 0, 0, 32, 56, 15, 99, 229, 20, 0, 0, 0, 0, 5, 179, 41, 0, 0, 0, 0, 0, 26, 165, 0, 0, 0, 0, 0, 0, 71, 129, 0, 0, 0, 0, 0, 0, 59, 78, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 124, 135, 147, 133, 0, 0, 0, 25, 81, 16, 50, 133, 0, 0, 0, 0, 0, 0, 130, 51, 0, 0, 0, 0, 0, 20, 125, 0, 0, 0, 0, 0, 6, 126, 10, 0, 0, 0, 0, 0, 33, 91, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 146, 128, 96, 64, 23, 0, 0, 24, 104, 134, 219, 150, 159, 35, 0, 0, 0, 0, 10, 0, 88, 113, 0, 0, 0, 0, 0, 40, 176, 32, 0, 0, 0, 0, 31, 165, 45, 0, 0, 0, 0, 0, 9, 16, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 159, 171, 146, 169, 0, 0, 0, 17, 66, 25, 1, 138, 12, 0, 0, 0, 0, 0, 78, 143, 0, 0, 0, 0, 0, 0, 173, 57, 0, 0, 0, 0, 8, 106, 83, 1, 0, 0, 0, 0, 34, 135, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 15, 17, 33, 0, 0, 0, 0, 14, 108, 202, 82, 0, 0, 0, 0, 0, 0, 128, 9, 0, 0, 0, 0, 1, 75, 138, 0, 0, 0, 0, 0, 1, 119, 86, 0, 0, 0, 0, 0, 0, 92, 58, 0, 0, 0, 0, 0, 0, 29, 50, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 161, 153, 173, 159, 0, 0, 0, 34, 62, 21, 23, 141, 0, 0, 0, 0, 0, 0, 124, 115, 0, 0, 0, 0, 0, 17, 167, 24, 0, 0, 0, 0, 0, 110, 49, 0, 0, 0, 0, 0, 7, 104, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 108, 148, 166, 202, 0, 0, 0, 1, 96, 68, 47, 151, 0, 0, 0, 0, 0, 0, 143, 64, 0, 0, 0, 0, 0, 21, 141, 5, 0, 0, 0, 0, 2, 122, 35, 0, 0, 0, 0, 0, 27, 113, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 119, 151, 170, 167, 8, 0, 0, 39, 131, 96, 44, 167, 20, 0, 0, 0, 0, 0, 55, 137, 0, 0, 0, 0, 0, 0, 144, 60, 0, 0, 0, 0, 0, 63, 89, 0, 0, 0, 0, 0, 0, 132, 8, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 141, 165, 145, 29, 0, 0, 0, 0, 0, 0, 145, 98, 0, 0, 0, 0, 0, 0, 167, 57, 0, 0, 0, 0, 0, 16, 166, 5, 0, 0, 0, 0, 0, 100, 66, 0, 0, 0, 0, 0, 0, 94, 5, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 115, 146, 174, 115, 0, 0, 0, 27, 108, 69, 87, 144, 0, 0, 0, 0, 0, 0, 132, 75, 0, 0, 0, 0, 0, 8, 146, 9, 0, 0, 0, 0, 0, 96, 40, 0, 0, 0, 0, 0, 6, 134, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 119, 157, 157, 197, 6, 0, 0, 10, 79, 55, 134, 131, 0, 0, 0, 0, 0, 0, 159, 27, 0, 0, 0, 0, 0, 12, 141, 1, 0, 0, 0, 0, 0, 53, 81, 0, 0, 0, 0, 0, 0, 40, 67, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79, 152, 155, 158, 0, 0, 0, 0, 127, 68, 30, 155, 0, 0, 0, 0, 0, 0, 132, 77, 0, 0, 0, 0, 0, 8, 139, 8, 0, 0, 0, 0, 3, 121, 31, 0, 0, 0, 0, 0, 32, 111, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 121, 101, 132, 78, 0, 0, 0, 0, 0, 0, 63, 116, 0, 0, 0, 0, 0, 0, 117, 52, 0, 0, 0, 0, 0, 20, 121, 1, 0, 0, 0, 0, 0, 114, 22, 0, 0, 0, 0, 0, 2, 71, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108, 169, 169, 125, 16, 0, 0, 0, 74, 133, 148, 241, 53, 0, 0, 0, 0, 3, 165, 249, 180, 113, 0, 0, 0, 0, 77, 246, 155, 78, 0, 0, 0, 0, 23, 125, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 132, 132, 164, 0, 0, 0, 0, 54, 6, 4, 136, 0, 0, 0, 0, 0, 0, 90, 109, 0, 0, 0, 0, 0, 3, 143, 24, 0, 0, 0, 0, 10, 128, 31, 0, 0, 0, 0, 0, 55, 104, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 150, 139, 184, 5, 0, 0, 11, 94, 34, 1, 141, 7, 0, 0, 0, 0, 0, 90, 118, 0, 0, 0, 0, 0, 19, 148, 24, 0, 0, 0, 0, 48, 156, 15, 0, 0, 0, 0, 0, 96, 64, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 38, 55, 11, 0, 0, 0, 0, 77, 104, 91, 117, 0, 0, 0, 0, 0, 0, 68, 104, 0, 0, 0, 0, 0, 3, 139, 18, 0, 0, 0, 0, 0, 79, 82, 0, 0, 0, 0, 0, 97, 131, 0, 0, 0, 0, 0, 0, 66, 19, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 150, 155, 141, 158, 25, 0, 0, 19, 86, 56, 16, 140, 32, 0, 0, 0, 0, 0, 61, 143, 0, 0, 0, 0, 0, 0, 148, 58, 0, 0, 0, 0, 0, 103, 75, 0, 0, 0, 0, 0, 66, 134, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 145, 165, 63, 0, 0, 0, 0, 9, 14, 137, 33, 0, 0, 0, 0, 0, 22, 123, 0, 0, 0, 0, 0, 0, 81, 62, 0, 0, 0, 0, 0, 0, 120, 9, 0, 0, 0, 0, 0, 0, 79, 10, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 170, 171, 161, 207, 35, 0, 0, 12, 67, 40, 12, 152, 24, 0, 0, 0, 0, 0, 108, 112, 0, 0, 0, 0, 0, 34, 147, 16, 0, 0, 0, 0, 61, 168, 11, 0, 0, 0, 0, 0, 102, 68, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 39, 48, 22, 0, 0, 0, 0, 14, 87, 189, 109, 0, 0, 0, 0, 0, 1, 192, 52, 0, 0, 0, 0, 0, 64, 135, 1, 0, 0, 0, 0, 8, 159, 45, 0, 0, 0, 0, 0, 109, 147, 0, 0, 0, 0, 0, 0, 70, 40, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 160, 174, 200, 208, 0, 0, 0, 0, 10, 16, 111, 155, 0, 0, 0, 0, 0, 0, 190, 70, 0, 0, 0, 0, 0, 37, 167, 10, 0, 0, 0, 0, 0, 145, 72, 0, 0, 0, 0, 0, 0, 116, 19, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 119, 168, 217, 238, 63, 0, 14, 189, 245, 210, 142, 228, 63, 0, 0, 56, 42, 0, 70, 217, 7, 0, 0, 0, 0, 0, 126, 196, 0, 0, 0, 0, 0, 0, 217, 119, 0, 0, 0, 0, 0, 0, 166, 63, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 132, 120, 124, 50, 0, 0, 0, 39, 36, 0, 51, 146, 0, 0, 0, 0, 0, 0, 22, 128, 0, 0, 0, 0, 0, 0, 87, 90, 0, 0, 0, 0, 0, 0, 127, 17, 0, 0, 0, 0, 0, 1, 110, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 106, 163, 182, 190, 29, 0, 0, 78, 252, 234, 199, 251, 45, 0, 0, 15, 40, 5, 121, 195, 3, 0, 0, 0, 0, 3, 197, 65, 0, 0, 0, 0, 0, 76, 163, 2, 0, 0, 0, 0, 0, 131, 77, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 177, 200, 236, 209, 7, 0, 0, 8, 88, 61, 131, 202, 3, 0, 0, 0, 0, 8, 191, 55, 0, 0, 0, 0, 0, 86, 138, 0, 0, 0, 0, 0, 34, 196, 22, 0, 0, 0, 0, 0, 56, 121, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 33, 0, 0, 0, 0, 93, 180, 225, 139, 0, 0, 0, 0, 69, 94, 164, 89, 0, 0, 0, 0, 0, 4, 166, 14, 0, 0, 0, 0, 0, 36, 138, 0, 0, 0, 0, 0, 0, 110, 78, 0, 0, 0, 0, 0, 0, 56, 26, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 177, 194, 170, 0, 0, 0, 0, 4, 4, 109, 201, 0, 0, 0, 0, 0, 10, 213, 65, 0, 0, 0, 0, 0, 79, 144, 3, 0, 0, 0, 0, 6, 188, 33, 0, 0, 0, 0, 0, 5, 126, 7, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 158, 192, 219, 224, 12, 0, 0, 10, 139, 116, 151, 211, 3, 0, 0, 0, 0, 4, 193, 91, 0, 0, 0, 0, 0, 78, 162, 12, 0, 0, 0, 0, 73, 188, 16, 0, 0, 0, 0, 0, 134, 71, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122, 186, 198, 186, 0, 0, 0, 0, 27, 58, 96, 165, 0, 0, 0, 0, 7, 136, 238, 184, 19, 0, 0, 0, 0, 46, 142, 54, 13, 0, 0, 0, 41, 194, 17, 0, 0, 0, 0, 0, 50, 101, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 83, 89, 85, 68, 0, 0, 0, 112, 22, 46, 48, 122, 0, 0, 0, 19, 0, 35, 120, 159, 62, 0, 0, 0, 0, 19, 114, 108, 22, 0, 0, 0, 0, 0, 71, 100, 0, 0, 0, 0, 0, 0, 35, 64, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 154, 212, 250, 154, 0, 0, 0, 29, 180, 129, 151, 195, 0, 0, 0, 0, 0, 0, 200, 122, 0, 0, 0, 0, 0, 41, 223, 38, 0, 0, 0, 0, 0, 161, 118, 0, 0, 0, 0, 0, 0, 106, 36, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 114, 123, 125, 209, 69, 0, 0, 0, 2, 30, 40, 177, 48, 0, 0, 0, 0, 0, 0, 169, 28, 0, 0, 0, 0, 0, 2, 186, 20, 0, 0, 0, 0, 0, 7, 194, 14, 0, 0, 0, 0, 0, 4, 139, 8, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 19, 0, 0, 0, 0, 0, 123, 178, 149, 97, 0, 0, 0, 0, 153, 71, 113, 137, 0, 0, 0, 0, 0, 0, 182, 55, 0, 0, 0, 0, 0, 25, 162, 2, 0, 0, 0, 0, 0, 85, 99, 0, 0, 0, 0, 0, 0, 41, 41, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 97, 144, 103, 0, 0, 0, 40, 119, 64, 56, 101, 0, 0, 0, 3, 0, 0, 77, 90, 0, 0, 0, 0, 0, 0, 111, 61, 0, 0, 0, 0, 0, 0, 136, 3, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 211, 242, 252, 220, 18, 0, 0, 72, 224, 162, 174, 249, 43, 0, 0, 0, 0, 0, 168, 234, 24, 0, 0, 0, 0, 31, 232, 127, 0, 0, 0, 0, 25, 191, 183, 10, 0, 0, 0, 0, 30, 171, 52, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 251, 252, 252, 175, 0, 0, 0, 75, 141, 113, 165, 239, 6, 0, 0, 0, 0, 0, 179, 194, 0, 0, 0, 0, 0, 28, 245, 120, 0, 0, 0, 0, 5, 148, 196, 21, 0, 0, 0, 0, 13, 147, 81, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 36, 8, 0, 0, 0, 5, 93, 113, 165, 187, 0, 0, 0, 39, 180, 146, 11, 158, 24, 0, 0, 51, 206, 50, 4, 150, 15, 0, 0, 2, 28, 0, 64, 190, 0, 0, 0, 0, 0, 8, 189, 56, 0, 0, 0, 0, 0, 12, 86, 1, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 39, 50, 30, 0, 0, 0, 0, 37, 59, 117, 118, 0, 0, 0, 0, 0, 0, 132, 37, 0, 0, 0, 0, 65, 115, 187, 108, 12, 0, 0, 0, 36, 127, 61, 9, 0, 0, 0, 0, 45, 140, 0, 0, 0, 0, 0, 0, 50, 53, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 164, 130, 167, 130, 0, 0, 0, 3, 33, 0, 90, 130, 0, 0, 0, 0, 0, 0, 155, 76, 0, 0, 0, 0, 0, 0, 165, 22, 0, 0, 0, 0, 0, 2, 157, 16, 0, 0, 0, 0, 0, 0, 132, 40, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 199, 185, 193, 168, 0, 0, 0, 101, 186, 161, 194, 242, 0, 0, 0, 0, 0, 0, 198, 157, 0, 0, 0, 0, 0, 10, 235, 90, 0, 0, 0, 0, 0, 75, 194, 20, 0, 0, 0, 0, 0, 55, 100, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 89, 94, 182, 0, 0, 0, 0, 15, 1, 71, 130, 0, 0, 0, 0, 0, 5, 129, 10, 0, 0, 0, 0, 0, 74, 68, 0, 0, 0, 0, 0, 27, 145, 0, 0, 0, 0, 0, 0, 61, 98, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 28, 0, 0, 0, 0, 0, 0, 105, 88, 114, 81, 0, 0, 0, 0, 21, 0, 47, 130, 0, 0, 0, 0, 0, 0, 113, 82, 0, 0, 0, 0, 0, 3, 142, 14, 0, 0, 0, 0, 0, 97, 50, 0, 0, 0, 0, 0, 0, 69, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 192, 169, 221, 0, 0, 0, 0, 77, 32, 97, 147, 0, 0, 0, 0, 0, 0, 183, 31, 0, 0, 0, 0, 0, 47, 138, 0, 0, 0, 0, 0, 0, 121, 74, 0, 0, 0, 0, 0, 0, 97, 43, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 119, 95, 6, 0, 0, 0, 0, 1, 20, 141, 88, 0, 0, 0, 0, 0, 0, 93, 132, 0, 0, 0, 38, 128, 119, 177, 135, 0, 0, 0, 23, 75, 98, 194, 101, 0, 0, 0, 0, 0, 0, 155, 43, 0, 0, 0, 0, 0, 0, 27, 1, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87, 229, 230, 235, 162, 0, 0, 0, 6, 67, 83, 155, 204, 0, 0, 0, 0, 0, 0, 159, 172, 0, 0, 0, 0, 0, 0, 208, 124, 0, 0, 0, 0, 0, 35, 228, 45, 0, 0, 0, 0, 0, 28, 116, 3, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 230, 164, 96, 45, 0, 0, 0, 21, 167, 82, 162, 173, 0, 0, 0, 0, 0, 0, 128, 135, 0, 0, 0, 0, 0, 0, 176, 78, 0, 0, 0, 0, 0, 11, 181, 10, 0, 0, 0, 0, 0, 24, 108, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 5, 29, 0, 0, 0, 70, 149, 140, 195, 137, 0, 0, 0, 2, 10, 0, 154, 96, 0, 0, 0, 0, 68, 108, 196, 129, 0, 0, 0, 0, 77, 113, 215, 117, 0, 0, 0, 0, 0, 0, 185, 11, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 140, 153, 6, 0, 0, 0, 0, 22, 175, 64, 0, 0, 0, 0, 0, 42, 80, 0, 0, 0, 0, 0, 0, 111, 27, 0, 0, 0, 0, 0, 9, 118, 0, 0, 0, 0, 0, 0, 5, 76, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 26, 0, 0, 0, 0, 0, 0, 190, 195, 118, 68, 0, 0, 0, 0, 127, 64, 96, 175, 0, 0, 0, 0, 0, 0, 102, 138, 0, 0, 0, 0, 0, 0, 171, 58, 0, 0, 0, 0, 0, 43, 142, 12, 0, 0, 0, 0, 0, 31, 96, 21, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 149, 36, 0, 0, 20, 0, 0, 155, 189, 216, 157, 174, 147, 0, 0, 136, 0, 23, 117, 245, 52, 0, 0, 17, 0, 0, 136, 179, 2, 0, 0, 0, 0, 21, 192, 30, 0, 0, 0, 0, 0, 22, 66, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 223, 221, 198, 189, 209, 22, 0, 63, 115, 76, 96, 92, 218, 30, 0, 0, 0, 0, 0, 100, 223, 9, 0, 0, 0, 0, 2, 201, 141, 0, 0, 0, 0, 0, 60, 199, 21, 0, 0, 0, 0, 0, 103, 86, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87, 124, 125, 153, 0, 0, 0, 0, 46, 28, 61, 111, 0, 0, 0, 0, 0, 0, 127, 35, 0, 0, 0, 0, 0, 36, 88, 0, 0, 0, 0, 0, 19, 128, 1, 0, 0, 0, 0, 0, 79, 75, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 145, 186, 168, 196, 168, 0, 0, 0, 25, 27, 7, 100, 186, 0, 0, 0, 0, 0, 0, 157, 112, 0, 0, 0, 0, 0, 0, 196, 67, 0, 0, 0, 0, 0, 0, 210, 36, 0, 0, 0, 0, 0, 0, 134, 51, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 167, 186, 151, 173, 0, 0, 0, 0, 170, 59, 28, 163, 0, 0, 0, 0, 16, 0, 91, 147, 0, 0, 0, 0, 0, 0, 157, 52, 0, 0, 0, 0, 0, 56, 118, 0, 0, 0, 0, 0, 0, 97, 33, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 51, 48, 2, 0, 0, 0, 0, 23, 79, 173, 71, 0, 0, 0, 0, 0, 0, 162, 61, 0, 0, 0, 0, 0, 9, 165, 5, 0, 0, 0, 0, 0, 60, 112, 0, 0, 0, 0, 0, 0, 106, 57, 0, 0, 0, 0, 0, 0, 40, 23, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 181, 178, 172, 152, 0, 0, 0, 18, 12, 0, 43, 191, 0, 0, 0, 0, 0, 0, 113, 154, 0, 0, 0, 0, 0, 0, 184, 78, 0, 0, 0, 0, 0, 85, 124, 1, 0, 0, 0, 0, 0, 109, 64, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 182, 165, 179, 149, 0, 0, 0, 19, 43, 3, 110, 148, 0, 0, 0, 0, 0, 0, 177, 88, 0, 0, 0, 0, 0, 1, 188, 30, 0, 0, 0, 0, 0, 53, 175, 17, 0, 0, 0, 0, 0, 50, 89, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 107, 12, 1, 0, 0, 0, 0, 154, 175, 149, 168, 0, 0, 0, 0, 0, 3, 42, 161, 0, 0, 0, 0, 0, 0, 110, 112, 0, 0, 0, 0, 0, 0, 143, 16, 0, 0, 0, 0, 0, 0, 100, 11, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87, 188, 189, 179, 46, 0, 0, 0, 0, 14, 25, 151, 108, 0, 0, 0, 0, 0, 0, 180, 74, 0, 0, 0, 0, 0, 5, 193, 24, 0, 0, 0, 0, 0, 19, 186, 13, 0, 0, 0, 0, 0, 12, 145, 16, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 115, 222, 202, 164, 182, 0, 0, 0, 60, 53, 14, 28, 195, 0, 0, 0, 0, 0, 0, 111, 181, 0, 0, 0, 0, 0, 2, 193, 90, 0, 0, 0, 0, 0, 53, 168, 4, 0, 0, 0, 0, 0, 77, 118, 19, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 88, 149, 190, 10, 0, 0, 3, 150, 146, 43, 149, 1, 0, 0, 0, 0, 1, 155, 73, 0, 0, 0, 0, 0, 76, 98, 0, 0, 0, 0, 0, 57, 157, 2, 0, 0, 0, 0, 0, 100, 67, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 77, 77, 64, 74, 63, 0, 0, 23, 93, 91, 89, 108, 119, 0, 0, 0, 0, 0, 35, 156, 151, 50, 0, 0, 0, 0, 0, 98, 74, 0, 0, 0, 0, 0, 0, 90, 66, 0, 0, 0, 0, 0, 0, 18, 14, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 30, 43, 0, 0, 0, 137, 237, 240, 217, 239, 7, 0, 0, 9, 55, 58, 81, 222, 5, 0, 0, 4, 126, 155, 226, 199, 51, 0, 0, 2, 128, 137, 223, 117, 0, 0, 0, 0, 0, 10, 230, 45, 0, 0, 0, 0, 0, 17, 105, 10, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 145, 186, 146, 141, 127, 9, 0, 0, 29, 59, 53, 68, 209, 13, 0, 0, 0, 0, 0, 127, 124, 0, 0, 0, 0, 0, 2, 188, 63, 0, 0, 0, 0, 0, 85, 109, 0, 0, 0, 0, 0, 0, 99, 35, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139, 171, 127, 79, 43, 0, 0, 0, 155, 115, 115, 163, 155, 99, 0, 0, 115, 63, 0, 0, 12, 155, 0, 0, 87, 27, 0, 0, 51, 111, 0, 0, 0, 0, 0, 0, 71, 79, 0, 0, 0, 0, 0, 0, 31, 95, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 152, 159, 173, 154, 0, 0, 0, 0, 4, 0, 89, 146, 0, 0, 0, 0, 0, 0, 169, 61, 0, 0, 0, 0, 0, 8, 175, 8, 0, 0, 0, 0, 0, 62, 118, 2, 0, 0, 0, 0, 0, 43, 117, 5, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 124, 197, 171, 218, 133, 0, 0, 0, 18, 28, 2, 127, 154, 0, 0, 0, 0, 0, 0, 152, 125, 0, 0, 0, 0, 0, 0, 198, 67, 0, 0, 0, 0, 0, 18, 190, 8, 0, 0, 0, 0, 0, 17, 138, 6, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 186, 179, 172, 128, 0, 0, 0, 26, 172, 50, 89, 117, 0, 0, 0, 0, 0, 0, 139, 109, 0, 0, 0, 0, 0, 0, 167, 81, 0, 0, 0, 0, 0, 0, 167, 85, 0, 0, 0, 0, 0, 0, 120, 77, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 181, 167, 183, 87, 0, 0, 0, 103, 187, 29, 158, 75, 0, 0, 0, 7, 21, 194, 104, 0, 0, 0, 0, 5, 133, 128, 9, 0, 0, 0, 0, 144, 154, 3, 0, 0, 0, 0, 3, 141, 24, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 108, 107, 129, 0, 0, 0, 0, 8, 15, 67, 123, 0, 0, 0, 0, 0, 0, 142, 18, 0, 0, 0, 0, 0, 44, 86, 0, 0, 0, 0, 0, 0, 121, 4, 0, 0, 0, 0, 0, 6, 102, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 186, 139, 150, 150, 17, 0, 0, 167, 103, 13, 129, 90, 3, 0, 0, 11, 13, 184, 92, 0, 0, 0, 0, 17, 146, 98, 5, 0, 0, 0, 18, 185, 91, 0, 0, 0, 0, 0, 65, 92, 2, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 35, 0, 0, 0, 0, 95, 87, 169, 33, 0, 0, 0, 0, 102, 111, 102, 0, 0, 0, 0, 0, 5, 96, 191, 134, 39, 0, 0, 0, 16, 94, 113, 5, 0, 0, 0, 0, 0, 31, 88, 0, 0, 0, 0, 0, 0, 22, 21, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 68, 102, 138, 148, 144, 42, 0, 14, 124, 135, 108, 44, 97, 90, 0, 0, 0, 0, 0, 56, 184, 11, 0, 0, 0, 0, 0, 165, 93, 0, 0, 0, 0, 0, 55, 110, 1, 0, 0, 0, 0, 0, 64, 47, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 216, 150, 142, 125, 1, 0, 0, 147, 154, 2, 21, 187, 22, 0, 0, 0, 0, 87, 178, 54, 0, 0, 0, 14, 99, 177, 56, 0, 0, 0, 40, 188, 110, 0, 0, 0, 0, 0, 84, 63, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 107, 105, 97, 97, 27, 0, 0, 3, 23, 0, 2, 61, 116, 0, 0, 0, 0, 0, 0, 5, 117, 0, 0, 0, 0, 0, 0, 48, 91, 0, 0, 0, 0, 0, 0, 111, 9, 0, 0, 0, 0, 0, 18, 80, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 138, 124, 173, 80, 0, 0, 0, 140, 93, 37, 161, 20, 0, 0, 0, 22, 3, 160, 48, 0, 0, 0, 0, 0, 65, 107, 0, 0, 0, 0, 0, 44, 160, 1, 0, 0, 0, 0, 0, 75, 83, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 182, 208, 165, 184, 150, 20, 0, 21, 212, 63, 18, 168, 120, 8, 0, 0, 10, 21, 196, 106, 0, 0, 0, 0, 22, 162, 109, 5, 0, 0, 0, 17, 191, 106, 0, 0, 0, 0, 0, 62, 98, 2, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 25, 63, 45, 0, 0, 0, 0, 121, 183, 104, 176, 82, 0, 0, 0, 83, 42, 48, 179, 19, 0, 0, 0, 0, 27, 186, 42, 0, 0, 0, 0, 24, 171, 163, 3, 0, 0, 0, 0, 162, 150, 0, 0, 0, 0, 0, 0, 93, 21, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 54, 17, 0, 0, 0, 0, 50, 202, 135, 194, 7, 0, 0, 0, 110, 121, 15, 169, 5, 0, 0, 0, 0, 0, 158, 106, 0, 0, 0, 0, 0, 80, 171, 13, 0, 0, 0, 0, 56, 188, 14, 0, 0, 0, 0, 0, 49, 58, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 180, 142, 157, 32, 0, 0, 0, 66, 159, 16, 148, 18, 0, 0, 0, 0, 0, 145, 74, 0, 0, 0, 0, 0, 77, 161, 10, 0, 0, 0, 0, 68, 164, 5, 0, 0, 0, 0, 0, 116, 45, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 22, 0, 0, 0, 0, 55, 174, 102, 178, 74, 0, 0, 0, 106, 86, 42, 166, 15, 0, 0, 0, 0, 13, 183, 44, 0, 0, 0, 0, 12, 153, 91, 0, 0, 0, 0, 0, 151, 137, 0, 0, 0, 0, 0, 0, 84, 12, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 172, 145, 154, 134, 0, 0, 0, 132, 72, 7, 121, 100, 0, 0, 0, 0, 9, 163, 91, 0, 0, 0, 0, 5, 131, 126, 2, 0, 0, 0, 5, 172, 125, 0, 0, 0, 0, 0, 17, 126, 9, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 181, 161, 184, 57, 0, 0, 0, 69, 178, 34, 182, 65, 0, 0, 0, 4, 18, 170, 74, 0, 0, 0, 0, 3, 123, 104, 1, 0, 0, 0, 0, 139, 161, 0, 0, 0, 0, 0, 0, 144, 39, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 161, 161, 57, 0, 0, 0, 0, 128, 86, 100, 67, 0, 0, 0, 0, 26, 91, 170, 94, 0, 0, 0, 0, 0, 35, 170, 67, 0, 0, 0, 0, 0, 0, 107, 16, 0, 0, 0, 0, 0, 0, 55, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 138, 127, 167, 68, 0, 0, 0, 147, 45, 43, 165, 14, 0, 0, 0, 0, 28, 164, 33, 0, 0, 0, 0, 18, 155, 50, 0, 0, 0, 0, 1, 157, 84, 0, 0, 0, 0, 0, 9, 109, 3, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 138, 131, 103, 0, 0, 0, 0, 0, 62, 82, 107, 0, 0, 0, 0, 0, 0, 0, 105, 0, 0, 0, 0, 0, 0, 0, 105, 0, 0, 0, 0, 0, 0, 0, 105, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 23, 27, 0, 0, 23, 154, 157, 147, 230, 106, 0, 0, 0, 5, 18, 21, 208, 57, 0, 0, 0, 0, 57, 49, 199, 26, 0, 0, 0, 0, 111, 183, 241, 167, 31, 0, 0, 0, 0, 1, 187, 19, 0, 0, 0, 0, 0, 0, 61, 6, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 115, 122, 169, 107, 0, 0, 0, 0, 0, 0, 121, 47, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 0, 0, 0, 12, 114, 0, 0, 0, 0, 0, 0, 47, 86, 0, 0, 0, 0, 0, 0, 38, 58, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 20, 0, 0, 0, 81, 98, 94, 182, 120, 0, 0, 0, 24, 118, 111, 170, 92, 0, 0, 0, 0, 0, 22, 171, 52, 8, 0, 0, 0, 10, 138, 227, 132, 35, 0, 0, 0, 0, 12, 146, 0, 0, 0, 0, 0, 0, 5, 55, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 68, 108, 154, 150, 148, 72, 0, 38, 142, 100, 84, 74, 161, 85, 0, 0, 0, 0, 0, 87, 167, 3, 0, 0, 0, 0, 1, 164, 40, 0, 0, 0, 0, 0, 108, 99, 0, 0, 0, 0, 0, 0, 103, 14, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 167, 134, 168, 61, 0, 0, 0, 100, 59, 11, 146, 62, 0, 0, 0, 0, 14, 162, 74, 0, 0, 0, 0, 6, 131, 79, 1, 0, 0, 0, 0, 146, 111, 0, 0, 0, 0, 0, 0, 125, 16, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 104, 119, 117, 113, 52, 0, 0, 0, 5, 29, 35, 68, 147, 6, 0, 0, 0, 0, 0, 18, 135, 0, 0, 0, 0, 0, 0, 81, 95, 0, 0, 0, 0, 0, 6, 112, 7, 0, 0, 0, 0, 0, 35, 73, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 51, 6, 0, 0, 0, 0, 6, 153, 123, 166, 40, 0, 0, 0, 0, 0, 0, 130, 106, 0, 0, 0, 32, 141, 141, 193, 140, 0, 0, 0, 20, 69, 69, 206, 105, 0, 0, 0, 0, 0, 0, 176, 26, 0, 0, 0, 0, 0, 0, 67, 10, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 32, 52, 84, 136, 93, 0, 0, 106, 185, 175, 192, 215, 30, 0, 0, 0, 0, 0, 184, 56, 0, 0, 0, 0, 0, 29, 155, 2, 0, 0, 0, 0, 0, 114, 65, 0, 0, 0, 0, 0, 0, 148, 8, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 15, 0, 0, 0, 0, 0, 0, 36, 100, 134, 156, 177, 55, 0, 0, 0, 0, 0, 15, 120, 118, 0, 0, 0, 0, 15, 143, 161, 18, 0, 0, 0, 21, 151, 135, 17, 0, 0, 0, 0, 174, 177, 63, 0, 0, 0, 0, 0, 39, 53, 3, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131, 147, 140, 180, 65, 0, 0, 0, 53, 52, 93, 185, 1, 0, 0, 0, 0, 5, 166, 49, 0, 0, 0, 0, 0, 85, 99, 0, 0, 0, 0, 0, 69, 159, 0, 0, 0, 0, 0, 0, 107, 58, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 20, 0, 0, 0, 110, 110, 134, 208, 35, 0, 0, 0, 55, 110, 197, 131, 0, 0, 0, 0, 0, 78, 119, 2, 0, 0, 0, 0, 17, 171, 14, 0, 0, 0, 0, 0, 134, 99, 0, 0, 0, 0, 0, 0, 78, 13, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 153, 169, 171, 89, 0, 0, 0, 46, 90, 68, 66, 142, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 24, 130, 0, 0, 0, 0, 0, 0, 122, 71, 0, 0, 0, 0, 0, 2, 131, 2, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 126, 47, 0, 0, 0, 0, 0, 54, 29, 151, 62, 0, 0, 0, 0, 0, 0, 150, 88, 0, 0, 0, 0, 0, 3, 209, 56, 0, 0, 0, 0, 0, 51, 170, 8, 0, 0, 0, 0, 44, 184, 27, 0, 0, 0, 0, 0, 29, 42, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136, 180, 230, 156, 0, 0, 0, 0, 11, 16, 195, 115, 2, 0, 0, 19, 211, 224, 208, 177, 175, 39, 0, 0, 108, 211, 28, 1, 16, 8, 0, 2, 166, 57, 0, 0, 0, 0, 0, 10, 108, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 123, 127, 139, 199, 231, 35, 0, 95, 191, 175, 155, 103, 219, 35, 0, 0, 0, 0, 0, 115, 219, 4, 0, 0, 0, 0, 0, 171, 135, 0, 0, 0, 0, 0, 0, 215, 63, 0, 0, 0, 0, 0, 0, 139, 43, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 145, 160, 166, 209, 64, 0, 0, 0, 47, 85, 105, 208, 7, 0, 0, 0, 0, 0, 164, 95, 0, 0, 0, 0, 0, 46, 160, 11, 0, 0, 0, 0, 53, 182, 18, 0, 0, 0, 0, 0, 109, 90, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 33, 43, 5, 0, 0, 0, 47, 230, 196, 199, 171, 0, 0, 0, 9, 66, 14, 107, 228, 17, 0, 0, 0, 31, 195, 252, 193, 105, 0, 0, 0, 25, 142, 210, 27, 1, 0, 0, 0, 0, 115, 133, 0, 0, 0, 0, 0, 0, 55, 40, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 93, 173, 182, 7, 0, 13, 102, 193, 178, 94, 206, 21, 0, 17, 87, 17, 0, 39, 213, 25, 0, 0, 0, 0, 0, 135, 179, 1, 0, 0, 0, 0, 10, 152, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108, 113, 141, 95, 0, 0, 0, 0, 17, 6, 98, 77, 0, 0, 0, 0, 0, 0, 137, 18, 0, 0, 0, 0, 0, 20, 116, 0, 0, 0, 0, 0, 1, 126, 16, 0, 0, 0, 0, 0, 7, 102, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 50, 31, 13, 0, 0, 0, 0, 68, 103, 150, 196, 0, 0, 0, 0, 0, 0, 84, 171, 0, 0, 0, 0, 0, 0, 179, 59, 0, 0, 0, 0, 0, 54, 141, 2, 0, 0, 0, 0, 64, 188, 16, 0, 0, 0, 0, 0, 74, 63, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 91, 121, 89, 0, 0, 0, 0, 56, 106, 28, 152, 24, 0, 0, 0, 0, 0, 0, 140, 13, 0, 0, 0, 0, 0, 0, 135, 9, 13, 6, 0, 0, 94, 126, 206, 167, 138, 33, 0, 0, 43, 43, 92, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 165, 147, 145, 185, 41, 0, 0, 0, 52, 111, 173, 200, 5, 0, 0, 0, 0, 9, 190, 57, 0, 0, 0, 0, 0, 93, 113, 0, 0, 0, 0, 0, 62, 187, 7, 0, 0, 0, 0, 0, 106, 88, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 46, 0, 0, 0, 7, 176, 182, 175, 210, 0, 0, 0, 3, 67, 59, 76, 185, 0, 0, 0, 0, 0, 10, 196, 79, 0, 0, 0, 0, 3, 115, 133, 5, 0, 0, 0, 0, 136, 172, 2, 0, 0, 0, 0, 0, 86, 30, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 124, 129, 176, 9, 0, 0, 6, 153, 13, 84, 156, 0, 0, 0, 6, 47, 0, 117, 90, 0, 0, 0, 0, 0, 0, 143, 32, 0, 0, 0, 0, 0, 11, 141, 0, 0, 0, 0, 0, 0, 36, 80, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 31, 17, 0, 0, 0, 7, 202, 134, 184, 40, 0, 0, 0, 7, 127, 3, 117, 18, 0, 0, 0, 0, 12, 57, 190, 124, 0, 0, 0, 0, 37, 136, 189, 132, 0, 0, 0, 0, 0, 0, 128, 98, 0, 0, 0, 0, 0, 0, 47, 45, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 141, 215, 186, 200, 22, 0, 0, 0, 10, 47, 167, 161, 0, 0, 0, 0, 0, 21, 187, 30, 0, 0, 0, 0, 0, 109, 101, 0, 0, 0, 0, 0, 58, 188, 3, 0, 0, 0, 0, 0, 109, 95, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 56, 98, 107, 112, 117, 24, 0, 65, 231, 242, 228, 197, 238, 63, 0, 11, 37, 8, 0, 31, 215, 33, 0, 0, 0, 0, 0, 99, 180, 0, 0, 0, 0, 0, 0, 144, 112, 0, 0, 0, 0, 0, 0, 77, 41, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 127, 145, 157, 133, 80, 0, 0, 48, 62, 31, 31, 87, 154, 0, 0, 0, 0, 0, 0, 101, 130, 0, 0, 0, 0, 0, 0, 129, 92, 0, 0, 0, 0, 0, 0, 175, 38, 0, 0, 0, 0, 0, 0, 181, 30, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155, 148, 170, 135, 0, 0, 0, 0, 91, 55, 122, 126, 0, 0, 0, 0, 10, 7, 134, 28, 0, 0, 0, 0, 0, 2, 128, 0, 0, 0, 0, 0, 0, 57, 80, 0, 0, 0, 0, 0, 0, 76, 33, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 29, 24, 72, 122, 170, 59, 0, 25, 128, 123, 129, 155, 183, 8, 0, 0, 0, 0, 5, 180, 32, 0, 0, 0, 0, 0, 81, 99, 0, 0, 0, 0, 0, 12, 165, 8, 0, 0, 0, 0, 0, 51, 108, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 88, 123, 156, 171, 15, 0, 0, 130, 249, 220, 168, 204, 38, 0, 0, 47, 21, 0, 48, 200, 10, 0, 0, 0, 0, 0, 134, 128, 0, 0, 0, 0, 0, 14, 177, 7, 0, 0, 0, 0, 0, 53, 123, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 153, 154, 53, 0, 0, 0, 0, 0, 3, 114, 27, 0, 0, 0, 0, 0, 1, 129, 3, 0, 0, 0, 0, 0, 28, 128, 0, 0, 0, 0, 0, 0, 47, 111, 0, 0, 0, 0, 0, 0, 25, 80, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 112, 142, 156, 91, 0, 0, 0, 1, 1, 0, 37, 133, 0, 0, 0, 0, 0, 0, 85, 80, 0, 0, 0, 0, 0, 0, 113, 14, 0, 0, 0, 0, 0, 55, 69, 0, 0, 0, 0, 0, 0, 76, 17, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 107, 149, 156, 146, 128, 15, 0, 14, 71, 85, 55, 43, 116, 97, 0, 0, 0, 0, 0, 46, 166, 32, 0, 0, 0, 0, 26, 152, 59, 0, 0, 0, 0, 118, 128, 4, 0, 0, 0, 0, 0, 73, 12, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 187, 217, 237, 86, 0, 0, 0, 62, 79, 54, 169, 95, 0, 0, 0, 0, 0, 0, 198, 73, 0, 0, 0, 0, 0, 0, 182, 26, 0, 0, 0, 0, 0, 44, 184, 32, 0, 0, 0, 0, 0, 35, 99, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 100, 206, 253, 248, 200, 14, 0, 26, 214, 205, 164, 138, 233, 83, 0, 0, 1, 0, 0, 0, 155, 114, 0, 0, 0, 0, 1, 92, 174, 26, 0, 0, 0, 4, 57, 195, 19, 0, 0, 0, 0, 18, 118, 84, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 43, 2, 0, 0, 0, 0, 37, 138, 155, 51, 0, 0, 0, 0, 11, 15, 121, 29, 0, 0, 0, 0, 0, 26, 107, 0, 0, 0, 0, 0, 0, 93, 34, 0, 0, 0, 0, 0, 37, 123, 0, 0, 0, 0, 0, 0, 34, 41, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 139, 147, 193, 241, 79, 0, 0, 27, 127, 133, 150, 226, 12, 0, 0, 0, 0, 6, 195, 83, 0, 0, 0, 0, 0, 74, 170, 13, 0, 0, 0, 0, 34, 203, 37, 0, 0, 0, 0, 0, 50, 156, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 46, 17, 0, 0, 0, 0, 150, 188, 244, 70, 0, 0, 0, 0, 38, 17, 215, 64, 0, 0, 0, 0, 7, 155, 226, 121, 0, 0, 0, 0, 9, 144, 151, 1, 0, 0, 0, 0, 0, 79, 146, 0, 0, 0, 0, 0, 0, 42, 63, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 252, 250, 246, 205, 11, 0, 0, 13, 66, 63, 86, 220, 18, 0, 0, 0, 0, 0, 132, 179, 0, 0, 0, 0, 0, 25, 213, 81, 0, 0, 0, 0, 9, 177, 81, 0, 0, 0, 0, 0, 12, 121, 1, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 111, 172, 159, 144, 139, 34, 0, 12, 92, 106, 106, 107, 199, 98, 0, 0, 0, 0, 1, 145, 183, 7, 0, 0, 0, 0, 84, 187, 43, 0, 0, 0, 0, 54, 208, 12, 0, 0, 0, 0, 0, 62, 128, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 105, 158, 171, 162, 198, 15, 0, 70, 117, 100, 97, 75, 186, 59, 0, 0, 0, 0, 0, 64, 226, 35, 0, 0, 0, 0, 11, 207, 175, 2, 0, 0, 0, 29, 191, 98, 7, 0, 0, 0, 0, 33, 108, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 32, 0, 0, 0, 0, 0, 129, 170, 164, 94, 0, 0, 0, 0, 17, 8, 94, 144, 0, 0, 0, 0, 0, 1, 195, 89, 0, 0, 0, 0, 0, 77, 172, 15, 0, 0, 0, 0, 34, 191, 22, 0, 0, 0, 0, 0, 25, 64, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 40, 34, 3, 0, 0, 0, 0, 174, 194, 178, 170, 0, 0, 0, 0, 54, 15, 58, 229, 0, 0, 0, 0, 0, 2, 169, 159, 0, 0, 0, 0, 0, 71, 221, 58, 0, 0, 0, 0, 41, 205, 34, 0, 0, 0, 0, 0, 29, 81, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 91, 140, 150, 189, 58, 0, 0, 0, 104, 55, 24, 171, 30, 0, 0, 0, 0, 11, 188, 89, 0, 0, 0, 0, 6, 133, 143, 4, 0, 0, 0, 0, 82, 181, 5, 0, 0, 0, 0, 0, 65, 84, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 155, 141, 151, 217, 15, 0, 0, 0, 0, 0, 72, 157, 0, 0, 0, 0, 0, 14, 167, 27, 0, 0, 0, 0, 1, 114, 80, 0, 0, 0, 0, 0, 115, 139, 0, 0, 0, 0, 0, 0, 137, 47, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 85, 89, 92, 23, 0, 0, 0, 0, 0, 0, 40, 97, 0, 0, 0, 0, 0, 0, 0, 91, 0, 0, 0, 0, 0, 0, 47, 95, 0, 0, 0, 0, 0, 21, 104, 9, 0, 0, 0, 0, 0, 71, 15, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 148, 147, 153, 209, 1, 0, 0, 0, 13, 16, 51, 188, 1, 0, 0, 0, 0, 14, 184, 48, 0, 0, 0, 0, 0, 102, 117, 0, 0, 0, 0, 0, 117, 146, 1, 0, 0, 0, 0, 0, 136, 34, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 15, 0, 0, 0, 0, 0, 86, 212, 75, 0, 0, 0, 0, 0, 42, 213, 145, 4, 0, 0, 0, 6, 154, 77, 1, 0, 0, 0, 0, 0, 139, 14, 0, 0, 0, 0, 0, 0, 160, 0, 0, 0, 0, 0, 0, 0, 63, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 207, 221, 236, 127, 0, 0, 0, 31, 141, 81, 216, 113, 0, 0, 0, 0, 0, 20, 249, 73, 0, 0, 0, 0, 0, 46, 217, 30, 0, 0, 0, 0, 0, 96, 179, 0, 0, 0, 0, 0, 0, 55, 101, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 97, 104, 105, 80, 0, 0, 0, 105, 6, 9, 43, 167, 0, 0, 0, 0, 0, 0, 38, 127, 0, 0, 0, 0, 0, 0, 95, 92, 0, 0, 0, 0, 0, 0, 125, 30, 0, 0, 0, 0, 0, 0, 97, 9, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 113, 128, 131, 197, 74, 0, 0, 0, 69, 20, 39, 162, 3, 0, 0, 0, 0, 9, 169, 39, 0, 0, 0, 0, 0, 92, 97, 0, 0, 0, 0, 0, 79, 155, 0, 0, 0, 0, 0, 0, 102, 54, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 165, 185, 209, 235, 92, 0, 0, 25, 86, 63, 140, 229, 34, 0, 0, 0, 128, 180, 228, 184, 30, 0, 0, 0, 110, 228, 71, 13, 0, 0, 0, 5, 200, 67, 0, 0, 0, 0, 0, 6, 110, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 158, 122, 171, 0, 0, 0, 0, 129, 31, 46, 135, 0, 0, 0, 0, 40, 0, 140, 44, 0, 0, 0, 0, 0, 35, 120, 0, 0, 0, 0, 0, 5, 141, 17, 0, 0, 0, 0, 0, 32, 116, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 152, 178, 227, 217, 0, 0, 0, 0, 70, 81, 192, 175, 0, 0, 0, 0, 0, 27, 210, 51, 0, 0, 0, 0, 0, 90, 136, 0, 0, 0, 0, 0, 34, 184, 16, 0, 0, 0, 0, 0, 50, 119, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 2, 0, 0, 0, 0, 96, 131, 197, 18, 0, 0, 0, 0, 115, 149, 147, 0, 0, 0, 0, 0, 20, 136, 203, 44, 0, 0, 0, 0, 15, 115, 195, 21, 0, 0, 0, 0, 0, 0, 178, 9, 0, 0, 0, 0, 0, 0, 40, 1, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131, 161, 157, 166, 39, 0, 0, 0, 0, 0, 1, 121, 63, 0, 0, 0, 0, 0, 88, 146, 0, 0, 0, 0, 0, 37, 158, 29, 0, 0, 0, 0, 94, 157, 10, 0, 0, 0, 0, 0, 133, 27, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87, 77, 5, 0, 0, 0, 0, 0, 26, 179, 75, 0, 0, 0, 0, 0, 0, 162, 75, 0, 0, 0, 0, 0, 29, 186, 17, 0, 0, 0, 0, 0, 119, 108, 0, 0, 0, 0, 0, 0, 157, 12, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 40, 92, 104, 75, 29, 0, 0, 0, 135, 122, 186, 103, 3, 0, 0, 0, 5, 51, 94, 4, 37, 0, 0, 0, 30, 141, 7, 0, 0, 0, 0, 0, 130, 30, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 39, 25, 12, 0, 0, 0, 0, 64, 80, 89, 192, 10, 0, 0, 0, 0, 0, 49, 159, 0, 0, 0, 0, 0, 16, 160, 34, 0, 0, 0, 0, 9, 126, 65, 0, 0, 0, 0, 0, 159, 91, 0, 0, 0, 0, 0, 2, 91, 8, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 149, 130, 127, 205, 24, 0, 0, 0, 0, 0, 46, 171, 3, 0, 0, 0, 0, 6, 170, 53, 0, 0, 0, 0, 0, 98, 103, 0, 0, 0, 0, 0, 89, 157, 0, 0, 0, 0, 0, 0, 141, 56, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122, 119, 124, 197, 26, 0, 0, 0, 0, 0, 53, 158, 1, 0, 0, 0, 0, 16, 169, 32, 0, 0, 0, 0, 2, 121, 65, 0, 0, 0, 0, 0, 135, 111, 0, 0, 0, 0, 0, 12, 122, 10, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 88, 121, 136, 154, 91, 0, 0, 0, 0, 0, 0, 40, 145, 0, 0, 0, 0, 0, 0, 117, 119, 0, 0, 0, 0, 0, 0, 159, 40, 0, 0, 0, 0, 0, 25, 126, 0, 0, 0, 0, 0, 0, 53, 48, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 47, 41, 6, 0, 0, 0, 0, 69, 143, 201, 94, 0, 0, 0, 0, 0, 7, 172, 66, 0, 0, 0, 0, 46, 205, 187, 54, 0, 0, 0, 0, 0, 96, 85, 0, 0, 0, 0, 0, 0, 139, 35, 0, 0, 0, 0, 0, 0, 53, 6, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 158, 143, 132, 176, 63, 0, 0, 11, 36, 9, 2, 139, 27, 0, 0, 0, 0, 0, 136, 106, 0, 0, 0, 0, 0, 62, 133, 6, 0, 0, 0, 0, 95, 147, 2, 0, 0, 0, 0, 0, 135, 34, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 143, 157, 178, 162, 0, 0, 0, 0, 135, 45, 114, 122, 0, 0, 0, 0, 0, 0, 176, 40, 0, 0, 0, 0, 0, 7, 179, 9, 0, 0, 0, 0, 0, 12, 152, 0, 0, 0, 0, 0, 0, 0, 118, 4, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 26, 28, 0, 0, 9, 139, 137, 133, 188, 88, 0, 0, 3, 18, 0, 49, 180, 16, 0, 0, 0, 0, 32, 182, 43, 0, 0, 0, 0, 27, 166, 63, 0, 0, 0, 0, 0, 197, 141, 0, 0, 0, 0, 0, 1, 96, 14, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 135, 175, 191, 178, 0, 0, 0, 0, 0, 0, 139, 128, 0, 0, 0, 0, 0, 22, 184, 23, 0, 0, 0, 0, 0, 113, 86, 0, 0, 0, 0, 0, 60, 172, 1, 0, 0, 0, 0, 0, 85, 81, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 99, 109, 175, 76, 0, 0, 0, 0, 44, 11, 106, 57, 0, 0, 0, 0, 0, 0, 111, 1, 0, 0, 0, 0, 0, 3, 101, 0, 0, 0, 0, 0, 0, 71, 38, 0, 0, 0, 0, 0, 0, 75, 5, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 199, 199, 223, 187, 0, 0, 0, 0, 24, 39, 187, 151, 0, 0, 0, 0, 0, 27, 179, 23, 0, 0, 0, 0, 0, 99, 87, 0, 0, 0, 0, 0, 31, 191, 8, 0, 0, 0, 0, 0, 67, 99, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 158, 154, 44, 0, 0, 0, 0, 11, 88, 115, 43, 0, 0, 0, 0, 0, 0, 115, 0, 0, 0, 0, 0, 0, 22, 95, 0, 0, 0, 0, 0, 0, 99, 25, 0, 0, 0, 0, 0, 0, 95, 2, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 162, 141, 152, 99, 0, 0, 0, 3, 4, 8, 77, 169, 3, 0, 0, 0, 0, 54, 209, 139, 78, 2, 0, 0, 0, 70, 95, 0, 0, 0, 0, 0, 37, 162, 0, 0, 0, 0, 0, 0, 43, 79, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 206, 216, 160, 0, 0, 0, 0, 32, 40, 141, 118, 0, 0, 0, 0, 0, 10, 172, 21, 0, 0, 0, 0, 0, 71, 113, 0, 0, 0, 0, 0, 30, 155, 9, 0, 0, 0, 0, 0, 82, 98, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 128, 153, 156, 134, 0, 0, 0, 39, 63, 61, 56, 179, 0, 0, 0, 0, 0, 0, 136, 99, 0, 0, 0, 0, 0, 8, 164, 13, 0, 0, 0, 0, 0, 95, 66, 0, 0, 0, 0, 0, 0, 124, 25, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146, 170, 182, 165, 0, 0, 0, 0, 1, 4, 117, 162, 0, 0, 0, 0, 0, 5, 218, 69, 0, 0, 0, 0, 0, 59, 178, 9, 0, 0, 0, 0, 0, 105, 58, 0, 0, 0, 0, 0, 0, 49, 25, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 35, 104, 126, 154, 60, 0, 0, 42, 121, 101, 42, 96, 128, 0, 0, 0, 0, 0, 0, 65, 122, 0, 0, 0, 0, 0, 0, 97, 106, 0, 0, 0, 0, 0, 0, 111, 99, 0, 0, 0, 0, 0, 0, 105, 73, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 182, 135, 210, 4, 0, 0, 0, 26, 41, 59, 153, 0, 0, 0, 0, 0, 3, 170, 44, 0, 0, 0, 0, 0, 70, 109, 1, 0, 0, 0, 0, 36, 158, 4, 0, 0, 0, 0, 0, 84, 91, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 140, 173, 164, 143, 23, 0, 3, 160, 127, 71, 81, 209, 57, 0, 0, 20, 0, 0, 86, 204, 6, 0, 0, 0, 0, 1, 189, 92, 0, 0, 0, 0, 0, 80, 139, 1, 0, 0, 0, 0, 0, 148, 29, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 8, 0, 0, 0, 0, 62, 90, 174, 19, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 77, 127, 199, 75, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 106, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 151, 231, 202, 196, 0, 0, 0, 0, 133, 97, 113, 190, 0, 0, 0, 0, 0, 10, 209, 96, 0, 0, 0, 0, 0, 90, 175, 13, 0, 0, 0, 0, 71, 211, 26, 0, 0, 0, 0, 0, 115, 113, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 47, 40, 27, 0, 0, 0, 0, 69, 113, 137, 216, 6, 0, 0, 0, 0, 0, 107, 197, 0, 0, 0, 0, 0, 44, 212, 43, 0, 0, 0, 0, 10, 164, 106, 0, 0, 0, 0, 1, 147, 131, 0, 0, 0, 0, 0, 1, 91, 17, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 112, 153, 169, 0, 0, 0, 0, 31, 164, 99, 100, 0, 0, 0, 0, 0, 7, 144, 8, 0, 0, 0, 0, 0, 75, 84, 0, 0, 0, 0, 0, 14, 152, 0, 0, 0, 0, 0, 0, 48, 95, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 117, 128, 166, 105, 0, 0, 0, 27, 85, 27, 87, 102, 0, 0, 0, 0, 0, 35, 157, 125, 0, 0, 0, 0, 2, 89, 182, 45, 0, 0, 0, 0, 0, 0, 133, 4, 0, 0, 0, 0, 0, 0, 105, 12, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 119, 135, 183, 0, 0, 0, 0, 7, 6, 102, 121, 0, 0, 0, 0, 0, 22, 138, 5, 0, 0, 0, 0, 0, 99, 54, 0, 0, 0, 0, 0, 34, 150, 0, 0, 0, 0, 0, 0, 68, 75, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 126, 129, 166, 174, 0, 0, 0, 13, 63, 50, 107, 111, 0, 0, 0, 0, 0, 0, 152, 35, 0, 0, 0, 0, 0, 0, 154, 2, 0, 0, 0, 0, 0, 30, 131, 5, 0, 0, 0, 0, 0, 8, 137, 22, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 189, 193, 142, 154, 4, 0, 0, 5, 157, 73, 28, 182, 7, 0, 0, 0, 0, 0, 150, 127, 0, 0, 0, 0, 0, 18, 186, 35, 0, 0, 0, 0, 10, 159, 40, 0, 0, 0, 0, 0, 48, 117, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 131, 130, 137, 147, 0, 0, 0, 6, 4, 0, 12, 145, 0, 0, 0, 0, 0, 0, 122, 98, 0, 0, 0, 0, 0, 24, 151, 15, 0, 0, 0, 0, 7, 131, 16, 0, 0, 0, 0, 0, 29, 107, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 10, 0, 0, 0, 0, 0, 0, 109, 169, 211, 187, 0, 0, 0, 0, 0, 4, 144, 194, 0, 0, 0, 0, 0, 4, 215, 78, 0, 0, 0, 0, 0, 67, 181, 11, 0, 0, 0, 0, 0, 168, 67, 0, 0, 0, 0, 0, 0, 84, 6, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 201, 177, 204, 140, 0, 0, 0, 28, 52, 21, 49, 186, 0, 0, 0, 0, 0, 0, 123, 127, 0, 0, 0, 0, 0, 16, 183, 35, 0, 0, 0, 0, 13, 160, 46, 0, 0, 0, 0, 0, 38, 133, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 148, 175, 182, 227, 8, 0, 0, 17, 102, 61, 78, 189, 0, 0, 0, 0, 0, 3, 189, 64, 0, 0, 0, 0, 0, 69, 154, 3, 0, 0, 0, 0, 79, 193, 19, 0, 0, 0, 0, 0, 136, 94, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 178, 163, 137, 0, 0, 0, 0, 7, 6, 35, 167, 0, 0, 0, 0, 0, 7, 177, 65, 0, 0, 0, 0, 1, 106, 88, 1, 0, 0, 0, 0, 122, 127, 0, 0, 0, 0, 0, 4, 116, 11, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 171, 155, 187, 43, 0, 0, 0, 4, 43, 20, 159, 71, 0, 0, 0, 0, 0, 0, 187, 55, 0, 0, 0, 0, 0, 0, 179, 35, 0, 0, 0, 0, 0, 0, 171, 4, 0, 0, 0, 0, 0, 8, 119, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 53, 6, 0, 0, 0, 0, 0, 7, 55, 99, 102, 0, 0, 0, 0, 0, 0, 26, 130, 0, 0, 0, 0, 0, 1, 123, 23, 0, 0, 0, 0, 0, 66, 61, 0, 0, 0, 0, 0, 42, 108, 0, 0, 0, 0, 0, 0, 49, 32, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 146, 172, 191, 0, 0, 0, 0, 0, 0, 100, 147, 0, 0, 0, 0, 0, 55, 135, 12, 0, 0, 0, 0, 28, 164, 16, 0, 0, 0, 0, 0, 134, 45, 0, 0, 0, 0, 0, 0, 73, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 52, 10, 0, 0, 0, 0, 37, 90, 174, 73, 0, 0, 0, 0, 0, 0, 167, 37, 0, 0, 0, 0, 0, 15, 143, 0, 0, 0, 0, 0, 0, 91, 71, 0, 0, 0, 0, 0, 11, 190, 28, 0, 0, 0, 0, 0, 5, 83, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 152, 160, 158, 131, 24, 0, 0, 0, 11, 39, 64, 196, 26, 0, 0, 0, 0, 1, 162, 94, 0, 0, 0, 0, 0, 84, 117, 4, 0, 0, 0, 0, 118, 113, 1, 0, 0, 0, 0, 22, 92, 4, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 171, 146, 143, 158, 11, 0, 0, 26, 172, 19, 55, 182, 5, 0, 0, 0, 161, 41, 90, 157, 0, 0, 0, 0, 85, 56, 127, 97, 0, 0, 0, 0, 0, 0, 178, 50, 0, 0, 0, 0, 0, 0, 157, 27, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 98, 103, 156, 0, 0, 0, 0, 38, 2, 96, 94, 0, 0, 0, 0, 0, 2, 123, 0, 0, 0, 0, 0, 0, 44, 72, 0, 0, 0, 0, 0, 0, 112, 3, 0, 0, 0, 0, 0, 1, 96, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 128, 125, 111, 67, 13, 0, 0, 69, 65, 74, 93, 114, 138, 0, 0, 0, 0, 0, 0, 0, 147, 0, 0, 0, 0, 0, 0, 4, 157, 0, 0, 0, 0, 0, 0, 40, 152, 0, 0, 0, 0, 0, 0, 50, 113, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 94, 80, 71, 0, 0, 0, 0, 6, 8, 22, 98, 0, 0, 0, 0, 0, 0, 83, 37, 0, 0, 0, 0, 0, 10, 78, 0, 0, 0, 0, 0, 2, 91, 5, 0, 0, 0, 0, 0, 30, 65, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 157, 169, 182, 0, 0, 0, 0, 16, 21, 29, 166, 0, 0, 0, 0, 0, 2, 144, 46, 0, 0, 0, 0, 0, 80, 94, 0, 0, 0, 0, 0, 62, 159, 0, 0, 0, 0, 0, 0, 75, 39, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 200, 211, 191, 0, 0, 0, 0, 10, 33, 145, 138, 0, 0, 0, 0, 0, 8, 190, 32, 0, 0, 0, 0, 0, 107, 112, 0, 0, 0, 0, 0, 81, 141, 2, 0, 0, 0, 0, 0, 99, 18, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 63, 0, 19, 0, 0, 0, 0, 0, 51, 163, 187, 4, 0, 0, 0, 0, 0, 187, 71, 0, 0, 0, 0, 99, 187, 195, 63, 0, 0, 0, 0, 0, 135, 59, 0, 0, 0, 0, 0, 0, 91, 111, 0, 0, 0, 0, 0, 0, 4, 19, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 28, 0, 0, 43, 144, 114, 133, 194, 137, 0, 0, 11, 60, 75, 63, 124, 118, 0, 0, 0, 0, 64, 181, 219, 161, 8, 0, 0, 0, 19, 51, 188, 40, 0, 0, 0, 0, 0, 0, 172, 29, 0, 0, 0, 0, 0, 0, 86, 14, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 113, 168, 140, 185, 57, 0, 0, 0, 3, 18, 15, 158, 18, 0, 0, 0, 0, 1, 155, 88, 0, 0, 0, 0, 0, 68, 129, 5, 0, 0, 0, 0, 90, 149, 4, 0, 0, 0, 0, 0, 108, 24, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 128, 148, 178, 56, 0, 0, 0, 73, 75, 44, 154, 11, 0, 0, 0, 0, 8, 151, 46, 0, 0, 0, 0, 2, 108, 63, 0, 0, 0, 0, 0, 109, 103, 0, 0, 0, 0, 0, 0, 80, 7, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 146, 165, 152, 180, 25, 0, 0, 0, 64, 26, 16, 150, 11, 0, 0, 0, 0, 1, 155, 59, 0, 0, 0, 0, 0, 78, 114, 1, 0, 0, 0, 0, 110, 128, 1, 0, 0, 0, 0, 14, 113, 12, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 182, 196, 217, 105, 0, 0, 0, 5, 31, 48, 206, 45, 0, 0, 0, 0, 0, 0, 249, 63, 0, 0, 0, 0, 0, 0, 252, 84, 0, 0, 0, 0, 0, 0, 252, 84, 0, 0, 0, 0, 0, 0, 168, 29, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 3, 0, 0, 0, 0, 0, 0, 142, 151, 93, 208, 89, 0, 0, 0, 26, 155, 192, 231, 51, 0, 0, 0, 0, 144, 202, 244, 194, 95, 0, 0, 0, 29, 53, 224, 72, 5, 0, 0, 0, 0, 0, 230, 97, 0, 0, 0, 0, 0, 0, 70, 37, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 151, 127, 107, 79, 19, 0, 0, 83, 159, 183, 179, 219, 139, 0, 0, 0, 0, 0, 75, 211, 67, 0, 0, 0, 0, 23, 211, 131, 0, 0, 0, 0, 83, 207, 55, 0, 0, 0, 0, 0, 71, 75, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 0, 0, 0, 107, 133, 138, 209, 41, 0, 0, 0, 7, 1, 98, 122, 0, 0, 0, 0, 87, 90, 185, 66, 0, 0, 0, 0, 105, 177, 125, 124, 1, 0, 0, 0, 0, 144, 20, 0, 0, 0, 0, 0, 0, 69, 29, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 107, 111, 163, 76, 0, 0, 0, 0, 0, 0, 115, 56, 0, 0, 0, 0, 0, 0, 122, 24, 0, 0, 0, 0, 0, 0, 115, 1, 0, 0, 0, 0, 0, 2, 105, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 60, 29, 53, 134, 93, 0, 0, 139, 241, 211, 191, 193, 132, 0, 0, 34, 17, 14, 50, 188, 5, 0, 0, 0, 0, 0, 141, 128, 0, 0, 0, 0, 0, 27, 147, 15, 0, 0, 0, 0, 0, 67, 66, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 122, 110, 99, 148, 84, 0, 0, 74, 200, 209, 156, 170, 85, 0, 0, 0, 0, 0, 34, 166, 0, 0, 0, 0, 0, 1, 143, 92, 0, 0, 0, 0, 0, 72, 124, 0, 0, 0, 0, 0, 0, 134, 55, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 150, 175, 118, 38, 0, 0, 0, 32, 203, 233, 236, 222, 5, 0, 0, 0, 0, 0, 80, 193, 2, 0, 0, 0, 0, 1, 185, 69, 0, 0, 0, 0, 5, 111, 75, 0, 0, 0, 0, 0, 48, 176, 4, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98, 154, 107, 44, 24, 21, 0, 0, 11, 163, 102, 164, 198, 88, 0, 0, 7, 31, 0, 139, 103, 0, 0, 0, 0, 0, 0, 163, 31, 0, 0, 0, 0, 0, 0, 165, 23, 0, 0, 0, 0, 0, 0, 123, 37, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 62, 80, 99, 142, 132, 0, 0, 5, 127, 167, 133, 95, 170, 0, 0, 0, 0, 0, 0, 37, 131, 0, 0, 0, 0, 0, 0, 64, 117, 0, 0, 0, 0, 0, 0, 129, 90, 0, 0, 0, 0, 0, 0, 137, 55, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 19, 15, 52, 62, 60, 0, 0, 136, 201, 173, 146, 144, 135, 0, 0, 12, 11, 0, 26, 143, 10, 0, 0, 0, 0, 0, 140, 90, 0, 0, 0, 0, 0, 52, 133, 0, 0, 0, 0, 0, 0, 40, 38, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 44, 30, 4, 0, 0, 0, 0, 26, 83, 76, 96, 102, 12, 0, 0, 0, 0, 0, 0, 92, 34, 0, 0, 0, 0, 1, 101, 111, 0, 0, 0, 0, 5, 101, 71, 2, 0, 0, 0, 0, 136, 59, 0, 0, 0, 0, 0, 0, 66, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 127, 156, 174, 219, 32, 0, 0, 121, 198, 204, 113, 183, 8, 0, 0, 0, 0, 0, 81, 203, 2, 0, 0, 0, 0, 0, 184, 115, 0, 0, 0, 0, 0, 68, 159, 2, 0, 0, 0, 0, 0, 77, 57, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 91, 73, 2, 0, 0, 0, 0, 74, 177, 188, 5, 0, 0, 0, 0, 0, 88, 182, 0, 0, 0, 0, 0, 0, 115, 182, 0, 0, 0, 0, 0, 0, 131, 182, 0, 0, 0, 0, 0, 0, 99, 157, 0, 0, 0, 0, 0, 0, 10, 23, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 94, 100, 94, 32, 0, 0, 0, 0, 0, 0, 81, 117, 0, 0, 0, 0, 4, 64, 143, 95, 0, 0, 0, 0, 0, 0, 127, 41, 0, 0, 0, 0, 0, 18, 105, 0, 0, 0, 0, 0, 0, 62, 25, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 118, 50, 85, 108, 93, 0, 0, 121, 205, 156, 114, 134, 110, 0, 0, 0, 0, 0, 50, 161, 1, 0, 0, 0, 0, 2, 148, 69, 0, 0, 0, 0, 2, 122, 61, 0, 0, 0, 0, 0, 2, 55, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 111, 166, 78, 0, 0, 0, 0, 0, 0, 106, 37, 0, 0, 0, 0, 0, 0, 111, 0, 0, 0, 0, 0, 0, 19, 95, 0, 0, 0, 0, 0, 0, 93, 24, 0, 0, 0, 0, 0, 0, 85, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 122, 113, 133, 161, 146, 0, 0, 75, 196, 113, 46, 116, 86, 0, 0, 70, 10, 0, 46, 167, 3, 0, 0, 0, 0, 1, 144, 56, 0, 0, 0, 0, 0, 100, 96, 0, 0, 0, 0, 0, 0, 115, 12, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 163, 147, 107, 119, 87, 0, 0, 75, 103, 95, 71, 47, 139, 0, 0, 0, 0, 0, 0, 103, 55, 0, 0, 0, 0, 0, 63, 155, 0, 0, 0, 0, 0, 23, 139, 15, 0, 0, 0, 0, 0, 107, 55, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 124, 140, 218, 150, 0, 0, 0, 1, 10, 10, 186, 84, 0, 0, 0, 0, 0, 8, 181, 18, 0, 0, 0, 0, 0, 43, 144, 0, 0, 0, 0, 0, 0, 103, 112, 0, 0, 0, 0, 0, 0, 53, 74, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 107, 103, 75, 99, 99, 4, 0, 39, 247, 191, 151, 111, 111, 0, 0, 63, 47, 0, 15, 115, 8, 0, 0, 0, 0, 0, 103, 99, 0, 0, 0, 0, 0, 8, 107, 4, 0, 0, 0, 0, 0, 67, 95, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 115, 183, 159, 127, 0, 0, 0, 0, 223, 159, 155, 191, 0, 0, 0, 0, 12, 0, 67, 127, 0, 0, 0, 0, 0, 0, 163, 43, 0, 0, 0, 0, 0, 75, 75, 0, 0, 0, 0, 0, 0, 91, 4, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 169, 153, 136, 14, 0, 0, 0, 7, 63, 2, 138, 93, 0, 0, 0, 0, 0, 0, 119, 113, 0, 0, 0, 0, 0, 0, 134, 63, 0, 0, 0, 0, 0, 0, 144, 33, 0, 0, 0, 0, 0, 0, 85, 29, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 89, 133, 147, 147, 122, 0, 0, 0, 26, 0, 0, 12, 131, 0, 0, 0, 0, 94, 137, 169, 197, 90, 0, 0, 0, 78, 108, 184, 85, 39, 0, 0, 0, 0, 0, 142, 3, 0, 0, 0, 0, 0, 0, 67, 4, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 174, 168, 173, 40, 0, 0, 2, 129, 131, 142, 208, 71, 0, 0, 0, 0, 4, 161, 97, 0, 0, 0, 0, 2, 90, 95, 2, 0, 0, 0, 0, 132, 107, 0, 0, 0, 0, 0, 0, 123, 20, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 126, 121, 143, 103, 0, 0, 0, 0, 146, 63, 74, 97, 0, 0, 0, 0, 75, 0, 80, 60, 0, 0, 0, 0, 5, 0, 90, 43, 0, 0, 0, 0, 0, 0, 103, 55, 0, 0, 0, 0, 0, 0, 70, 43, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 27, 14, 1, 2, 30, 36, 0, 47, 207, 199, 156, 140, 138, 117, 0, 0, 12, 45, 25, 13, 112, 25, 0, 0, 0, 0, 0, 112, 149, 0, 0, 0, 0, 0, 25, 152, 11, 0, 0, 0, 0, 0, 14, 33, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 38, 0, 0, 0, 0, 0, 0, 127, 201, 6, 0, 0, 0, 0, 0, 112, 111, 0, 0, 0, 0, 6, 125, 68, 0, 0, 0, 0, 0, 91, 117, 0, 0, 0, 0, 0, 8, 131, 0, 0, 0, 0, 0, 0, 5, 40, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 21, 3, 0, 0, 0, 0, 0, 20, 88, 109, 113, 41, 0, 0, 0, 0, 0, 0, 47, 120, 0, 0, 0, 0, 0, 0, 25, 130, 0, 0, 0, 0, 0, 0, 115, 106, 0, 0, 0, 0, 0, 65, 123, 3, 0, 0, 0, 0, 1, 75, 11, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 158, 157, 131, 127, 53, 0, 0, 0, 144, 146, 148, 220, 38, 0, 0, 0, 0, 0, 96, 46, 0, 0, 0, 0, 0, 47, 122, 2, 0, 0, 0, 0, 68, 185, 15, 0, 0, 0, 0, 0, 150, 100, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 151, 135, 147, 182, 81, 0, 0, 12, 57, 48, 2, 120, 88, 0, 0, 0, 0, 0, 142, 150, 0, 0, 0, 0, 0, 32, 173, 19, 0, 0, 0, 0, 26, 171, 25, 0, 0, 0, 0, 0, 46, 140, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 41, 0, 0, 0, 0, 0, 95, 116, 123, 0, 0, 0, 0, 0, 0, 0, 117, 0, 0, 0, 0, 0, 0, 4, 119, 0, 0, 0, 0, 0, 0, 30, 101, 0, 0, 0, 0, 0, 0, 66, 53, 0, 0, 0, 0, 0, 0, 40, 14, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 144, 156, 150, 198, 0, 0, 0, 0, 61, 38, 29, 188, 0, 0, 0, 0, 0, 6, 184, 86, 0, 0, 0, 0, 0, 89, 124, 3, 0, 0, 0, 0, 85, 174, 6, 0, 0, 0, 0, 0, 101, 67, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98, 123, 61, 141, 90, 0, 0, 0, 72, 136, 160, 204, 101, 0, 0, 0, 0, 0, 79, 234, 188, 106, 14, 0, 0, 0, 28, 207, 32, 0, 0, 0, 0, 0, 5, 183, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 29, 0, 0, 0, 145, 154, 159, 208, 86, 0, 0, 0, 64, 78, 103, 203, 3, 0, 0, 90, 153, 162, 219, 166, 0, 0, 0, 24, 28, 29, 183, 31, 0, 0, 0, 0, 0, 45, 191, 21, 0, 0, 0, 0, 0, 12, 103, 18, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 37, 0, 0, 0, 0, 68, 107, 156, 153, 0, 0, 0, 0, 0, 0, 139, 68, 0, 0, 0, 0, 0, 35, 115, 0, 0, 0, 0, 0, 0, 125, 31, 0, 0, 0, 0, 0, 68, 149, 0, 0, 0, 0, 0, 0, 42, 54, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 47, 39, 0, 0, 0, 0, 19, 179, 140, 192, 53, 0, 0, 0, 0, 15, 0, 142, 70, 0, 0, 0, 0, 71, 135, 217, 185, 4, 0, 0, 0, 85, 133, 199, 104, 4, 0, 0, 0, 0, 34, 107, 0, 0, 0, 0, 0, 0, 8, 34, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122, 159, 126, 186, 49, 0, 0, 0, 10, 1, 23, 174, 22, 0, 0, 0, 0, 5, 184, 104, 0, 0, 0, 0, 7, 122, 118, 7, 0, 0, 0, 0, 113, 127, 0, 0, 0, 0, 0, 0, 97, 51, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 180, 190, 190, 187, 127, 0, 0, 16, 95, 96, 65, 95, 207, 15, 0, 0, 0, 0, 0, 79, 205, 0, 0, 0, 0, 0, 0, 164, 141, 0, 0, 0, 0, 0, 0, 207, 39, 0, 0, 0, 0, 0, 0, 194, 37, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 35, 1, 0, 0, 0, 58, 170, 115, 205, 12, 0, 0, 0, 0, 4, 96, 127, 0, 0, 0, 0, 0, 68, 121, 4, 0, 0, 0, 0, 35, 178, 27, 0, 0, 0, 0, 3, 151, 75, 0, 0, 0, 0, 0, 8, 79, 3, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 146, 149, 145, 215, 1, 0, 0, 0, 100, 84, 89, 182, 0, 0, 0, 0, 0, 9, 189, 38, 0, 0, 0, 0, 0, 88, 105, 0, 0, 0, 0, 0, 91, 189, 9, 0, 0, 0, 0, 0, 111, 86, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 208, 160, 164, 0, 0, 0, 0, 15, 47, 99, 163, 0, 0, 0, 0, 0, 22, 206, 48, 0, 0, 0, 0, 19, 151, 96, 0, 0, 0, 0, 0, 127, 126, 0, 0, 0, 0, 0, 0, 101, 59, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 132, 164, 51, 0, 0, 0, 0, 58, 58, 97, 19, 0, 0, 0, 0, 0, 0, 111, 0, 0, 0, 0, 0, 0, 0, 106, 0, 0, 0, 0, 0, 0, 0, 106, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 140, 141, 200, 36, 0, 0, 0, 4, 33, 45, 167, 5, 0, 0, 0, 0, 9, 166, 53, 0, 0, 0, 0, 6, 111, 76, 0, 0, 0, 0, 0, 131, 122, 0, 0, 0, 0, 0, 0, 112, 11, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 63, 28, 0, 0, 0, 0, 0, 12, 47, 126, 175, 2, 0, 0, 0, 0, 0, 14, 181, 7, 0, 0, 0, 0, 18, 171, 106, 0, 0, 0, 0, 28, 142, 83, 1, 0, 0, 0, 19, 159, 35, 0, 0, 0, 0, 0, 18, 79, 10, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 63, 63, 43, 0, 0, 0, 0, 31, 75, 150, 169, 0, 0, 0, 0, 0, 0, 146, 81, 0, 0, 0, 0, 0, 19, 140, 1, 0, 0, 0, 0, 0, 105, 68, 0, 0, 0, 0, 0, 113, 140, 0, 0, 0, 0, 0, 0, 83, 31, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 31, 0, 0, 0, 44, 131, 137, 201, 157, 0, 0, 0, 46, 97, 69, 201, 96, 0, 0, 0, 0, 0, 15, 203, 20, 0, 0, 0, 0, 0, 64, 174, 1, 0, 0, 0, 0, 0, 71, 168, 0, 0, 0, 0, 0, 0, 14, 75, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 40, 46, 3, 0, 0, 0, 0, 109, 151, 192, 78, 0, 0, 0, 0, 0, 0, 126, 98, 0, 0, 0, 0, 0, 111, 230, 116, 0, 0, 0, 0, 0, 36, 182, 20, 0, 0, 0, 0, 0, 54, 130, 0, 0, 0, 0, 0, 0, 25, 48, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 32, 30, 26, 0, 0, 0, 0, 83, 185, 213, 238, 6, 0, 0, 0, 7, 10, 172, 121, 0, 0, 0, 0, 113, 210, 233, 186, 94, 0, 0, 0, 122, 216, 50, 31, 15, 0, 0, 49, 214, 53, 0, 0, 0, 0, 0, 30, 73, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 136, 142, 138, 154, 150, 0, 0, 2, 8, 19, 12, 51, 131, 0, 0, 0, 0, 0, 132, 163, 4, 0, 0, 0, 3, 78, 165, 25, 0, 0, 0, 6, 163, 131, 5, 0, 0, 0, 0, 30, 139, 12, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 118, 173, 99, 0, 0, 0, 0, 205, 193, 114, 171, 0, 0, 0, 33, 73, 0, 40, 203, 7, 0, 0, 18, 0, 0, 107, 176, 0, 0, 0, 0, 0, 0, 157, 79, 0, 0, 0, 0, 0, 0, 109, 2, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 41, 9, 8, 3, 0, 0, 0, 12, 107, 152, 182, 215, 2, 0, 0, 0, 0, 0, 95, 183, 0, 0, 0, 0, 0, 34, 206, 51, 0, 0, 0, 0, 13, 163, 86, 0, 0, 0, 0, 0, 159, 164, 0, 0, 0, 0, 0, 0, 93, 35, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 94, 143, 140, 139, 91, 0, 0, 0, 44, 47, 25, 29, 140, 0, 0, 0, 0, 0, 0, 17, 110, 0, 0, 0, 0, 0, 0, 58, 103, 0, 0, 0, 0, 0, 0, 110, 54, 0, 0, 0, 0, 0, 0, 117, 36, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 59, 8, 0, 0, 0, 0, 0, 50, 191, 226, 155, 0, 0, 0, 0, 0, 36, 155, 217, 0, 0, 0, 0, 7, 173, 253, 149, 0, 0, 0, 0, 2, 123, 182, 25, 0, 0, 0, 0, 60, 195, 18, 0, 0, 0, 0, 0, 30, 40, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 120, 125, 44, 41, 117, 0, 0, 86, 73, 57, 91, 194, 52, 0, 0, 0, 0, 11, 186, 91, 0, 0, 0, 0, 9, 113, 101, 3, 0, 0, 0, 0, 73, 137, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 99, 150, 187, 199, 41, 0, 0, 103, 224, 129, 24, 151, 54, 0, 0, 76, 20, 0, 77, 205, 0, 0, 0, 0, 0, 0, 155, 134, 0, 0, 0, 0, 0, 44, 146, 7, 0, 0, 0, 0, 0, 47, 54, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 51, 24, 0, 0, 0, 0, 0, 92, 230, 240, 220, 48, 0, 0, 0, 6, 41, 107, 238, 79, 0, 0, 0, 0, 78, 220, 103, 0, 0, 0, 2, 110, 212, 74, 1, 0, 0, 0, 119, 155, 47, 0, 0, 0, 0, 0, 58, 4, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 162, 202, 184, 176, 85, 0, 0, 0, 124, 92, 35, 114, 158, 0, 0, 0, 4, 15, 0, 38, 159, 0, 0, 0, 0, 0, 38, 132, 217, 10, 0, 0, 0, 0, 15, 74, 180, 3, 0, 0, 0, 0, 0, 0, 102, 26, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 26, 95, 151, 64, 0, 0, 28, 162, 185, 126, 134, 98, 0, 35, 177, 79, 5, 3, 164, 29, 0, 3, 13, 0, 0, 78, 165, 0, 0, 0, 0, 0, 22, 141, 14, 0, 0, 0, 0, 0, 17, 23, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 218, 206, 102, 6, 0, 0, 0, 0, 91, 137, 222, 82, 0, 0, 0, 0, 0, 0, 209, 108, 0, 0, 0, 0, 0, 13, 235, 54, 0, 0, 0, 0, 0, 21, 189, 10, 0, 0, 0, 0, 0, 6, 91, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 91, 211, 175, 191, 103, 0, 0, 23, 223, 179, 59, 91, 127, 0, 0, 115, 67, 0, 55, 195, 23, 0, 0, 4, 0, 4, 195, 115, 0, 0, 0, 0, 4, 151, 91, 0, 0, 0, 0, 0, 23, 135, 4, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 125, 123, 105, 143, 4, 0, 0, 1, 10, 9, 87, 155, 2, 0, 0, 0, 0, 107, 191, 122, 85, 17, 0, 0, 0, 146, 47, 0, 19, 13, 0, 0, 45, 168, 1, 0, 0, 0, 0, 0, 73, 78, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 98, 107, 112, 131, 33, 0, 0, 0, 0, 0, 3, 115, 14, 0, 0, 0, 0, 0, 118, 90, 0, 0, 0, 0, 0, 18, 133, 7, 0, 0, 0, 0, 3, 132, 18, 0, 0, 0, 0, 0, 10, 126, 18, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 175, 230, 155, 0, 0, 0, 0, 128, 110, 156, 165, 0, 0, 0, 0, 0, 7, 194, 57, 0, 0, 0, 0, 0, 78, 116, 1, 0, 0, 0, 0, 31, 159, 2, 0, 0, 0, 0, 0, 68, 75, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 59, 116, 144, 174, 26, 0, 0, 26, 195, 145, 124, 206, 14, 0, 0, 6, 11, 0, 144, 66, 0, 0, 0, 0, 0, 33, 119, 1, 0, 0, 0, 0, 1, 127, 11, 0, 0, 0, 0, 0, 27, 93, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 172, 145, 120, 183, 57, 0, 0, 0, 185, 23, 94, 172, 18, 0, 0, 0, 173, 42, 189, 45, 0, 0, 0, 0, 77, 38, 159, 3, 0, 0, 0, 0, 0, 10, 139, 0, 0, 0, 0, 0, 0, 0, 119, 17, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 87, 75, 111, 137, 78, 0, 16, 132, 191, 140, 96, 148, 86, 0, 2, 24, 0, 0, 68, 169, 4, 0, 0, 0, 0, 0, 159, 61, 0, 0, 0, 0, 0, 26, 119, 0, 0, 0, 0, 0, 0, 60, 29, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 228, 160, 208, 4, 0, 0, 8, 219, 136, 33, 159, 1, 0, 0, 0, 3, 0, 125, 138, 0, 0, 0, 0, 0, 7, 174, 37, 0, 0, 0, 0, 0, 117, 77, 0, 0, 0, 0, 0, 0, 118, 3, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 93, 141, 145, 148, 0, 0, 0, 70, 140, 64, 85, 165, 0, 0, 0, 0, 0, 0, 166, 57, 0, 0, 0, 0, 0, 15, 146, 2, 0, 0, 0, 0, 0, 80, 65, 0, 0, 0, 0, 0, 0, 95, 10, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 1, 7, 42, 143, 131, 0, 0, 4, 66, 119, 121, 167, 65, 0, 0, 0, 0, 0, 0, 117, 3, 0, 0, 0, 0, 0, 0, 98, 0, 0, 0, 0, 0, 0, 4, 135, 0, 0, 0, 0, 0, 0, 0, 79, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 135, 184, 160, 151, 0, 0, 0, 8, 85, 31, 94, 126, 0, 0, 0, 0, 0, 2, 153, 25, 0, 0, 0, 0, 0, 69, 90, 0, 0, 0, 0, 0, 11, 145, 3, 0, 0, 0, 0, 0, 34, 93, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 220, 155, 204, 26, 0, 0, 13, 211, 99, 27, 172, 5, 0, 0, 1, 24, 0, 117, 139, 0, 0, 0, 0, 0, 3, 178, 42, 0, 0, 0, 0, 0, 87, 84, 0, 0, 0, 0, 0, 0, 100, 8, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 179, 140, 177, 0, 0, 0, 0, 144, 70, 23, 158, 0, 0, 0, 0, 0, 0, 135, 94, 0, 0, 0, 0, 0, 11, 161, 14, 0, 0, 0, 0, 0, 104, 68, 0, 0, 0, 0, 0, 0, 118, 12, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 57, 67, 117, 123, 102, 0, 0, 61, 247, 247, 252, 253, 249, 55, 0, 38, 104, 58, 20, 96, 253, 65, 0, 0, 0, 0, 0, 59, 236, 60, 0, 0, 0, 0, 0, 54, 186, 26, 0, 0, 0, 0, 0, 35, 36, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 169, 156, 146, 180, 22, 0, 6, 154, 91, 33, 1, 130, 39, 0, 0, 9, 0, 0, 37, 191, 3, 0, 0, 0, 0, 0, 130, 132, 0, 0, 0, 0, 0, 34, 150, 11, 0, 0, 0, 0, 0, 77, 39, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 134, 137, 162, 125, 0, 0, 0, 70, 60, 18, 88, 118, 0, 0, 0, 0, 0, 0, 102, 78, 0, 0, 0, 0, 0, 0, 125, 44, 0, 0, 0, 0, 0, 0, 127, 17, 0, 0, 0, 0, 0, 12, 93, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 82, 129, 142, 147, 166, 83, 0, 19, 115, 99, 107, 101, 199, 68, 0, 0, 0, 0, 0, 121, 188, 1, 0, 0, 0, 0, 14, 201, 65, 0, 0, 0, 0, 0, 113, 67, 0, 0, 0, 0, 0, 13, 142, 1, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 166, 145, 143, 197, 14, 0, 0, 71, 94, 37, 16, 167, 3, 0, 0, 0, 0, 0, 137, 124, 0, 0, 0, 0, 0, 23, 178, 23, 0, 0, 0, 0, 11, 164, 29, 0, 0, 0, 0, 0, 33, 115, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 113, 140, 135, 209, 96, 0, 0, 0, 0, 0, 0, 160, 54, 0, 0, 0, 0, 0, 11, 173, 3, 0, 0, 0, 0, 0, 14, 161, 0, 0, 0, 0, 0, 0, 11, 199, 19, 0, 0, 0, 0, 0, 0, 141, 39, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 81, 129, 169, 97, 0, 0, 0, 89, 155, 35, 154, 7, 0, 0, 3, 116, 15, 146, 45, 0, 0, 0, 0, 1, 58, 92, 0, 0, 0, 0, 0, 18, 136, 2, 0, 0, 0, 0, 0, 56, 91, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 124, 165, 64, 0, 0, 0, 0, 97, 41, 129, 23, 0, 0, 0, 0, 0, 0, 131, 2, 0, 0, 0, 0, 0, 0, 129, 0, 0, 0, 0, 0, 0, 0, 131, 0, 0, 0, 0, 0, 0, 0, 85, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 146, 141, 165, 77, 0, 0, 0, 154, 105, 92, 170, 1, 0, 0, 6, 50, 0, 154, 28, 0, 0, 0, 0, 0, 45, 118, 0, 0, 0, 0, 0, 41, 158, 6, 0, 0, 0, 0, 0, 96, 62, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 192, 184, 212, 99, 0, 0, 0, 7, 32, 4, 117, 113, 0, 0, 0, 0, 0, 91, 202, 137, 0, 0, 0, 0, 0, 59, 205, 89, 0, 0, 0, 0, 0, 0, 174, 36, 0, 0, 0, 0, 0, 0, 118, 13, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 209, 207, 205, 96, 0, 0, 0, 2, 65, 51, 86, 160, 0, 0, 0, 0, 0, 0, 112, 142, 0, 0, 0, 0, 0, 0, 199, 76, 0, 0, 0, 0, 0, 51, 151, 5, 0, 0, 0, 0, 0, 70, 51, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 78, 36, 69, 115, 0, 0, 19, 188, 126, 125, 196, 46, 0, 0, 138, 43, 0, 84, 129, 0, 0, 0, 26, 0, 8, 152, 29, 0, 0, 0, 0, 1, 120, 46, 0, 0, 0, 0, 0, 6, 95, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 27, 0, 0, 0, 0, 68, 141, 185, 86, 0, 0, 0, 56, 149, 35, 146, 9, 0, 0, 14, 129, 17, 143, 23, 0, 0, 0, 1, 8, 89, 73, 0, 0, 0, 0, 0, 77, 156, 0, 0, 0, 0, 0, 0, 62, 59, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 116, 115, 126, 146, 0, 0, 0, 5, 2, 0, 49, 131, 0, 0, 0, 0, 0, 0, 96, 86, 0, 0, 0, 0, 0, 0, 115, 40, 0, 0, 0, 0, 0, 0, 136, 9, 0, 0, 0, 0, 0, 0, 108, 3, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 81, 85, 173, 117, 0, 0, 0, 28, 133, 133, 116, 175, 0, 0, 0, 0, 0, 0, 86, 123, 0, 0, 0, 0, 0, 0, 153, 102, 0, 0, 0, 0, 0, 3, 176, 19, 0, 0, 0, 0, 0, 2, 116, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 106, 67, 120, 140, 0, 0, 0, 131, 134, 117, 180, 52, 0, 0, 102, 62, 1, 119, 89, 0, 0, 0, 36, 3, 79, 96, 2, 0, 0, 0, 0, 86, 94, 0, 0, 0, 0, 0, 0, 13, 4, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 30, 0, 0, 0, 0, 43, 181, 211, 236, 5, 0, 0, 0, 35, 72, 148, 159, 0, 0, 0, 0, 0, 38, 187, 23, 0, 0, 0, 8, 108, 189, 107, 0, 0, 0, 0, 3, 139, 154, 5, 0, 0, 0, 0, 0, 57, 33, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 164, 163, 129, 20, 0, 0, 0, 0, 164, 23, 129, 85, 0, 0, 0, 0, 129, 43, 81, 97, 0, 0, 0, 0, 52, 33, 51, 127, 0, 0, 0, 0, 0, 0, 35, 154, 0, 0, 0, 0, 0, 0, 4, 88, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98, 123, 112, 143, 68, 0, 0, 0, 0, 0, 10, 129, 28, 0, 0, 0, 0, 1, 136, 50, 0, 0, 0, 0, 0, 71, 77, 0, 0, 0, 0, 0, 78, 116, 0, 0, 0, 0, 0, 0, 134, 36, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 170, 158, 180, 5, 0, 0, 0, 149, 58, 136, 133, 0, 0, 0, 3, 54, 3, 178, 33, 0, 0, 0, 0, 0, 41, 111, 0, 0, 0, 0, 0, 5, 151, 14, 0, 0, 0, 0, 0, 29, 119, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 126, 128, 113, 67, 15, 0, 0, 49, 48, 82, 99, 163, 157, 0, 0, 0, 0, 0, 0, 10, 170, 0, 0, 0, 0, 0, 0, 70, 169, 0, 0, 0, 0, 0, 0, 148, 51, 0, 0, 0, 0, 0, 0, 103, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 94, 177, 194, 106, 0, 0, 0, 0, 41, 56, 127, 125, 0, 0, 0, 0, 0, 0, 166, 33, 0, 0, 0, 0, 0, 1, 143, 2, 0, 0, 0, 0, 0, 51, 101, 0, 0, 0, 0, 0, 0, 33, 68, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 139, 116, 169, 90, 0, 0, 0, 116, 133, 98, 181, 5, 0, 0, 7, 91, 14, 173, 54, 0, 0, 0, 0, 0, 95, 113, 2, 0, 0, 0, 0, 55, 155, 2, 0, 0, 0, 0, 0, 92, 55, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 2, 0, 0, 0, 0, 0, 0, 87, 136, 68, 2, 0, 0, 0, 0, 0, 17, 151, 53, 0, 0, 0, 0, 0, 0, 122, 79, 0, 0, 0, 0, 0, 0, 128, 18, 0, 0, 0, 0, 0, 44, 80, 0, 0, 0, 0, 0, 0, 48, 17, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 211, 235, 231, 83, 0, 0, 0, 20, 167, 107, 255, 119, 0, 0, 0, 0, 0, 0, 255, 95, 0, 0, 0, 0, 0, 16, 247, 63, 0, 0, 0, 0, 0, 51, 191, 0, 0, 0, 0, 0, 0, 27, 123, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 135, 126, 145, 167, 2, 0, 2, 145, 102, 62, 135, 75, 0, 0, 49, 61, 0, 119, 112, 0, 0, 0, 0, 0, 32, 148, 16, 0, 0, 0, 0, 56, 163, 8, 0, 0, 0, 0, 0, 108, 79, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 173, 140, 164, 83, 0, 0, 0, 128, 179, 41, 165, 16, 0, 0, 0, 96, 7, 145, 57, 0, 0, 0, 0, 0, 66, 113, 0, 0, 0, 0, 0, 43, 203, 7, 0, 0, 0, 0, 0, 79, 104, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 20, 1, 0, 0, 0, 0, 0, 11, 113, 142, 99, 15, 0, 0, 0, 0, 0, 8, 130, 119, 0, 0, 0, 0, 0, 0, 118, 117, 0, 0, 0, 0, 0, 0, 170, 47, 0, 0, 0, 0, 0, 56, 116, 0, 0, 0, 0, 0, 0, 35, 31, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 32, 0, 0, 0, 11, 139, 143, 157, 108, 0, 0, 0, 120, 147, 56, 171, 26, 0, 0, 27, 77, 2, 143, 71, 0, 0, 0, 0, 0, 71, 101, 3, 0, 0, 0, 0, 73, 155, 0, 0, 0, 0, 0, 0, 69, 56, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 117, 113, 135, 99, 0, 0, 0, 57, 45, 31, 108, 96, 0, 0, 0, 0, 0, 0, 114, 33, 0, 0, 0, 0, 0, 0, 108, 0, 0, 0, 0, 0, 0, 9, 116, 0, 0, 0, 0, 0, 0, 13, 107, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 1, 0, 0, 16, 160, 145, 189, 119, 1, 0, 0, 137, 144, 67, 174, 9, 0, 0, 34, 109, 20, 163, 31, 0, 0, 0, 1, 12, 124, 59, 0, 0, 0, 0, 0, 158, 96, 0, 0, 0, 0, 0, 0, 92, 9, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 141, 137, 121, 30, 0, 0, 0, 0, 10, 25, 146, 86, 0, 0, 0, 0, 0, 0, 134, 84, 0, 0, 0, 0, 0, 0, 120, 84, 0, 0, 0, 0, 0, 0, 100, 113, 0, 0, 0, 0, 0, 0, 46, 121, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 63, 63, 27, 0, 0, 0, 0, 10, 91, 88, 160, 124, 0, 0, 0, 0, 0, 0, 106, 146, 0, 0, 0, 0, 0, 1, 188, 63, 0, 0, 0, 0, 0, 59, 149, 5, 0, 0, 0, 0, 6, 176, 37, 0, 0, 0, 0, 0, 7, 87, 1, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 67, 122, 133, 152, 229, 22, 0, 4, 55, 29, 6, 61, 175, 0, 0, 0, 0, 0, 3, 187, 54, 0, 0, 0, 0, 0, 85, 119, 1, 0, 0, 0, 0, 48, 190, 7, 0, 0, 0, 0, 0, 49, 99, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 132, 131, 123, 153, 48, 0, 0, 18, 40, 13, 0, 72, 90, 0, 0, 0, 0, 0, 38, 117, 145, 10, 0, 0, 0, 57, 177, 200, 181, 21, 0, 0, 0, 0, 0, 95, 28, 0, 0, 0, 0, 0, 0, 74, 8, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 134, 147, 162, 157, 133, 0, 0, 1, 13, 41, 66, 127, 193, 0, 0, 0, 0, 0, 0, 117, 143, 0, 0, 0, 0, 0, 0, 161, 96, 0, 0, 0, 0, 0, 0, 166, 100, 0, 0, 0, 0, 0, 0, 108, 137, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 106, 110, 80, 23, 0, 0, 0, 0, 9, 44, 78, 110, 0, 0, 0, 0, 0, 0, 7, 102, 0, 0, 0, 0, 0, 0, 60, 85, 0, 0, 0, 0, 0, 0, 86, 8, 0, 0, 0, 0, 0, 0, 94, 4, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 197, 195, 224, 37, 0, 0, 0, 23, 105, 93, 222, 56, 0, 0, 0, 0, 0, 0, 208, 49, 0, 0, 0, 0, 0, 0, 213, 56, 0, 0, 0, 0, 0, 0, 214, 57, 0, 0, 0, 0, 0, 0, 145, 41, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 191, 215, 159, 159, 135, 0, 0, 103, 143, 51, 159, 235, 63, 0, 0, 99, 15, 0, 167, 123, 0, 0, 0, 0, 0, 8, 211, 43, 0, 0, 0, 0, 0, 67, 143, 0, 12, 0, 0, 0, 0, 51, 71, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 121, 198, 213, 5, 0, 0, 14, 178, 119, 175, 136, 0, 0, 0, 0, 3, 16, 196, 26, 0, 0, 0, 0, 0, 95, 120, 0, 0, 0, 0, 0, 22, 203, 19, 0, 0, 0, 0, 0, 39, 139, 3, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 119, 119, 144, 162, 110, 0, 0, 108, 166, 154, 184, 250, 83, 0, 0, 0, 0, 0, 179, 153, 0, 0, 0, 0, 0, 30, 221, 49, 0, 0, 0, 0, 0, 140, 113, 0, 0, 0, 0, 0, 0, 149, 45, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98, 112, 97, 75, 73, 20, 0, 20, 167, 89, 101, 203, 138, 18, 0, 97, 46, 8, 165, 77, 0, 0, 0, 27, 6, 111, 90, 0, 0, 0, 0, 0, 46, 156, 0, 0, 0, 0, 0, 0, 34, 83, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 38, 17, 0, 0, 0, 0, 6, 193, 105, 168, 92, 0, 0, 0, 22, 113, 0, 129, 97, 0, 0, 0, 0, 46, 93, 181, 163, 83, 23, 0, 0, 80, 124, 188, 83, 6, 0, 0, 0, 0, 0, 104, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 140, 160, 187, 188, 76, 0, 0, 117, 116, 93, 81, 194, 63, 0, 0, 0, 0, 0, 85, 177, 0, 0, 0, 0, 0, 0, 180, 98, 0, 0, 0, 0, 0, 80, 153, 8, 0, 0, 0, 0, 0, 138, 81, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 169, 199, 145, 0, 0, 0, 0, 22, 24, 139, 121, 10, 0, 0, 0, 1, 33, 212, 160, 10, 0, 0, 0, 39, 180, 165, 11, 0, 0, 0, 0, 0, 101, 63, 0, 0, 0, 0, 0, 0, 95, 7, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 40, 30, 0, 0, 0, 16, 151, 138, 209, 19, 0, 0, 0, 12, 163, 149, 120, 0, 0, 0, 0, 36, 193, 127, 2, 0, 0, 0, 0, 138, 126, 100, 0, 0, 0, 0, 0, 174, 142, 9, 0, 0, 0, 0, 0, 35, 19, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 111, 88, 6, 0, 0, 0, 0, 56, 150, 133, 113, 0, 0, 0, 0, 59, 225, 177, 57, 0, 0, 0, 92, 211, 106, 2, 0, 0, 0, 22, 162, 153, 77, 0, 0, 0, 0, 61, 206, 182, 10, 0, 0, 0, 0, 2, 61, 31, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 72, 87, 30, 0, 0, 0, 36, 170, 139, 179, 1, 0, 0, 0, 24, 162, 164, 95, 0, 0, 0, 0, 17, 148, 165, 26, 0, 0, 0, 0, 119, 129, 145, 41, 0, 0, 0, 0, 112, 150, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 88, 36, 0, 0, 0, 0, 92, 107, 148, 120, 0, 0, 0, 0, 115, 63, 94, 53, 0, 0, 0, 0, 5, 125, 109, 4, 0, 0, 0, 0, 67, 115, 102, 63, 0, 0, 0, 0, 67, 130, 124, 53, 0, 0, 0, 0, 4, 50, 29, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 46, 39, 35, 0, 0, 0, 41, 148, 135, 240, 104, 0, 0, 0, 73, 152, 137, 201, 5, 0, 0, 0, 1, 122, 193, 24, 0, 0, 0, 0, 66, 155, 114, 0, 0, 0, 0, 0, 187, 130, 96, 0, 0, 0, 0, 0, 104, 104, 9, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 111, 54, 30, 0, 0, 0, 0, 132, 51, 210, 39, 0, 0, 0, 0, 115, 195, 118, 0, 0, 0, 0, 32, 106, 135, 13, 0, 0, 0, 0, 115, 49, 110, 25, 0, 0, 0, 2, 169, 107, 66, 0, 0, 0, 0, 0, 47, 33, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 98, 83, 0, 0, 0, 0, 82, 163, 44, 148, 7, 0, 0, 0, 67, 180, 80, 130, 0, 0, 0, 0, 0, 100, 170, 8, 0, 0, 0, 0, 42, 159, 147, 0, 0, 0, 0, 0, 158, 179, 60, 0, 0, 0, 0, 0, 34, 48, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 63, 42, 39, 0, 0, 0, 36, 163, 95, 187, 54, 0, 0, 0, 25, 158, 105, 153, 0, 0, 0, 0, 9, 147, 167, 3, 0, 0, 0, 0, 107, 110, 166, 6, 0, 0, 0, 0, 182, 151, 60, 0, 0, 0, 0, 0, 40, 36, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 88, 129, 13, 0, 0, 0, 16, 155, 146, 88, 22, 0, 0, 0, 4, 146, 124, 1, 0, 0, 0, 0, 22, 148, 177, 40, 0, 0, 0, 0, 100, 111, 155, 42, 0, 0, 0, 0, 124, 155, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 107, 55, 0, 0, 0, 0, 0, 143, 143, 223, 0, 0, 0, 0, 0, 107, 203, 123, 0, 0, 0, 0, 0, 107, 175, 8, 0, 0, 0, 0, 47, 219, 107, 0, 0, 0, 0, 0, 127, 203, 11, 0, 0, 0, 0, 0, 23, 35, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 78, 89, 51, 0, 0, 0, 0, 114, 51, 8, 87, 3, 0, 0, 0, 33, 106, 97, 53, 0, 0, 0, 0, 0, 63, 107, 39, 0, 0, 0, 0, 0, 81, 20, 103, 0, 0, 0, 0, 0, 78, 86, 97, 0, 0, 0, 0, 0, 8, 58, 14, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 103, 165, 133, 3, 0, 0, 0, 48, 117, 0, 30, 121, 25, 0, 0, 11, 73, 88, 153, 66, 4, 0, 0, 9, 138, 137, 8, 0, 0, 0, 3, 144, 144, 121, 0, 0, 0, 0, 5, 176, 159, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 46, 0, 0, 0, 0, 0, 65, 134, 43, 119, 1, 0, 0, 0, 103, 149, 183, 70, 0, 0, 0, 0, 0, 22, 179, 104, 0, 0, 0, 0, 0, 88, 110, 111, 0, 0, 0, 0, 0, 66, 117, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 91, 90, 28, 0, 0, 0, 0, 115, 95, 48, 164, 0, 0, 0, 0, 117, 95, 18, 159, 0, 0, 0, 0, 27, 184, 204, 97, 0, 0, 0, 0, 57, 163, 102, 127, 0, 0, 0, 0, 68, 133, 113, 108, 0, 0, 0, 0, 8, 48, 52, 16, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 104, 62, 17, 3, 0, 0, 0, 112, 46, 93, 83, 0, 0, 0, 0, 82, 166, 118, 3, 0, 0, 0, 29, 145, 120, 0, 0, 0, 0, 0, 121, 97, 93, 0, 0, 0, 0, 0, 164, 155, 9, 0, 0, 0, 0, 0, 38, 31, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 64, 88, 13, 0, 0, 1, 105, 124, 169, 24, 0, 0, 0, 37, 164, 136, 56, 0, 0, 0, 0, 19, 151, 151, 26, 0, 0, 0, 0, 107, 91, 162, 35, 0, 0, 0, 1, 150, 116, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 172, 159, 17, 0, 0, 0, 0, 155, 45, 125, 60, 0, 0, 0, 1, 151, 153, 152, 21, 0, 0, 17, 150, 115, 168, 8, 0, 0, 0, 78, 75, 0, 194, 21, 0, 0, 0, 21, 158, 158, 110, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 61, 8, 0, 0, 0, 0, 0, 81, 120, 100, 4, 0, 0, 0, 0, 38, 198, 95, 3, 0, 0, 0, 2, 113, 132, 0, 0, 0, 0, 0, 16, 121, 121, 0, 0, 0, 0, 0, 0, 34, 127, 0, 0, 0, 0, 0, 0, 21, 21, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 127, 107, 8, 0, 0, 0, 0, 147, 44, 151, 91, 0, 0, 0, 0, 123, 183, 163, 27, 0, 0, 0, 99, 167, 155, 0, 0, 0, 0, 0, 171, 51, 155, 0, 0, 0, 0, 0, 135, 175, 95, 0, 0, 0, 0, 0, 8, 43, 4, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 22, 121, 66, 0, 0, 0, 0, 42, 221, 104, 190, 36, 0, 0, 0, 10, 164, 104, 169, 27, 0, 0, 0, 61, 167, 202, 26, 0, 0, 0, 9, 169, 85, 195, 8, 0, 0, 0, 27, 195, 172, 118, 1, 0, 0, 0, 0, 45, 60, 9, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 140, 148, 29, 0, 0, 0, 0, 43, 13, 83, 55, 0, 0, 0, 0, 95, 122, 131, 8, 0, 0, 0, 41, 133, 137, 0, 0, 0, 0, 0, 130, 49, 139, 0, 0, 0, 0, 0, 115, 154, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 78, 0, 0, 0, 0, 0, 74, 194, 138, 0, 0, 0, 0, 0, 135, 136, 35, 0, 0, 0, 0, 0, 116, 117, 0, 0, 0, 0, 0, 18, 123, 126, 9, 0, 0, 0, 0, 49, 163, 110, 2, 0, 0, 0, 0, 4, 49, 11, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 75, 103, 12, 0, 0, 0, 2, 210, 106, 10, 0, 0, 0, 0, 0, 129, 173, 101, 130, 124, 26, 0, 0, 1, 120, 230, 99, 34, 16, 0, 0, 34, 202, 172, 88, 0, 0, 0, 0, 5, 167, 169, 15, 0, 0, 0, 0, 0, 29, 21, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 77, 119, 104, 21, 0, 0, 0, 124, 135, 19, 97, 105, 0, 0, 0, 78, 172, 121, 118, 9, 0, 0, 0, 60, 147, 152, 104, 0, 0, 0, 0, 155, 70, 28, 150, 0, 0, 0, 0, 106, 161, 143, 73, 0, 0, 0, 0, 5, 50, 18, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 141, 129, 46, 0, 0, 0, 0, 96, 42, 66, 94, 0, 0, 0, 0, 55, 162, 124, 9, 0, 0, 0, 52, 150, 169, 0, 0, 0, 0, 2, 162, 87, 138, 0, 0, 0, 0, 1, 143, 153, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 137, 123, 0, 0, 0, 0, 32, 200, 185, 182, 0, 0, 0, 0, 64, 195, 200, 77, 0, 0, 0, 0, 5, 179, 207, 53, 0, 0, 0, 0, 70, 210, 169, 172, 0, 0, 0, 0, 29, 149, 105, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 120, 139, 98, 0, 0, 0, 0, 128, 116, 9, 135, 0, 0, 0, 0, 141, 212, 165, 124, 0, 0, 0, 0, 118, 134, 97, 159, 27, 0, 0, 0, 129, 78, 2, 85, 64, 0, 0, 0, 38, 139, 159, 129, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 63, 0, 0, 0, 0, 0, 0, 101, 105, 62, 41, 0, 0, 0, 0, 64, 176, 96, 19, 0, 0, 0, 30, 135, 144, 0, 0, 0, 0, 0, 99, 74, 143, 1, 0, 0, 0, 0, 78, 131, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 100, 95, 68, 13, 0, 0, 87, 108, 17, 0, 35, 25, 0, 0, 48, 149, 128, 142, 129, 8, 0, 0, 0, 0, 79, 86, 137, 38, 0, 0, 0, 0, 128, 4, 119, 70, 0, 0, 0, 0, 123, 193, 153, 2, 0, 0, 0, 0, 12, 41, 4, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 107, 59, 0, 0, 0, 8, 131, 95, 83, 119, 0, 0, 0, 4, 159, 111, 159, 11, 0, 0, 0, 35, 179, 123, 0, 0, 0, 0, 4, 151, 119, 111, 0, 0, 0, 0, 16, 179, 171, 15, 0, 0, 0, 0, 0, 39, 27, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 76, 106, 32, 0, 0, 0, 25, 152, 67, 109, 131, 0, 0, 0, 0, 53, 130, 191, 44, 0, 0, 0, 0, 103, 61, 83, 157, 2, 0, 0, 14, 124, 1, 1, 169, 19, 0, 0, 5, 105, 119, 141, 106, 0, 0, 0, 0, 0, 18, 25, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 103, 23, 0, 0, 0, 4, 103, 163, 91, 167, 0, 0, 0, 8, 179, 63, 123, 87, 0, 0, 0, 8, 131, 191, 63, 0, 0, 0, 0, 135, 191, 111, 0, 0, 0, 0, 47, 195, 171, 12, 0, 0, 0, 0, 4, 59, 19, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 57, 57, 23, 0, 0, 0, 0, 106, 68, 19, 0, 0, 0, 61, 64, 79, 0, 0, 0, 0, 31, 81, 65, 35, 0, 0, 0, 0, 0, 13, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 23, 72, 10, 0, 0, 1, 0, 66, 87, 82, 157, 0, 0, 0, 0, 47, 190, 159, 71, 0, 0, 0, 98, 170, 203, 20, 0, 0, 0, 6, 177, 70, 153, 0, 0, 0, 0, 3, 139, 151, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 80, 105, 18, 0, 0, 0, 7, 178, 68, 98, 78, 0, 0, 0, 0, 113, 161, 152, 13, 0, 0, 0, 70, 171, 196, 6, 0, 0, 0, 0, 182, 78, 184, 6, 0, 0, 0, 0, 168, 148, 91, 0, 0, 0, 0, 0, 36, 57, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 100, 64, 0, 0, 0, 0, 0, 105, 6, 28, 3, 0, 0, 0, 0, 130, 125, 105, 13, 0, 0, 0, 32, 181, 24, 0, 0, 0, 0, 0, 84, 112, 78, 0, 0, 0, 0, 0, 24, 114, 96, 0, 0, 0, 0, 0, 0, 31, 19, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 56, 22, 56, 0, 0, 24, 139, 111, 171, 155, 46, 0, 0, 120, 105, 58, 159, 23, 0, 0, 0, 99, 176, 134, 15, 0, 0, 0, 0, 96, 206, 96, 0, 0, 0, 0, 0, 189, 160, 84, 0, 0, 0, 0, 0, 28, 11, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 126, 98, 0, 0, 0, 27, 133, 102, 31, 43, 19, 0, 0, 135, 104, 30, 104, 87, 17, 0, 0, 103, 222, 106, 14, 0, 0, 0, 9, 161, 125, 100, 0, 0, 0, 0, 17, 144, 131, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 139, 81, 0, 0, 0, 0, 0, 148, 28, 36, 80, 49, 0, 0, 0, 146, 120, 139, 91, 44, 0, 0, 42, 160, 132, 0, 0, 0, 0, 0, 132, 111, 157, 4, 0, 0, 0, 0, 119, 147, 75, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 149, 72, 0, 0, 0, 0, 49, 111, 2, 2, 0, 0, 0, 0, 106, 120, 77, 0, 0, 0, 0, 43, 156, 142, 4, 0, 0, 0, 5, 139, 86, 100, 0, 0, 0, 0, 22, 148, 102, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 147, 166, 55, 0, 0, 0, 21, 170, 39, 0, 19, 0, 0, 0, 30, 176, 21, 37, 37, 0, 0, 0, 0, 83, 241, 130, 58, 1, 0, 0, 95, 148, 175, 36, 0, 0, 0, 48, 82, 93, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 73, 90, 0, 0, 0, 75, 184, 216, 235, 101, 0, 0, 0, 158, 174, 191, 102, 2, 0, 0, 0, 8, 128, 249, 195, 142, 23, 0, 0, 0, 24, 201, 194, 239, 156, 0, 0, 0, 0, 16, 82, 91, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 63, 60, 0, 0, 0, 0, 141, 131, 181, 161, 0, 0, 0, 0, 192, 119, 162, 31, 0, 0, 0, 0, 7, 148, 151, 67, 0, 0, 0, 0, 0, 123, 31, 115, 0, 0, 0, 0, 0, 107, 121, 120, 0, 0, 0, 0, 0, 14, 87, 26, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 66, 64, 2, 69, 23, 0, 2, 123, 159, 79, 141, 128, 8, 0, 0, 101, 174, 107, 173, 9, 0, 0, 0, 6, 158, 225, 91, 0, 0, 0, 0, 86, 205, 157, 120, 0, 0, 0, 0, 186, 209, 82, 7, 0, 0, 0, 0, 41, 25, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 107, 141, 5, 0, 0, 0, 0, 114, 65, 89, 78, 0, 0, 0, 0, 137, 132, 148, 3, 0, 0, 0, 4, 129, 202, 24, 0, 0, 0, 0, 87, 181, 171, 39, 0, 0, 0, 0, 124, 163, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 125, 136, 16, 0, 0, 0, 102, 82, 109, 76, 1, 0, 0, 0, 126, 131, 93, 0, 0, 0, 0, 47, 139, 137, 40, 0, 0, 0, 44, 198, 134, 126, 19, 0, 0, 0, 33, 160, 132, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 104, 0, 0, 0, 0, 0, 111, 104, 94, 112, 8, 0, 0, 0, 159, 117, 154, 42, 3, 0, 0, 22, 169, 145, 0, 0, 0, 0, 0, 146, 127, 157, 13, 0, 0, 0, 0, 150, 144, 104, 2, 0, 0, 0, 0, 32, 41, 2, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 107, 112, 12, 0, 0, 0, 0, 104, 33, 28, 45, 0, 0, 0, 0, 119, 88, 140, 3, 0, 0, 0, 16, 167, 83, 0, 0, 0, 0, 0, 115, 152, 36, 0, 0, 0, 0, 0, 163, 111, 0, 0, 0, 0, 0, 0, 35, 9, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 88, 1, 0, 0, 0, 0, 70, 121, 83, 115, 0, 0, 0, 0, 83, 135, 199, 150, 0, 0, 0, 0, 3, 142, 38, 131, 0, 0, 0, 0, 46, 137, 18, 150, 0, 0, 0, 0, 41, 144, 128, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 120, 150, 38, 0, 0, 0, 0, 28, 115, 127, 12, 0, 0, 0, 0, 0, 118, 118, 3, 0, 0, 0, 0, 41, 125, 60, 134, 34, 0, 0, 0, 106, 91, 16, 121, 60, 0, 0, 0, 40, 149, 131, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 75, 52, 0, 12, 0, 0, 56, 156, 51, 33, 99, 98, 0, 0, 98, 118, 35, 118, 76, 3, 0, 0, 16, 174, 143, 19, 0, 0, 0, 0, 89, 160, 76, 0, 0, 0, 0, 0, 113, 139, 33, 0, 0, 0, 0, 0, 5, 11, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 51, 113, 105, 36, 88, 58, 0, 0, 135, 64, 64, 95, 29, 0, 0, 0, 70, 185, 131, 19, 0, 0, 0, 0, 115, 112, 127, 106, 0, 0, 0, 0, 5, 29, 33, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 91, 40, 0, 0, 0, 0, 87, 72, 95, 57, 0, 0, 0, 0, 105, 57, 126, 11, 0, 0, 0, 0, 26, 118, 46, 74, 0, 0, 0, 0, 66, 92, 0, 85, 0, 0, 0, 0, 13, 84, 81, 91, 0, 0, 0, 0, 0, 1, 42, 14, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 81, 113, 20, 0, 0, 0, 0, 133, 116, 182, 53, 0, 0, 0, 0, 139, 176, 83, 0, 0, 0, 0, 48, 192, 72, 0, 0, 0, 0, 0, 143, 148, 62, 0, 0, 0, 0, 0, 163, 165, 5, 0, 0, 0, 0, 0, 27, 24, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 58, 38, 52, 0, 0, 0, 0, 109, 104, 169, 66, 0, 0, 0, 0, 45, 141, 131, 15, 0, 0, 0, 0, 0, 59, 153, 6, 0, 0, 0, 0, 0, 74, 167, 83, 0, 0, 0, 0, 0, 98, 149, 81, 0, 0, 0, 0, 0, 14, 42, 2, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 112, 53, 0, 0, 0, 0, 43, 149, 96, 156, 23, 0, 0, 0, 71, 193, 156, 32, 0, 0, 0, 60, 192, 87, 0, 0, 0, 0, 0, 163, 149, 49, 0, 0, 0, 0, 2, 175, 155, 2, 0, 0, 0, 0, 0, 40, 22, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 76, 3, 0, 0, 0, 0, 35, 132, 160, 54, 0, 0, 0, 0, 19, 126, 123, 16, 0, 0, 0, 0, 0, 127, 148, 47, 0, 0, 0, 0, 0, 133, 39, 105, 0, 0, 0, 0, 0, 51, 132, 79, 0, 0, 0, 0, 0, 0, 34, 6, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 74, 0, 0, 0, 0, 0, 17, 165, 149, 92, 0, 0, 0, 0, 0, 91, 154, 20, 0, 0, 0, 0, 0, 13, 170, 4, 0, 0, 0, 0, 0, 37, 191, 16, 0, 0, 0, 0, 0, 18, 195, 13, 0, 0, 0, 0, 0, 0, 42, 1, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 105, 33, 0, 0, 0, 0, 106, 154, 156, 155, 10, 0, 0, 0, 136, 187, 110, 11, 0, 0, 0, 86, 226, 59, 0, 0, 0, 0, 0, 169, 187, 27, 0, 0, 0, 0, 0, 211, 163, 1, 0, 0, 0, 0, 0, 47, 23, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 40, 106, 45, 0, 0, 0, 0, 116, 62, 112, 75, 0, 0, 0, 0, 111, 101, 113, 6, 0, 0, 0, 0, 0, 122, 125, 94, 0, 0, 0, 0, 0, 98, 6, 121, 0, 0, 0, 0, 0, 68, 129, 77, 0, 0, 0, 0, 0, 7, 47, 2, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 63, 48, 62, 51, 3, 0, 0, 34, 224, 133, 101, 121, 22, 0, 0, 0, 98, 168, 126, 162, 15, 0, 0, 0, 2, 160, 197, 38, 0, 0, 0, 0, 44, 196, 112, 141, 0, 0, 0, 0, 13, 146, 112, 181, 0, 0, 0, 0, 0, 38, 126, 81, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 74, 28, 0, 0, 0, 0, 0, 35, 86, 134, 63, 0, 0, 0, 0, 0, 94, 149, 35, 0, 0, 0, 0, 12, 72, 74, 46, 0, 0, 0, 0, 56, 79, 8, 88, 0, 0, 0, 0, 17, 86, 74, 101, 0, 0, 0, 0, 0, 10, 46, 14, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 121, 48, 0, 0, 0, 0, 31, 190, 162, 21, 0, 0, 0, 0, 6, 148, 92, 0, 0, 0, 0, 0, 77, 90, 130, 40, 0, 0, 0, 0, 94, 57, 114, 90, 0, 0, 0, 0, 42, 150, 136, 33, 0, 0, 0, 0, 0, 30, 28, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 32, 102, 21, 74, 6, 0, 13, 233, 249, 224, 233, 221, 34, 0, 17, 250, 217, 196, 251, 112, 1, 0, 0, 136, 252, 245, 120, 0, 0, 0, 0, 146, 252, 242, 191, 0, 0, 0, 0, 82, 217, 231, 156, 0, 0, 0, 0, 0, 34, 41, 12, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 59, 0, 0, 0, 0, 0, 87, 179, 75, 124, 135, 43, 0, 0, 171, 104, 183, 132, 13, 0, 0, 0, 105, 239, 161, 38, 0, 0, 0, 0, 123, 117, 129, 138, 0, 0, 0, 0, 64, 166, 171, 98, 0, 0, 0, 0, 0, 31, 49, 4, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 108, 63, 0, 0, 0, 0, 31, 191, 58, 76, 135, 0, 0, 0, 8, 155, 96, 172, 40, 0, 0, 0, 27, 159, 165, 12, 0, 0, 0, 0, 133, 127, 141, 0, 0, 0, 0, 0, 123, 189, 53, 0, 0, 0, 0, 0, 9, 45, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 84, 118, 90, 2, 0, 0, 0, 90, 202, 112, 209, 33, 0, 0, 0, 12, 162, 150, 138, 1, 0, 0, 0, 24, 160, 180, 11, 0, 0, 0, 0, 119, 139, 146, 74, 0, 0, 0, 0, 84, 152, 205, 121, 0, 0, 0, 0, 0, 12, 59, 17, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 62, 43, 26, 24, 0, 0, 75, 204, 128, 202, 183, 91, 0, 0, 59, 207, 191, 159, 24, 0, 0, 0, 149, 223, 63, 0, 0, 0, 0, 0, 195, 152, 115, 0, 0, 0, 0, 0, 152, 237, 51, 0, 0, 0, 0, 0, 34, 80, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 90, 125, 77, 0, 0, 0, 60, 204, 87, 52, 81, 0, 0, 0, 30, 170, 111, 164, 58, 0, 0, 0, 28, 158, 207, 35, 0, 0, 0, 0, 142, 115, 183, 29, 0, 0, 0, 0, 137, 200, 80, 0, 0, 0, 0, 0, 12, 46, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79, 83, 30, 13, 0, 0, 0, 0, 91, 116, 148, 15, 0, 0, 0, 0, 25, 221, 69, 0, 0, 0, 0, 15, 128, 132, 99, 0, 0, 0, 0, 70, 131, 150, 45, 0, 0, 0, 0, 32, 154, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 90, 120, 33, 0, 0, 0, 11, 182, 99, 158, 124, 0, 0, 0, 7, 183, 170, 155, 12, 0, 0, 2, 51, 203, 127, 0, 0, 0, 0, 0, 161, 137, 146, 0, 0, 0, 0, 0, 123, 217, 85, 0, 0, 0, 0, 0, 8, 48, 2, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 91, 104, 62, 0, 0, 0, 89, 100, 20, 64, 86, 0, 0, 0, 94, 46, 53, 101, 57, 0, 0, 0, 4, 116, 200, 118, 104, 5, 0, 0, 0, 69, 125, 12, 98, 94, 0, 0, 0, 5, 97, 118, 115, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 105, 48, 0, 0, 0, 0, 2, 105, 21, 68, 34, 0, 0, 0, 2, 107, 55, 119, 19, 0, 0, 0, 0, 69, 131, 3, 0, 0, 0, 0, 45, 91, 91, 1, 0, 0, 0, 0, 45, 95, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 108, 21, 0, 0, 0, 0, 66, 230, 231, 48, 0, 0, 0, 0, 66, 231, 87, 0, 0, 0, 0, 58, 186, 206, 15, 0, 0, 0, 0, 172, 114, 191, 8, 0, 0, 0, 0, 171, 191, 64, 0, 0, 0, 0, 0, 24, 33, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 87, 122, 14, 0, 0, 0, 29, 165, 75, 101, 72, 0, 0, 0, 61, 162, 111, 152, 19, 0, 0, 0, 47, 176, 120, 0, 0, 0, 0, 0, 144, 69, 152, 0, 0, 0, 0, 0, 146, 173, 55, 0, 0, 0, 0, 0, 26, 50, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 116, 97, 0, 0, 0, 0, 35, 199, 66, 170, 152, 27, 0, 0, 21, 182, 127, 173, 74, 6, 0, 0, 67, 182, 167, 3, 0, 0, 0, 6, 191, 60, 182, 1, 0, 0, 0, 5, 185, 182, 112, 0, 0, 0, 0, 0, 34, 52, 2, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 53, 45, 88, 0, 0, 0, 0, 81, 75, 0, 102, 1, 0, 0, 0, 32, 104, 59, 92, 0, 0, 0, 0, 0, 96, 101, 1, 0, 0, 0, 0, 20, 116, 100, 0, 0, 0, 0, 0, 84, 90, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 107, 6, 0, 0, 0, 0, 135, 118, 156, 98, 0, 0, 0, 1, 168, 155, 162, 52, 0, 0, 0, 139, 175, 131, 0, 0, 0, 0, 19, 149, 51, 141, 0, 0, 0, 0, 3, 174, 184, 46, 0, 0, 0, 0, 0, 34, 43, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 69, 92, 9, 0, 0, 0, 0, 106, 92, 92, 44, 0, 0, 0, 0, 21, 114, 139, 27, 0, 0, 0, 0, 0, 32, 147, 5, 0, 0, 0, 0, 0, 72, 98, 67, 0, 0, 0, 0, 0, 30, 132, 105, 0, 0, 0, 0, 0, 0, 42, 28, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 95, 116, 17, 0, 0, 0, 17, 175, 171, 249, 96, 0, 0, 0, 65, 214, 194, 163, 24, 0, 0, 0, 53, 237, 110, 2, 0, 0, 0, 0, 149, 230, 73, 0, 0, 0, 0, 4, 224, 191, 28, 0, 0, 0, 0, 0, 40, 15, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 47, 7, 0, 0, 0, 19, 132, 161, 191, 191, 25, 0, 0, 91, 172, 130, 198, 74, 2, 0, 0, 92, 247, 102, 6, 0, 0, 0, 30, 201, 218, 43, 0, 0, 0, 0, 70, 170, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 95, 100, 5, 0, 0, 0, 19, 153, 75, 117, 139, 8, 0, 0, 54, 170, 95, 175, 92, 5, 0, 0, 29, 207, 158, 11, 0, 0, 0, 0, 137, 170, 138, 0, 0, 0, 0, 0, 196, 187, 41, 0, 0, 0, 0, 0, 40, 30, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 113, 109, 5, 0, 0, 0, 53, 173, 63, 170, 175, 10, 0, 0, 118, 152, 138, 184, 28, 0, 0, 0, 33, 219, 157, 5, 0, 0, 0, 0, 116, 178, 164, 0, 0, 0, 0, 0, 219, 203, 69, 0, 0, 0, 0, 0, 56, 60, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 92, 139, 124, 14, 0, 0, 0, 86, 165, 149, 66, 1, 0, 0, 71, 190, 62, 0, 0, 0, 0, 56, 195, 158, 2, 0, 0, 0, 0, 23, 31, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 102, 34, 0, 0, 0, 0, 59, 144, 193, 100, 0, 0, 0, 0, 113, 164, 115, 21, 0, 0, 0, 26, 179, 102, 0, 0, 0, 0, 0, 130, 138, 112, 0, 0, 0, 0, 2, 199, 161, 27, 0, 0, 0, 0, 0, 60, 36, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 20, 56, 25, 0, 0, 0, 52, 190, 173, 159, 213, 74, 0, 0, 59, 126, 139, 66, 194, 68, 0, 0, 0, 51, 229, 219, 49, 0, 0, 0, 0, 143, 142, 222, 60, 0, 0, 0, 0, 138, 181, 214, 68, 0, 0, 0, 0, 10, 73, 70, 1, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 91, 78, 0, 0, 0, 0, 55, 154, 66, 44, 57, 0, 0, 0, 97, 166, 89, 140, 19, 0, 0, 0, 8, 150, 159, 8, 0, 0, 0, 0, 85, 109, 141, 48, 0, 0, 0, 0, 51, 167, 147, 41, 0, 0, 0, 0, 0, 28, 39, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 42, 0, 0, 0, 0, 0, 3, 128, 114, 158, 18, 0, 0, 0, 21, 156, 151, 29, 0, 0, 0, 54, 138, 134, 2, 0, 0, 0, 48, 188, 122, 79, 0, 0, 0, 0, 16, 37, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 76, 118, 146, 131, 48, 0, 0, 18, 133, 78, 154, 41, 0, 0, 0, 27, 186, 96, 7, 0, 0, 0, 7, 159, 197, 0, 0, 0, 0, 0, 38, 159, 60, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 49, 26, 0, 0, 0, 0, 0, 71, 183, 101, 88, 0, 0, 0, 0, 4, 149, 159, 129, 36, 0, 0, 0, 87, 116, 128, 15, 0, 0, 0, 0, 91, 84, 120, 48, 0, 0, 0, 0, 13, 129, 155, 47, 0, 0, 0, 0, 0, 52, 74, 3, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 117, 95, 0, 0, 0, 0, 0, 87, 3, 102, 6, 0, 0, 0, 0, 91, 98, 87, 0, 0, 0, 0, 25, 148, 86, 0, 0, 0, 0, 0, 118, 101, 52, 0, 0, 0, 0, 0, 111, 105, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 94, 41, 0, 0, 0, 0, 25, 145, 150, 178, 0, 0, 0, 0, 99, 185, 95, 123, 0, 0, 0, 0, 13, 160, 183, 81, 0, 0, 0, 0, 81, 124, 59, 89, 0, 0, 0, 0, 35, 176, 107, 11, 0, 0, 0, 0, 0, 35, 13, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 140, 102, 0, 0, 0, 0, 1, 127, 22, 155, 44, 0, 0, 0, 0, 140, 195, 121, 0, 0, 0, 0, 125, 131, 83, 127, 0, 0, 0, 0, 160, 8, 47, 113, 0, 0, 0, 0, 94, 161, 126, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 107, 96, 24, 0, 0, 0, 0, 57, 73, 37, 3, 0, 0, 0, 0, 31, 186, 40, 0, 0, 0, 0, 39, 161, 138, 26, 0, 0, 0, 0, 145, 86, 72, 21, 0, 0, 0, 0, 121, 124, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 113, 72, 0, 0, 0, 0, 36, 122, 8, 93, 0, 0, 0, 0, 89, 112, 84, 101, 0, 0, 0, 0, 3, 133, 127, 0, 0, 0, 0, 0, 2, 103, 101, 5, 0, 0, 0, 0, 2, 99, 94, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 105, 38, 0, 0, 0, 0, 0, 114, 68, 124, 62, 0, 0, 0, 0, 14, 99, 194, 42, 0, 0, 0, 0, 0, 110, 75, 89, 0, 0, 0, 0, 12, 137, 5, 98, 0, 0, 0, 0, 0, 81, 117, 114, 0, 0, 0, 0, 0, 0, 41, 17, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 92, 154, 107, 0, 0, 0, 0, 143, 78, 0, 124, 73, 0, 0, 0, 90, 164, 119, 160, 30, 0, 0, 0, 56, 162, 168, 76, 0, 0, 0, 7, 150, 52, 102, 95, 0, 0, 0, 33, 168, 143, 89, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 144, 45, 0, 0, 0, 0, 37, 123, 84, 63, 0, 0, 0, 0, 21, 130, 109, 7, 0, 0, 0, 0, 0, 103, 111, 49, 0, 0, 0, 0, 0, 118, 25, 153, 9, 0, 0, 0, 0, 99, 121, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 85, 124, 14, 0, 0, 0, 12, 131, 37, 98, 34, 0, 0, 0, 14, 141, 66, 97, 0, 0, 0, 0, 2, 118, 185, 17, 0, 0, 0, 0, 86, 132, 147, 55, 0, 0, 0, 0, 131, 48, 114, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 39, 109, 99, 22, 0, 0, 0, 106, 136, 28, 63, 134, 0, 0, 0, 61, 174, 116, 148, 40, 0, 0, 0, 22, 154, 177, 56, 0, 0, 0, 0, 115, 98, 79, 101, 0, 0, 0, 0, 126, 167, 149, 57, 0, 0, 0, 0, 23, 63, 30, 0, 0, 0 },
    { 0, 0, 4, 29, 1, 0, 0, 0, 0, 0, 87, 88, 25, 0, 0, 0, 0, 0, 79, 40, 0, 0, 0, 0, 0, 0, 19, 91, 76, 10, 0, 0, 0, 0, 0, 32, 105, 59, 0, 0, 0, 0, 0, 37, 39, 53, 41, 0, 0, 0, 0, 0, 78, 98, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 106, 90, 39, 0, 0, 0, 0, 173, 49, 33, 125, 53, 0, 0, 0, 95, 177, 92, 83, 26, 0, 0, 0, 69, 155, 113, 180, 8, 0, 0, 0, 134, 26, 0, 141, 10, 0, 0, 0, 168, 152, 125, 92, 0, 0, 0, 0, 16, 58, 21, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 89, 92, 21, 0, 0, 0, 0, 86, 28, 76, 104, 0, 0, 0, 0, 86, 27, 16, 100, 0, 0, 0, 0, 74, 147, 145, 123, 0, 0, 0, 0, 78, 8, 4, 85, 0, 0, 0, 0, 51, 98, 99, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 89, 125, 95, 3, 0, 0, 0, 110, 224, 138, 193, 140, 0, 0, 0, 151, 179, 89, 205, 122, 0, 0, 0, 165, 253, 228, 92, 1, 0, 0, 13, 244, 219, 214, 25, 0, 0, 0, 41, 219, 229, 104, 0, 0, 0, 0, 0, 34, 40, 1, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 120, 97, 0, 0, 0, 0, 46, 224, 248, 252, 64, 0, 0, 0, 85, 253, 248, 240, 82, 0, 0, 0, 165, 238, 253, 112, 0, 0, 0, 0, 240, 188, 253, 103, 0, 0, 0, 0, 162, 234, 182, 30, 0, 0, 0, 0, 17, 44, 19, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 67, 117, 116, 18, 0, 0, 0, 46, 223, 78, 36, 153, 0, 0, 0, 5, 63, 164, 133, 86, 0, 0, 0, 24, 117, 203, 97, 0, 0, 0, 11, 165, 116, 121, 96, 0, 0, 0, 64, 180, 142, 88, 2, 0, 0, 0, 8, 63, 32, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 82, 55, 0, 0, 0, 0, 31, 213, 237, 188, 38, 10, 0, 0, 67, 236, 172, 222, 182, 27, 0, 104, 253, 253, 223, 115, 22, 0, 0, 62, 249, 246, 159, 0, 0, 0, 0, 0, 48, 152, 72, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 57, 95, 16, 0, 0, 0, 0, 143, 248, 189, 197, 61, 0, 0, 0, 211, 176, 101, 245, 132, 0, 0, 0, 135, 244, 247, 147, 3, 0, 0, 0, 103, 254, 188, 13, 0, 0, 0, 0, 63, 208, 208, 34, 0, 0, 0, 0, 0, 27, 30, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 114, 147, 59, 0, 0, 0, 0, 100, 72, 44, 104, 0, 0, 0, 0, 101, 161, 137, 50, 0, 0, 0, 0, 79, 129, 160, 110, 0, 0, 0, 0, 103, 10, 23, 137, 0, 0, 0, 0, 80, 151, 142, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 67, 126, 64, 0, 0, 0, 0, 130, 202, 198, 222, 0, 0, 0, 0, 66, 191, 209, 124, 0, 0, 0, 0, 22, 181, 201, 80, 0, 0, 0, 0, 121, 177, 189, 105, 0, 0, 0, 0, 120, 226, 127, 17, 0, 0, 0, 0, 13, 44, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 16, 55, 45, 0, 0, 0, 23, 213, 188, 121, 176, 77, 0, 0, 40, 206, 28, 3, 119, 93, 8, 0, 0, 133, 169, 163, 204, 144, 29, 0, 0, 46, 234, 138, 42, 0, 0, 0, 0, 10, 176, 121, 0, 0, 0, 0, 0, 0, 33, 37, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 112, 74, 14, 0, 0, 0, 165, 214, 247, 244, 140, 7, 0, 0, 218, 193, 250, 135, 2, 0, 0, 0, 87, 249, 223, 33, 0, 0, 0, 0, 74, 223, 223, 100, 0, 0, 0, 0, 69, 238, 218, 95, 0, 0, 0, 0, 6, 49, 31, 2, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 115, 139, 52, 0, 0, 0, 0, 84, 125, 88, 94, 0, 0, 0, 0, 50, 159, 191, 81, 0, 0, 0, 0, 10, 154, 54, 93, 0, 0, 0, 0, 74, 127, 9, 125, 0, 0, 0, 0, 43, 138, 117, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 111, 103, 52, 0, 0, 0, 154, 220, 142, 236, 228, 43, 0, 0, 158, 231, 182, 242, 94, 0, 0, 0, 193, 249, 235, 94, 0, 0, 0, 33, 243, 150, 234, 107, 0, 0, 0, 29, 219, 250, 192, 67, 0, 0, 0, 0, 33, 61, 14, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 66, 121, 42, 0, 0, 0, 0, 134, 191, 88, 192, 85, 0, 0, 0, 153, 190, 40, 192, 113, 0, 0, 0, 18, 194, 250, 174, 3, 0, 0, 0, 86, 202, 189, 112, 0, 0, 0, 0, 161, 179, 166, 80, 0, 0, 0, 0, 18, 57, 19, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 176, 170, 13, 0, 0, 0, 50, 231, 167, 245, 42, 0, 0, 0, 43, 211, 246, 191, 10, 0, 0, 10, 162, 242, 250, 110, 0, 0, 0, 51, 252, 164, 242, 119, 0, 0, 0, 0, 75, 158, 181, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 96, 27, 0, 0, 0, 0, 0, 7, 135, 113, 130, 10, 0, 0, 0, 0, 95, 54, 133, 13, 0, 0, 0, 17, 115, 140, 6, 0, 0, 0, 0, 99, 71, 100, 14, 0, 0, 0, 0, 105, 41, 100, 63, 0, 0, 0, 0, 25, 27, 25, 15, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 78, 97, 49, 0, 0, 0, 0, 129, 159, 48, 136, 86, 0, 0, 0, 77, 174, 141, 112, 35, 0, 0, 0, 16, 148, 160, 134, 0, 0, 0, 0, 104, 130, 106, 149, 0, 0, 0, 0, 96, 190, 163, 36, 0, 0, 0, 0, 5, 48, 10, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 63, 121, 113, 9, 0, 0, 2, 219, 205, 120, 165, 86, 17, 0, 2, 224, 86, 3, 132, 193, 38, 0, 0, 118, 241, 228, 182, 29, 0, 0, 17, 220, 176, 226, 45, 0, 0, 0, 0, 146, 226, 158, 12, 0, 0, 0, 0, 9, 37, 10, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 84, 92, 55, 6, 0, 0, 78, 223, 209, 252, 93, 0, 0, 0, 127, 211, 164, 178, 13, 0, 0, 0, 48, 234, 174, 11, 0, 0, 0, 0, 136, 252, 144, 0, 0, 0, 0, 1, 221, 192, 29, 0, 0, 0, 0, 0, 47, 16, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 171, 67, 0, 0, 0, 11, 135, 223, 191, 123, 0, 0, 0, 55, 247, 175, 195, 47, 0, 0, 0, 111, 247, 207, 51, 0, 0, 0, 0, 227, 243, 199, 12, 0, 0, 0, 0, 151, 191, 155, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 98, 48, 2, 0, 0, 0, 4, 158, 51, 117, 83, 0, 0, 0, 0, 140, 94, 125, 52, 0, 0, 0, 0, 2, 101, 175, 81, 0, 0, 0, 0, 10, 116, 24, 144, 0, 0, 0, 0, 27, 132, 107, 113, 0, 0, 0, 0, 1, 45, 49, 9, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 81, 62, 0, 0, 0, 0, 0, 119, 121, 176, 84, 0, 0, 0, 0, 49, 152, 138, 36, 0, 0, 0, 0, 0, 115, 135, 6, 0, 0, 0, 0, 16, 115, 118, 77, 0, 0, 0, 0, 21, 132, 143, 90, 0, 0, 0, 0, 0, 15, 35, 2, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 115, 67, 0, 0, 0, 0, 0, 65, 176, 0, 0, 48, 20, 0, 0, 9, 127, 113, 105, 62, 8, 0, 0, 53, 158, 206, 30, 0, 0, 0, 0, 154, 134, 181, 24, 0, 0, 0, 0, 46, 157, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 107, 35, 0, 0, 0, 0, 83, 227, 135, 187, 0, 0, 0, 0, 43, 183, 123, 183, 0, 0, 0, 0, 131, 191, 171, 15, 0, 0, 0, 0, 219, 59, 147, 75, 0, 0, 0, 0, 91, 179, 175, 67, 0, 0, 0, 0, 0, 27, 12, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 135, 87, 0, 0, 0, 0, 60, 221, 194, 140, 3, 0, 0, 0, 106, 253, 29, 0, 0, 0, 0, 0, 134, 182, 175, 45, 0, 0, 0, 0, 87, 212, 238, 190, 1, 0, 0, 0, 0, 62, 150, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 135, 28, 0, 0, 0, 0, 35, 115, 113, 43, 0, 0, 0, 0, 12, 187, 114, 0, 0, 0, 0, 16, 110, 151, 2, 0, 0, 0, 0, 142, 108, 127, 0, 0, 0, 0, 0, 148, 146, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 86, 28, 0, 0, 0, 0, 6, 116, 59, 98, 0, 0, 0, 0, 16, 119, 85, 81, 0, 0, 0, 0, 0, 57, 148, 16, 0, 0, 0, 0, 0, 121, 84, 89, 0, 0, 0, 0, 0, 108, 118, 37, 0, 0, 0, 0, 0, 20, 28, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 78, 116, 65, 0, 0, 0, 0, 111, 84, 29, 90, 0, 0, 0, 0, 111, 42, 112, 101, 0, 0, 0, 6, 128, 183, 55, 0, 0, 0, 13, 136, 158, 96, 0, 0, 0, 0, 62, 176, 154, 3, 0, 0, 0, 0, 7, 63, 26, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 75, 113, 117, 23, 0, 0, 0, 120, 106, 65, 200, 32, 0, 0, 1, 154, 37, 141, 50, 0, 0, 0, 0, 125, 181, 41, 0, 0, 0, 2, 125, 225, 58, 0, 0, 0, 0, 88, 247, 138, 0, 0, 0, 0, 0, 27, 57, 10, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 99, 19, 0, 0, 0, 11, 125, 80, 82, 54, 0, 0, 0, 11, 134, 46, 129, 7, 0, 0, 0, 0, 75, 150, 8, 0, 0, 0, 0, 44, 168, 89, 0, 0, 0, 0, 0, 163, 152, 7, 0, 0, 0, 0, 0, 40, 17, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 145, 34, 0, 0, 0, 0, 2, 112, 111, 75, 0, 0, 0, 0, 2, 116, 147, 39, 0, 0, 0, 0, 4, 112, 119, 2, 0, 0, 0, 0, 64, 108, 113, 15, 0, 0, 0, 0, 43, 117, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 98, 52, 0, 0, 0, 0, 83, 75, 52, 119, 8, 0, 0, 0, 120, 34, 139, 18, 0, 0, 0, 0, 137, 122, 17, 0, 0, 0, 0, 71, 200, 24, 0, 0, 0, 0, 0, 166, 154, 0, 0, 0, 0, 0, 0, 38, 33, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 62, 120, 109, 9, 0, 0, 0, 139, 132, 13, 83, 85, 0, 0, 0, 128, 168, 91, 152, 28, 0, 0, 0, 112, 169, 137, 0, 0, 0, 0, 4, 194, 37, 160, 50, 0, 0, 0, 0, 43, 131, 182, 130, 0, 0, 0, 0, 0, 1, 32, 22, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 93, 121, 87, 0, 0, 0, 17, 154, 53, 54, 183, 30, 0, 0, 63, 149, 32, 159, 49, 0, 0, 0, 44, 222, 190, 74, 0, 0, 0, 9, 153, 192, 19, 0, 0, 0, 0, 97, 151, 174, 0, 0, 0, 0, 0, 9, 32, 29, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 62, 103, 124, 29, 0, 0, 0, 104, 98, 137, 78, 1, 0, 0, 0, 107, 149, 109, 1, 0, 0, 0, 41, 181, 89, 0, 0, 0, 0, 25, 147, 192, 27, 0, 0, 0, 0, 108, 169, 87, 0, 0, 0, 0, 0, 18, 39, 1, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 38, 27, 3, 0, 0, 0, 132, 124, 88, 109, 144, 93, 0, 0, 91, 130, 41, 76, 156, 44, 0, 0, 0, 15, 147, 176, 29, 0, 0, 0, 0, 33, 136, 81, 140, 14, 0, 0, 0, 11, 95, 100, 134, 65, 0, 0, 0, 0, 0, 18, 67, 5, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 79, 0, 0, 0, 0, 11, 139, 82, 85, 5, 0, 0, 0, 10, 133, 102, 154, 22, 0, 0, 0, 1, 120, 183, 15, 0, 0, 0, 0, 33, 195, 124, 7, 0, 0, 0, 0, 12, 164, 148, 6, 0, 0, 0, 0, 0, 25, 27, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 106, 100, 1, 0, 0, 0, 17, 167, 19, 102, 26, 0, 0, 0, 9, 145, 56, 163, 7, 0, 0, 0, 6, 156, 154, 18, 0, 0, 0, 0, 89, 171, 108, 0, 0, 0, 0, 0, 163, 173, 42, 0, 0, 0, 0, 0, 40, 20, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 93, 60, 0, 0, 0, 0, 69, 112, 35, 157, 44, 0, 0, 0, 124, 62, 126, 61, 0, 0, 0, 30, 179, 99, 8, 0, 0, 0, 4, 156, 157, 50, 0, 0, 0, 0, 55, 173, 99, 0, 0, 0, 0, 0, 9, 19, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 108, 39, 0, 0, 0, 0, 0, 14, 173, 165, 10, 0, 0, 0, 0, 0, 118, 194, 15, 0, 0, 0, 20, 108, 177, 68, 0, 0, 0, 0, 142, 85, 135, 20, 0, 0, 0, 16, 167, 145, 48, 0, 0, 0, 0, 0, 48, 39, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 48, 90, 22, 0, 0, 0, 34, 153, 99, 62, 52, 22, 3, 0, 114, 118, 25, 50, 128, 110, 16, 0, 7, 83, 200, 203, 132, 0, 0, 0, 0, 79, 120, 32, 176, 7, 0, 0, 0, 61, 156, 153, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 69, 112, 4, 0, 0, 0, 24, 154, 113, 171, 59, 0, 0, 0, 56, 130, 135, 97, 0, 0, 0, 0, 24, 202, 56, 0, 0, 0, 0, 0, 132, 153, 63, 0, 0, 0, 0, 0, 157, 146, 45, 0, 0, 0, 0, 0, 40, 39, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 100, 106, 10, 3, 0, 0, 48, 140, 27, 68, 108, 5, 0, 0, 94, 77, 109, 130, 6, 0, 0, 0, 35, 210, 58, 0, 0, 0, 0, 0, 91, 135, 87, 0, 0, 0, 0, 0, 81, 149, 82, 0, 0, 0, 0, 0, 5, 46, 3, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 127, 127, 51, 0, 0, 0, 0, 159, 71, 183, 35, 0, 0, 0, 0, 135, 191, 87, 0, 0, 0, 0, 15, 163, 151, 0, 0, 0, 0, 0, 119, 147, 187, 16, 0, 0, 0, 0, 131, 199, 67, 0, 0, 0, 0, 0, 15, 35, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 46, 2, 0, 0, 0, 0, 140, 119, 89, 70, 0, 0, 0, 0, 78, 74, 85, 49, 0, 0, 0, 0, 3, 120, 92, 0, 0, 0, 0, 0, 27, 75, 99, 52, 0, 0, 0, 0, 1, 85, 10, 102, 0, 0, 0, 0, 0, 26, 27, 52, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 107, 86, 0, 0, 0, 0, 46, 170, 49, 142, 6, 0, 0, 0, 89, 151, 105, 161, 1, 0, 0, 0, 28, 202, 120, 16, 0, 0, 0, 0, 95, 173, 80, 0, 0, 0, 0, 0, 102, 162, 117, 0, 0, 0, 0, 0, 10, 57, 15, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 122, 91, 5, 0, 0, 0, 52, 161, 89, 232, 73, 0, 0, 0, 71, 133, 152, 136, 0, 0, 0, 0, 51, 227, 74, 0, 0, 0, 0, 0, 155, 135, 77, 0, 0, 0, 0, 3, 167, 123, 71, 0, 0, 0, 0, 0, 43, 46, 1, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 75, 116, 13, 0, 0, 0, 7, 135, 112, 178, 12, 0, 0, 0, 32, 147, 142, 109, 0, 0, 0, 0, 21, 197, 88, 0, 0, 0, 0, 0, 130, 148, 93, 0, 0, 0, 0, 0, 134, 164, 89, 0, 0, 0, 0, 0, 15, 58, 6, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 107, 25, 0, 0, 0, 0, 2, 192, 166, 73, 0, 0, 0, 0, 75, 222, 176, 3, 0, 0, 0, 107, 217, 58, 17, 0, 0, 0, 29, 181, 140, 9, 0, 0, 0, 0, 92, 58, 134, 0, 0, 0, 0, 0, 21, 17, 44, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 63, 16, 0, 0, 0, 35, 153, 161, 141, 207, 29, 0, 0, 139, 129, 69, 158, 90, 3, 0, 0, 120, 201, 122, 16, 0, 0, 0, 0, 174, 213, 25, 0, 0, 0, 0, 6, 176, 101, 84, 0, 0, 0, 0, 1, 102, 109, 14, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87, 156, 59, 0, 0, 0, 0, 42, 161, 32, 151, 0, 0, 0, 0, 34, 179, 99, 149, 0, 0, 0, 0, 12, 158, 188, 125, 0, 0, 0, 0, 83, 163, 43, 178, 0, 0, 0, 0, 52, 159, 145, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 114, 41, 0, 0, 0, 0, 71, 177, 172, 13, 0, 0, 0, 0, 102, 175, 52, 0, 0, 0, 0, 10, 153, 121, 0, 0, 0, 0, 0, 78, 139, 132, 1, 0, 0, 0, 0, 80, 175, 103, 0, 0, 0, 0, 0, 3, 45, 6, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 51, 36, 3, 0, 0, 4, 85, 173, 149, 190, 34, 0, 0, 39, 187, 115, 129, 48, 0, 0, 6, 93, 190, 57, 0, 0, 0, 0, 79, 102, 43, 117, 0, 0, 0, 0, 38, 109, 133, 100, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 81, 116, 0, 0, 0, 0, 0, 124, 103, 169, 0, 0, 0, 0, 0, 137, 116, 112, 0, 0, 0, 0, 14, 172, 116, 1, 0, 0, 0, 0, 108, 145, 117, 0, 0, 0, 0, 0, 103, 164, 103, 0, 0, 0, 0, 0, 8, 55, 8, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 85, 126, 70, 0, 0, 0, 0, 47, 169, 88, 193, 46, 0, 0, 0, 20, 140, 142, 91, 16, 0, 0, 0, 27, 198, 140, 0, 0, 0, 0, 0, 84, 158, 125, 60, 0, 0, 0, 0, 23, 168, 206, 62, 0, 0, 0, 0, 0, 26, 43, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 112, 122, 33, 0, 0, 0, 0, 145, 55, 136, 83, 0, 0, 0, 0, 100, 173, 146, 0, 0, 0, 0, 45, 164, 163, 33, 0, 0, 0, 3, 168, 80, 130, 53, 0, 0, 0, 7, 164, 152, 93, 3, 0, 0, 0, 0, 21, 47, 1, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 67, 60, 9, 0, 0, 0, 0, 113, 157, 96, 176, 0, 0, 0, 0, 103, 79, 144, 109, 0, 0, 0, 0, 17, 160, 136, 0, 0, 0, 0, 0, 12, 140, 157, 29, 0, 0, 0, 0, 40, 201, 179, 37, 0, 0, 0, 0, 2, 41, 16, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 82, 108, 40, 45, 0, 0, 75, 168, 93, 64, 167, 75, 0, 0, 141, 97, 47, 158, 70, 0, 0, 0, 4, 108, 176, 150, 144, 26, 0, 0, 0, 123, 40, 0, 105, 76, 0, 0, 0, 85, 141, 155, 143, 5, 0, 0, 0, 0, 18, 25, 3, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 114, 65, 0, 0, 0, 0, 38, 161, 40, 72, 114, 18, 0, 0, 36, 146, 67, 173, 70, 2, 0, 0, 3, 156, 150, 19, 0, 0, 0, 0, 60, 206, 85, 0, 0, 0, 0, 0, 99, 200, 62, 0, 0, 0, 0, 0, 14, 54, 1, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 39, 12, 0, 0, 0, 80, 85, 60, 39, 107, 30, 0, 0, 97, 17, 70, 82, 51, 0, 0, 0, 33, 168, 46, 0, 0, 0, 0, 0, 45, 37, 77, 0, 0, 0, 0, 16, 43, 54, 40, 0, 0, 0, 0, 2, 65, 55, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 106, 46, 0, 0, 0, 0, 95, 200, 137, 219, 0, 0, 0, 0, 39, 151, 167, 183, 0, 0, 0, 0, 72, 215, 211, 39, 0, 0, 0, 0, 151, 158, 123, 58, 0, 0, 0, 0, 79, 190, 187, 34, 0, 0, 0, 0, 2, 32, 27, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 120, 162, 73, 0, 0, 0, 63, 176, 16, 68, 127, 0, 0, 0, 40, 155, 109, 162, 19, 0, 0, 10, 117, 180, 160, 8, 0, 0, 0, 61, 100, 13, 174, 71, 0, 0, 0, 5, 126, 131, 121, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 96, 189, 189, 56, 0, 0, 0, 73, 231, 140, 126, 179, 5, 0, 0, 77, 203, 42, 161, 140, 3, 0, 7, 105, 228, 228, 168, 7, 0, 0, 88, 249, 252, 184, 7, 0, 0, 0, 80, 189, 185, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 80, 111, 24, 0, 0, 0, 1, 141, 149, 181, 101, 0, 0, 0, 3, 181, 73, 178, 29, 0, 0, 0, 36, 204, 177, 48, 0, 0, 0, 0, 159, 123, 135, 0, 0, 0, 0, 0, 227, 230, 48, 0, 0, 0, 0, 0, 47, 50, 1, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 115, 79, 0, 0, 0, 0, 59, 199, 99, 175, 0, 0, 0, 0, 67, 131, 71, 183, 0, 0, 0, 0, 0, 159, 175, 27, 0, 0, 0, 0, 39, 215, 95, 0, 0, 0, 0, 0, 95, 231, 63, 0, 0, 0, 0, 0, 4, 39, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 91, 24, 0, 0, 0, 0, 51, 159, 43, 95, 4, 0, 0, 0, 43, 195, 139, 67, 0, 0, 0, 0, 87, 167, 167, 95, 0, 0, 0, 0, 139, 63, 79, 159, 0, 0, 0, 0, 43, 135, 119, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 99, 107, 4, 0, 0, 0, 47, 219, 183, 179, 12, 0, 0, 0, 31, 183, 191, 83, 0, 0, 0, 4, 39, 167, 203, 23, 0, 0, 0, 0, 147, 199, 139, 71, 0, 0, 0, 0, 135, 231, 159, 27, 0, 0, 0, 0, 23, 59, 8, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 88, 61, 10, 0, 0, 0, 0, 86, 205, 247, 168, 0, 0, 0, 0, 148, 164, 179, 154, 0, 0, 0, 0, 92, 228, 246, 192, 0, 0, 0, 0, 3, 118, 230, 242, 0, 0, 0, 0, 0, 104, 232, 90, 0, 0, 0, 0, 0, 22, 46, 2, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 132, 155, 48, 0, 0, 0, 0, 58, 183, 186, 111, 0, 0, 0, 0, 10, 156, 226, 64, 0, 0, 0, 0, 71, 130, 121, 137, 0, 0, 0, 0, 124, 118, 17, 177, 0, 0, 0, 0, 37, 147, 164, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 88, 118, 44, 0, 0, 0, 0, 129, 127, 87, 94, 0, 0, 0, 0, 41, 142, 158, 27, 0, 0, 0, 0, 5, 110, 116, 135, 0, 0, 0, 0, 52, 135, 2, 151, 6, 0, 0, 0, 54, 143, 143, 109, 0, 0, 0, 0, 1, 29, 25, 1, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 103, 79, 3, 0, 0, 0, 16, 179, 77, 129, 123, 0, 0, 0, 28, 152, 46, 84, 165, 0, 0, 0, 0, 39, 166, 126, 127, 97, 0, 0, 0, 31, 140, 0, 15, 146, 0, 0, 0, 9, 119, 134, 149, 31, 0, 0, 0, 0, 10, 62, 23, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 90, 119, 27, 0, 0, 0, 48, 206, 134, 109, 71, 0, 0, 0, 61, 198, 97, 25, 0, 0, 0, 0, 33, 195, 177, 15, 0, 0, 0, 0, 126, 154, 176, 53, 0, 0, 0, 0, 162, 208, 117, 8, 0, 0, 0, 0, 35, 51, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 99, 95, 23, 0, 0, 0, 12, 187, 71, 111, 159, 0, 0, 0, 20, 163, 27, 115, 119, 0, 0, 0, 0, 67, 219, 175, 19, 0, 0, 0, 0, 12, 171, 143, 151, 0, 0, 0, 0, 0, 67, 187, 187, 0, 0, 0, 0, 0, 0, 27, 23, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 33, 79, 77, 0, 0, 0, 0, 69, 215, 196, 138, 0, 0, 0, 0, 37, 155, 164, 75, 0, 0, 0, 0, 3, 150, 167, 4, 0, 0, 0, 0, 69, 168, 149, 34, 0, 0, 0, 0, 72, 218, 146, 14, 0, 0, 0, 0, 8, 55, 5, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 117, 98, 8, 0, 0, 0, 104, 140, 40, 152, 10, 0, 0, 6, 146, 3, 100, 102, 0, 0, 0, 0, 102, 134, 113, 0, 0, 0, 0, 0, 0, 131, 134, 126, 0, 0, 0, 0, 7, 146, 149, 139, 0, 0, 0, 0, 0, 26, 52, 7, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 97, 171, 143, 23, 0, 0, 0, 79, 169, 69, 208, 77, 0, 0, 0, 195, 166, 206, 128, 4, 0, 0, 0, 164, 200, 201, 115, 0, 0, 0, 0, 231, 83, 119, 240, 0, 0, 0, 0, 76, 141, 159, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 124, 42, 0, 0, 0, 0, 0, 83, 166, 103, 87, 0, 0, 0, 0, 37, 178, 166, 27, 0, 0, 0, 0, 0, 51, 227, 55, 0, 0, 0, 0, 0, 51, 205, 118, 0, 0, 0, 0, 0, 8, 166, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 120, 24, 0, 0, 0, 0, 104, 120, 183, 43, 0, 0, 0, 3, 172, 119, 165, 0, 0, 0, 0, 14, 149, 192, 15, 0, 0, 0, 0, 124, 163, 164, 42, 0, 0, 0, 0, 195, 168, 90, 1, 0, 0, 0, 0, 41, 44, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 152, 101, 0, 0, 0, 0, 39, 194, 76, 91, 0, 0, 0, 0, 22, 178, 185, 116, 0, 0, 0, 0, 44, 187, 182, 79, 0, 0, 0, 0, 130, 127, 117, 147, 0, 0, 0, 0, 77, 176, 122, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 126, 83, 0, 0, 0, 0, 134, 149, 78, 212, 4, 0, 0, 0, 159, 139, 160, 160, 0, 0, 0, 0, 61, 231, 185, 12, 0, 0, 0, 0, 147, 139, 131, 90, 0, 0, 0, 0, 105, 188, 157, 61, 0, 0, 0, 0, 4, 51, 17, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 111, 112, 15, 0, 0, 0, 2, 137, 107, 156, 27, 0, 0, 0, 15, 192, 139, 173, 2, 0, 0, 0, 32, 208, 180, 11, 3, 0, 0, 0, 123, 159, 133, 63, 0, 0, 0, 0, 104, 174, 173, 82, 0, 0, 0, 0, 1, 23, 43, 5, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 96, 106, 47, 0, 0, 0, 34, 176, 58, 72, 62, 0, 0, 0, 23, 119, 145, 197, 82, 0, 0, 0, 0, 11, 132, 36, 82, 127, 0, 0, 0, 69, 112, 0, 24, 134, 1, 0, 0, 22, 117, 113, 122, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134, 95, 0, 0, 0, 0, 0, 9, 83, 148, 0, 0, 0, 0, 0, 5, 191, 99, 0, 0, 0, 0, 17, 134, 99, 0, 0, 0, 0, 0, 89, 138, 83, 0, 0, 0, 0, 0, 52, 148, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 110, 75, 58, 25, 0, 0, 83, 235, 215, 240, 246, 82, 0, 0, 97, 246, 196, 244, 122, 17, 0, 0, 119, 235, 236, 67, 0, 0, 0, 11, 230, 112, 202, 82, 0, 0, 0, 48, 250, 235, 180, 38, 0, 0, 0, 2, 61, 63, 15, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 100, 36, 0, 0, 0, 0, 47, 161, 119, 194, 0, 0, 0, 0, 145, 104, 125, 146, 0, 0, 0, 0, 46, 204, 198, 49, 0, 0, 0, 0, 73, 159, 111, 112, 0, 0, 0, 1, 70, 134, 161, 65, 0, 0, 0, 0, 0, 25, 36, 1, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 154, 83, 0, 0, 0, 0, 101, 147, 92, 149, 56, 0, 0, 0, 84, 164, 136, 132, 5, 0, 0, 0, 74, 190, 169, 27, 0, 0, 0, 0, 170, 80, 122, 91, 0, 0, 0, 0, 73, 106, 141, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 127, 116, 8, 0, 0, 0, 0, 49, 162, 141, 75, 0, 0, 0, 0, 28, 174, 161, 31, 0, 0, 0, 0, 8, 147, 161, 64, 0, 0, 0, 0, 43, 165, 74, 148, 0, 0, 0, 0, 8, 109, 168, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 64, 95, 28, 0, 0, 0, 100, 194, 99, 98, 115, 0, 0, 0, 202, 95, 16, 149, 51, 0, 0, 0, 60, 193, 205, 70, 0, 0, 0, 0, 148, 211, 175, 80, 0, 0, 0, 24, 199, 24, 102, 137, 0, 0, 0, 4, 51, 5, 33, 27, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 98, 28, 0, 0, 0, 0, 127, 111, 80, 135, 0, 0, 0, 0, 170, 66, 86, 114, 0, 0, 0, 0, 26, 126, 217, 36, 0, 0, 0, 0, 6, 146, 128, 123, 0, 0, 0, 0, 14, 155, 135, 113, 0, 0, 0, 0, 0, 32, 59, 14, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 51, 9, 23, 11, 0, 0, 0, 155, 209, 95, 191, 61, 0, 0, 0, 220, 104, 165, 142, 1, 0, 0, 0, 99, 228, 194, 18, 0, 0, 0, 0, 7, 184, 187, 9, 0, 0, 0, 0, 3, 165, 197, 14, 0, 0, 0, 0, 0, 34, 62, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 82, 124, 49, 0, 0, 0, 0, 151, 100, 128, 117, 0, 0, 0, 0, 159, 77, 120, 86, 0, 0, 0, 0, 26, 191, 183, 30, 0, 0, 0, 0, 100, 141, 117, 130, 0, 0, 0, 0, 64, 120, 139, 129, 0, 0, 0, 0, 0, 29, 48, 10, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 61, 92, 89, 88, 6, 0, 0, 60, 78, 1, 67, 75, 28, 0, 0, 13, 131, 77, 130, 21, 0, 0, 0, 0, 6, 134, 122, 116, 7, 0, 0, 0, 70, 116, 2, 71, 89, 0, 0, 0, 32, 119, 113, 115, 101, 0, 0, 0, 0, 6, 49, 55, 5, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 101, 115, 64, 0, 0, 0, 28, 174, 51, 113, 143, 0, 0, 0, 34, 173, 101, 161, 24, 0, 0, 0, 84, 187, 161, 4, 0, 0, 0, 25, 194, 69, 159, 41, 0, 0, 0, 13, 130, 100, 165, 57, 0, 0, 0, 0, 24, 63, 49, 3, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 28, 31, 0, 0, 0, 0, 152, 238, 157, 208, 0, 0, 0, 0, 197, 181, 106, 166, 0, 0, 0, 0, 49, 148, 199, 47, 0, 0, 0, 0, 0, 98, 201, 76, 0, 0, 0, 0, 0, 132, 195, 92, 0, 0, 0, 0, 0, 58, 62, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 119, 77, 6, 0, 0, 0, 36, 119, 6, 53, 30, 0, 0, 0, 104, 65, 12, 100, 0, 0, 0, 0, 83, 154, 127, 72, 0, 0, 0, 0, 99, 69, 4, 90, 0, 0, 0, 0, 88, 62, 87, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 101, 44, 0, 0, 0, 0, 100, 131, 159, 148, 0, 0, 0, 0, 126, 111, 155, 92, 0, 0, 0, 0, 19, 180, 136, 0, 0, 0, 0, 0, 93, 144, 144, 28, 0, 0, 0, 0, 40, 133, 160, 38, 0, 0, 0, 0, 0, 26, 40, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 112, 85, 0, 0, 0, 0, 126, 149, 85, 150, 0, 0, 0, 0, 179, 40, 78, 178, 0, 0, 0, 0, 76, 178, 192, 45, 0, 0, 0, 0, 28, 182, 169, 139, 0, 0, 0, 0, 135, 114, 0, 135, 38, 0, 0, 0, 34, 20, 0, 30, 14, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 56, 115, 53, 0, 0, 0, 0, 157, 99, 144, 177, 43, 0, 0, 0, 161, 70, 84, 161, 9, 0, 0, 0, 16, 173, 232, 62, 0, 0, 0, 0, 45, 195, 114, 134, 0, 0, 0, 0, 59, 163, 79, 161, 0, 0, 0, 0, 10, 54, 50, 36, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 81, 126, 52, 0, 0, 0, 0, 146, 103, 25, 105, 12, 0, 0, 0, 129, 124, 41, 130, 0, 0, 0, 0, 3, 118, 213, 89, 0, 0, 0, 0, 45, 156, 46, 144, 0, 0, 0, 0, 44, 146, 125, 133, 0, 0, 0, 0, 0, 27, 62, 20, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 110, 66, 1, 0, 0, 0, 143, 137, 32, 153, 51, 0, 0, 0, 181, 82, 89, 134, 0, 0, 0, 0, 28, 166, 197, 49, 0, 0, 0, 0, 81, 166, 108, 120, 0, 0, 0, 0, 78, 146, 160, 51, 0, 0, 0, 0, 0, 39, 24, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 86, 111, 28, 0, 0, 0, 0, 134, 124, 111, 136, 0, 0, 0, 0, 120, 106, 147, 93, 0, 0, 0, 0, 5, 168, 187, 54, 0, 0, 0, 0, 28, 177, 47, 143, 5, 0, 0, 0, 8, 124, 116, 152, 3, 0, 0, 0, 0, 17, 61, 24, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 74, 139, 151, 0, 0, 0, 0, 115, 68, 50, 73, 0, 0, 0, 0, 35, 165, 92, 3, 0, 0, 0, 0, 136, 108, 114, 57, 0, 0, 0, 0, 131, 133, 20, 127, 22, 0, 0, 0, 0, 37, 152, 119, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 132, 120, 0, 0, 0, 0, 90, 137, 67, 119, 0, 0, 0, 0, 68, 153, 134, 44, 0, 0, 0, 0, 10, 141, 161, 103, 0, 0, 0, 0, 65, 175, 8, 144, 0, 0, 0, 0, 21, 108, 126, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 29, 14, 4, 0, 0, 0, 97, 153, 163, 146, 40, 0, 0, 3, 163, 135, 144, 67, 1, 0, 0, 66, 153, 93, 0, 0, 0, 0, 28, 158, 152, 64, 0, 0, 0, 0, 61, 111, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 87, 59, 0, 0, 0, 0, 15, 171, 132, 125, 74, 0, 0, 0, 28, 197, 70, 169, 74, 0, 0, 0, 7, 152, 218, 47, 0, 0, 0, 0, 128, 240, 139, 0, 0, 0, 0, 14, 212, 136, 6, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 141, 112, 127, 35, 0, 0, 0, 145, 79, 108, 75, 0, 0, 0, 68, 130, 157, 3, 0, 0, 0, 70, 122, 151, 73, 0, 0, 0, 0, 32, 78, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 83, 92, 3, 0, 0, 0, 5, 196, 92, 105, 187, 121, 16, 0, 4, 169, 163, 197, 90, 0, 0, 0, 0, 21, 177, 178, 97, 0, 0, 0, 0, 119, 140, 83, 155, 0, 0, 0, 0, 86, 175, 184, 61, 0, 0, 0, 0, 0, 23, 25, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 95, 34, 0, 0, 0, 0, 21, 113, 159, 149, 10, 0, 0, 0, 80, 146, 135, 7, 0, 0, 0, 46, 157, 161, 33, 0, 0, 0, 14, 158, 64, 128, 96, 0, 0, 0, 76, 134, 105, 61, 2, 0, 0, 0, 3, 38, 12, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 13, 0, 0, 0, 0, 0, 55, 172, 166, 157, 22, 0, 0, 12, 166, 137, 137, 40, 0, 0, 0, 93, 208, 91, 0, 0, 0, 0, 52, 149, 133, 94, 0, 0, 0, 0, 46, 127, 88, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 80, 39, 0, 0, 0, 0, 43, 122, 11, 75, 0, 0, 0, 0, 24, 114, 94, 71, 0, 0, 0, 0, 0, 36, 125, 0, 0, 0, 0, 0, 9, 74, 91, 0, 0, 0, 0, 0, 93, 122, 17, 0, 0, 0, 0, 0, 22, 25, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 100, 79, 0, 0, 0, 0, 3, 85, 16, 76, 39, 0, 0, 0, 2, 100, 148, 94, 3, 0, 0, 0, 31, 161, 122, 64, 0, 0, 0, 0, 128, 103, 107, 15, 0, 0, 0, 0, 95, 134, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 79, 13, 0, 0, 0, 0, 84, 94, 44, 88, 0, 0, 0, 0, 99, 102, 106, 71, 0, 0, 0, 0, 49, 149, 96, 81, 0, 0, 0, 0, 90, 80, 13, 80, 0, 0, 0, 0, 25, 124, 117, 53, 0, 0, 0, 0, 0, 17, 26, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 109, 45, 0, 0, 0, 0, 0, 222, 134, 215, 133, 37, 2, 0, 0, 144, 170, 218, 192, 88, 2, 0, 0, 84, 239, 169, 17, 0, 0, 0, 0, 122, 219, 167, 94, 0, 0, 0, 0, 20, 154, 218, 55, 0, 0, 0, 0, 0, 6, 37, 1, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 75, 87, 7, 9, 0, 0, 6, 142, 80, 84, 151, 84, 0, 0, 16, 158, 101, 159, 65, 3, 0, 0, 50, 143, 127, 0, 0, 0, 0, 3, 136, 73, 134, 0, 0, 0, 0, 37, 171, 152, 19, 0, 0, 0, 0, 0, 13, 2, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 81, 56, 0, 0, 0, 0, 84, 143, 75, 115, 17, 0, 0, 13, 174, 113, 128, 81, 3, 0, 1, 102, 121, 148, 8, 0, 0, 0, 70, 113, 112, 133, 6, 0, 0, 0, 43, 97, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 117, 78, 43, 48, 0, 0, 0, 121, 51, 74, 116, 54, 0, 0, 60, 146, 125, 31, 0, 0, 0, 15, 171, 154, 39, 0, 0, 0, 0, 3, 41, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 104, 37, 1, 0, 0, 0, 0, 100, 101, 127, 97, 0, 0, 0, 0, 14, 125, 135, 34, 0, 0, 0, 0, 0, 52, 142, 0, 0, 0, 0, 0, 0, 92, 142, 9, 0, 0, 0, 0, 0, 124, 140, 17, 0, 0, 0, 0, 0, 24, 21, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 79, 0, 0, 0, 0, 0, 11, 111, 117, 39, 0, 0, 0, 0, 13, 124, 170, 82, 0, 0, 0, 0, 0, 148, 76, 0, 0, 0, 0, 0, 0, 163, 100, 0, 0, 0, 0, 0, 0, 125, 54, 0, 0, 0, 0, 0, 0, 22, 5, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 107, 77, 57, 1, 0, 0, 54, 172, 54, 50, 171, 10, 0, 0, 110, 138, 26, 133, 83, 0, 0, 0, 17, 179, 218, 56, 0, 0, 0, 0, 116, 147, 181, 21, 0, 0, 0, 44, 199, 168, 36, 0, 0, 0, 0, 14, 57, 19, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 97, 105, 26, 0, 0, 0, 0, 124, 79, 127, 133, 0, 0, 0, 0, 39, 134, 165, 35, 0, 0, 0, 0, 17, 159, 130, 110, 0, 0, 0, 0, 72, 149, 90, 133, 0, 0, 0, 0, 11, 140, 168, 35, 0, 0, 0, 0, 0, 14, 15, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 95, 43, 0, 0, 0, 0, 0, 119, 247, 223, 95, 0, 0, 0, 0, 35, 199, 247, 91, 0, 0, 0, 0, 35, 199, 143, 163, 0, 0, 0, 0, 87, 167, 47, 199, 0, 0, 0, 0, 27, 163, 199, 111, 0, 0, 0, 0, 0, 19, 43, 4, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 130, 125, 0, 0, 0, 0, 49, 172, 34, 142, 2, 0, 0, 0, 53, 183, 133, 149, 0, 0, 0, 0, 19, 148, 198, 31, 0, 0, 0, 0, 110, 122, 166, 15, 0, 0, 0, 0, 161, 122, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 103, 84, 1, 0, 0, 0, 92, 139, 86, 149, 5, 0, 0, 0, 131, 137, 151, 45, 0, 0, 0, 68, 149, 172, 3, 0, 0, 0, 19, 148, 61, 166, 2, 0, 0, 0, 67, 197, 177, 31, 0, 0, 0, 0, 7, 55, 13, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 65, 138, 137, 143, 22, 0, 0, 38, 169, 96, 126, 81, 0, 0, 0, 87, 157, 126, 3, 0, 0, 0, 45, 130, 125, 86, 0, 0, 0, 0, 35, 90, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 41, 110, 113, 54, 0, 0, 0, 175, 119, 54, 186, 91, 0, 0, 0, 155, 131, 129, 178, 12, 0, 0, 0, 71, 200, 160, 172, 0, 0, 0, 0, 185, 72, 106, 157, 0, 0, 0, 0, 195, 173, 98, 5, 0, 0, 0, 0, 47, 40, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 118, 122, 85, 0, 0, 0, 0, 86, 161, 32, 111, 74, 0, 0, 0, 7, 118, 86, 33, 148, 0, 0, 0, 21, 83, 221, 175, 30, 0, 0, 21, 164, 131, 161, 93, 0, 0, 0, 63, 166, 143, 92, 5, 0, 0, 0, 1, 51, 30, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 63, 122, 71, 0, 0, 0, 0, 147, 251, 218, 247, 11, 0, 0, 0, 45, 154, 230, 234, 24, 0, 0, 0, 50, 210, 233, 168, 0, 0, 0, 0, 148, 149, 218, 168, 0, 0, 0, 0, 81, 186, 209, 78, 0, 0, 0, 0, 0, 18, 34, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 56, 0, 0, 0, 0, 0, 44, 113, 159, 0, 0, 0, 0, 12, 133, 95, 81, 0, 0, 0, 0, 23, 164, 60, 0, 0, 0, 0, 0, 77, 67, 100, 0, 0, 0, 0, 0, 58, 106, 83, 0, 0, 0, 0, 0, 1, 42, 3, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 148, 131, 62, 0, 0, 0, 0, 95, 109, 161, 19, 0, 0, 0, 0, 72, 212, 79, 0, 0, 0, 8, 127, 141, 161, 5, 0, 0, 0, 83, 113, 8, 163, 14, 0, 0, 0, 24, 152, 145, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 126, 78, 0, 0, 0, 0, 26, 177, 143, 92, 0, 0, 0, 0, 0, 106, 155, 10, 0, 0, 0, 0, 0, 131, 166, 22, 0, 0, 0, 0, 0, 138, 141, 78, 0, 0, 0, 0, 0, 116, 205, 66, 0, 0, 0, 0, 0, 13, 52, 5, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 93, 100, 68, 0, 0, 0, 0, 137, 38, 8, 109, 0, 0, 0, 5, 146, 46, 69, 141, 44, 0, 0, 25, 179, 131, 50, 0, 127, 49, 0, 98, 43, 3, 11, 49, 123, 32, 0, 12, 90, 104, 84, 52, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 67, 43, 0, 0, 0, 0, 0, 105, 84, 89, 39, 0, 0, 0, 0, 116, 20, 108, 7, 0, 0, 0, 0, 106, 93, 12, 0, 0, 0, 0, 105, 145, 38, 0, 0, 0, 0, 0, 83, 108, 32, 0, 0, 0, 0, 0, 2, 31, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 125, 101, 31, 0, 0, 0, 0, 139, 83, 75, 123, 9, 0, 0, 0, 26, 149, 136, 61, 1, 0, 0, 0, 7, 114, 144, 73, 0, 0, 0, 0, 32, 127, 30, 151, 0, 0, 0, 0, 0, 95, 143, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 75, 101, 22, 0, 0, 0, 0, 167, 136, 134, 194, 37, 0, 0, 0, 62, 160, 174, 91, 0, 0, 0, 0, 3, 118, 147, 94, 0, 0, 0, 0, 40, 118, 38, 146, 0, 0, 0, 0, 8, 145, 175, 99, 0, 0, 0, 0, 0, 25, 43, 1, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 139, 82, 0, 0, 0, 0, 0, 130, 97, 156, 40, 0, 0, 0, 0, 121, 167, 96, 0, 0, 0, 0, 9, 127, 176, 66, 0, 0, 0, 0, 125, 102, 112, 123, 0, 0, 0, 10, 166, 154, 108, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 155, 137, 58, 73, 0, 0, 0, 67, 161, 1, 91, 94, 0, 0, 0, 6, 122, 144, 161, 12, 0, 0, 0, 23, 131, 183, 117, 0, 0, 0, 35, 170, 129, 71, 175, 0, 0, 0, 99, 164, 146, 119, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 155, 96, 0, 0, 0, 0, 0, 0, 144, 124, 133, 52, 0, 0, 0, 0, 39, 206, 146, 15, 0, 0, 0, 0, 96, 125, 58, 179, 8, 0, 0, 0, 58, 128, 2, 160, 27, 0, 0, 0, 2, 68, 156, 149, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 87, 120, 76, 1, 0, 0, 110, 176, 84, 133, 140, 5, 0, 0, 112, 182, 166, 159, 21, 0, 0, 0, 45, 184, 166, 126, 0, 0, 0, 4, 175, 89, 90, 143, 0, 0, 0, 40, 189, 171, 135, 29, 0, 0, 0, 0, 33, 42, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 112, 71, 43, 2, 0, 0, 73, 215, 47, 63, 178, 16, 0, 0, 17, 154, 138, 182, 54, 0, 0, 0, 92, 178, 182, 26, 0, 0, 0, 44, 192, 66, 154, 57, 0, 0, 0, 42, 177, 170, 147, 17, 0, 0, 0, 0, 32, 57, 10, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 139, 131, 0, 0, 0, 0, 84, 212, 20, 24, 15, 0, 0, 0, 26, 158, 144, 166, 25, 0, 0, 0, 48, 168, 168, 117, 0, 0, 0, 0, 147, 113, 153, 115, 0, 0, 0, 0, 103, 156, 61, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 80, 109, 1, 0, 0, 0, 34, 159, 76, 151, 34, 0, 0, 0, 99, 128, 103, 123, 0, 0, 0, 0, 15, 150, 164, 4, 0, 0, 0, 0, 24, 159, 171, 34, 0, 0, 0, 0, 83, 206, 101, 4, 0, 0, 0, 0, 18, 54, 1, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 121, 101, 4, 0, 0, 0, 5, 181, 222, 137, 129, 0, 0, 0, 5, 179, 49, 13, 141, 6, 0, 15, 159, 173, 217, 205, 62, 0, 0, 86, 81, 1, 62, 152, 0, 0, 0, 49, 177, 153, 165, 91, 0, 0, 0, 0, 25, 46, 21, 2, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 75, 54, 0, 0, 0, 0, 85, 20, 48, 21, 0, 0, 0, 2, 76, 8, 83, 0, 0, 0, 0, 24, 147, 41, 3, 0, 0, 0, 0, 111, 92, 31, 0, 0, 0, 0, 0, 104, 84, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 31, 109, 136, 16, 0, 0, 37, 155, 119, 117, 121, 83, 0, 0, 42, 153, 173, 238, 225, 12, 0, 0, 0, 121, 160, 115, 117, 52, 0, 0, 68, 127, 20, 8, 71, 58, 0, 0, 81, 152, 135, 131, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 144, 9, 0, 0, 12, 71, 23, 11, 148, 5, 0, 0, 42, 166, 96, 137, 105, 0, 0, 0, 0, 57, 216, 156, 143, 1, 0, 0, 0, 88, 140, 1, 122, 27, 0, 0, 0, 4, 101, 131, 104, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 127, 127, 55, 0, 0, 0, 95, 139, 87, 123, 107, 0, 0, 12, 195, 63, 67, 159, 19, 0, 0, 0, 143, 231, 131, 0, 0, 0, 0, 0, 51, 239, 155, 0, 0, 0, 0, 0, 67, 243, 167, 0, 0, 0, 0, 0, 4, 51, 23, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 127, 150, 29, 0, 0, 0, 93, 186, 19, 21, 119, 0, 0, 0, 170, 105, 119, 159, 49, 0, 0, 5, 167, 154, 80, 141, 13, 0, 0, 22, 130, 8, 20, 166, 23, 0, 0, 4, 116, 153, 134, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 40, 1, 0, 0, 0, 75, 151, 142, 181, 35, 0, 0, 0, 108, 106, 84, 189, 10, 0, 0, 0, 26, 205, 129, 14, 0, 0, 0, 0, 33, 99, 51, 0, 0, 0, 0, 0, 105, 103, 72, 0, 0, 0, 0, 0, 20, 91, 9, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 32, 0, 0, 0, 14, 114, 112, 121, 69, 121, 50, 0, 43, 99, 18, 34, 31, 124, 70, 0, 0, 134, 129, 95, 63, 3, 0, 0, 1, 109, 152, 4, 0, 0, 0, 0, 1, 117, 146, 34, 0, 0, 0, 0, 0, 29, 71, 3, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 138, 99, 29, 0, 0, 0, 0, 132, 64, 56, 135, 48, 0, 0, 0, 172, 183, 113, 150, 85, 0, 0, 104, 97, 84, 89, 87, 127, 0, 0, 97, 1, 0, 4, 92, 110, 0, 0, 50, 139, 109, 91, 83, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 111, 224, 210, 141, 12, 0, 0, 116, 184, 124, 89, 108, 23, 0, 34, 181, 195, 212, 48, 0, 0, 0, 55, 40, 55, 209, 65, 0, 0, 0, 12, 95, 82, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 79, 106, 0, 0, 0, 0, 5, 115, 118, 145, 53, 0, 0, 0, 49, 147, 23, 63, 74, 0, 0, 0, 95, 148, 159, 67, 0, 0, 0, 46, 97, 10, 72, 88, 0, 0, 0, 102, 134, 108, 58, 5, 0, 0, 0, 14, 45, 12, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 84, 105, 34, 0, 0, 0, 0, 168, 155, 205, 181, 0, 0, 0, 0, 80, 158, 220, 68, 0, 0, 0, 0, 71, 220, 145, 96, 1, 0, 0, 0, 159, 152, 7, 155, 49, 0, 0, 0, 63, 153, 193, 177, 7, 0, 0, 0, 0, 19, 50, 15, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 82, 98, 19, 0, 0, 0, 0, 116, 120, 49, 140, 0, 0, 0, 0, 128, 139, 44, 152, 1, 0, 0, 59, 129, 92, 104, 74, 130, 12, 0, 100, 26, 0, 0, 8, 123, 16, 0, 15, 109, 81, 92, 98, 19, 0, 0, 0, 4, 28, 32, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 75, 107, 42, 0, 0, 0, 0, 157, 124, 11, 154, 29, 0, 0, 0, 45, 162, 92, 161, 1, 0, 0, 0, 0, 72, 224, 80, 0, 0, 0, 0, 44, 182, 101, 133, 0, 0, 0, 0, 81, 185, 136, 36, 0, 0, 0, 0, 14, 53, 4, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 89, 98, 41, 0, 0, 0, 35, 212, 203, 98, 101, 0, 0, 0, 25, 178, 143, 6, 18, 0, 0, 0, 132, 68, 95, 99, 0, 0, 0, 0, 130, 8, 22, 139, 0, 0, 0, 0, 100, 146, 162, 72, 0, 0, 0, 0, 3, 45, 19, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 83, 125, 28, 1, 0, 0, 0, 21, 148, 6, 107, 46, 0, 0, 0, 0, 107, 109, 154, 5, 0, 0, 0, 5, 68, 207, 76, 0, 0, 0, 0, 82, 124, 100, 120, 0, 0, 0, 0, 87, 123, 108, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 76, 113, 2, 0, 0, 0, 0, 33, 130, 111, 1, 0, 0, 0, 0, 7, 151, 80, 0, 0, 0, 0, 0, 0, 107, 116, 74, 0, 0, 0, 0, 0, 106, 22, 117, 0, 0, 0, 0, 0, 65, 115, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 102, 95, 50, 7, 0, 0, 0, 57, 135, 7, 137, 5, 0, 0, 0, 2, 104, 145, 112, 0, 0, 0, 0, 5, 88, 175, 58, 0, 0, 0, 0, 96, 108, 122, 78, 0, 0, 0, 0, 96, 110, 71, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 122, 51, 0, 0, 0, 0, 0, 127, 113, 159, 0, 0, 0, 0, 0, 47, 193, 81, 0, 0, 0, 0, 0, 63, 168, 3, 0, 0, 0, 0, 60, 138, 125, 0, 0, 0, 0, 0, 154, 129, 19, 0, 0, 0, 0, 0, 37, 17, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 62, 19, 0, 0, 0, 0, 156, 99, 88, 130, 0, 0, 0, 0, 127, 63, 81, 112, 0, 0, 0, 0, 8, 115, 121, 2, 0, 0, 0, 0, 0, 77, 138, 35, 0, 0, 0, 0, 0, 101, 22, 115, 0, 0, 0, 0, 0, 46, 0, 45, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 84, 113, 10, 0, 0, 0, 20, 154, 53, 169, 20, 0, 0, 0, 38, 147, 111, 117, 0, 0, 0, 0, 1, 164, 94, 1, 0, 0, 0, 0, 86, 147, 113, 0, 0, 0, 0, 0, 116, 138, 78, 0, 0, 0, 0, 0, 13, 46, 1, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 31, 117, 134, 0, 0, 0, 0, 0, 132, 69, 155, 0, 0, 0, 0, 0, 73, 195, 56, 0, 0, 0, 0, 26, 144, 159, 18, 0, 0, 0, 0, 121, 83, 153, 31, 0, 0, 0, 0, 97, 119, 79, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 47, 20, 0, 0, 0, 4, 175, 203, 135, 191, 43, 0, 0, 28, 155, 23, 63, 179, 67, 0, 0, 0, 171, 163, 147, 23, 0, 0, 0, 0, 19, 199, 151, 19, 0, 0, 0, 0, 0, 139, 171, 119, 0, 0, 0, 0, 0, 27, 119, 39, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 108, 7, 31, 0, 0, 0, 34, 134, 0, 100, 118, 0, 0, 0, 7, 156, 119, 145, 28, 0, 0, 0, 0, 2, 98, 154, 144, 58, 0, 0, 0, 0, 86, 54, 48, 129, 0, 0, 0, 0, 22, 150, 143, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 88, 101, 99, 0, 0, 0, 0, 64, 167, 17, 125, 12, 0, 0, 0, 1, 74, 153, 158, 4, 0, 0, 0, 3, 74, 148, 160, 0, 0, 0, 0, 123, 115, 32, 170, 0, 0, 0, 30, 162, 137, 124, 29, 0, 0, 0, 4, 47, 22, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 80, 0, 0, 0, 0, 0, 55, 33, 127, 0, 0, 0, 0, 2, 112, 41, 136, 0, 0, 0, 0, 60, 148, 117, 8, 0, 0, 0, 0, 130, 32, 98, 0, 0, 0, 0, 0, 119, 120, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 67, 111, 114, 14, 0, 0, 0, 147, 76, 18, 157, 26, 0, 0, 0, 120, 113, 107, 134, 0, 0, 0, 0, 5, 151, 187, 23, 0, 0, 0, 0, 72, 133, 121, 93, 0, 0, 0, 0, 97, 145, 141, 51, 0, 0, 0, 0, 7, 43, 14, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 103, 141, 38, 0, 0, 0, 0, 95, 28, 155, 41, 0, 0, 0, 0, 97, 174, 184, 32, 0, 0, 0, 0, 24, 140, 73, 157, 0, 0, 0, 0, 84, 117, 51, 145, 0, 0, 0, 0, 49, 148, 108, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 93, 116, 82, 0, 0, 0, 0, 188, 81, 31, 21, 0, 0, 0, 0, 115, 177, 41, 117, 30, 0, 0, 0, 0, 54, 250, 123, 0, 0, 0, 0, 0, 103, 132, 161, 0, 0, 0, 0, 0, 118, 185, 114, 0, 0, 0, 0, 0, 9, 29, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 63, 63, 28, 0, 0, 0, 113, 203, 121, 101, 112, 141, 15, 0, 76, 198, 60, 26, 147, 105, 5, 0, 0, 72, 196, 222, 122, 0, 0, 0, 0, 0, 102, 220, 93, 0, 0, 0, 0, 0, 122, 208, 184, 0, 0, 0, 0, 0, 20, 93, 47, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 72, 0, 0, 0, 0, 17, 147, 145, 224, 38, 0, 0, 0, 14, 156, 48, 142, 2, 0, 0, 0, 0, 74, 230, 63, 0, 0, 0, 0, 61, 159, 165, 77, 0, 0, 0, 0, 155, 150, 77, 1, 0, 0, 0, 0, 34, 42, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 109, 184, 37, 0, 0, 0, 5, 149, 178, 185, 1, 0, 0, 0, 0, 120, 195, 50, 0, 0, 0, 8, 142, 198, 184, 69, 0, 0, 0, 45, 183, 57, 154, 25, 0, 0, 0, 22, 164, 148, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 114, 95, 2, 0, 0, 0, 35, 201, 109, 127, 31, 0, 0, 0, 55, 202, 156, 172, 20, 0, 0, 1, 188, 168, 211, 129, 0, 0, 0, 14, 153, 1, 31, 161, 0, 0, 0, 1, 153, 179, 177, 105, 0, 0, 0, 0, 3, 34, 40, 3, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 111, 105, 29, 0, 0, 0, 55, 140, 10, 70, 74, 0, 0, 0, 18, 133, 69, 138, 12, 0, 0, 0, 13, 108, 186, 40, 0, 0, 0, 30, 116, 79, 138, 37, 0, 0, 0, 104, 109, 110, 41, 0, 0, 0, 0, 16, 50, 9, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 83, 76, 12, 0, 0, 0, 35, 201, 84, 149, 63, 0, 0, 0, 104, 124, 140, 135, 24, 0, 0, 0, 14, 41, 63, 176, 134, 36, 0, 0, 0, 0, 0, 112, 28, 136, 25, 0, 0, 0, 0, 72, 125, 125, 16, 0, 0, 0, 0, 0, 9, 2, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 99, 0, 0, 0, 0, 0, 61, 149, 117, 21, 0, 0, 0, 0, 8, 105, 144, 3, 0, 0, 0, 0, 0, 99, 110, 53, 0, 0, 0, 0, 14, 116, 139, 38, 0, 0, 0, 0, 15, 127, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 106, 99, 0, 0, 0, 0, 0, 115, 90, 123, 0, 0, 0, 0, 0, 56, 201, 26, 0, 0, 0, 0, 81, 144, 117, 74, 0, 0, 0, 0, 156, 26, 129, 35, 0, 0, 0, 0, 102, 110, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 84, 105, 33, 0, 0, 0, 0, 121, 204, 122, 159, 36, 0, 0, 0, 18, 125, 221, 158, 12, 0, 0, 0, 44, 161, 160, 101, 0, 0, 0, 0, 139, 70, 130, 97, 0, 0, 0, 0, 159, 148, 123, 5, 0, 0, 0, 0, 30, 59, 8, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 139, 108, 17, 0, 0, 0, 0, 134, 68, 59, 150, 0, 0, 0, 0, 122, 168, 176, 150, 0, 0, 0, 0, 31, 148, 43, 140, 15, 0, 0, 0, 100, 116, 1, 129, 13, 0, 0, 0, 19, 123, 144, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 137, 126, 130, 6, 0, 0, 0, 130, 39, 2, 129, 18, 0, 0, 0, 82, 117, 103, 114, 0, 0, 0, 0, 30, 192, 168, 68, 0, 0, 0, 0, 90, 131, 33, 142, 0, 0, 0, 0, 65, 163, 144, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 143, 66, 0, 0, 0, 0, 39, 169, 17, 133, 6, 0, 0, 0, 18, 161, 54, 155, 1, 0, 0, 0, 1, 98, 215, 34, 0, 0, 0, 0, 72, 179, 157, 55, 0, 0, 0, 0, 84, 120, 122, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 69, 58, 6, 0, 0, 0, 0, 151, 113, 166, 75, 0, 0, 0, 0, 155, 91, 168, 24, 0, 0, 0, 0, 10, 131, 188, 12, 0, 0, 0, 0, 0, 76, 202, 111, 0, 0, 0, 0, 0, 37, 209, 118, 0, 0, 0, 0, 0, 0, 41, 14, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 114, 119, 26, 0, 0, 0, 0, 174, 131, 139, 119, 91, 0, 0, 0, 129, 179, 57, 156, 88, 0, 0, 0, 2, 112, 253, 118, 0, 0, 0, 0, 34, 170, 165, 136, 0, 0, 0, 0, 42, 177, 209, 74, 0, 0, 0, 0, 0, 23, 38, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 109, 85, 102, 42, 0, 0, 0, 14, 129, 119, 58, 24, 0, 0, 0, 0, 67, 138, 1, 4, 0, 0, 0, 10, 108, 110, 11, 4, 0, 0, 0, 18, 112, 59, 0, 0, 0, 0, 0, 0, 1, 0, 0, 5, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 26, 0, 22, 3, 0, 0, 134, 151, 87, 78, 129, 5, 0, 0, 188, 21, 64, 165, 13, 0, 0, 0, 112, 159, 155, 23, 0, 0, 0, 0, 3, 150, 146, 4, 0, 0, 0, 0, 45, 197, 142, 8, 0, 0, 0, 0, 11, 90, 51, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 103, 56, 0, 0, 0, 0, 0, 97, 90, 112, 0, 0, 0, 0, 0, 103, 80, 148, 0, 0, 0, 0, 8, 142, 120, 6, 0, 0, 0, 0, 84, 156, 97, 0, 0, 0, 0, 0, 96, 188, 37, 0, 0, 0, 0, 0, 9, 40, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 117, 104, 0, 0, 0, 0, 101, 137, 136, 114, 0, 0, 0, 0, 129, 147, 120, 1, 0, 0, 0, 0, 10, 190, 128, 11, 0, 0, 0, 0, 12, 198, 141, 102, 0, 0, 0, 0, 0, 78, 160, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 139, 146, 0, 0, 0, 0, 0, 108, 40, 66, 0, 0, 0, 0, 0, 104, 128, 90, 0, 0, 0, 0, 3, 118, 139, 0, 0, 0, 0, 0, 69, 141, 134, 0, 0, 0, 0, 0, 72, 163, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 161, 42, 5, 5, 0, 0, 28, 176, 45, 6, 103, 11, 0, 0, 39, 175, 45, 129, 59, 0, 0, 0, 21, 196, 153, 26, 0, 0, 0, 0, 108, 176, 116, 0, 0, 0, 0, 0, 61, 175, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 154, 3, 0, 0, 0, 0, 99, 81, 60, 0, 0, 0, 0, 0, 126, 26, 99, 5, 0, 0, 0, 2, 161, 102, 13, 0, 0, 0, 0, 86, 221, 14, 0, 0, 0, 0, 0, 123, 141, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 94, 120, 43, 0, 0, 0, 0, 0, 173, 14, 9, 0, 0, 0, 0, 18, 214, 156, 22, 0, 0, 0, 122, 163, 204, 40, 0, 0, 0, 0, 164, 30, 180, 12, 0, 0, 0, 0, 114, 161, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 51, 116, 94, 0, 0, 0, 0, 126, 138, 115, 186, 17, 0, 0, 0, 178, 179, 222, 121, 15, 0, 0, 0, 157, 74, 90, 164, 56, 0, 0, 0, 118, 0, 0, 93, 96, 0, 0, 0, 162, 163, 146, 107, 2, 0, 0, 0, 25, 46, 13, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 161, 132, 13, 0, 0, 0, 0, 51, 151, 9, 42, 0, 0, 0, 0, 18, 186, 93, 1, 0, 0, 0, 17, 100, 218, 51, 0, 0, 0, 0, 166, 249, 150, 0, 0, 0, 0, 0, 105, 172, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 120, 77, 0, 0, 0, 0, 6, 166, 48, 193, 14, 0, 0, 0, 1, 133, 146, 196, 8, 0, 0, 0, 0, 97, 201, 25, 0, 0, 0, 0, 60, 135, 132, 6, 0, 0, 0, 0, 151, 167, 58, 0, 0, 0, 0, 0, 18, 50, 2, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 110, 83, 0, 0, 0, 0, 4, 156, 17, 101, 1, 0, 0, 0, 3, 134, 94, 121, 1, 0, 0, 0, 0, 95, 144, 3, 0, 0, 0, 0, 27, 61, 72, 0, 0, 0, 0, 0, 120, 137, 93, 0, 0, 0, 0, 0, 17, 60, 7, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 105, 97, 0, 0, 0, 0, 0, 105, 46, 131, 9, 0, 0, 0, 0, 118, 28, 131, 7, 0, 0, 0, 0, 86, 194, 49, 0, 0, 0, 0, 62, 134, 143, 9, 0, 0, 0, 0, 125, 144, 75, 0, 0, 0, 0, 0, 17, 40, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 109, 3, 0, 0, 0, 0, 82, 101, 103, 56, 0, 0, 0, 0, 131, 24, 121, 16, 0, 0, 0, 14, 151, 118, 16, 0, 0, 0, 0, 102, 140, 50, 0, 0, 0, 0, 0, 146, 136, 7, 0, 0, 0, 0, 0, 40, 35, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 82, 111, 62, 0, 0, 0, 0, 160, 188, 103, 182, 65, 0, 0, 0, 149, 162, 84, 191, 27, 0, 0, 0, 44, 206, 221, 152, 0, 0, 0, 0, 156, 154, 34, 187, 15, 0, 0, 0, 71, 181, 208, 169, 2, 0, 0, 0, 0, 12, 55, 11, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 113, 53, 0, 0, 0, 0, 0, 107, 102, 119, 0, 0, 0, 0, 0, 128, 57, 94, 0, 0, 0, 0, 3, 125, 139, 35, 0, 0, 0, 0, 60, 174, 68, 0, 0, 0, 0, 0, 81, 182, 56, 0, 0, 0, 0, 0, 8, 46, 2, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 82, 75, 17, 0, 0, 0, 69, 80, 36, 81, 27, 0, 0, 0, 104, 119, 204, 212, 3, 0, 0, 22, 80, 30, 100, 21, 0, 0, 0, 51, 31, 0, 84, 28, 0, 0, 0, 0, 71, 72, 109, 81, 0, 0, 0, 0, 0, 9, 56, 15, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 132, 151, 17, 9, 0, 0, 0, 79, 138, 32, 145, 10, 0, 0, 0, 114, 80, 148, 79, 0, 0, 0, 53, 157, 206, 66, 0, 0, 0, 2, 213, 194, 87, 0, 0, 0, 0, 0, 123, 173, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 104, 13, 0, 0, 0, 0, 14, 133, 9, 14, 0, 0, 0, 0, 23, 175, 118, 47, 0, 0, 0, 20, 167, 88, 3, 0, 0, 0, 0, 114, 188, 6, 0, 0, 0, 0, 0, 83, 171, 0, 0, 0, 0, 0, 0, 5, 26, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 82, 91, 0, 0, 0, 0, 34, 121, 67, 105, 2, 0, 0, 0, 100, 106, 112, 109, 0, 0, 0, 0, 3, 153, 121, 0, 0, 0, 0, 0, 13, 151, 141, 24, 0, 0, 0, 0, 7, 126, 148, 36, 0, 0, 0, 0, 0, 11, 20, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 124, 25, 0, 0, 0, 0, 0, 170, 117, 19, 0, 0, 0, 0, 24, 206, 122, 7, 0, 0, 0, 51, 177, 131, 3, 0, 0, 0, 0, 143, 102, 97, 0, 0, 0, 0, 0, 127, 167, 17, 0, 0, 0, 0, 0, 12, 31, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 141, 23, 0, 0, 0, 0, 13, 195, 198, 29, 0, 0, 0, 0, 16, 186, 238, 66, 0, 0, 0, 0, 0, 81, 252, 131, 0, 0, 0, 0, 10, 174, 235, 148, 0, 0, 0, 0, 37, 172, 114, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 111, 68, 3, 0, 0, 0, 0, 65, 40, 112, 9, 0, 0, 0, 0, 78, 131, 57, 0, 0, 0, 0, 12, 134, 59, 0, 0, 0, 0, 0, 89, 96, 65, 0, 0, 0, 0, 0, 64, 119, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 62, 13, 0, 0, 0, 0, 0, 96, 213, 212, 190, 0, 0, 0, 0, 42, 180, 127, 59, 0, 0, 0, 0, 9, 194, 61, 0, 0, 0, 0, 0, 43, 157, 168, 53, 0, 0, 0, 0, 31, 161, 168, 43, 0, 0, 0, 0, 0, 76, 36, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 87, 113, 97, 0, 0, 0, 0, 93, 185, 46, 153, 7, 0, 0, 0, 17, 154, 155, 58, 0, 0, 0, 0, 37, 160, 147, 91, 0, 0, 0, 0, 109, 90, 45, 140, 0, 0, 0, 0, 120, 188, 177, 91, 0, 0, 0, 0, 19, 63, 45, 2, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 68, 99, 33, 0, 0, 0, 3, 205, 124, 100, 187, 40, 0, 0, 0, 86, 167, 167, 104, 2, 0, 0, 0, 21, 159, 142, 143, 2, 0, 0, 0, 63, 134, 3, 155, 13, 0, 0, 0, 43, 158, 157, 164, 5, 0, 0, 0, 0, 24, 57, 18, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 144, 155, 56, 0, 0, 0, 0, 127, 80, 92, 171, 0, 0, 0, 0, 87, 144, 150, 213, 10, 0, 0, 0, 72, 222, 161, 35, 0, 0, 0, 0, 174, 95, 187, 102, 0, 0, 0, 0, 127, 157, 159, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 117, 67, 0, 0, 0, 0, 0, 101, 67, 4, 35, 0, 0, 0, 0, 45, 161, 100, 30, 0, 0, 0, 5, 119, 154, 15, 0, 0, 0, 0, 44, 153, 94, 44, 0, 0, 0, 0, 24, 144, 101, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 149, 102, 0, 0, 0, 0, 0, 103, 43, 47, 47, 0, 0, 0, 0, 94, 170, 135, 14, 0, 0, 0, 84, 185, 122, 0, 0, 0, 0, 0, 171, 75, 121, 0, 0, 0, 0, 0, 73, 152, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 109, 52, 0, 0, 0, 0, 22, 151, 34, 88, 79, 14, 0, 0, 16, 150, 149, 91, 0, 0, 0, 0, 69, 200, 56, 0, 0, 0, 0, 0, 137, 91, 114, 0, 0, 0, 0, 0, 92, 164, 92, 0, 0, 0, 0, 0, 6, 50, 3, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 106, 14, 0, 0, 0, 0, 91, 101, 85, 40, 0, 0, 0, 0, 105, 140, 116, 4, 0, 0, 0, 35, 160, 121, 0, 0, 0, 0, 0, 127, 100, 116, 0, 0, 0, 0, 0, 107, 155, 96, 0, 0, 0, 0, 0, 9, 46, 3, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 91, 99, 2, 0, 0, 0, 0, 103, 53, 81, 1, 0, 0, 0, 0, 72, 119, 74, 0, 0, 0, 0, 54, 155, 98, 0, 0, 0, 0, 0, 114, 90, 96, 0, 0, 0, 0, 0, 75, 166, 69, 0, 0, 0, 0, 0, 3, 42, 1, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 99, 16, 45, 1, 0, 0, 4, 131, 58, 125, 28, 0, 0, 0, 0, 125, 147, 27, 0, 0, 0, 0, 15, 172, 67, 0, 0, 0, 0, 0, 72, 157, 90, 0, 0, 0, 0, 0, 38, 172, 63, 0, 0, 0, 0, 0, 0, 30, 3, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 67, 29, 0, 50, 42, 0, 0, 189, 166, 110, 138, 166, 72, 0, 0, 150, 110, 193, 125, 9, 0, 0, 0, 122, 243, 34, 0, 0, 0, 0, 0, 78, 209, 164, 32, 0, 0, 0, 0, 15, 147, 220, 132, 0, 0, 0, 0, 0, 4, 31, 15, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 100, 118, 38, 0, 0, 0, 0, 14, 101, 152, 114, 0, 0, 0, 0, 0, 63, 196, 53, 0, 0, 0, 0, 97, 108, 47, 87, 0, 0, 0, 0, 164, 42, 0, 115, 26, 0, 0, 0, 44, 94, 106, 117, 59, 0, 0, 0, 0, 1, 49, 46, 1, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 71, 10, 1, 0, 0, 0, 59, 105, 89, 76, 1, 0, 0, 0, 95, 158, 107, 1, 0, 0, 0, 69, 180, 68, 0, 0, 0, 0, 0, 146, 65, 70, 0, 0, 0, 0, 0, 149, 115, 14, 0, 0, 0, 0, 0, 37, 40, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 68, 67, 18, 41, 0, 0, 0, 18, 142, 71, 112, 13, 0, 0, 0, 30, 190, 135, 11, 0, 0, 0, 10, 136, 116, 0, 0, 0, 0, 0, 114, 176, 81, 0, 0, 0, 0, 0, 172, 131, 5, 0, 0, 0, 0, 0, 49, 39, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 61, 102, 35, 0, 0, 0, 27, 180, 103, 62, 162, 8, 0, 0, 55, 172, 59, 52, 136, 3, 0, 0, 0, 40, 129, 229, 59, 0, 0, 0, 0, 0, 94, 149, 159, 0, 0, 0, 0, 0, 69, 188, 133, 0, 0, 0, 0, 0, 6, 58, 16, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 127, 133, 20, 0, 0, 0, 0, 184, 47, 114, 37, 0, 0, 0, 0, 125, 140, 152, 93, 1, 0, 0, 0, 8, 142, 124, 148, 30, 0, 0, 0, 60, 151, 1, 61, 106, 0, 0, 0, 7, 112, 140, 141, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 111, 65, 1, 0, 0, 0, 3, 153, 80, 91, 17, 0, 0, 0, 22, 198, 130, 9, 0, 0, 0, 74, 175, 114, 0, 0, 0, 0, 8, 163, 57, 86, 0, 0, 0, 0, 17, 164, 139, 21, 0, 0, 0, 0, 0, 34, 26, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 94, 31, 0, 0, 0, 0, 58, 67, 12, 112, 0, 0, 0, 0, 94, 66, 3, 77, 0, 0, 0, 0, 17, 108, 61, 25, 0, 0, 0, 0, 0, 106, 65, 0, 0, 0, 0, 0, 0, 111, 36, 0, 0, 0, 0, 0, 0, 22, 13, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 86, 126, 85, 0, 0, 0, 0, 97, 186, 88, 178, 0, 0, 0, 0, 38, 201, 217, 97, 0, 0, 0, 0, 91, 144, 146, 126, 0, 0, 0, 0, 146, 27, 75, 138, 0, 0, 0, 0, 152, 162, 139, 27, 0, 0, 0, 0, 30, 57, 7, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 92, 50, 0, 0, 0, 0, 83, 175, 91, 95, 0, 0, 0, 0, 141, 90, 110, 67, 0, 0, 0, 0, 123, 169, 76, 141, 5, 0, 0, 0, 130, 38, 0, 64, 32, 0, 0, 0, 68, 138, 110, 102, 1, 0, 0, 0, 0, 18, 39, 5, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 64, 63, 11, 0, 0, 0, 0, 68, 8, 11, 100, 1, 0, 0, 0, 42, 98, 78, 86, 1, 0, 0, 0, 33, 89, 91, 26, 0, 0, 0, 0, 43, 60, 25, 80, 0, 0, 0, 0, 0, 60, 62, 88, 0, 0, 0, 0, 0, 5, 49, 19, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 75, 144, 132, 53, 0, 0, 0, 68, 142, 32, 58, 33, 0, 0, 0, 40, 181, 182, 90, 0, 0, 0, 0, 91, 164, 160, 177, 2, 0, 0, 3, 153, 18, 18, 164, 6, 0, 0, 0, 120, 146, 143, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 85, 125, 102, 81, 16, 0, 16, 198, 62, 22, 68, 92, 10, 0, 0, 138, 131, 151, 157, 36, 0, 0, 0, 32, 183, 169, 85, 0, 0, 0, 0, 110, 184, 28, 153, 3, 0, 0, 0, 63, 140, 136, 129, 0, 0, 0, 0, 1, 40, 57, 13, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 114, 177, 171, 45, 0, 0, 0, 122, 112, 8, 33, 69, 0, 0, 0, 80, 200, 122, 153, 41, 0, 0, 4, 169, 202, 197, 63, 0, 0, 0, 15, 190, 32, 112, 86, 0, 0, 0, 2, 148, 186, 136, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 56, 24, 0, 0, 34, 156, 195, 201, 235, 84, 0, 0, 68, 222, 171, 183, 82, 3, 0, 0, 75, 216, 155, 14, 0, 0, 0, 33, 183, 193, 79, 0, 0, 0, 0, 37, 223, 191, 6, 0, 0, 0, 0, 0, 73, 48, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 120, 76, 0, 0, 0, 0, 46, 181, 181, 187, 0, 0, 0, 0, 52, 203, 199, 67, 0, 0, 0, 0, 64, 171, 181, 110, 0, 0, 0, 0, 105, 94, 65, 141, 0, 0, 0, 0, 73, 212, 206, 79, 0, 0, 0, 0, 0, 39, 40, 3, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 75, 94, 112, 37, 0, 0, 0, 223, 157, 101, 217, 110, 0, 0, 4, 217, 149, 147, 160, 19, 0, 0, 0, 59, 224, 232, 99, 0, 0, 0, 0, 136, 178, 102, 162, 0, 0, 0, 0, 92, 211, 207, 114, 0, 0, 0, 0, 0, 28, 21, 3, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 52, 103, 17, 0, 0, 0, 0, 25, 171, 117, 86, 184, 61, 0, 0, 0, 31, 221, 188, 57, 2, 0, 0, 100, 180, 202, 80, 0, 0, 0, 15, 175, 39, 175, 59, 0, 0, 0, 12, 172, 147, 122, 5, 0, 0, 0, 0, 38, 54, 5, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 43, 0, 0, 0, 0, 47, 110, 81, 163, 58, 0, 0, 0, 72, 107, 105, 64, 26, 0, 0, 0, 32, 147, 64, 0, 0, 0, 0, 0, 87, 70, 99, 7, 0, 0, 0, 0, 26, 136, 115, 15, 0, 0, 0, 0, 0, 33, 80, 2, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 104, 185, 128, 0, 0, 0, 0, 90, 164, 52, 178, 0, 0, 0, 0, 51, 195, 188, 77, 0, 0, 0, 0, 70, 159, 186, 103, 0, 0, 0, 0, 149, 85, 121, 179, 0, 0, 0, 0, 68, 171, 169, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 131, 116, 125, 120, 118, 23, 0, 41, 122, 91, 6, 55, 157, 32, 0, 0, 24, 137, 156, 52, 1, 0, 0, 0, 114, 64, 86, 0, 0, 0, 0, 0, 76, 100, 43, 0, 0, 0, 0, 0, 3, 6, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 103, 126, 126, 22, 0, 0, 0, 161, 86, 32, 174, 46, 0, 0, 0, 166, 122, 131, 174, 4, 0, 0, 0, 82, 194, 154, 170, 19, 0, 0, 0, 167, 50, 0, 86, 60, 0, 0, 0, 149, 182, 175, 102, 0, 0, 0, 0, 17, 47, 29, 5, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 24, 33, 63, 33, 0, 0, 0, 59, 247, 180, 131, 182, 55, 0, 0, 0, 191, 114, 20, 162, 72, 0, 0, 0, 20, 176, 187, 84, 0, 0, 0, 0, 48, 200, 170, 12, 0, 0, 0, 0, 55, 170, 182, 153, 0, 0, 0, 0, 0, 60, 126, 74, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 112, 188, 127, 0, 0, 0, 0, 165, 117, 74, 163, 0, 0, 0, 0, 122, 187, 156, 110, 0, 0, 0, 0, 45, 175, 136, 166, 11, 0, 0, 0, 154, 105, 20, 137, 38, 0, 0, 0, 98, 176, 184, 118, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 90, 117, 104, 13, 0, 0, 32, 124, 49, 115, 60, 6, 0, 0, 111, 109, 119, 141, 2, 0, 0, 0, 110, 198, 170, 30, 0, 0, 0, 38, 109, 17, 95, 134, 0, 0, 0, 84, 160, 121, 114, 42, 0, 0, 0, 6, 63, 53, 6, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 77, 79, 3, 0, 0, 0, 59, 132, 49, 153, 120, 0, 0, 0, 138, 21, 6, 147, 13, 0, 0, 0, 22, 111, 147, 181, 143, 37, 0, 0, 0, 0, 17, 66, 59, 137, 0, 0, 0, 0, 0, 94, 174, 85, 0, 0, 0, 0, 0, 2, 27, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 72, 100, 96, 9, 0, 0, 68, 133, 42, 66, 130, 6, 0, 0, 103, 117, 95, 114, 16, 0, 0, 1, 115, 185, 138, 15, 0, 0, 0, 62, 94, 11, 133, 85, 0, 0, 0, 96, 133, 119, 139, 37, 0, 0, 0, 10, 63, 63, 17, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 96, 113, 103, 36, 0, 0, 0, 101, 153, 28, 41, 55, 0, 0, 0, 12, 170, 188, 115, 19, 0, 0, 0, 143, 96, 130, 101, 0, 0, 0, 3, 140, 2, 23, 148, 0, 0, 0, 0, 126, 135, 151, 104, 0, 0, 0, 0, 4, 38, 44, 3, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 82, 149, 127, 4, 0, 0, 0, 79, 156, 0, 89, 22, 0, 0, 0, 43, 190, 130, 143, 4, 0, 0, 0, 49, 159, 160, 138, 0, 0, 0, 0, 118, 93, 33, 151, 0, 0, 0, 0, 48, 147, 151, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 55, 85, 94, 2, 0, 0, 2, 136, 95, 27, 83, 47, 0, 0, 13, 123, 0, 16, 159, 45, 0, 0, 24, 153, 93, 154, 56, 137, 0, 0, 0, 127, 197, 41, 53, 83, 0, 0, 0, 30, 154, 122, 85, 0, 0, 0, 0, 0, 34, 28, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 117, 70, 8, 0, 0, 0, 0, 94, 163, 105, 154, 0, 0, 0, 0, 67, 163, 29, 174, 0, 0, 0, 0, 1, 131, 210, 89, 0, 0, 0, 0, 36, 166, 137, 106, 0, 0, 0, 0, 41, 142, 158, 135, 0, 0, 0, 0, 0, 12, 56, 15, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 168, 161, 0, 0, 0, 0, 53, 165, 74, 176, 2, 0, 0, 0, 43, 170, 165, 68, 0, 0, 0, 0, 106, 172, 184, 40, 0, 0, 0, 3, 163, 19, 114, 112, 0, 0, 0, 0, 140, 170, 146, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 91, 65, 10, 0, 0, 0, 0, 97, 17, 12, 52, 0, 0, 0, 0, 38, 98, 24, 87, 0, 0, 0, 0, 0, 51, 175, 45, 0, 0, 0, 0, 3, 98, 46, 97, 0, 0, 0, 0, 0, 75, 110, 104, 0, 0, 0, 0, 0, 0, 47, 19, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 96, 119, 38, 0, 0, 0, 0, 117, 13, 110, 55, 0, 0, 0, 0, 111, 176, 181, 4, 0, 0, 0, 82, 193, 167, 107, 0, 0, 0, 0, 167, 66, 98, 92, 0, 0, 0, 0, 129, 178, 86, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 99, 67, 0, 0, 0, 0, 0, 113, 78, 146, 90, 0, 0, 0, 0, 77, 133, 150, 30, 0, 0, 0, 0, 0, 127, 137, 13, 0, 0, 0, 0, 0, 94, 93, 90, 0, 0, 0, 0, 0, 77, 171, 80, 0, 0, 0, 0, 0, 3, 51, 4, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 155, 74, 0, 0, 0, 0, 0, 133, 119, 99, 0, 0, 0, 0, 0, 58, 218, 62, 0, 0, 0, 0, 7, 128, 229, 73, 0, 0, 0, 0, 56, 197, 176, 77, 0, 0, 0, 0, 68, 157, 104, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 102, 108, 96, 16, 0, 0, 0, 45, 149, 29, 49, 131, 0, 0, 0, 0, 109, 67, 54, 97, 0, 0, 0, 110, 131, 169, 137, 0, 0, 0, 18, 149, 9, 133, 72, 0, 0, 0, 24, 169, 138, 96, 1, 0, 0, 0, 0, 41, 46, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 55, 91, 0, 0, 0, 0, 4, 129, 192, 117, 0, 0, 0, 0, 7, 152, 139, 42, 0, 0, 0, 0, 18, 139, 144, 6, 0, 0, 0, 0, 119, 130, 146, 61, 0, 0, 0, 0, 94, 130, 114, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 139, 65, 0, 0, 0, 0, 0, 115, 106, 69, 0, 0, 0, 0, 0, 123, 114, 18, 0, 0, 0, 0, 1, 116, 127, 0, 0, 0, 0, 0, 45, 181, 128, 4, 0, 0, 0, 0, 52, 137, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 71, 78, 23, 0, 0, 0, 0, 129, 52, 34, 91, 0, 0, 0, 0, 62, 84, 92, 34, 0, 0, 0, 0, 0, 95, 106, 6, 0, 0, 0, 0, 20, 83, 64, 90, 0, 0, 0, 0, 56, 119, 100, 77, 0, 0, 0, 0, 2, 46, 40, 2, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 103, 131, 107, 0, 0, 0, 0, 183, 51, 19, 151, 131, 27, 0, 0, 175, 95, 139, 119, 75, 15, 0, 0, 139, 135, 135, 51, 0, 0, 0, 0, 147, 0, 55, 159, 4, 0, 0, 0, 111, 135, 135, 135, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 14, 23, 115, 0, 0, 0, 0, 16, 147, 72, 111, 14, 0, 0, 0, 5, 115, 139, 42, 8, 0, 0, 0, 10, 116, 145, 17, 3, 0, 0, 0, 92, 127, 147, 31, 0, 0, 0, 0, 46, 109, 37, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 3, 30, 0, 0, 0, 0, 0, 4, 74, 140, 0, 0, 0, 0, 0, 116, 80, 135, 0, 0, 0, 0, 0, 113, 140, 80, 0, 0, 0, 0, 7, 93, 200, 25, 0, 0, 0, 0, 103, 169, 177, 54, 0, 0, 0, 0, 69, 114, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 122, 120, 34, 0, 0, 0, 34, 149, 2, 73, 46, 0, 0, 0, 48, 177, 74, 119, 1, 0, 0, 0, 9, 148, 121, 1, 0, 0, 0, 0, 104, 87, 129, 40, 0, 0, 0, 0, 59, 112, 128, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 107, 45, 0, 0, 0, 0, 8, 140, 50, 113, 0, 0, 0, 0, 52, 147, 66, 105, 0, 0, 0, 0, 0, 29, 144, 110, 127, 23, 0, 0, 0, 0, 113, 0, 74, 74, 0, 0, 0, 0, 57, 107, 96, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 85, 102, 7, 0, 0, 0, 23, 218, 202, 183, 204, 23, 0, 0, 21, 231, 167, 168, 241, 29, 0, 0, 0, 52, 225, 252, 179, 0, 0, 0, 0, 66, 241, 251, 205, 0, 0, 0, 0, 72, 228, 229, 142, 0, 0, 0, 0, 3, 41, 41, 3, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 95, 36, 0, 0, 0, 0, 42, 145, 156, 45, 0, 0, 0, 0, 68, 146, 115, 10, 0, 0, 0, 0, 0, 48, 173, 3, 0, 0, 0, 0, 0, 42, 181, 29, 0, 0, 0, 0, 0, 146, 119, 8, 0, 0, 0, 0, 0, 45, 20, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 100, 119, 25, 0, 0, 0, 0, 174, 162, 131, 141, 30, 0, 0, 0, 196, 156, 227, 85, 0, 0, 0, 0, 67, 210, 173, 185, 0, 0, 0, 0, 25, 173, 80, 200, 0, 0, 0, 0, 10, 153, 248, 130, 0, 0, 0, 0, 0, 18, 60, 17, 0, 0 },
    { 0, 0, 0, 0, 21, 14, 0, 0, 0, 0, 0, 47, 139, 96, 0, 0, 0, 0, 32, 136, 36, 119, 0, 0, 0, 0, 9, 136, 84, 129, 0, 0, 0, 0, 19, 113, 212, 72, 0, 0, 0, 0, 122, 112, 110, 124, 0, 0, 0, 0, 49, 101, 75, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 33, 20, 0, 0, 0, 0, 0, 0, 79, 101, 0, 0, 0, 0, 68, 119, 12, 93, 0, 0, 0, 0, 92, 85, 6, 102, 0, 0, 0, 0, 3, 109, 142, 46, 0, 0, 0, 0, 78, 115, 129, 7, 0, 0, 0, 0, 76, 61, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 87, 60, 0, 0, 0, 0, 120, 177, 34, 112, 22, 0, 0, 0, 132, 150, 5, 118, 11, 0, 0, 0, 2, 79, 184, 72, 0, 0, 0, 0, 0, 89, 161, 59, 0, 0, 0, 0, 22, 165, 161, 55, 0, 0, 0, 0, 1, 43, 34, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 76, 86, 11, 0, 0, 0, 0, 83, 111, 139, 89, 8, 0, 0, 0, 42, 147, 71, 129, 20, 0, 0, 0, 0, 110, 195, 35, 0, 0, 0, 0, 36, 147, 134, 30, 0, 0, 0, 0, 30, 162, 146, 18, 0, 0, 0, 0, 0, 31, 26, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 103, 0, 0, 0, 0, 78, 120, 79, 129, 0, 0, 0, 0, 77, 131, 109, 86, 0, 0, 0, 0, 5, 118, 124, 0, 0, 0, 0, 0, 73, 105, 123, 7, 0, 0, 0, 0, 75, 125, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 94, 2, 0, 0, 0, 0, 26, 123, 122, 12, 0, 0, 0, 0, 59, 124, 108, 11, 0, 0, 0, 0, 0, 56, 143, 5, 0, 0, 0, 0, 0, 105, 110, 47, 0, 0, 0, 0, 0, 88, 106, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 42, 77, 98, 31, 0, 0, 5, 195, 127, 51, 12, 5, 0, 0, 2, 172, 150, 120, 86, 0, 0, 0, 0, 118, 170, 162, 66, 0, 0, 0, 0, 141, 66, 53, 179, 5, 0, 0, 0, 40, 154, 155, 179, 7, 0, 0, 0, 0, 18, 63, 27, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 22, 0, 0, 0, 0, 0, 26, 98, 93, 12, 0, 0, 0, 0, 51, 66, 73, 18, 0, 0, 0, 0, 2, 75, 100, 0, 0, 0, 0, 0, 0, 69, 102, 36, 0, 0, 0, 0, 0, 76, 84, 12, 0, 0, 0, 0, 0, 17, 24, 0, 0, 0 },
    { 0, 0, 0, 0, 16, 20, 0, 0, 0, 0, 0, 1, 151, 95, 0, 0, 0, 0, 0, 80, 135, 88, 0, 0, 0, 0, 0, 101, 151, 45, 0, 0, 0, 0, 10, 113, 146, 20, 0, 0, 0, 0, 91, 122, 111, 72, 0, 0, 0, 0, 17, 88, 103, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 36, 101, 74, 0, 0, 0, 0, 59, 210, 64, 160, 0, 0, 0, 0, 43, 194, 137, 121, 0, 0, 0, 0, 0, 96, 150, 0, 0, 0, 0, 0, 0, 109, 158, 9, 0, 0, 0, 0, 0, 140, 166, 19, 0, 0, 0, 0, 0, 29, 31, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 103, 109, 104, 11, 0, 0, 0, 73, 113, 0, 101, 19, 0, 0, 0, 12, 127, 94, 122, 0, 0, 0, 1, 54, 101, 143, 69, 0, 0, 0, 95, 92, 20, 33, 104, 0, 0, 0, 45, 83, 96, 109, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 34, 107, 68, 1, 0, 0, 0, 150, 169, 77, 136, 105, 0, 0, 0, 50, 189, 49, 154, 69, 0, 0, 0, 25, 164, 192, 32, 0, 0, 0, 7, 143, 91, 182, 16, 0, 0, 0, 19, 180, 157, 171, 23, 0, 0, 0, 0, 39, 63, 20, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 99, 85, 12, 0, 0, 0, 0, 177, 37, 37, 101, 0, 0, 0, 0, 137, 31, 79, 76, 0, 0, 0, 0, 80, 168, 91, 118, 7, 0, 0, 0, 108, 73, 0, 67, 72, 0, 0, 0, 41, 131, 96, 110, 26, 0, 0, 0, 0, 17, 52, 17, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 42, 1, 41, 58, 0, 0, 91, 145, 99, 47, 32, 144, 0, 0, 164, 18, 0, 0, 87, 82, 0, 0, 35, 129, 133, 188, 195, 40, 0, 0, 0, 23, 119, 102, 146, 50, 0, 0, 0, 130, 186, 129, 51, 0, 0, 0, 0, 10, 20, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 119, 94, 1, 0, 0, 0, 7, 30, 38, 194, 4, 0, 0, 0, 52, 128, 110, 126, 0, 0, 0, 0, 16, 195, 125, 6, 0, 0, 0, 0, 49, 217, 40, 0, 0, 0, 0, 0, 141, 218, 21, 0, 0, 0, 0, 0, 27, 38, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 113, 105, 18, 0, 0, 0, 10, 168, 112, 79, 175, 13, 0, 0, 3, 143, 92, 60, 158, 8, 0, 0, 2, 102, 233, 166, 12, 0, 0, 10, 154, 229, 142, 5, 0, 0, 0, 74, 239, 168, 19, 0, 0, 0, 0, 4, 50, 8, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 129, 129, 13, 0, 0, 0, 0, 135, 45, 49, 4, 0, 0, 0, 0, 137, 81, 20, 111, 22, 0, 0, 0, 18, 167, 203, 55, 0, 0, 0, 0, 44, 150, 140, 104, 0, 0, 0, 0, 35, 149, 134, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 119, 55, 1, 0, 0, 0, 0, 91, 112, 102, 93, 0, 0, 0, 0, 55, 145, 68, 184, 122, 84, 0, 0, 14, 173, 162, 58, 1, 0, 0, 0, 93, 112, 132, 3, 0, 0, 0, 0, 114, 163, 128, 5, 0, 0, 0, 0, 12, 53, 9, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 181, 161, 14, 0, 0, 0, 14, 171, 46, 116, 141, 0, 0, 0, 0, 89, 199, 204, 80, 0, 0, 53, 192, 162, 227, 38, 0, 0, 0, 157, 79, 82, 196, 18, 0, 0, 0, 75, 186, 172, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 138, 136, 8, 0, 0, 0, 0, 13, 20, 109, 42, 0, 0, 0, 9, 105, 141, 171, 6, 0, 0, 0, 11, 141, 129, 10, 0, 0, 0, 0, 129, 201, 50, 0, 0, 0, 0, 0, 142, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 71, 111, 39, 0, 0, 0, 2, 133, 197, 137, 137, 0, 0, 15, 6, 109, 172, 201, 77, 0, 0, 0, 30, 139, 211, 42, 0, 0, 0, 9, 171, 98, 166, 0, 0, 0, 0, 32, 184, 170, 114, 0, 0, 0, 0, 0, 50, 56, 5, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 167, 105, 0, 32, 100, 73, 0, 0, 150, 97, 56, 135, 25, 0, 0, 0, 24, 175, 126, 7, 0, 0, 0, 0, 2, 156, 155, 25, 0, 0, 0, 0, 0, 41, 97, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 176, 115, 2, 0, 0, 0, 35, 106, 32, 164, 85, 0, 0, 0, 92, 184, 98, 182, 57, 0, 0, 10, 89, 167, 205, 55, 0, 0, 0, 44, 173, 99, 148, 0, 0, 0, 0, 5, 143, 148, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 129, 35, 0, 0, 0, 0, 62, 99, 8, 93, 0, 0, 0, 0, 85, 104, 70, 90, 0, 0, 0, 0, 55, 124, 115, 87, 0, 0, 0, 0, 108, 21, 24, 102, 0, 0, 0, 0, 77, 92, 78, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 148, 138, 2, 0, 0, 0, 0, 25, 63, 118, 53, 0, 0, 0, 0, 24, 184, 163, 14, 0, 0, 0, 61, 159, 179, 20, 0, 0, 0, 0, 162, 106, 109, 0, 0, 0, 0, 0, 121, 145, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 109, 115, 30, 0, 0, 0, 0, 77, 18, 50, 80, 0, 0, 0, 3, 63, 22, 140, 14, 0, 0, 0, 0, 121, 130, 26, 0, 0, 0, 0, 64, 165, 53, 0, 0, 0, 0, 0, 157, 138, 5, 0, 0, 0, 0, 0, 36, 14, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 126, 86, 24, 0, 0, 0, 0, 53, 26, 52, 129, 66, 0, 0, 0, 22, 17, 0, 40, 116, 0, 0, 0, 46, 175, 129, 123, 9, 0, 0, 0, 124, 189, 36, 0, 0, 0, 0, 1, 164, 163, 8, 0, 0, 0, 0, 0, 35, 36, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 106, 23, 0, 0, 0, 0, 13, 102, 165, 30, 0, 0, 0, 0, 99, 159, 136, 7, 0, 0, 0, 0, 25, 151, 196, 68, 0, 0, 0, 0, 0, 141, 160, 27, 0, 0, 0, 0, 0, 87, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 106, 78, 1, 0, 0, 0, 40, 92, 43, 143, 66, 0, 0, 0, 89, 129, 23, 163, 31, 0, 0, 0, 34, 200, 162, 59, 0, 0, 0, 0, 139, 185, 50, 0, 0, 0, 0, 0, 150, 182, 32, 0, 0, 0, 0, 0, 17, 41, 0, 0, 0, 0 },
    { 0, 0, 0, 7, 25, 0, 0, 0, 0, 0, 11, 78, 85, 36, 0, 0, 0, 0, 60, 70, 3, 90, 0, 0, 0, 0, 19, 106, 65, 114, 0, 0, 0, 0, 96, 72, 58, 74, 0, 0, 0, 0, 98, 45, 19, 95, 0, 0, 0, 0, 16, 88, 87, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 88, 126, 25, 0, 0, 0, 1, 153, 76, 192, 51, 0, 0, 0, 1, 136, 86, 153, 3, 0, 0, 0, 31, 187, 100, 5, 0, 0, 0, 2, 150, 145, 63, 0, 0, 0, 0, 74, 170, 137, 22, 0, 0, 0, 0, 17, 54, 14, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 76, 105, 0, 0, 0, 0, 0, 110, 54, 141, 1, 0, 0, 0, 1, 160, 158, 44, 0, 0, 0, 0, 107, 127, 142, 7, 0, 0, 0, 0, 148, 36, 139, 50, 0, 0, 0, 0, 51, 113, 119, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 78, 121, 55, 0, 0, 0, 0, 74, 115, 61, 127, 0, 0, 0, 0, 59, 172, 140, 22, 0, 0, 0, 68, 151, 138, 0, 0, 0, 0, 10, 160, 38, 114, 0, 0, 0, 0, 18, 168, 146, 47, 0, 0, 0, 0, 0, 35, 40, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 96, 137, 105, 1, 0, 0, 0, 70, 79, 29, 130, 2, 0, 0, 0, 114, 73, 147, 35, 0, 0, 0, 52, 190, 116, 15, 0, 0, 0, 20, 154, 109, 74, 0, 0, 0, 0, 12, 147, 130, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 76, 8, 0, 0, 0, 1, 116, 210, 166, 173, 0, 0, 0, 7, 245, 163, 135, 174, 0, 0, 0, 0, 51, 211, 164, 183, 0, 0, 0, 0, 58, 183, 27, 189, 2, 0, 0, 0, 12, 168, 164, 65, 0, 0, 0, 0, 0, 28, 14, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 77, 124, 85, 0, 0, 0, 0, 90, 225, 79, 127, 5, 0, 0, 0, 132, 141, 45, 118, 2, 0, 0, 0, 41, 183, 157, 27, 0, 0, 0, 0, 19, 160, 181, 29, 0, 0, 0, 0, 69, 182, 196, 62, 0, 0, 0, 0, 7, 48, 41, 1, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 84, 135, 54, 0, 0, 0, 0, 12, 107, 110, 30, 0, 0, 0, 0, 0, 125, 96, 0, 0, 0, 0, 0, 55, 107, 137, 20, 0, 0, 0, 0, 112, 44, 85, 98, 0, 0, 0, 0, 34, 107, 103, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 120, 36, 0, 0, 0, 0, 83, 109, 44, 127, 0, 0, 0, 0, 128, 50, 125, 49, 0, 0, 0, 83, 219, 171, 27, 0, 0, 0, 7, 142, 71, 113, 0, 0, 0, 0, 18, 159, 107, 39, 0, 0, 0, 0, 0, 43, 12, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 102, 46, 0, 0, 0, 0, 0, 116, 41, 103, 42, 0, 0, 0, 0, 90, 100, 125, 14, 0, 0, 0, 0, 3, 145, 110, 6, 0, 0, 0, 0, 0, 102, 107, 85, 0, 0, 0, 0, 0, 28, 153, 124, 0, 0, 0, 0, 0, 0, 44, 33, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 104, 96, 3, 0, 0, 0, 0, 73, 74, 103, 73, 0, 0, 0, 0, 78, 117, 150, 21, 0, 0, 0, 35, 166, 110, 5, 0, 0, 0, 7, 147, 135, 55, 0, 0, 0, 0, 44, 167, 124, 7, 0, 0, 0, 0, 0, 44, 8, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 120, 44, 0, 0, 0, 0, 42, 117, 93, 101, 0, 0, 0, 0, 60, 135, 127, 13, 0, 0, 0, 50, 148, 102, 0, 0, 0, 0, 6, 134, 58, 90, 0, 0, 0, 0, 26, 161, 120, 10, 0, 0, 0, 0, 2, 46, 7, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 87, 12, 0, 0, 0, 0, 110, 112, 98, 123, 0, 0, 0, 0, 111, 57, 130, 34, 0, 0, 0, 11, 153, 103, 5, 0, 0, 0, 2, 125, 127, 65, 0, 0, 0, 0, 40, 163, 126, 15, 0, 0, 0, 0, 5, 57, 33, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 47, 26, 0, 0, 0, 0, 0, 184, 131, 209, 131, 0, 0, 0, 0, 101, 156, 205, 80, 0, 0, 0, 0, 0, 60, 210, 66, 0, 0, 0, 0, 0, 112, 87, 161, 0, 0, 0, 0, 0, 101, 152, 167, 0, 0, 0, 0, 0, 10, 93, 48, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 72, 1, 0, 0, 0, 0, 58, 136, 170, 46, 0, 0, 0, 0, 125, 145, 81, 1, 0, 0, 0, 0, 32, 165, 140, 45, 0, 0, 0, 0, 0, 96, 65, 118, 0, 0, 0, 0, 0, 88, 123, 57, 0, 0, 0, 0, 0, 2, 25, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 129, 136, 43, 0, 0, 0, 0, 85, 39, 8, 113, 0, 0, 0, 0, 98, 54, 119, 39, 0, 0, 0, 37, 140, 129, 12, 0, 0, 0, 1, 131, 51, 118, 0, 0, 0, 0, 12, 139, 112, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 110, 14, 0, 0, 0, 0, 29, 125, 42, 130, 0, 0, 0, 0, 100, 37, 93, 83, 0, 0, 0, 22, 175, 103, 26, 0, 0, 0, 5, 137, 158, 11, 0, 0, 0, 0, 19, 164, 136, 12, 0, 0, 0, 0, 0, 48, 24, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 71, 98, 89, 47, 0, 0, 0, 110, 48, 2, 9, 42, 0, 0, 0, 38, 100, 90, 67, 24, 0, 0, 0, 0, 0, 40, 98, 109, 28, 0, 0, 0, 0, 97, 1, 11, 108, 0, 0, 0, 0, 79, 105, 110, 72, 0, 0, 0, 0, 2, 48, 43, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 44, 35, 3, 0, 0, 0, 0, 153, 211, 197, 193, 18, 0, 0, 0, 66, 209, 206, 149, 5, 0, 0, 0, 47, 211, 201, 52, 0, 0, 0, 0, 109, 162, 126, 115, 0, 0, 0, 0, 43, 178, 155, 116, 0, 0, 0, 0, 0, 33, 106, 29, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 103, 73, 0, 0, 0, 0, 21, 102, 44, 112, 0, 0, 0, 0, 6, 95, 100, 71, 0, 0, 0, 0, 17, 108, 94, 0, 0, 0, 0, 0, 90, 53, 91, 0, 0, 0, 0, 0, 107, 102, 47, 0, 0, 0, 0, 0, 25, 52, 0, 0, 0, 0 },
    { 0, 0, 0, 19, 31, 0, 0, 0, 0, 0, 21, 155, 136, 0, 0, 0, 0, 0, 76, 151, 0, 8, 10, 0, 0, 0, 27, 170, 113, 94, 14, 0, 0, 0, 28, 130, 165, 71, 0, 0, 0, 0, 79, 151, 109, 174, 0, 0, 0, 0, 8, 70, 103, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 123, 94, 11, 0, 0, 0, 44, 178, 69, 172, 192, 4, 0, 0, 45, 145, 9, 44, 184, 11, 0, 0, 1, 139, 242, 225, 208, 1, 0, 0, 0, 107, 171, 44, 158, 29, 0, 0, 0, 64, 196, 209, 176, 4, 0, 0, 0, 0, 27, 62, 23, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 58, 24, 0, 0, 0, 109, 173, 148, 156, 144, 0, 0, 0, 12, 143, 187, 181, 30, 0, 0, 0, 32, 173, 170, 60, 0, 0, 0, 0, 136, 123, 133, 93, 0, 0, 0, 0, 169, 154, 132, 7, 0, 0, 0, 0, 65, 116, 16, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 79, 108, 45, 0, 0, 0, 0, 61, 167, 63, 180, 0, 0, 0, 0, 26, 172, 125, 127, 0, 0, 0, 0, 7, 149, 154, 6, 0, 0, 0, 0, 63, 152, 158, 0, 0, 0, 0, 0, 120, 212, 79, 0, 0, 0, 0, 0, 23, 52, 2, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 114, 52, 0, 0, 0, 0, 12, 177, 82, 207, 0, 0, 0, 0, 3, 168, 103, 172, 0, 0, 0, 0, 0, 84, 236, 49, 0, 0, 0, 0, 33, 160, 196, 60, 0, 0, 0, 0, 102, 214, 157, 20, 0, 0, 0, 0, 18, 62, 13, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 63, 26, 0, 0, 0, 0, 108, 177, 169, 165, 0, 0, 0, 0, 161, 123, 160, 87, 0, 0, 0, 0, 19, 158, 209, 33, 0, 0, 0, 0, 0, 132, 166, 98, 0, 0, 0, 0, 0, 79, 211, 72, 0, 0, 0, 0, 0, 8, 86, 6, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 43, 55, 12, 0, 0, 0, 0, 187, 179, 147, 207, 95, 0, 0, 0, 147, 171, 171, 159, 31, 0, 0, 0, 11, 143, 187, 19, 0, 0, 0, 0, 0, 135, 235, 59, 0, 0, 0, 0, 16, 187, 179, 16, 0, 0, 0, 0, 0, 63, 51, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 81, 6, 0, 0, 0, 0, 0, 70, 124, 136, 0, 0, 0, 0, 0, 79, 190, 85, 0, 0, 0, 0, 0, 103, 119, 0, 0, 0, 0, 0, 0, 105, 110, 0, 0, 0, 0, 0, 0, 89, 112, 0, 0, 0, 0, 0, 0, 14, 15, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 47, 14, 0, 0, 0, 0, 92, 99, 35, 56, 61, 9, 0, 0, 90, 92, 89, 104, 62, 4, 0, 0, 2, 144, 78, 0, 0, 0, 0, 0, 16, 99, 114, 0, 0, 0, 0, 0, 33, 102, 97, 0, 0, 0, 0, 0, 6, 84, 19, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 96, 32, 0, 0, 0, 0, 44, 172, 83, 120, 0, 0, 0, 0, 47, 167, 160, 59, 0, 0, 0, 0, 10, 113, 124, 129, 0, 0, 0, 0, 86, 103, 16, 123, 0, 0, 0, 0, 56, 157, 151, 60, 0, 0, 0, 0, 0, 23, 31, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 105, 27, 0, 0, 0, 0, 8, 175, 163, 123, 0, 0, 0, 0, 1, 174, 114, 111, 0, 0, 0, 0, 0, 134, 164, 8, 0, 0, 0, 0, 0, 133, 180, 28, 0, 0, 0, 0, 0, 150, 187, 53, 0, 0, 0, 0, 0, 28, 43, 4, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 70, 126, 87, 0, 0, 0, 0, 91, 185, 78, 180, 0, 0, 0, 0, 87, 170, 117, 147, 0, 0, 0, 0, 6, 175, 198, 21, 0, 0, 0, 0, 66, 189, 197, 28, 0, 0, 0, 0, 98, 223, 132, 7, 0, 0, 0, 0, 14, 54, 6, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 63, 107, 87, 3, 0, 0, 0, 214, 145, 156, 187, 59, 0, 0, 0, 173, 183, 173, 122, 1, 0, 0, 0, 30, 199, 229, 53, 0, 0, 0, 0, 82, 177, 200, 75, 0, 0, 0, 0, 64, 217, 174, 21, 0, 0, 0, 0, 0, 41, 19, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 79, 0, 0, 0, 0, 0, 3, 100, 24, 0, 0, 0, 0, 60, 102, 118, 0, 0, 0, 0, 0, 37, 138, 104, 10, 0, 0, 0, 0, 0, 88, 104, 49, 0, 0, 0, 0, 0, 65, 92, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 28, 44, 13, 0, 0, 0, 0, 180, 172, 123, 219, 45, 0, 0, 0, 144, 166, 144, 154, 3, 0, 0, 0, 1, 74, 252, 84, 0, 0, 0, 0, 0, 85, 207, 132, 0, 0, 0, 0, 0, 115, 208, 75, 0, 0, 0, 0, 0, 32, 75, 3, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 118, 14, 0, 0, 0, 0, 0, 122, 243, 175, 158, 1, 0, 0, 0, 24, 173, 237, 111, 0, 0, 0, 0, 0, 114, 206, 25, 0, 0, 0, 0, 7, 183, 241, 51, 0, 0, 0, 0, 4, 149, 172, 8, 0, 0, 0, 0, 0, 23, 28, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 73, 107, 69, 0, 0, 0, 0, 113, 164, 79, 190, 6, 0, 0, 0, 95, 156, 76, 169, 0, 0, 0, 0, 13, 187, 189, 16, 0, 0, 0, 0, 93, 172, 177, 16, 0, 0, 0, 0, 141, 200, 156, 8, 0, 0, 0, 0, 19, 62, 20, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 60, 125, 126, 44, 0, 0, 0, 122, 200, 72, 189, 86, 0, 0, 0, 146, 156, 163, 192, 14, 0, 0, 0, 125, 252, 144, 6, 0, 0, 0, 3, 196, 140, 183, 9, 0, 0, 0, 0, 157, 230, 120, 5, 0, 0, 0, 0, 4, 52, 6, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 114, 97, 39, 0, 0, 0, 0, 168, 208, 199, 125, 0, 0, 0, 0, 66, 209, 239, 64, 0, 0, 0, 0, 15, 176, 217, 104, 0, 0, 0, 0, 70, 204, 180, 136, 0, 0, 0, 0, 43, 211, 177, 26, 0, 0, 0, 0, 0, 32, 20, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 146, 149, 83, 0, 0, 0, 0, 182, 42, 75, 173, 0, 0, 0, 0, 180, 146, 179, 61, 0, 0, 0, 0, 143, 178, 174, 179, 22, 0, 0, 0, 190, 50, 13, 151, 81, 0, 0, 0, 80, 166, 173, 119, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 84, 115, 36, 0, 0, 0, 0, 82, 222, 109, 190, 54, 0, 0, 0, 69, 213, 92, 196, 55, 0, 0, 0, 16, 188, 231, 61, 0, 0, 0, 0, 77, 203, 202, 74, 0, 0, 0, 0, 26, 173, 216, 49, 0, 0, 0, 0, 0, 22, 39, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 106, 125, 125, 24, 0, 0, 5, 225, 250, 236, 169, 14, 0, 0, 0, 204, 250, 172, 26, 0, 0, 0, 0, 162, 199, 139, 209, 37, 0, 0, 0, 106, 225, 91, 172, 125, 0, 0, 0, 3, 82, 178, 205, 92, 0, 0, 0, 0, 0, 3, 18, 1, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 141, 163, 40, 0, 0, 0, 0, 218, 155, 116, 225, 68, 0, 0, 0, 222, 178, 207, 127, 20, 0, 0, 0, 108, 237, 209, 117, 0, 0, 0, 0, 117, 191, 110, 239, 20, 0, 0, 0, 21, 141, 188, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 114, 41, 0, 0, 0, 0, 32, 169, 168, 36, 0, 0, 0, 0, 69, 188, 146, 0, 0, 0, 0, 0, 0, 120, 200, 138, 0, 0, 0, 0, 25, 181, 109, 164, 0, 0, 0, 0, 108, 146, 63, 5, 0, 0, 0, 0, 18, 9, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 86, 122, 64, 51, 0, 0, 0, 61, 208, 46, 139, 123, 0, 0, 0, 26, 195, 136, 179, 19, 0, 0, 0, 51, 197, 194, 16, 0, 0, 0, 7, 172, 126, 204, 31, 0, 0, 0, 49, 226, 210, 79, 0, 0, 0, 0, 8, 63, 54, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 114, 97, 60, 0, 0, 0, 97, 178, 90, 118, 202, 86, 0, 0, 113, 155, 26, 0, 82, 129, 0, 0, 4, 141, 237, 215, 198, 22, 0, 0, 0, 187, 133, 107, 195, 18, 0, 0, 0, 128, 158, 135, 204, 47, 0, 0, 0, 5, 48, 63, 61, 2, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 79, 82, 99, 0, 0, 0, 45, 176, 87, 108, 223, 4, 0, 0, 54, 164, 42, 48, 167, 0, 0, 0, 0, 66, 209, 216, 146, 0, 0, 0, 0, 134, 128, 28, 152, 47, 0, 0, 0, 105, 172, 137, 184, 48, 0, 0, 0, 3, 42, 63, 56, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 90, 120, 60, 0, 0, 0, 33, 184, 97, 83, 169, 144, 2, 0, 53, 150, 21, 0, 77, 139, 1, 0, 0, 67, 183, 219, 201, 10, 0, 0, 5, 134, 146, 76, 187, 22, 0, 0, 55, 126, 0, 0, 68, 119, 0, 0, 12, 35, 0, 0, 12, 31, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 96, 103, 12, 0, 0, 0, 24, 163, 151, 171, 169, 57, 0, 0, 62, 96, 36, 6, 77, 99, 0, 0, 9, 209, 189, 187, 202, 75, 0, 0, 6, 159, 19, 9, 17, 153, 0, 0, 0, 160, 135, 113, 144, 63, 0, 0, 0, 17, 59, 63, 35, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 79, 60, 8, 0, 0, 0, 104, 148, 109, 132, 178, 12, 0, 0, 161, 49, 20, 34, 154, 63, 0, 0, 31, 166, 224, 144, 195, 55, 0, 0, 11, 169, 58, 0, 35, 159, 0, 0, 46, 133, 53, 29, 109, 103, 0, 0, 1, 15, 15, 14, 15, 1, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 62, 120, 59, 0, 0, 0, 0, 130, 157, 249, 193, 0, 0, 0, 0, 208, 108, 103, 199, 0, 0, 0, 0, 65, 189, 198, 145, 0, 0, 0, 0, 31, 179, 205, 108, 0, 0, 0, 0, 91, 202, 201, 85, 0, 0, 0, 0, 10, 57, 48, 2, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 102, 105, 106, 5, 0, 0, 0, 136, 21, 33, 68, 60, 0, 0, 5, 113, 0, 40, 125, 16, 0, 0, 0, 141, 157, 112, 124, 50, 0, 0, 0, 114, 5, 0, 15, 106, 0, 0, 0, 103, 91, 96, 116, 32, 0, 0, 0, 1, 36, 51, 17, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 48, 68, 0, 0, 0, 0, 0, 153, 146, 190, 46, 0, 0, 0, 0, 165, 121, 138, 121, 0, 0, 0, 0, 5, 104, 215, 63, 0, 0, 0, 0, 4, 115, 173, 100, 0, 0, 0, 0, 26, 152, 79, 144, 0, 0, 0, 0, 0, 41, 53, 39, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 51, 0, 0, 0, 0, 85, 167, 63, 90, 32, 0, 0, 17, 115, 28, 46, 148, 81, 2, 0, 99, 107, 161, 129, 15, 113, 52, 0, 19, 137, 95, 8, 37, 96, 8, 0, 0, 39, 122, 98, 64, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 124, 1, 0, 0, 0, 0, 15, 147, 155, 39, 0, 0, 0, 0, 9, 148, 159, 32, 0, 0, 0, 0, 9, 153, 144, 5, 0, 0, 0, 0, 25, 134, 139, 71, 0, 0, 0, 0, 0, 68, 155, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 104, 102, 20, 0, 0, 0, 8, 182, 80, 107, 174, 2, 0, 0, 25, 150, 0, 51, 165, 2, 0, 0, 0, 141, 203, 211, 86, 0, 0, 0, 0, 114, 122, 52, 166, 1, 0, 0, 0, 72, 143, 130, 168, 1, 0, 0, 0, 0, 22, 49, 24, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 117, 124, 57, 0, 0, 0, 23, 165, 63, 79, 155, 0, 0, 0, 18, 174, 55, 79, 153, 0, 0, 0, 0, 43, 185, 216, 125, 0, 0, 0, 0, 105, 135, 33, 158, 24, 0, 0, 0, 120, 147, 128, 175, 25, 0, 0, 0, 7, 48, 63, 36, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 115, 110, 19, 0, 0, 0, 0, 49, 142, 143, 5, 0, 0, 0, 0, 0, 105, 127, 4, 0, 0, 0, 0, 0, 135, 73, 114, 0, 0, 0, 0, 0, 134, 26, 124, 0, 0, 0, 0, 0, 87, 154, 100, 0, 0, 0, 0, 0, 2, 47, 7, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 91, 116, 34, 0, 0, 21, 150, 130, 57, 127, 190, 18, 0, 110, 97, 0, 24, 167, 58, 0, 0, 10, 113, 161, 189, 43, 0, 0, 0, 0, 11, 151, 166, 100, 0, 0, 0, 0, 58, 191, 164, 48, 0, 0, 0, 0, 5, 45, 21, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 41, 22, 0, 0, 0, 0, 51, 154, 195, 194, 126, 14, 0, 0, 114, 39, 69, 13, 80, 82, 0, 0, 38, 186, 174, 176, 153, 118, 12, 0, 0, 163, 79, 23, 2, 150, 40, 0, 0, 121, 43, 69, 111, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 62, 140, 34, 0, 0, 0, 0, 174, 86, 158, 137, 0, 0, 0, 0, 171, 14, 47, 179, 0, 0, 0, 0, 79, 176, 159, 95, 0, 0, 0, 0, 7, 159, 199, 78, 0, 0, 0, 0, 33, 108, 31, 135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 113, 98, 24, 0, 0, 0, 51, 141, 70, 186, 189, 97, 4, 0, 113, 60, 35, 70, 53, 177, 26, 0, 21, 195, 186, 181, 157, 174, 39, 0, 0, 172, 55, 14, 0, 47, 38, 0, 0, 148, 79, 23, 57, 147, 28, 0, 0, 20, 39, 23, 37, 14, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 57, 20, 0, 0, 0, 0, 129, 133, 101, 138, 137, 5, 0, 0, 170, 20, 16, 90, 200, 59, 0, 0, 125, 215, 168, 91, 4, 0, 0, 30, 168, 154, 81, 0, 0, 0, 0, 40, 166, 158, 58, 0, 0, 0, 0, 0, 82, 59, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 98, 87, 2, 0, 0, 0, 25, 172, 72, 160, 177, 26, 0, 0, 8, 139, 156, 176, 45, 0, 0, 0, 53, 175, 182, 55, 0, 0, 0, 5, 175, 76, 155, 58, 0, 0, 0, 17, 191, 152, 57, 0, 0, 0, 0, 0, 38, 22, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87, 126, 109, 2, 0, 0, 0, 0, 104, 0, 46, 108, 2, 0, 0, 0, 100, 46, 148, 79, 1, 0, 0, 55, 174, 136, 24, 0, 0, 0, 44, 163, 101, 93, 0, 0, 0, 0, 37, 143, 138, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 121, 66, 0, 0, 0, 0, 0, 59, 152, 125, 0, 0, 0, 0, 0, 93, 181, 55, 0, 0, 0, 0, 21, 126, 131, 42, 0, 0, 0, 0, 107, 73, 140, 88, 0, 0, 0, 0, 74, 119, 64, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 86, 9, 0, 0, 0, 0, 38, 119, 45, 97, 6, 0, 0, 0, 109, 59, 87, 88, 0, 0, 0, 0, 24, 143, 120, 2, 0, 0, 0, 0, 31, 131, 117, 37, 0, 0, 0, 0, 37, 126, 97, 10, 0, 0, 0, 0, 0, 37, 5, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 123, 33, 0, 0, 0, 0, 112, 123, 104, 101, 0, 0, 0, 0, 151, 76, 167, 26, 0, 0, 0, 86, 194, 192, 81, 0, 0, 0, 19, 167, 68, 68, 122, 0, 0, 0, 4, 152, 163, 153, 45, 0, 0, 0, 0, 11, 45, 7, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 88, 170, 109, 25, 0, 0, 0, 50, 174, 11, 128, 31, 0, 0, 0, 16, 164, 160, 170, 45, 0, 0, 0, 141, 146, 144, 5, 33, 0, 0, 0, 151, 7, 127, 55, 4, 0, 0, 0, 123, 166, 149, 29, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 55, 37, 0, 0, 0, 0, 66, 178, 138, 196, 115, 26, 0, 0, 73, 182, 177, 188, 153, 50, 0, 6, 187, 121, 149, 21, 0, 0, 0, 40, 113, 10, 153, 43, 0, 0, 0, 17, 155, 143, 122, 2, 0, 0, 0, 0, 79, 106, 10, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 103, 19, 0, 0, 0, 0, 0, 63, 135, 107, 19, 0, 0, 0, 0, 67, 163, 99, 31, 0, 0, 0, 15, 99, 171, 4, 0, 0, 0, 0, 87, 91, 147, 0, 0, 0, 0, 0, 79, 203, 27, 0, 0, 0, 0, 0, 11, 35, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 113, 126, 67, 0, 0, 0, 32, 204, 154, 221, 179, 0, 0, 0, 39, 196, 94, 245, 126, 0, 0, 3, 95, 223, 216, 112, 4, 0, 0, 118, 247, 248, 140, 0, 0, 0, 0, 115, 198, 177, 63, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 77, 0, 0, 0, 0, 0, 12, 127, 94, 0, 0, 0, 0, 0, 9, 182, 34, 0, 0, 0, 0, 0, 0, 126, 84, 40, 0, 0, 0, 0, 0, 100, 44, 127, 0, 0, 0, 0, 0, 28, 156, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 118, 63, 0, 0, 0, 0, 76, 151, 28, 114, 55, 0, 0, 0, 82, 140, 86, 163, 63, 0, 0, 0, 34, 149, 172, 101, 0, 0, 0, 0, 157, 85, 113, 101, 0, 0, 0, 3, 158, 142, 105, 7, 0, 0, 0, 0, 19, 47, 1, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 64, 125, 40, 0, 0, 0, 0, 70, 177, 141, 75, 0, 0, 0, 0, 9, 95, 167, 29, 0, 0, 0, 0, 3, 144, 146, 18, 0, 0, 0, 0, 46, 161, 148, 56, 0, 0, 0, 0, 30, 173, 155, 17, 0, 0, 0, 0, 0, 35, 17, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 119, 108, 25, 0, 0, 0, 84, 152, 21, 49, 151, 16, 0, 0, 107, 151, 108, 155, 34, 0, 0, 0, 69, 156, 81, 114, 0, 0, 0, 0, 139, 32, 30, 139, 0, 0, 0, 0, 151, 148, 134, 28, 0, 0, 0, 0, 27, 49, 2, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 87, 71, 6, 0, 0, 0, 0, 99, 1, 16, 14, 0, 0, 0, 0, 74, 84, 35, 0, 0, 0, 0, 0, 0, 89, 96, 48, 0, 0, 0, 0, 0, 91, 16, 96, 18, 0, 0, 0, 0, 26, 97, 106, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 107, 98, 5, 0, 0, 0, 50, 213, 96, 124, 85, 0, 0, 0, 21, 150, 136, 173, 45, 0, 0, 0, 85, 189, 195, 33, 0, 0, 0, 0, 169, 52, 147, 12, 0, 0, 0, 0, 195, 197, 64, 0, 0, 0, 0, 0, 33, 33, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 49, 41, 0, 0, 0, 0, 0, 42, 144, 99, 10, 0, 0, 0, 0, 0, 67, 117, 0, 0, 0, 0, 0, 4, 93, 108, 33, 0, 0, 0, 0, 54, 69, 51, 88, 0, 0, 0, 0, 50, 84, 97, 44, 0, 0, 0, 0, 3, 40, 35, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 96, 0, 0, 0, 0, 18, 177, 157, 132, 90, 50, 0, 0, 13, 187, 100, 152, 168, 44, 0, 0, 41, 184, 189, 54, 0, 0, 0, 11, 198, 252, 90, 0, 0, 0, 0, 37, 210, 143, 3, 0, 0, 0, 0, 4, 21, 2, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 106, 126, 31, 0, 0, 0, 20, 146, 58, 53, 181, 25, 0, 0, 45, 126, 95, 160, 146, 25, 0, 0, 82, 222, 140, 13, 0, 0, 0, 5, 169, 77, 113, 0, 0, 0, 0, 9, 164, 180, 71, 0, 0, 0, 0, 0, 22, 46, 1, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 143, 148, 0, 0, 0, 0, 2, 113, 87, 147, 0, 0, 0, 0, 13, 158, 198, 46, 0, 0, 0, 0, 87, 166, 110, 84, 0, 0, 0, 0, 141, 64, 89, 127, 0, 0, 0, 0, 94, 149, 123, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 136, 171, 52, 0, 0, 0, 0, 150, 143, 216, 79, 0, 0, 0, 2, 158, 207, 97, 0, 0, 0, 26, 160, 143, 207, 93, 0, 0, 0, 153, 102, 22, 156, 169, 0, 0, 0, 70, 155, 155, 128, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 158, 157, 40, 0, 0, 0, 31, 173, 21, 14, 145, 0, 0, 0, 112, 234, 148, 139, 79, 0, 0, 16, 162, 32, 139, 135, 0, 0, 0, 41, 127, 0, 54, 145, 0, 0, 0, 3, 143, 168, 146, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 78, 46, 3, 0, 0, 17, 157, 128, 96, 203, 72, 0, 0, 54, 189, 64, 145, 49, 9, 0, 0, 79, 203, 110, 7, 0, 0, 0, 21, 144, 88, 95, 0, 0, 0, 0, 39, 162, 145, 30, 0, 0, 0, 0, 0, 18, 3, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 115, 112, 37, 0, 0, 0, 0, 152, 120, 195, 137, 23, 0, 0, 0, 149, 210, 125, 0, 0, 0, 0, 64, 183, 203, 34, 0, 0, 0, 0, 164, 65, 191, 71, 0, 0, 0, 8, 218, 185, 138, 13, 0, 0, 0, 0, 46, 48, 5, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 142, 62, 0, 0, 0, 0, 1, 109, 65, 135, 0, 0, 0, 0, 0, 100, 103, 168, 0, 0, 0, 0, 2, 123, 162, 9, 0, 0, 0, 0, 73, 163, 96, 0, 0, 0, 0, 0, 27, 110, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 72, 126, 116, 23, 0, 0, 0, 184, 135, 104, 228, 18, 0, 0, 0, 191, 69, 155, 104, 0, 0, 0, 0, 40, 203, 179, 26, 0, 0, 0, 0, 39, 170, 193, 100, 0, 0, 0, 0, 99, 230, 138, 25, 0, 0, 0, 0, 18, 50, 3, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 109, 107, 59, 0, 0, 0, 43, 192, 27, 84, 146, 1, 0, 0, 67, 186, 88, 195, 39, 0, 0, 0, 102, 187, 165, 13, 0, 0, 0, 39, 128, 20, 172, 0, 0, 0, 0, 50, 168, 151, 98, 0, 0, 0, 0, 0, 59, 44, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 59, 37, 0, 0, 0, 0, 71, 137, 73, 156, 35, 0, 0, 0, 130, 28, 102, 133, 7, 0, 0, 0, 64, 201, 76, 0, 0, 0, 0, 0, 80, 143, 81, 0, 0, 0, 0, 0, 21, 105, 137, 12, 0, 0, 0, 0, 0, 9, 86, 4, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 44, 65, 84, 36, 0, 0, 16, 147, 104, 138, 170, 43, 0, 0, 35, 160, 72, 168, 16, 0, 0, 0, 0, 163, 148, 12, 0, 0, 0, 0, 98, 221, 131, 0, 0, 0, 0, 28, 233, 163, 19, 0, 0, 0, 0, 9, 46, 4, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 161, 140, 35, 0, 0, 0, 0, 5, 219, 126, 56, 24, 1, 0, 0, 0, 105, 203, 217, 171, 98, 7, 0, 0, 21, 210, 189, 77, 0, 0, 0, 0, 19, 207, 161, 210, 0, 0, 0, 0, 0, 84, 189, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 159, 115, 86, 2, 0, 0, 0, 157, 66, 176, 74, 2, 0, 0, 0, 162, 182, 105, 2, 0, 0, 0, 34, 153, 168, 1, 0, 0, 0, 21, 144, 84, 178, 8, 0, 0, 0, 75, 179, 168, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 37, 43, 45, 0, 0, 0, 78, 160, 132, 207, 49, 0, 0, 0, 174, 79, 145, 58, 0, 0, 0, 76, 215, 100, 3, 0, 0, 0, 19, 147, 87, 134, 0, 0, 0, 0, 35, 192, 185, 93, 0, 0, 0, 0, 0, 30, 22, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 122, 83, 24, 0, 0, 0, 17, 173, 71, 155, 133, 2, 0, 0, 28, 189, 132, 171, 8, 0, 0, 0, 29, 174, 146, 0, 0, 0, 0, 0, 136, 81, 172, 1, 0, 0, 0, 39, 189, 174, 78, 0, 0, 0, 0, 5, 53, 27, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 88, 7, 0, 0, 0, 0, 59, 158, 166, 41, 0, 0, 0, 0, 124, 118, 164, 15, 0, 0, 0, 0, 21, 137, 201, 41, 0, 0, 0, 0, 0, 84, 184, 106, 0, 0, 0, 0, 0, 65, 179, 22, 0, 0, 0, 0, 0, 6, 25, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 26, 35, 80, 3, 0, 0, 37, 201, 182, 245, 101, 12, 0, 0, 42, 211, 177, 143, 0, 0, 0, 0, 3, 146, 190, 18, 0, 0, 0, 0, 123, 142, 209, 50, 0, 0, 0, 68, 242, 180, 83, 1, 0, 0, 0, 18, 61, 24, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 93, 124, 87, 0, 0, 0, 0, 51, 202, 157, 163, 8, 0, 0, 1, 9, 163, 173, 10, 0, 0, 0, 5, 31, 160, 152, 125, 0, 0, 0, 0, 127, 119, 71, 175, 0, 0, 0, 0, 164, 176, 148, 48, 0, 0, 0, 0, 34, 46, 1, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 108, 126, 41, 0, 0, 0, 100, 155, 57, 137, 95, 0, 0, 0, 151, 93, 129, 149, 2, 0, 0, 0, 29, 201, 142, 1, 0, 0, 0, 0, 67, 147, 156, 86, 0, 0, 0, 0, 138, 162, 160, 90, 0, 0, 0, 0, 25, 63, 25, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 54, 0, 0, 0, 0, 0, 62, 92, 95, 40, 0, 0, 0, 0, 137, 70, 116, 34, 0, 0, 0, 0, 14, 61, 171, 67, 0, 0, 0, 0, 0, 92, 74, 93, 0, 0, 0, 0, 23, 86, 85, 67, 0, 0, 0, 0, 7, 23, 23, 11, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 96, 126, 76, 3, 0, 0, 35, 192, 88, 116, 138, 0, 0, 0, 73, 183, 105, 150, 15, 0, 0, 0, 13, 190, 170, 11, 0, 0, 0, 6, 126, 140, 196, 40, 0, 0, 0, 102, 201, 151, 78, 1, 0, 0, 0, 20, 53, 7, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 107, 27, 0, 0, 0, 0, 30, 160, 63, 117, 0, 0, 0, 0, 15, 134, 75, 116, 0, 0, 0, 0, 0, 89, 170, 10, 0, 0, 0, 0, 9, 158, 148, 0, 0, 0, 0, 0, 22, 188, 59, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 102, 127, 11, 36, 0, 0, 10, 172, 75, 70, 159, 59, 0, 0, 37, 154, 72, 209, 215, 42, 0, 0, 0, 79, 200, 83, 37, 117, 0, 0, 0, 117, 136, 67, 155, 38, 0, 0, 0, 118, 155, 91, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 70, 20, 0, 0, 0, 0, 7, 171, 185, 16, 0, 0, 0, 0, 5, 180, 152, 5, 0, 0, 0, 0, 17, 95, 84, 85, 0, 0, 0, 0, 23, 97, 30, 100, 0, 0, 0, 0, 0, 95, 153, 43, 0, 0, 0, 0, 0, 5, 26, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 75, 0, 0, 0, 0, 35, 187, 170, 224, 115, 0, 0, 0, 96, 222, 127, 209, 33, 0, 0, 0, 57, 232, 203, 27, 0, 0, 0, 0, 139, 200, 213, 26, 0, 0, 0, 0, 55, 194, 215, 31, 0, 0, 0, 0, 0, 34, 52, 4, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 138, 146, 180, 0, 0, 0, 1, 152, 83, 141, 118, 0, 0, 0, 2, 144, 127, 171, 4, 0, 0, 0, 0, 0, 12, 137, 0, 0, 0, 0, 0, 0, 9, 135, 2, 0, 0, 0, 0, 0, 0, 100, 32, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 156, 140, 0, 0, 0, 0, 0, 149, 77, 101, 0, 0, 0, 0, 0, 61, 158, 2, 0, 0, 0, 0, 0, 55, 90, 0, 0, 0, 0, 0, 46, 136, 0, 0, 0, 0, 0, 0, 87, 40, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 41, 0, 0, 0, 0, 0, 56, 73, 104, 0, 0, 0, 0, 17, 104, 67, 123, 0, 0, 0, 0, 60, 138, 147, 11, 0, 0, 0, 0, 5, 90, 54, 0, 0, 0, 0, 0, 20, 105, 0, 0, 0, 0, 0, 0, 27, 47, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 149, 226, 20, 0, 0, 0, 0, 142, 153, 189, 7, 0, 0, 0, 0, 9, 166, 43, 0, 0, 0, 0, 0, 95, 80, 1, 0, 0, 0, 0, 97, 118, 0, 0, 0, 0, 0, 12, 94, 14, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 59, 30, 0, 0, 0, 0, 7, 114, 135, 121, 0, 0, 0, 0, 22, 154, 159, 76, 0, 0, 0, 0, 0, 17, 157, 12, 0, 0, 0, 0, 0, 47, 99, 0, 0, 0, 0, 0, 19, 139, 6, 0, 0, 0, 0, 0, 32, 67, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 147, 154, 182, 0, 0, 0, 0, 147, 73, 150, 141, 0, 0, 0, 0, 135, 140, 146, 63, 0, 0, 0, 0, 0, 1, 149, 11, 0, 0, 0, 0, 2, 97, 65, 0, 0, 0, 0, 0, 12, 125, 5, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 104, 5, 0, 0, 0, 0, 0, 90, 138, 89, 0, 0, 0, 0, 0, 55, 140, 122, 0, 0, 0, 0, 0, 0, 0, 111, 43, 0, 0, 0, 0, 0, 0, 97, 83, 0, 0, 0, 0, 15, 105, 168, 68, 0, 0, 0, 0, 0, 0, 45, 7, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 132, 137, 34, 76, 104, 0, 0, 39, 119, 54, 118, 193, 20, 0, 0, 0, 44, 69, 167, 75, 0, 0, 0, 0, 0, 6, 147, 8, 0, 0, 0, 0, 0, 88, 57, 0, 0, 0, 0, 0, 0, 57, 40, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 93, 144, 162, 0, 0, 0, 0, 92, 96, 98, 136, 0, 0, 0, 0, 60, 128, 185, 48, 0, 0, 0, 0, 0, 26, 115, 0, 0, 0, 0, 0, 28, 138, 6, 0, 0, 0, 0, 0, 68, 74, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 112, 121, 50, 0, 0, 0, 0, 83, 155, 24, 138, 0, 0, 0, 0, 43, 150, 131, 187, 0, 0, 0, 0, 94, 19, 0, 97, 2, 0, 0, 0, 125, 69, 13, 139, 3, 0, 0, 0, 24, 123, 139, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 157, 163, 194, 35, 0, 0, 0, 131, 123, 87, 183, 18, 0, 0, 0, 128, 162, 205, 79, 0, 0, 0, 0, 8, 96, 137, 8, 0, 0, 0, 0, 34, 151, 7, 0, 0, 0, 0, 0, 100, 65, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 35, 0, 0, 0, 0, 0, 68, 161, 156, 131, 0, 0, 0, 0, 161, 51, 179, 148, 0, 0, 0, 0, 178, 151, 95, 129, 0, 0, 0, 0, 29, 22, 59, 146, 0, 0, 0, 0, 0, 0, 16, 151, 0, 0, 0, 0, 0, 0, 0, 62, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 148, 173, 128, 0, 0, 0, 0, 165, 97, 97, 162, 0, 0, 0, 0, 140, 176, 185, 139, 0, 0, 0, 0, 4, 10, 155, 73, 0, 0, 0, 0, 0, 0, 148, 4, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 180, 108, 0, 0, 0, 0, 29, 168, 164, 122, 0, 0, 0, 0, 0, 31, 149, 33, 0, 0, 0, 0, 0, 12, 135, 1, 0, 0, 0, 0, 0, 94, 51, 0, 0, 0, 0, 0, 2, 96, 2, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 115, 111, 96, 0, 0, 0, 0, 74, 116, 128, 88, 0, 0, 0, 0, 15, 81, 145, 6, 0, 0, 0, 0, 0, 56, 71, 0, 0, 0, 0, 0, 25, 107, 0, 0, 0, 0, 0, 0, 51, 25, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 145, 106, 74, 112, 17, 0, 0, 54, 138, 87, 129, 173, 2, 0, 0, 0, 47, 30, 89, 112, 0, 0, 0, 0, 0, 0, 139, 47, 0, 0, 0, 0, 0, 8, 125, 0, 0, 0, 0, 0, 0, 7, 97, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 25, 0, 0, 0, 0, 0, 97, 138, 135, 84, 0, 0, 0, 0, 139, 45, 116, 146, 0, 0, 0, 0, 65, 131, 187, 55, 0, 0, 0, 0, 0, 0, 150, 16, 0, 0, 0, 0, 0, 1, 163, 10, 0, 0, 0, 0, 0, 2, 81, 1, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 122, 150, 170, 13, 0, 0, 0, 123, 131, 43, 161, 24, 0, 0, 0, 70, 145, 169, 124, 0, 0, 0, 0, 0, 17, 161, 25, 0, 0, 0, 0, 40, 158, 18, 0, 0, 0, 0, 0, 91, 85, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 152, 152, 99, 0, 0, 0, 0, 161, 53, 152, 157, 0, 0, 0, 0, 104, 113, 130, 76, 0, 0, 0, 0, 0, 0, 138, 57, 0, 0, 0, 0, 0, 0, 127, 2, 0, 0, 0, 0, 0, 0, 103, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 101, 74, 183, 40, 0, 0, 40, 209, 154, 162, 207, 1, 0, 0, 0, 55, 24, 121, 114, 0, 0, 0, 0, 0, 0, 166, 36, 0, 0, 0, 0, 0, 38, 122, 0, 0, 0, 0, 0, 0, 36, 83, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 153, 185, 72, 0, 0, 0, 0, 117, 147, 205, 51, 0, 0, 0, 0, 24, 73, 146, 30, 0, 0, 0, 0, 0, 0, 143, 29, 0, 0, 0, 0, 0, 0, 146, 16, 0, 0, 0, 0, 0, 0, 114, 58, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 163, 163, 147, 0, 0, 0, 0, 143, 27, 87, 135, 0, 0, 0, 0, 95, 131, 215, 71, 0, 0, 0, 0, 0, 8, 155, 8, 0, 0, 0, 0, 4, 131, 31, 0, 0, 0, 0, 0, 43, 99, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 41, 0, 0, 0, 0, 18, 143, 125, 149, 26, 0, 0, 0, 48, 189, 121, 140, 0, 0, 0, 0, 1, 23, 161, 73, 0, 0, 0, 0, 0, 39, 134, 5, 0, 0, 0, 0, 77, 154, 6, 0, 0, 0, 0, 0, 68, 31, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 118, 191, 78, 0, 0, 0, 1, 170, 22, 170, 73, 0, 0, 0, 0, 49, 116, 193, 53, 0, 0, 0, 0, 0, 0, 149, 39, 0, 0, 0, 0, 0, 0, 145, 35, 0, 0, 0, 0, 0, 0, 98, 29, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 47, 4, 0, 0, 0, 0, 36, 151, 109, 160, 10, 10, 0, 0, 79, 126, 83, 157, 0, 0, 0, 0, 13, 111, 200, 20, 0, 0, 0, 0, 0, 37, 139, 0, 0, 0, 0, 0, 0, 97, 76, 0, 0, 0, 0, 0, 0, 66, 19, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 54, 21, 0, 0, 0, 0, 53, 149, 53, 84, 13, 0, 0, 0, 108, 118, 89, 113, 0, 0, 0, 0, 10, 65, 183, 28, 0, 0, 0, 0, 0, 30, 139, 1, 0, 0, 0, 0, 0, 114, 38, 0, 0, 0, 0, 0, 0, 65, 11, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 59, 60, 0, 0, 0, 0, 0, 121, 38, 97, 16, 0, 0, 0, 5, 130, 0, 109, 93, 0, 0, 0, 0, 105, 151, 164, 136, 0, 0, 0, 0, 1, 43, 52, 133, 0, 0, 0, 0, 0, 0, 0, 126, 2, 0, 0, 0, 0, 0, 0, 27, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 40, 2, 0, 0, 0, 0, 74, 137, 147, 99, 0, 0, 0, 0, 118, 55, 152, 102, 0, 0, 0, 0, 19, 78, 157, 37, 0, 0, 0, 0, 0, 1, 145, 1, 0, 0, 0, 0, 0, 89, 79, 0, 0, 0, 0, 0, 0, 74, 13, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 92, 128, 90, 0, 0, 0, 0, 94, 118, 125, 127, 0, 0, 0, 0, 70, 95, 156, 77, 0, 0, 0, 0, 0, 10, 132, 10, 0, 0, 0, 0, 0, 96, 31, 0, 0, 0, 0, 0, 0, 62, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 105, 109, 120, 50, 0, 0, 0, 47, 120, 8, 23, 30, 0, 0, 0, 0, 45, 99, 86, 112, 0, 0, 0, 0, 0, 0, 0, 120, 0, 0, 0, 0, 0, 0, 13, 102, 0, 0, 0, 0, 0, 0, 10, 90, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 55, 8, 0, 0, 0, 0, 60, 164, 132, 70, 0, 0, 0, 0, 96, 127, 77, 71, 0, 0, 0, 0, 5, 72, 206, 34, 0, 0, 0, 0, 0, 37, 132, 0, 0, 0, 0, 0, 0, 103, 50, 0, 0, 0, 0, 0, 0, 48, 18, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79, 86, 134, 16, 0, 0, 0, 0, 83, 85, 138, 26, 0, 0, 0, 0, 0, 0, 118, 54, 0, 0, 0, 0, 0, 0, 103, 21, 0, 0, 0, 0, 0, 0, 123, 0, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 53, 10, 0, 0, 0, 0, 39, 150, 131, 127, 0, 0, 0, 0, 124, 90, 112, 97, 0, 0, 0, 0, 36, 142, 165, 2, 0, 0, 0, 0, 0, 73, 99, 0, 0, 0, 0, 0, 0, 151, 17, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 53, 0, 0, 0, 0, 2, 100, 104, 159, 0, 0, 0, 0, 72, 147, 87, 171, 0, 0, 0, 0, 40, 124, 213, 47, 0, 0, 0, 0, 0, 62, 128, 2, 0, 0, 0, 0, 38, 172, 6, 0, 0, 0, 0, 0, 42, 66, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 39, 6, 0, 0, 0, 0, 98, 90, 51, 121, 0, 0, 0, 12, 94, 0, 57, 163, 0, 0, 0, 4, 136, 106, 107, 134, 0, 0, 0, 0, 37, 29, 53, 128, 0, 0, 0, 0, 0, 0, 106, 96, 0, 0, 0, 0, 0, 0, 58, 40, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 96, 63, 0, 0, 0, 0, 0, 133, 74, 90, 96, 0, 0, 0, 0, 140, 0, 112, 193, 0, 0, 0, 0, 155, 117, 177, 131, 0, 0, 0, 0, 42, 119, 185, 90, 0, 0, 0, 0, 0, 0, 138, 77, 0, 0, 0, 0, 0, 0, 33, 23, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 47, 1, 0, 0, 0, 0, 72, 108, 31, 51, 0, 0, 0, 0, 148, 10, 31, 117, 0, 0, 0, 0, 97, 152, 193, 72, 0, 0, 0, 0, 0, 0, 118, 63, 0, 0, 0, 0, 0, 0, 115, 86, 0, 0, 0, 0, 0, 0, 53, 42, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 104, 53, 0, 0, 0, 0, 28, 147, 76, 162, 0, 0, 0, 0, 61, 168, 140, 153, 0, 0, 0, 0, 0, 24, 130, 91, 0, 0, 0, 9, 0, 0, 141, 37, 0, 0, 0, 32, 126, 137, 68, 0, 0, 0, 0, 0, 18, 38, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 49, 1, 0, 0, 0, 0, 72, 163, 158, 98, 0, 0, 0, 0, 131, 53, 98, 128, 0, 0, 0, 0, 125, 146, 220, 66, 0, 0, 0, 0, 27, 55, 154, 35, 0, 0, 0, 0, 0, 0, 172, 51, 0, 0, 0, 0, 0, 0, 72, 15, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 44, 8, 0, 0, 0, 0, 25, 163, 151, 114, 0, 0, 0, 0, 98, 127, 37, 153, 0, 0, 0, 0, 35, 156, 198, 93, 0, 0, 0, 0, 0, 21, 171, 6, 0, 0, 0, 0, 0, 0, 158, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 52, 12, 0, 0, 0, 0, 30, 118, 63, 83, 0, 0, 0, 0, 89, 65, 83, 89, 0, 0, 0, 0, 97, 85, 144, 18, 0, 0, 0, 0, 36, 111, 124, 0, 0, 0, 0, 0, 0, 38, 69, 0, 0, 0, 0, 0, 0, 26, 15, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 41, 7, 0, 0, 0, 0, 0, 99, 211, 131, 16, 0, 0, 0, 0, 169, 151, 206, 92, 0, 0, 0, 0, 135, 240, 249, 134, 0, 0, 0, 0, 31, 95, 186, 122, 0, 0, 0, 0, 0, 0, 163, 78, 0, 0, 0, 0, 0, 0, 67, 38, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 16, 0, 0, 0, 0, 34, 137, 104, 142, 0, 0, 0, 0, 156, 66, 70, 184, 0, 0, 0, 0, 111, 134, 197, 109, 0, 0, 0, 0, 0, 23, 163, 18, 0, 0, 0, 0, 23, 165, 24, 0, 0, 0, 0, 0, 30, 68, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 35, 0, 0, 0, 0, 2, 98, 120, 155, 0, 0, 0, 0, 62, 144, 62, 150, 0, 0, 0, 0, 47, 141, 229, 55, 0, 0, 0, 0, 0, 35, 159, 6, 0, 0, 0, 0, 0, 144, 32, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 32, 0, 0, 0, 19, 8, 100, 106, 137, 0, 0, 0, 17, 81, 140, 52, 165, 0, 0, 0, 0, 41, 141, 219, 79, 0, 0, 0, 0, 0, 54, 138, 3, 0, 0, 0, 0, 58, 178, 4, 0, 0, 0, 0, 0, 51, 56, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 36, 0, 0, 0, 0, 25, 127, 58, 147, 0, 0, 0, 0, 99, 154, 91, 158, 0, 0, 0, 0, 23, 80, 183, 91, 0, 0, 0, 0, 0, 38, 163, 12, 0, 0, 0, 0, 32, 173, 21, 0, 0, 0, 0, 0, 42, 80, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 21, 0, 0, 0, 0, 11, 127, 103, 153, 0, 0, 0, 0, 86, 157, 70, 133, 0, 0, 0, 0, 17, 96, 197, 43, 0, 0, 0, 0, 0, 72, 108, 0, 0, 0, 0, 0, 28, 155, 6, 0, 0, 0, 0, 0, 24, 60, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 35, 32, 0, 0, 0, 0, 56, 188, 172, 205, 18, 0, 0, 0, 131, 216, 147, 210, 21, 0, 0, 0, 3, 56, 47, 197, 61, 0, 0, 0, 0, 0, 0, 145, 189, 0, 0, 0, 0, 0, 0, 28, 212, 65, 0, 0, 0, 0, 0, 0, 75, 30, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 44, 22, 0, 0, 0, 0, 0, 130, 107, 160, 54, 0, 0, 0, 0, 139, 8, 186, 91, 0, 0, 0, 0, 72, 131, 192, 69, 0, 0, 0, 0, 0, 0, 151, 69, 0, 0, 0, 0, 0, 0, 144, 86, 0, 0, 0, 0, 0, 0, 58, 45, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 48, 18, 0, 0, 0, 0, 26, 101, 5, 72, 51, 0, 0, 0, 61, 31, 0, 74, 126, 0, 0, 0, 11, 96, 81, 141, 113, 0, 0, 0, 0, 13, 50, 83, 87, 0, 0, 0, 0, 0, 0, 74, 103, 7, 0, 0, 0, 0, 0, 15, 80, 9, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 52, 9, 0, 0, 0, 0, 32, 139, 92, 101, 0, 0, 0, 0, 66, 156, 86, 122, 0, 0, 0, 0, 0, 27, 172, 59, 0, 0, 0, 0, 0, 13, 145, 6, 0, 0, 0, 0, 0, 122, 40, 0, 0, 0, 0, 0, 0, 66, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 178, 157, 48, 0, 0, 0, 0, 121, 91, 33, 123, 0, 0, 0, 0, 126, 143, 161, 85, 0, 0, 0, 0, 53, 84, 75, 69, 0, 0, 0, 0, 0, 0, 94, 111, 0, 0, 0, 0, 0, 0, 71, 59, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 43, 0, 0, 0, 0, 7, 119, 122, 187, 26, 0, 0, 0, 71, 196, 97, 189, 22, 0, 0, 0, 7, 54, 192, 58, 0, 0, 0, 0, 0, 95, 99, 1, 0, 0, 0, 0, 100, 144, 1, 0, 0, 0, 0, 0, 86, 34, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 58, 28, 0, 0, 0, 0, 0, 102, 124, 123, 0, 0, 0, 0, 43, 126, 90, 102, 0, 0, 0, 0, 55, 183, 195, 108, 0, 0, 0, 0, 3, 48, 156, 5, 0, 0, 0, 0, 0, 38, 95, 0, 0, 0, 0, 0, 0, 24, 21, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 97, 131, 185, 3, 0, 0, 8, 84, 159, 74, 181, 13, 0, 0, 1, 20, 91, 158, 31, 0, 0, 0, 0, 34, 143, 27, 0, 0, 0, 0, 15, 118, 23, 0, 0, 0, 0, 0, 59, 18, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 136, 137, 24, 0, 0, 0, 13, 137, 63, 128, 26, 0, 0, 0, 4, 95, 153, 30, 0, 0, 0, 0, 35, 135, 13, 0, 0, 0, 0, 34, 117, 18, 0, 0, 0, 0, 2, 77, 11, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 43, 62, 24, 0, 0, 0, 0, 118, 174, 117, 129, 0, 0, 0, 0, 168, 80, 75, 178, 0, 0, 0, 0, 84, 185, 198, 151, 0, 0, 0, 0, 0, 6, 141, 103, 0, 0, 0, 0, 0, 0, 192, 61, 0, 0, 0, 0, 0, 0, 83, 15, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 13, 114, 165, 141, 28, 0, 0, 9, 115, 166, 78, 193, 42, 0, 0, 0, 65, 119, 200, 82, 0, 0, 0, 0, 4, 97, 98, 2, 0, 0, 0, 0, 127, 96, 0, 0, 0, 0, 0, 10, 96, 2, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 17, 0, 0, 0, 0, 0, 65, 148, 219, 3, 0, 0, 0, 55, 164, 117, 200, 7, 0, 0, 0, 60, 197, 196, 40, 0, 2, 0, 0, 31, 155, 39, 0, 0, 0, 0, 0, 176, 39, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 34, 1, 0, 0, 0, 0, 51, 168, 122, 79, 0, 0, 0, 0, 145, 83, 101, 173, 0, 0, 0, 0, 121, 140, 157, 148, 0, 0, 0, 0, 6, 12, 121, 102, 0, 0, 0, 0, 0, 0, 170, 55, 0, 0, 0, 0, 0, 0, 66, 13, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 54, 7, 0, 0, 0, 0, 48, 134, 103, 111, 0, 0, 0, 0, 115, 55, 133, 103, 0, 0, 0, 0, 53, 118, 157, 53, 0, 0, 0, 0, 0, 0, 131, 19, 0, 0, 0, 0, 0, 0, 159, 18, 0, 0, 0, 0, 0, 0, 59, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 4, 0, 0, 0, 0, 32, 127, 120, 136, 0, 0, 0, 0, 116, 82, 136, 139, 0, 0, 0, 0, 118, 118, 126, 97, 0, 0, 0, 0, 0, 0, 133, 40, 0, 0, 0, 0, 0, 0, 164, 20, 0, 0, 0, 0, 0, 0, 82, 16, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 41, 0, 0, 0, 0, 0, 87, 120, 158, 0, 0, 0, 0, 18, 167, 127, 138, 0, 0, 0, 0, 0, 43, 159, 25, 0, 0, 0, 0, 21, 137, 40, 0, 0, 0, 0, 12, 132, 34, 0, 0, 0, 0, 0, 35, 30, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 41, 0, 0, 0, 0, 0, 64, 155, 172, 7, 0, 0, 0, 26, 174, 36, 149, 19, 0, 0, 0, 43, 169, 229, 114, 0, 0, 0, 0, 0, 89, 125, 8, 0, 0, 0, 0, 101, 128, 0, 0, 0, 0, 0, 0, 58, 13, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 73, 166, 159, 0, 0, 0, 0, 42, 140, 138, 137, 0, 0, 0, 0, 11, 81, 174, 54, 0, 0, 0, 0, 3, 96, 71, 0, 0, 0, 0, 1, 120, 63, 0, 0, 0, 0, 0, 33, 61, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 131, 157, 36, 0, 0, 0, 0, 56, 136, 162, 44, 0, 0, 0, 0, 18, 110, 131, 1, 0, 0, 0, 0, 0, 3, 97, 0, 0, 0, 0, 0, 0, 42, 59, 0, 0, 0, 0, 0, 0, 37, 21, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 49, 0, 0, 0, 0, 0, 66, 101, 99, 50, 0, 0, 0, 33, 121, 22, 139, 54, 0, 0, 0, 27, 124, 155, 27, 0, 0, 0, 0, 12, 116, 27, 0, 0, 0, 0, 1, 112, 27, 0, 0, 0, 0, 0, 3, 53, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 4, 0, 0, 0, 0, 0, 90, 142, 102, 3, 0, 0, 0, 43, 157, 56, 156, 25, 0, 3, 0, 48, 136, 163, 97, 0, 0, 12, 0, 0, 38, 113, 5, 0, 0, 0, 0, 33, 104, 0, 0, 0, 0, 0, 0, 16, 16, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 94, 146, 188, 118, 0, 0, 61, 152, 117, 44, 83, 189, 0, 0, 104, 197, 186, 205, 219, 70, 0, 0, 0, 37, 51, 199, 84, 0, 0, 0, 0, 21, 159, 37, 0, 0, 0, 0, 0, 31, 76, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 52, 3, 0, 0, 0, 0, 52, 132, 116, 68, 0, 0, 0, 26, 147, 35, 110, 24, 0, 0, 0, 61, 175, 188, 43, 0, 0, 0, 0, 35, 143, 47, 0, 0, 0, 0, 28, 127, 17, 0, 0, 0, 0, 0, 38, 18, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 19, 0, 0, 0, 0, 0, 84, 213, 130, 0, 0, 0, 0, 28, 172, 214, 164, 0, 0, 0, 0, 14, 152, 156, 14, 0, 0, 0, 0, 31, 156, 23, 0, 0, 0, 0, 0, 140, 38, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 32, 0, 0, 0, 0, 16, 140, 161, 138, 0, 0, 0, 0, 124, 131, 68, 124, 0, 0, 0, 0, 148, 154, 205, 141, 0, 0, 0, 0, 9, 15, 188, 57, 0, 0, 0, 0, 0, 100, 97, 0, 0, 0, 0, 0, 0, 73, 12, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 138, 174, 143, 53, 0, 0, 23, 155, 56, 107, 196, 114, 0, 10, 145, 20, 75, 110, 147, 24, 0, 52, 189, 132, 105, 5, 146, 0, 0, 1, 19, 5, 0, 26, 125, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 31, 0, 0, 0, 0, 30, 149, 132, 134, 0, 0, 0, 0, 135, 126, 124, 127, 0, 0, 0, 0, 79, 108, 207, 83, 0, 0, 0, 0, 0, 34, 160, 9, 0, 0, 0, 0, 9, 162, 27, 0, 0, 0, 0, 0, 11, 73, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 58, 2, 0, 0, 0, 26, 130, 117, 110, 23, 0, 0, 0, 135, 102, 59, 146, 0, 0, 0, 0, 79, 134, 214, 115, 0, 0, 0, 0, 0, 10, 180, 25, 0, 0, 0, 0, 0, 119, 79, 0, 0, 0, 0, 0, 0, 76, 10, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 33, 0, 0, 0, 0, 8, 125, 113, 95, 0, 0, 0, 0, 93, 153, 14, 140, 12, 0, 0, 0, 139, 135, 198, 158, 0, 0, 0, 0, 12, 26, 187, 51, 0, 0, 0, 0, 0, 113, 81, 0, 0, 0, 0, 0, 0, 83, 10, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 108, 136, 77, 0, 0, 0, 0, 92, 47, 212, 60, 0, 0, 0, 0, 67, 125, 157, 7, 0, 0, 0, 0, 7, 46, 108, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 63, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 54, 0, 0, 0, 0, 35, 159, 125, 107, 35, 0, 0, 0, 167, 128, 64, 169, 4, 0, 0, 0, 137, 149, 236, 120, 0, 0, 0, 0, 0, 77, 166, 16, 0, 0, 0, 0, 61, 200, 16, 0, 0, 0, 0, 0, 46, 73, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 54, 49, 0, 0, 0, 0, 64, 192, 150, 178, 33, 0, 0, 13, 206, 115, 61, 190, 0, 0, 0, 36, 181, 154, 235, 173, 0, 0, 0, 0, 21, 27, 218, 92, 0, 0, 0, 0, 0, 101, 179, 3, 0, 0, 0, 0, 0, 74, 59, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 168, 190, 197, 86, 0, 0, 0, 166, 103, 46, 146, 162, 0, 0, 0, 67, 150, 126, 113, 162, 0, 0, 0, 0, 0, 0, 19, 170, 0, 0, 0, 0, 0, 0, 0, 168, 21, 0, 0, 0, 0, 0, 0, 103, 12, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 47, 43, 22, 0, 0, 0, 134, 186, 109, 228, 73, 0, 0, 41, 191, 48, 136, 245, 40, 0, 0, 55, 223, 233, 248, 160, 0, 0, 0, 0, 65, 180, 163, 20, 0, 0, 0, 0, 22, 201, 96, 0, 0, 0, 0, 0, 36, 121, 30, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 58, 41, 0, 0, 0, 0, 39, 128, 27, 88, 0, 0, 0, 0, 108, 38, 0, 27, 0, 0, 0, 0, 122, 50, 111, 90, 0, 0, 0, 0, 60, 110, 150, 17, 0, 0, 0, 0, 0, 8, 90, 0, 0, 0, 0, 0, 0, 4, 42, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 96, 45, 0, 0, 0, 0, 0, 105, 59, 151, 0, 0, 0, 0, 13, 146, 43, 132, 0, 0, 0, 0, 106, 103, 186, 86, 0, 0, 0, 0, 130, 167, 183, 62, 0, 0, 0, 0, 15, 26, 107, 72, 0, 0, 0, 0, 0, 0, 18, 19, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 34, 0, 0, 0, 0, 39, 159, 123, 162, 0, 0, 0, 0, 153, 103, 29, 140, 35, 0, 0, 0, 95, 116, 180, 172, 0, 0, 0, 0, 0, 13, 195, 64, 0, 0, 0, 0, 7, 157, 102, 0, 0, 0, 0, 0, 13, 98, 14, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 63, 48, 0, 0, 0, 0, 32, 153, 99, 208, 0, 0, 0, 0, 116, 112, 130, 168, 0, 0, 0, 0, 132, 176, 232, 83, 0, 0, 0, 0, 39, 96, 201, 48, 0, 0, 0, 0, 0, 5, 188, 14, 0, 0, 0, 0, 0, 7, 75, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 46, 3, 0, 0, 0, 0, 74, 174, 132, 130, 0, 0, 0, 0, 176, 101, 103, 178, 0, 0, 0, 0, 118, 219, 251, 110, 0, 0, 0, 0, 10, 56, 223, 52, 0, 0, 0, 0, 0, 35, 221, 31, 0, 0, 0, 0, 0, 7, 78, 7, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 138, 144, 71, 0, 0, 0, 0, 134, 94, 117, 169, 0, 0, 0, 0, 102, 132, 172, 77, 0, 0, 0, 0, 0, 0, 110, 39, 0, 0, 0, 0, 0, 0, 120, 45, 0, 0, 0, 0, 0, 0, 96, 56, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 7, 0, 0, 0, 0, 2, 104, 126, 22, 0, 0, 0, 0, 14, 107, 86, 15, 0, 0, 0, 0, 0, 45, 137, 5, 0, 0, 0, 0, 0, 34, 96, 0, 0, 0, 0, 0, 6, 134, 4, 0, 0, 0, 0, 0, 10, 61, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 26, 29, 3, 0, 0, 0, 26, 214, 179, 164, 164, 5, 0, 0, 109, 138, 11, 3, 94, 22, 0, 0, 78, 178, 117, 133, 153, 22, 0, 0, 2, 83, 143, 110, 166, 68, 0, 0, 0, 0, 0, 0, 37, 162, 16, 0, 0, 0, 0, 0, 0, 67, 10 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 48, 0, 0, 0, 0, 0, 73, 141, 121, 8, 0, 0, 0, 75, 147, 66, 70, 0, 0, 0, 0, 115, 147, 216, 49, 0, 0, 0, 0, 1, 59, 128, 0, 0, 0, 0, 0, 23, 174, 16, 0, 0, 0, 0, 0, 28, 82, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 38, 7, 0, 0, 0, 0, 15, 116, 120, 52, 0, 0, 0, 0, 7, 87, 142, 8, 0, 0, 0, 0, 0, 1, 107, 0, 0, 0, 0, 0, 0, 40, 73, 0, 0, 0, 0, 0, 5, 101, 1, 0, 0, 0, 0, 0, 18, 48, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 45, 0, 0, 0, 0, 95, 168, 149, 204, 76, 0, 0, 34, 152, 35, 88, 207, 53, 0, 0, 82, 185, 149, 230, 103, 0, 0, 0, 6, 39, 47, 177, 15, 0, 0, 0, 0, 14, 177, 38, 0, 0, 0, 0, 0, 27, 105, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 50, 10, 0, 0, 0, 0, 6, 85, 99, 55, 0, 0, 0, 0, 62, 86, 119, 19, 0, 0, 0, 0, 21, 90, 111, 1, 0, 0, 0, 0, 0, 0, 90, 0, 0, 0, 0, 0, 0, 18, 68, 0, 0, 0, 0, 0, 0, 17, 19, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 114, 102, 1, 0, 0, 0, 69, 165, 16, 100, 28, 0, 0, 0, 157, 51, 0, 119, 39, 0, 0, 47, 105, 0, 5, 158, 6, 0, 0, 68, 89, 3, 117, 150, 0, 0, 0, 3, 95, 99, 132, 45, 0, 0, 0, 0, 0, 0, 20, 3, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 48, 2, 0, 0, 0, 57, 143, 89, 120, 83, 0, 0, 7, 134, 30, 26, 157, 38, 0, 0, 98, 94, 97, 191, 89, 0, 0, 0, 44, 120, 65, 144, 14, 0, 0, 0, 0, 0, 117, 42, 0, 0, 0, 0, 0, 9, 90, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 45, 16, 0, 0, 0, 0, 105, 222, 81, 130, 38, 0, 0, 0, 183, 111, 12, 148, 65, 0, 0, 0, 107, 139, 191, 227, 8, 0, 0, 0, 0, 25, 198, 104, 0, 0, 0, 0, 31, 190, 56, 0, 0, 0, 0, 0, 29, 82, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 134, 113, 32, 0, 0, 0, 0, 162, 38, 191, 90, 0, 0, 0, 10, 169, 121, 112, 117, 0, 0, 0, 0, 15, 2, 69, 128, 0, 0, 0, 0, 0, 0, 59, 129, 0, 0, 0, 0, 0, 0, 39, 83, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 38, 2, 0, 0, 0, 0, 71, 143, 117, 126, 0, 0, 0, 0, 159, 54, 39, 136, 0, 0, 0, 0, 168, 85, 180, 137, 0, 0, 0, 0, 61, 126, 148, 135, 0, 0, 0, 0, 0, 0, 71, 157, 0, 0, 0, 0, 0, 0, 22, 63, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 72, 70, 2, 0, 0, 0, 0, 119, 139, 231, 83, 0, 0, 0, 0, 157, 99, 228, 60, 0, 0, 0, 0, 56, 71, 142, 107, 0, 0, 0, 0, 62, 141, 82, 160, 0, 0, 0, 0, 0, 10, 140, 218, 27, 0, 0, 0, 0, 0, 0, 31, 6, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 48, 4, 0, 0, 0, 0, 10, 145, 132, 116, 0, 0, 0, 0, 43, 136, 170, 118, 0, 0, 0, 0, 23, 131, 177, 14, 0, 0, 0, 0, 0, 2, 146, 0, 0, 0, 0, 0, 0, 18, 136, 0, 0, 0, 0, 0, 0, 9, 62, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 59, 6, 0, 0, 0, 5, 102, 134, 144, 156, 0, 0, 0, 121, 132, 112, 198, 69, 0, 0, 27, 214, 160, 177, 123, 0, 0, 0, 5, 53, 25, 170, 23, 0, 0, 0, 0, 21, 159, 41, 0, 0, 0, 0, 0, 52, 90, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 1, 75, 132, 77, 0, 0, 0, 0, 48, 98, 129, 55, 0, 0, 0, 0, 27, 126, 175, 10, 0, 0, 0, 0, 0, 59, 70, 0, 0, 0, 0, 0, 21, 109, 0, 0, 0, 0, 0, 0, 34, 45, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 165, 162, 53, 0, 0, 0, 65, 171, 60, 189, 60, 0, 0, 0, 32, 142, 234, 91, 0, 0, 0, 0, 28, 157, 103, 25, 0, 0, 0, 0, 131, 49, 0, 0, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 27, 38, 0, 0, 0, 0, 0, 133, 120, 131, 100, 0, 0, 0, 12, 138, 1, 32, 182, 0, 0, 0, 0, 138, 136, 126, 186, 0, 0, 0, 0, 6, 28, 79, 128, 0, 0, 0, 0, 0, 0, 152, 47, 0, 0, 0, 0, 0, 0, 63, 3, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 124, 114, 136, 6, 0, 0, 0, 124, 38, 107, 77, 4, 0, 0, 0, 71, 146, 151, 3, 0, 0, 0, 0, 0, 2, 116, 0, 0, 0, 0, 0, 0, 0, 104, 1, 0, 0, 0, 0, 0, 0, 77, 9, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 12, 15, 6, 0, 0, 0, 61, 143, 104, 144, 10, 0, 0, 0, 136, 67, 89, 129, 0, 0, 0, 0, 31, 167, 215, 43, 0, 0, 0, 0, 0, 99, 108, 0, 0, 0, 0, 0, 38, 156, 2, 0, 0, 0, 0, 0, 47, 63, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 25, 0, 0, 0, 0, 0, 54, 140, 129, 0, 0, 0, 0, 34, 144, 94, 193, 0, 0, 0, 0, 66, 172, 164, 16, 0, 0, 0, 0, 5, 130, 32, 0, 0, 0, 0, 0, 136, 89, 0, 0, 0, 0, 0, 0, 79, 3, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 61, 58, 20, 0, 0, 0, 68, 110, 44, 151, 123, 0, 0, 21, 114, 14, 0, 133, 59, 0, 0, 116, 108, 100, 175, 172, 0, 0, 0, 37, 141, 120, 181, 68, 0, 0, 0, 0, 0, 83, 78, 0, 0, 0, 0, 0, 2, 75, 2, 0, 4, 4 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 39, 24, 0, 0, 0, 0, 121, 162, 127, 205, 4, 0, 0, 2, 187, 49, 113, 208, 6, 0, 0, 1, 133, 188, 251, 109, 0, 0, 0, 0, 0, 65, 174, 20, 0, 0, 0, 0, 20, 172, 16, 0, 0, 0, 0, 0, 41, 74, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 48, 4, 0, 0, 0, 0, 121, 146, 133, 125, 0, 0, 0, 0, 167, 72, 53, 167, 0, 0, 0, 0, 25, 88, 196, 107, 0, 0, 0, 0, 0, 0, 180, 40, 0, 0, 0, 0, 0, 0, 200, 21, 0, 0, 0, 0, 0, 0, 86, 8, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 51, 0, 0, 0, 0, 0, 4, 199, 151, 103, 199, 0, 0, 0, 28, 187, 12, 159, 195, 0, 0, 0, 12, 207, 199, 255, 91, 0, 0, 0, 0, 47, 79, 227, 95, 0, 0, 0, 0, 0, 0, 175, 99, 0, 0, 0, 0, 0, 0, 59, 55, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 127, 214, 123, 0, 0, 0, 0, 173, 215, 188, 173, 0, 0, 0, 0, 100, 96, 140, 117, 0, 0, 0, 0, 0, 9, 185, 39, 0, 0, 0, 0, 0, 103, 111, 0, 0, 0, 0, 0, 0, 86, 40, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 135, 211, 49, 0, 0, 0, 0, 83, 169, 141, 51, 0, 0, 0, 0, 0, 2, 113, 6, 0, 0, 0, 0, 0, 27, 98, 0, 0, 0, 0, 0, 0, 94, 30, 0, 0, 0, 0, 0, 0, 83, 29, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 12, 0, 0, 0, 0, 76, 148, 82, 145, 20, 0, 0, 9, 155, 31, 77, 128, 26, 0, 0, 12, 131, 119, 168, 21, 0, 0, 0, 0, 0, 0, 126, 0, 0, 0, 0, 0, 0, 0, 132, 41, 0, 0, 0, 0, 0, 0, 55, 63, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 56, 34, 0, 0, 0, 0, 91, 132, 55, 147, 29, 0, 0, 8, 131, 7, 11, 174, 29, 0, 0, 20, 164, 151, 204, 129, 0, 0, 0, 0, 5, 21, 139, 28, 0, 0, 0, 0, 6, 125, 30, 0, 0, 0, 0, 0, 16, 81, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 126, 128, 148, 6, 0, 0, 0, 99, 96, 77, 195, 12, 0, 0, 0, 105, 145, 204, 104, 0, 0, 0, 0, 3, 21, 126, 8, 0, 0, 0, 0, 11, 142, 23, 0, 0, 0, 0, 0, 67, 101, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 50, 30, 0, 0, 0, 0, 21, 125, 62, 131, 25, 0, 0, 0, 100, 71, 102, 207, 14, 0, 0, 0, 77, 142, 215, 105, 0, 0, 0, 0, 0, 38, 133, 8, 0, 0, 0, 0, 44, 137, 4, 0, 0, 0, 0, 0, 66, 41, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 17, 0, 0, 0, 18, 11, 107, 66, 103, 0, 0, 0, 14, 71, 106, 94, 165, 0, 0, 0, 0, 29, 121, 190, 121, 0, 0, 0, 0, 0, 10, 143, 24, 0, 0, 0, 0, 8, 130, 25, 0, 0, 0, 0, 0, 23, 71, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 148, 128, 68, 0, 0, 0, 0, 102, 64, 108, 163, 0, 0, 0, 0, 34, 128, 227, 67, 0, 0, 0, 0, 0, 58, 109, 2, 0, 0, 0, 0, 62, 111, 0, 0, 0, 0, 0, 0, 83, 17, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 114, 33, 0, 0, 0, 0, 100, 141, 44, 100, 0, 0, 0, 0, 132, 12, 55, 147, 0, 0, 0, 0, 116, 165, 248, 178, 0, 0, 0, 0, 8, 45, 225, 70, 0, 0, 0, 0, 4, 132, 67, 0, 0, 0, 0, 0, 4, 48, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 63, 25, 0, 0, 0, 0, 35, 179, 87, 156, 75, 0, 0, 0, 46, 98, 0, 81, 143, 0, 0, 0, 3, 143, 164, 207, 199, 2, 0, 0, 0, 11, 59, 48, 145, 40, 0, 0, 0, 0, 0, 0, 65, 84, 0, 0, 0, 0, 0, 0, 6, 52, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 47, 2, 0, 0, 0, 0, 105, 239, 244, 115, 0, 0, 0, 5, 220, 177, 203, 224, 0, 0, 0, 2, 183, 245, 252, 187, 0, 0, 0, 0, 34, 177, 243, 96, 0, 0, 0, 0, 19, 200, 122, 0, 0, 0, 0, 0, 0, 72, 36, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 58, 40, 0, 0, 0, 0, 8, 156, 183, 197, 35, 0, 0, 0, 60, 227, 156, 104, 29, 0, 0, 0, 9, 159, 244, 70, 0, 0, 0, 0, 0, 141, 173, 10, 0, 0, 0, 0, 63, 236, 32, 0, 0, 0, 0, 0, 23, 92, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 44, 26, 0, 0, 0, 0, 38, 174, 115, 154, 0, 0, 0, 0, 38, 176, 90, 139, 0, 0, 0, 0, 0, 21, 192, 58, 0, 0, 0, 0, 0, 35, 142, 3, 0, 0, 0, 0, 11, 158, 24, 0, 0, 0, 0, 0, 12, 76, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 47, 3, 0, 0, 0, 0, 26, 128, 78, 87, 0, 0, 0, 0, 68, 82, 29, 96, 0, 0, 0, 0, 31, 99, 165, 56, 0, 0, 0, 0, 0, 14, 122, 8, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 20, 31, 0, 0, 0, 0, 83, 159, 103, 115, 16, 0, 0, 23, 167, 31, 0, 11, 131, 0, 0, 23, 151, 119, 135, 195, 8, 0, 0, 0, 16, 39, 155, 87, 0, 0, 0, 0, 0, 47, 103, 0, 0, 0, 0, 0, 0, 43, 27, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 32, 0, 0, 0, 0, 32, 149, 111, 137, 81, 0, 0, 0, 163, 164, 95, 144, 66, 0, 0, 0, 41, 60, 177, 122, 0, 0, 0, 0, 1, 79, 125, 9, 0, 0, 0, 38, 147, 113, 1, 0, 0, 0, 0, 58, 37, 1, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 83, 59, 1, 0, 0, 0, 0, 88, 192, 224, 39, 0, 0, 0, 0, 52, 191, 207, 32, 0, 0, 0, 0, 0, 0, 145, 61, 0, 0, 0, 0, 13, 107, 128, 94, 0, 0, 0, 0, 0, 66, 216, 81, 0, 0, 0, 0, 0, 0, 41, 8, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 125, 76, 0, 0, 0, 0, 28, 100, 93, 70, 0, 0, 0, 0, 5, 66, 118, 0, 0, 0, 0, 0, 0, 43, 46, 0, 0, 0, 0, 0, 0, 94, 0, 0, 0, 0, 0, 0, 4, 68, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 149, 129, 53, 0, 0, 0, 0, 125, 62, 139, 123, 0, 0, 0, 0, 92, 128, 160, 39, 0, 0, 0, 0, 0, 0, 119, 1, 0, 0, 0, 0, 0, 0, 135, 0, 0, 0, 0, 0, 0, 0, 97, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 51, 31, 0, 0, 0, 0, 137, 214, 169, 241, 6, 0, 0, 22, 248, 116, 136, 249, 6, 0, 0, 6, 112, 211, 254, 141, 0, 0, 0, 0, 0, 124, 248, 78, 0, 0, 0, 0, 2, 181, 147, 0, 0, 0, 0, 0, 0, 65, 47, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 34, 21, 0, 0, 0, 0, 23, 161, 144, 180, 0, 0, 0, 0, 110, 191, 143, 156, 0, 0, 0, 0, 43, 101, 204, 47, 0, 0, 0, 0, 0, 75, 129, 1, 0, 0, 0, 0, 9, 160, 30, 0, 0, 0, 0, 0, 13, 62, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 49, 21, 0, 0, 0, 0, 71, 195, 213, 175, 0, 0, 0, 0, 208, 130, 115, 198, 0, 0, 0, 0, 211, 218, 240, 183, 0, 0, 0, 0, 51, 121, 245, 86, 0, 0, 0, 0, 0, 103, 166, 2, 0, 0, 0, 0, 0, 41, 58, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 53, 24, 0, 0, 0, 0, 25, 162, 193, 148, 0, 0, 0, 0, 103, 225, 133, 210, 0, 0, 0, 0, 17, 129, 251, 124, 0, 0, 0, 0, 0, 74, 190, 24, 0, 0, 0, 0, 10, 197, 52, 0, 0, 0, 0, 0, 5, 86, 2, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 44, 0, 0, 0, 0, 6, 64, 126, 178, 1, 0, 0, 0, 99, 86, 169, 153, 0, 0, 0, 3, 114, 93, 145, 10, 0, 0, 0, 0, 0, 71, 59, 0, 0, 0, 0, 0, 14, 125, 0, 0, 0, 0, 0, 0, 11, 61, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 97, 89, 0, 0, 0, 0, 140, 210, 152, 211, 0, 0, 0, 6, 222, 91, 154, 215, 0, 0, 0, 0, 155, 220, 252, 155, 0, 0, 0, 0, 7, 113, 227, 57, 0, 0, 0, 0, 29, 211, 91, 0, 0, 0, 0, 0, 0, 41, 7, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 146, 163, 34, 0, 0, 0, 3, 160, 19, 228, 108, 0, 0, 0, 4, 175, 155, 205, 148, 0, 0, 0, 0, 1, 7, 25, 190, 0, 0, 0, 6, 122, 60, 28, 188, 0, 0, 0, 0, 69, 145, 173, 129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 52, 32, 0, 0, 0, 0, 21, 154, 187, 202, 0, 0, 0, 0, 99, 203, 116, 201, 0, 0, 0, 0, 65, 177, 220, 115, 0, 0, 0, 0, 0, 33, 178, 16, 0, 0, 0, 0, 1, 149, 59, 0, 0, 0, 0, 0, 1, 77, 3, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 91, 62, 0, 0, 0, 0, 28, 138, 54, 34, 0, 0, 0, 0, 129, 66, 4, 103, 2, 0, 0, 19, 109, 41, 131, 148, 0, 0, 0, 5, 120, 106, 114, 81, 0, 0, 0, 0, 0, 0, 130, 19, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 105, 122, 39, 0, 0, 0, 0, 177, 123, 208, 135, 0, 0, 0, 9, 241, 67, 203, 142, 0, 0, 0, 0, 121, 196, 221, 225, 0, 0, 0, 4, 21, 16, 111, 208, 0, 0, 0, 8, 187, 182, 222, 100, 0, 0, 0, 0, 28, 63, 46, 3, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 50, 55, 9, 0, 0, 0, 0, 147, 161, 209, 80, 0, 0, 0, 0, 183, 97, 201, 85, 0, 0, 0, 0, 45, 128, 164, 168, 0, 0, 0, 0, 0, 0, 90, 189, 0, 0, 0, 0, 0, 20, 183, 146, 0, 0, 0, 0, 0, 21, 95, 27, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 47, 10, 0, 0, 0, 0, 53, 219, 222, 168, 0, 0, 0, 0, 111, 220, 167, 201, 0, 0, 0, 0, 54, 199, 252, 112, 0, 0, 0, 0, 0, 59, 220, 37, 0, 0, 0, 0, 2, 162, 96, 0, 0, 0, 0, 0, 2, 90, 15, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 32, 20, 0, 0, 0, 0, 34, 142, 122, 92, 0, 0, 0, 0, 120, 56, 135, 51, 0, 0, 0, 0, 114, 121, 165, 2, 0, 0, 0, 0, 1, 2, 141, 0, 0, 0, 0, 0, 0, 0, 137, 0, 0, 0, 0, 0, 0, 0, 70, 2, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 36, 6, 0, 0, 0, 0, 101, 222, 221, 145, 0, 0, 0, 0, 223, 198, 142, 199, 0, 0, 0, 0, 84, 170, 240, 175, 0, 0, 0, 0, 0, 5, 222, 107, 0, 0, 0, 0, 0, 40, 231, 46, 0, 0, 0, 0, 0, 11, 81, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 28, 37, 1, 0, 0, 0, 0, 194, 242, 241, 115, 0, 0, 0, 11, 235, 112, 213, 197, 1, 0, 0, 6, 220, 245, 252, 237, 10, 0, 0, 0, 67, 148, 252, 173, 0, 0, 0, 0, 0, 42, 237, 63, 0, 0, 0, 0, 0, 7, 91, 9, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 103, 51, 0, 0, 0, 0, 14, 132, 28, 54, 0, 0, 0, 0, 102, 90, 36, 143, 0, 0, 0, 0, 123, 129, 194, 35, 0, 0, 0, 0, 39, 108, 114, 0, 0, 0, 0, 0, 0, 119, 33, 0, 0, 0, 0, 0, 0, 21, 9, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 70, 139, 127, 32, 0, 0, 0, 33, 155, 125, 137, 0, 0, 0, 0, 1, 69, 182, 25, 0, 0, 0, 0, 1, 98, 50, 0, 0, 0, 0, 0, 71, 101, 0, 0, 0, 0, 0, 0, 71, 16, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 137, 141, 13, 0, 0, 0, 0, 97, 86, 197, 83, 0, 0, 0, 0, 20, 101, 164, 58, 0, 0, 0, 0, 0, 0, 116, 15, 0, 0, 0, 0, 0, 0, 118, 0, 0, 0, 0, 0, 0, 0, 87, 4, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 117, 148, 150, 0, 0, 0, 0, 52, 164, 174, 105, 0, 0, 0, 0, 0, 21, 148, 18, 0, 0, 0, 0, 0, 114, 46, 0, 0, 0, 0, 0, 72, 110, 0, 0, 0, 0, 0, 0, 89, 18, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 123, 167, 6, 0, 0, 0, 10, 147, 122, 146, 0, 0, 0, 0, 2, 96, 141, 17, 0, 0, 0, 0, 42, 138, 12, 0, 0, 0, 0, 0, 121, 17, 0, 0, 0, 0, 0, 8, 58, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 105, 135, 166, 35, 0, 0, 0, 72, 160, 54, 182, 28, 0, 0, 0, 39, 161, 200, 47, 0, 0, 0, 0, 1, 126, 53, 0, 0, 0, 0, 0, 127, 88, 0, 0, 0, 0, 0, 0, 104, 5, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 8, 0, 0, 0, 0, 63, 155, 107, 123, 4, 0, 0, 11, 155, 47, 39, 195, 8, 0, 0, 35, 143, 135, 119, 151, 0, 0, 0, 0, 0, 0, 67, 139, 0, 0, 0, 0, 0, 0, 95, 107, 0, 0, 0, 0, 0, 0, 39, 55, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 54, 8, 0, 0, 0, 31, 133, 96, 127, 49, 0, 0, 0, 99, 134, 129, 158, 7, 0, 0, 0, 15, 86, 169, 15, 0, 0, 0, 0, 8, 126, 43, 0, 0, 0, 0, 10, 142, 65, 0, 0, 0, 0, 0, 24, 54, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 92, 78, 90, 0, 0, 0, 0, 35, 138, 77, 82, 0, 0, 0, 0, 0, 0, 105, 22, 0, 0, 0, 0, 0, 0, 102, 0, 0, 0, 0, 0, 0, 41, 68, 0, 0, 0, 0, 0, 0, 71, 8, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 34, 0, 0, 0, 0, 22, 135, 94, 112, 3, 0, 0, 0, 114, 113, 71, 154, 5, 0, 0, 0, 55, 188, 202, 48, 0, 0, 0, 0, 0, 104, 65, 0, 0, 0, 0, 0, 83, 117, 0, 0, 0, 0, 0, 0, 68, 17, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 148, 145, 13, 1, 0, 0, 0, 97, 73, 42, 181, 71, 0, 0, 0, 51, 165, 160, 94, 169, 10, 0, 0, 0, 43, 45, 0, 99, 146, 20, 0, 0, 0, 0, 0, 0, 42, 11, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 59, 108, 157, 0, 0, 18, 99, 102, 102, 67, 96, 35, 0, 19, 100, 62, 80, 73, 29, 90, 0, 0, 0, 10, 24, 0, 0, 98, 0, 0, 0, 0, 0, 0, 0, 66, 0, 0, 0, 0, 0, 0, 0, 4, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 35, 0, 0, 0, 0, 0, 19, 149, 104, 18, 0, 0, 0, 0, 122, 159, 187, 62, 0, 0, 0, 0, 23, 85, 148, 66, 0, 0, 0, 0, 0, 0, 116, 66, 0, 0, 0, 0, 0, 0, 117, 143, 0, 0, 0, 0, 0, 0, 43, 80, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 115, 130, 156, 15, 0, 0, 0, 88, 143, 86, 152, 6, 0, 0, 0, 6, 50, 157, 46, 0, 0, 0, 0, 0, 39, 102, 0, 0, 0, 0, 0, 28, 145, 3, 0, 0, 0, 0, 0, 76, 64, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 52, 9, 0, 0, 0, 0, 3, 169, 164, 151, 49, 0, 0, 0, 26, 131, 1, 108, 211, 7, 0, 0, 5, 168, 164, 213, 145, 0, 0, 0, 0, 20, 72, 154, 108, 0, 0, 0, 0, 0, 0, 132, 129, 0, 0, 0, 0, 0, 0, 70, 49, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 47, 4, 0, 0, 0, 15, 127, 127, 147, 32, 0, 0, 0, 91, 179, 103, 203, 12, 0, 0, 0, 31, 163, 211, 59, 0, 0, 0, 0, 23, 159, 47, 0, 0, 0, 0, 4, 163, 59, 0, 0, 0, 0, 0, 8, 71, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 63, 36, 0, 0, 0, 9, 148, 176, 91, 156, 84, 0, 0, 77, 146, 14, 43, 181, 66, 0, 0, 78, 197, 171, 223, 136, 0, 0, 0, 1, 55, 49, 191, 45, 0, 0, 0, 0, 0, 51, 201, 39, 0, 0, 0, 0, 0, 14, 93, 12, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 88, 136, 145, 0, 0, 0, 0, 42, 176, 134, 118, 0, 0, 0, 0, 0, 27, 153, 10, 0, 0, 0, 0, 0, 86, 63, 0, 0, 0, 0, 0, 55, 129, 0, 0, 0, 0, 0, 0, 89, 32, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 38, 0, 0, 0, 0, 35, 146, 120, 162, 34, 0, 0, 0, 133, 117, 83, 191, 42, 0, 0, 0, 42, 96, 147, 153, 0, 0, 0, 0, 1, 68, 154, 31, 0, 0, 0, 0, 130, 132, 2, 0, 0, 0, 0, 0, 76, 8, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 50, 0, 0, 0, 0, 11, 103, 145, 163, 44, 0, 0, 0, 92, 222, 151, 208, 59, 0, 0, 0, 15, 78, 184, 62, 0, 0, 0, 0, 18, 145, 74, 0, 0, 0, 0, 0, 174, 113, 0, 0, 0, 0, 0, 0, 66, 6, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 1, 0, 0, 0, 0, 9, 137, 69, 5, 0, 0, 0, 0, 23, 155, 109, 90, 0, 0, 0, 0, 0, 10, 145, 64, 0, 0, 0, 0, 0, 59, 90, 0, 0, 0, 0, 0, 0, 81, 46, 0, 0, 0, 0, 0, 0, 24, 56, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 63, 22, 0, 0, 0, 0, 57, 119, 46, 130, 119, 0, 0, 0, 125, 26, 0, 83, 222, 0, 0, 0, 33, 158, 123, 146, 233, 2, 0, 0, 0, 14, 48, 86, 164, 0, 0, 0, 0, 0, 0, 0, 135, 22, 0, 0, 0, 0, 0, 0, 47, 41, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 2, 0, 0, 0, 0, 30, 208, 221, 78, 98, 0, 0, 0, 81, 117, 40, 25, 195, 51, 0, 0, 55, 204, 173, 132, 239, 37, 0, 0, 5, 78, 82, 152, 197, 0, 0, 0, 0, 0, 0, 94, 155, 0, 0, 0, 0, 0, 0, 47, 77, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 54, 8, 0, 0, 0, 0, 95, 108, 99, 60, 0, 0, 0, 0, 116, 3, 129, 116, 0, 0, 0, 3, 49, 113, 163, 1, 0, 0, 0, 0, 0, 10, 108, 46, 0, 0, 0, 0, 0, 86, 30, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 28, 0, 0, 0, 0, 0, 140, 93, 101, 130, 0, 0, 0, 0, 137, 2, 114, 150, 0, 0, 0, 0, 106, 104, 155, 133, 0, 0, 0, 0, 0, 0, 102, 111, 0, 0, 0, 0, 0, 0, 102, 125, 0, 0, 0, 0, 0, 0, 36, 80, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 25, 0, 0, 0, 0, 30, 131, 107, 108, 0, 0, 0, 0, 108, 52, 118, 98, 0, 0, 0, 0, 101, 120, 193, 23, 0, 0, 0, 0, 3, 32, 113, 0, 0, 0, 0, 0, 0, 108, 16, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 28, 0, 0, 0, 0, 32, 138, 91, 81, 0, 0, 0, 0, 131, 84, 112, 78, 0, 0, 0, 0, 49, 124, 190, 33, 0, 0, 0, 0, 0, 30, 114, 0, 0, 0, 0, 0, 0, 121, 8, 0, 0, 0, 0, 0, 0, 55, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 86, 77, 25, 0, 0, 0, 31, 190, 125, 221, 213, 21, 0, 0, 105, 214, 186, 113, 139, 65, 0, 0, 6, 5, 0, 7, 157, 53, 0, 0, 13, 36, 1, 115, 184, 7, 0, 0, 7, 168, 195, 145, 25, 0, 0, 0, 0, 18, 47, 4, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 58, 0, 0, 0, 0, 29, 153, 135, 164, 37, 0, 0, 0, 143, 112, 2, 159, 47, 0, 0, 0, 137, 10, 155, 182, 2, 0, 0, 0, 143, 165, 223, 57, 0, 0, 0, 0, 0, 55, 114, 0, 0, 0, 0, 0, 0, 35, 32, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 57, 17, 0, 0, 0, 0, 63, 195, 213, 164, 0, 0, 0, 0, 174, 83, 144, 151, 0, 0, 0, 0, 200, 144, 243, 143, 0, 0, 0, 0, 76, 126, 174, 145, 0, 0, 0, 0, 0, 0, 157, 161, 0, 0, 0, 0, 0, 0, 76, 75, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 25, 0, 0, 0, 0, 30, 141, 113, 161, 0, 0, 0, 0, 134, 72, 51, 182, 0, 0, 0, 0, 144, 93, 213, 105, 0, 0, 0, 0, 65, 107, 181, 37, 0, 0, 0, 0, 0, 23, 127, 0, 0, 0, 0, 0, 0, 17, 54, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 51, 14, 0, 0, 0, 0, 41, 121, 100, 88, 0, 0, 0, 0, 100, 39, 32, 75, 0, 0, 0, 0, 90, 136, 166, 101, 0, 0, 0, 0, 5, 52, 109, 61, 0, 0, 0, 0, 0, 0, 104, 23, 0, 0, 0, 0, 0, 0, 38, 2, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 108, 136, 117, 0, 0, 0, 0, 107, 117, 181, 106, 0, 0, 0, 0, 39, 89, 162, 17, 0, 0, 0, 0, 0, 58, 91, 0, 0, 0, 0, 0, 2, 141, 5, 0, 0, 0, 0, 0, 14, 95, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 50, 17, 0, 0, 0, 0, 0, 97, 49, 67, 45, 0, 0, 0, 4, 100, 0, 2, 114, 0, 0, 0, 3, 119, 34, 92, 110, 0, 0, 0, 0, 55, 68, 127, 71, 0, 0, 0, 0, 0, 0, 110, 44, 0, 0, 0, 0, 0, 0, 42, 26, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 123, 131, 127, 0, 0, 0, 0, 107, 42, 88, 124, 0, 0, 0, 0, 77, 108, 184, 58, 0, 0, 0, 0, 0, 0, 110, 15, 0, 0, 0, 0, 0, 4, 104, 0, 0, 0, 0, 0, 0, 20, 53, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 6, 0, 0, 0, 0, 1, 85, 126, 102, 0, 0, 0, 0, 70, 111, 147, 104, 0, 0, 0, 0, 50, 116, 148, 33, 0, 0, 0, 0, 0, 0, 133, 4, 0, 0, 0, 0, 0, 0, 130, 0, 0, 0, 0, 0, 0, 0, 63, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 44, 3, 0, 0, 0, 0, 0, 136, 130, 116, 0, 0, 0, 0, 0, 110, 0, 124, 42, 0, 0, 0, 0, 118, 20, 188, 94, 0, 0, 0, 0, 73, 151, 153, 105, 0, 0, 0, 0, 0, 0, 0, 113, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 141, 167, 75, 0, 0, 0, 0, 127, 91, 48, 124, 0, 0, 0, 0, 126, 129, 197, 101, 0, 0, 0, 0, 15, 37, 140, 42, 0, 0, 0, 0, 0, 4, 122, 1, 0, 0, 0, 0, 0, 20, 82, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 91, 173, 144, 124, 0, 0, 0, 0, 136, 28, 42, 184, 0, 0, 0, 0, 142, 122, 161, 174, 0, 0, 0, 0, 57, 72, 69, 126, 0, 0, 0, 0, 0, 0, 132, 44, 0, 0, 0, 0, 0, 0, 99, 8, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 113, 131, 130, 0, 0, 0, 0, 120, 52, 45, 130, 0, 0, 0, 0, 130, 126, 197, 98, 0, 0, 0, 0, 30, 61, 123, 23, 0, 0, 0, 0, 0, 29, 92, 0, 0, 0, 0, 0, 0, 79, 10, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 155, 166, 179, 9, 0, 0, 10, 149, 51, 40, 181, 15, 0, 0, 22, 156, 131, 159, 181, 0, 0, 0, 0, 52, 65, 110, 105, 0, 0, 0, 0, 0, 14, 140, 7, 0, 0, 0, 0, 0, 47, 52, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 207, 190, 125, 0, 0, 0, 0, 181, 79, 139, 181, 0, 0, 0, 0, 174, 123, 239, 134, 0, 0, 0, 0, 88, 148, 164, 116, 0, 0, 0, 0, 0, 0, 111, 118, 0, 0, 0, 0, 0, 0, 59, 90, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 146, 155, 125, 0, 0, 0, 0, 142, 64, 87, 174, 0, 0, 0, 0, 106, 147, 210, 74, 0, 0, 0, 0, 7, 64, 163, 7, 0, 0, 0, 0, 0, 109, 40, 0, 0, 0, 0, 0, 6, 106, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 102, 51, 0, 0, 0, 0, 0, 178, 75, 136, 41, 2, 0, 0, 12, 141, 33, 135, 188, 7, 0, 0, 5, 195, 164, 181, 185, 0, 0, 0, 0, 51, 88, 109, 174, 0, 0, 0, 0, 0, 0, 78, 170, 0, 0, 0, 0, 0, 0, 18, 33, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 37, 30, 0, 0, 0, 0, 0, 53, 250, 250, 74, 33, 0, 0, 0, 77, 242, 200, 234, 205, 0, 0, 0, 15, 199, 237, 240, 245, 22, 0, 0, 0, 62, 124, 145, 227, 26, 0, 0, 0, 0, 0, 0, 174, 36, 0, 0, 0, 0, 0, 0, 80, 2, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 21, 0, 0, 0, 0, 0, 57, 43, 21, 0, 0, 0, 0, 28, 87, 79, 38, 0, 0, 0, 0, 33, 106, 115, 41, 0, 0, 0, 0, 0, 0, 82, 10, 0, 0, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 123, 211, 173, 114, 0, 0, 0, 0, 166, 60, 70, 182, 0, 0, 0, 0, 77, 166, 182, 162, 0, 0, 0, 0, 0, 0, 76, 138, 0, 0, 0, 0, 0, 0, 120, 111, 0, 0, 0, 0, 0, 0, 83, 71, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 47, 3, 0, 0, 0, 6, 53, 184, 199, 54, 29, 0, 0, 0, 141, 204, 193, 49, 31, 0, 0, 0, 28, 120, 87, 36, 31, 0, 0, 0, 2, 146, 17, 47, 31, 0, 0, 0, 54, 145, 0, 41, 29, 0, 0, 0, 31, 62, 0, 6, 5, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 153, 213, 102, 0, 0, 0, 0, 55, 123, 143, 114, 0, 0, 0, 0, 102, 134, 121, 109, 0, 0, 0, 0, 7, 4, 85, 78, 0, 0, 0, 0, 0, 0, 112, 29, 0, 0, 0, 0, 0, 0, 78, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 58, 15, 0, 0, 0, 0, 31, 139, 73, 108, 0, 0, 0, 0, 120, 65, 27, 114, 0, 0, 0, 0, 122, 99, 174, 91, 0, 0, 0, 0, 26, 71, 151, 44, 0, 0, 0, 0, 0, 0, 168, 68, 0, 0, 0, 0, 0, 0, 75, 30, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 167, 191, 160, 0, 0, 0, 0, 160, 51, 26, 150, 0, 0, 0, 0, 141, 162, 181, 145, 0, 0, 0, 0, 9, 47, 106, 100, 0, 0, 0, 0, 0, 0, 68, 105, 0, 0, 0, 0, 0, 0, 9, 47, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 130, 207, 174, 0, 0, 0, 0, 75, 201, 128, 157, 0, 0, 0, 0, 8, 74, 197, 43, 0, 0, 0, 0, 0, 64, 132, 1, 0, 0, 0, 0, 25, 185, 12, 0, 0, 0, 0, 0, 34, 110, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 157, 149, 71, 0, 0, 0, 0, 152, 55, 104, 142, 0, 0, 0, 0, 46, 106, 172, 50, 0, 0, 0, 0, 0, 0, 152, 6, 0, 0, 0, 0, 0, 50, 106, 0, 0, 0, 0, 0, 0, 59, 55, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 205, 242, 236, 0, 0, 0, 0, 217, 180, 234, 179, 0, 0, 0, 0, 78, 133, 222, 71, 0, 0, 0, 0, 0, 22, 174, 15, 0, 0, 0, 0, 0, 116, 79, 0, 0, 0, 0, 0, 0, 117, 35, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 150, 158, 160, 105, 0, 0, 0, 103, 99, 43, 164, 206, 0, 0, 0, 70, 194, 162, 135, 177, 0, 0, 0, 0, 15, 5, 70, 139, 0, 0, 0, 0, 0, 0, 4, 136, 0, 0, 0, 0, 0, 0, 0, 116, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 150, 178, 155, 61, 0, 0, 5, 185, 70, 33, 23, 25, 0, 0, 3, 130, 137, 196, 103, 0, 0, 0, 0, 0, 0, 160, 49, 0, 0, 0, 0, 0, 12, 163, 4, 0, 0, 0, 0, 0, 14, 104, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 103, 170, 111, 0, 0, 0, 0, 27, 182, 178, 113, 0, 0, 0, 0, 0, 40, 167, 17, 0, 0, 0, 0, 0, 10, 128, 0, 0, 0, 0, 0, 0, 101, 64, 0, 0, 0, 0, 0, 0, 85, 19, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 34, 0, 0, 0, 0, 0, 23, 187, 187, 67, 0, 0, 0, 0, 96, 138, 157, 105, 0, 0, 0, 0, 105, 197, 195, 21, 0, 0, 0, 0, 7, 37, 143, 0, 0, 0, 0, 0, 0, 42, 105, 0, 0, 0, 0, 0, 0, 21, 42, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 93, 0, 0, 0, 0, 0, 12, 196, 150, 78, 73, 0, 0, 0, 72, 249, 188, 224, 170, 0, 0, 0, 5, 63, 60, 129, 185, 0, 0, 0, 0, 0, 0, 129, 184, 0, 0, 0, 0, 0, 0, 189, 119, 0, 0, 0, 0, 0, 0, 45, 21, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 172, 185, 99, 0, 0, 0, 0, 149, 114, 170, 142, 0, 0, 0, 0, 63, 121, 192, 53, 0, 0, 0, 0, 0, 0, 160, 20, 0, 0, 0, 0, 0, 33, 145, 0, 0, 0, 0, 0, 0, 33, 81, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 116, 172, 119, 0, 0, 0, 13, 174, 172, 143, 131, 0, 0, 0, 53, 182, 133, 83, 194, 0, 0, 0, 0, 0, 0, 76, 178, 0, 0, 0, 0, 0, 0, 116, 130, 0, 0, 0, 0, 0, 0, 85, 60, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 148, 172, 77, 0, 0, 0, 0, 101, 79, 55, 140, 0, 0, 0, 0, 129, 140, 169, 116, 0, 0, 0, 0, 33, 112, 87, 103, 0, 0, 0, 0, 0, 0, 75, 80, 0, 0, 0, 0, 0, 0, 63, 50, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 2, 0, 0, 0, 0, 0, 80, 168, 123, 10, 0, 0, 0, 0, 118, 95, 161, 67, 0, 0, 0, 0, 54, 159, 228, 87, 0, 0, 0, 0, 0, 50, 116, 118, 0, 0, 0, 0, 0, 0, 4, 122, 0, 0, 0, 0, 0, 0, 0, 51, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 108, 131, 39, 0, 0, 0, 3, 190, 127, 144, 97, 0, 0, 0, 0, 13, 0, 108, 43, 0, 0, 0, 0, 0, 0, 126, 29, 0, 0, 0, 0, 0, 0, 117, 18, 0, 0, 0, 0, 0, 0, 81, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 47, 72, 5, 0, 0, 0, 0, 153, 176, 212, 76, 0, 0, 0, 0, 220, 56, 224, 104, 0, 0, 0, 0, 164, 211, 215, 145, 0, 0, 0, 0, 13, 51, 124, 183, 0, 0, 0, 0, 0, 0, 73, 195, 0, 0, 0, 0, 0, 0, 10, 38, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 25, 0, 0, 0, 0, 0, 58, 93, 136, 0, 0, 0, 0, 48, 117, 92, 127, 0, 0, 0, 0, 65, 109, 147, 27, 0, 0, 0, 0, 0, 6, 102, 0, 0, 0, 0, 0, 0, 83, 24, 0, 0, 0, 0, 0, 0, 45, 5, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 41, 0, 0, 0, 0, 25, 137, 224, 233, 0, 0, 0, 0, 159, 194, 149, 199, 0, 0, 0, 0, 201, 202, 239, 106, 0, 0, 0, 0, 33, 42, 207, 32, 0, 0, 0, 0, 0, 83, 135, 0, 0, 0, 0, 0, 0, 53, 49, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 123, 110, 117, 0, 0, 0, 0, 98, 87, 33, 125, 0, 0, 0, 0, 61, 124, 183, 60, 0, 0, 0, 0, 0, 0, 118, 6, 0, 0, 0, 0, 0, 14, 114, 0, 0, 0, 0, 0, 0, 30, 60, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 108, 106, 88, 0, 0, 0, 0, 96, 0, 61, 132, 0, 0, 0, 0, 68, 87, 112, 102, 0, 0, 0, 0, 0, 0, 66, 106, 0, 0, 0, 0, 0, 0, 38, 100, 0, 0, 0, 0, 0, 0, 11, 53, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 28, 0, 0, 0, 0, 16, 135, 101, 142, 0, 0, 0, 0, 85, 130, 104, 136, 0, 0, 0, 0, 44, 131, 199, 28, 0, 0, 0, 0, 0, 13, 155, 1, 0, 0, 0, 0, 0, 57, 105, 0, 0, 0, 0, 0, 0, 25, 46, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 46, 5, 0, 0, 0, 0, 28, 127, 96, 164, 5, 0, 0, 0, 111, 63, 103, 165, 2, 0, 0, 0, 101, 117, 174, 17, 0, 0, 0, 0, 2, 19, 113, 0, 0, 0, 0, 0, 0, 122, 21, 0, 0, 0, 0, 0, 0, 73, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 54, 12, 0, 0, 0, 0, 84, 151, 99, 172, 0, 0, 0, 0, 154, 42, 117, 140, 0, 0, 0, 0, 75, 129, 204, 30, 0, 0, 0, 0, 0, 44, 136, 0, 0, 0, 0, 0, 0, 138, 40, 0, 0, 0, 0, 0, 3, 89, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 53, 0, 0, 0, 0, 10, 131, 192, 195, 96, 0, 0, 0, 123, 170, 23, 124, 21, 0, 0, 0, 215, 140, 202, 143, 0, 0, 0, 0, 84, 137, 227, 50, 0, 0, 0, 0, 0, 108, 120, 0, 0, 0, 0, 0, 0, 66, 33, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 122, 107, 164, 32, 0, 0, 0, 177, 97, 140, 144, 25, 0, 0, 0, 8, 25, 135, 45, 0, 0, 0, 0, 0, 26, 120, 0, 0, 0, 0, 0, 7, 144, 12, 0, 0, 0, 0, 0, 19, 110, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 44, 0, 0, 0, 0, 0, 56, 159, 187, 38, 0, 0, 0, 0, 91, 153, 186, 37, 0, 0, 0, 0, 7, 60, 157, 13, 0, 0, 0, 0, 0, 1, 144, 0, 0, 0, 0, 0, 0, 9, 185, 36, 0, 0, 0, 0, 0, 1, 102, 30, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 30, 0, 0, 0, 0, 0, 116, 141, 160, 93, 0, 0, 0, 1, 168, 7, 134, 212, 0, 0, 0, 0, 138, 130, 194, 75, 0, 0, 0, 0, 11, 46, 165, 8, 0, 0, 0, 0, 0, 2, 170, 18, 0, 0, 0, 0, 0, 0, 93, 23, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 141, 150, 62, 0, 0, 0, 0, 136, 31, 132, 150, 0, 0, 0, 0, 51, 106, 118, 123, 0, 0, 0, 0, 0, 0, 117, 63, 0, 0, 0, 0, 0, 22, 119, 0, 0, 0, 0, 0, 0, 55, 46, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 44, 1, 0, 0, 0, 0, 32, 165, 158, 132, 0, 0, 0, 0, 115, 80, 117, 139, 0, 0, 0, 0, 128, 112, 182, 56, 0, 0, 0, 0, 29, 84, 171, 11, 0, 0, 0, 0, 0, 33, 110, 0, 0, 0, 0, 0, 0, 27, 41, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 24, 0, 0, 0, 0, 0, 57, 162, 175, 118, 0, 0, 0, 0, 140, 74, 158, 101, 0, 0, 0, 0, 129, 159, 211, 34, 0, 0, 0, 0, 21, 44, 165, 11, 0, 0, 0, 0, 0, 0, 183, 16, 0, 0, 0, 0, 0, 0, 89, 13, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 63, 29, 0, 0, 0, 0, 85, 172, 124, 212, 1, 0, 0, 0, 165, 34, 61, 201, 0, 0, 0, 0, 162, 111, 186, 69, 0, 0, 0, 0, 50, 151, 132, 2, 0, 0, 0, 0, 2, 157, 11, 0, 0, 0, 0, 0, 7, 79, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 36, 0, 0, 0, 0, 0, 131, 149, 152, 168, 0, 0, 0, 0, 159, 13, 71, 177, 0, 0, 0, 0, 80, 127, 182, 117, 0, 0, 0, 0, 0, 2, 167, 25, 0, 0, 0, 0, 0, 79, 147, 0, 0, 0, 0, 0, 0, 54, 49, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 31, 43, 0, 0, 0, 0, 68, 121, 193, 87, 0, 0, 0, 0, 115, 45, 202, 45, 0, 0, 0, 7, 155, 129, 108, 75, 0, 0, 0, 1, 79, 30, 65, 88, 0, 0, 0, 0, 0, 0, 17, 163, 0, 0, 0, 0, 0, 0, 0, 73, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 57, 6, 0, 0, 0, 0, 79, 158, 102, 183, 27, 0, 0, 0, 83, 124, 3, 188, 89, 0, 0, 0, 2, 128, 172, 224, 126, 0, 0, 0, 0, 2, 22, 99, 173, 0, 0, 0, 0, 0, 0, 17, 194, 51, 0, 0, 0, 0, 0, 0, 75, 21, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 41, 2, 0, 0, 0, 0, 97, 152, 130, 186, 0, 0, 0, 0, 166, 22, 81, 185, 0, 0, 0, 0, 160, 147, 211, 85, 0, 0, 0, 0, 15, 29, 170, 34, 0, 0, 0, 0, 0, 0, 173, 7, 0, 0, 0, 0, 0, 0, 66, 2, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 175, 128, 163, 107, 0, 0, 0, 45, 113, 0, 59, 136, 0, 0, 0, 0, 114, 140, 154, 171, 0, 0, 0, 0, 2, 44, 111, 185, 0, 0, 0, 0, 0, 0, 11, 153, 4, 0, 0, 0, 0, 0, 0, 111, 18, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101, 148, 148, 136, 0, 0, 0, 10, 155, 16, 55, 201, 1, 0, 0, 4, 161, 146, 197, 85, 0, 0, 0, 0, 16, 56, 181, 9, 0, 0, 0, 0, 0, 22, 132, 0, 0, 0, 0, 0, 0, 12, 104, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 38, 0, 0, 0, 0, 0, 99, 161, 172, 90, 0, 0, 0, 0, 158, 50, 78, 150, 0, 0, 0, 0, 86, 142, 218, 81, 0, 0, 0, 0, 0, 15, 165, 8, 0, 0, 0, 0, 0, 76, 90, 0, 0, 0, 0, 0, 0, 43, 27, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 55, 22, 0, 0, 0, 0, 57, 173, 105, 170, 0, 0, 0, 0, 126, 134, 88, 179, 0, 0, 0, 0, 27, 111, 203, 38, 0, 0, 0, 0, 0, 126, 94, 0, 0, 0, 0, 0, 59, 194, 6, 0, 0, 0, 0, 0, 63, 64, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 20, 0, 0, 0, 0, 0, 113, 115, 177, 41, 0, 0, 0, 0, 123, 6, 193, 68, 0, 0, 0, 0, 120, 83, 236, 93, 0, 0, 0, 0, 39, 143, 152, 112, 0, 0, 0, 0, 0, 0, 93, 138, 0, 0, 0, 0, 0, 0, 44, 58, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 97, 123, 1, 0, 0, 0, 69, 101, 23, 113, 0, 0, 0, 0, 87, 114, 142, 68, 0, 0, 0, 0, 2, 8, 109, 13, 0, 0, 0, 0, 0, 32, 75, 0, 0, 0, 0, 0, 0, 34, 23, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 51, 45, 0, 0, 0, 0, 4, 121, 102, 156, 13, 0, 0, 0, 27, 177, 89, 165, 37, 0, 0, 0, 0, 41, 193, 78, 0, 0, 0, 0, 17, 143, 73, 0, 0, 0, 0, 0, 155, 79, 0, 0, 0, 0, 0, 0, 74, 4, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 53, 7, 0, 0, 0, 23, 120, 132, 134, 55, 0, 0, 0, 104, 168, 4, 60, 33, 0, 0, 0, 26, 105, 206, 155, 5, 0, 0, 0, 7, 103, 148, 19, 0, 0, 0, 0, 160, 132, 2, 0, 0, 0, 0, 0, 75, 2, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 45, 1, 0, 0, 0, 0, 31, 115, 53, 27, 0, 0, 0, 0, 98, 45, 56, 104, 0, 0, 0, 0, 60, 122, 96, 83, 0, 0, 0, 0, 0, 0, 73, 60, 0, 0, 0, 0, 0, 0, 86, 5, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 27, 0, 0, 0, 0, 0, 65, 127, 128, 97, 0, 0, 0, 0, 110, 116, 221, 105, 0, 0, 0, 0, 38, 80, 144, 18, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 129, 36, 0, 0, 0, 0, 0, 0, 94, 53, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 36, 0, 0, 0, 0, 0, 7, 101, 98, 40, 0, 0, 0, 0, 58, 85, 79, 58, 0, 0, 0, 0, 18, 73, 137, 24, 0, 0, 0, 0, 0, 0, 109, 3, 0, 0, 0, 0, 0, 0, 101, 0, 0, 0, 0, 0, 0, 0, 42, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 155, 161, 198, 38, 0, 0, 0, 146, 105, 37, 159, 17, 0, 0, 0, 124, 162, 227, 99, 0, 0, 0, 0, 0, 74, 151, 11, 0, 0, 0, 0, 84, 179, 6, 0, 0, 0, 0, 0, 118, 56, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 145, 133, 109, 2, 0, 0, 15, 138, 15, 33, 181, 70, 0, 0, 7, 127, 123, 186, 177, 3, 0, 0, 0, 0, 1, 171, 45, 0, 0, 0, 0, 0, 62, 99, 0, 0, 0, 0, 0, 0, 34, 62, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 41, 54, 3, 0, 0, 0, 57, 169, 101, 82, 27, 0, 0, 0, 110, 173, 84, 152, 23, 0, 0, 0, 2, 64, 218, 99, 0, 0, 0, 0, 7, 134, 112, 8, 0, 0, 0, 0, 123, 142, 0, 0, 0, 0, 0, 0, 74, 23, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 43, 0, 0, 0, 0, 35, 164, 140, 166, 25, 0, 0, 0, 115, 194, 91, 185, 8, 0, 0, 0, 18, 92, 229, 77, 0, 0, 0, 0, 0, 109, 121, 3, 5, 0, 0, 0, 116, 187, 1, 0, 0, 0, 0, 0, 75, 48, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 44, 0, 0, 0, 0, 25, 161, 113, 153, 2, 0, 0, 0, 87, 211, 79, 163, 5, 0, 0, 0, 12, 94, 218, 56, 0, 0, 0, 0, 0, 90, 120, 1, 0, 0, 0, 0, 87, 178, 3, 0, 0, 0, 0, 0, 76, 54, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 49, 0, 0, 0, 0, 53, 160, 94, 69, 7, 0, 0, 0, 126, 136, 43, 128, 22, 0, 0, 0, 26, 91, 206, 75, 0, 0, 0, 0, 0, 72, 126, 2, 0, 0, 0, 0, 90, 155, 1, 0, 0, 0, 0, 0, 77, 36, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 31, 0, 0, 0, 0, 0, 0, 104, 141, 48, 0, 0, 0, 0, 29, 113, 128, 75, 0, 0, 0, 0, 82, 181, 164, 28, 0, 0, 0, 0, 17, 37, 114, 1, 0, 0, 0, 0, 0, 47, 72, 0, 0, 0, 0, 0, 0, 44, 13, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 58, 46, 0, 0, 0, 0, 65, 184, 113, 164, 55, 0, 0, 0, 149, 128, 26, 167, 48, 0, 0, 0, 32, 132, 238, 101, 0, 0, 0, 0, 3, 111, 150, 10, 0, 0, 0, 0, 160, 164, 4, 0, 0, 0, 0, 0, 86, 17, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 46, 9, 0, 0, 0, 24, 151, 131, 120, 110, 0, 0, 0, 93, 183, 35, 122, 124, 0, 0, 0, 42, 165, 233, 119, 0, 0, 0, 0, 26, 160, 123, 6, 0, 0, 0, 27, 209, 96, 0, 0, 0, 0, 0, 25, 70, 4, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 54, 56, 4, 0, 0, 0, 43, 183, 101, 142, 88, 0, 0, 0, 103, 187, 86, 151, 33, 0, 0, 0, 4, 70, 194, 45, 0, 0, 0, 0, 47, 171, 58, 0, 0, 0, 0, 62, 187, 59, 0, 0, 0, 0, 0, 56, 40, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 169, 148, 94, 0, 0, 0, 0, 146, 70, 182, 175, 0, 0, 0, 0, 99, 134, 150, 110, 0, 0, 0, 0, 0, 0, 136, 103, 0, 0, 0, 0, 0, 0, 145, 77, 0, 0, 0, 0, 0, 0, 91, 53, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 154, 141, 148, 65, 0, 0, 0, 191, 78, 83, 175, 49, 0, 0, 0, 28, 67, 171, 122, 0, 0, 0, 0, 0, 8, 168, 26, 0, 0, 0, 0, 0, 118, 60, 0, 0, 0, 0, 0, 5, 101, 1, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 7, 106, 128, 181, 95, 0, 0, 45, 32, 158, 81, 154, 30, 0, 0, 0, 0, 41, 183, 21, 0, 0, 0, 0, 0, 86, 75, 0, 0, 0, 0, 0, 16, 149, 0, 0, 0, 0, 0, 0, 55, 99, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 22, 0, 0, 0, 0, 0, 3, 154, 111, 0, 0, 0, 0, 0, 30, 158, 154, 19, 0, 0, 0, 0, 2, 108, 195, 30, 0, 0, 0, 0, 0, 6, 168, 6, 0, 0, 0, 0, 0, 63, 87, 0, 0, 0, 0, 0, 0, 47, 17, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 16, 41, 0, 0, 0, 0, 0, 39, 155, 97, 145, 25, 0, 0, 0, 89, 123, 56, 170, 9, 0, 0, 0, 9, 108, 199, 33, 0, 0, 0, 0, 0, 111, 72, 0, 0, 0, 0, 0, 61, 161, 0, 0, 0, 0, 0, 0, 70, 58, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 51, 1, 0, 0, 0, 32, 169, 130, 101, 84, 0, 0, 0, 159, 117, 0, 96, 45, 0, 0, 5, 201, 73, 159, 166, 2, 0, 0, 0, 106, 158, 216, 40, 0, 0, 0, 0, 1, 146, 64, 0, 0, 0, 0, 0, 2, 85, 2, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 55, 33, 0, 0, 0, 0, 0, 170, 131, 196, 95, 0, 0, 0, 5, 154, 11, 186, 130, 0, 0, 0, 0, 101, 141, 179, 135, 0, 0, 0, 0, 0, 0, 106, 164, 0, 0, 0, 0, 0, 0, 65, 217, 0, 0, 0, 0, 0, 0, 18, 101, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 145, 153, 203, 49, 0, 0, 1, 191, 117, 141, 162, 0, 0, 0, 0, 100, 81, 179, 77, 0, 0, 0, 0, 0, 6, 169, 15, 0, 0, 0, 0, 0, 111, 72, 0, 0, 0, 0, 0, 20, 140, 10, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 145, 158, 184, 0, 0, 0, 0, 125, 112, 95, 145, 0, 0, 0, 0, 54, 165, 184, 23, 0, 0, 0, 0, 0, 85, 101, 0, 0, 0, 0, 0, 9, 166, 8, 0, 0, 0, 0, 0, 38, 120, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 55, 8, 0, 0, 0, 0, 45, 172, 119, 113, 45, 0, 0, 0, 117, 143, 78, 196, 52, 0, 0, 0, 15, 81, 204, 101, 0, 0, 0, 0, 0, 41, 141, 9, 0, 0, 0, 0, 29, 171, 13, 0, 0, 0, 0, 0, 42, 73, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 32, 11, 0, 0, 0, 0, 0, 117, 231, 210, 57, 0, 0, 0, 0, 168, 104, 235, 149, 0, 0, 0, 0, 196, 181, 104, 149, 0, 0, 0, 0, 91, 119, 4, 135, 5, 0, 0, 0, 0, 0, 0, 89, 45, 0, 0, 0, 0, 0, 0, 23, 40, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 62, 40, 0, 0, 0, 0, 122, 146, 71, 132, 17, 0, 0, 41, 151, 15, 50, 166, 20, 0, 0, 6, 125, 131, 171, 145, 0, 0, 0, 0, 0, 5, 170, 36, 0, 0, 0, 0, 0, 109, 66, 0, 0, 0, 0, 0, 5, 85, 4, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 36, 35, 0, 0, 0, 0, 32, 201, 165, 173, 182, 13, 0, 29, 182, 114, 15, 123, 251, 28, 0, 22, 166, 188, 167, 85, 156, 71, 0, 0, 14, 33, 12, 0, 164, 77, 0, 0, 0, 0, 0, 0, 157, 58, 0, 0, 0, 0, 0, 0, 63, 34, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 55, 0, 0, 0, 0, 38, 131, 159, 232, 18, 0, 0, 20, 178, 116, 151, 199, 7, 0, 0, 12, 100, 94, 202, 44, 0, 0, 0, 0, 0, 95, 99, 0, 0, 0, 0, 0, 87, 168, 1, 0, 0, 0, 0, 0, 86, 44, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 173, 201, 137, 0, 0, 0, 0, 180, 176, 209, 119, 0, 0, 0, 0, 36, 39, 147, 56, 0, 0, 0, 0, 0, 0, 173, 21, 0, 0, 0, 0, 0, 0, 177, 21, 0, 0, 0, 0, 0, 0, 102, 26, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131, 131, 79, 11, 0, 0, 0, 0, 151, 51, 193, 63, 0, 0, 0, 0, 31, 73, 147, 21, 0, 0, 0, 0, 0, 0, 141, 38, 0, 0, 0, 0, 0, 0, 125, 69, 0, 0, 0, 0, 0, 0, 71, 70, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 73, 133, 193, 156, 0, 0, 0, 108, 117, 126, 216, 60, 0, 0, 25, 166, 139, 131, 32, 0, 0, 0, 4, 122, 183, 5, 0, 0, 0, 0, 0, 119, 37, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 175, 190, 178, 89, 0, 0, 0, 8, 193, 57, 60, 173, 34, 0, 0, 0, 140, 196, 198, 227, 64, 0, 0, 0, 3, 10, 70, 190, 5, 0, 0, 0, 0, 0, 155, 47, 0, 0, 0, 0, 0, 11, 73, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 55, 153, 189, 25, 0, 0, 0, 0, 162, 192, 154, 48, 0, 0, 0, 0, 76, 35, 151, 50, 0, 0, 0, 0, 0, 0, 151, 50, 0, 0, 0, 0, 0, 0, 145, 50, 0, 0, 0, 0, 0, 0, 58, 22, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 43, 152, 152, 119, 30, 22, 2, 0, 105, 85, 6, 34, 84, 195, 40, 0, 28, 120, 131, 191, 228, 65, 0, 0, 0, 0, 7, 182, 85, 0, 0, 0, 0, 0, 72, 105, 0, 0, 0, 0, 0, 0, 12, 14, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 128, 133, 116, 52, 0, 0, 0, 107, 142, 82, 95, 159, 50, 0, 0, 12, 90, 109, 132, 235, 39, 0, 0, 0, 0, 0, 101, 157, 0, 0, 0, 0, 0, 0, 154, 45, 0, 0, 0, 0, 0, 0, 97, 4, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 48, 0, 0, 0, 0, 97, 191, 154, 158, 0, 0, 0, 7, 200, 71, 7, 93, 5, 0, 0, 0, 128, 169, 237, 179, 2, 0, 0, 0, 0, 40, 183, 32, 0, 0, 0, 0, 14, 176, 25, 0, 0, 0, 0, 0, 11, 76, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 53, 7, 0, 0, 0, 35, 155, 185, 188, 76, 0, 0, 0, 164, 138, 12, 40, 28, 0, 0, 0, 137, 219, 224, 221, 0, 0, 0, 0, 11, 64, 197, 77, 0, 0, 0, 0, 5, 153, 43, 0, 0, 0, 0, 0, 5, 67, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 45, 43, 0, 0, 0, 0, 72, 173, 115, 179, 0, 0, 0, 0, 137, 152, 97, 157, 0, 0, 0, 0, 8, 53, 159, 127, 0, 0, 0, 0, 0, 29, 167, 25, 0, 0, 0, 0, 31, 193, 24, 0, 0, 0, 0, 0, 26, 99, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 55, 80, 28, 0, 0, 0, 7, 127, 60, 6, 100, 38, 0, 4, 120, 58, 0, 0, 88, 58, 0, 7, 157, 36, 9, 39, 184, 58, 0, 0, 49, 111, 83, 70, 183, 4, 0, 0, 0, 0, 0, 19, 103, 0, 0, 0, 0, 0, 0, 4, 12, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 36, 28, 1, 0, 0, 0, 24, 200, 132, 132, 143, 0, 0, 0, 33, 162, 5, 21, 183, 9, 0, 0, 0, 136, 172, 167, 237, 14, 0, 0, 0, 1, 3, 35, 214, 3, 0, 0, 0, 0, 0, 107, 157, 0, 0, 0, 0, 0, 0, 72, 62, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 46, 22, 0, 0, 0, 0, 56, 187, 142, 171, 161, 6, 0, 0, 96, 131, 20, 7, 92, 35, 0, 6, 15, 134, 185, 163, 233, 98, 0, 1, 1, 0, 5, 86, 202, 20, 0, 0, 0, 0, 29, 177, 26, 0, 0, 0, 0, 0, 37, 51, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 41, 22, 0, 0, 0, 0, 66, 166, 125, 123, 0, 0, 0, 0, 159, 47, 8, 88, 34, 0, 0, 0, 121, 161, 173, 182, 20, 0, 0, 0, 0, 0, 148, 75, 0, 0, 0, 0, 0, 29, 135, 1, 0, 0, 0, 0, 0, 23, 53, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 100, 144, 106, 0, 0, 0, 0, 102, 121, 147, 32, 0, 0, 0, 0, 43, 58, 107, 0, 0, 0, 0, 0, 0, 8, 96, 0, 0, 0, 0, 0, 0, 33, 57, 0, 0, 0, 0, 0, 0, 20, 31, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 46, 20, 0, 0, 0, 0, 106, 193, 152, 144, 0, 0, 0, 4, 225, 120, 75, 162, 0, 0, 0, 0, 103, 145, 131, 178, 0, 0, 0, 0, 0, 0, 150, 121, 0, 0, 0, 0, 0, 89, 121, 1, 0, 0, 0, 0, 0, 62, 9, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 32, 0, 0, 0, 0, 37, 165, 150, 191, 89, 0, 0, 0, 147, 142, 90, 231, 89, 0, 0, 0, 77, 162, 220, 96, 0, 0, 0, 0, 11, 168, 74, 0, 0, 0, 0, 0, 120, 202, 0, 0, 0, 0, 0, 0, 36, 46, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 61, 27, 0, 0, 0, 12, 133, 112, 46, 120, 23, 0, 0, 105, 53, 0, 0, 131, 30, 0, 1, 137, 1, 0, 32, 177, 3, 0, 0, 85, 128, 128, 130, 176, 0, 0, 0, 0, 0, 0, 0, 121, 7, 0, 0, 0, 0, 0, 0, 53, 7, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 133, 141, 141, 92, 0, 0, 0, 130, 66, 17, 102, 49, 0, 0, 0, 77, 146, 181, 61, 0, 0, 0, 0, 0, 73, 113, 0, 0, 0, 0, 0, 40, 167, 8, 0, 0, 0, 0, 0, 87, 99, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 19, 0, 0, 0, 0, 0, 51, 176, 221, 168, 0, 0, 0, 0, 44, 201, 195, 223, 0, 0, 0, 0, 0, 5, 140, 176, 0, 0, 0, 0, 0, 31, 222, 78, 0, 0, 0, 0, 89, 208, 53, 0, 0, 0, 0, 0, 76, 64, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 122, 113, 155, 0, 0, 0, 0, 115, 54, 58, 138, 0, 0, 0, 0, 39, 107, 183, 37, 0, 0, 0, 0, 0, 45, 104, 0, 0, 0, 0, 0, 9, 143, 5, 0, 0, 0, 0, 0, 35, 100, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 51, 14, 0, 0, 0, 0, 0, 111, 58, 111, 0, 0, 0, 0, 19, 110, 54, 106, 0, 0, 0, 0, 0, 54, 175, 28, 0, 0, 0, 0, 0, 51, 88, 0, 0, 0, 0, 0, 12, 136, 1, 0, 0, 0, 0, 0, 21, 62, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 53, 5, 0, 0, 0, 51, 118, 69, 124, 14, 0, 0, 0, 119, 46, 88, 125, 0, 0, 0, 0, 44, 133, 158, 10, 0, 0, 0, 0, 4, 121, 39, 0, 0, 0, 0, 0, 106, 107, 0, 0, 0, 0, 0, 0, 66, 23, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 48, 57, 1, 0, 0, 0, 54, 137, 73, 128, 24, 0, 0, 0, 148, 41, 0, 113, 25, 0, 0, 52, 89, 2, 86, 194, 0, 0, 0, 22, 136, 111, 117, 142, 0, 0, 0, 0, 0, 0, 104, 100, 0, 0, 0, 0, 0, 0, 56, 45, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 24, 0, 0, 0, 0, 0, 47, 125, 109, 89, 0, 0, 0, 0, 97, 39, 134, 173, 0, 0, 0, 0, 60, 112, 122, 90, 0, 0, 0, 0, 0, 0, 148, 22, 0, 0, 0, 0, 0, 49, 103, 0, 0, 0, 0, 0, 0, 24, 42, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 49, 5, 0, 0, 0, 0, 92, 153, 123, 104, 0, 0, 0, 0, 151, 42, 107, 126, 0, 0, 0, 0, 83, 155, 153, 134, 0, 0, 0, 0, 0, 0, 147, 82, 0, 0, 0, 0, 0, 0, 163, 7, 0, 0, 0, 0, 0, 0, 73, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 107, 23, 0, 0, 0, 0, 65, 143, 19, 48, 0, 0, 0, 0, 131, 75, 52, 38, 0, 0, 0, 0, 153, 152, 101, 171, 14, 0, 0, 0, 145, 116, 0, 95, 80, 0, 0, 0, 0, 0, 0, 17, 121, 0, 0, 0, 0, 0, 0, 0, 38, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 21, 0, 0, 0, 0, 0, 51, 205, 103, 5, 0, 0, 0, 0, 139, 140, 210, 58, 0, 0, 0, 0, 149, 121, 135, 78, 0, 0, 0, 0, 12, 7, 124, 78, 0, 0, 0, 0, 0, 0, 146, 78, 0, 0, 0, 0, 0, 0, 68, 39, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 57, 11, 0, 0, 0, 0, 44, 132, 58, 173, 14, 0, 0, 0, 110, 65, 26, 176, 21, 0, 0, 0, 82, 106, 189, 59, 0, 0, 0, 0, 1, 72, 83, 0, 0, 0, 0, 0, 83, 115, 0, 0, 0, 0, 0, 0, 73, 15, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 117, 125, 158, 134, 0, 0, 10, 148, 94, 40, 134, 65, 0, 0, 8, 128, 110, 191, 99, 0, 0, 0, 0, 0, 69, 109, 4, 0, 0, 0, 0, 121, 121, 0, 0, 0, 0, 0, 20, 117, 10, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 48, 54, 0, 0, 0, 0, 37, 153, 69, 129, 81, 0, 0, 0, 109, 119, 25, 131, 37, 0, 0, 0, 5, 61, 195, 65, 0, 0, 0, 0, 0, 80, 104, 2, 0, 0, 0, 0, 113, 130, 0, 0, 0, 0, 0, 0, 106, 38, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 63, 7, 0, 0, 0, 50, 149, 101, 51, 107, 0, 0, 0, 157, 61, 5, 40, 30, 0, 0, 4, 157, 134, 182, 169, 0, 0, 0, 0, 12, 39, 156, 53, 0, 0, 0, 0, 3, 118, 36, 0, 0, 0, 0, 0, 12, 78, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 54, 60, 3, 0, 0, 0, 65, 138, 65, 114, 61, 0, 0, 0, 141, 37, 1, 122, 19, 0, 0, 0, 51, 125, 185, 109, 0, 0, 0, 0, 0, 23, 144, 15, 0, 0, 0, 0, 20, 152, 26, 0, 0, 0, 0, 0, 49, 75, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 53, 9, 0, 0, 0, 0, 32, 166, 177, 69, 0, 0, 0, 0, 124, 139, 92, 125, 0, 0, 0, 0, 111, 163, 180, 116, 0, 0, 0, 0, 5, 42, 186, 68, 0, 0, 0, 0, 0, 46, 148, 5, 0, 0, 0, 0, 0, 40, 33, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 12, 53, 17, 0, 0, 0, 29, 212, 227, 204, 229, 7, 0, 0, 88, 218, 60, 105, 190, 0, 0, 0, 42, 215, 215, 205, 218, 0, 0, 0, 0, 29, 27, 154, 190, 0, 0, 0, 0, 0, 0, 176, 152, 0, 0, 0, 0, 0, 0, 82, 38, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 49, 7, 0, 0, 0, 30, 119, 94, 67, 129, 37, 0, 0, 103, 148, 53, 63, 24, 22, 0, 0, 0, 33, 169, 40, 0, 0, 0, 0, 9, 114, 63, 0, 0, 0, 0, 4, 147, 49, 0, 0, 0, 0, 0, 8, 59, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 51, 0, 0, 0, 0, 31, 115, 78, 124, 11, 0, 0, 0, 108, 45, 54, 122, 0, 0, 0, 0, 56, 101, 176, 23, 0, 0, 0, 0, 0, 69, 71, 0, 0, 0, 0, 0, 17, 135, 0, 0, 0, 0, 0, 0, 9, 64, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 28, 0, 0, 0, 0, 0, 88, 65, 70, 16, 0, 0, 0, 0, 68, 0, 26, 56, 0, 0, 0, 0, 73, 86, 127, 82, 0, 0, 0, 0, 1, 41, 134, 32, 0, 0, 0, 0, 0, 0, 98, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 55, 22, 0, 0, 0, 28, 116, 81, 46, 49, 0, 0, 0, 106, 95, 37, 111, 0, 0, 0, 0, 12, 82, 179, 65, 0, 0, 0, 0, 0, 50, 106, 2, 0, 0, 0, 0, 50, 145, 2, 0, 0, 0, 0, 0, 55, 43, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 38, 9, 0, 0, 0, 2, 83, 210, 198, 86, 0, 0, 0, 48, 229, 230, 188, 24, 0, 0, 0, 2, 82, 209, 57, 0, 0, 0, 0, 29, 182, 61, 0, 0, 0, 0, 0, 181, 96, 0, 0, 0, 0, 0, 0, 78, 10, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 37, 38, 0, 0, 0, 0, 30, 116, 53, 56, 104, 0, 0, 0, 78, 19, 0, 68, 146, 0, 0, 0, 29, 92, 58, 124, 97, 0, 0, 0, 0, 32, 12, 79, 89, 0, 0, 0, 0, 0, 0, 79, 102, 0, 0, 0, 0, 0, 0, 39, 57, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 57, 6, 0, 0, 0, 16, 125, 94, 82, 63, 0, 0, 0, 94, 148, 110, 82, 27, 0, 0, 0, 22, 81, 156, 33, 0, 0, 0, 0, 5, 108, 69, 0, 0, 0, 0, 0, 121, 94, 0, 0, 0, 0, 0, 0, 67, 3, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 124, 105, 110, 99, 1, 0, 0, 86, 132, 78, 66, 80, 1, 0, 0, 9, 62, 175, 52, 0, 0, 0, 0, 0, 84, 98, 0, 0, 0, 0, 0, 112, 120, 0, 0, 0, 0, 0, 0, 115, 17, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 172, 114, 8, 0, 0, 0, 0, 139, 23, 93, 65, 0, 0, 0, 0, 114, 137, 157, 145, 0, 0, 0, 0, 8, 45, 16, 114, 0, 0, 0, 0, 0, 0, 0, 78, 39, 0, 0, 0, 0, 0, 0, 16, 57, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 12, 0, 0, 0, 0, 77, 117, 104, 69, 0, 0, 0, 0, 131, 27, 146, 51, 0, 0, 0, 0, 97, 82, 124, 47, 0, 0, 0, 0, 0, 0, 116, 30, 0, 0, 0, 0, 0, 0, 127, 50, 0, 0, 0, 0, 0, 0, 64, 44, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 57, 19, 0, 0, 0, 0, 1, 123, 91, 151, 0, 0, 0, 0, 3, 112, 134, 122, 0, 0, 0, 0, 0, 51, 149, 2, 0, 0, 0, 0, 0, 85, 71, 0, 0, 0, 0, 0, 22, 137, 0, 0, 0, 0, 0, 0, 32, 64, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 165, 95, 72, 4, 0, 0, 0, 1, 114, 35, 217, 53, 0, 0, 0, 0, 31, 112, 143, 78, 0, 0, 0, 0, 0, 0, 127, 72, 0, 0, 0, 0, 0, 0, 123, 80, 0, 0, 0, 0, 0, 0, 51, 72, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 59, 36, 0, 0, 0, 0, 20, 137, 86, 116, 18, 0, 0, 0, 87, 135, 122, 112, 6, 0, 0, 0, 13, 87, 151, 8, 11, 0, 0, 0, 0, 118, 38, 0, 10, 0, 0, 0, 77, 127, 0, 0, 18, 0, 0, 0, 56, 32, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 53, 13, 0, 0, 0, 0, 61, 126, 74, 120, 0, 0, 0, 0, 116, 17, 60, 158, 0, 0, 0, 0, 135, 102, 167, 93, 0, 0, 0, 0, 27, 80, 162, 12, 0, 0, 0, 0, 0, 0, 134, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 63, 47, 0, 0, 0, 0, 109, 119, 59, 93, 0, 0, 0, 50, 120, 3, 45, 105, 0, 0, 0, 91, 103, 113, 167, 128, 0, 0, 0, 18, 98, 55, 124, 78, 14, 0, 0, 0, 0, 0, 142, 105, 21, 0, 0, 0, 0, 0, 69, 57, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 61, 23, 0, 0, 0, 0, 58, 167, 86, 169, 14, 0, 0, 3, 166, 63, 33, 169, 5, 0, 0, 29, 178, 127, 190, 142, 0, 0, 0, 2, 77, 74, 110, 101, 0, 0, 0, 0, 0, 0, 136, 113, 0, 0, 0, 0, 0, 0, 53, 79, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 53, 16, 0, 0, 0, 0, 62, 177, 99, 158, 0, 0, 0, 0, 108, 149, 105, 140, 0, 0, 0, 0, 11, 114, 207, 31, 0, 0, 0, 0, 0, 116, 94, 0, 0, 0, 0, 0, 62, 172, 4, 0, 0, 0, 0, 0, 55, 59, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 47, 5, 0, 0, 0, 0, 44, 159, 110, 115, 0, 0, 0, 0, 128, 69, 69, 120, 0, 0, 0, 0, 103, 137, 204, 36, 0, 0, 0, 0, 2, 32, 147, 0, 0, 0, 0, 0, 0, 98, 55, 0, 0, 0, 0, 0, 0, 55, 6, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 62, 22, 0, 0, 0, 0, 0, 109, 93, 104, 0, 0, 0, 0, 19, 107, 91, 103, 0, 0, 0, 0, 7, 109, 184, 37, 0, 0, 0, 0, 0, 4, 143, 3, 0, 0, 0, 0, 0, 64, 87, 0, 0, 0, 0, 0, 0, 51, 16, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 39, 1, 0, 0, 0, 0, 65, 203, 110, 147, 0, 0, 0, 0, 95, 148, 88, 199, 0, 0, 0, 0, 17, 110, 236, 109, 0, 0, 0, 0, 0, 48, 183, 17, 0, 0, 0, 0, 2, 153, 52, 0, 0, 0, 0, 0, 4, 87, 13, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 46, 46, 8, 0, 0, 0, 0, 80, 50, 1, 15, 0, 0, 0, 0, 78, 0, 54, 104, 0, 0, 0, 0, 44, 74, 60, 79, 0, 0, 0, 0, 0, 0, 37, 75, 0, 0, 0, 0, 0, 0, 58, 83, 0, 0, 0, 0, 0, 0, 21, 41, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 52, 28, 0, 0, 0, 0, 0, 177, 194, 218, 112, 0, 0, 0, 0, 206, 149, 202, 174, 0, 0, 0, 0, 25, 72, 190, 150, 0, 0, 0, 0, 0, 38, 214, 68, 0, 0, 0, 0, 71, 222, 66, 0, 0, 0, 0, 0, 42, 92, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 56, 24, 0, 0, 0, 0, 171, 217, 229, 242, 22, 0, 0, 19, 227, 77, 209, 197, 4, 0, 0, 11, 217, 228, 252, 144, 0, 0, 0, 0, 60, 92, 207, 176, 0, 0, 0, 0, 0, 0, 169, 194, 0, 0, 0, 0, 0, 0, 63, 64, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 27, 7, 0, 0, 0, 0, 11, 171, 140, 181, 76, 0, 0, 0, 58, 114, 1, 190, 113, 0, 0, 0, 5, 137, 129, 130, 145, 0, 0, 0, 0, 15, 18, 81, 156, 0, 0, 0, 0, 0, 0, 57, 154, 0, 0, 0, 0, 0, 0, 28, 74, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 138, 127, 157, 4, 0, 0, 0, 107, 90, 78, 102, 6, 0, 0, 0, 72, 155, 178, 17, 0, 0, 0, 0, 0, 85, 80, 0, 0, 0, 0, 0, 18, 152, 2, 0, 0, 0, 0, 0, 59, 91, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79, 86, 62, 0, 0, 0, 0, 2, 93, 116, 36, 0, 0, 0, 0, 3, 84, 109, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 61, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 127, 181, 144, 37, 0, 0, 0, 85, 96, 73, 113, 33, 0, 0, 0, 63, 218, 143, 28, 25, 0, 0, 0, 0, 159, 28, 4, 7, 0, 0, 0, 96, 117, 0, 0, 0, 0, 0, 0, 109, 29, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 20, 0, 0, 0, 0, 0, 29, 153, 109, 25, 0, 0, 0, 0, 102, 110, 151, 70, 0, 0, 0, 0, 46, 127, 185, 27, 0, 0, 0, 0, 0, 0, 151, 5, 0, 0, 0, 0, 0, 0, 127, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 37, 1, 0, 0, 0, 0, 65, 181, 127, 121, 0, 0, 0, 0, 165, 74, 43, 177, 0, 0, 0, 0, 144, 75, 170, 154, 0, 0, 0, 0, 55, 113, 136, 140, 0, 0, 0, 0, 0, 0, 131, 113, 0, 0, 0, 0, 0, 0, 69, 41, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 132, 184, 219, 201, 25, 0, 0, 73, 144, 62, 58, 209, 53, 0, 0, 55, 144, 72, 160, 187, 0, 0, 0, 3, 156, 196, 103, 112, 0, 0, 0, 0, 0, 0, 0, 115, 4, 0, 0, 0, 0, 0, 0, 81, 12, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 124, 117, 92, 68, 0, 0, 0, 22, 129, 56, 179, 120, 0, 0, 0, 1, 91, 61, 120, 105, 0, 0, 0, 0, 0, 0, 123, 60, 0, 0, 0, 0, 0, 0, 97, 22, 0, 0, 0, 0, 0, 0, 77, 17, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 53, 14, 0, 0, 0, 0, 0, 97, 171, 115, 0, 0, 0, 0, 2, 123, 176, 57, 0, 0, 0, 0, 0, 23, 158, 1, 0, 0, 0, 0, 0, 82, 70, 0, 0, 0, 0, 0, 21, 156, 0, 0, 0, 0, 0, 0, 29, 60, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 49, 7, 0, 0, 0, 0, 11, 131, 109, 75, 0, 0, 0, 0, 50, 147, 126, 51, 0, 0, 0, 0, 1, 52, 182, 14, 0, 0, 0, 0, 0, 45, 89, 0, 0, 0, 0, 0, 24, 136, 2, 0, 0, 0, 0, 0, 38, 55, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 49, 39, 0, 0, 0, 0, 37, 174, 94, 152, 37, 0, 0, 0, 148, 109, 41, 185, 60, 0, 0, 0, 190, 112, 222, 129, 1, 0, 0, 0, 56, 132, 136, 4, 0, 0, 0, 0, 34, 165, 7, 0, 0, 0, 0, 0, 45, 54, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 93, 98, 13, 0, 0, 0, 0, 144, 119, 242, 68, 0, 0, 0, 0, 147, 129, 240, 75, 0, 0, 0, 0, 8, 42, 139, 116, 0, 0, 0, 0, 29, 32, 98, 139, 0, 0, 0, 0, 67, 164, 190, 63, 0, 0, 0, 0, 0, 13, 35, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 170, 206, 194, 113, 0, 0, 0, 104, 66, 119, 117, 190, 19, 0, 0, 92, 77, 124, 66, 110, 105, 0, 0, 20, 164, 147, 7, 82, 128, 0, 0, 0, 0, 0, 0, 75, 116, 0, 0, 0, 0, 0, 0, 60, 83, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 37, 0, 0, 0, 0, 23, 122, 79, 141, 0, 0, 0, 0, 96, 82, 32, 82, 0, 0, 0, 0, 50, 124, 175, 91, 0, 0, 0, 0, 0, 3, 138, 16, 0, 0, 0, 0, 0, 92, 44, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 32, 6, 0, 0, 0, 0, 70, 181, 222, 188, 0, 0, 0, 0, 190, 115, 199, 164, 0, 0, 0, 0, 135, 147, 199, 105, 0, 0, 0, 0, 0, 0, 172, 94, 0, 0, 0, 0, 0, 0, 193, 85, 0, 0, 0, 0, 0, 0, 73, 20, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 40, 19, 0, 0, 0, 0, 0, 138, 104, 132, 78, 0, 0, 0, 0, 131, 0, 95, 70, 0, 0, 0, 0, 101, 129, 175, 42, 0, 0, 0, 0, 0, 0, 129, 42, 0, 0, 0, 0, 0, 0, 131, 117, 0, 0, 0, 0, 0, 0, 51, 63, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 53, 0, 0, 0, 0, 17, 142, 86, 27, 0, 0, 0, 0, 43, 176, 97, 65, 0, 0, 0, 0, 0, 3, 153, 84, 0, 0, 0, 0, 0, 23, 140, 9, 0, 0, 0, 0, 22, 139, 10, 0, 0, 0, 0, 0, 46, 60, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 53, 10, 0, 0, 0, 0, 65, 138, 111, 135, 0, 0, 0, 0, 122, 39, 126, 137, 0, 0, 0, 0, 83, 114, 200, 49, 0, 0, 0, 0, 0, 47, 118, 1, 0, 0, 0, 0, 22, 132, 3, 0, 0, 0, 0, 0, 40, 52, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 58, 0, 0, 0, 0, 15, 119, 110, 158, 5, 0, 0, 0, 102, 99, 126, 97, 0, 0, 0, 0, 92, 145, 179, 13, 0, 0, 0, 0, 2, 97, 86, 0, 0, 0, 0, 0, 37, 148, 0, 0, 0, 0, 0, 0, 48, 54, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 54, 21, 0, 0, 0, 0, 57, 140, 117, 144, 0, 0, 0, 0, 120, 81, 167, 114, 0, 0, 0, 0, 124, 181, 233, 59, 0, 0, 0, 0, 27, 87, 145, 2, 0, 0, 0, 0, 0, 96, 24, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 176, 157, 165, 73, 0, 0, 0, 153, 79, 80, 191, 209, 10, 0, 0, 92, 142, 86, 7, 140, 95, 0, 0, 0, 0, 0, 0, 65, 142, 0, 0, 0, 0, 0, 0, 63, 122, 0, 0, 0, 0, 0, 0, 20, 69, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 154, 160, 96, 0, 0, 0, 0, 20, 176, 177, 187, 34, 0, 0, 0, 0, 6, 7, 138, 106, 0, 0, 0, 0, 0, 0, 138, 120, 0, 0, 0, 0, 0, 0, 133, 120, 0, 0, 0, 0, 0, 0, 70, 82, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 106, 0, 0, 0, 0, 0, 25, 221, 210, 0, 0, 0, 0, 0, 111, 233, 130, 0, 0, 0, 0, 0, 111, 176, 13, 0, 0, 0, 0, 37, 176, 42, 0, 0, 0, 0, 83, 177, 63, 0, 0, 0, 0, 0, 33, 29, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 58, 30, 0, 0, 0, 0, 13, 119, 73, 130, 0, 0, 0, 0, 54, 122, 73, 85, 0, 0, 0, 0, 7, 102, 143, 3, 0, 0, 0, 0, 0, 104, 44, 0, 0, 0, 0, 0, 90, 97, 0, 0, 0, 0, 0, 0, 57, 8, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 13, 0, 0, 0, 0, 0, 57, 182, 154, 105, 0, 0, 0, 0, 58, 169, 142, 82, 0, 0, 0, 0, 0, 57, 188, 49, 0, 0, 0, 0, 0, 0, 166, 26, 0, 0, 0, 0, 0, 42, 110, 0, 0, 0, 0, 0, 0, 47, 21, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 137, 162, 179, 0, 0, 0, 48, 153, 63, 86, 209, 0, 0, 0, 59, 140, 116, 206, 92, 0, 0, 0, 0, 19, 6, 175, 25, 0, 0, 0, 0, 0, 7, 120, 0, 0, 0, 0, 0, 0, 11, 48, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 86, 143, 150, 0, 0, 0, 0, 59, 141, 36, 156, 1, 0, 0, 0, 104, 146, 210, 73, 0, 0, 0, 0, 14, 66, 129, 4, 0, 0, 0, 0, 19, 142, 10, 0, 0, 0, 0, 0, 48, 77, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 23, 0, 0, 0, 0, 0, 83, 245, 225, 165, 26, 0, 0, 0, 128, 226, 62, 197, 156, 32, 0, 0, 39, 212, 212, 215, 254, 106, 0, 0, 0, 39, 106, 105, 184, 142, 0, 0, 0, 0, 0, 0, 139, 143, 0, 0, 0, 0, 0, 0, 60, 54, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 30, 0, 0, 0, 0, 0, 92, 104, 109, 88, 0, 0, 0, 0, 127, 1, 10, 136, 0, 0, 0, 0, 125, 115, 100, 143, 0, 0, 0, 0, 5, 21, 0, 104, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 91, 129, 141, 124, 0, 0, 0, 0, 124, 8, 74, 108, 0, 0, 0, 0, 117, 149, 192, 69, 0, 0, 0, 0, 4, 16, 111, 30, 0, 0, 0, 0, 0, 0, 109, 9, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 28, 0, 0, 0, 0, 0, 65, 57, 101, 49, 0, 0, 0, 0, 74, 0, 93, 82, 0, 0, 0, 0, 127, 112, 151, 75, 0, 0, 0, 0, 40, 55, 94, 58, 0, 0, 0, 0, 0, 0, 88, 37, 0, 0, 0, 0, 0, 0, 44, 15, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148, 147, 136, 108, 24, 0, 0, 0, 146, 13, 0, 123, 197, 16, 0, 0, 19, 127, 101, 127, 205, 16, 0, 0, 0, 0, 3, 14, 163, 1, 0, 0, 0, 0, 0, 0, 115, 53, 0, 0, 0, 0, 0, 0, 39, 106, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 32, 0, 0, 0, 0, 0, 88, 215, 203, 10, 0, 0, 0, 3, 175, 205, 144, 0, 0, 0, 0, 0, 61, 224, 43, 0, 0, 0, 0, 4, 134, 125, 0, 0, 0, 0, 0, 118, 172, 4, 0, 0, 0, 0, 0, 59, 27, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 111, 152, 125, 0, 0, 0, 0, 67, 91, 127, 89, 0, 0, 0, 0, 18, 117, 126, 0, 0, 0, 0, 0, 0, 85, 26, 0, 0, 0, 0, 0, 28, 105, 0, 0, 0, 0, 0, 0, 59, 73, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 121, 153, 3, 0, 0, 0, 0, 106, 36, 161, 1, 0, 0, 0, 0, 117, 106, 146, 67, 0, 0, 0, 0, 2, 0, 76, 143, 0, 0, 0, 0, 0, 0, 15, 155, 0, 0, 0, 0, 0, 0, 0, 94, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 47, 4, 0, 0, 0, 6, 160, 202, 221, 145, 0, 0, 0, 51, 143, 24, 114, 229, 0, 0, 0, 65, 191, 173, 239, 198, 0, 0, 0, 7, 109, 118, 143, 132, 0, 0, 0, 0, 0, 0, 167, 77, 0, 0, 0, 0, 0, 0, 88, 18, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 106, 159, 69, 0, 0, 0, 0, 62, 101, 87, 73, 0, 0, 0, 0, 49, 130, 142, 29, 0, 0, 0, 0, 0, 0, 96, 2, 0, 0, 0, 0, 0, 0, 88, 0, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 58, 56, 0, 0, 0, 0, 111, 202, 144, 171, 35, 0, 0, 41, 171, 56, 3, 132, 50, 0, 0, 108, 145, 126, 206, 216, 0, 0, 0, 16, 138, 148, 119, 158, 0, 0, 0, 0, 0, 0, 135, 97, 0, 0, 0, 0, 0, 0, 71, 29, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 34, 2, 0, 0, 0, 0, 0, 74, 121, 14, 0, 0, 0, 0, 0, 47, 129, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 16, 76, 0, 0, 0, 0, 0, 0, 70, 13, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 41, 1, 0, 0, 0, 0, 101, 156, 183, 106, 0, 0, 0, 0, 134, 61, 185, 121, 0, 0, 0, 0, 88, 167, 197, 66, 0, 0, 0, 0, 0, 0, 176, 30, 0, 0, 0, 0, 0, 16, 173, 2, 0, 0, 0, 0, 0, 15, 64, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 7, 0, 0, 0, 0, 9, 138, 187, 82, 0, 0, 0, 0, 74, 153, 136, 85, 0, 0, 0, 0, 82, 193, 224, 85, 0, 0, 0, 0, 8, 57, 168, 57, 0, 0, 0, 0, 0, 0, 177, 13, 0, 0, 0, 0, 0, 0, 59, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 11, 0, 0, 0, 0, 0, 19, 171, 177, 12, 0, 0, 0, 0, 1, 55, 126, 23, 0, 0, 0, 0, 0, 0, 112, 1, 0, 0, 0, 0, 0, 5, 106, 0, 0, 0, 0, 0, 0, 24, 111, 4, 0, 0, 0, 0, 0, 10, 67, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 55, 3, 0, 0, 0, 0, 29, 166, 103, 161, 94, 9, 0, 0, 77, 91, 0, 61, 234, 39, 0, 0, 16, 167, 126, 101, 210, 4, 0, 0, 0, 25, 77, 91, 181, 0, 0, 0, 0, 0, 0, 0, 143, 24, 0, 0, 0, 0, 0, 0, 58, 21, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 97, 110, 46, 0, 0, 0, 0, 184, 93, 46, 184, 30, 0, 0, 0, 189, 62, 96, 210, 106, 0, 0, 0, 91, 129, 92, 113, 116, 0, 0, 0, 102, 7, 28, 181, 53, 0, 0, 0, 146, 178, 177, 72, 0, 0, 0, 0, 19, 60, 23, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 121, 149, 74, 0, 0, 0, 0, 80, 89, 90, 90, 0, 0, 0, 0, 88, 128, 121, 4, 0, 0, 0, 0, 7, 12, 83, 0, 0, 0, 0, 0, 0, 20, 73, 0, 0, 0, 0, 0, 0, 51, 39, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 101, 130, 29, 0, 0, 0, 0, 120, 86, 83, 138, 0, 0, 0, 0, 129, 88, 103, 105, 0, 0, 0, 0, 29, 13, 105, 41, 0, 0, 0, 0, 0, 0, 102, 0, 0, 0, 0, 0, 0, 0, 63, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98, 172, 200, 198, 17, 0, 0, 99, 195, 101, 42, 160, 53, 0, 0, 101, 209, 189, 205, 172, 28, 0, 0, 2, 48, 69, 169, 139, 0, 0, 0, 0, 0, 0, 143, 154, 0, 0, 0, 0, 0, 0, 58, 95, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 47, 6, 0, 0, 0, 0, 68, 219, 251, 85, 0, 0, 0, 0, 141, 252, 248, 71, 0, 0, 0, 0, 30, 90, 198, 91, 0, 0, 0, 0, 0, 0, 182, 95, 0, 0, 0, 0, 0, 0, 181, 149, 0, 0, 0, 0, 0, 0, 76, 56, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 48, 8, 0, 0, 0, 0, 70, 128, 97, 126, 0, 0, 0, 0, 119, 15, 60, 118, 0, 0, 0, 0, 137, 153, 190, 58, 0, 0, 0, 0, 16, 19, 127, 4, 0, 0, 0, 0, 0, 45, 83, 0, 0, 0, 0, 0, 0, 30, 23, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 46, 7, 0, 0, 0, 0, 102, 160, 137, 127, 0, 0, 0, 0, 132, 12, 35, 156, 0, 0, 0, 0, 153, 114, 214, 107, 0, 0, 0, 0, 88, 118, 146, 23, 0, 0, 0, 0, 0, 14, 129, 0, 0, 0, 0, 0, 0, 15, 64, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 111, 139, 126, 171, 0, 0, 0, 103, 78, 10, 18, 160, 0, 0, 0, 45, 137, 126, 96, 135, 0, 0, 0, 0, 0, 0, 0, 108, 0, 0, 0, 0, 0, 0, 19, 139, 0, 0, 0, 0, 0, 0, 17, 85, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 111, 162, 113, 0, 0, 0, 0, 105, 30, 68, 141, 0, 0, 0, 0, 119, 112, 144, 77, 0, 0, 0, 0, 40, 78, 119, 32, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0, 0, 0, 0, 0, 78, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 43, 21, 0, 0, 0, 0, 0, 177, 151, 156, 132, 0, 0, 0, 0, 206, 56, 39, 178, 0, 0, 0, 0, 108, 170, 214, 203, 0, 0, 0, 0, 3, 65, 196, 97, 0, 0, 0, 0, 0, 0, 199, 79, 0, 0, 0, 0, 0, 0, 113, 53, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 136, 157, 116, 0, 0, 0, 0, 102, 102, 119, 108, 0, 0, 0, 0, 101, 182, 175, 22, 0, 0, 0, 0, 7, 28, 124, 0, 0, 0, 0, 0, 0, 53, 63, 0, 0, 0, 0, 0, 0, 68, 21, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79, 159, 145, 68, 0, 0, 0, 0, 178, 75, 179, 190, 0, 0, 0, 0, 97, 97, 69, 141, 0, 0, 0, 0, 0, 0, 93, 133, 0, 0, 0, 0, 0, 0, 106, 109, 0, 0, 0, 0, 0, 0, 82, 78, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 126, 168, 172, 168, 0, 0, 1, 102, 122, 38, 118, 186, 0, 0, 8, 150, 126, 114, 145, 168, 0, 0, 0, 14, 35, 3, 63, 182, 0, 0, 0, 0, 0, 0, 35, 196, 0, 0, 0, 0, 0, 0, 12, 150, 7, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 43, 28, 0, 0, 0, 0, 0, 110, 146, 140, 80, 0, 0, 0, 0, 57, 138, 168, 117, 0, 0, 0, 0, 0, 1, 180, 19, 0, 0, 0, 0, 0, 51, 117, 0, 0, 0, 0, 0, 10, 156, 17, 0, 0, 0, 0, 0, 16, 81, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 122, 145, 112, 0, 0, 0, 0, 115, 35, 176, 119, 0, 0, 0, 0, 107, 116, 138, 30, 0, 0, 0, 0, 0, 0, 121, 2, 0, 0, 0, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 66, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 144, 153, 88, 0, 0, 0, 0, 81, 137, 109, 166, 0, 0, 0, 0, 8, 85, 228, 117, 0, 0, 0, 0, 0, 17, 166, 16, 0, 0, 0, 0, 0, 76, 82, 0, 0, 0, 0, 0, 0, 77, 21, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 23, 0, 0, 0, 0, 0, 42, 158, 124, 73, 0, 0, 0, 0, 80, 97, 55, 71, 0, 0, 0, 0, 51, 154, 175, 35, 0, 0, 0, 0, 0, 0, 131, 9, 0, 0, 0, 0, 0, 10, 117, 0, 0, 0, 0, 0, 0, 12, 48, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 126, 105, 74, 24, 0, 0, 0, 136, 77, 129, 125, 35, 0, 0, 0, 12, 48, 146, 19, 23, 0, 0, 0, 0, 11, 122, 0, 0, 0, 0, 0, 0, 109, 32, 0, 0, 0, 0, 0, 1, 103, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 159, 176, 185, 113, 0, 0, 0, 42, 169, 48, 189, 162, 0, 0, 0, 3, 114, 127, 127, 162, 0, 0, 0, 0, 0, 0, 117, 162, 0, 0, 0, 0, 0, 0, 117, 149, 0, 0, 0, 0, 0, 0, 85, 73, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 49, 39, 0, 0, 0, 0, 40, 125, 78, 175, 71, 0, 0, 0, 102, 8, 0, 87, 60, 0, 0, 0, 52, 104, 65, 103, 129, 0, 0, 0, 0, 57, 91, 26, 112, 0, 0, 0, 0, 0, 0, 0, 100, 105, 0, 0, 0, 0, 0, 0, 18, 63, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 33, 0, 0, 0, 0, 0, 25, 146, 127, 38, 0, 0, 0, 0, 73, 176, 188, 57, 0, 0, 0, 0, 6, 35, 131, 14, 0, 0, 0, 0, 0, 24, 111, 0, 0, 0, 0, 0, 0, 111, 24, 0, 0, 0, 0, 0, 0, 51, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 36, 0, 0, 0, 0, 15, 113, 137, 130, 0, 0, 0, 0, 70, 170, 85, 123, 0, 0, 0, 0, 2, 45, 158, 82, 0, 0, 0, 0, 0, 17, 146, 7, 0, 0, 0, 0, 14, 132, 30, 0, 0, 0, 0, 0, 28, 75, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 171, 104, 86, 6, 0, 0, 0, 144, 85, 134, 193, 7, 0, 0, 0, 26, 73, 173, 18, 0, 0, 0, 0, 0, 40, 132, 0, 0, 0, 0, 0, 5, 143, 20, 0, 0, 0, 0, 0, 46, 120, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 41, 11, 0, 0, 0, 0, 57, 155, 147, 159, 0, 0, 0, 0, 164, 126, 137, 144, 0, 0, 0, 0, 36, 68, 184, 102, 0, 0, 0, 0, 0, 7, 191, 25, 0, 0, 0, 0, 0, 91, 91, 0, 0, 0, 0, 0, 0, 70, 23, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 42, 40, 5, 0, 0, 0, 0, 131, 89, 75, 157, 19, 0, 0, 0, 179, 125, 125, 189, 32, 0, 0, 0, 50, 26, 145, 124, 0, 0, 0, 0, 0, 28, 156, 7, 0, 0, 0, 0, 10, 139, 61, 0, 0, 0, 0, 0, 15, 105, 11, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 22, 0, 0, 0, 0, 39, 131, 85, 82, 0, 0, 0, 0, 161, 105, 102, 152, 0, 0, 0, 0, 91, 64, 134, 86, 0, 0, 0, 0, 0, 35, 135, 8, 0, 0, 0, 0, 37, 163, 7, 0, 0, 0, 0, 0, 40, 68, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 89, 176, 218, 204, 46, 0, 0, 0, 230, 224, 162, 191, 112, 0, 0, 0, 87, 139, 207, 207, 10, 0, 0, 0, 0, 82, 208, 62, 0, 0, 0, 0, 99, 212, 31, 0, 0, 0, 0, 0, 105, 79, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 58, 37, 0, 0, 0, 0, 44, 145, 70, 111, 0, 0, 0, 0, 99, 181, 169, 109, 0, 0, 0, 0, 0, 3, 168, 21, 0, 0, 0, 0, 0, 38, 128, 0, 0, 0, 0, 0, 0, 147, 21, 0, 0, 0, 0, 0, 1, 76, 3, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 212, 86, 0, 0, 0, 0, 35, 137, 163, 47, 0, 0, 0, 0, 57, 131, 150, 0, 0, 0, 0, 0, 0, 0, 129, 0, 0, 0, 0, 0, 0, 0, 123, 0, 0, 0, 0, 0, 0, 14, 77, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 123, 122, 188, 50, 0, 0, 0, 144, 94, 115, 198, 11, 0, 0, 0, 40, 108, 183, 25, 0, 0, 0, 0, 1, 115, 48, 0, 0, 0, 0, 0, 101, 109, 0, 0, 0, 0, 0, 0, 103, 28, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 104, 127, 172, 0, 0, 0, 0, 111, 86, 96, 189, 0, 0, 0, 0, 68, 139, 198, 38, 0, 0, 0, 0, 0, 71, 94, 0, 0, 0, 0, 0, 13, 143, 2, 0, 0, 0, 0, 0, 43, 97, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 66, 0, 0, 0, 0, 0, 104, 176, 49, 142, 1, 0, 0, 7, 160, 27, 50, 193, 0, 0, 0, 29, 168, 88, 170, 170, 0, 0, 0, 2, 87, 86, 101, 138, 0, 0, 0, 0, 0, 0, 58, 144, 0, 0, 0, 0, 0, 0, 3, 27, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 48, 18, 0, 0, 0, 0, 70, 149, 61, 122, 0, 0, 0, 0, 113, 153, 105, 166, 0, 0, 0, 0, 0, 1, 133, 92, 0, 0, 0, 0, 0, 22, 144, 11, 0, 0, 0, 0, 14, 144, 21, 0, 0, 0, 0, 0, 27, 68, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 44, 5, 0, 0, 0, 0, 101, 115, 56, 104, 0, 0, 0, 0, 145, 85, 95, 132, 0, 0, 0, 0, 0, 28, 152, 7, 0, 0, 0, 0, 0, 55, 97, 0, 0, 0, 0, 0, 3, 143, 26, 0, 0, 0, 0, 0, 8, 69, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 39, 0, 0, 0, 0, 0, 76, 116, 86, 76, 0, 0, 0, 0, 129, 31, 51, 124, 0, 0, 0, 0, 106, 97, 154, 93, 0, 0, 0, 0, 15, 95, 143, 85, 0, 0, 0, 0, 0, 0, 104, 87, 0, 0, 0, 0, 0, 0, 33, 40, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 50, 0, 0, 0, 0, 36, 150, 112, 171, 24, 0, 0, 3, 151, 70, 39, 185, 6, 0, 0, 61, 124, 69, 209, 191, 0, 0, 0, 27, 167, 142, 142, 122, 0, 0, 0, 0, 0, 0, 161, 36, 0, 0, 0, 0, 0, 0, 61, 23, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 149, 161, 154, 0, 0, 0, 0, 162, 190, 121, 129, 0, 0, 0, 0, 40, 84, 216, 97, 0, 0, 0, 0, 0, 35, 178, 17, 0, 0, 0, 0, 0, 129, 47, 0, 0, 0, 0, 0, 0, 101, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 60, 20, 0, 0, 0, 0, 0, 79, 91, 70, 94, 76, 0, 0, 0, 46, 65, 0, 83, 164, 0, 0, 0, 1, 95, 17, 95, 163, 0, 0, 0, 0, 38, 107, 157, 149, 0, 0, 0, 0, 0, 0, 25, 128, 0, 0, 0, 0, 0, 0, 10, 56, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 36, 0, 0, 0, 0, 49, 117, 61, 87, 41, 0, 0, 13, 117, 23, 16, 90, 32, 0, 0, 62, 117, 84, 144, 133, 0, 0, 0, 3, 51, 17, 66, 119, 0, 0, 0, 0, 0, 0, 86, 98, 0, 0, 0, 0, 0, 0, 52, 36, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 56, 10, 0, 0, 0, 0, 40, 112, 61, 71, 0, 0, 0, 0, 116, 55, 39, 108, 0, 0, 0, 0, 118, 77, 190, 88, 0, 0, 0, 0, 44, 117, 158, 63, 0, 0, 0, 0, 0, 0, 118, 28, 0, 0, 0, 0, 0, 0, 51, 7, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 130, 149, 180, 0, 0, 0, 0, 175, 133, 43, 133, 53, 0, 0, 0, 91, 119, 173, 215, 14, 0, 0, 0, 0, 20, 188, 67, 0, 0, 0, 0, 27, 163, 35, 0, 0, 0, 0, 0, 62, 95, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 160, 165, 190, 61, 0, 0, 0, 90, 221, 121, 182, 65, 0, 0, 0, 0, 44, 211, 144, 0, 0, 0, 0, 12, 132, 142, 15, 0, 0, 0, 0, 173, 147, 0, 0, 0, 0, 0, 1, 153, 27, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 28, 0, 0, 0, 0, 39, 155, 109, 138, 0, 0, 0, 0, 160, 122, 101, 168, 0, 0, 0, 0, 101, 119, 178, 112, 0, 0, 0, 0, 0, 24, 164, 18, 0, 0, 0, 0, 0, 123, 34, 0, 0, 0, 0, 0, 0, 61, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 45, 2, 0, 0, 0, 0, 63, 149, 141, 74, 0, 0, 0, 0, 105, 93, 192, 74, 0, 0, 0, 0, 39, 120, 167, 10, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 0, 0, 0, 47, 95, 0, 0, 0, 0, 0, 0, 34, 31, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 47, 8, 0, 0, 0, 0, 88, 199, 156, 138, 0, 0, 0, 7, 189, 58, 95, 202, 20, 0, 0, 32, 202, 137, 149, 206, 10, 0, 0, 2, 74, 34, 196, 105, 0, 0, 0, 0, 0, 78, 105, 0, 0, 0, 0, 0, 0, 49, 17, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 114, 159, 144, 0, 0, 0, 0, 147, 128, 84, 146, 0, 0, 0, 0, 123, 126, 186, 109, 0, 0, 0, 0, 0, 0, 191, 44, 0, 0, 0, 0, 0, 56, 118, 0, 0, 0, 0, 0, 0, 76, 19, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 46, 28, 0, 0, 0, 0, 45, 130, 78, 126, 98, 1, 0, 0, 84, 25, 0, 52, 179, 1, 0, 0, 20, 117, 83, 71, 183, 0, 0, 0, 0, 0, 0, 46, 201, 0, 0, 0, 0, 0, 0, 1, 152, 16, 0, 0, 0, 0, 0, 0, 43, 15, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 46, 6, 0, 0, 0, 19, 150, 121, 174, 4, 0, 0, 0, 99, 187, 149, 178, 0, 0, 0, 0, 9, 60, 216, 38, 0, 0, 0, 0, 0, 76, 143, 0, 0, 0, 0, 0, 81, 182, 23, 0, 0, 0, 0, 0, 66, 33, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 15, 0, 0, 0, 0, 0, 74, 152, 140, 41, 0, 0, 0, 0, 111, 60, 152, 86, 0, 0, 0, 0, 59, 121, 167, 40, 0, 0, 0, 0, 0, 8, 112, 37, 0, 0, 0, 0, 0, 0, 137, 56, 0, 0, 0, 0, 0, 0, 58, 26, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 128, 220, 228, 41, 0, 0, 0, 195, 231, 209, 209, 5, 0, 0, 0, 0, 0, 179, 78, 0, 0, 0, 0, 0, 43, 169, 10, 0, 0, 0, 0, 4, 164, 33, 0, 0, 0, 0, 0, 32, 126, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 46, 10, 0, 0, 0, 0, 0, 130, 45, 100, 0, 0, 0, 0, 0, 121, 0, 101, 2, 0, 0, 0, 0, 112, 137, 145, 98, 0, 0, 0, 0, 5, 13, 9, 124, 0, 0, 0, 0, 0, 0, 0, 104, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 155, 215, 199, 20, 0, 0, 0, 163, 171, 119, 227, 32, 0, 0, 16, 183, 163, 147, 219, 8, 0, 0, 0, 0, 4, 195, 119, 0, 0, 0, 0, 0, 111, 135, 0, 0, 0, 0, 0, 4, 131, 15, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 26, 0, 0, 0, 0, 0, 0, 115, 190, 7, 0, 0, 0, 0, 0, 152, 99, 150, 27, 0, 0, 0, 0, 55, 191, 175, 95, 0, 0, 0, 0, 0, 16, 92, 134, 0, 0, 0, 0, 0, 0, 89, 119, 0, 0, 0, 0, 0, 0, 24, 44, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 169, 158, 186, 4, 0, 0, 0, 153, 193, 143, 204, 2, 0, 0, 0, 21, 56, 100, 167, 0, 0, 0, 0, 0, 12, 197, 72, 0, 0, 0, 0, 9, 168, 64, 0, 0, 0, 0, 0, 30, 138, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 41, 8, 0, 0, 0, 0, 0, 82, 62, 128, 45, 0, 0, 0, 0, 86, 0, 169, 68, 0, 0, 0, 0, 92, 80, 126, 58, 0, 0, 0, 0, 2, 2, 101, 61, 0, 0, 0, 0, 0, 0, 87, 45, 0, 0, 0, 0, 0, 0, 40, 19, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 140, 163, 42, 0, 0, 0, 0, 111, 168, 179, 76, 0, 0, 0, 0, 1, 6, 156, 38, 0, 0, 0, 0, 0, 15, 137, 0, 0, 0, 0, 0, 0, 92, 49, 0, 0, 0, 0, 0, 0, 80, 6, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 63, 42, 0, 0, 0, 0, 99, 166, 84, 134, 0, 0, 0, 0, 178, 93, 117, 164, 0, 0, 0, 0, 62, 81, 70, 174, 0, 0, 0, 0, 0, 1, 166, 102, 0, 0, 0, 0, 0, 70, 128, 6, 0, 0, 0, 0, 0, 53, 21, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 140, 143, 62, 0, 0, 0, 0, 125, 29, 143, 107, 0, 0, 0, 0, 63, 89, 161, 13, 0, 0, 0, 0, 0, 0, 123, 30, 0, 0, 0, 0, 0, 0, 108, 78, 0, 0, 0, 0, 0, 0, 49, 83, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 48, 33, 0, 0, 0, 0, 63, 167, 99, 170, 6, 0, 0, 6, 182, 76, 86, 151, 2, 0, 0, 6, 150, 136, 204, 114, 0, 0, 0, 0, 0, 38, 171, 23, 0, 0, 0, 0, 0, 140, 24, 0, 0, 0, 0, 0, 0, 62, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 39, 3, 0, 0, 0, 0, 80, 109, 55, 61, 0, 0, 0, 0, 139, 54, 87, 126, 0, 0, 0, 0, 48, 137, 129, 98, 0, 0, 0, 0, 0, 0, 50, 100, 0, 0, 0, 0, 0, 0, 28, 132, 0, 0, 0, 0, 0, 0, 1, 38, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 123, 118, 119, 123, 26, 0, 0, 96, 35, 0, 0, 105, 51, 0, 0, 40, 133, 68, 104, 182, 14, 0, 0, 0, 60, 98, 88, 129, 0, 0, 0, 0, 0, 0, 0, 126, 0, 0, 0, 0, 0, 0, 0, 82, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 35, 0, 0, 0, 0, 26, 126, 69, 137, 0, 0, 0, 0, 114, 55, 141, 202, 2, 0, 0, 2, 145, 88, 206, 79, 0, 0, 0, 0, 80, 134, 131, 5, 0, 0, 0, 0, 38, 150, 4, 0, 0, 0, 0, 0, 46, 57, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 35, 0, 0, 0, 0, 0, 115, 159, 123, 99, 0, 0, 0, 0, 151, 19, 99, 135, 0, 0, 0, 0, 95, 115, 187, 31, 0, 0, 0, 0, 0, 0, 135, 0, 0, 0, 0, 0, 0, 0, 183, 23, 0, 0, 0, 0, 0, 0, 91, 35, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 39, 0, 0, 0, 0, 35, 124, 84, 143, 0, 0, 0, 0, 135, 44, 94, 156, 11, 0, 0, 6, 141, 81, 191, 152, 1, 0, 0, 0, 81, 107, 168, 33, 0, 0, 0, 0, 45, 148, 15, 0, 0, 0, 0, 0, 56, 51, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 38, 0, 0, 0, 0, 20, 105, 102, 150, 4, 0, 0, 0, 125, 80, 76, 214, 18, 0, 0, 0, 157, 85, 218, 126, 0, 0, 0, 0, 107, 101, 152, 30, 22, 14, 0, 0, 6, 125, 42, 0, 20, 17, 0, 0, 16, 82, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 90, 96, 0, 0, 0, 0, 54, 146, 37, 80, 67, 0, 0, 0, 140, 38, 0, 112, 68, 0, 0, 4, 146, 29, 112, 138, 0, 0, 0, 0, 101, 134, 199, 37, 0, 0, 0, 0, 0, 85, 100, 0, 0, 0, 0, 0, 0, 30, 4, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 117, 97, 104, 17, 0, 0, 0, 0, 116, 11, 170, 54, 0, 0, 0, 0, 62, 111, 148, 30, 0, 0, 0, 0, 0, 0, 128, 34, 0, 0, 0, 0, 0, 0, 121, 73, 0, 0, 0, 0, 0, 0, 72, 62, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 49, 0, 0, 0, 0, 10, 106, 107, 177, 3, 0, 0, 0, 114, 113, 89, 209, 13, 0, 0, 13, 164, 100, 196, 135, 0, 0, 0, 2, 115, 96, 163, 39, 0, 0, 0, 0, 2, 121, 51, 0, 0, 0, 0, 0, 7, 69, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 106, 16, 0, 0, 0, 5, 106, 99, 146, 70, 0, 0, 0, 91, 115, 44, 209, 47, 0, 0, 0, 132, 160, 182, 55, 0, 0, 0, 0, 42, 166, 66, 0, 0, 0, 0, 0, 171, 111, 0, 0, 0, 0, 0, 0, 43, 8, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 26, 0, 0, 0, 0, 16, 109, 109, 129, 0, 0, 0, 0, 98, 76, 129, 164, 0, 0, 0, 0, 55, 139, 187, 53, 0, 0, 0, 0, 0, 45, 88, 0, 0, 0, 0, 0, 53, 120, 0, 0, 0, 0, 0, 0, 54, 30, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 48, 4, 0, 0, 0, 0, 95, 116, 115, 100, 0, 0, 0, 0, 127, 9, 108, 94, 0, 0, 0, 0, 116, 99, 154, 101, 0, 0, 0, 0, 9, 24, 64, 122, 0, 0, 0, 0, 0, 0, 14, 135, 0, 0, 0, 0, 0, 0, 2, 72, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 92, 116, 111, 93, 0, 0, 0, 38, 99, 2, 0, 44, 1, 0, 0, 104, 21, 0, 3, 56, 111, 0, 0, 32, 112, 86, 78, 77, 107, 24, 0, 0, 0, 0, 0, 0, 56, 21, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 37, 0, 0, 0, 0, 5, 151, 143, 187, 13, 0, 0, 0, 28, 126, 1, 173, 42, 0, 0, 0, 1, 127, 129, 187, 118, 0, 0, 0, 0, 3, 45, 98, 173, 2, 0, 0, 0, 0, 0, 0, 109, 95, 0, 0, 0, 0, 0, 0, 10, 63, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 90, 114, 8, 0, 0, 0, 69, 138, 44, 101, 47, 0, 0, 22, 147, 30, 62, 187, 10, 0, 0, 55, 156, 128, 224, 88, 0, 0, 0, 0, 55, 99, 123, 5, 0, 0, 0, 0, 38, 194, 10, 0, 0, 0, 0, 0, 14, 38, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 26, 0, 0, 0, 0, 0, 64, 114, 135, 74, 0, 0, 0, 0, 103, 120, 177, 53, 0, 0, 0, 0, 2, 27, 133, 0, 0, 0, 0, 0, 0, 46, 99, 0, 0, 0, 0, 0, 0, 100, 20, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 41, 0, 0, 0, 0, 44, 129, 106, 173, 26, 0, 0, 0, 135, 47, 125, 194, 38, 0, 0, 0, 124, 114, 199, 80, 0, 0, 0, 0, 0, 87, 81, 0, 0, 0, 0, 0, 116, 156, 0, 0, 0, 0, 0, 0, 75, 28, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 53, 5, 0, 0, 0, 8, 92, 104, 114, 46, 0, 0, 0, 84, 99, 76, 206, 4, 0, 0, 0, 69, 118, 188, 36, 0, 0, 0, 0, 0, 84, 61, 0, 0, 0, 0, 0, 93, 90, 0, 0, 0, 0, 0, 0, 66, 5, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 35, 0, 0, 0, 0, 0, 43, 124, 139, 0, 0, 0, 0, 38, 138, 149, 180, 8, 0, 0, 0, 126, 94, 207, 81, 0, 0, 0, 0, 67, 131, 112, 1, 0, 0, 0, 0, 12, 134, 4, 0, 0, 0, 0, 0, 27, 64, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 22, 0, 0, 0, 0, 58, 148, 95, 152, 0, 0, 0, 0, 189, 90, 0, 127, 0, 0, 0, 0, 187, 201, 134, 170, 0, 0, 0, 0, 21, 61, 53, 162, 0, 0, 0, 0, 0, 0, 140, 79, 0, 0, 0, 0, 0, 0, 83, 5, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 98, 114, 4, 0, 0, 0, 35, 146, 44, 124, 31, 0, 0, 6, 146, 60, 6, 178, 63, 0, 0, 89, 52, 22, 152, 154, 0, 0, 0, 87, 130, 130, 224, 58, 0, 0, 0, 0, 0, 103, 87, 0, 0, 0, 0, 0, 0, 33, 1, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 46, 14, 0, 0, 0, 0, 125, 118, 63, 141, 0, 0, 0, 24, 104, 0, 31, 175, 0, 0, 0, 26, 131, 69, 131, 148, 0, 0, 0, 0, 70, 99, 28, 127, 0, 0, 0, 0, 0, 0, 0, 120, 10, 0, 0, 0, 0, 0, 0, 35, 12, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 44, 8, 0, 0, 0, 0, 5, 195, 127, 129, 49, 0, 0, 0, 7, 192, 27, 95, 141, 0, 0, 0, 0, 78, 185, 222, 112, 0, 0, 0, 0, 0, 9, 99, 150, 0, 0, 0, 0, 0, 0, 72, 189, 0, 0, 0, 0, 0, 0, 36, 82, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 189, 165, 140, 0, 0, 0, 0, 127, 163, 133, 107, 0, 0, 0, 0, 7, 53, 186, 35, 0, 0, 0, 0, 0, 2, 174, 9, 0, 0, 0, 0, 0, 49, 136, 0, 0, 0, 0, 0, 0, 63, 56, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 153, 161, 110, 0, 0, 0, 0, 29, 168, 182, 120, 0, 0, 0, 0, 0, 1, 156, 19, 0, 0, 0, 0, 0, 37, 112, 0, 0, 0, 0, 0, 0, 118, 34, 0, 0, 0, 0, 0, 0, 89, 4, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 35, 0, 0, 0, 0, 0, 105, 159, 194, 42, 0, 0, 0, 0, 174, 125, 237, 57, 0, 0, 0, 0, 132, 231, 203, 138, 0, 0, 0, 0, 14, 49, 111, 197, 1, 0, 0, 0, 0, 0, 4, 157, 47, 0, 0, 0, 0, 0, 0, 22, 12, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 63, 35, 0, 0, 0, 0, 139, 199, 127, 195, 0, 0, 0, 16, 211, 39, 87, 207, 0, 0, 0, 4, 163, 211, 251, 127, 0, 0, 0, 0, 0, 47, 211, 35, 0, 0, 0, 0, 0, 123, 107, 0, 0, 0, 0, 0, 0, 51, 27, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 194, 193, 66, 0, 0, 0, 0, 191, 170, 219, 175, 0, 0, 0, 0, 40, 83, 211, 80, 0, 0, 0, 0, 0, 16, 193, 24, 0, 0, 0, 0, 0, 121, 96, 0, 0, 0, 0, 0, 0, 126, 27, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 31, 1, 0, 0, 0, 0, 144, 169, 150, 92, 0, 0, 0, 10, 195, 18, 100, 152, 0, 0, 0, 0, 157, 192, 191, 179, 0, 0, 0, 0, 4, 8, 83, 167, 0, 0, 0, 0, 0, 0, 86, 203, 0, 0, 0, 0, 0, 0, 27, 84, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 41, 2, 0, 0, 0, 0, 112, 182, 180, 176, 0, 0, 0, 0, 193, 159, 208, 204, 0, 0, 0, 0, 28, 61, 165, 106, 0, 0, 0, 0, 0, 6, 186, 32, 0, 0, 0, 0, 0, 97, 182, 10, 0, 0, 0, 0, 0, 65, 45, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 40, 0, 0, 0, 0, 0, 67, 166, 137, 20, 0, 0, 0, 0, 142, 71, 70, 37, 0, 0, 0, 0, 103, 192, 223, 86, 0, 0, 0, 0, 8, 30, 131, 85, 0, 0, 0, 0, 0, 0, 81, 137, 0, 0, 0, 0, 0, 0, 28, 68, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 28, 20, 0, 0, 0, 0, 32, 196, 164, 155, 159, 8, 0, 0, 98, 113, 2, 4, 157, 88, 0, 0, 26, 196, 153, 177, 242, 25, 0, 0, 0, 37, 97, 70, 198, 9, 0, 0, 0, 0, 0, 1, 153, 36, 0, 0, 0, 0, 0, 0, 35, 18, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 57, 23, 0, 0, 0, 0, 136, 215, 164, 198, 49, 0, 0, 19, 210, 66, 35, 202, 91, 0, 0, 13, 207, 218, 247, 186, 13, 0, 0, 0, 29, 56, 224, 98, 0, 0, 0, 0, 0, 45, 211, 26, 0, 0, 0, 0, 0, 23, 82, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 203, 199, 143, 0, 0, 0, 0, 215, 163, 139, 179, 0, 0, 0, 0, 87, 123, 215, 123, 0, 0, 0, 0, 0, 19, 199, 39, 0, 0, 0, 0, 0, 135, 95, 0, 0, 0, 0, 0, 0, 115, 47, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 39, 1, 0, 0, 0, 0, 0, 102, 80, 149, 82, 0, 0, 0, 0, 125, 5, 194, 107, 0, 0, 0, 0, 124, 115, 102, 108, 0, 0, 0, 0, 14, 9, 98, 94, 0, 0, 0, 0, 0, 0, 144, 44, 0, 0, 0, 0, 0, 0, 66, 14, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 91, 167, 175, 151, 11, 0, 0, 16, 243, 231, 255, 223, 75, 0, 0, 0, 115, 111, 199, 91, 0, 0, 0, 0, 0, 8, 207, 39, 0, 0, 0, 0, 0, 67, 147, 0, 0, 0, 0, 0, 0, 119, 91, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 173, 160, 142, 0, 0, 0, 0, 88, 214, 158, 174, 0, 0, 0, 0, 2, 35, 197, 66, 0, 0, 0, 0, 0, 50, 154, 4, 0, 0, 0, 0, 27, 185, 23, 0, 0, 0, 0, 0, 63, 128, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 57, 11, 0, 0, 0, 4, 138, 98, 83, 136, 0, 0, 0, 48, 74, 0, 29, 145, 0, 0, 0, 49, 144, 104, 131, 155, 0, 0, 0, 0, 58, 65, 10, 142, 0, 0, 0, 0, 0, 0, 0, 104, 34, 0, 0, 0, 0, 0, 0, 27, 27, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 54, 49, 0, 0, 0, 0, 59, 196, 121, 163, 0, 0, 0, 0, 106, 197, 94, 184, 0, 0, 0, 0, 5, 69, 231, 87, 0, 0, 0, 0, 0, 61, 154, 6, 0, 0, 0, 0, 8, 170, 42, 0, 0, 0, 0, 0, 7, 90, 2, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 190, 192, 117, 84, 0, 0, 0, 145, 110, 22, 29, 189, 5, 0, 0, 101, 85, 16, 101, 242, 3, 0, 0, 3, 90, 115, 136, 186, 0, 0, 0, 0, 0, 0, 0, 152, 6, 0, 0, 0, 0, 0, 0, 75, 21, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 172, 165, 185, 205, 5, 0, 0, 13, 216, 150, 213, 222, 8, 0, 0, 0, 31, 34, 114, 125, 0, 0, 0, 0, 0, 0, 181, 59, 0, 0, 0, 0, 0, 26, 177, 1, 0, 0, 0, 0, 0, 23, 132, 7, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 24, 0, 0, 0, 0, 0, 83, 206, 139, 18, 0, 0, 0, 0, 23, 108, 119, 90, 0, 0, 0, 0, 0, 67, 219, 53, 0, 0, 0, 0, 0, 15, 156, 3, 0, 0, 0, 0, 0, 93, 55, 0, 0, 0, 0, 0, 0, 47, 1, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 189, 202, 175, 51, 0, 0, 13, 217, 84, 103, 248, 103, 0, 0, 7, 196, 209, 234, 141, 9, 0, 0, 0, 27, 147, 171, 5, 0, 0, 0, 0, 17, 194, 68, 0, 0, 0, 0, 0, 17, 139, 7, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 9, 0, 0, 0, 0, 0, 99, 193, 173, 40, 0, 0, 0, 0, 183, 213, 196, 130, 0, 0, 0, 0, 35, 44, 159, 143, 0, 0, 0, 0, 0, 1, 227, 96, 0, 0, 0, 0, 0, 73, 186, 16, 0, 0, 0, 0, 0, 35, 49, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 45, 15, 0, 0, 0, 0, 0, 158, 115, 163, 61, 0, 0, 0, 12, 160, 0, 114, 141, 0, 0, 0, 0, 125, 146, 190, 120, 0, 0, 0, 0, 2, 33, 186, 71, 0, 0, 0, 0, 0, 0, 160, 84, 0, 0, 0, 0, 0, 0, 69, 47, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 99, 12, 0, 0, 0, 0, 24, 132, 113, 116, 0, 0, 0, 0, 104, 69, 109, 125, 0, 0, 0, 0, 141, 95, 201, 47, 0, 0, 0, 0, 58, 85, 131, 3, 0, 0, 0, 0, 0, 23, 108, 0, 0, 0, 0, 0, 0, 7, 17, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 171, 150, 170, 108, 0, 0, 0, 115, 56, 0, 74, 184, 0, 0, 0, 51, 168, 138, 169, 160, 0, 0, 0, 0, 33, 52, 60, 170, 0, 0, 0, 0, 0, 0, 51, 188, 0, 0, 0, 0, 0, 0, 32, 140, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 52, 17, 0, 0, 0, 0, 0, 162, 93, 188, 76, 0, 0, 0, 0, 155, 0, 133, 155, 0, 0, 0, 0, 99, 151, 175, 125, 0, 0, 0, 0, 0, 19, 99, 150, 0, 0, 0, 0, 0, 0, 48, 176, 0, 0, 0, 0, 0, 0, 14, 88, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 143, 193, 192, 179, 0, 0, 0, 83, 172, 67, 47, 204, 2, 0, 0, 39, 196, 204, 221, 195, 0, 0, 0, 0, 23, 59, 87, 204, 0, 0, 0, 0, 0, 0, 146, 144, 0, 0, 0, 0, 0, 0, 117, 40, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 29, 0, 0, 0, 0, 0, 110, 114, 132, 71, 0, 0, 0, 0, 147, 30, 80, 122, 0, 0, 0, 0, 75, 137, 166, 136, 0, 0, 0, 0, 0, 0, 79, 141, 0, 0, 0, 0, 0, 0, 55, 151, 0, 0, 0, 0, 0, 0, 21, 73, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 23, 0, 0, 0, 0, 27, 163, 189, 210, 0, 0, 0, 0, 113, 227, 178, 240, 0, 0, 0, 0, 46, 114, 222, 124, 0, 0, 0, 0, 0, 71, 177, 18, 0, 0, 0, 0, 62, 233, 23, 0, 0, 0, 0, 0, 30, 99, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 106, 160, 177, 126, 0, 0, 0, 12, 206, 47, 129, 188, 12, 0, 0, 15, 165, 138, 53, 122, 5, 0, 0, 2, 75, 29, 54, 121, 0, 0, 0, 0, 0, 17, 127, 11, 0, 0, 0, 0, 0, 63, 35, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 39, 1, 0, 0, 0, 0, 52, 97, 113, 83, 0, 0, 0, 0, 85, 21, 148, 87, 0, 0, 0, 0, 42, 97, 156, 49, 0, 0, 0, 0, 0, 5, 108, 27, 0, 0, 0, 0, 0, 0, 114, 0, 0, 0, 0, 0, 0, 0, 53, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 26, 0, 0, 0, 0, 0, 131, 131, 179, 53, 0, 0, 0, 0, 145, 17, 206, 78, 0, 0, 0, 0, 121, 135, 194, 78, 0, 0, 0, 0, 0, 0, 184, 72, 0, 0, 0, 0, 0, 1, 188, 17, 0, 0, 0, 0, 0, 0, 79, 2, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 79, 78, 13, 0, 0, 0, 48, 209, 173, 205, 192, 2, 0, 0, 148, 116, 6, 115, 247, 12, 0, 0, 127, 164, 62, 133, 237, 2, 0, 0, 22, 168, 211, 201, 233, 0, 0, 0, 0, 0, 0, 49, 224, 0, 0, 0, 0, 0, 0, 12, 56, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 60, 16, 0, 0, 0, 0, 155, 156, 168, 160, 0, 0, 0, 47, 145, 6, 46, 204, 0, 0, 0, 94, 116, 18, 89, 225, 0, 0, 0, 22, 166, 165, 169, 219, 0, 0, 0, 0, 0, 0, 35, 202, 0, 0, 0, 0, 0, 0, 17, 100, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 33, 20, 0, 0, 0, 0, 52, 149, 179, 156, 0, 0, 0, 0, 168, 132, 218, 133, 0, 0, 0, 0, 67, 83, 180, 68, 0, 0, 0, 0, 0, 0, 207, 59, 0, 0, 0, 0, 0, 0, 198, 22, 0, 0, 0, 0, 0, 0, 68, 6, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 55, 14, 0, 0, 0, 0, 29, 182, 129, 210, 125, 0, 0, 0, 78, 93, 0, 89, 212, 0, 0, 0, 35, 160, 153, 145, 201, 0, 0, 0, 0, 6, 28, 8, 171, 5, 0, 0, 0, 0, 0, 0, 155, 42, 0, 0, 0, 0, 0, 0, 66, 36, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 39, 54, 11, 0, 0, 0, 26, 182, 146, 154, 165, 0, 0, 0, 110, 93, 0, 35, 187, 0, 0, 0, 68, 175, 108, 121, 194, 0, 0, 0, 0, 55, 115, 153, 194, 0, 0, 0, 0, 0, 0, 36, 194, 0, 0, 0, 0, 0, 0, 17, 105, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 21, 0, 0, 0, 0, 0, 56, 138, 113, 8, 0, 0, 0, 0, 79, 36, 109, 48, 0, 0, 0, 0, 51, 135, 179, 38, 0, 0, 0, 0, 1, 25, 106, 53, 0, 0, 0, 0, 0, 0, 88, 69, 0, 0, 0, 0, 0, 0, 26, 36, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 131, 155, 101, 0, 0, 0, 4, 162, 83, 151, 95, 0, 0, 0, 0, 71, 68, 111, 56, 0, 0, 0, 0, 0, 0, 138, 31, 0, 0, 0, 0, 0, 0, 98, 0, 0, 0, 0, 0, 0, 0, 63, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 61, 15, 0, 0, 0, 0, 55, 131, 84, 100, 0, 0, 0, 0, 114, 49, 110, 56, 0, 0, 0, 0, 79, 123, 179, 71, 0, 0, 0, 0, 4, 60, 138, 78, 0, 0, 0, 0, 0, 0, 128, 79, 0, 0, 0, 0, 0, 0, 62, 34, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 63, 29, 0, 0, 0, 0, 85, 165, 99, 177, 94, 0, 0, 9, 164, 27, 5, 138, 91, 0, 0, 28, 152, 67, 207, 174, 1, 0, 0, 2, 122, 144, 210, 50, 0, 0, 0, 0, 0, 70, 96, 0, 0, 0, 0, 0, 0, 49, 18, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 103, 104, 115, 0, 0, 0, 0, 60, 110, 1, 86, 0, 0, 0, 0, 13, 93, 125, 0, 0, 0, 0, 0, 0, 27, 81, 0, 0, 0, 0, 0, 0, 105, 3, 0, 0, 0, 0, 0, 3, 78, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 185, 216, 73, 0, 0, 0, 0, 181, 112, 234, 110, 0, 0, 0, 0, 197, 227, 243, 88, 0, 0, 0, 0, 43, 62, 159, 83, 0, 0, 0, 0, 0, 0, 142, 83, 0, 0, 0, 0, 0, 0, 106, 68, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 57, 4, 0, 0, 0, 34, 126, 113, 108, 105, 0, 0, 0, 135, 55, 51, 155, 24, 17, 0, 0, 175, 139, 209, 58, 0, 41, 0, 0, 48, 86, 94, 0, 0, 0, 0, 0, 64, 130, 1, 0, 0, 0, 0, 0, 55, 23, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 141, 113, 4, 0, 0, 0, 0, 75, 138, 204, 97, 0, 0, 0, 0, 69, 165, 222, 152, 0, 0, 0, 0, 0, 28, 60, 158, 0, 0, 0, 4, 9, 0, 58, 165, 0, 0, 0, 16, 107, 132, 166, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 39, 5, 0, 0, 0, 0, 26, 141, 113, 118, 0, 0, 0, 0, 111, 72, 83, 127, 0, 0, 0, 0, 97, 138, 182, 23, 0, 0, 0, 0, 5, 33, 111, 0, 0, 0, 0, 0, 0, 71, 51, 0, 0, 0, 0, 0, 0, 40, 16, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 49, 11, 0, 0, 0, 0, 64, 143, 105, 160, 0, 0, 0, 0, 124, 24, 111, 135, 0, 0, 0, 0, 140, 139, 195, 24, 0, 0, 0, 0, 29, 63, 132, 0, 0, 0, 0, 0, 0, 75, 100, 0, 0, 0, 0, 0, 0, 52, 10, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 55, 31, 0, 0, 0, 0, 36, 157, 103, 176, 40, 0, 0, 0, 135, 81, 64, 185, 44, 0, 0, 0, 150, 101, 230, 78, 0, 0, 0, 0, 92, 154, 165, 7, 0, 0, 0, 0, 0, 141, 74, 0, 0, 0, 0, 0, 1, 81, 15, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 46, 28, 0, 0, 0, 0, 47, 161, 180, 240, 55, 0, 0, 0, 148, 70, 71, 188, 24, 0, 0, 0, 177, 127, 191, 46, 0, 0, 0, 0, 69, 162, 96, 0, 0, 0, 0, 0, 59, 178, 3, 0, 0, 0, 0, 0, 48, 53, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 34, 0, 0, 0, 0, 0, 73, 125, 77, 63, 0, 0, 0, 3, 136, 16, 126, 116, 0, 0, 0, 2, 122, 118, 107, 103, 0, 0, 0, 0, 0, 0, 78, 98, 0, 0, 0, 0, 0, 0, 92, 81, 0, 0, 0, 0, 0, 0, 45, 35, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 63, 42, 0, 0, 0, 0, 110, 186, 118, 196, 67, 0, 0, 39, 167, 37, 62, 209, 49, 0, 0, 95, 93, 112, 243, 136, 0, 0, 0, 34, 178, 151, 196, 75, 0, 0, 0, 0, 0, 24, 153, 5, 0, 0, 0, 0, 0, 34, 50, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 48, 0, 0, 0, 0, 0, 0, 103, 97, 83, 0, 0, 0, 0, 0, 97, 6, 115, 5, 0, 0, 0, 0, 89, 120, 152, 64, 0, 0, 0, 0, 0, 0, 89, 101, 0, 0, 0, 0, 0, 0, 37, 116, 0, 0, 0, 0, 0, 0, 4, 64, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 155, 180, 219, 95, 0, 0, 21, 237, 170, 71, 146, 83, 0, 0, 1, 117, 180, 237, 100, 0, 0, 0, 0, 0, 78, 148, 6, 0, 0, 0, 0, 60, 184, 7, 0, 0, 0, 0, 0, 79, 73, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 32, 53, 26, 0, 0, 0, 22, 181, 108, 98, 121, 117, 2, 0, 68, 98, 0, 0, 65, 168, 5, 0, 40, 148, 60, 134, 206, 18, 0, 0, 2, 123, 160, 217, 113, 0, 0, 0, 0, 0, 34, 160, 4, 0, 0, 0, 0, 0, 42, 50, 0, 0, 0 },
};
# 10 "D:/Proyectos/tfg_hardware_accelerator/src/forward_fw.hpp" 2


constexpr int N_HIDDEN = 32;
constexpr int N_OUTPUT = 10;






using bin_t = ap_fixed<8,8>;
using acc_t = ap_fixed<12,12>;




bin_t signum(acc_t x);
void forwardHidden (const bin_t input[N_INPUT], bin_t hidden[N_HIDDEN], bin_t W1[N_HIDDEN][N_INPUT]);
void forwardOutput (const bin_t hidden[N_HIDDEN], bin_t output[N_OUTPUT], bin_t W2[N_OUTPUT][N_HIDDEN]);
acc_t computeGoodness(const bin_t vec[], int size);
void updateHidden (const bin_t input[N_INPUT],
                    const bin_t out_pos[N_HIDDEN],
                    const bin_t out_neg[N_HIDDEN],
                    bin_t W1[N_HIDDEN][N_INPUT]);
void updateOutput (const bin_t hidden[N_HIDDEN],
                    const bin_t out_pos[N_OUTPUT],
                    const bin_t out_neg[N_OUTPUT],
                    bin_t W2[N_OUTPUT][N_HIDDEN]);







void train_step(const uint8_t img_pos[N_INPUT],
                const uint8_t img_neg[N_INPUT],
                int sample_idx,
                bin_t W1[N_HIDDEN][N_INPUT],
                bin_t W2[N_OUTPUT][N_HIDDEN]);
# 2 "D:/Proyectos/tfg_hardware_accelerator/src/forward_fw.cpp" 2




bin_t ALPHA = 1;
acc_t MARGIN = 4;




bin_t signum(acc_t x) {
    return (x >= 0) ? (bin_t)1 : (bin_t)-1;
}





acc_t computeGoodness(const bin_t vec[], int size) {
    acc_t acc = 0;
    for (int i = 0; i < size; ++i) {
#pragma HLS UNROLL
        acc += (acc_t)vec[i] * (acc_t)vec[i];
    }
    return acc;
}




void forwardHidden(const bin_t input[N_INPUT],
                   bin_t hidden[N_HIDDEN],
                   bin_t W1[N_HIDDEN][N_INPUT]) {

    for(int j = 0; j < N_HIDDEN; j++) {
        acc_t sum = 0;

        for(int i = 0; i < N_INPUT; i++) {
#pragma HLS UNROLL
            sum += (acc_t)input[i] * (acc_t)W1[j][i];
        }

        hidden[j] = signum(sum);
    }
}




void forwardOutput(const bin_t hidden[N_HIDDEN],
                   bin_t output[N_OUTPUT],
                   bin_t W2[N_OUTPUT][N_HIDDEN]) {
    for(int k = 0; k < N_OUTPUT; k++) {
        acc_t sum = 0;
        for(int j = 0; j < N_HIDDEN; j++) {
#pragma HLS UNROLL
            sum += (acc_t)hidden[j] * (acc_t)W2[k][j];
        }
        output[k] = signum(sum);
    }
}






void updateHidden(const bin_t input[N_INPUT],
                  const bin_t out_pos[N_HIDDEN],
                  const bin_t out_neg[N_HIDDEN],
                  bin_t W1[N_HIDDEN][N_INPUT]) {
    for(int j = 0; j < N_HIDDEN; j++) {
        bin_t delta = out_pos[j] - out_neg[j];
        for(int i = 0; i < N_INPUT; i++) {
            acc_t w_new = (acc_t)W1[j][i] + ALPHA * (acc_t)delta * (acc_t)input[i];

            W1[j][i] = (w_new >= 0) ? (bin_t)1 : (bin_t)-1;
        }
    }
}






void updateOutput(const bin_t hidden[N_HIDDEN],
                  const bin_t out_pos[N_OUTPUT],
                  const bin_t out_neg[N_OUTPUT],
                  bin_t W2[N_OUTPUT][N_HIDDEN]) {
    for(int k = 0; k < N_OUTPUT; k++) {
        bin_t delta = out_pos[k] - out_neg[k];
        for(int j = 0; j < N_HIDDEN; j++) {
#pragma HLS UNROLL
            acc_t w_new = (acc_t)W2[k][j] + ALPHA * (acc_t)delta * (acc_t)hidden[j];

            W2[k][j] = (w_new >= 0) ? (bin_t)1 : (bin_t)-1;
        }
    }
}







void train_step(const uint8_t img_pos[N_INPUT],
                const uint8_t img_neg[N_INPUT],
                int sample_idx,
                bin_t W1[N_HIDDEN][N_INPUT],
                bin_t W2[N_OUTPUT][N_HIDDEN]) {

#pragma HLS INTERFACE m_axi port=W1 offset=slave bundle=WEIGHTS depth=N_HIDDEN*N_INPUT
#pragma HLS INTERFACE m_axi port=W2 offset=slave bundle=WEIGHTS depth=N_OUTPUT*N_HIDDEN


#pragma HLS INTERFACE s_axilite port=img_pos bundle=CTRL depth=N_INPUT
#pragma HLS INTERFACE s_axilite port=img_neg bundle=CTRL depth=N_INPUT
#pragma HLS INTERFACE s_axilite port=sample_idx bundle=CTRL
#pragma HLS INTERFACE s_axilite port=return bundle=CTRL


    bin_t in_pos[N_INPUT], in_neg[N_INPUT];
#pragma HLS ARRAY_PARTITION variable=in_pos complete
#pragma HLS ARRAY_PARTITION variable=in_neg complete

    for(int i = 0; i < N_INPUT; i++) {
#pragma HLS UNROLL
        in_pos[i] = (img_pos[i] > 127) ? (bin_t)1 : (bin_t)-1;
        in_neg[i] = (img_neg[i] > 127) ? (bin_t)1 : (bin_t)-1;
    }


    bin_t hidden_pos[N_HIDDEN], hidden_neg[N_HIDDEN];
    bin_t out_pos[N_OUTPUT], out_neg[N_OUTPUT];
#pragma HLS ARRAY_PARTITION variable=hidden_pos complete
#pragma HLS ARRAY_PARTITION variable=hidden_neg complete
#pragma HLS ARRAY_PARTITION variable=out_pos complete
#pragma HLS ARRAY_PARTITION variable=out_neg complete


    forwardHidden(in_pos, hidden_pos, W1);
    forwardOutput(hidden_pos, out_pos, W2);


    forwardHidden(in_neg, hidden_neg, W1);
    forwardOutput(hidden_neg, out_neg, W2);


    acc_t g_h_pos = computeGoodness(hidden_pos, N_HIDDEN);
    acc_t g_h_neg = computeGoodness(hidden_neg, N_HIDDEN);
    acc_t g_o_pos = computeGoodness(out_pos, N_OUTPUT);
    acc_t g_o_neg = computeGoodness(out_neg, N_OUTPUT);


    if ((g_h_pos - g_h_neg) < MARGIN) {updateHidden(in_pos, out_pos, out_neg, W1);}
    if ((g_o_pos - g_o_neg) < MARGIN) {updateOutput(hidden_pos, out_pos, out_neg, W2);}
}
