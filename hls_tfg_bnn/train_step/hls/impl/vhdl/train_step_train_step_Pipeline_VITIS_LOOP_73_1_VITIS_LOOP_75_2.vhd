-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity train_step_train_step_Pipeline_VITIS_LOOP_73_1_VITIS_LOOP_75_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_WEIGHTS_0_AWVALID : OUT STD_LOGIC;
    m_axi_WEIGHTS_0_AWREADY : IN STD_LOGIC;
    m_axi_WEIGHTS_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_WEIGHTS_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_WEIGHTS_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_WEIGHTS_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_WEIGHTS_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_WEIGHTS_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_WEIGHTS_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_WEIGHTS_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_WEIGHTS_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_WEIGHTS_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_WEIGHTS_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_WEIGHTS_0_WVALID : OUT STD_LOGIC;
    m_axi_WEIGHTS_0_WREADY : IN STD_LOGIC;
    m_axi_WEIGHTS_0_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_WEIGHTS_0_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_WEIGHTS_0_WLAST : OUT STD_LOGIC;
    m_axi_WEIGHTS_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_WEIGHTS_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_WEIGHTS_0_ARVALID : OUT STD_LOGIC;
    m_axi_WEIGHTS_0_ARREADY : IN STD_LOGIC;
    m_axi_WEIGHTS_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_WEIGHTS_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_WEIGHTS_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_WEIGHTS_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_WEIGHTS_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_WEIGHTS_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_WEIGHTS_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_WEIGHTS_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_WEIGHTS_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_WEIGHTS_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_WEIGHTS_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_WEIGHTS_0_RVALID : IN STD_LOGIC;
    m_axi_WEIGHTS_0_RREADY : OUT STD_LOGIC;
    m_axi_WEIGHTS_0_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_WEIGHTS_0_RLAST : IN STD_LOGIC;
    m_axi_WEIGHTS_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_WEIGHTS_0_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
    m_axi_WEIGHTS_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_WEIGHTS_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_WEIGHTS_0_BVALID : IN STD_LOGIC;
    m_axi_WEIGHTS_0_BREADY : OUT STD_LOGIC;
    m_axi_WEIGHTS_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_WEIGHTS_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_WEIGHTS_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    out_pos_load : IN STD_LOGIC_VECTOR (1 downto 0);
    out_pos_1_load : IN STD_LOGIC_VECTOR (1 downto 0);
    out_pos_2_load : IN STD_LOGIC_VECTOR (1 downto 0);
    out_pos_3_load : IN STD_LOGIC_VECTOR (1 downto 0);
    out_pos_4_load : IN STD_LOGIC_VECTOR (1 downto 0);
    out_pos_5_load : IN STD_LOGIC_VECTOR (1 downto 0);
    out_pos_6_load : IN STD_LOGIC_VECTOR (1 downto 0);
    out_pos_7_load : IN STD_LOGIC_VECTOR (1 downto 0);
    out_pos_8_load : IN STD_LOGIC_VECTOR (1 downto 0);
    out_pos_9_load : IN STD_LOGIC_VECTOR (1 downto 0);
    out_neg_load : IN STD_LOGIC_VECTOR (1 downto 0);
    out_neg_1_load : IN STD_LOGIC_VECTOR (1 downto 0);
    out_neg_2_load : IN STD_LOGIC_VECTOR (1 downto 0);
    out_neg_3_load : IN STD_LOGIC_VECTOR (1 downto 0);
    out_neg_4_load : IN STD_LOGIC_VECTOR (1 downto 0);
    out_neg_5_load : IN STD_LOGIC_VECTOR (1 downto 0);
    out_neg_6_load : IN STD_LOGIC_VECTOR (1 downto 0);
    out_neg_7_load : IN STD_LOGIC_VECTOR (1 downto 0);
    out_neg_8_load : IN STD_LOGIC_VECTOR (1 downto 0);
    out_neg_9_load : IN STD_LOGIC_VECTOR (1 downto 0);
    W1 : IN STD_LOGIC_VECTOR (63 downto 0);
    in_pos : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_1 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_2 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_3 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_4 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_5 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_6 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_7 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_8 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_9 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_10 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_11 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_12 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_13 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_14 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_15 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_16 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_17 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_18 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_19 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_20 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_21 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_22 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_23 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_24 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_25 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_26 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_27 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_28 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_29 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_30 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_31 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_32 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_33 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_34 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_35 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_36 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_37 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_38 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_39 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_40 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_41 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_42 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_43 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_44 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_45 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_46 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_47 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_48 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_49 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_50 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_51 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_52 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_53 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_54 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_55 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_56 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_57 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_58 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_59 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_60 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_61 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_62 : IN STD_LOGIC_VECTOR (1 downto 0);
    in_pos_63 : IN STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of train_step_train_step_Pipeline_VITIS_LOOP_73_1_VITIS_LOOP_75_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv12_800 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln73_fu_960_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal WEIGHTS_blk_n_AR : STD_LOGIC;
    signal ap_block_pp0_stage0_grp1 : BOOLEAN;
    signal WEIGHTS_blk_n_R : STD_LOGIC;
    signal WEIGHTS_blk_n_AW : STD_LOGIC;
    signal WEIGHTS_blk_n_W : STD_LOGIC;
    signal WEIGHTS_blk_n_B : STD_LOGIC;
    signal ap_block_pp0_stage0_11001_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln73_fu_989_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln73_reg_1850 : STD_LOGIC_VECTOR (6 downto 0);
    signal delta_fu_1099_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal delta_reg_1855 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_fu_1105_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_reg_1860 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_fu_1113_p131 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_reg_1865 : STD_LOGIC_VECTOR (1 downto 0);
    signal WEIGHTS_addr_reg_1870 : STD_LOGIC_VECTOR (63 downto 0);
    signal WEIGHTS_addr_reg_1870_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal WEIGHTS_addr_reg_1870_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal WEIGHTS_addr_reg_1870_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal WEIGHTS_addr_reg_1870_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal WEIGHTS_addr_reg_1870_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal WEIGHTS_addr_reg_1870_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal WEIGHTS_addr_reg_1870_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal WEIGHTS_addr_reg_1870_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal WEIGHTS_addr_reg_1870_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln76_fu_1366_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln76_reg_1877 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln76_reg_1877_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln76_reg_1877_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln76_reg_1877_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln76_reg_1877_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln76_reg_1877_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln76_reg_1877_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln76_reg_1877_pp0_iter9_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln76_reg_1877_pp0_iter10_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln76_reg_1877_pp0_iter11_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal WEIGHTS_addr_read_reg_1882 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln78_fu_1392_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln78_reg_1887 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln76_fu_1351_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001_grp1 : BOOLEAN;
    signal i_fu_398 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln75_fu_1313_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_402 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal select_ln73_1_fu_1003_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten_fu_406 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal add_ln73_fu_966_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln75_fu_983_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln73_1_fu_997_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_1015_p21 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln73_fu_1011_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_1015_p23 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_1057_p21 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_1057_p23 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln74_fu_1053_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln74_1_fu_1095_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_1113_p129 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_1113_p130 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_fu_1332_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln75_1_fu_1343_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln76_1_fu_1346_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_fu_1339_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln76_3_fu_1375_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln76_1_fu_1372_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal w_new_fu_1378_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_34_fu_1384_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal tmp_fu_1015_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_1015_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_1015_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_1015_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_1015_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_1015_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_1015_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_1015_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_1015_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_1015_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_1057_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_1057_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_1057_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_1057_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_1057_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_1057_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_1057_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_1057_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_1057_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_1057_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_1113_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p5 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p7 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p9 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p11 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p13 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p15 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p17 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p19 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p21 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p23 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p25 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p27 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p29 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p31 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p33 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p35 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p37 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p39 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p41 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p43 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p45 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p47 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p49 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p51 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p53 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p55 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p57 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p59 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p61 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p63 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p65 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p67 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p69 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p71 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p73 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p75 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p77 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p79 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p81 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p83 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p85 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p87 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p89 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p91 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p93 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p95 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p97 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p99 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p101 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p103 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p105 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p107 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p109 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p111 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p113 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p115 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p117 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p119 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p121 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p123 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p125 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_1113_p127 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component train_step_sparsemux_21_4_2_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (3 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (3 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (3 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (3 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (3 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (3 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (3 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (3 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (3 downto 0);
        din8_WIDTH : INTEGER;
        CASE9 : STD_LOGIC_VECTOR (3 downto 0);
        din9_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (1 downto 0);
        din1 : IN STD_LOGIC_VECTOR (1 downto 0);
        din2 : IN STD_LOGIC_VECTOR (1 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        din5 : IN STD_LOGIC_VECTOR (1 downto 0);
        din6 : IN STD_LOGIC_VECTOR (1 downto 0);
        din7 : IN STD_LOGIC_VECTOR (1 downto 0);
        din8 : IN STD_LOGIC_VECTOR (1 downto 0);
        din9 : IN STD_LOGIC_VECTOR (1 downto 0);
        def : IN STD_LOGIC_VECTOR (1 downto 0);
        sel : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component train_step_sparsemux_129_6_2_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (5 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (5 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (5 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (5 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (5 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (5 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (5 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (5 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (5 downto 0);
        din8_WIDTH : INTEGER;
        CASE9 : STD_LOGIC_VECTOR (5 downto 0);
        din9_WIDTH : INTEGER;
        CASE10 : STD_LOGIC_VECTOR (5 downto 0);
        din10_WIDTH : INTEGER;
        CASE11 : STD_LOGIC_VECTOR (5 downto 0);
        din11_WIDTH : INTEGER;
        CASE12 : STD_LOGIC_VECTOR (5 downto 0);
        din12_WIDTH : INTEGER;
        CASE13 : STD_LOGIC_VECTOR (5 downto 0);
        din13_WIDTH : INTEGER;
        CASE14 : STD_LOGIC_VECTOR (5 downto 0);
        din14_WIDTH : INTEGER;
        CASE15 : STD_LOGIC_VECTOR (5 downto 0);
        din15_WIDTH : INTEGER;
        CASE16 : STD_LOGIC_VECTOR (5 downto 0);
        din16_WIDTH : INTEGER;
        CASE17 : STD_LOGIC_VECTOR (5 downto 0);
        din17_WIDTH : INTEGER;
        CASE18 : STD_LOGIC_VECTOR (5 downto 0);
        din18_WIDTH : INTEGER;
        CASE19 : STD_LOGIC_VECTOR (5 downto 0);
        din19_WIDTH : INTEGER;
        CASE20 : STD_LOGIC_VECTOR (5 downto 0);
        din20_WIDTH : INTEGER;
        CASE21 : STD_LOGIC_VECTOR (5 downto 0);
        din21_WIDTH : INTEGER;
        CASE22 : STD_LOGIC_VECTOR (5 downto 0);
        din22_WIDTH : INTEGER;
        CASE23 : STD_LOGIC_VECTOR (5 downto 0);
        din23_WIDTH : INTEGER;
        CASE24 : STD_LOGIC_VECTOR (5 downto 0);
        din24_WIDTH : INTEGER;
        CASE25 : STD_LOGIC_VECTOR (5 downto 0);
        din25_WIDTH : INTEGER;
        CASE26 : STD_LOGIC_VECTOR (5 downto 0);
        din26_WIDTH : INTEGER;
        CASE27 : STD_LOGIC_VECTOR (5 downto 0);
        din27_WIDTH : INTEGER;
        CASE28 : STD_LOGIC_VECTOR (5 downto 0);
        din28_WIDTH : INTEGER;
        CASE29 : STD_LOGIC_VECTOR (5 downto 0);
        din29_WIDTH : INTEGER;
        CASE30 : STD_LOGIC_VECTOR (5 downto 0);
        din30_WIDTH : INTEGER;
        CASE31 : STD_LOGIC_VECTOR (5 downto 0);
        din31_WIDTH : INTEGER;
        CASE32 : STD_LOGIC_VECTOR (5 downto 0);
        din32_WIDTH : INTEGER;
        CASE33 : STD_LOGIC_VECTOR (5 downto 0);
        din33_WIDTH : INTEGER;
        CASE34 : STD_LOGIC_VECTOR (5 downto 0);
        din34_WIDTH : INTEGER;
        CASE35 : STD_LOGIC_VECTOR (5 downto 0);
        din35_WIDTH : INTEGER;
        CASE36 : STD_LOGIC_VECTOR (5 downto 0);
        din36_WIDTH : INTEGER;
        CASE37 : STD_LOGIC_VECTOR (5 downto 0);
        din37_WIDTH : INTEGER;
        CASE38 : STD_LOGIC_VECTOR (5 downto 0);
        din38_WIDTH : INTEGER;
        CASE39 : STD_LOGIC_VECTOR (5 downto 0);
        din39_WIDTH : INTEGER;
        CASE40 : STD_LOGIC_VECTOR (5 downto 0);
        din40_WIDTH : INTEGER;
        CASE41 : STD_LOGIC_VECTOR (5 downto 0);
        din41_WIDTH : INTEGER;
        CASE42 : STD_LOGIC_VECTOR (5 downto 0);
        din42_WIDTH : INTEGER;
        CASE43 : STD_LOGIC_VECTOR (5 downto 0);
        din43_WIDTH : INTEGER;
        CASE44 : STD_LOGIC_VECTOR (5 downto 0);
        din44_WIDTH : INTEGER;
        CASE45 : STD_LOGIC_VECTOR (5 downto 0);
        din45_WIDTH : INTEGER;
        CASE46 : STD_LOGIC_VECTOR (5 downto 0);
        din46_WIDTH : INTEGER;
        CASE47 : STD_LOGIC_VECTOR (5 downto 0);
        din47_WIDTH : INTEGER;
        CASE48 : STD_LOGIC_VECTOR (5 downto 0);
        din48_WIDTH : INTEGER;
        CASE49 : STD_LOGIC_VECTOR (5 downto 0);
        din49_WIDTH : INTEGER;
        CASE50 : STD_LOGIC_VECTOR (5 downto 0);
        din50_WIDTH : INTEGER;
        CASE51 : STD_LOGIC_VECTOR (5 downto 0);
        din51_WIDTH : INTEGER;
        CASE52 : STD_LOGIC_VECTOR (5 downto 0);
        din52_WIDTH : INTEGER;
        CASE53 : STD_LOGIC_VECTOR (5 downto 0);
        din53_WIDTH : INTEGER;
        CASE54 : STD_LOGIC_VECTOR (5 downto 0);
        din54_WIDTH : INTEGER;
        CASE55 : STD_LOGIC_VECTOR (5 downto 0);
        din55_WIDTH : INTEGER;
        CASE56 : STD_LOGIC_VECTOR (5 downto 0);
        din56_WIDTH : INTEGER;
        CASE57 : STD_LOGIC_VECTOR (5 downto 0);
        din57_WIDTH : INTEGER;
        CASE58 : STD_LOGIC_VECTOR (5 downto 0);
        din58_WIDTH : INTEGER;
        CASE59 : STD_LOGIC_VECTOR (5 downto 0);
        din59_WIDTH : INTEGER;
        CASE60 : STD_LOGIC_VECTOR (5 downto 0);
        din60_WIDTH : INTEGER;
        CASE61 : STD_LOGIC_VECTOR (5 downto 0);
        din61_WIDTH : INTEGER;
        CASE62 : STD_LOGIC_VECTOR (5 downto 0);
        din62_WIDTH : INTEGER;
        CASE63 : STD_LOGIC_VECTOR (5 downto 0);
        din63_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (1 downto 0);
        din1 : IN STD_LOGIC_VECTOR (1 downto 0);
        din2 : IN STD_LOGIC_VECTOR (1 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        din5 : IN STD_LOGIC_VECTOR (1 downto 0);
        din6 : IN STD_LOGIC_VECTOR (1 downto 0);
        din7 : IN STD_LOGIC_VECTOR (1 downto 0);
        din8 : IN STD_LOGIC_VECTOR (1 downto 0);
        din9 : IN STD_LOGIC_VECTOR (1 downto 0);
        din10 : IN STD_LOGIC_VECTOR (1 downto 0);
        din11 : IN STD_LOGIC_VECTOR (1 downto 0);
        din12 : IN STD_LOGIC_VECTOR (1 downto 0);
        din13 : IN STD_LOGIC_VECTOR (1 downto 0);
        din14 : IN STD_LOGIC_VECTOR (1 downto 0);
        din15 : IN STD_LOGIC_VECTOR (1 downto 0);
        din16 : IN STD_LOGIC_VECTOR (1 downto 0);
        din17 : IN STD_LOGIC_VECTOR (1 downto 0);
        din18 : IN STD_LOGIC_VECTOR (1 downto 0);
        din19 : IN STD_LOGIC_VECTOR (1 downto 0);
        din20 : IN STD_LOGIC_VECTOR (1 downto 0);
        din21 : IN STD_LOGIC_VECTOR (1 downto 0);
        din22 : IN STD_LOGIC_VECTOR (1 downto 0);
        din23 : IN STD_LOGIC_VECTOR (1 downto 0);
        din24 : IN STD_LOGIC_VECTOR (1 downto 0);
        din25 : IN STD_LOGIC_VECTOR (1 downto 0);
        din26 : IN STD_LOGIC_VECTOR (1 downto 0);
        din27 : IN STD_LOGIC_VECTOR (1 downto 0);
        din28 : IN STD_LOGIC_VECTOR (1 downto 0);
        din29 : IN STD_LOGIC_VECTOR (1 downto 0);
        din30 : IN STD_LOGIC_VECTOR (1 downto 0);
        din31 : IN STD_LOGIC_VECTOR (1 downto 0);
        din32 : IN STD_LOGIC_VECTOR (1 downto 0);
        din33 : IN STD_LOGIC_VECTOR (1 downto 0);
        din34 : IN STD_LOGIC_VECTOR (1 downto 0);
        din35 : IN STD_LOGIC_VECTOR (1 downto 0);
        din36 : IN STD_LOGIC_VECTOR (1 downto 0);
        din37 : IN STD_LOGIC_VECTOR (1 downto 0);
        din38 : IN STD_LOGIC_VECTOR (1 downto 0);
        din39 : IN STD_LOGIC_VECTOR (1 downto 0);
        din40 : IN STD_LOGIC_VECTOR (1 downto 0);
        din41 : IN STD_LOGIC_VECTOR (1 downto 0);
        din42 : IN STD_LOGIC_VECTOR (1 downto 0);
        din43 : IN STD_LOGIC_VECTOR (1 downto 0);
        din44 : IN STD_LOGIC_VECTOR (1 downto 0);
        din45 : IN STD_LOGIC_VECTOR (1 downto 0);
        din46 : IN STD_LOGIC_VECTOR (1 downto 0);
        din47 : IN STD_LOGIC_VECTOR (1 downto 0);
        din48 : IN STD_LOGIC_VECTOR (1 downto 0);
        din49 : IN STD_LOGIC_VECTOR (1 downto 0);
        din50 : IN STD_LOGIC_VECTOR (1 downto 0);
        din51 : IN STD_LOGIC_VECTOR (1 downto 0);
        din52 : IN STD_LOGIC_VECTOR (1 downto 0);
        din53 : IN STD_LOGIC_VECTOR (1 downto 0);
        din54 : IN STD_LOGIC_VECTOR (1 downto 0);
        din55 : IN STD_LOGIC_VECTOR (1 downto 0);
        din56 : IN STD_LOGIC_VECTOR (1 downto 0);
        din57 : IN STD_LOGIC_VECTOR (1 downto 0);
        din58 : IN STD_LOGIC_VECTOR (1 downto 0);
        din59 : IN STD_LOGIC_VECTOR (1 downto 0);
        din60 : IN STD_LOGIC_VECTOR (1 downto 0);
        din61 : IN STD_LOGIC_VECTOR (1 downto 0);
        din62 : IN STD_LOGIC_VECTOR (1 downto 0);
        din63 : IN STD_LOGIC_VECTOR (1 downto 0);
        def : IN STD_LOGIC_VECTOR (1 downto 0);
        sel : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component train_step_mul_2s_3s_4_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (1 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component train_step_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_21_4_2_1_1_U384 : component train_step_sparsemux_21_4_2_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 2,
        CASE1 => "0001",
        din1_WIDTH => 2,
        CASE2 => "0010",
        din2_WIDTH => 2,
        CASE3 => "0011",
        din3_WIDTH => 2,
        CASE4 => "0100",
        din4_WIDTH => 2,
        CASE5 => "0101",
        din5_WIDTH => 2,
        CASE6 => "0110",
        din6_WIDTH => 2,
        CASE7 => "0111",
        din7_WIDTH => 2,
        CASE8 => "1000",
        din8_WIDTH => 2,
        CASE9 => "1001",
        din9_WIDTH => 2,
        def_WIDTH => 2,
        sel_WIDTH => 4,
        dout_WIDTH => 2)
    port map (
        din0 => out_pos_load,
        din1 => out_pos_1_load,
        din2 => out_pos_2_load,
        din3 => out_pos_3_load,
        din4 => out_pos_4_load,
        din5 => out_pos_5_load,
        din6 => out_pos_6_load,
        din7 => out_pos_7_load,
        din8 => out_pos_8_load,
        din9 => out_pos_9_load,
        def => tmp_fu_1015_p21,
        sel => trunc_ln73_fu_1011_p1,
        dout => tmp_fu_1015_p23);

    sparsemux_21_4_2_1_1_U385 : component train_step_sparsemux_21_4_2_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 2,
        CASE1 => "0001",
        din1_WIDTH => 2,
        CASE2 => "0010",
        din2_WIDTH => 2,
        CASE3 => "0011",
        din3_WIDTH => 2,
        CASE4 => "0100",
        din4_WIDTH => 2,
        CASE5 => "0101",
        din5_WIDTH => 2,
        CASE6 => "0110",
        din6_WIDTH => 2,
        CASE7 => "0111",
        din7_WIDTH => 2,
        CASE8 => "1000",
        din8_WIDTH => 2,
        CASE9 => "1001",
        din9_WIDTH => 2,
        def_WIDTH => 2,
        sel_WIDTH => 4,
        dout_WIDTH => 2)
    port map (
        din0 => out_neg_load,
        din1 => out_neg_1_load,
        din2 => out_neg_2_load,
        din3 => out_neg_3_load,
        din4 => out_neg_4_load,
        din5 => out_neg_5_load,
        din6 => out_neg_6_load,
        din7 => out_neg_7_load,
        din8 => out_neg_8_load,
        din9 => out_neg_9_load,
        def => tmp_2_fu_1057_p21,
        sel => trunc_ln73_fu_1011_p1,
        dout => tmp_2_fu_1057_p23);

    sparsemux_129_6_2_1_1_U386 : component train_step_sparsemux_129_6_2_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000000",
        din0_WIDTH => 2,
        CASE1 => "000001",
        din1_WIDTH => 2,
        CASE2 => "000010",
        din2_WIDTH => 2,
        CASE3 => "000011",
        din3_WIDTH => 2,
        CASE4 => "000100",
        din4_WIDTH => 2,
        CASE5 => "000101",
        din5_WIDTH => 2,
        CASE6 => "000110",
        din6_WIDTH => 2,
        CASE7 => "000111",
        din7_WIDTH => 2,
        CASE8 => "001000",
        din8_WIDTH => 2,
        CASE9 => "001001",
        din9_WIDTH => 2,
        CASE10 => "001010",
        din10_WIDTH => 2,
        CASE11 => "001011",
        din11_WIDTH => 2,
        CASE12 => "001100",
        din12_WIDTH => 2,
        CASE13 => "001101",
        din13_WIDTH => 2,
        CASE14 => "001110",
        din14_WIDTH => 2,
        CASE15 => "001111",
        din15_WIDTH => 2,
        CASE16 => "010000",
        din16_WIDTH => 2,
        CASE17 => "010001",
        din17_WIDTH => 2,
        CASE18 => "010010",
        din18_WIDTH => 2,
        CASE19 => "010011",
        din19_WIDTH => 2,
        CASE20 => "010100",
        din20_WIDTH => 2,
        CASE21 => "010101",
        din21_WIDTH => 2,
        CASE22 => "010110",
        din22_WIDTH => 2,
        CASE23 => "010111",
        din23_WIDTH => 2,
        CASE24 => "011000",
        din24_WIDTH => 2,
        CASE25 => "011001",
        din25_WIDTH => 2,
        CASE26 => "011010",
        din26_WIDTH => 2,
        CASE27 => "011011",
        din27_WIDTH => 2,
        CASE28 => "011100",
        din28_WIDTH => 2,
        CASE29 => "011101",
        din29_WIDTH => 2,
        CASE30 => "011110",
        din30_WIDTH => 2,
        CASE31 => "011111",
        din31_WIDTH => 2,
        CASE32 => "100000",
        din32_WIDTH => 2,
        CASE33 => "100001",
        din33_WIDTH => 2,
        CASE34 => "100010",
        din34_WIDTH => 2,
        CASE35 => "100011",
        din35_WIDTH => 2,
        CASE36 => "100100",
        din36_WIDTH => 2,
        CASE37 => "100101",
        din37_WIDTH => 2,
        CASE38 => "100110",
        din38_WIDTH => 2,
        CASE39 => "100111",
        din39_WIDTH => 2,
        CASE40 => "101000",
        din40_WIDTH => 2,
        CASE41 => "101001",
        din41_WIDTH => 2,
        CASE42 => "101010",
        din42_WIDTH => 2,
        CASE43 => "101011",
        din43_WIDTH => 2,
        CASE44 => "101100",
        din44_WIDTH => 2,
        CASE45 => "101101",
        din45_WIDTH => 2,
        CASE46 => "101110",
        din46_WIDTH => 2,
        CASE47 => "101111",
        din47_WIDTH => 2,
        CASE48 => "110000",
        din48_WIDTH => 2,
        CASE49 => "110001",
        din49_WIDTH => 2,
        CASE50 => "110010",
        din50_WIDTH => 2,
        CASE51 => "110011",
        din51_WIDTH => 2,
        CASE52 => "110100",
        din52_WIDTH => 2,
        CASE53 => "110101",
        din53_WIDTH => 2,
        CASE54 => "110110",
        din54_WIDTH => 2,
        CASE55 => "110111",
        din55_WIDTH => 2,
        CASE56 => "111000",
        din56_WIDTH => 2,
        CASE57 => "111001",
        din57_WIDTH => 2,
        CASE58 => "111010",
        din58_WIDTH => 2,
        CASE59 => "111011",
        din59_WIDTH => 2,
        CASE60 => "111100",
        din60_WIDTH => 2,
        CASE61 => "111101",
        din61_WIDTH => 2,
        CASE62 => "111110",
        din62_WIDTH => 2,
        CASE63 => "111111",
        din63_WIDTH => 2,
        def_WIDTH => 2,
        sel_WIDTH => 6,
        dout_WIDTH => 2)
    port map (
        din0 => in_pos,
        din1 => in_pos_1,
        din2 => in_pos_2,
        din3 => in_pos_3,
        din4 => in_pos_4,
        din5 => in_pos_5,
        din6 => in_pos_6,
        din7 => in_pos_7,
        din8 => in_pos_8,
        din9 => in_pos_9,
        din10 => in_pos_10,
        din11 => in_pos_11,
        din12 => in_pos_12,
        din13 => in_pos_13,
        din14 => in_pos_14,
        din15 => in_pos_15,
        din16 => in_pos_16,
        din17 => in_pos_17,
        din18 => in_pos_18,
        din19 => in_pos_19,
        din20 => in_pos_20,
        din21 => in_pos_21,
        din22 => in_pos_22,
        din23 => in_pos_23,
        din24 => in_pos_24,
        din25 => in_pos_25,
        din26 => in_pos_26,
        din27 => in_pos_27,
        din28 => in_pos_28,
        din29 => in_pos_29,
        din30 => in_pos_30,
        din31 => in_pos_31,
        din32 => in_pos_32,
        din33 => in_pos_33,
        din34 => in_pos_34,
        din35 => in_pos_35,
        din36 => in_pos_36,
        din37 => in_pos_37,
        din38 => in_pos_38,
        din39 => in_pos_39,
        din40 => in_pos_40,
        din41 => in_pos_41,
        din42 => in_pos_42,
        din43 => in_pos_43,
        din44 => in_pos_44,
        din45 => in_pos_45,
        din46 => in_pos_46,
        din47 => in_pos_47,
        din48 => in_pos_48,
        din49 => in_pos_49,
        din50 => in_pos_50,
        din51 => in_pos_51,
        din52 => in_pos_52,
        din53 => in_pos_53,
        din54 => in_pos_54,
        din55 => in_pos_55,
        din56 => in_pos_56,
        din57 => in_pos_57,
        din58 => in_pos_58,
        din59 => in_pos_59,
        din60 => in_pos_60,
        din61 => in_pos_61,
        din62 => in_pos_62,
        din63 => in_pos_63,
        def => tmp_3_fu_1113_p129,
        sel => tmp_3_fu_1113_p130,
        dout => tmp_3_fu_1113_p131);

    mul_2s_3s_4_1_1_U387 : component train_step_mul_2s_3s_4_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 2,
        din1_WIDTH => 3,
        dout_WIDTH => 4)
    port map (
        din0 => tmp_3_reg_1865,
        din1 => delta_reg_1855,
        dout => mul_ln76_fu_1366_p2);

    flow_control_loop_pipe_sequential_init_U : component train_step_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter17_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_398_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_398 <= ap_const_lv7_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    i_fu_398 <= add_ln75_fu_1313_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_406_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln73_fu_960_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_406 <= add_ln73_fu_966_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_406 <= ap_const_lv12_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_402_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_402 <= ap_const_lv6_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    j_fu_402 <= select_ln73_1_fu_1003_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then
                WEIGHTS_addr_read_reg_1882 <= m_axi_WEIGHTS_0_RDATA;
                WEIGHTS_addr_reg_1870 <= add_ln76_fu_1351_p2;
                WEIGHTS_addr_reg_1870_pp0_iter10_reg <= WEIGHTS_addr_reg_1870_pp0_iter9_reg;
                WEIGHTS_addr_reg_1870_pp0_iter11_reg <= WEIGHTS_addr_reg_1870_pp0_iter10_reg;
                WEIGHTS_addr_reg_1870_pp0_iter3_reg <= WEIGHTS_addr_reg_1870;
                WEIGHTS_addr_reg_1870_pp0_iter4_reg <= WEIGHTS_addr_reg_1870_pp0_iter3_reg;
                WEIGHTS_addr_reg_1870_pp0_iter5_reg <= WEIGHTS_addr_reg_1870_pp0_iter4_reg;
                WEIGHTS_addr_reg_1870_pp0_iter6_reg <= WEIGHTS_addr_reg_1870_pp0_iter5_reg;
                WEIGHTS_addr_reg_1870_pp0_iter7_reg <= WEIGHTS_addr_reg_1870_pp0_iter6_reg;
                WEIGHTS_addr_reg_1870_pp0_iter8_reg <= WEIGHTS_addr_reg_1870_pp0_iter7_reg;
                WEIGHTS_addr_reg_1870_pp0_iter9_reg <= WEIGHTS_addr_reg_1870_pp0_iter8_reg;
                mul_ln76_reg_1877 <= mul_ln76_fu_1366_p2;
                mul_ln76_reg_1877_pp0_iter10_reg <= mul_ln76_reg_1877_pp0_iter9_reg;
                mul_ln76_reg_1877_pp0_iter11_reg <= mul_ln76_reg_1877_pp0_iter10_reg;
                mul_ln76_reg_1877_pp0_iter3_reg <= mul_ln76_reg_1877;
                mul_ln76_reg_1877_pp0_iter4_reg <= mul_ln76_reg_1877_pp0_iter3_reg;
                mul_ln76_reg_1877_pp0_iter5_reg <= mul_ln76_reg_1877_pp0_iter4_reg;
                mul_ln76_reg_1877_pp0_iter6_reg <= mul_ln76_reg_1877_pp0_iter5_reg;
                mul_ln76_reg_1877_pp0_iter7_reg <= mul_ln76_reg_1877_pp0_iter6_reg;
                mul_ln76_reg_1877_pp0_iter8_reg <= mul_ln76_reg_1877_pp0_iter7_reg;
                mul_ln76_reg_1877_pp0_iter9_reg <= mul_ln76_reg_1877_pp0_iter8_reg;
                    select_ln78_reg_1887(7 downto 1) <= select_ln78_fu_1392_p3(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1))) then
                delta_reg_1855 <= delta_fu_1099_p2;
                empty_reg_1860 <= empty_fu_1105_p1;
                select_ln73_reg_1850 <= select_ln73_fu_989_p3;
                tmp_3_reg_1865 <= tmp_3_fu_1113_p131;
            end if;
        end if;
    end process;
    select_ln78_reg_1887(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    WEIGHTS_blk_n_AR_assign_proc : process(ap_enable_reg_pp0_iter3, m_axi_WEIGHTS_0_ARREADY, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp1))) then 
            WEIGHTS_blk_n_AR <= m_axi_WEIGHTS_0_ARREADY;
        else 
            WEIGHTS_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    WEIGHTS_blk_n_AW_assign_proc : process(ap_enable_reg_pp0_iter12, m_axi_WEIGHTS_0_AWREADY, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp1))) then 
            WEIGHTS_blk_n_AW <= m_axi_WEIGHTS_0_AWREADY;
        else 
            WEIGHTS_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    WEIGHTS_blk_n_B_assign_proc : process(ap_enable_reg_pp0_iter18, m_axi_WEIGHTS_0_BVALID, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp1))) then 
            WEIGHTS_blk_n_B <= m_axi_WEIGHTS_0_BVALID;
        else 
            WEIGHTS_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    WEIGHTS_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter11, m_axi_WEIGHTS_0_RVALID, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp1))) then 
            WEIGHTS_blk_n_R <= m_axi_WEIGHTS_0_RVALID;
        else 
            WEIGHTS_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    WEIGHTS_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter13, m_axi_WEIGHTS_0_WREADY, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp1))) then 
            WEIGHTS_blk_n_W <= m_axi_WEIGHTS_0_WREADY;
        else 
            WEIGHTS_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    add_ln73_1_fu_997_p2 <= std_logic_vector(unsigned(j_fu_402) + unsigned(ap_const_lv6_1));
    add_ln73_fu_966_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv12_1));
    add_ln75_fu_1313_p2 <= std_logic_vector(unsigned(select_ln73_fu_989_p3) + unsigned(ap_const_lv7_1));
    add_ln76_1_fu_1346_p2 <= std_logic_vector(unsigned(zext_ln75_1_fu_1343_p1) + unsigned(W1));
    add_ln76_fu_1351_p2 <= std_logic_vector(unsigned(add_ln76_1_fu_1346_p2) + unsigned(zext_ln75_fu_1339_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_grp1_assign_proc : process(ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter18, m_axi_WEIGHTS_0_RVALID, m_axi_WEIGHTS_0_BVALID)
    begin
                ap_block_pp0_stage0_01001_grp1 <= (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (m_axi_WEIGHTS_0_BVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (m_axi_WEIGHTS_0_RVALID = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter18, m_axi_WEIGHTS_0_AWREADY, m_axi_WEIGHTS_0_WREADY, m_axi_WEIGHTS_0_ARREADY, m_axi_WEIGHTS_0_RVALID, m_axi_WEIGHTS_0_BVALID)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (m_axi_WEIGHTS_0_BVALID = ap_const_logic_0)) or ((m_axi_WEIGHTS_0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1)) or ((m_axi_WEIGHTS_0_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (m_axi_WEIGHTS_0_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (m_axi_WEIGHTS_0_ARREADY = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_grp1_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter18, m_axi_WEIGHTS_0_AWREADY, m_axi_WEIGHTS_0_WREADY, m_axi_WEIGHTS_0_ARREADY, m_axi_WEIGHTS_0_RVALID, m_axi_WEIGHTS_0_BVALID)
    begin
                ap_block_pp0_stage0_11001_grp1 <= (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (m_axi_WEIGHTS_0_BVALID = ap_const_logic_0)) or ((m_axi_WEIGHTS_0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1)) or ((m_axi_WEIGHTS_0_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (m_axi_WEIGHTS_0_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (m_axi_WEIGHTS_0_ARREADY = ap_const_logic_0)));
    end process;

        ap_block_pp0_stage0_grp1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter18, m_axi_WEIGHTS_0_AWREADY, m_axi_WEIGHTS_0_WREADY, m_axi_WEIGHTS_0_ARREADY, m_axi_WEIGHTS_0_RVALID, m_axi_WEIGHTS_0_BVALID)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (m_axi_WEIGHTS_0_BVALID = ap_const_logic_0)) or ((m_axi_WEIGHTS_0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1)) or ((m_axi_WEIGHTS_0_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (m_axi_WEIGHTS_0_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (m_axi_WEIGHTS_0_ARREADY = ap_const_logic_0)));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln73_fu_960_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln73_fu_960_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter17_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter17_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, indvar_flatten_fu_406, ap_block_pp0_stage0)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv12_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_406;
        end if; 
    end process;

    delta_fu_1099_p2 <= std_logic_vector(signed(sext_ln74_fu_1053_p1) - signed(sext_ln74_1_fu_1095_p1));
    empty_fu_1105_p1 <= select_ln73_1_fu_1003_p3(5 - 1 downto 0);
    icmp_ln73_fu_960_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv12_800) else "0";
    icmp_ln75_fu_983_p2 <= "1" when (i_fu_398 = ap_const_lv7_40) else "0";
    m_axi_WEIGHTS_0_ARADDR <= WEIGHTS_addr_reg_1870;
    m_axi_WEIGHTS_0_ARBURST <= ap_const_lv2_0;
    m_axi_WEIGHTS_0_ARCACHE <= ap_const_lv4_0;
    m_axi_WEIGHTS_0_ARID <= ap_const_lv1_0;
    m_axi_WEIGHTS_0_ARLEN <= ap_const_lv64_1(32 - 1 downto 0);
    m_axi_WEIGHTS_0_ARLOCK <= ap_const_lv2_0;
    m_axi_WEIGHTS_0_ARPROT <= ap_const_lv3_0;
    m_axi_WEIGHTS_0_ARQOS <= ap_const_lv4_0;
    m_axi_WEIGHTS_0_ARREGION <= ap_const_lv4_0;
    m_axi_WEIGHTS_0_ARSIZE <= ap_const_lv3_0;
    m_axi_WEIGHTS_0_ARUSER <= ap_const_lv1_0;

    m_axi_WEIGHTS_0_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1))) then 
            m_axi_WEIGHTS_0_ARVALID <= ap_const_logic_1;
        else 
            m_axi_WEIGHTS_0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_WEIGHTS_0_AWADDR <= WEIGHTS_addr_reg_1870_pp0_iter11_reg;
    m_axi_WEIGHTS_0_AWBURST <= ap_const_lv2_0;
    m_axi_WEIGHTS_0_AWCACHE <= ap_const_lv4_0;
    m_axi_WEIGHTS_0_AWID <= ap_const_lv1_0;
    m_axi_WEIGHTS_0_AWLEN <= ap_const_lv64_1(32 - 1 downto 0);
    m_axi_WEIGHTS_0_AWLOCK <= ap_const_lv2_0;
    m_axi_WEIGHTS_0_AWPROT <= ap_const_lv3_0;
    m_axi_WEIGHTS_0_AWQOS <= ap_const_lv4_0;
    m_axi_WEIGHTS_0_AWREGION <= ap_const_lv4_0;
    m_axi_WEIGHTS_0_AWSIZE <= ap_const_lv3_0;
    m_axi_WEIGHTS_0_AWUSER <= ap_const_lv1_0;

    m_axi_WEIGHTS_0_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1))) then 
            m_axi_WEIGHTS_0_AWVALID <= ap_const_logic_1;
        else 
            m_axi_WEIGHTS_0_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_WEIGHTS_0_BREADY_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1))) then 
            m_axi_WEIGHTS_0_BREADY <= ap_const_logic_1;
        else 
            m_axi_WEIGHTS_0_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_WEIGHTS_0_RREADY_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1))) then 
            m_axi_WEIGHTS_0_RREADY <= ap_const_logic_1;
        else 
            m_axi_WEIGHTS_0_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_WEIGHTS_0_WDATA <= select_ln78_reg_1887;
    m_axi_WEIGHTS_0_WID <= ap_const_lv1_0;
    m_axi_WEIGHTS_0_WLAST <= ap_const_logic_0;
    m_axi_WEIGHTS_0_WSTRB <= ap_const_lv1_1;
    m_axi_WEIGHTS_0_WUSER <= ap_const_lv1_0;

    m_axi_WEIGHTS_0_WVALID_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1))) then 
            m_axi_WEIGHTS_0_WVALID <= ap_const_logic_1;
        else 
            m_axi_WEIGHTS_0_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    select_ln73_1_fu_1003_p3 <= 
        add_ln73_1_fu_997_p2 when (icmp_ln75_fu_983_p2(0) = '1') else 
        j_fu_402;
    select_ln73_fu_989_p3 <= 
        ap_const_lv7_0 when (icmp_ln75_fu_983_p2(0) = '1') else 
        i_fu_398;
    select_ln78_fu_1392_p3 <= 
        ap_const_lv8_FF when (tmp_34_fu_1384_p3(0) = '1') else 
        ap_const_lv8_1;
        sext_ln74_1_fu_1095_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_fu_1057_p23),3));

        sext_ln74_fu_1053_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_1015_p23),3));

        sext_ln76_1_fu_1372_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(WEIGHTS_addr_read_reg_1882),9));

        sext_ln76_3_fu_1375_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln76_reg_1877_pp0_iter11_reg),9));

    tmp_2_fu_1057_p21 <= "XX";
    tmp_34_fu_1384_p3 <= w_new_fu_1378_p2(8 downto 8);
    tmp_3_fu_1113_p129 <= "XX";
    tmp_3_fu_1113_p130 <= select_ln73_fu_989_p3(6 - 1 downto 0);
    tmp_4_fu_1332_p3 <= (empty_reg_1860 & ap_const_lv6_0);
    tmp_fu_1015_p21 <= "XX";
    trunc_ln73_fu_1011_p1 <= select_ln73_1_fu_1003_p3(4 - 1 downto 0);
    w_new_fu_1378_p2 <= std_logic_vector(signed(sext_ln76_3_fu_1375_p1) + signed(sext_ln76_1_fu_1372_p1));
    zext_ln75_1_fu_1343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln73_reg_1850),64));
    zext_ln75_fu_1339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_1332_p3),64));
end behav;
