-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity train_step_forwardHidden is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    input_0_val : IN STD_LOGIC_VECTOR (7 downto 0);
    input_1_val : IN STD_LOGIC_VECTOR (7 downto 0);
    input_2_val : IN STD_LOGIC_VECTOR (7 downto 0);
    input_3_val : IN STD_LOGIC_VECTOR (7 downto 0);
    input_4_val : IN STD_LOGIC_VECTOR (7 downto 0);
    input_5_val : IN STD_LOGIC_VECTOR (7 downto 0);
    input_6_val : IN STD_LOGIC_VECTOR (7 downto 0);
    input_7_val : IN STD_LOGIC_VECTOR (7 downto 0);
    W1_0_0 : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_1_0 : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_2_0 : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_3_0 : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_4_0 : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_5_0 : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_6_0 : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_7_0 : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_0_1 : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_1_1 : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_2_1 : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_3_1 : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_4_1 : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_5_1 : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_6_1 : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_7_1 : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_0_2 : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_1_2 : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_2_2 : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_3_2 : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_4_2 : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_5_2 : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_6_2 : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_7_2 : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_0_3 : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_1_3 : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_2_3 : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_3_3 : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_4_3 : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_5_3 : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_6_3 : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_7_3 : IN STD_LOGIC_VECTOR (1 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of train_step_forwardHidden is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_logic_0 : STD_LOGIC := '0';

attribute shreg_extract : string;
    signal input_6_val_read_reg_932 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal input_6_val_read_reg_932_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal input_4_val_read_reg_937 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_4_val_read_reg_937_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal input_2_val_read_reg_942 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_2_val_read_reg_942_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal input_1_val_read_reg_947 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_1_val_read_reg_947_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln56_fu_152_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln56_9_fu_168_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln56_15_fu_180_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln56_21_fu_192_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_796_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln56_reg_1144 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_804_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln56_1_reg_1149 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln56_5_fu_598_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln56_5_reg_1154 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_830_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln56_7_reg_1159 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_838_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln56_8_reg_1164 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln56_12_fu_610_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln56_12_reg_1169 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_864_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln56_14_reg_1174 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_872_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln56_15_reg_1179 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln56_19_fu_622_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln56_19_reg_1184 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_898_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln56_21_reg_1189 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_906_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln56_22_reg_1194 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln56_26_fu_634_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln56_26_reg_1199 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal mul_ln56_fu_303_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln56_3_fu_300_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln56_fu_303_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln56_1_fu_324_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln56_6_fu_321_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln56_1_fu_324_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln56_3_fu_345_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln56_12_fu_342_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln56_3_fu_345_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln56_5_fu_366_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln56_18_fu_363_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln56_5_fu_366_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln56_8_fu_384_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln56_8_fu_384_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln56_9_fu_402_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln56_9_fu_402_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln56_11_fu_420_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln56_11_fu_420_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln56_13_fu_438_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln56_13_fu_438_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln56_16_fu_456_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln56_16_fu_456_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln56_17_fu_474_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln56_17_fu_474_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln56_19_fu_492_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln56_19_fu_492_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln56_21_fu_510_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln56_21_fu_510_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln56_24_fu_528_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln56_24_fu_528_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln56_25_fu_546_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln56_25_fu_546_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln56_27_fu_564_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln56_27_fu_564_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln56_29_fu_582_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln56_29_fu_582_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_812_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_821_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln56_26_fu_595_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln56_25_fu_592_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_846_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_855_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln56_46_fu_607_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln56_45_fu_604_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_880_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_889_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln56_66_fu_619_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln56_65_fu_616_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_914_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_923_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln56_86_fu_631_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln56_85_fu_628_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln56_24_fu_643_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln56_23_fu_640_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln56_2_fu_646_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal x_fu_652_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_657_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln56_44_fu_676_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln56_43_fu_673_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln56_9_fu_679_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal x_4_fu_685_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_32_fu_690_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln56_64_fu_709_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln56_63_fu_706_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln56_16_fu_712_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal x_5_fu_718_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_33_fu_723_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln56_84_fu_742_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln56_83_fu_739_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln56_23_fu_745_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal x_3_fu_751_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_34_fu_756_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln53_fu_665_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln56_fu_698_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln56_1_fu_731_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln61_fu_764_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_796_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_804_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_812_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_821_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_830_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_838_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_846_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_855_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_864_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_872_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_880_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_889_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_898_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_906_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_914_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_923_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_0_val_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal input_1_val_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal input_2_val_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal input_3_val_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal input_4_val_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal input_5_val_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal input_6_val_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal input_7_val_int_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal W1_0_0_int_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal W1_1_0_int_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal W1_2_0_int_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal W1_3_0_int_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal W1_4_0_int_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal W1_5_0_int_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal W1_6_0_int_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal W1_7_0_int_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal W1_0_1_int_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal W1_1_1_int_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal W1_2_1_int_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal W1_3_1_int_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal W1_4_1_int_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal W1_5_1_int_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal W1_6_1_int_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal W1_7_1_int_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal W1_0_2_int_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal W1_1_2_int_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal W1_2_2_int_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal W1_3_2_int_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal W1_4_2_int_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal W1_5_2_int_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal W1_6_2_int_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal W1_7_2_int_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal W1_0_3_int_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal W1_1_3_int_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal W1_2_3_int_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal W1_3_3_int_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal W1_4_3_int_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal W1_5_3_int_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal W1_6_3_int_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal W1_7_3_int_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component train_step_mul_2s_8s_10_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (1 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component train_step_mac_muladd_8s_2s_10s_11_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (1 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;



begin
    mul_2s_8s_10_1_1_U1 : component train_step_mul_2s_8s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 2,
        din1_WIDTH => 8,
        dout_WIDTH => 10)
    port map (
        din0 => W1_1_0_int_reg,
        din1 => mul_ln56_fu_303_p1,
        dout => mul_ln56_fu_303_p2);

    mul_2s_8s_10_1_1_U2 : component train_step_mul_2s_8s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 2,
        din1_WIDTH => 8,
        dout_WIDTH => 10)
    port map (
        din0 => W1_2_0_int_reg,
        din1 => mul_ln56_1_fu_324_p1,
        dout => mul_ln56_1_fu_324_p2);

    mul_2s_8s_10_1_1_U3 : component train_step_mul_2s_8s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 2,
        din1_WIDTH => 8,
        dout_WIDTH => 10)
    port map (
        din0 => W1_4_0_int_reg,
        din1 => mul_ln56_3_fu_345_p1,
        dout => mul_ln56_3_fu_345_p2);

    mul_2s_8s_10_1_1_U4 : component train_step_mul_2s_8s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 2,
        din1_WIDTH => 8,
        dout_WIDTH => 10)
    port map (
        din0 => W1_6_0_int_reg,
        din1 => mul_ln56_5_fu_366_p1,
        dout => mul_ln56_5_fu_366_p2);

    mul_2s_8s_10_1_1_U5 : component train_step_mul_2s_8s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 2,
        din1_WIDTH => 8,
        dout_WIDTH => 10)
    port map (
        din0 => W1_1_1_int_reg,
        din1 => mul_ln56_8_fu_384_p1,
        dout => mul_ln56_8_fu_384_p2);

    mul_2s_8s_10_1_1_U6 : component train_step_mul_2s_8s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 2,
        din1_WIDTH => 8,
        dout_WIDTH => 10)
    port map (
        din0 => W1_2_1_int_reg,
        din1 => mul_ln56_9_fu_402_p1,
        dout => mul_ln56_9_fu_402_p2);

    mul_2s_8s_10_1_1_U7 : component train_step_mul_2s_8s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 2,
        din1_WIDTH => 8,
        dout_WIDTH => 10)
    port map (
        din0 => W1_4_1_int_reg,
        din1 => mul_ln56_11_fu_420_p1,
        dout => mul_ln56_11_fu_420_p2);

    mul_2s_8s_10_1_1_U8 : component train_step_mul_2s_8s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 2,
        din1_WIDTH => 8,
        dout_WIDTH => 10)
    port map (
        din0 => W1_6_1_int_reg,
        din1 => mul_ln56_13_fu_438_p1,
        dout => mul_ln56_13_fu_438_p2);

    mul_2s_8s_10_1_1_U9 : component train_step_mul_2s_8s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 2,
        din1_WIDTH => 8,
        dout_WIDTH => 10)
    port map (
        din0 => W1_1_2_int_reg,
        din1 => mul_ln56_16_fu_456_p1,
        dout => mul_ln56_16_fu_456_p2);

    mul_2s_8s_10_1_1_U10 : component train_step_mul_2s_8s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 2,
        din1_WIDTH => 8,
        dout_WIDTH => 10)
    port map (
        din0 => W1_2_2_int_reg,
        din1 => mul_ln56_17_fu_474_p1,
        dout => mul_ln56_17_fu_474_p2);

    mul_2s_8s_10_1_1_U11 : component train_step_mul_2s_8s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 2,
        din1_WIDTH => 8,
        dout_WIDTH => 10)
    port map (
        din0 => W1_4_2_int_reg,
        din1 => mul_ln56_19_fu_492_p1,
        dout => mul_ln56_19_fu_492_p2);

    mul_2s_8s_10_1_1_U12 : component train_step_mul_2s_8s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 2,
        din1_WIDTH => 8,
        dout_WIDTH => 10)
    port map (
        din0 => W1_6_2_int_reg,
        din1 => mul_ln56_21_fu_510_p1,
        dout => mul_ln56_21_fu_510_p2);

    mul_2s_8s_10_1_1_U13 : component train_step_mul_2s_8s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 2,
        din1_WIDTH => 8,
        dout_WIDTH => 10)
    port map (
        din0 => W1_1_3_int_reg,
        din1 => mul_ln56_24_fu_528_p1,
        dout => mul_ln56_24_fu_528_p2);

    mul_2s_8s_10_1_1_U14 : component train_step_mul_2s_8s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 2,
        din1_WIDTH => 8,
        dout_WIDTH => 10)
    port map (
        din0 => W1_2_3_int_reg,
        din1 => mul_ln56_25_fu_546_p1,
        dout => mul_ln56_25_fu_546_p2);

    mul_2s_8s_10_1_1_U15 : component train_step_mul_2s_8s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 2,
        din1_WIDTH => 8,
        dout_WIDTH => 10)
    port map (
        din0 => W1_4_3_int_reg,
        din1 => mul_ln56_27_fu_564_p1,
        dout => mul_ln56_27_fu_564_p2);

    mul_2s_8s_10_1_1_U16 : component train_step_mul_2s_8s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 2,
        din1_WIDTH => 8,
        dout_WIDTH => 10)
    port map (
        din0 => W1_6_3_int_reg,
        din1 => mul_ln56_29_fu_582_p1,
        dout => mul_ln56_29_fu_582_p2);

    mac_muladd_8s_2s_10s_11_4_1_U17 : component train_step_mac_muladd_8s_2s_10s_11_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        din2_WIDTH => 10,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_796_p0,
        din1 => W1_0_0_int_reg,
        din2 => mul_ln56_fu_303_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_796_p3);

    mac_muladd_8s_2s_10s_11_4_1_U18 : component train_step_mac_muladd_8s_2s_10s_11_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        din2_WIDTH => 10,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_804_p0,
        din1 => W1_3_0_int_reg,
        din2 => mul_ln56_1_fu_324_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_804_p3);

    mac_muladd_8s_2s_10s_11_4_1_U19 : component train_step_mac_muladd_8s_2s_10s_11_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        din2_WIDTH => 10,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_812_p0,
        din1 => W1_5_0_int_reg,
        din2 => mul_ln56_3_fu_345_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_812_p3);

    mac_muladd_8s_2s_10s_11_4_1_U20 : component train_step_mac_muladd_8s_2s_10s_11_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        din2_WIDTH => 10,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_821_p0,
        din1 => W1_7_0_int_reg,
        din2 => mul_ln56_5_fu_366_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_821_p3);

    mac_muladd_8s_2s_10s_11_4_1_U21 : component train_step_mac_muladd_8s_2s_10s_11_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        din2_WIDTH => 10,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_830_p0,
        din1 => W1_0_1_int_reg,
        din2 => mul_ln56_8_fu_384_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_830_p3);

    mac_muladd_8s_2s_10s_11_4_1_U22 : component train_step_mac_muladd_8s_2s_10s_11_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        din2_WIDTH => 10,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_838_p0,
        din1 => W1_3_1_int_reg,
        din2 => mul_ln56_9_fu_402_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_838_p3);

    mac_muladd_8s_2s_10s_11_4_1_U23 : component train_step_mac_muladd_8s_2s_10s_11_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        din2_WIDTH => 10,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_846_p0,
        din1 => W1_5_1_int_reg,
        din2 => mul_ln56_11_fu_420_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_846_p3);

    mac_muladd_8s_2s_10s_11_4_1_U24 : component train_step_mac_muladd_8s_2s_10s_11_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        din2_WIDTH => 10,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_855_p0,
        din1 => W1_7_1_int_reg,
        din2 => mul_ln56_13_fu_438_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_855_p3);

    mac_muladd_8s_2s_10s_11_4_1_U25 : component train_step_mac_muladd_8s_2s_10s_11_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        din2_WIDTH => 10,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_864_p0,
        din1 => W1_0_2_int_reg,
        din2 => mul_ln56_16_fu_456_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_864_p3);

    mac_muladd_8s_2s_10s_11_4_1_U26 : component train_step_mac_muladd_8s_2s_10s_11_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        din2_WIDTH => 10,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_872_p0,
        din1 => W1_3_2_int_reg,
        din2 => mul_ln56_17_fu_474_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_872_p3);

    mac_muladd_8s_2s_10s_11_4_1_U27 : component train_step_mac_muladd_8s_2s_10s_11_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        din2_WIDTH => 10,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_880_p0,
        din1 => W1_5_2_int_reg,
        din2 => mul_ln56_19_fu_492_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_880_p3);

    mac_muladd_8s_2s_10s_11_4_1_U28 : component train_step_mac_muladd_8s_2s_10s_11_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        din2_WIDTH => 10,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_889_p0,
        din1 => W1_7_2_int_reg,
        din2 => mul_ln56_21_fu_510_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_889_p3);

    mac_muladd_8s_2s_10s_11_4_1_U29 : component train_step_mac_muladd_8s_2s_10s_11_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        din2_WIDTH => 10,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_898_p0,
        din1 => W1_0_3_int_reg,
        din2 => mul_ln56_24_fu_528_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_898_p3);

    mac_muladd_8s_2s_10s_11_4_1_U30 : component train_step_mac_muladd_8s_2s_10s_11_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        din2_WIDTH => 10,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_906_p0,
        din1 => W1_3_3_int_reg,
        din2 => mul_ln56_25_fu_546_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_906_p3);

    mac_muladd_8s_2s_10s_11_4_1_U31 : component train_step_mac_muladd_8s_2s_10s_11_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        din2_WIDTH => 10,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_914_p0,
        din1 => W1_5_3_int_reg,
        din2 => mul_ln56_27_fu_564_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_914_p3);

    mac_muladd_8s_2s_10s_11_4_1_U32 : component train_step_mac_muladd_8s_2s_10s_11_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 2,
        din2_WIDTH => 10,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_923_p0,
        din1 => W1_7_3_int_reg,
        din2 => mul_ln56_29_fu_582_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_923_p3);





    W1_0_0_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            W1_0_0_int_reg <= W1_0_0;
        end if;
    end process;

    W1_0_1_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            W1_0_1_int_reg <= W1_0_1;
        end if;
    end process;

    W1_0_2_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            W1_0_2_int_reg <= W1_0_2;
        end if;
    end process;

    W1_0_3_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            W1_0_3_int_reg <= W1_0_3;
        end if;
    end process;

    W1_1_0_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            W1_1_0_int_reg <= W1_1_0;
        end if;
    end process;

    W1_1_1_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            W1_1_1_int_reg <= W1_1_1;
        end if;
    end process;

    W1_1_2_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            W1_1_2_int_reg <= W1_1_2;
        end if;
    end process;

    W1_1_3_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            W1_1_3_int_reg <= W1_1_3;
        end if;
    end process;

    W1_2_0_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            W1_2_0_int_reg <= W1_2_0;
        end if;
    end process;

    W1_2_1_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            W1_2_1_int_reg <= W1_2_1;
        end if;
    end process;

    W1_2_2_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            W1_2_2_int_reg <= W1_2_2;
        end if;
    end process;

    W1_2_3_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            W1_2_3_int_reg <= W1_2_3;
        end if;
    end process;

    W1_3_0_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            W1_3_0_int_reg <= W1_3_0;
        end if;
    end process;

    W1_3_1_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            W1_3_1_int_reg <= W1_3_1;
        end if;
    end process;

    W1_3_2_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            W1_3_2_int_reg <= W1_3_2;
        end if;
    end process;

    W1_3_3_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            W1_3_3_int_reg <= W1_3_3;
        end if;
    end process;

    W1_4_0_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            W1_4_0_int_reg <= W1_4_0;
        end if;
    end process;

    W1_4_1_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            W1_4_1_int_reg <= W1_4_1;
        end if;
    end process;

    W1_4_2_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            W1_4_2_int_reg <= W1_4_2;
        end if;
    end process;

    W1_4_3_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            W1_4_3_int_reg <= W1_4_3;
        end if;
    end process;

    W1_5_0_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            W1_5_0_int_reg <= W1_5_0;
        end if;
    end process;

    W1_5_1_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            W1_5_1_int_reg <= W1_5_1;
        end if;
    end process;

    W1_5_2_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            W1_5_2_int_reg <= W1_5_2;
        end if;
    end process;

    W1_5_3_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            W1_5_3_int_reg <= W1_5_3;
        end if;
    end process;

    W1_6_0_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            W1_6_0_int_reg <= W1_6_0;
        end if;
    end process;

    W1_6_1_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            W1_6_1_int_reg <= W1_6_1;
        end if;
    end process;

    W1_6_2_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            W1_6_2_int_reg <= W1_6_2;
        end if;
    end process;

    W1_6_3_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            W1_6_3_int_reg <= W1_6_3;
        end if;
    end process;

    W1_7_0_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            W1_7_0_int_reg <= W1_7_0;
        end if;
    end process;

    W1_7_1_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            W1_7_1_int_reg <= W1_7_1;
        end if;
    end process;

    W1_7_2_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            W1_7_2_int_reg <= W1_7_2;
        end if;
    end process;

    W1_7_3_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            W1_7_3_int_reg <= W1_7_3;
        end if;
    end process;

    input_0_val_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            input_0_val_int_reg <= input_0_val;
        end if;
    end process;

    input_1_val_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            input_1_val_int_reg <= input_1_val;
        end if;
    end process;

    input_2_val_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            input_2_val_int_reg <= input_2_val;
        end if;
    end process;

    input_3_val_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            input_3_val_int_reg <= input_3_val;
        end if;
    end process;

    input_4_val_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            input_4_val_int_reg <= input_4_val;
        end if;
    end process;

    input_5_val_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            input_5_val_int_reg <= input_5_val;
        end if;
    end process;

    input_6_val_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            input_6_val_int_reg <= input_6_val;
        end if;
    end process;

    input_7_val_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            input_7_val_int_reg <= input_7_val;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln56_12_reg_1169 <= add_ln56_12_fu_610_p2;
                add_ln56_14_reg_1174 <= grp_fu_864_p3;
                add_ln56_15_reg_1179 <= grp_fu_872_p3;
                add_ln56_19_reg_1184 <= add_ln56_19_fu_622_p2;
                add_ln56_1_reg_1149 <= grp_fu_804_p3;
                add_ln56_21_reg_1189 <= grp_fu_898_p3;
                add_ln56_22_reg_1194 <= grp_fu_906_p3;
                add_ln56_26_reg_1199 <= add_ln56_26_fu_634_p2;
                add_ln56_5_reg_1154 <= add_ln56_5_fu_598_p2;
                add_ln56_7_reg_1159 <= grp_fu_830_p3;
                add_ln56_8_reg_1164 <= grp_fu_838_p3;
                add_ln56_reg_1144 <= grp_fu_796_p3;
                input_1_val_read_reg_947 <= input_1_val_int_reg;
                input_1_val_read_reg_947_pp0_iter1_reg <= input_1_val_read_reg_947;
                input_2_val_read_reg_942 <= input_2_val_int_reg;
                input_2_val_read_reg_942_pp0_iter1_reg <= input_2_val_read_reg_942;
                input_4_val_read_reg_937 <= input_4_val_int_reg;
                input_4_val_read_reg_937_pp0_iter1_reg <= input_4_val_read_reg_937;
                input_6_val_read_reg_932 <= input_6_val_int_reg;
                input_6_val_read_reg_932_pp0_iter1_reg <= input_6_val_read_reg_932;
            end if;
        end if;
    end process;
    add_ln56_12_fu_610_p2 <= std_logic_vector(signed(sext_ln56_46_fu_607_p1) + signed(sext_ln56_45_fu_604_p1));
    add_ln56_16_fu_712_p2 <= std_logic_vector(signed(sext_ln56_64_fu_709_p1) + signed(sext_ln56_63_fu_706_p1));
    add_ln56_19_fu_622_p2 <= std_logic_vector(signed(sext_ln56_66_fu_619_p1) + signed(sext_ln56_65_fu_616_p1));
    add_ln56_23_fu_745_p2 <= std_logic_vector(signed(sext_ln56_84_fu_742_p1) + signed(sext_ln56_83_fu_739_p1));
    add_ln56_26_fu_634_p2 <= std_logic_vector(signed(sext_ln56_86_fu_631_p1) + signed(sext_ln56_85_fu_628_p1));
    add_ln56_2_fu_646_p2 <= std_logic_vector(signed(sext_ln56_24_fu_643_p1) + signed(sext_ln56_23_fu_640_p1));
    add_ln56_5_fu_598_p2 <= std_logic_vector(signed(sext_ln56_26_fu_595_p1) + signed(sext_ln56_25_fu_592_p1));
    add_ln56_9_fu_679_p2 <= std_logic_vector(signed(sext_ln56_44_fu_676_p1) + signed(sext_ln56_43_fu_673_p1));
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
    ap_return_0 <= select_ln53_fu_665_p3;
    ap_return_1 <= select_ln56_fu_698_p3;
    ap_return_2 <= select_ln56_1_fu_731_p3;
    ap_return_3 <= select_ln61_fu_764_p3;
    grp_fu_796_p0 <= sext_ln56_fu_152_p1(8 - 1 downto 0);
    grp_fu_804_p0 <= sext_ln56_9_fu_168_p1(8 - 1 downto 0);
    grp_fu_812_p0 <= sext_ln56_15_fu_180_p1(8 - 1 downto 0);
    grp_fu_821_p0 <= sext_ln56_21_fu_192_p1(8 - 1 downto 0);
    grp_fu_830_p0 <= sext_ln56_fu_152_p1(8 - 1 downto 0);
    grp_fu_838_p0 <= sext_ln56_9_fu_168_p1(8 - 1 downto 0);
    grp_fu_846_p0 <= sext_ln56_15_fu_180_p1(8 - 1 downto 0);
    grp_fu_855_p0 <= sext_ln56_21_fu_192_p1(8 - 1 downto 0);
    grp_fu_864_p0 <= sext_ln56_fu_152_p1(8 - 1 downto 0);
    grp_fu_872_p0 <= sext_ln56_9_fu_168_p1(8 - 1 downto 0);
    grp_fu_880_p0 <= sext_ln56_15_fu_180_p1(8 - 1 downto 0);
    grp_fu_889_p0 <= sext_ln56_21_fu_192_p1(8 - 1 downto 0);
    grp_fu_898_p0 <= sext_ln56_fu_152_p1(8 - 1 downto 0);
    grp_fu_906_p0 <= sext_ln56_9_fu_168_p1(8 - 1 downto 0);
    grp_fu_914_p0 <= sext_ln56_15_fu_180_p1(8 - 1 downto 0);
    grp_fu_923_p0 <= sext_ln56_21_fu_192_p1(8 - 1 downto 0);
    mul_ln56_11_fu_420_p1 <= sext_ln56_12_fu_342_p1(8 - 1 downto 0);
    mul_ln56_13_fu_438_p1 <= sext_ln56_18_fu_363_p1(8 - 1 downto 0);
    mul_ln56_16_fu_456_p1 <= sext_ln56_3_fu_300_p1(8 - 1 downto 0);
    mul_ln56_17_fu_474_p1 <= sext_ln56_6_fu_321_p1(8 - 1 downto 0);
    mul_ln56_19_fu_492_p1 <= sext_ln56_12_fu_342_p1(8 - 1 downto 0);
    mul_ln56_1_fu_324_p1 <= sext_ln56_6_fu_321_p1(8 - 1 downto 0);
    mul_ln56_21_fu_510_p1 <= sext_ln56_18_fu_363_p1(8 - 1 downto 0);
    mul_ln56_24_fu_528_p1 <= sext_ln56_3_fu_300_p1(8 - 1 downto 0);
    mul_ln56_25_fu_546_p1 <= sext_ln56_6_fu_321_p1(8 - 1 downto 0);
    mul_ln56_27_fu_564_p1 <= sext_ln56_12_fu_342_p1(8 - 1 downto 0);
    mul_ln56_29_fu_582_p1 <= sext_ln56_18_fu_363_p1(8 - 1 downto 0);
    mul_ln56_3_fu_345_p1 <= sext_ln56_12_fu_342_p1(8 - 1 downto 0);
    mul_ln56_5_fu_366_p1 <= sext_ln56_18_fu_363_p1(8 - 1 downto 0);
    mul_ln56_8_fu_384_p1 <= sext_ln56_3_fu_300_p1(8 - 1 downto 0);
    mul_ln56_9_fu_402_p1 <= sext_ln56_6_fu_321_p1(8 - 1 downto 0);
    mul_ln56_fu_303_p1 <= sext_ln56_3_fu_300_p1(8 - 1 downto 0);
    select_ln53_fu_665_p3 <= 
        ap_const_lv8_FF when (tmp_fu_657_p3(0) = '1') else 
        ap_const_lv8_1;
    select_ln56_1_fu_731_p3 <= 
        ap_const_lv8_FF when (tmp_33_fu_723_p3(0) = '1') else 
        ap_const_lv8_1;
    select_ln56_fu_698_p3 <= 
        ap_const_lv8_FF when (tmp_32_fu_690_p3(0) = '1') else 
        ap_const_lv8_1;
    select_ln61_fu_764_p3 <= 
        ap_const_lv8_FF when (tmp_34_fu_756_p3(0) = '1') else 
        ap_const_lv8_1;
        sext_ln56_12_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_4_val_read_reg_937_pp0_iter1_reg),10));

        sext_ln56_15_fu_180_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_5_val_int_reg),10));

        sext_ln56_18_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_6_val_read_reg_932_pp0_iter1_reg),10));

        sext_ln56_21_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_7_val_int_reg),10));

        sext_ln56_23_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln56_reg_1144),12));

        sext_ln56_24_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln56_1_reg_1149),12));

        sext_ln56_25_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_812_p3),12));

        sext_ln56_26_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_821_p3),12));

        sext_ln56_3_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_1_val_read_reg_947_pp0_iter1_reg),10));

        sext_ln56_43_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln56_7_reg_1159),12));

        sext_ln56_44_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln56_8_reg_1164),12));

        sext_ln56_45_fu_604_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_846_p3),12));

        sext_ln56_46_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_855_p3),12));

        sext_ln56_63_fu_706_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln56_14_reg_1174),12));

        sext_ln56_64_fu_709_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln56_15_reg_1179),12));

        sext_ln56_65_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_880_p3),12));

        sext_ln56_66_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_889_p3),12));

        sext_ln56_6_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_2_val_read_reg_942_pp0_iter1_reg),10));

        sext_ln56_83_fu_739_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln56_21_reg_1189),12));

        sext_ln56_84_fu_742_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln56_22_reg_1194),12));

        sext_ln56_85_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_914_p3),12));

        sext_ln56_86_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_923_p3),12));

        sext_ln56_9_fu_168_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_3_val_int_reg),10));

        sext_ln56_fu_152_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_0_val_int_reg),10));

    tmp_32_fu_690_p3 <= x_4_fu_685_p2(11 downto 11);
    tmp_33_fu_723_p3 <= x_5_fu_718_p2(11 downto 11);
    tmp_34_fu_756_p3 <= x_3_fu_751_p2(11 downto 11);
    tmp_fu_657_p3 <= x_fu_652_p2(11 downto 11);
    x_3_fu_751_p2 <= std_logic_vector(unsigned(add_ln56_26_reg_1199) + unsigned(add_ln56_23_fu_745_p2));
    x_4_fu_685_p2 <= std_logic_vector(unsigned(add_ln56_12_reg_1169) + unsigned(add_ln56_9_fu_679_p2));
    x_5_fu_718_p2 <= std_logic_vector(unsigned(add_ln56_19_reg_1184) + unsigned(add_ln56_16_fu_712_p2));
    x_fu_652_p2 <= std_logic_vector(unsigned(add_ln56_5_reg_1154) + unsigned(add_ln56_2_fu_646_p2));
end behav;
