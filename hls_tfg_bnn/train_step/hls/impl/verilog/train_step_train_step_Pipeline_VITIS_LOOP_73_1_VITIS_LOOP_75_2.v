// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module train_step_train_step_Pipeline_VITIS_LOOP_73_1_VITIS_LOOP_75_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_WEIGHTS_0_AWVALID,
        m_axi_WEIGHTS_0_AWREADY,
        m_axi_WEIGHTS_0_AWADDR,
        m_axi_WEIGHTS_0_AWID,
        m_axi_WEIGHTS_0_AWLEN,
        m_axi_WEIGHTS_0_AWSIZE,
        m_axi_WEIGHTS_0_AWBURST,
        m_axi_WEIGHTS_0_AWLOCK,
        m_axi_WEIGHTS_0_AWCACHE,
        m_axi_WEIGHTS_0_AWPROT,
        m_axi_WEIGHTS_0_AWQOS,
        m_axi_WEIGHTS_0_AWREGION,
        m_axi_WEIGHTS_0_AWUSER,
        m_axi_WEIGHTS_0_WVALID,
        m_axi_WEIGHTS_0_WREADY,
        m_axi_WEIGHTS_0_WDATA,
        m_axi_WEIGHTS_0_WSTRB,
        m_axi_WEIGHTS_0_WLAST,
        m_axi_WEIGHTS_0_WID,
        m_axi_WEIGHTS_0_WUSER,
        m_axi_WEIGHTS_0_ARVALID,
        m_axi_WEIGHTS_0_ARREADY,
        m_axi_WEIGHTS_0_ARADDR,
        m_axi_WEIGHTS_0_ARID,
        m_axi_WEIGHTS_0_ARLEN,
        m_axi_WEIGHTS_0_ARSIZE,
        m_axi_WEIGHTS_0_ARBURST,
        m_axi_WEIGHTS_0_ARLOCK,
        m_axi_WEIGHTS_0_ARCACHE,
        m_axi_WEIGHTS_0_ARPROT,
        m_axi_WEIGHTS_0_ARQOS,
        m_axi_WEIGHTS_0_ARREGION,
        m_axi_WEIGHTS_0_ARUSER,
        m_axi_WEIGHTS_0_RVALID,
        m_axi_WEIGHTS_0_RREADY,
        m_axi_WEIGHTS_0_RDATA,
        m_axi_WEIGHTS_0_RLAST,
        m_axi_WEIGHTS_0_RID,
        m_axi_WEIGHTS_0_RFIFONUM,
        m_axi_WEIGHTS_0_RUSER,
        m_axi_WEIGHTS_0_RRESP,
        m_axi_WEIGHTS_0_BVALID,
        m_axi_WEIGHTS_0_BREADY,
        m_axi_WEIGHTS_0_BRESP,
        m_axi_WEIGHTS_0_BID,
        m_axi_WEIGHTS_0_BUSER,
        out_pos_load,
        out_pos_1_load,
        out_pos_2_load,
        out_pos_3_load,
        out_pos_4_load,
        out_pos_5_load,
        out_pos_6_load,
        out_pos_7_load,
        out_pos_8_load,
        out_pos_9_load,
        out_neg_load,
        out_neg_1_load,
        out_neg_2_load,
        out_neg_3_load,
        out_neg_4_load,
        out_neg_5_load,
        out_neg_6_load,
        out_neg_7_load,
        out_neg_8_load,
        out_neg_9_load,
        W1,
        in_pos,
        in_pos_1,
        in_pos_2,
        in_pos_3,
        in_pos_4,
        in_pos_5,
        in_pos_6,
        in_pos_7,
        in_pos_8,
        in_pos_9,
        in_pos_10,
        in_pos_11,
        in_pos_12,
        in_pos_13,
        in_pos_14,
        in_pos_15,
        in_pos_16,
        in_pos_17,
        in_pos_18,
        in_pos_19,
        in_pos_20,
        in_pos_21,
        in_pos_22,
        in_pos_23,
        in_pos_24,
        in_pos_25,
        in_pos_26,
        in_pos_27,
        in_pos_28,
        in_pos_29,
        in_pos_30,
        in_pos_31,
        in_pos_32,
        in_pos_33,
        in_pos_34,
        in_pos_35,
        in_pos_36,
        in_pos_37,
        in_pos_38,
        in_pos_39,
        in_pos_40,
        in_pos_41,
        in_pos_42,
        in_pos_43,
        in_pos_44,
        in_pos_45,
        in_pos_46,
        in_pos_47,
        in_pos_48,
        in_pos_49,
        in_pos_50,
        in_pos_51,
        in_pos_52,
        in_pos_53,
        in_pos_54,
        in_pos_55,
        in_pos_56,
        in_pos_57,
        in_pos_58,
        in_pos_59,
        in_pos_60,
        in_pos_61,
        in_pos_62,
        in_pos_63
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_WEIGHTS_0_AWVALID;
input   m_axi_WEIGHTS_0_AWREADY;
output  [63:0] m_axi_WEIGHTS_0_AWADDR;
output  [0:0] m_axi_WEIGHTS_0_AWID;
output  [31:0] m_axi_WEIGHTS_0_AWLEN;
output  [2:0] m_axi_WEIGHTS_0_AWSIZE;
output  [1:0] m_axi_WEIGHTS_0_AWBURST;
output  [1:0] m_axi_WEIGHTS_0_AWLOCK;
output  [3:0] m_axi_WEIGHTS_0_AWCACHE;
output  [2:0] m_axi_WEIGHTS_0_AWPROT;
output  [3:0] m_axi_WEIGHTS_0_AWQOS;
output  [3:0] m_axi_WEIGHTS_0_AWREGION;
output  [0:0] m_axi_WEIGHTS_0_AWUSER;
output   m_axi_WEIGHTS_0_WVALID;
input   m_axi_WEIGHTS_0_WREADY;
output  [7:0] m_axi_WEIGHTS_0_WDATA;
output  [0:0] m_axi_WEIGHTS_0_WSTRB;
output   m_axi_WEIGHTS_0_WLAST;
output  [0:0] m_axi_WEIGHTS_0_WID;
output  [0:0] m_axi_WEIGHTS_0_WUSER;
output   m_axi_WEIGHTS_0_ARVALID;
input   m_axi_WEIGHTS_0_ARREADY;
output  [63:0] m_axi_WEIGHTS_0_ARADDR;
output  [0:0] m_axi_WEIGHTS_0_ARID;
output  [31:0] m_axi_WEIGHTS_0_ARLEN;
output  [2:0] m_axi_WEIGHTS_0_ARSIZE;
output  [1:0] m_axi_WEIGHTS_0_ARBURST;
output  [1:0] m_axi_WEIGHTS_0_ARLOCK;
output  [3:0] m_axi_WEIGHTS_0_ARCACHE;
output  [2:0] m_axi_WEIGHTS_0_ARPROT;
output  [3:0] m_axi_WEIGHTS_0_ARQOS;
output  [3:0] m_axi_WEIGHTS_0_ARREGION;
output  [0:0] m_axi_WEIGHTS_0_ARUSER;
input   m_axi_WEIGHTS_0_RVALID;
output   m_axi_WEIGHTS_0_RREADY;
input  [7:0] m_axi_WEIGHTS_0_RDATA;
input   m_axi_WEIGHTS_0_RLAST;
input  [0:0] m_axi_WEIGHTS_0_RID;
input  [10:0] m_axi_WEIGHTS_0_RFIFONUM;
input  [0:0] m_axi_WEIGHTS_0_RUSER;
input  [1:0] m_axi_WEIGHTS_0_RRESP;
input   m_axi_WEIGHTS_0_BVALID;
output   m_axi_WEIGHTS_0_BREADY;
input  [1:0] m_axi_WEIGHTS_0_BRESP;
input  [0:0] m_axi_WEIGHTS_0_BID;
input  [0:0] m_axi_WEIGHTS_0_BUSER;
input  [1:0] out_pos_load;
input  [1:0] out_pos_1_load;
input  [1:0] out_pos_2_load;
input  [1:0] out_pos_3_load;
input  [1:0] out_pos_4_load;
input  [1:0] out_pos_5_load;
input  [1:0] out_pos_6_load;
input  [1:0] out_pos_7_load;
input  [1:0] out_pos_8_load;
input  [1:0] out_pos_9_load;
input  [1:0] out_neg_load;
input  [1:0] out_neg_1_load;
input  [1:0] out_neg_2_load;
input  [1:0] out_neg_3_load;
input  [1:0] out_neg_4_load;
input  [1:0] out_neg_5_load;
input  [1:0] out_neg_6_load;
input  [1:0] out_neg_7_load;
input  [1:0] out_neg_8_load;
input  [1:0] out_neg_9_load;
input  [63:0] W1;
input  [1:0] in_pos;
input  [1:0] in_pos_1;
input  [1:0] in_pos_2;
input  [1:0] in_pos_3;
input  [1:0] in_pos_4;
input  [1:0] in_pos_5;
input  [1:0] in_pos_6;
input  [1:0] in_pos_7;
input  [1:0] in_pos_8;
input  [1:0] in_pos_9;
input  [1:0] in_pos_10;
input  [1:0] in_pos_11;
input  [1:0] in_pos_12;
input  [1:0] in_pos_13;
input  [1:0] in_pos_14;
input  [1:0] in_pos_15;
input  [1:0] in_pos_16;
input  [1:0] in_pos_17;
input  [1:0] in_pos_18;
input  [1:0] in_pos_19;
input  [1:0] in_pos_20;
input  [1:0] in_pos_21;
input  [1:0] in_pos_22;
input  [1:0] in_pos_23;
input  [1:0] in_pos_24;
input  [1:0] in_pos_25;
input  [1:0] in_pos_26;
input  [1:0] in_pos_27;
input  [1:0] in_pos_28;
input  [1:0] in_pos_29;
input  [1:0] in_pos_30;
input  [1:0] in_pos_31;
input  [1:0] in_pos_32;
input  [1:0] in_pos_33;
input  [1:0] in_pos_34;
input  [1:0] in_pos_35;
input  [1:0] in_pos_36;
input  [1:0] in_pos_37;
input  [1:0] in_pos_38;
input  [1:0] in_pos_39;
input  [1:0] in_pos_40;
input  [1:0] in_pos_41;
input  [1:0] in_pos_42;
input  [1:0] in_pos_43;
input  [1:0] in_pos_44;
input  [1:0] in_pos_45;
input  [1:0] in_pos_46;
input  [1:0] in_pos_47;
input  [1:0] in_pos_48;
input  [1:0] in_pos_49;
input  [1:0] in_pos_50;
input  [1:0] in_pos_51;
input  [1:0] in_pos_52;
input  [1:0] in_pos_53;
input  [1:0] in_pos_54;
input  [1:0] in_pos_55;
input  [1:0] in_pos_56;
input  [1:0] in_pos_57;
input  [1:0] in_pos_58;
input  [1:0] in_pos_59;
input  [1:0] in_pos_60;
input  [1:0] in_pos_61;
input  [1:0] in_pos_62;
input  [1:0] in_pos_63;

reg ap_idle;
reg m_axi_WEIGHTS_0_AWVALID;
reg m_axi_WEIGHTS_0_WVALID;
reg m_axi_WEIGHTS_0_ARVALID;
reg m_axi_WEIGHTS_0_RREADY;
reg m_axi_WEIGHTS_0_BREADY;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_idle_pp0;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln73_fu_960_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    WEIGHTS_blk_n_AR;
wire    ap_block_pp0_stage0_grp1;
reg    WEIGHTS_blk_n_R;
reg    WEIGHTS_blk_n_AW;
reg    WEIGHTS_blk_n_W;
reg    WEIGHTS_blk_n_B;
reg    ap_block_pp0_stage0_11001_grp1;
reg    ap_block_pp0_stage0_11001;
wire   [6:0] select_ln73_fu_989_p3;
reg   [6:0] select_ln73_reg_1850;
wire   [2:0] delta_fu_1099_p2;
reg  signed [2:0] delta_reg_1855;
wire   [4:0] empty_fu_1105_p1;
reg   [4:0] empty_reg_1860;
wire   [1:0] tmp_3_fu_1113_p131;
reg  signed [1:0] tmp_3_reg_1865;
reg   [63:0] WEIGHTS_addr_reg_1870;
reg   [63:0] WEIGHTS_addr_reg_1870_pp0_iter3_reg;
reg   [63:0] WEIGHTS_addr_reg_1870_pp0_iter4_reg;
reg   [63:0] WEIGHTS_addr_reg_1870_pp0_iter5_reg;
reg   [63:0] WEIGHTS_addr_reg_1870_pp0_iter6_reg;
reg   [63:0] WEIGHTS_addr_reg_1870_pp0_iter7_reg;
reg   [63:0] WEIGHTS_addr_reg_1870_pp0_iter8_reg;
reg   [63:0] WEIGHTS_addr_reg_1870_pp0_iter9_reg;
reg   [63:0] WEIGHTS_addr_reg_1870_pp0_iter10_reg;
reg   [63:0] WEIGHTS_addr_reg_1870_pp0_iter11_reg;
wire   [3:0] mul_ln76_fu_1366_p2;
reg   [3:0] mul_ln76_reg_1877;
reg   [3:0] mul_ln76_reg_1877_pp0_iter3_reg;
reg   [3:0] mul_ln76_reg_1877_pp0_iter4_reg;
reg   [3:0] mul_ln76_reg_1877_pp0_iter5_reg;
reg   [3:0] mul_ln76_reg_1877_pp0_iter6_reg;
reg   [3:0] mul_ln76_reg_1877_pp0_iter7_reg;
reg   [3:0] mul_ln76_reg_1877_pp0_iter8_reg;
reg   [3:0] mul_ln76_reg_1877_pp0_iter9_reg;
reg   [3:0] mul_ln76_reg_1877_pp0_iter10_reg;
reg   [3:0] mul_ln76_reg_1877_pp0_iter11_reg;
reg  signed [7:0] WEIGHTS_addr_read_reg_1882;
wire   [7:0] select_ln78_fu_1392_p3;
reg   [7:0] select_ln78_reg_1887;
wire   [63:0] add_ln76_fu_1351_p2;
reg    ap_block_pp0_stage0_01001_grp1;
reg   [6:0] i_fu_398;
wire   [6:0] add_ln75_fu_1313_p2;
wire    ap_loop_init;
reg   [5:0] j_fu_402;
wire   [5:0] select_ln73_1_fu_1003_p3;
reg   [11:0] indvar_flatten_fu_406;
wire   [11:0] add_ln73_fu_966_p2;
reg   [11:0] ap_sig_allocacmp_indvar_flatten_load;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln75_fu_983_p2;
wire   [5:0] add_ln73_1_fu_997_p2;
wire   [1:0] tmp_fu_1015_p21;
wire   [3:0] trunc_ln73_fu_1011_p1;
wire   [1:0] tmp_fu_1015_p23;
wire   [1:0] tmp_2_fu_1057_p21;
wire   [1:0] tmp_2_fu_1057_p23;
wire  signed [2:0] sext_ln74_fu_1053_p1;
wire  signed [2:0] sext_ln74_1_fu_1095_p1;
wire   [1:0] tmp_3_fu_1113_p129;
wire   [5:0] tmp_3_fu_1113_p130;
wire   [10:0] tmp_4_fu_1332_p3;
wire   [63:0] zext_ln75_1_fu_1343_p1;
wire   [63:0] add_ln76_1_fu_1346_p2;
wire   [63:0] zext_ln75_fu_1339_p1;
wire  signed [8:0] sext_ln76_3_fu_1375_p1;
wire  signed [8:0] sext_ln76_1_fu_1372_p1;
wire   [8:0] w_new_fu_1378_p2;
wire   [0:0] tmp_34_fu_1384_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg    ap_loop_exit_ready_pp0_iter17_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [3:0] tmp_fu_1015_p1;
wire   [3:0] tmp_fu_1015_p3;
wire   [3:0] tmp_fu_1015_p5;
wire   [3:0] tmp_fu_1015_p7;
wire   [3:0] tmp_fu_1015_p9;
wire   [3:0] tmp_fu_1015_p11;
wire   [3:0] tmp_fu_1015_p13;
wire   [3:0] tmp_fu_1015_p15;
wire  signed [3:0] tmp_fu_1015_p17;
wire  signed [3:0] tmp_fu_1015_p19;
wire   [3:0] tmp_2_fu_1057_p1;
wire   [3:0] tmp_2_fu_1057_p3;
wire   [3:0] tmp_2_fu_1057_p5;
wire   [3:0] tmp_2_fu_1057_p7;
wire   [3:0] tmp_2_fu_1057_p9;
wire   [3:0] tmp_2_fu_1057_p11;
wire   [3:0] tmp_2_fu_1057_p13;
wire   [3:0] tmp_2_fu_1057_p15;
wire  signed [3:0] tmp_2_fu_1057_p17;
wire  signed [3:0] tmp_2_fu_1057_p19;
wire   [5:0] tmp_3_fu_1113_p1;
wire   [5:0] tmp_3_fu_1113_p3;
wire   [5:0] tmp_3_fu_1113_p5;
wire   [5:0] tmp_3_fu_1113_p7;
wire   [5:0] tmp_3_fu_1113_p9;
wire   [5:0] tmp_3_fu_1113_p11;
wire   [5:0] tmp_3_fu_1113_p13;
wire   [5:0] tmp_3_fu_1113_p15;
wire   [5:0] tmp_3_fu_1113_p17;
wire   [5:0] tmp_3_fu_1113_p19;
wire   [5:0] tmp_3_fu_1113_p21;
wire   [5:0] tmp_3_fu_1113_p23;
wire   [5:0] tmp_3_fu_1113_p25;
wire   [5:0] tmp_3_fu_1113_p27;
wire   [5:0] tmp_3_fu_1113_p29;
wire   [5:0] tmp_3_fu_1113_p31;
wire   [5:0] tmp_3_fu_1113_p33;
wire   [5:0] tmp_3_fu_1113_p35;
wire   [5:0] tmp_3_fu_1113_p37;
wire   [5:0] tmp_3_fu_1113_p39;
wire   [5:0] tmp_3_fu_1113_p41;
wire   [5:0] tmp_3_fu_1113_p43;
wire   [5:0] tmp_3_fu_1113_p45;
wire   [5:0] tmp_3_fu_1113_p47;
wire   [5:0] tmp_3_fu_1113_p49;
wire   [5:0] tmp_3_fu_1113_p51;
wire   [5:0] tmp_3_fu_1113_p53;
wire   [5:0] tmp_3_fu_1113_p55;
wire   [5:0] tmp_3_fu_1113_p57;
wire   [5:0] tmp_3_fu_1113_p59;
wire   [5:0] tmp_3_fu_1113_p61;
wire   [5:0] tmp_3_fu_1113_p63;
wire  signed [5:0] tmp_3_fu_1113_p65;
wire  signed [5:0] tmp_3_fu_1113_p67;
wire  signed [5:0] tmp_3_fu_1113_p69;
wire  signed [5:0] tmp_3_fu_1113_p71;
wire  signed [5:0] tmp_3_fu_1113_p73;
wire  signed [5:0] tmp_3_fu_1113_p75;
wire  signed [5:0] tmp_3_fu_1113_p77;
wire  signed [5:0] tmp_3_fu_1113_p79;
wire  signed [5:0] tmp_3_fu_1113_p81;
wire  signed [5:0] tmp_3_fu_1113_p83;
wire  signed [5:0] tmp_3_fu_1113_p85;
wire  signed [5:0] tmp_3_fu_1113_p87;
wire  signed [5:0] tmp_3_fu_1113_p89;
wire  signed [5:0] tmp_3_fu_1113_p91;
wire  signed [5:0] tmp_3_fu_1113_p93;
wire  signed [5:0] tmp_3_fu_1113_p95;
wire  signed [5:0] tmp_3_fu_1113_p97;
wire  signed [5:0] tmp_3_fu_1113_p99;
wire  signed [5:0] tmp_3_fu_1113_p101;
wire  signed [5:0] tmp_3_fu_1113_p103;
wire  signed [5:0] tmp_3_fu_1113_p105;
wire  signed [5:0] tmp_3_fu_1113_p107;
wire  signed [5:0] tmp_3_fu_1113_p109;
wire  signed [5:0] tmp_3_fu_1113_p111;
wire  signed [5:0] tmp_3_fu_1113_p113;
wire  signed [5:0] tmp_3_fu_1113_p115;
wire  signed [5:0] tmp_3_fu_1113_p117;
wire  signed [5:0] tmp_3_fu_1113_p119;
wire  signed [5:0] tmp_3_fu_1113_p121;
wire  signed [5:0] tmp_3_fu_1113_p123;
wire  signed [5:0] tmp_3_fu_1113_p125;
wire  signed [5:0] tmp_3_fu_1113_p127;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 i_fu_398 = 7'd0;
#0 j_fu_402 = 6'd0;
#0 indvar_flatten_fu_406 = 12'd0;
#0 ap_done_reg = 1'b0;
end

(* dissolve_hierarchy = "yes" *) train_step_sparsemux_21_4_2_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 2 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 2 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 2 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 2 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 2 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 2 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 2 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 2 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 2 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 2 ),
    .def_WIDTH( 2 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 2 ))
sparsemux_21_4_2_1_1_U384(
    .din0(out_pos_load),
    .din1(out_pos_1_load),
    .din2(out_pos_2_load),
    .din3(out_pos_3_load),
    .din4(out_pos_4_load),
    .din5(out_pos_5_load),
    .din6(out_pos_6_load),
    .din7(out_pos_7_load),
    .din8(out_pos_8_load),
    .din9(out_pos_9_load),
    .def(tmp_fu_1015_p21),
    .sel(trunc_ln73_fu_1011_p1),
    .dout(tmp_fu_1015_p23)
);

(* dissolve_hierarchy = "yes" *) train_step_sparsemux_21_4_2_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 2 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 2 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 2 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 2 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 2 ),
    .CASE5( 4'h5 ),
    .din5_WIDTH( 2 ),
    .CASE6( 4'h6 ),
    .din6_WIDTH( 2 ),
    .CASE7( 4'h7 ),
    .din7_WIDTH( 2 ),
    .CASE8( 4'h8 ),
    .din8_WIDTH( 2 ),
    .CASE9( 4'h9 ),
    .din9_WIDTH( 2 ),
    .def_WIDTH( 2 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 2 ))
sparsemux_21_4_2_1_1_U385(
    .din0(out_neg_load),
    .din1(out_neg_1_load),
    .din2(out_neg_2_load),
    .din3(out_neg_3_load),
    .din4(out_neg_4_load),
    .din5(out_neg_5_load),
    .din6(out_neg_6_load),
    .din7(out_neg_7_load),
    .din8(out_neg_8_load),
    .din9(out_neg_9_load),
    .def(tmp_2_fu_1057_p21),
    .sel(trunc_ln73_fu_1011_p1),
    .dout(tmp_2_fu_1057_p23)
);

(* dissolve_hierarchy = "yes" *) train_step_sparsemux_129_6_2_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 6'h0 ),
    .din0_WIDTH( 2 ),
    .CASE1( 6'h1 ),
    .din1_WIDTH( 2 ),
    .CASE2( 6'h2 ),
    .din2_WIDTH( 2 ),
    .CASE3( 6'h3 ),
    .din3_WIDTH( 2 ),
    .CASE4( 6'h4 ),
    .din4_WIDTH( 2 ),
    .CASE5( 6'h5 ),
    .din5_WIDTH( 2 ),
    .CASE6( 6'h6 ),
    .din6_WIDTH( 2 ),
    .CASE7( 6'h7 ),
    .din7_WIDTH( 2 ),
    .CASE8( 6'h8 ),
    .din8_WIDTH( 2 ),
    .CASE9( 6'h9 ),
    .din9_WIDTH( 2 ),
    .CASE10( 6'hA ),
    .din10_WIDTH( 2 ),
    .CASE11( 6'hB ),
    .din11_WIDTH( 2 ),
    .CASE12( 6'hC ),
    .din12_WIDTH( 2 ),
    .CASE13( 6'hD ),
    .din13_WIDTH( 2 ),
    .CASE14( 6'hE ),
    .din14_WIDTH( 2 ),
    .CASE15( 6'hF ),
    .din15_WIDTH( 2 ),
    .CASE16( 6'h10 ),
    .din16_WIDTH( 2 ),
    .CASE17( 6'h11 ),
    .din17_WIDTH( 2 ),
    .CASE18( 6'h12 ),
    .din18_WIDTH( 2 ),
    .CASE19( 6'h13 ),
    .din19_WIDTH( 2 ),
    .CASE20( 6'h14 ),
    .din20_WIDTH( 2 ),
    .CASE21( 6'h15 ),
    .din21_WIDTH( 2 ),
    .CASE22( 6'h16 ),
    .din22_WIDTH( 2 ),
    .CASE23( 6'h17 ),
    .din23_WIDTH( 2 ),
    .CASE24( 6'h18 ),
    .din24_WIDTH( 2 ),
    .CASE25( 6'h19 ),
    .din25_WIDTH( 2 ),
    .CASE26( 6'h1A ),
    .din26_WIDTH( 2 ),
    .CASE27( 6'h1B ),
    .din27_WIDTH( 2 ),
    .CASE28( 6'h1C ),
    .din28_WIDTH( 2 ),
    .CASE29( 6'h1D ),
    .din29_WIDTH( 2 ),
    .CASE30( 6'h1E ),
    .din30_WIDTH( 2 ),
    .CASE31( 6'h1F ),
    .din31_WIDTH( 2 ),
    .CASE32( 6'h20 ),
    .din32_WIDTH( 2 ),
    .CASE33( 6'h21 ),
    .din33_WIDTH( 2 ),
    .CASE34( 6'h22 ),
    .din34_WIDTH( 2 ),
    .CASE35( 6'h23 ),
    .din35_WIDTH( 2 ),
    .CASE36( 6'h24 ),
    .din36_WIDTH( 2 ),
    .CASE37( 6'h25 ),
    .din37_WIDTH( 2 ),
    .CASE38( 6'h26 ),
    .din38_WIDTH( 2 ),
    .CASE39( 6'h27 ),
    .din39_WIDTH( 2 ),
    .CASE40( 6'h28 ),
    .din40_WIDTH( 2 ),
    .CASE41( 6'h29 ),
    .din41_WIDTH( 2 ),
    .CASE42( 6'h2A ),
    .din42_WIDTH( 2 ),
    .CASE43( 6'h2B ),
    .din43_WIDTH( 2 ),
    .CASE44( 6'h2C ),
    .din44_WIDTH( 2 ),
    .CASE45( 6'h2D ),
    .din45_WIDTH( 2 ),
    .CASE46( 6'h2E ),
    .din46_WIDTH( 2 ),
    .CASE47( 6'h2F ),
    .din47_WIDTH( 2 ),
    .CASE48( 6'h30 ),
    .din48_WIDTH( 2 ),
    .CASE49( 6'h31 ),
    .din49_WIDTH( 2 ),
    .CASE50( 6'h32 ),
    .din50_WIDTH( 2 ),
    .CASE51( 6'h33 ),
    .din51_WIDTH( 2 ),
    .CASE52( 6'h34 ),
    .din52_WIDTH( 2 ),
    .CASE53( 6'h35 ),
    .din53_WIDTH( 2 ),
    .CASE54( 6'h36 ),
    .din54_WIDTH( 2 ),
    .CASE55( 6'h37 ),
    .din55_WIDTH( 2 ),
    .CASE56( 6'h38 ),
    .din56_WIDTH( 2 ),
    .CASE57( 6'h39 ),
    .din57_WIDTH( 2 ),
    .CASE58( 6'h3A ),
    .din58_WIDTH( 2 ),
    .CASE59( 6'h3B ),
    .din59_WIDTH( 2 ),
    .CASE60( 6'h3C ),
    .din60_WIDTH( 2 ),
    .CASE61( 6'h3D ),
    .din61_WIDTH( 2 ),
    .CASE62( 6'h3E ),
    .din62_WIDTH( 2 ),
    .CASE63( 6'h3F ),
    .din63_WIDTH( 2 ),
    .def_WIDTH( 2 ),
    .sel_WIDTH( 6 ),
    .dout_WIDTH( 2 ))
sparsemux_129_6_2_1_1_U386(
    .din0(in_pos),
    .din1(in_pos_1),
    .din2(in_pos_2),
    .din3(in_pos_3),
    .din4(in_pos_4),
    .din5(in_pos_5),
    .din6(in_pos_6),
    .din7(in_pos_7),
    .din8(in_pos_8),
    .din9(in_pos_9),
    .din10(in_pos_10),
    .din11(in_pos_11),
    .din12(in_pos_12),
    .din13(in_pos_13),
    .din14(in_pos_14),
    .din15(in_pos_15),
    .din16(in_pos_16),
    .din17(in_pos_17),
    .din18(in_pos_18),
    .din19(in_pos_19),
    .din20(in_pos_20),
    .din21(in_pos_21),
    .din22(in_pos_22),
    .din23(in_pos_23),
    .din24(in_pos_24),
    .din25(in_pos_25),
    .din26(in_pos_26),
    .din27(in_pos_27),
    .din28(in_pos_28),
    .din29(in_pos_29),
    .din30(in_pos_30),
    .din31(in_pos_31),
    .din32(in_pos_32),
    .din33(in_pos_33),
    .din34(in_pos_34),
    .din35(in_pos_35),
    .din36(in_pos_36),
    .din37(in_pos_37),
    .din38(in_pos_38),
    .din39(in_pos_39),
    .din40(in_pos_40),
    .din41(in_pos_41),
    .din42(in_pos_42),
    .din43(in_pos_43),
    .din44(in_pos_44),
    .din45(in_pos_45),
    .din46(in_pos_46),
    .din47(in_pos_47),
    .din48(in_pos_48),
    .din49(in_pos_49),
    .din50(in_pos_50),
    .din51(in_pos_51),
    .din52(in_pos_52),
    .din53(in_pos_53),
    .din54(in_pos_54),
    .din55(in_pos_55),
    .din56(in_pos_56),
    .din57(in_pos_57),
    .din58(in_pos_58),
    .din59(in_pos_59),
    .din60(in_pos_60),
    .din61(in_pos_61),
    .din62(in_pos_62),
    .din63(in_pos_63),
    .def(tmp_3_fu_1113_p129),
    .sel(tmp_3_fu_1113_p130),
    .dout(tmp_3_fu_1113_p131)
);

train_step_mul_2s_3s_4_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 2 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 4 ))
mul_2s_3s_4_1_1_U387(
    .din0(tmp_3_reg_1865),
    .din1(delta_reg_1855),
    .dout(mul_ln76_fu_1366_p2)
);

train_step_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter17_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_grp1))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_398 <= 7'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            i_fu_398 <= add_ln75_fu_1313_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln73_fu_960_p2 == 1'd0))) begin
            indvar_flatten_fu_406 <= add_ln73_fu_966_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_406 <= 12'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_grp1))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_402 <= 6'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            j_fu_402 <= select_ln73_1_fu_1003_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        WEIGHTS_addr_read_reg_1882 <= m_axi_WEIGHTS_0_RDATA;
        WEIGHTS_addr_reg_1870 <= add_ln76_fu_1351_p2;
        WEIGHTS_addr_reg_1870_pp0_iter10_reg <= WEIGHTS_addr_reg_1870_pp0_iter9_reg;
        WEIGHTS_addr_reg_1870_pp0_iter11_reg <= WEIGHTS_addr_reg_1870_pp0_iter10_reg;
        WEIGHTS_addr_reg_1870_pp0_iter3_reg <= WEIGHTS_addr_reg_1870;
        WEIGHTS_addr_reg_1870_pp0_iter4_reg <= WEIGHTS_addr_reg_1870_pp0_iter3_reg;
        WEIGHTS_addr_reg_1870_pp0_iter5_reg <= WEIGHTS_addr_reg_1870_pp0_iter4_reg;
        WEIGHTS_addr_reg_1870_pp0_iter6_reg <= WEIGHTS_addr_reg_1870_pp0_iter5_reg;
        WEIGHTS_addr_reg_1870_pp0_iter7_reg <= WEIGHTS_addr_reg_1870_pp0_iter6_reg;
        WEIGHTS_addr_reg_1870_pp0_iter8_reg <= WEIGHTS_addr_reg_1870_pp0_iter7_reg;
        WEIGHTS_addr_reg_1870_pp0_iter9_reg <= WEIGHTS_addr_reg_1870_pp0_iter8_reg;
        mul_ln76_reg_1877 <= mul_ln76_fu_1366_p2;
        mul_ln76_reg_1877_pp0_iter10_reg <= mul_ln76_reg_1877_pp0_iter9_reg;
        mul_ln76_reg_1877_pp0_iter11_reg <= mul_ln76_reg_1877_pp0_iter10_reg;
        mul_ln76_reg_1877_pp0_iter3_reg <= mul_ln76_reg_1877;
        mul_ln76_reg_1877_pp0_iter4_reg <= mul_ln76_reg_1877_pp0_iter3_reg;
        mul_ln76_reg_1877_pp0_iter5_reg <= mul_ln76_reg_1877_pp0_iter4_reg;
        mul_ln76_reg_1877_pp0_iter6_reg <= mul_ln76_reg_1877_pp0_iter5_reg;
        mul_ln76_reg_1877_pp0_iter7_reg <= mul_ln76_reg_1877_pp0_iter6_reg;
        mul_ln76_reg_1877_pp0_iter8_reg <= mul_ln76_reg_1877_pp0_iter7_reg;
        mul_ln76_reg_1877_pp0_iter9_reg <= mul_ln76_reg_1877_pp0_iter8_reg;
        select_ln78_reg_1887[7 : 1] <= select_ln78_fu_1392_p3[7 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_grp1))) begin
        delta_reg_1855 <= delta_fu_1099_p2;
        empty_reg_1860 <= empty_fu_1105_p1;
        select_ln73_reg_1850 <= select_ln73_fu_989_p3;
        tmp_3_reg_1865 <= tmp_3_fu_1113_p131;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_grp1))) begin
        WEIGHTS_blk_n_AR = m_axi_WEIGHTS_0_ARREADY;
    end else begin
        WEIGHTS_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_grp1))) begin
        WEIGHTS_blk_n_AW = m_axi_WEIGHTS_0_AWREADY;
    end else begin
        WEIGHTS_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_grp1))) begin
        WEIGHTS_blk_n_B = m_axi_WEIGHTS_0_BVALID;
    end else begin
        WEIGHTS_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_grp1))) begin
        WEIGHTS_blk_n_R = m_axi_WEIGHTS_0_RVALID;
    end else begin
        WEIGHTS_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0_grp1))) begin
        WEIGHTS_blk_n_W = m_axi_WEIGHTS_0_WREADY;
    end else begin
        WEIGHTS_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln73_fu_960_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter17_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 12'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_406;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001_grp1))) begin
        m_axi_WEIGHTS_0_ARVALID = 1'b1;
    end else begin
        m_axi_WEIGHTS_0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001_grp1))) begin
        m_axi_WEIGHTS_0_AWVALID = 1'b1;
    end else begin
        m_axi_WEIGHTS_0_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001_grp1))) begin
        m_axi_WEIGHTS_0_BREADY = 1'b1;
    end else begin
        m_axi_WEIGHTS_0_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001_grp1))) begin
        m_axi_WEIGHTS_0_RREADY = 1'b1;
    end else begin
        m_axi_WEIGHTS_0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001_grp1))) begin
        m_axi_WEIGHTS_0_WVALID = 1'b1;
    end else begin
        m_axi_WEIGHTS_0_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln73_1_fu_997_p2 = (j_fu_402 + 6'd1);

assign add_ln73_fu_966_p2 = (ap_sig_allocacmp_indvar_flatten_load + 12'd1);

assign add_ln75_fu_1313_p2 = (select_ln73_fu_989_p3 + 7'd1);

assign add_ln76_1_fu_1346_p2 = (zext_ln75_1_fu_1343_p1 + W1);

assign add_ln76_fu_1351_p2 = (add_ln76_1_fu_1346_p2 + zext_ln75_fu_1339_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001_grp1 = (((ap_enable_reg_pp0_iter18 == 1'b1) & (m_axi_WEIGHTS_0_BVALID == 1'b0)) | ((ap_enable_reg_pp0_iter11 == 1'b1) & (m_axi_WEIGHTS_0_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter18 == 1'b1) & (m_axi_WEIGHTS_0_BVALID == 1'b0)) | ((m_axi_WEIGHTS_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b1)) | ((m_axi_WEIGHTS_0_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b1)) | ((ap_enable_reg_pp0_iter11 == 1'b1) & (m_axi_WEIGHTS_0_RVALID == 1'b0)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (m_axi_WEIGHTS_0_ARREADY == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_grp1 = (((ap_enable_reg_pp0_iter18 == 1'b1) & (m_axi_WEIGHTS_0_BVALID == 1'b0)) | ((m_axi_WEIGHTS_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b1)) | ((m_axi_WEIGHTS_0_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b1)) | ((ap_enable_reg_pp0_iter11 == 1'b1) & (m_axi_WEIGHTS_0_RVALID == 1'b0)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (m_axi_WEIGHTS_0_ARREADY == 1'b0)));
end

assign ap_block_pp0_stage0_grp1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter18 == 1'b1) & (m_axi_WEIGHTS_0_BVALID == 1'b0)) | ((m_axi_WEIGHTS_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b1)) | ((m_axi_WEIGHTS_0_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b1)) | ((ap_enable_reg_pp0_iter11 == 1'b1) & (m_axi_WEIGHTS_0_RVALID == 1'b0)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (m_axi_WEIGHTS_0_ARREADY == 1'b0)));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign delta_fu_1099_p2 = ($signed(sext_ln74_fu_1053_p1) - $signed(sext_ln74_1_fu_1095_p1));

assign empty_fu_1105_p1 = select_ln73_1_fu_1003_p3[4:0];

assign icmp_ln73_fu_960_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 12'd2048) ? 1'b1 : 1'b0);

assign icmp_ln75_fu_983_p2 = ((i_fu_398 == 7'd64) ? 1'b1 : 1'b0);

assign m_axi_WEIGHTS_0_ARADDR = WEIGHTS_addr_reg_1870;

assign m_axi_WEIGHTS_0_ARBURST = 2'd0;

assign m_axi_WEIGHTS_0_ARCACHE = 4'd0;

assign m_axi_WEIGHTS_0_ARID = 1'd0;

assign m_axi_WEIGHTS_0_ARLEN = 64'd1;

assign m_axi_WEIGHTS_0_ARLOCK = 2'd0;

assign m_axi_WEIGHTS_0_ARPROT = 3'd0;

assign m_axi_WEIGHTS_0_ARQOS = 4'd0;

assign m_axi_WEIGHTS_0_ARREGION = 4'd0;

assign m_axi_WEIGHTS_0_ARSIZE = 3'd0;

assign m_axi_WEIGHTS_0_ARUSER = 1'd0;

assign m_axi_WEIGHTS_0_AWADDR = WEIGHTS_addr_reg_1870_pp0_iter11_reg;

assign m_axi_WEIGHTS_0_AWBURST = 2'd0;

assign m_axi_WEIGHTS_0_AWCACHE = 4'd0;

assign m_axi_WEIGHTS_0_AWID = 1'd0;

assign m_axi_WEIGHTS_0_AWLEN = 64'd1;

assign m_axi_WEIGHTS_0_AWLOCK = 2'd0;

assign m_axi_WEIGHTS_0_AWPROT = 3'd0;

assign m_axi_WEIGHTS_0_AWQOS = 4'd0;

assign m_axi_WEIGHTS_0_AWREGION = 4'd0;

assign m_axi_WEIGHTS_0_AWSIZE = 3'd0;

assign m_axi_WEIGHTS_0_AWUSER = 1'd0;

assign m_axi_WEIGHTS_0_WDATA = select_ln78_reg_1887;

assign m_axi_WEIGHTS_0_WID = 1'd0;

assign m_axi_WEIGHTS_0_WLAST = 1'b0;

assign m_axi_WEIGHTS_0_WSTRB = 1'd1;

assign m_axi_WEIGHTS_0_WUSER = 1'd0;

assign select_ln73_1_fu_1003_p3 = ((icmp_ln75_fu_983_p2[0:0] == 1'b1) ? add_ln73_1_fu_997_p2 : j_fu_402);

assign select_ln73_fu_989_p3 = ((icmp_ln75_fu_983_p2[0:0] == 1'b1) ? 7'd0 : i_fu_398);

assign select_ln78_fu_1392_p3 = ((tmp_34_fu_1384_p3[0:0] == 1'b1) ? 8'd255 : 8'd1);

assign sext_ln74_1_fu_1095_p1 = $signed(tmp_2_fu_1057_p23);

assign sext_ln74_fu_1053_p1 = $signed(tmp_fu_1015_p23);

assign sext_ln76_1_fu_1372_p1 = WEIGHTS_addr_read_reg_1882;

assign sext_ln76_3_fu_1375_p1 = $signed(mul_ln76_reg_1877_pp0_iter11_reg);

assign tmp_2_fu_1057_p21 = 'bx;

assign tmp_34_fu_1384_p3 = w_new_fu_1378_p2[32'd8];

assign tmp_3_fu_1113_p129 = 'bx;

assign tmp_3_fu_1113_p130 = select_ln73_fu_989_p3[5:0];

assign tmp_4_fu_1332_p3 = {{empty_reg_1860}, {6'd0}};

assign tmp_fu_1015_p21 = 'bx;

assign trunc_ln73_fu_1011_p1 = select_ln73_1_fu_1003_p3[3:0];

assign w_new_fu_1378_p2 = ($signed(sext_ln76_3_fu_1375_p1) + $signed(sext_ln76_1_fu_1372_p1));

assign zext_ln75_1_fu_1343_p1 = select_ln73_reg_1850;

assign zext_ln75_fu_1339_p1 = tmp_4_fu_1332_p3;

always @ (posedge ap_clk) begin
    select_ln78_reg_1887[0] <= 1'b1;
end

endmodule //train_step_train_step_Pipeline_VITIS_LOOP_73_1_VITIS_LOOP_75_2
