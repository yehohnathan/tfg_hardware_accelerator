-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity train_step_train_step_Pipeline_VITIS_LOOP_136_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    W1_out_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    W1_out_ce0 : OUT STD_LOGIC;
    W1_out_we0 : OUT STD_LOGIC;
    W1_out_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    W1_out_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    W1_out_ce1 : OUT STD_LOGIC;
    W1_out_we1 : OUT STD_LOGIC;
    W1_out_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    W1_0_0_load : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_0_1_load : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_0_2_load : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_0_3_load : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_1_0_load : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_1_1_load : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_1_2_load : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_1_3_load : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_2_0_load : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_2_1_load : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_2_2_load : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_2_3_load : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_3_0_load : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_3_1_load : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_3_2_load : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_3_3_load : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_4_0_load : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_4_1_load : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_4_2_load : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_4_3_load : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_5_0_load : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_5_1_load : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_5_2_load : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_5_3_load : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_6_0_load : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_6_1_load : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_6_2_load : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_6_3_load : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_7_0_load : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_7_1_load : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_7_2_load : IN STD_LOGIC_VECTOR (1 downto 0);
    W1_7_3_load : IN STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of train_step_train_step_Pipeline_VITIS_LOOP_136_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln136_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal trunc_ln136_fu_411_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln136_reg_754 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_499_p11 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_reg_764 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_523_p11 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_reg_769 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_547_p11 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_reg_774 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_571_p11 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_reg_779 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_fu_595_p11 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_reg_784 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_fu_619_p11 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_reg_789 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln138_fu_423_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln138_1_fu_436_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln138_2_fu_655_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln138_3_fu_667_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln138_4_fu_687_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln138_5_fu_699_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln138_6_fu_719_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln138_7_fu_731_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_122 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal add_ln136_fu_405_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_2 : STD_LOGIC_VECTOR (2 downto 0);
    signal W1_out_we1_local : STD_LOGIC;
    signal W1_out_d1_local : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_cast_fu_465_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal W1_out_ce1_local : STD_LOGIC;
    signal W1_out_address1_local : STD_LOGIC_VECTOR (4 downto 0);
    signal W1_out_we0_local : STD_LOGIC;
    signal W1_out_d0_local : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_cast_fu_494_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal W1_out_ce0_local : STD_LOGIC;
    signal W1_out_address0_local : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_cast_fu_672_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_cast_fu_676_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_cast_fu_704_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_cast_fu_708_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_cast_fu_736_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln138_fu_740_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_415_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_fu_428_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_441_p9 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_441_p11 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_470_p9 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_470_p11 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_499_p9 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_523_p9 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_547_p9 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_571_p9 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_fu_595_p9 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_fu_619_p9 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_648_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_10_fu_660_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_11_fu_680_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_12_fu_692_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_13_fu_712_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_14_fu_724_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal tmp_fu_441_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_441_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_441_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_441_p7 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_470_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_470_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_470_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_470_p7 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_499_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_499_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_499_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_499_p7 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_523_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_523_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_523_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_523_p7 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_547_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_547_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_547_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_547_p7 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_571_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_571_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_571_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_571_p7 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_fu_595_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_fu_595_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_fu_595_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_fu_595_p7 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_fu_619_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_fu_619_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_fu_619_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_fu_619_p7 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component train_step_sparsemux_9_2_2_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (1 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (1 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (1 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (1 downto 0);
        din3_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (1 downto 0);
        din1 : IN STD_LOGIC_VECTOR (1 downto 0);
        din2 : IN STD_LOGIC_VECTOR (1 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        def : IN STD_LOGIC_VECTOR (1 downto 0);
        sel : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component train_step_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_9_2_2_1_1_U156 : component train_step_sparsemux_9_2_2_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 2,
        CASE1 => "01",
        din1_WIDTH => 2,
        CASE2 => "10",
        din2_WIDTH => 2,
        CASE3 => "11",
        din3_WIDTH => 2,
        def_WIDTH => 2,
        sel_WIDTH => 2,
        dout_WIDTH => 2)
    port map (
        din0 => W1_0_0_load,
        din1 => W1_0_1_load,
        din2 => W1_0_2_load,
        din3 => W1_0_3_load,
        def => tmp_fu_441_p9,
        sel => trunc_ln136_fu_411_p1,
        dout => tmp_fu_441_p11);

    sparsemux_9_2_2_1_1_U157 : component train_step_sparsemux_9_2_2_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 2,
        CASE1 => "01",
        din1_WIDTH => 2,
        CASE2 => "10",
        din2_WIDTH => 2,
        CASE3 => "11",
        din3_WIDTH => 2,
        def_WIDTH => 2,
        sel_WIDTH => 2,
        dout_WIDTH => 2)
    port map (
        din0 => W1_1_0_load,
        din1 => W1_1_1_load,
        din2 => W1_1_2_load,
        din3 => W1_1_3_load,
        def => tmp_1_fu_470_p9,
        sel => trunc_ln136_fu_411_p1,
        dout => tmp_1_fu_470_p11);

    sparsemux_9_2_2_1_1_U158 : component train_step_sparsemux_9_2_2_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 2,
        CASE1 => "01",
        din1_WIDTH => 2,
        CASE2 => "10",
        din2_WIDTH => 2,
        CASE3 => "11",
        din3_WIDTH => 2,
        def_WIDTH => 2,
        sel_WIDTH => 2,
        dout_WIDTH => 2)
    port map (
        din0 => W1_2_0_load,
        din1 => W1_2_1_load,
        din2 => W1_2_2_load,
        din3 => W1_2_3_load,
        def => tmp_2_fu_499_p9,
        sel => trunc_ln136_fu_411_p1,
        dout => tmp_2_fu_499_p11);

    sparsemux_9_2_2_1_1_U159 : component train_step_sparsemux_9_2_2_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 2,
        CASE1 => "01",
        din1_WIDTH => 2,
        CASE2 => "10",
        din2_WIDTH => 2,
        CASE3 => "11",
        din3_WIDTH => 2,
        def_WIDTH => 2,
        sel_WIDTH => 2,
        dout_WIDTH => 2)
    port map (
        din0 => W1_3_0_load,
        din1 => W1_3_1_load,
        din2 => W1_3_2_load,
        din3 => W1_3_3_load,
        def => tmp_3_fu_523_p9,
        sel => trunc_ln136_fu_411_p1,
        dout => tmp_3_fu_523_p11);

    sparsemux_9_2_2_1_1_U160 : component train_step_sparsemux_9_2_2_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 2,
        CASE1 => "01",
        din1_WIDTH => 2,
        CASE2 => "10",
        din2_WIDTH => 2,
        CASE3 => "11",
        din3_WIDTH => 2,
        def_WIDTH => 2,
        sel_WIDTH => 2,
        dout_WIDTH => 2)
    port map (
        din0 => W1_4_0_load,
        din1 => W1_4_1_load,
        din2 => W1_4_2_load,
        din3 => W1_4_3_load,
        def => tmp_4_fu_547_p9,
        sel => trunc_ln136_fu_411_p1,
        dout => tmp_4_fu_547_p11);

    sparsemux_9_2_2_1_1_U161 : component train_step_sparsemux_9_2_2_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 2,
        CASE1 => "01",
        din1_WIDTH => 2,
        CASE2 => "10",
        din2_WIDTH => 2,
        CASE3 => "11",
        din3_WIDTH => 2,
        def_WIDTH => 2,
        sel_WIDTH => 2,
        dout_WIDTH => 2)
    port map (
        din0 => W1_5_0_load,
        din1 => W1_5_1_load,
        din2 => W1_5_2_load,
        din3 => W1_5_3_load,
        def => tmp_5_fu_571_p9,
        sel => trunc_ln136_fu_411_p1,
        dout => tmp_5_fu_571_p11);

    sparsemux_9_2_2_1_1_U162 : component train_step_sparsemux_9_2_2_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 2,
        CASE1 => "01",
        din1_WIDTH => 2,
        CASE2 => "10",
        din2_WIDTH => 2,
        CASE3 => "11",
        din3_WIDTH => 2,
        def_WIDTH => 2,
        sel_WIDTH => 2,
        dout_WIDTH => 2)
    port map (
        din0 => W1_6_0_load,
        din1 => W1_6_1_load,
        din2 => W1_6_2_load,
        din3 => W1_6_3_load,
        def => tmp_6_fu_595_p9,
        sel => trunc_ln136_fu_411_p1,
        dout => tmp_6_fu_595_p11);

    sparsemux_9_2_2_1_1_U163 : component train_step_sparsemux_9_2_2_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 2,
        CASE1 => "01",
        din1_WIDTH => 2,
        CASE2 => "10",
        din2_WIDTH => 2,
        CASE3 => "11",
        din3_WIDTH => 2,
        def_WIDTH => 2,
        sel_WIDTH => 2,
        dout_WIDTH => 2)
    port map (
        din0 => W1_7_0_load,
        din1 => W1_7_1_load,
        din2 => W1_7_2_load,
        din3 => W1_7_3_load,
        def => tmp_7_fu_619_p9,
        sel => trunc_ln136_fu_411_p1,
        dout => tmp_7_fu_619_p11);

    flow_control_loop_pipe_sequential_init_U : component train_step_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    j_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln136_fu_399_p2 = ap_const_lv1_0)) then 
                    j_fu_122 <= add_ln136_fu_405_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_122 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_2_reg_764 <= tmp_2_fu_499_p11;
                tmp_3_reg_769 <= tmp_3_fu_523_p11;
                tmp_4_reg_774 <= tmp_4_fu_547_p11;
                tmp_5_reg_779 <= tmp_5_fu_571_p11;
                tmp_6_reg_784 <= tmp_6_fu_595_p11;
                tmp_7_reg_789 <= tmp_7_fu_619_p11;
                trunc_ln136_reg_754 <= trunc_ln136_fu_411_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln136_fu_399_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((icmp_ln136_fu_399_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    W1_out_address0 <= W1_out_address0_local;

    W1_out_address0_local_assign_proc : process(ap_CS_fsm_state1, icmp_ln136_fu_399_p2, ap_CS_fsm_state4, zext_ln138_1_fu_436_p1, ap_CS_fsm_state2, zext_ln138_3_fu_667_p1, ap_CS_fsm_state3, zext_ln138_5_fu_699_p1, zext_ln138_7_fu_731_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            W1_out_address0_local <= zext_ln138_7_fu_731_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            W1_out_address0_local <= zext_ln138_5_fu_699_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            W1_out_address0_local <= zext_ln138_3_fu_667_p1(5 - 1 downto 0);
        elsif (((icmp_ln136_fu_399_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            W1_out_address0_local <= zext_ln138_1_fu_436_p1(5 - 1 downto 0);
        else 
            W1_out_address0_local <= "XXXXX";
        end if; 
    end process;

    W1_out_address1 <= W1_out_address1_local;

    W1_out_address1_local_assign_proc : process(ap_CS_fsm_state1, icmp_ln136_fu_399_p2, ap_CS_fsm_state4, zext_ln138_fu_423_p1, zext_ln138_2_fu_655_p1, ap_CS_fsm_state2, zext_ln138_4_fu_687_p1, ap_CS_fsm_state3, zext_ln138_6_fu_719_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            W1_out_address1_local <= zext_ln138_6_fu_719_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            W1_out_address1_local <= zext_ln138_4_fu_687_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            W1_out_address1_local <= zext_ln138_2_fu_655_p1(5 - 1 downto 0);
        elsif (((icmp_ln136_fu_399_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            W1_out_address1_local <= zext_ln138_fu_423_p1(5 - 1 downto 0);
        else 
            W1_out_address1_local <= "XXXXX";
        end if; 
    end process;

    W1_out_ce0 <= W1_out_ce0_local;

    W1_out_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln136_fu_399_p2, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((icmp_ln136_fu_399_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            W1_out_ce0_local <= ap_const_logic_1;
        else 
            W1_out_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    W1_out_ce1 <= W1_out_ce1_local;

    W1_out_ce1_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln136_fu_399_p2, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((icmp_ln136_fu_399_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            W1_out_ce1_local <= ap_const_logic_1;
        else 
            W1_out_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    W1_out_d0 <= W1_out_d0_local;

    W1_out_d0_local_assign_proc : process(ap_CS_fsm_state1, icmp_ln136_fu_399_p2, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state3, tmp_1_cast_fu_494_p1, tmp_3_cast_fu_676_p1, tmp_5_cast_fu_708_p1, sext_ln138_fu_740_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            W1_out_d0_local <= sext_ln138_fu_740_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            W1_out_d0_local <= tmp_5_cast_fu_708_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            W1_out_d0_local <= tmp_3_cast_fu_676_p1;
        elsif (((icmp_ln136_fu_399_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            W1_out_d0_local <= tmp_1_cast_fu_494_p1;
        else 
            W1_out_d0_local <= "XXXXXXXX";
        end if; 
    end process;

    W1_out_d1 <= W1_out_d1_local;

    W1_out_d1_local_assign_proc : process(ap_CS_fsm_state1, icmp_ln136_fu_399_p2, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state3, tmp_cast_fu_465_p1, tmp_2_cast_fu_672_p1, tmp_4_cast_fu_704_p1, tmp_6_cast_fu_736_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            W1_out_d1_local <= tmp_6_cast_fu_736_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            W1_out_d1_local <= tmp_4_cast_fu_704_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            W1_out_d1_local <= tmp_2_cast_fu_672_p1;
        elsif (((icmp_ln136_fu_399_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            W1_out_d1_local <= tmp_cast_fu_465_p1;
        else 
            W1_out_d1_local <= "XXXXXXXX";
        end if; 
    end process;

    W1_out_we0 <= W1_out_we0_local;

    W1_out_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln136_fu_399_p2, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((icmp_ln136_fu_399_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            W1_out_we0_local <= ap_const_logic_1;
        else 
            W1_out_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    W1_out_we1 <= W1_out_we1_local;

    W1_out_we1_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln136_fu_399_p2, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((icmp_ln136_fu_399_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            W1_out_we1_local <= ap_const_logic_1;
        else 
            W1_out_we1_local <= ap_const_logic_0;
        end if; 
    end process;

    add_ln136_fu_405_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_2) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1_pp0_stage0_iter0)
    begin
        if ((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln136_fu_399_p2)
    begin
        if (((icmp_ln136_fu_399_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_2_assign_proc : process(ap_CS_fsm_state1, j_fu_122, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_2 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_j_2 <= j_fu_122;
        end if; 
    end process;

    icmp_ln136_fu_399_p2 <= "1" when (ap_sig_allocacmp_j_2 = ap_const_lv3_4) else "0";
        sext_ln138_fu_740_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_reg_789),8));

    tmp_10_fu_660_p3 <= (trunc_ln136_reg_754 & ap_const_lv3_3);
    tmp_11_fu_680_p3 <= (trunc_ln136_reg_754 & ap_const_lv3_4);
    tmp_12_fu_692_p3 <= (trunc_ln136_reg_754 & ap_const_lv3_5);
    tmp_13_fu_712_p3 <= (trunc_ln136_reg_754 & ap_const_lv3_6);
    tmp_14_fu_724_p3 <= (trunc_ln136_reg_754 & ap_const_lv3_7);
        tmp_1_cast_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_470_p11),8));

    tmp_1_fu_470_p9 <= "XX";
        tmp_2_cast_fu_672_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_reg_764),8));

    tmp_2_fu_499_p9 <= "XX";
        tmp_3_cast_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_reg_769),8));

    tmp_3_fu_523_p9 <= "XX";
        tmp_4_cast_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_reg_774),8));

    tmp_4_fu_547_p9 <= "XX";
        tmp_5_cast_fu_708_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_reg_779),8));

    tmp_5_fu_571_p9 <= "XX";
        tmp_6_cast_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_6_reg_784),8));

    tmp_6_fu_595_p9 <= "XX";
    tmp_7_fu_619_p9 <= "XX";
    tmp_8_fu_415_p3 <= (trunc_ln136_fu_411_p1 & ap_const_lv3_0);
    tmp_9_fu_428_p3 <= (trunc_ln136_fu_411_p1 & ap_const_lv3_1);
        tmp_cast_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_441_p11),8));

    tmp_fu_441_p9 <= "XX";
    tmp_s_fu_648_p3 <= (trunc_ln136_reg_754 & ap_const_lv3_2);
    trunc_ln136_fu_411_p1 <= ap_sig_allocacmp_j_2(2 - 1 downto 0);
    zext_ln138_1_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_428_p3),64));
    zext_ln138_2_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_648_p3),64));
    zext_ln138_3_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_660_p3),64));
    zext_ln138_4_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_680_p3),64));
    zext_ln138_5_fu_699_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_692_p3),64));
    zext_ln138_6_fu_719_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_712_p3),64));
    zext_ln138_7_fu_731_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_724_p3),64));
    zext_ln138_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_415_p3),64));
end behav;
